<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muyinchen.github.io/"/>
  <updated>2017-09-18T16:59:43.413Z</updated>
  <id>https://muyinchen.github.io/</id>
  
  <author>
    <name>知秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring5源码解析-Spring中的Bean post processors</title>
    <link href="https://muyinchen.github.io/2017/09/18/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84Bean%20post%20processors/"/>
    <id>https://muyinchen.github.io/2017/09/18/Spring5源码解析-Spring中的Bean post processors/</id>
    <published>2017-09-18T02:51:32.589Z</published>
    <updated>2017-09-18T16:59:43.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的Bean-post-processors"><a href="#Spring5源码解析-Spring中的Bean-post-processors" class="headerlink" title="Spring5源码解析-Spring中的Bean post processors"></a>Spring5源码解析-Spring中的Bean post processors</h1><p>我们之前已经对<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">Spring中的bean工厂后置处理器</a>说道过了。但是，依然留下了一个类似的概念的小尾巴需要来解释，这就是bean后置处理器(bean post processors)。</p>
<p>本文将分为两部分。在第一部分，将了解下Spring的单个后处理器bean。第二部分将涉及一些后置处理器(post processors)实际使用的例子。<br><a id="more"></a></p>
<h2 id="什么是bean-post-processor？"><a href="#什么是bean-post-processor？" class="headerlink" title="什么是bean post processor？"></a>什么是bean post processor？</h2><p>bean生命周期始于加载bean的定义。通过拿到的这个定义，Spring可以构造出(<code>construct</code>嘛)bean并注入组件(因为我们常用的就是在controller里 service里使用)。之后，所有的bean都可以进行<strong>后置处理</strong>。这意味着我们可以实现一些自定义逻辑并调用它。并在调用bean的初始化方法(xml配置所定义的init-method 属性)之前和/或之后进行调用(当然默认的上下文环境是Spring容器)。</p>
<p>你不能为给定的bean类型明确指定一个bean后置处理器。每个定义的后处理器可以应用于<code>application context</code>中的所有定义的bean。后置处理器bean必须实现<strong>org.springframework.beans.factory.config.BeanPostProcessor</strong>接口并定义<code>postProcessBeforeInitialization</code>和<code>postProcessAfterInitialization</code>方法。第一个在调用初始化方法(init-method所指定的方法)之前被调用，第二个在调用初始化方法之后被调用。这两个方法都有两个参数： </p>
<ul>
<li>Object：表示已处理的bean的实例。</li>
<li>字符串：包含已处理的bean的名称。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Factory hook that allows for custom modification of new bean instances,</div><div class="line"> * e.g. checking for marker interfaces or wrapping them with proxies.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;ApplicationContexts can autodetect BeanPostProcessor beans in their</div><div class="line"> * bean definitions and apply them to any beans subsequently created.</div><div class="line"> * Plain bean factories allow for programmatic registration of post-processors,</div><div class="line"> * applying to all beans created through this factory.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Typically, post-processors that populate beans via marker interfaces</div><div class="line"> * or the like will implement &#123;<span class="doctag">@link</span> #postProcessBeforeInitialization&#125;,</div><div class="line"> * while post-processors that wrap beans with proxies will normally</div><div class="line"> * implement &#123;<span class="doctag">@link</span> #postProcessAfterInitialization&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 10.10.2003</div><div class="line"> * <span class="doctag">@see</span> InstantiationAwareBeanPostProcessor</div><div class="line"> * <span class="doctag">@see</span> DestructionAwareBeanPostProcessor</div><div class="line"> * <span class="doctag">@see</span> ConfigurableBeanFactory#addBeanPostProcessor</div><div class="line"> * <span class="doctag">@see</span> BeanFactoryPostProcessor</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;before&lt;/i&gt; any bean</div><div class="line">	 * initialization callbacks (like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</div><div class="line">	 * or a custom init-method). The bean will already be populated with property values.</div><div class="line">	 * The returned bean instance may be a wrapper around the original.</div><div class="line">	 * &lt;p&gt;The default implementation returns the given &#123;<span class="doctag">@code</span> bean&#125; as-is.</div><div class="line">	 * <span class="doctag">@param</span> bean the new bean instance</div><div class="line">	 * <span class="doctag">@param</span> beanName the name of the bean</div><div class="line">	 * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one;</div><div class="line">	 * if &#123;<span class="doctag">@code</span> null&#125;, no subsequent BeanPostProcessors will be invoked</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">return</span> bean;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;after&lt;/i&gt; any bean</div><div class="line">	 * initialization callbacks (like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</div><div class="line">	 * or a custom init-method). The bean will already be populated with property values.</div><div class="line">	 * The returned bean instance may be a wrapper around the original.</div><div class="line">	 * &lt;p&gt;In case of a FactoryBean, this callback will be invoked for both the FactoryBean</div><div class="line">	 * instance and the objects created by the FactoryBean (as of Spring 2.0). The</div><div class="line">	 * post-processor can decide whether to apply to either the FactoryBean or created</div><div class="line">	 * objects or both through corresponding &#123;<span class="doctag">@code</span> bean instanceof FactoryBean&#125; checks.</div><div class="line">	 * &lt;p&gt;This callback will also be invoked after a short-circuiting triggered by a</div><div class="line">	 * &#123;<span class="doctag">@link</span> InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&#125; method,</div><div class="line">	 * in contrast to all other BeanPostProcessor callbacks.</div><div class="line">	 * &lt;p&gt;The default implementation returns the given &#123;<span class="doctag">@code</span> bean&#125; as-is.</div><div class="line">	 * <span class="doctag">@param</span> bean the new bean instance</div><div class="line">	 * <span class="doctag">@param</span> beanName the name of the bean</div><div class="line">	 * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one;</div><div class="line">	 * if &#123;<span class="doctag">@code</span> null&#125;, no subsequent BeanPostProcessors will be invoked</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.FactoryBean</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">return</span> bean;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一起来思考下，当我们需要检测一个bean是否可以被后置处理(其实就是构造函数执行完毕，<code>init-method</code>所指定的方法执行前后所要调用的处理逻辑)。为了避免写很多的if-else判断，我们可以创建一个支持后置处理的抽象出来的接口，然后由所有bean来实现。这样，我们的代码将更加具有可读性，这也就是这个接口的抽取思想。</p>
<p>假如没有看过我的<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">Spring工厂后置处理器</a>这篇文章，请先阅读完，因为本章是对其做的一个补充来讲的。接着，要讲大家关心的东西:他们之间的一些区别。<code>Bean Factory</code>后置处理器只适用于bean定义这块。它们在对象创建之前被调用，这就是为什么他们只能更改bean元数据的原因。不像<code>BeanPostProcessors bean</code> 可以更改对象的属性。你再思考该问题，如果bean工厂后置处理器和bean后置处理器重写覆盖同一对象的属性，则最后保留的值将由bean后置处理器设置的这个，这是因为它是在bean factory后置处理器之后才被调用的。</p>
<h3 id="init-method-执行释疑"><a href="#init-method-执行释疑" class="headerlink" title="init-method 执行释疑"></a>init-method 执行释疑</h3><p>关于<code>init-method</code>的执行的位置，有些人可能有疑问，这里拿个之前存的一个例子:</p>
<p>在配置文件中添加如下Bean定义：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"InitSequenceBean"</span> <span class="attr">init-method</span>=<span class="string">"initMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitSequenceBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;  </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitSequenceBean</span><span class="params">()</span> </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"InitSequenceBean: constructor"</span>);  </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="meta">@PostConstruct</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"InitSequenceBean: postConstruct"</span>);  </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"InitSequenceBean: init-method"</span>);  </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"InitSequenceBean: afterPropertiesSet"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">InitSequenceBean: constructor</div><div class="line">InitSequenceBean: postConstruct</div><div class="line">InitSequenceBean: afterPropertiesSet</div><div class="line">InitSequenceBean: init-method</div></pre></td></tr></table></figure>
<p>通过上述输出结果，三者的先后顺序也就一目了然了：</p>
<p><strong>Constructor &gt; @PostConstruct &gt; InitializingBean &gt; init-method</strong></p>
<p><strong>@PostConstruct</strong>通过<code>Debug</code>追源码可以找到这个类:<strong>org.springframework.context.annotation.CommonAnnotationBeanPostProcessor</strong>，从命名上，我们就可以得到某些信息—&gt;这是一个<code>BeanPostProcessor</code>。</p>
<h2 id="bean后置处理器Demo"><a href="#bean后置处理器Demo" class="headerlink" title="bean后置处理器Demo"></a>bean后置处理器Demo</h2><p>在我们的例子中，我们要使在程序部署时将无法使用的bean无效化。假如我们有一个VOD流媒体网站，所有的电影都可以在一个月的第一个星期免费观看(这个仅在部署时实现此效果，因为举例嘛，完善的话可以做个定时任务啥的，后面会拿一篇来讲)。验证的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> MovieController &#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ViewChecker viewChecker;</div><div class="line"> </div><div class="line">  <span class="comment">// some of request mapped methods</span></div><div class="line"> </div><div class="line">  <span class="comment">// check method</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">movieCanBeWatched</span><span class="params">(Movie movie)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (viewChecker == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> viewChecker.canBeWatched(movie);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们对一个bean进行A&amp;B测试，以获取并格式化网店中的产品列表。第一个bean用来获取访问量最多的商品。第二个是基于用户的喜好。也就是说通过这个A&amp;B就可以得到最受欢迎的商品(本来想举个复杂的例子的，还是算了，搞简单点吧，要不篇幅太长了)。首先，我们来定义一个bean配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.bean.BeanPostProcessorSample"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewChecker"</span> <span class="attr">class</span>=<span class="string">"com.migo.movie.ViewChecker"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第一个bean代表后置处理器bean。第二个，<code>viewChecker</code>是一个用来检查用户是否可以查看电影的类。我们先来看看这第二个class的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewChecker</span> <span class="keyword">implements</span> <span class="title">ProcessedBean</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// visitors can watch movies freely between the 1st and 7th day of every month</span></div><div class="line">    Calendar calendar = Calendar.getInstance();</div><div class="line">    <span class="keyword">return</span> calendar.get(Calendar.DAY_OF_MONTH) &gt; <span class="number">8</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，代码量很少。<code>ProcessedBean</code>接口如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessedBean</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span></span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现此接口的所有bean必须实现<code>isValid()</code>方法，这样就可以用来判断该应用程序上下文是否可以使用该bean。在<code>BeanPostProcessorSample</code>中调用<code>ifValid</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorSample</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>  </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ProcessedBean) &#123;</div><div class="line">      <span class="keyword">if</span> (!((ProcessedBean)bean).isValid()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bean;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="keyword">return</span> bean;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由上可知，我们仅实现<code>afterInitialization</code>这个后置处理器方法。通过它，我们就可以确定所分析的bean可能在<code>init-method(如果指定)</code>中所设置的数据。如果分析的bean的<code>isValid()</code>是<code>false</code>，我们返回null。但请注意返回值null(再强调一遍)。如果无效bean还存在另一个依赖关系，可以看到类似于下面这样的异常(这个异常我们经常见，空指针异常)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'adminController'</span>: Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'adminService'</span>: Injection of resource dependencies failed; nested exception is </div><div class="line"><span class="comment">//也就是容器里找不到DataSource 这个bean的实例</span></div><div class="line">java.lang.IllegalArgumentException: DataSource must not be <span class="keyword">null</span></div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:<span class="number">307</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1185</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">537</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">475</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory$<span class="number">1</span>.getObject(AbstractBeanFactory.java:<span class="number">304</span>)</div><div class="line">  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">228</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">300</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">195</span>)</div><div class="line">  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class="number">700</span>)</div><div class="line">  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class="number">760</span>)</div><div class="line">  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">482</span>)</div><div class="line">  at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:<span class="number">381</span>)</div><div class="line">  at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:<span class="number">293</span>)</div><div class="line">  at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:<span class="number">106</span>)</div><div class="line">  at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:<span class="number">4701</span>)</div><div class="line">  at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5204</span>)</div><div class="line">  at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5199</span>)</div><div class="line">  at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)</div><div class="line">  at java.util.concurrent.FutureTask.run(Unknown Source)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</div><div class="line">  at java.lang.Thread.run(Unknown Source)</div><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'adminService'</span>: Injection of resource dependencies failed; nested exception is java.lang.IllegalArgumentException: DataSource must not be <span class="keyword">null</span></div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:<span class="number">307</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1185</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">537</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">475</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory$<span class="number">1</span>.getObject(AbstractBeanFactory.java:<span class="number">304</span>)</div><div class="line">  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">228</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">300</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">200</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:<span class="number">445</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:<span class="number">419</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:<span class="number">544</span>)</div><div class="line">  at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:<span class="number">150</span>)</div><div class="line">  at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:<span class="number">87</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:<span class="number">304</span>)</div><div class="line">  ... <span class="number">21</span> more</div><div class="line">Caused by: java.lang.IllegalArgumentException: DataSource must not be <span class="keyword">null</span></div><div class="line">  at org.springframework.util.Assert.notNull(Assert.java:<span class="number">112</span>)</div><div class="line">  at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.(NamedParameterJdbcTemplate.java:<span class="number">89</span>)</div><div class="line">  at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.(SimpleJdbcTemplate.java:<span class="number">70</span>)</div><div class="line">  at com.migo.service.AdminService.setDataSource(AdminService.java:<span class="number">38</span>)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">  at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">  at java.lang.reflect.Method.invoke(Unknown Source)</div><div class="line">  at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:<span class="number">159</span>)</div><div class="line">  at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:<span class="number">87</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:<span class="number">304</span>)</div><div class="line">  ... <span class="number">34</span> more</div></pre></td></tr></table></figure>
<p>这问题发生在<code>adminService</code>创建的时候：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"adminService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> <span class="keyword">implements</span> <span class="title">GenericService</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> SimpleJdbcTemplate jdbcTemplate;</div><div class="line"> </div><div class="line">  <span class="meta">@Resource</span>(name=<span class="string">"dataSource"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> SimpleJdbcTemplate(dataSource);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这篇文章，我们在bean生命周期几乎每个阶段都可以对它进行操作。我们可以使用<code>BeanFactoryPostProcessors</code>来更改<code>Bean</code>的定义，也可以使用<code>bean  post processors(后置处理器)</code>来更改bean对象。但在更改任何内容之前，你需要分析其依赖关系。因为无效的bean(通过在后置处理器方法中返回null)可能会导致所依赖bean初始化(即空指针)的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的Bean-post-processors&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的Bean-post-processors&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的Bean post processors&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的Bean post processors&lt;/h1&gt;&lt;p&gt;我们之前已经对&lt;a href=&quot;https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/&quot;&gt;Spring中的bean工厂后置处理器&lt;/a&gt;说道过了。但是，依然留下了一个类似的概念的小尾巴需要来解释，这就是bean后置处理器(bean post processors)。&lt;/p&gt;
&lt;p&gt;本文将分为两部分。在第一部分，将了解下Spring的单个后处理器bean。第二部分将涉及一些后置处理器(post processors)实际使用的例子。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的bean工厂后置处理器</title>
    <link href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <id>https://muyinchen.github.io/2017/09/16/Spring5源码解析-Spring中的bean工厂后置处理器/</id>
    <published>2017-09-16T09:49:13.051Z</published>
    <updated>2017-09-17T11:24:55.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的bean工厂后置处理器"><a href="#Spring5源码解析-Spring中的bean工厂后置处理器" class="headerlink" title="Spring5源码解析-Spring中的bean工厂后置处理器"></a>Spring5源码解析-Spring中的bean工厂后置处理器</h1><p>Spring允许我们使用bean来进行大量的操作(这也是我们面向对象思想最常用的表达方式)。我们可以决定它们在容器中是否是(单例或者是原型)唯一实例。通过bean工厂后置处理器我们还可以在<code>初始化</code>时进行一些额外的操作。</p>
<p>在这篇文章中，来介绍下<strong>bean factory post processor</strong>。在第一部分，我们来发现下这个概念背后玄机。之后我们会写一些有趣代码来让大伙更好地理解这个概念。<br><a id="more"></a></p>
<h2 id="什么是Spring工厂的后置处理器？"><a href="#什么是Spring工厂的后置处理器？" class="headerlink" title="什么是Spring工厂的后置处理器？"></a>什么是Spring工厂的后置处理器？</h2><p>有时我们可能需要在Spring应用程序中实现一些动态行为。举个简单的例子，假设在你的网站中，你要显示按时间来显示两个文本内容。上午的时候，你会显示“早安”。下午，显示的文字将是“下午好”。另外，你有两个日常部署，上午12点，另一个在晚上12点。需要强调的是，这个文本内容必须由一个bean来处理。我们现在有两个选择:每次部署时更改应用程序上下文文件(太麻烦了)，或者定义一个实现<strong>org.springframework.beans.factory.config.BeanFactoryPostProcessor</strong>接口的bean 。第二个解决方案更优雅，因为我们只需要编写一次代码，然后就可以忽视它的存在了(无须次次去修改了)。</p>
<p>那么，这个优雅的<code>BeanFactoryPostProcessor</code>是何方神圣？它是由bean实现的接口，它们可以修改其他bean的定义。请注意，只能修改定义，即构造函数参数，属性值。<code>BeanFactoryPostProcessor</code>bean在初始化“正常”bean之前被调用，这就是为什么它能修改元数据的原因(meta data)。调用是通过<strong>org.springframework.context.support.AbstractApplicationContext的</strong> <strong>protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory)</strong>来<strong>实现的</strong>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">  PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>PostProcessorRegistrationDelegate</code>里面，负责bean factory后置处理器执行的方法是:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Invoke the given BeanFactoryPostProcessor beans.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></div><div class="line">		Collection&lt;? extends BeanFactoryPostProcessor&gt; postProcessors, ConfigurableListableBeanFactory beanFactory) &#123;</div><div class="line">	<span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : postProcessors) &#123;</div><div class="line">		postProcessor.postProcessBeanFactory(beanFactory);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如你所见，由<code>BeanFactoryPostProcessor</code>实现覆盖的主要方法是<code>postProcessBeanFactory</code>。这也是我们来自己定制bean定义的地方。我们通过在<strong>org.springframework.beans.factory.config.BeanDefinition</strong>对象上进行定制。关于这点我已经<a href="https://muyinchen.github.io/2017/09/15/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E5%92%8C%E5%8E%9F%E5%9E%8Bbean/">在Spring5源码解析-Spring框架中的单例和原型bean</a>的文章中已经写过，它们(<code>BeanDefinition对象</code>)包含大量关于bean元数据的信息:构造函数参数，属性值或作用域。</p>
<h2 id="一个简单的Spring-bean厂后置处理器Demo"><a href="#一个简单的Spring-bean厂后置处理器Demo" class="headerlink" title="一个简单的Spring bean厂后置处理器Demo"></a>一个简单的Spring bean厂后置处理器Demo</h2><p>关于理论的重要部分已经都在前面进行了描述。在这部分中，我们将重点放在一个简单实用的案例上。你还记得第一部分的“早安”和“下午好”的例子？如果忘了，请回去再瞅眼的。接着，让我们尝试在代码中实现这种案例。首先，我们将在配置文件中定义一些bean:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.bean.BeanModifier"</span>&gt;</span> </div><div class="line">      </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"welcomerBean"</span> <span class="attr">class</span>=<span class="string">"com.migo.bean.Welcomer"</span> <span class="attr">init-method</span>=<span class="string">"initWelcomer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"welcomeText"</span> <span class="attr">value</span>=<span class="string">"Good morning"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第一个bean代表将实现<code>BeanFactoryPostProcessor</code>接口的bean。第二个bean是注入的类，它会在页面中显示欢迎的文本内容。他们是两个bean的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Welcomer.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcomer</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> String welcomeText;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWelcomer</span><span class="params">()</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"Welcomer is initialized"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWelcomeText</span><span class="params">(String welcomeText)</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"Setting welcomeText to: "</span>+welcomeText);</div><div class="line">    <span class="keyword">this</span>.welcomeText = welcomeText;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getWelcomeText</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.welcomeText;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Welcomer &#123;text: "</span>+<span class="keyword">this</span>.welcomeText+<span class="string">"&#125;"</span>;</div><div class="line">  &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// BeanModifier.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanModifier</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Calendar calendar = Calendar.getInstance();</div><div class="line">      <span class="keyword">if</span> (calendar.get(Calendar.AM_PM) == Calendar.PM) &#123;</div><div class="line">        BeanDefinition welcomerDef = beanFactory.getBeanDefinition(<span class="string">"welcomerBean"</span>);</div><div class="line">        welcomerDef.getPropertyValues().add(<span class="string">"welcomeText"</span>, <span class="string">"Good afternoon"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        LOGGER.error(<span class="string">"An error occurred on setting welcomeText"</span>, e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// test method</span></div><div class="line">ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/home/bartosz/webapp/src/main/resources/META-INF/applicationContext.xml"</span>);</div><div class="line"> </div><div class="line">Welcomer welcomer = (Welcomer) context.getBean(<span class="string">"welcomer"</span>);</div><div class="line">System.out.println(<span class="string">"Text: "</span>+welcomer.getWelcomeText());</div></pre></td></tr></table></figure>
<p>如果现在是下午，输出应该是:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Setting welcomeText to: Good afternoon</div><div class="line">Welcomer is initialized</div><div class="line">Text: Good afternoon</div></pre></td></tr></table></figure>
<p>我们可以看到，<code>BeanModifier</code>在<code>Welcomer</code>的真正初始化之前被调用。由于重写覆盖了<code>postProcessBeanFactory</code>方法，这样我们可以通过检查日期，并为属性<code>welcomeText</code>设置正确的值。</p>
<p>这篇文章虽短，但它描述了一些在一些“动态”场景中我们如何以一个更效率的方式来实现的实用操作。比如，你会碰到这种，我们常常见到一个游戏会有例行维护，那么我们会发现排行榜会在例行维护后刷新，你每次登录游戏也会对你的一些属性或者积分进行刷新，其实你每次登录就是又初始化了一遍你这个bean，这样，我们就可以做很多事情了，比如为最佳用户添加一些奖励积分。通过<code>BeanFactoryPostProcessor</code>这个 bean，这种处理就可以在Java方法内自动完成，无须我们在每次部署时通过手动来完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的bean工厂后置处理器&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的bean工厂后置处理器&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的bean工厂后置处理器&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的bean工厂后置处理器&lt;/h1&gt;&lt;p&gt;Spring允许我们使用bean来进行大量的操作(这也是我们面向对象思想最常用的表达方式)。我们可以决定它们在容器中是否是(单例或者是原型)唯一实例。通过bean工厂后置处理器我们还可以在&lt;code&gt;初始化&lt;/code&gt;时进行一些额外的操作。&lt;/p&gt;
&lt;p&gt;在这篇文章中，来介绍下&lt;strong&gt;bean factory post processor&lt;/strong&gt;。在第一部分，我们来发现下这个概念背后玄机。之后我们会写一些有趣代码来让大伙更好地理解这个概念。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring框架中的单例和原型bean</title>
    <link href="https://muyinchen.github.io/2017/09/15/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E5%92%8C%E5%8E%9F%E5%9E%8Bbean/"/>
    <id>https://muyinchen.github.io/2017/09/15/Spring5源码解析-Spring框架中的单例和原型bean/</id>
    <published>2017-09-15T04:59:37.635Z</published>
    <updated>2017-09-17T11:30:30.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring框架中的单例和原型bean"><a href="#Spring5源码解析-Spring框架中的单例和原型bean" class="headerlink" title="Spring5源码解析-Spring框架中的单例和原型bean"></a>Spring5源码解析-Spring框架中的单例和原型bean</h1><p>最近一直有问我单例和原型bean的一些原理性问题，这里就开一篇来说说的</p>
<p>通过Spring中的依赖注入极大方便了我们的开发。在<code>xml</code>通过<code>&lt;bean&gt;</code>定义(或者通过<code>@Bean</code>在配置类里定义)对象之后，然后只需简单地使用@Autowired注解，就可以使用由Spring上下文管理的每个对象。需要注意的是，所有这些对象在Spring中默认都是单例。</p>
<p>这一次我们会去讨论Spring如何来管理这些定义的bean。在第一部分中，我们将讲解单例和原型作用域的概念。第二部分中，我们将分析单例和原型作用域之间的依赖关系。其后说一下方法注入。最后专门对相关Spring的代码来做下分析，具体看看bean是如何构建出来的。<br><a id="more"></a></p>
<h2 id="Spring中的bean默认都是单身贵族"><a href="#Spring中的bean默认都是单身贵族" class="headerlink" title="Spring中的bean默认都是单身贵族"></a>Spring中的bean默认都是单身贵族</h2><p>Spring使用单例设计模式来管理bean？不完全是。Singleton设计模式假定它们是由Java的类加载器管理的jvm中给定类的唯一一个实例。在Spring中，还是有点不一样。默认情况下，它们为每个给定的<em>org.springframework.context.ApplicationContext</em>实例存在唯一的一个bean (有点别扭，也就是可以有多个Spring容器，每一个容器内存在唯一bean实例，之前的文章中有涉及例子的)。这意味着如果你有两个或更多上下文，所有这些上下文都由同一Java的类加载器管理(因为在同一个jvm环境中)，则可能会有多个给定bean的实例。唯一需要做到的是必须在每个上下文中定义此bean。讲那么多不如代码更有说服力:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleContextes</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// retreive two different contexts</span></div><div class="line">      ApplicationContext firstContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/home/bartosz/webapp/src/main/resources/META-INF/applicationContext.xml"</span>);</div><div class="line">      ApplicationContext secondContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/home/bartosz/webapp/src/main/resources/META-INF/applicationContext.xml"</span>);</div><div class="line"> </div><div class="line">      <span class="comment">// compare the objects from different contexts</span></div><div class="line">      ShoppingCart firstShoppingCart = (ShoppingCart) firstContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">      ShoppingCart secondShoppingCart = (ShoppingCart) secondContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">      System.out.println(<span class="string">"1. Are they the same ? "</span> + (firstShoppingCart == secondShoppingCart));</div><div class="line"> </div><div class="line">      <span class="comment">// compare the objects from the same context</span></div><div class="line">      ShoppingCart firstShoppingCartBis = (ShoppingCart) firstContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">      System.out.println(<span class="string">"2. Are they the same ? "</span>+ (firstShoppingCart == firstShoppingCartBis));</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过执行此代码，你应该得到:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. Are they the same ? <span class="keyword">false</span></div><div class="line"><span class="number">2</span>. Are they the same ? <span class="keyword">true</span></div></pre></td></tr></table></figure>
<p>所以你可以看到，bean只是一个上下文的单例。这就是为什么你不应该将Spring的单例概念与设计模式中的的单例混合在一起。</p>
<p>但是，如果要为一个定义的bean在一个上下文内可以使用不同的实例，应该怎么做？很简单，你应该将此Bean配置为原型作用域:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.migo.data.ShoppingCart"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在，在运行以前的代码之后，你可以看到如下输出:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. Are they the same ? <span class="keyword">false</span></div><div class="line"><span class="number">2</span>. Are they the same ? <span class="keyword">false</span></div></pre></td></tr></table></figure>
<p>我们已经知道两个作用域之间的区别。但在哪种情况下我们应该选择使用单例还是原型？Singleton适用于<strong>无状态的</strong>bean，即没有状态的bean。比如一个<code>service</code>，<code>DAO</code>或者<code>controller</code>。他们都没有自己的状态(<strong>举个简单的例子，一个函数<code>sin(x)</code>，这个函数本身就是无状态的，所以我们现在喜欢的函数式编程也遵循这个理念</strong>)。而是根据传输的参数执行一些操作(作为HTTP请求参数)。另一方面，我们可以通过<strong>状态</strong>bean管理一些状态。比如购物车bean，假如它是一个单例，那么两个不同消费者购买的产品将被放置在同一个对象上。而如果其中一个消费者想要删除一个产品，另一个消费者就铁定不高兴。这也就是<strong>状态类对象应该是原型</strong>。</p>
<p>这里说点题外话，不能确定时间的保证，未来会出一个用Java的代码习惯去解析vue的一些东西，内容已经总结完毕，也应用到自己的项目中了，然后得出的一些方法论，为什么在这里去说，就是因为vue也是遵循这个无状态和状态专门管理的原则的，扯远了，接着进行下一部分。</p>
<h2 id="将原型放在单例中，反之亦然"><a href="#将原型放在单例中，反之亦然" class="headerlink" title="将原型放在单例中，反之亦然"></a>将原型放在单例中，反之亦然</h2><p>通过上面的描述，很多概念都很清楚了吧，但有时候会发生一些更复杂的情况。第一个是在原型bean中放置单例。显然，如果注入的单例对象真的是一个单例的bean(没有状态)，这个真的没一点问题。想象一下，对于我们的购物车，我们需要注入产品服务。此服务只会检查添加到购物车的产品是否库存。由于服务没有状态，并且会基于在方法签名中所传递的对象进行验证，因此不存在风险。</p>
<p>另一方面，将原型bean放在单例中需要做更多的工作。我们不能在单例bean中通过使用自动注入(比如<code>@Autowired</code>注解)注入原型bean。当Spring初始化所有具有依赖关系的单例bean时，这些注入只会执行一次。这也就意味着在以下代码，<code>ShoppingCart</code>的实例将始终是相同的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ShoppingCart shoppingCart;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/addProduct/&#123;productName&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testAdd</span><span class="params">(@PathVariable(value=<span class="string">"productName"</span>)</span> String productName) </span>&#123;</div><div class="line">    Product product = <span class="keyword">new</span> Product();</div><div class="line">    product.setName(productName);</div><div class="line">    <span class="keyword">this</span>.shoppingCart.addProduct(product);</div><div class="line">    LOGGER.debug(<span class="string">"ShoppingCart is "</span>+<span class="keyword">this</span>.shoppingCart);</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译此类并进行一些URL调用:<a href="http://localhost:8080/addProduct/ice%20tea，http://localhost:8080/addProduct/milk。你将看到如下输出的顺序" target="_blank" rel="external">http://localhost:8080/addProduct/ice%20tea，http://localhost:8080/addProduct/milk。你将看到如下输出的顺序</a>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// after http://localhost:8080/addProduct/ice%20tea</span></div><div class="line">ShoppingCart is ShoppingCart &#123;products: [Product &#123;ice tea&#125;]&#125;</div><div class="line"><span class="comment">// after http://localhost:8080/addProduct/milk</span></div><div class="line">ShoppingCart is ShoppingCart &#123;products: [Product &#123;ice tea&#125;, Product &#123;milk&#125;]&#125;</div></pre></td></tr></table></figure>
<p>为了在按照我们预想情况下工作(要求不一样的<code>ShoppingCart</code>)，我们可以通过bean工厂手动获取<code>ShoppingCart</code>实例(这样就可以再一次生成一个不一样的<code>ShoppingCart</code>实例了):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/addProduct/&#123;productName&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testAdd</span><span class="params">(@PathVariable(value=<span class="string">"productName"</span>)</span> String productName) </span>&#123;</div><div class="line">    Product product = <span class="keyword">new</span> Product();</div><div class="line">    product.setName(productName);</div><div class="line"> </div><div class="line">    ShoppingCart shoppingCart = (ShoppingCart) context.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    shoppingCart.addProduct(product);</div><div class="line">    LOGGER.debug(<span class="string">"ShoppingCart is "</span>+shoppingCart);</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，你就可以日志中看到，每次调用都会有新的<code>ShoppingCart</code>实例的生成:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// after http://localhost:8080/addProduct/ice%20tea</span></div><div class="line">ShoppingCart is ShoppingCart &#123;products: [Product &#123;ice tea&#125;]&#125;</div><div class="line"><span class="comment">// after http://localhost:8080/addProduct/milk</span></div><div class="line">ShoppingCart is ShoppingCart &#123;products: [Product &#123;milk&#125;]&#125;</div></pre></td></tr></table></figure>
<h2 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h2><p>有没有别的方法在每次调用都会产生一个新实例？这就是接下来要说的<strong>方法注入</strong>的技术。它看起来有点像我们的手动去进行bean的查找，但更优雅。一个可以被上下文所感知(访问应用程序上下文可以得到)的bean将负责在单例bean中生成原型bean实例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"shoppingCartProvider"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCartProvider</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="keyword">this</span>.context = context;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> ShoppingCart <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (ShoppingCart) context.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过上面的修改，controller这里相应修改:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ShoppingCartProvider shoppingCartProvider;</div><div class="line">   </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/addProduct/&#123;productName&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testAdd</span><span class="params">(@PathVariable(value=<span class="string">"productName"</span>)</span> String productName) </span>&#123;</div><div class="line">    Product product = <span class="keyword">new</span> Product();</div><div class="line">    product.setName(productName);</div><div class="line"> </div><div class="line">    ShoppingCart shoppingCart = shoppingCartProvider.getInstance();</div><div class="line">    shoppingCart.addProduct(product);</div><div class="line">    System.out.println(<span class="string">"ShoppingCart is "</span>+shoppingCart);</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以在XML配置文件中定义。里面会有一个属性引用原型bean，并允许在每次调用时创建新的实例。它可以很轻松地在一个bean中混合更多东西:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCartProvider"</span> <span class="attr">class</span>=<span class="string">"com.migo.data.ShoppingCartProvider"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">lookup-method</span> <span class="attr">name</span>=<span class="string">"getInstance"</span> <span class="attr">bean</span>=<span class="string">"shoppingCart"</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;/<span class="name">lookup-method</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.migo.data.ShoppingCart"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCartProvider</span>   </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ShoppingCart <span class="title">getInstance</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Controller</code>的代码与实现<code>ApplicationContextAware</code>接口的provider的那个例子是一样的。而区别也仅在于provider的bean定义和实现。该定义包含一个标签查找方法。它指定必须使用哪个方法来获取bean属性中指定的bean的新实例。在我们的这个例子中，我们通过调用<code>ShoppingCartProvider</code>类的<code>getInstance</code>方法来寻找新的<code>ShoppingCart</code>的实例。需要注意的一点，类和方法都可以是抽象的。通过这样做，你可以让Spring生成将实现该方法并返回所需bean的子类。如果这个方法不是抽象的，Spring会重写覆盖它。</p>
<h2 id="Spring中的Bean类"><a href="#Spring中的Bean类" class="headerlink" title="Spring中的Bean类"></a>Spring中的Bean类</h2><p>单例的源码实现主要存在于<strong>org.springframework.beans</strong>和<strong>org.springframework.context</strong>包中。首先，从Bean包中查看<strong>BeanFactory</strong>接口。它包含两个我们绝对感兴趣的方法，可用来确定bean是单例还是原型: </p>
<ul>
<li><em>boolean isSingleton(String name)throws NoSuchBeanDefinitionException</em> </li>
<li><em>boolean isPrototype(String name)throws NoSuchBeanDefinitionException</em></li>
</ul>
<p>接下来，我们来深入一下<code>AbstractFactoryBean</code>,从这个类的注释可以知道它是作为“<code>FactoryBean实现的简单模板超类(还是直白翻译下比较好，说默认实现也觉得不靠谱)</code>”。它包含一个用来返回单例或创建原型bean的<code>getObject</code>方法的实现。原型和单例是通过<code>createInstance</code>方法在不同的时间段进行的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Simple template superclass for &#123;<span class="doctag">@link</span> FactoryBean&#125; implementations that</div><div class="line"> * creates a singleton or a prototype object, depending on a flag.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;If the "singleton" flag is &#123;<span class="doctag">@code</span> true&#125; (the default),</div><div class="line"> * this class will create the object that it creates exactly once</div><div class="line"> * on initialization and subsequently return said singleton instance</div><div class="line"> * on all calls to the &#123;<span class="doctag">@link</span> #getObject()&#125; method.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Else, this class will create a new instance every time the</div><div class="line"> * &#123;<span class="doctag">@link</span> #getObject()&#125; method is invoked. Subclasses are responsible</div><div class="line"> * for implementing the abstract &#123;<span class="doctag">@link</span> #createInstance()&#125; template</div><div class="line"> * method to actually create the object(s) to expose.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@author</span> Keith Donald</div><div class="line"> * <span class="doctag">@since</span> 1.0.2</div><div class="line"> * <span class="doctag">@see</span> #setSingleton</div><div class="line"> * <span class="doctag">@see</span> #createInstance()</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryBean</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">		<span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt;, <span class="title">BeanClassLoaderAware</span>, <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Expose the singleton instance or create a new prototype instance.</div><div class="line">	 * <span class="doctag">@see</span> #createInstance()</div><div class="line">	 * <span class="doctag">@see</span> #getEarlySingletonInterfaces()</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">if</span> (isSingleton()) &#123;</div><div class="line">			<span class="keyword">return</span> (<span class="keyword">this</span>.initialized ? <span class="keyword">this</span>.singletonInstance : getEarlySingletonInstance());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> createInstance();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">		...</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Template method that subclasses must override to construct</div><div class="line">	 * the object returned by this factory.</div><div class="line">	 * &lt;p&gt;Invoked on initialization of this FactoryBean in case of</div><div class="line">	 * a singleton; else, on each &#123;<span class="doctag">@link</span> #getObject()&#125; call.</div><div class="line">	 * <span class="doctag">@return</span> the object returned by this factory</div><div class="line">	 * <span class="doctag">@throws</span> Exception if an exception occurred during object creation</div><div class="line">	 * <span class="doctag">@see</span> #getObject()</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	...</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>另一个我们会感兴趣的一个点是<code>BeanDefinition接口</code>。<code>bean如其名</code>，它定义了一个bean属性，例如:scope，class name，factory method name，properties或constructor arguments。</p>
<p><strong>org.springframework.beans.factory.config.BeanDefinition</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A BeanDefinition describes a bean instance, which has property values,</div><div class="line"> * constructor argument values, and further information supplied by</div><div class="line"> * concrete implementations.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;This is just a minimal interface: The main intention is to allow a</div><div class="line"> * &#123;<span class="doctag">@link</span> BeanFactoryPostProcessor&#125; such as &#123;<span class="doctag">@link</span> PropertyPlaceholderConfigurer&#125;</div><div class="line"> * to introspect and modify property values and other bean metadata.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@author</span> Rob Harrop</div><div class="line"> * <span class="doctag">@since</span> 19.03.2004</div><div class="line"> * <span class="doctag">@see</span> ConfigurableListableBeanFactory#getBeanDefinition</div><div class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.support.RootBeanDefinition</div><div class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.support.ChildBeanDefinition</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinition</span> <span class="keyword">extends</span> <span class="title">AttributeAccessor</span>, <span class="title">BeanMetadataElement</span> </span>&#123;</div><div class="line">  <span class="comment">//限于篇幅，请自行查看源码，能发现很多有用的东西</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想要看到bean被初始化的位置，我们需要跳转到context包中，更准确地说就是在<code>AbstractApplicationContext</code>类(这个类我们已经接触过好多次了)中。在它的<strong>public void refresh()throws BeansException，IllegalStateException</strong>我们可以找到一些关于bean创建的片段，特别是: </p>
<ul>
<li><strong>protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory)</strong>:实现<strong>org.springframework.beans.factory.config .BeanFactoryPostProcessor</strong>接口的所有bean 都被初始化和调用。这种类型bean允许修改另一个bean的属性或构造函数参数(请看<strong>PostProcessorRegistrationDelegate</strong>的相应代码可以知道，使用<strong>BeanFactoryPostProcessor</strong>来处理我们所要用<strong>beanFactory</strong>生成的bean，这里可以直接把<strong>beanFactory</strong>看成是我们需要的bean即可)。但是请注意，在此阶段只能修改bean定义。<strong>“正常”</strong>bean实例尚未创建。关于这块会请参考文章<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">Spring中的bean工厂后置处理器</a>。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Instantiate and invoke all registered BeanFactoryPostProcessor beans,</div><div class="line">	 * respecting explicit order if given.</div><div class="line">	 * &lt;p&gt;Must be called before singleton instantiation.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</div><div class="line"></div><div class="line">		<span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></div><div class="line">		<span class="comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line">			beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.context.support.PostProcessorRegistrationDelegate</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Delegate for AbstractApplicationContext's post-processor handling.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 4.0</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostProcessorRegistrationDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></div><div class="line">			ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</div><div class="line"></div><div class="line">		<span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></div><div class="line">		Set&lt;String&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</div><div class="line">			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</div><div class="line">			List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">			List&lt;BeanDefinitionRegistryPostProcessor&gt; registryPostProcessors =</div><div class="line">					<span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</div><div class="line">				<span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</div><div class="line">					BeanDefinitionRegistryPostProcessor registryPostProcessor =</div><div class="line">							(BeanDefinitionRegistryPostProcessor) postProcessor;</div><div class="line">					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);</div><div class="line">					registryPostProcessors.add(registryPostProcessor);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					regularPostProcessors.add(postProcessor);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">...</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory)</strong>:这里上下文实例化并调用实现了<strong>org.springframework.beans.factory.config.BeanPostProcessor</strong>接口的所有bean 。实现此接口的bean包含可以在其他bean初始化之前或之后调用的回调。因为内容比较多，关于这块会请参考文章<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">Spring中的bean工厂后置处理器</a>。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Instantiate and invoke all registered BeanPostProcessor beans,</div><div class="line">	 * respecting explicit order if given.</div><div class="line">	 * &lt;p&gt;Must be called before any instantiation of application beans.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="keyword">this</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory)</strong>:主要调用定义在<strong>org.springframework.beans.factory.config.ConfigurableListableBeanFactory</strong>接口内的<code>preInstantiateSingletons</code>方法。该方法的目的是实例化所有被定义为非延迟加载的bean。如果在应用程序上下文加载时遇到BeansException异常，则可能来自此方法。当bean无法创建时，它会抛出BeansException异常。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Finish the initialization of this context's bean factory,</div><div class="line">	 * initializing all remaining singleton beans.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">// Initialize conversion service for this context.</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</div><div class="line">				beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</div><div class="line">			beanFactory.setConversionService(</div><div class="line">					beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Register a default embedded value resolver if no bean post-processor</span></div><div class="line">		<span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></div><div class="line">		<span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></div><div class="line">		<span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</div><div class="line">			beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></div><div class="line">		String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">		<span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</div><div class="line">			getBean(weaverAwareName);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Stop using the temporary ClassLoader for type matching.</span></div><div class="line">		beanFactory.setTempClassLoader(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></div><div class="line">		beanFactory.freezeConfiguration();</div><div class="line"></div><div class="line">		<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></div><div class="line">		beanFactory.preInstantiateSingletons();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			<span class="comment">// Prepare this context for refreshing.</span></div><div class="line">			prepareRefresh();</div><div class="line"></div><div class="line">			<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></div><div class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// Prepare the bean factory for use in this context.</span></div><div class="line">			prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></div><div class="line">				postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Invoke factory processors registered as beans in the context.</span></div><div class="line">				invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Register bean processors that intercept bean creation.</span></div><div class="line">				registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Initialize message source for this context.</span></div><div class="line">				initMessageSource();</div><div class="line"></div><div class="line">				<span class="comment">// Initialize event multicaster for this context.</span></div><div class="line">				initApplicationEventMulticaster();</div><div class="line"></div><div class="line">				<span class="comment">// Initialize other special beans in specific context subclasses.</span></div><div class="line">				onRefresh();</div><div class="line"></div><div class="line">				<span class="comment">// Check for listener beans and register them.</span></div><div class="line">				registerListeners();</div><div class="line"></div><div class="line">				<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></div><div class="line">				finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Last step: publish corresponding event.</span></div><div class="line">				finishRefresh();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">					logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</div><div class="line">							<span class="string">"cancelling refresh attempt: "</span> + ex);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">				destroyBeans();</div><div class="line"></div><div class="line">				<span class="comment">// Reset 'active' flag.</span></div><div class="line">				cancelRefresh(ex);</div><div class="line"></div><div class="line">				<span class="comment">// Propagate exception to caller.</span></div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">finally</span> &#123;</div><div class="line">				<span class="comment">// Reset common introspection caches in Spring's core, since we</span></div><div class="line">				<span class="comment">// might not ever need metadata for singleton beans anymore...</span></div><div class="line">				resetCommonCaches();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先，我们讲了单例和原型作用域之间的区别。第一个为每个容器创建一个对象，而第二个在每个请求时创建一个新的bean对象。单例和原型都可以一起交叉使用，但原型不能通过<code>@Autowired</code>或其他注入方式来解决。它们应该使用<code>getBean()方法</code>或<code>方法查找</code>来生成新实例。最后随意说了一说关于bean及其初始化的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring框架中的单例和原型bean&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring框架中的单例和原型bean&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring框架中的单例和原型bean&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring框架中的单例和原型bean&lt;/h1&gt;&lt;p&gt;最近一直有问我单例和原型bean的一些原理性问题，这里就开一篇来说说的&lt;/p&gt;
&lt;p&gt;通过Spring中的依赖注入极大方便了我们的开发。在&lt;code&gt;xml&lt;/code&gt;通过&lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;定义(或者通过&lt;code&gt;@Bean&lt;/code&gt;在配置类里定义)对象之后，然后只需简单地使用@Autowired注解，就可以使用由Spring上下文管理的每个对象。需要注意的是，所有这些对象在Spring中默认都是单例。&lt;/p&gt;
&lt;p&gt;这一次我们会去讨论Spring如何来管理这些定义的bean。在第一部分中，我们将讲解单例和原型作用域的概念。第二部分中，我们将分析单例和原型作用域之间的依赖关系。其后说一下方法注入。最后专门对相关Spring的代码来做下分析，具体看看bean是如何构建出来的。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的Context loader</title>
    <link href="https://muyinchen.github.io/2017/09/12/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84Context%20loader/"/>
    <id>https://muyinchen.github.io/2017/09/12/Spring5源码解析-Spring中的Context loader/</id>
    <published>2017-09-12T03:19:05.299Z</published>
    <updated>2017-09-13T06:03:51.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的Context-loader"><a href="#Spring5源码解析-Spring中的Context-loader" class="headerlink" title="Spring5源码解析-Spring中的Context loader"></a>Spring5源码解析-Spring中的Context loader</h1><p>我们已经知道，应用程序上下文是Spring管理的bean所在的容器。但是我们依然要问一个问题:这个上下文是如何创建的？那么在这篇文章中我们来探讨这个问题。</p>
<p>在第一部分中，会说下在<a href="https://muyinchen.github.io/2017/09/08/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/">Spring的应用程序上下文中</a>所谓的<strong>上下文加载器(context loader)</strong>是什么。在第二部分，我们会讨论这个加载器的代码细节。最后一部分，老规矩，写我们自己的一个自定义的loader。在继续之前，需要说一下，loader(加载器) 将根据web application和dispatcher servlet来结合进行分析。其实这也是很多人一碰到源码就像无头苍蝇，不知道从何而起了，刚开始放下所有，从大体去思考该如何入手,这里对设计模式了解就很重要了，还有，源码的类注释很重要，不多说，接着走。<br><a id="more"></a></p>
<h2 id="什么是Spring的上下文加载器-context-loader-？"><a href="#什么是Spring的上下文加载器-context-loader-？" class="headerlink" title="什么是Spring的上下文加载器(context loader)？"></a>什么是Spring的上下文加载器(context loader)？</h2><p>见名知意，上下文加载程序负责构建应用程序上下文。我们可以通过<strong>org.springframework.web.context.ContextLoaderListener的</strong>实例来对其分析(<strong>从我之前的设计模式的文章可以看到，Spring通过观察者模式，其实我自己总结的是电影院模式，声音和画面通过broadcaster发送到listener，listener再调用相应的adapter来处理,所以，这里就直接从listener来找了</strong>)，它继承并扩展了同一个包下的<code>ContextLoader</code>类。同时还实现了<strong>javax.servlet.ServletContextListener</strong>接口。该接口旨在接收有关servlet上下文中更改变化的通知。只有当它们在(<code>WEB-INF/web.xml</code>)中注册时，这个接口的实现才能接收这些通知。</p>
<p>在Spring Web应用程序中，会在servlet上下文创建时调用上下文加载程序(<code>context loader</code>)。之后，开始初始化根Web应用程序上下文(<code>Root WebApplicationContext</code>)。<strong>Root</strong>非常重要，因为在加载的时候，可以创建两个或更多的上下文。第一个，也是最重要的，定义了整个bean的生存空间，被称为<strong>应用程序上下文(application context)</strong>。另一个是<strong>servlet应用程序上下文</strong>,其包含更多的是面向Web的元素，比如控制器(controllers)或视图解析器。然而我们需要记住的是，<code>servlet</code>的上下文是根应用程序上下文(<code>Root WebApplicationContext</code>)的子集，也就是父子容器一说。这意味着<code>servlet</code>可以从根应用程序上下文继承所有的bean。这就是为什么你可以在根配置文件中定义一些常见资源(例如:services，这也是我们的Spring xml配置文件为什么要分service和MVC两个的原因)，并通过两个不同的servlet进行共享的原因。但是在另一方面，根应用程序上下文不能获取到特定于servlet的bean，看过我的<a href="https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/">逃逸分析</a>的应该都清楚了吧。</p>
<p>我们可以将注意力拉回到关于上下文加载器的两个作用上: </p>
<ul>
<li><p>将根Web应用程序上下文(<code>Root WebApplicationContext</code>)绑定到调度程序特定的上下文中 </p>
</li>
<li><p>自动创建上下文(程序员不需要编写任何东西来使上下文工作)</p>
</li>
</ul>
<h2 id="Spring的上下文加载器详解"><a href="#Spring的上下文加载器详解" class="headerlink" title="Spring的上下文加载器详解"></a>Spring的上下文加载器详解</h2><p>我们已经了解了上下文加载器的作用。现在，我们来更详细地介绍这其中的细节。web上下文加载器(context loader)类位于<strong>org.springframework.web.context</strong>包中。主类是<code>ContextLoaderListener</code>，它扩展了<code>ContextLoader</code>类。同时实现了<code>ServletContextListener</code>接口。</p>
<p>在上下文创建时调用的方法是<strong>public void contextInitialized(ServletContextEvent event)</strong>。它通过传递给它所接收到的servlet上下文(从事件参数获取<code>event.getServletContext()</code>)来调用<code>ContextLoader</code>的<code>initWebApplicationContext</code>方法。<code>initWebApplicationContext</code>方法进行的第一个操作是检查是否有另一个根上下文存在。如果至少存在另一个，则抛出<code>IllegalStateException</code>，并且初始化失败。否则，它继续初始化<strong>org.springframework.web.context.WebApplicationContext</strong>实例。如果初始化的实例实现了<code>ConfigurableWebApplicationContext</code>接口，则在设置当前应用程序上下文之前，加载器将进行一些设置服务(父上下文，应用程序上下文，servlet上下文等)，并通过上下文的<code>refresh()</code>方法来准备bean，这已经在关于<a href="https://muyinchen.github.io/2017/09/08/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/">应用程序上下文</a>的文章中介绍过了。</p>
<p><strong>org.springframework.web.context.ContextLoaderListener:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize the root web application context.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</div><div class="line">	initWebApplicationContext(event.getServletContext());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.web.context.ContextLoader:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Initialize Spring's web application context for the given servlet context,</div><div class="line">	 * using the application context provided at construction time, or creating a new one</div><div class="line">	 * according to the "&#123;<span class="doctag">@link</span> #CONTEXT_CLASS_PARAM contextClass&#125;" and</div><div class="line">	 * "&#123;<span class="doctag">@link</span> #CONFIG_LOCATION_PARAM contextConfigLocation&#125;" context-params.</div><div class="line">	 * <span class="doctag">@param</span> servletContext current servlet context</div><div class="line">	 * <span class="doctag">@return</span> the new WebApplicationContext</div><div class="line">	 * <span class="doctag">@see</span> #ContextLoader(WebApplicationContext)</div><div class="line">	 * <span class="doctag">@see</span> #CONTEXT_CLASS_PARAM</div><div class="line">	 * <span class="doctag">@see</span> #CONFIG_LOCATION_PARAM</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">					<span class="string">"Cannot initialize context because there is already a root application context present - "</span> +</div><div class="line">					<span class="string">"check whether you have multiple ContextLoader* definitions in your web.xml!"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Log logger = LogFactory.getLog(ContextLoader.class);</div><div class="line">		servletContext.log(<span class="string">"Initializing Spring root WebApplicationContext"</span>);</div><div class="line">		<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">			logger.info(<span class="string">"Root WebApplicationContext: initialization started"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">          	</div><div class="line">			<span class="comment">// Store context in local instance variable, to guarantee that</span></div><div class="line">			<span class="comment">// it is available on ServletContext shutdown.</span></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</div><div class="line">			&#125;</div><div class="line">          <span class="comment">//此处判断下初始化的实例实现了ConfigurableWebApplicationContext接口</span></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</div><div class="line">				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</div><div class="line">				<span class="keyword">if</span> (!cwac.isActive()) &#123;</div><div class="line">					<span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></div><div class="line">					<span class="comment">// setting the parent context, setting the application context id, etc</span></div><div class="line">					<span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</div><div class="line">						<span class="comment">// The context instance was injected without an explicit parent -&gt;</span></div><div class="line">						<span class="comment">// determine parent for root web application context, if any.</span></div><div class="line">						ApplicationContext parent = loadParentContext(servletContext);</div><div class="line">						cwac.setParent(parent);</div><div class="line">					&#125;</div><div class="line">                  	<span class="comment">//refresh()准备生米煮熟饭了</span></div><div class="line">					configureAndRefreshWebApplicationContext(cwac, servletContext);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</div><div class="line"></div><div class="line">			ClassLoader ccl = Thread.currentThread().getContextClassLoader();</div><div class="line">			<span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</div><div class="line">				currentContext = <span class="keyword">this</span>.context;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="keyword">null</span>) &#123;</div><div class="line">				currentContextPerThread.put(ccl, <span class="keyword">this</span>.context);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Published root WebApplicationContext as ServletContext attribute with name ["</span> +</div><div class="line">						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">				<span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</div><div class="line">				logger.info(<span class="string">"Root WebApplicationContext: initialization completed in "</span> + elapsedTime + <span class="string">" ms"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.context;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">			logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">			logger.error(<span class="string">"Context initialization failed"</span>, err);</div><div class="line">			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</div><div class="line">			<span class="keyword">throw</span> err;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>ContextLoaderListener</code>中第二个我们需要关注的方法是<strong>public void contextDestroyed(ServletContextEvent event)</strong>。每当加载程序的上下文关闭时都会调用它。这个方法干了两件事情: </p>
<ul>
<li>通过<code>ContextLoader</code>中的<code>closeWebApplicationContext()</code>，它关闭应用程序上下文。通过<code>ConfigurableWebApplicationContext close()</code>方法完成上下文关闭。上下文的销毁的过程其实就是销毁bean和关闭bean工厂，此处参考<strong>org.springframework.context.support.AbstractApplicationContext</strong>中的源码，下面相关部分已贴出。</li>
<li>调用<strong>ContextCleanupListener.cleanupAttributes(event.getServletContext())</strong>，它将查找当前servlet上下文的所有实现<strong>org.springframework.beans.factory.DisposableBean</strong>接口的对象。之后，将调用它们的destroy()方法，以销毁不再使用的bean。</li>
</ul>
<p><strong>org.springframework.web.context.ContextLoaderListener:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Close the root web application context.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</div><div class="line">	closeWebApplicationContext(event.getServletContext());</div><div class="line">	ContextCleanupListener.cleanupAttributes(event.getServletContext());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.web.context.ContextLoader:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Close Spring's web application context for the given servlet context. If</div><div class="line">	 * the default &#123;<span class="doctag">@link</span> #loadParentContext(ServletContext)&#125; implementation,</div><div class="line">	 * which uses ContextSingletonBeanFactoryLocator, has loaded any shared</div><div class="line">	 * parent context, release one reference to that shared parent context.</div><div class="line">	 * &lt;p&gt;If overriding &#123;<span class="doctag">@link</span> #loadParentContext(ServletContext)&#125;, you may have</div><div class="line">	 * to override this method as well.</div><div class="line">	 * <span class="doctag">@param</span> servletContext the ServletContext that the WebApplicationContext runs in</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</div><div class="line">		servletContext.log(<span class="string">"Closing Spring root WebApplicationContext"</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</div><div class="line">				((ConfigurableWebApplicationContext) <span class="keyword">this</span>.context).close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			ClassLoader ccl = Thread.currentThread().getContextClassLoader();</div><div class="line">			<span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</div><div class="line">				currentContext = <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="keyword">null</span>) &#123;</div><div class="line">				currentContextPerThread.remove(ccl);</div><div class="line">			&#125;</div><div class="line">			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.parentContextRef != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">this</span>.parentContextRef.release();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.context.support.AbstractApplicationContext:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * DisposableBean callback for destruction of this instance.</div><div class="line">	 * Only called when the ApplicationContext itself is running</div><div class="line">	 * as a bean in another BeanFactory or ApplicationContext,</div><div class="line">	 * which is rather unusual.</div><div class="line">	 * &lt;p&gt;The &#123;<span class="doctag">@code</span> close&#125; method is the native way to</div><div class="line">	 * shut down an ApplicationContext.</div><div class="line">	 * <span class="doctag">@see</span> #close()</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.access.SingletonBeanFactoryLocator</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Close this application context, destroying all beans in its bean factory.</div><div class="line">	 * &lt;p&gt;Delegates to &#123;<span class="doctag">@code</span> doClose()&#125; for the actual closing procedure.</div><div class="line">	 * Also removes a JVM shutdown hook, if registered, as it's not needed anymore.</div><div class="line">	 * <span class="doctag">@see</span> #doClose()</div><div class="line">	 * <span class="doctag">@see</span> #registerShutdownHook()</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			doClose();</div><div class="line">			<span class="comment">// If we registered a JVM shutdown hook, we don't need it anymore now:</span></div><div class="line">			<span class="comment">// We've already explicitly closed the context.</span></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.shutdownHook != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Runtime.getRuntime().removeShutdownHook(<span class="keyword">this</span>.shutdownHook);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (IllegalStateException ex) &#123;</div><div class="line">					<span class="comment">// ignore - VM is already shutting down</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Actually performs context closing: publishes a ContextClosedEvent and</div><div class="line">	 * destroys the singletons in the bean factory of this application context.</div><div class="line">	 * &lt;p&gt;Called by both &#123;<span class="doctag">@code</span> close()&#125; and a JVM shutdown hook, if any.</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.context.event.ContextClosedEvent</div><div class="line">	 * <span class="doctag">@see</span> #destroyBeans()</div><div class="line">	 * <span class="doctag">@see</span> #close()</div><div class="line">	 * <span class="doctag">@see</span> #registerShutdownHook()</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.active.get() &amp;&amp; <span class="keyword">this</span>.closed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">				logger.info(<span class="string">"Closing "</span> + <span class="keyword">this</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			LiveBeansView.unregisterApplicationContext(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// Publish shutdown event.</span></div><div class="line">				publishEvent(<span class="keyword">new</span> ContextClosedEvent(<span class="keyword">this</span>));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">				logger.warn(<span class="string">"Exception thrown from ApplicationListener handling ContextClosedEvent"</span>, ex);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// Stop all Lifecycle beans, to avoid delays during individual destruction.</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				getLifecycleProcessor().onClose();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">				logger.warn(<span class="string">"Exception thrown from LifecycleProcessor on context close"</span>, ex);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// Destroy all cached singletons in the context's BeanFactory.</span></div><div class="line">			destroyBeans();</div><div class="line"></div><div class="line">			<span class="comment">// Close the state of this context itself.</span></div><div class="line">			closeBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// Let subclasses do some final clean-up if they wish...</span></div><div class="line">			onClose();</div><div class="line"></div><div class="line">			<span class="keyword">this</span>.active.set(<span class="keyword">false</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Template method for destroying all beans that this context manages.</div><div class="line">	 * The default implementation destroy all cached singletons in this context,</div><div class="line">	 * invoking &#123;<span class="doctag">@code</span> DisposableBean.destroy()&#125; and/or the specified</div><div class="line">	 * "destroy-method".</div><div class="line">	 * &lt;p&gt;Can be overridden to add context-specific bean destruction steps</div><div class="line">	 * right before or right after standard singleton destruction,</div><div class="line">	 * while the context's BeanFactory is still active.</div><div class="line">	 * <span class="doctag">@see</span> #getBeanFactory()</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.config.ConfigurableBeanFactory#destroySingletons()</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">destroyBeans</span><span class="params">()</span> </span>&#123;</div><div class="line">		getBeanFactory().destroySingletons();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Template method which can be overridden to add context-specific shutdown work.</div><div class="line">	 * The default implementation is empty.</div><div class="line">	 * &lt;p&gt;Called at the end of &#123;<span class="doctag">@link</span> #doClose&#125;'s shutdown procedure, after</div><div class="line">	 * this context's BeanFactory has been closed. If custom shutdown logic</div><div class="line">	 * needs to execute while the BeanFactory is still active, override</div><div class="line">	 * the &#123;<span class="doctag">@link</span> #destroyBeans()&#125; method instead.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// For subclasses: do nothing by default.</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="在Spring-Web应用程序中实现上下文加载程序"><a href="#在Spring-Web应用程序中实现上下文加载程序" class="headerlink" title="在Spring Web应用程序中实现上下文加载程序"></a>在Spring Web应用程序中实现上下文加载程序</h2><p>想象一下，你希望在系统的所有用户之间共享一个信息。你可以用传统的方式做到这一点，也可以使用你定义的上下文加载器。我们通过写一些简单的代码来达到这个目的。还有一个想要实现的功能会涉及多个上下文。我们的应用程序将同时处理<code>guest</code>和<code>connected</code>两种形式(请同时看下面源码)。可以看到他们的网页的URL匹配规则不一样。使用connected的用户将能够访问与guest规则下以.chtml扩展名结尾的相同的页面，也就是所谓的交集。需要说的是，他们不会共享相同的信息(两个不一样的上下文当然不会一样了)。还不懂的话看下面源码，对于这两者，我们将分别 指定两个servlet上下文。你会看到，因为它，访问connected用户将不会与访问guest共享相同的bean。</p>
<p>我们将从<code>web.xml</code>文件开始,请对比上面说的:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--?xml version="1.0" encoding="UTF-8"?--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.4"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemalocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/guest-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">--</span> <span class="attr">guest</span> <span class="attr">is</span> <span class="attr">the</span> <span class="attr">default</span> <span class="attr">servlet</span> <span class="attr">--</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></div><div class="line">    /WEB-INF/applicationContext.xml</div><div class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">--</span> <span class="attr">Customized</span> <span class="attr">listener</span> <span class="attr">which</span> <span class="attr">will</span> <span class="attr">put</span> <span class="attr">some</span> <span class="attr">personnalized</span> <span class="attr">data</span> <span class="attr">into</span> <span class="attr">servlet</span>'<span class="attr">s</span> <span class="attr">context</span> <span class="attr">--</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.mysite.servlet.CustomizedContextLoader<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>connected<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/connected-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>connected<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>**.chtml<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>两个指定的servlet的bean配置文件几乎相同。唯一的区别是connected-servlet.xml包含一个没有与guest servlet共享的bean的定义。这个bean的名字是secretData:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secretData"</span> <span class="attr">class</span>=<span class="string">"com.migo.secret.SecretData"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"question"</span> <span class="attr">value</span>=<span class="string">"How old are you ?"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"answer"</span> <span class="attr">value</span>=<span class="string">"33"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>神秘豆的内容主要由setter和toString方法组成:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecretData</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> String question;</div><div class="line">  <span class="keyword">private</span> String answer;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuestion</span><span class="params">(String question)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.question = question;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnswer</span><span class="params">(String answer)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.answer = answer;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"SecretData &#123;question: "</span>+<span class="keyword">this</span>.question+<span class="string">", answer: "</span>+<span class="keyword">this</span>.answer+<span class="string">"&#125;"</span>;</div><div class="line">  &#125;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他Java代码也很简单。在<code>CustomizedContextLoader</code>中，我们重写<code>contextInitialized</code>方法来放置共享<code>servlet</code>的上下文属性:名字叫<code>webappVersion</code>。该属性是一个随机数，用于证明根应用程序上下文的加载程序仅被调用一次:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizedContextLoader</span> <span class="keyword">extends</span> <span class="title">ContextLoaderListener</span>  </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"[CustomizedContextLoader] Loading context"</span>);</div><div class="line">    <span class="comment">// this value could be read from data source, but for the simplicity reasons, we put it statically</span></div><div class="line">    <span class="comment">// number is random because we want to prove that the root context is loaded only once</span></div><div class="line">    Random random = <span class="keyword">new</span> Random();</div><div class="line">    <span class="keyword">int</span> version = random.nextInt(<span class="number">100001</span>);</div><div class="line">    System.out.println(<span class="string">"Version set into servlet's context :"</span>+version);</div><div class="line">    event.getServletContext().setAttribute(<span class="string">"webappVersion"</span>, version);</div><div class="line">    <span class="keyword">super</span>.contextInitialized(event);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后，我们传递给用来处理访问网址的<code>TestController</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span>    </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/test.chtml"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Webapp version from servlet's context :"</span>+request.getServletContext().getAttribute(<span class="string">"webappVersion"</span>));</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Found secretData bean :"</span>+context.getBean(<span class="string">"secretData"</span>));</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/test.html"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">guestTest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Webapp version from servlet's context :"</span>+request.getServletContext().getAttribute(<span class="string">"webappVersion"</span>));</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Found secretData bean :"</span>+context.getBean(<span class="string">"secretData"</span>));</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试的时候，首先输入<a href="http://localhost:8080/test.chtml，然后输入http://localhost:8080/test.html。然后通过查看日志" target="_blank" rel="external">http://localhost:8080/test.chtml，然后输入http://localhost:8080/test.html。然后通过查看日志</a>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[CustomizedContextLoader] Loading context</div><div class="line">Version set into servlet's context :38023</div><div class="line">// ... test.chtml</div><div class="line">[TestController] Webapp version from servlet's context :38023</div><div class="line">[TestController] Found secretData bean :SecretData &#123;question: How old are you ?, answer: 33&#125;</div><div class="line">// ... test.html</div><div class="line">[TestController] Webapp version from servlet's context :38023</div><div class="line">3 avr. 2014 14:01:02 org.apache.catalina.core.StandardWrapperValve invoke</div><div class="line">GRAVE: Servlet.service() for servlet [guestServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'secretData' is defined] with root cause</div><div class="line">org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'secretData' is defined</div><div class="line">	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:638)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1159)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:282)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:273)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)</div><div class="line">  at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:973)</div><div class="line">  at com.mysite.controller.TestController.guestTest(TestController.java:114)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">  at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">  at java.lang.reflect.Method.invoke(Unknown Source)</div><div class="line">  at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:214)</div><div class="line">  at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)</div><div class="line">  at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)</div><div class="line">  at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:748)</div><div class="line">  at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)</div><div class="line">  at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)</div><div class="line">  at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945)</div><div class="line">  at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)</div><div class="line">  at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931)</div><div class="line">  at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:822)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)</div><div class="line">  at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:770)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</div><div class="line">  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)</div><div class="line">  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:164)</div><div class="line">  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:462)</div><div class="line">  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)</div><div class="line">  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)</div><div class="line">  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:562)</div><div class="line">  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)</div><div class="line">  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:395)</div><div class="line">  at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:250)</div><div class="line">  at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:188)</div><div class="line">  at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</div><div class="line">  at java.lang.Thread.run(Unknown Source)</div></pre></td></tr></table></figure>
<p>首先，将一个信息(“Version set into servlet’s context :”+version)放在servlet上下文中，并由两个servlet上下文继承。第二点是bean的可见性。<code>Guest</code>的<code>servlet</code>没有看到<code>secretData bean</code>，因为它仅在<code>connected</code> (connected-servlet.xml)的配置中被定义。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一部分涉及了这个加载器的两个主要角色:将根Web应用程序上下文(<code>Root WebApplicationContext</code>)绑定到调度程序特定的上下文中并自动创建上下文。接下来，我们分析了关于上下文加载程序的代码的要点所涉及的细节，如所实现的接口和主要方法的细节实现。最后一部分是我们自定义扩展本地上下文加载器，然后对bean和servlet的属性继承方面进行一些测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的Context-loader&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的Context-loader&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的Context loader&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的Context loader&lt;/h1&gt;&lt;p&gt;我们已经知道，应用程序上下文是Spring管理的bean所在的容器。但是我们依然要问一个问题:这个上下文是如何创建的？那么在这篇文章中我们来探讨这个问题。&lt;/p&gt;
&lt;p&gt;在第一部分中，会说下在&lt;a href=&quot;https://muyinchen.github.io/2017/09/08/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/&quot;&gt;Spring的应用程序上下文中&lt;/a&gt;所谓的&lt;strong&gt;上下文加载器(context loader)&lt;/strong&gt;是什么。在第二部分，我们会讨论这个加载器的代码细节。最后一部分，老规矩，写我们自己的一个自定义的loader。在继续之前，需要说一下，loader(加载器) 将根据web application和dispatcher servlet来结合进行分析。其实这也是很多人一碰到源码就像无头苍蝇，不知道从何而起了，刚开始放下所有，从大体去思考该如何入手,这里对设计模式了解就很重要了，还有，源码的类注释很重要，不多说，接着走。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的应用上下文</title>
    <link href="https://muyinchen.github.io/2017/09/08/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://muyinchen.github.io/2017/09/08/Spring5源码解析-Spring中的应用上下文/</id>
    <published>2017-09-08T08:49:39.056Z</published>
    <updated>2017-09-11T11:49:59.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的应用上下文"><a href="#Spring5源码解析-Spring中的应用上下文" class="headerlink" title="Spring5源码解析-Spring中的应用上下文"></a>Spring5源码解析-Spring中的应用上下文</h1><p>之前讲到过，Spring中的 beans生活(用这俩字觉得更形象具体)在其应用程序的上下文环境中。在本文中，我们将详细介绍应用程序上下文,另外此篇同样是<a href="https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/">由域联系到的逃逸分析</a>的关于Spring容器的续篇。</p>
<p>关于<a href="https://muyinchen.github.io/2017/08/23/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@Autowired/">Spring5源码解析-@Autowired</a>这篇文章讲了通过<code>@Autowired</code>注解进行依赖注入。这一次我们来探讨<strong>应用程序上下文(application context)</strong>的概念。在第一部分中，我们来看看所有Spring管理的bean生活在什么样的环境中。在第二部分，来分析下到负责上下文管理的类。在最后一部分中，我们来进行一些实践操作。<br><a id="more"></a></p>
<h2 id="什么是Spring的应用程序上下文？"><a href="#什么是Spring的应用程序上下文？" class="headerlink" title="什么是Spring的应用程序上下文？"></a>什么是Spring的应用程序上下文？</h2><p>众所周知，Spring管理的这些类被称为bean，并且生活在Spring容器中。bean处理程序的最基本实现是<strong>bean factory</strong>。作为<strong>org.springframework.beans.factory.BeanFactory</strong>接口的<strong>实现类</strong>，这是一个初始化，配置和管理bean的容器。但通常在Spring应用程序中仅使用<code>BeanFactory</code>是不够的。它出现在<strong>应用程序上下文中</strong>。</p>
<p>应用程序上下文(Application context)是一种面向企业化(<code>其实Spring文档里也有面向企业这一说，不过这不就是企业里流水线的工厂里才能有的东西么</code>)的bean工厂。作为标准bean工厂，它是bean class生活的空间。但与标准bean工厂不同，应用程序上下文提供了一个补充企业层(也就是通用的东西了，比如企业里的胸牌，服装等)。又迷糊了吧，举个例子 :例如，通过提供国际化，转换服务或事件传播，使我们省去很多麻烦去亲自处理。通常，应用程序上下文优于bean工厂。但它的唯一缺点是内存消耗比bean工厂大，出现这种情况是由于补充的服务。如果内存的使用对于你的程序要求非常苛刻(例如在applet或移动环境中)，请考虑更多使用bean factory。否则，在更标准的应用程序中，应使用应用程序上下文(application context)。</p>
<h2 id="Spring的应用程序上下文类"><a href="#Spring的应用程序上下文类" class="headerlink" title="Spring的应用程序上下文类"></a>Spring的应用程序上下文类</h2><p>想要了解Spring中应用程序上下文，关键部分就是<strong>org.springframework.context.ApplicationContext</strong>接口。它扩展了一些其他接口: </p>
<ul>
<li><strong>org.springframework.core.env.EnvironmentCapable</strong>:用于标记对象来对外暴露自己说我实现了<strong>Environment</strong>接口。根据这个接口的注释可以知道，它主要用于完成类型的检查。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interface indicating a component that contains and exposes an &#123;<span class="doctag">@link</span> Environment&#125; reference.</div><div class="line"> *  注释说了很清晰明了了，就不多废话了</div><div class="line"> * &lt;p&gt;All Spring application contexts are EnvironmentCapable, and the interface is used primarily</div><div class="line"> * for performing &#123;<span class="doctag">@code</span> instanceof&#125; checks in framework methods that accept BeanFactory</div><div class="line"> * instances that may or may not actually be ApplicationContext instances in order to interact</div><div class="line"> * with the environment if indeed it is available.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;As mentioned, &#123;<span class="doctag">@link</span> org.springframework.context.ApplicationContext ApplicationContext&#125;</div><div class="line"> * extends EnvironmentCapable, and thus exposes a &#123;<span class="doctag">@link</span> #getEnvironment()&#125; method; however,</div><div class="line"> * &#123;<span class="doctag">@link</span> org.springframework.context.ConfigurableApplicationContext ConfigurableApplicationContext&#125;</div><div class="line"> * redefines &#123;<span class="doctag">@link</span> org.springframework.context.ConfigurableApplicationContext#getEnvironment</div><div class="line"> * getEnvironment()&#125; and narrows the signature to return a &#123;<span class="doctag">@link</span> ConfigurableEnvironment&#125;.</div><div class="line"> * The effect is that an Environment object is 'read-only' until it is being accessed from</div><div class="line"> * a ConfigurableApplicationContext, at which point it too may be configured.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Chris Beams</div><div class="line"> * <span class="doctag">@since</span> 3.1</div><div class="line"> * <span class="doctag">@see</span> Environment</div><div class="line"> * <span class="doctag">@see</span> ConfigurableEnvironment</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.ConfigurableApplicationContext#getEnvironment()</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnvironmentCapable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return the &#123;<span class="doctag">@link</span> Environment&#125; associated with this component</div><div class="line">	 * (may be &#123;<span class="doctag">@code</span> null&#125; or a default environment).</div><div class="line">	 */</div><div class="line">	<span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>org.springframework.beans.factory.ListableBeanFactory</strong>:通过继承该interface可以列出所有bean，也可以只列出与预期类型相对应的bean。 </li>
<li><strong>org.springframework.beans.factory.HierarchicalBeanFactory</strong>:支持分层bean的管理。 </li>
<li><strong>org.springframework.context.MessageSource</strong>:用来解决消息支持国际化。 </li>
<li><strong>org.springframework.context.ApplicationEventPublisher</strong>:通过该接口，可以允许通知所有类来监听到某些应用程序上下文事件。 </li>
<li><strong>org.springframework.core.io.support.ResourcePatternResolver</strong>:是一个有助于将资源地址(例如:classpath:/WEB-INF/web.xml)解析到<strong>org.springframework.core.io.Resource</strong>对象中的策略接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Central interface to provide configuration for an application.</div><div class="line"> * This is read-only while the application is running, but may be</div><div class="line"> * reloaded if the implementation supports this.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;An ApplicationContext provides:</div><div class="line"> * &lt;ul&gt;  请看所扩展相关各个接口功能的描述</div><div class="line"> * &lt;li&gt;Bean factory methods for accessing application components.</div><div class="line"> * Inherited from &#123;<span class="doctag">@link</span> org.springframework.beans.factory.ListableBeanFactory&#125;.</div><div class="line"> * &lt;li&gt;The ability to load file resources in a generic fashion.</div><div class="line"> * Inherited from the &#123;<span class="doctag">@link</span> org.springframework.core.io.ResourceLoader&#125; interface.</div><div class="line"> * &lt;li&gt;The ability to publish events to registered listeners.</div><div class="line"> * Inherited from the &#123;<span class="doctag">@link</span> ApplicationEventPublisher&#125; interface.</div><div class="line"> * &lt;li&gt;The ability to resolve messages, supporting internationalization.</div><div class="line"> * Inherited from the &#123;<span class="doctag">@link</span> MessageSource&#125; interface.</div><div class="line"> * &lt;li&gt;Inheritance from a parent context. Definitions in a descendant context</div><div class="line"> * will always take priority. This means, for example, that a single parent</div><div class="line"> * context can be used by an entire web application, while each servlet has</div><div class="line"> * its own child context that is independent of that of any other servlet.</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> *</div><div class="line"> * &lt;p&gt;In addition to standard &#123;<span class="doctag">@link</span> org.springframework.beans.factory.BeanFactory&#125;</div><div class="line"> * lifecycle capabilities, ApplicationContext implementations detect and invoke</div><div class="line"> * &#123;<span class="doctag">@link</span> ApplicationContextAware&#125; beans as well as &#123;<span class="doctag">@link</span> ResourceLoaderAware&#125;,</div><div class="line"> * &#123;<span class="doctag">@link</span> ApplicationEventPublisherAware&#125; and &#123;<span class="doctag">@link</span> MessageSourceAware&#125; beans.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rod Johnson</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@see</span> ConfigurableApplicationContext</div><div class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.BeanFactory</div><div class="line"> * <span class="doctag">@see</span> org.springframework.core.io.ResourceLoader</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">EnvironmentCapable</span>, <span class="title">ListableBeanFactory</span>, <span class="title">HierarchicalBeanFactory</span>,</span></div><div class="line">		<span class="title">MessageSource</span>, <span class="title">ApplicationEventPublisher</span>, <span class="title">ResourcePatternResolver</span> &#123;</div></pre></td></tr></table></figure>
<p>对于我们来说，实现这些接口使应用程序上下文比一个简单的bean工厂更有用。我们通过<strong>org.springframework.web.context.support.XmlWebApplicationContext</strong>这个实现类来看其在Web应用程序中使用。此类扩展了同一个包下<code>AbstractRefreshableWebApplicationContext</code>这个抽象类。</p>
<p><code>XmlWebApplicationContext</code>实现了<code>AbstractRefreshableApplicationContext</code>中的抽象方法<code>loadBeanDefinitions</code>，用于读取所有bean。从这个方法实现，可以看出，所有的bean都是通过<strong>org.springframework.beans.factory.xml.XmlBeanDefinitionReader</strong>从XML文件读取的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Loads the bean definitions via an XmlBeanDefinitionReader.</div><div class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader</div><div class="line"> * <span class="doctag">@see</span> #initBeanDefinitionReader</div><div class="line"> * <span class="doctag">@see</span> #loadBeanDefinitions</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</div><div class="line">	<span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></div><div class="line">     	<span class="comment">//只能说Spring源码注释的太详细了，英文确实很重要</span></div><div class="line">	XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</div><div class="line"></div><div class="line">	<span class="comment">// Configure the bean definition reader with this context's</span></div><div class="line">	<span class="comment">// resource loading environment.</span></div><div class="line">	beanDefinitionReader.setEnvironment(getEnvironment());</div><div class="line">	beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</div><div class="line">	beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">	<span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></div><div class="line">	<span class="comment">// then proceed with actually loading the bean definitions.</span></div><div class="line">	initBeanDefinitionReader(beanDefinitionReader);</div><div class="line">	loadBeanDefinitions(beanDefinitionReader);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一个有趣的方法，继承自<code>AbstractRefreshableWebApplicationContext</code>，是<code>postProcessBeanFactory</code>。它在加载所有bean定义之后并在其实例化之前被调用(<code>postProcess</code>就是bean构造函数之后调用即实例化之前)。<code>AbstractRefreshableWebApplicationContext</code>使用它来注册请求和会话作用域以及环境bean(具体看下面源码)。另外，这个抽象类实现了<code>ConfigurableWebApplicationContext</code>接口，这样一来就可以定义<code>servlet</code>的上下文和一些本地的配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Register request/session scopes, a &#123;<span class="doctag">@link</span> ServletContextAwareProcessor&#125;, etc.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ServletContextAwareProcessor(<span class="keyword">this</span>.servletContext, <span class="keyword">this</span>.servletConfig));</div><div class="line">		beanFactory.ignoreDependencyInterface(ServletContextAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ServletConfigAware.class);</div><div class="line"></div><div class="line">		WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, <span class="keyword">this</span>.servletContext);</div><div class="line">		WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, <span class="keyword">this</span>.servletContext, <span class="keyword">this</span>.servletConfig);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.servletContext;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletConfig</span><span class="params">(@Nullable ServletConfig servletConfig)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.servletConfig = servletConfig;</div><div class="line">		<span class="keyword">if</span> (servletConfig != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.servletContext == <span class="keyword">null</span>) &#123;</div><div class="line">			setServletContext(servletConfig.getServletContext());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.servletConfig;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">	 * &lt;p&gt;Replace &#123;<span class="doctag">@code</span> Servlet&#125;-related property sources.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initPropertySources</span><span class="params">()</span> </span>&#123;</div><div class="line">		ConfigurableEnvironment env = getEnvironment();</div><div class="line">		<span class="keyword">if</span> (env <span class="keyword">instanceof</span> ConfigurableWebEnvironment) &#123;</div><div class="line">			((ConfigurableWebEnvironment) env).initPropertySources(<span class="keyword">this</span>.servletContext, <span class="keyword">this</span>.servletConfig);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>由<code>XmlWebApplicationContext</code>间接继承的另一个抽象类是<code>AbstractRefreshableApplicationContext</code>。它有几种处理上下文刷新的方法。处理事件通知的类是<strong>org.springframework.context.support.AbstractApplicationContext</strong>，由<code>XmlWebApplicationContext</code>间接继承。它包含一个将事件(<code>ApplicationEvent</code>类的实例)发送到所有侦听对象的<code>publishEvent</code>方法。</p>
<p>但是我们的重中之重是处理生命周期，是<code>AbstractApplicationContext</code>类的<code>public void refresh() throws BeansException, IllegalStateException</code>方法来做到的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			<span class="comment">// Prepare this context for refreshing.</span></div><div class="line">			prepareRefresh();</div><div class="line"></div><div class="line">			<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></div><div class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// Prepare the bean factory for use in this context.</span></div><div class="line">			prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></div><div class="line">				postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Invoke factory processors registered as beans in the context.</span></div><div class="line">				invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Register bean processors that intercept bean creation.</span></div><div class="line">				registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Initialize message source for this context.</span></div><div class="line">				initMessageSource();</div><div class="line"></div><div class="line">				<span class="comment">// Initialize event multicaster for this context.</span></div><div class="line">				initApplicationEventMulticaster();</div><div class="line"></div><div class="line">				<span class="comment">// Initialize other special beans in specific context subclasses.</span></div><div class="line">				onRefresh();</div><div class="line"></div><div class="line">				<span class="comment">// Check for listener beans and register them.</span></div><div class="line">				registerListeners();</div><div class="line"></div><div class="line">				<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></div><div class="line">				finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Last step: publish corresponding event.</span></div><div class="line">				finishRefresh();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">					logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</div><div class="line">							<span class="string">"cancelling refresh attempt: "</span> + ex);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">				destroyBeans();</div><div class="line"></div><div class="line">				<span class="comment">// Reset 'active' flag.</span></div><div class="line">				cancelRefresh(ex);</div><div class="line"></div><div class="line">				<span class="comment">// Propagate exception to caller.</span></div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">finally</span> &#123;</div><div class="line">				<span class="comment">// Reset common introspection caches in Spring's core, since we</span></div><div class="line">				<span class="comment">// might not ever need metadata for singleton beans anymore...</span></div><div class="line">				resetCommonCaches();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>通过阅读源码，我们可以注意到以下操作:</p>
<ol>
<li>上下文准备刷新(属性源初始化)</li>
<li>bean工厂准备好用来一系列操作(classloader定义，基本bean注册)</li>
<li>bean后置处理(postProcessBeanFactory方法)被调用</li>
<li>消息源(消息管理)被初始化</li>
<li>event multicaster初始化(event multicaster是将事件分派到合适的侦听对象的对象)</li>
<li>在特定的上下文子类中初始化其他特殊的bean。</li>
<li>监听器的注册</li>
<li>所有剩余的bean的实例化(例如:转换服务)</li>
</ol>
<p>在非Web环境中，我们可以使用标准应用程序上下文，如<code>FileSystemXmlApplicationContext</code>，<code>ClassPathXmlApplicationContext</code>或<code>GenericXmlApplicationContext</code>。</p>
<h2 id="关于Spring的应用程序环境的一些实践"><a href="#关于Spring的应用程序环境的一些实践" class="headerlink" title="关于Spring的应用程序环境的一些实践"></a>关于Spring的应用程序环境的一些实践</h2><p>关于此 部分，我们将看到:如何在一个控制器中获得一个上下文，查找得到一些bean配置并来解析一个消息。在进入正式的代码之前，我们需要做一些上下文的配置:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- activate configuration by annotations, for example enable @Controller annotation --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- indicates where Spring should looking for application services as services, controllers or components, annotated respectively with @Service, @Controller and @Component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.mysite.test"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- registers RequestMappingHandlerMapping, RequestMappingHandlerAdapter and ExceptionHandlerExceptionResolver; thanks to it, Spring can resolve requests annotated with @RequestMapping and @ExceptionHandler --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- represents a bean which will resolve the messages --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span> <span class="attr">id</span>=<span class="string">"messageSource"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:messages<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:errors<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fallbackToSystemLocale"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过上面的配置，我们可以编写一个测试controller和一个类ApplicationContextProvider，它将保存一个应用程序上下文实例并按需返回:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// controller, TestController.java</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Received application context :"</span>+context);</div><div class="line">    ApplicationContext providerContext = ApplicationContextProvider.getApplicationContext();</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Provider context is :"</span>+providerContext);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.context == providerContext) &#123;</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Both contextes are the same"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Message is :"</span>+<span class="keyword">this</span>.context.getMessage(<span class="string">"testMessage"</span>, <span class="keyword">new</span> Object[] &#123;&#125;, Locale.ENGLISH));</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// context provider, ApplicationContextProvider.java</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextProvider</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext c)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    context = c;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> context;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ApplicationContext</code>实例由<code>Spring</code>管理。这就是为什么我们可以使用<code>@Autowired</code>注解将其注入另一个Spring管理的bean(在我们的例子中是一个controller )。这是通过注入的从一个bean得到上下文第一种方法。</p>
<p>第二种方法是使<code>ApplicationContextProvider</code>类实现<strong>org.springframework.context.ApplicationContextAware</strong>接口。这里需要说一下，该接口实现后可以获取当前正在运行的<code>ApplicationContext</code>的这个事件的通知。所以实现类必须实现这个方法:<strong>void setApplicationContext(ApplicationContext applicationContext)throws BeansException</strong>。该方法允许设置当前的<code>ApplicationContext</code>实例并用来使用。上下文通过<strong>org.springframework.context.support.ApplicationContextAwareProcessor</strong>传递给<code>ApplicationContextAware</code>实现，在<code>AbstractApplicationContext</code>类中注册(见下面源码)。需要注意的是，<code>ApplicationcontextAwareProcessor</code>也用于设置bean工厂或应用程序的上下文环境，见下面此类源码中的<code>private final StringValueResolver embeddedValueResolver;</code>的<code>StringValueResolver</code>接口的实现。可以知道，要实现这两种功能，这些类必须分别从<strong>org.springframework.context</strong>包中实现<code>EmbeddedValueResolverAware</code>和<code>EnvironmentAware</code>接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Configure the factory's standard context characteristics,</div><div class="line">	 * such as the context's ClassLoader and post-processors.</div><div class="line">	 * <span class="doctag">@param</span> beanFactory the BeanFactory to configure</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">// Tell the internal bean factory to use the context's class loader etc.</span></div><div class="line">		beanFactory.setBeanClassLoader(getClassLoader());</div><div class="line">		beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</div><div class="line">		beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</div><div class="line"></div><div class="line">		<span class="comment">// Configure the bean factory with context callbacks.</span></div><div class="line">      	<span class="comment">//将applicationContext实例扔进去，见下面对ApplicationContextAwareProcessor的源码注释</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</div><div class="line">		beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</div><div class="line"></div><div class="line">		<span class="comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></div><div class="line">		<span class="comment">// MessageSource registered (and found for autowiring) as a bean.</span></div><div class="line">		beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</div><div class="line">		beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">		<span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line">			<span class="comment">// Set a temporary ClassLoader for type matching.</span></div><div class="line">			beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Register default environment beans.</span></div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.config.BeanPostProcessor&#125;</div><div class="line"> * 看下面这句注释:</div><div class="line"> * implementation that passes the ApplicationContext to beans that</div><div class="line"> * implement the &#123;<span class="doctag">@link</span> EnvironmentAware&#125;, &#123;<span class="doctag">@link</span> EmbeddedValueResolverAware&#125;,</div><div class="line"> * &#123;<span class="doctag">@link</span> ResourceLoaderAware&#125;, &#123;<span class="doctag">@link</span> ApplicationEventPublisherAware&#125;,</div><div class="line"> * &#123;<span class="doctag">@link</span> MessageSourceAware&#125; and/or &#123;<span class="doctag">@link</span> ApplicationContextAware&#125; interfaces.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Implemented interfaces are satisfied in order of their mention above.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Application contexts will automatically register this with their</div><div class="line"> * underlying bean factory. Applications do not use this directly.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@author</span> Costin Leau</div><div class="line"> * <span class="doctag">@author</span> Chris Beams</div><div class="line"> * <span class="doctag">@since</span> 10.10.2003</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.EnvironmentAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.EmbeddedValueResolverAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.ResourceLoaderAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.ApplicationEventPublisherAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.MessageSourceAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.ApplicationContextAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.support.AbstractApplicationContext#refresh()</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextAwareProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ConfigurableApplicationContext applicationContext;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> StringValueResolver embeddedValueResolver;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new ApplicationContextAwareProcessor for the given context.</div><div class="line">	 * 要创建此实例，必须要有ConfigurableApplicationContext的上下文实例才行</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ApplicationContextAwareProcessor</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.applicationContext = applicationContext;</div><div class="line">		<span class="keyword">this</span>.embeddedValueResolver = <span class="keyword">new</span> EmbeddedValueResolver(applicationContext.getBeanFactory());</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		AccessControlContext acc = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp;</div><div class="line">				(bean <span class="keyword">instanceof</span> EnvironmentAware || bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware ||</div><div class="line">						bean <span class="keyword">instanceof</span> ResourceLoaderAware || bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware ||</div><div class="line">						bean <span class="keyword">instanceof</span> MessageSourceAware || bean <span class="keyword">instanceof</span> ApplicationContextAware)) &#123;</div><div class="line">			acc = <span class="keyword">this</span>.applicationContext.getBeanFactory().getAccessControlContext();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (acc != <span class="keyword">null</span>) &#123;</div><div class="line">			AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</div><div class="line">				invokeAwareInterfaces(bean);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;, acc);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			invokeAwareInterfaces(bean);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> bean;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在我们的例子中，对于<code>ApplicationContextAware</code>的实现是只是一个简单的上下文提供者。但是在别的地方，我们定义的这个provider可能是用来得到上下文资源的对象。<strong>这就是关于获取应用程序上下文的两种方式</strong>。</p>
<p>最后,我们通过一个方法来使用context(上下文)的getMessage方法来对消息解析。在我们的<code>message_en.properties</code>文件中，可以事先声明消息的模板:<strong>testMessage =It’s our test message with content。</strong>然后我们会在日志文件中看到相应的输出。</p>
<p>顺便说一下，从<code>ApplicationContextProvider</code>获得的对象和<code>@Autowired</code>的对象之间的上下文是相同的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[TestController] Received application context :Root WebApplicationContext: startup date [Wed Apr <span class="number">02</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">23</span> CEST <span class="number">2014</span>]; root of context hierarchy</div><div class="line">[TestController] Provider context is :Root WebApplicationContext: startup date [Wed Apr <span class="number">02</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">23</span> CEST <span class="number">2014</span>]; root of context hierarchy</div><div class="line">[TestController] All contexts are the same</div><div class="line">[TestController] Message is :It<span class="string">'s our test message with content.</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的应用上下文&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的应用上下文&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的应用上下文&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的应用上下文&lt;/h1&gt;&lt;p&gt;之前讲到过，Spring中的 beans生活(用这俩字觉得更形象具体)在其应用程序的上下文环境中。在本文中，我们将详细介绍应用程序上下文,另外此篇同样是&lt;a href=&quot;https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/&quot;&gt;由域联系到的逃逸分析&lt;/a&gt;的关于Spring容器的续篇。&lt;/p&gt;
&lt;p&gt;关于&lt;a href=&quot;https://muyinchen.github.io/2017/08/23/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@Autowired/&quot;&gt;Spring5源码解析-@Autowired&lt;/a&gt;这篇文章讲了通过&lt;code&gt;@Autowired&lt;/code&gt;注解进行依赖注入。这一次我们来探讨&lt;strong&gt;应用程序上下文(application context)&lt;/strong&gt;的概念。在第一部分中，我们来看看所有Spring管理的bean生活在什么样的环境中。在第二部分，来分析下到负责上下文管理的类。在最后一部分中，我们来进行一些实践操作。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring Web中的处理程序执行链</title>
    <link href="https://muyinchen.github.io/2017/08/28/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%20Web%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E9%93%BE/"/>
    <id>https://muyinchen.github.io/2017/08/28/Spring5源码解析-Spring Web中的处理程序执行链/</id>
    <published>2017-08-28T03:22:26.863Z</published>
    <updated>2017-09-13T05:59:08.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring-Web中的处理程序执行链"><a href="#Spring5源码解析-Spring-Web中的处理程序执行链" class="headerlink" title="Spring5源码解析-Spring Web中的处理程序执行链"></a>Spring5源码解析-Spring Web中的处理程序执行链</h1><blockquote>
<p>Spring的DispatcherServlet假如缺少几个关键元素将无法分派请求。其中最重要的一个是处理程序执行链。</p>
<p>在这篇文章中，我们把注意力放在<strong>处理程序执行链</strong>之上。老规矩，第一部分将介绍这个概念。第二部分把目光引入到Spring执行链的世界中。在最后一部分，我们将分析如何在Spring中利用之前自定义DispatcherServlet中实现一个自定义的处理程序执行链。</p>
</blockquote>
<a id="more"></a>
<h2 id="什么是Spring中的处理程序执行链？"><a href="#什么是Spring中的处理程序执行链？" class="headerlink" title="什么是Spring中的处理程序执行链？"></a>什么是Spring中的处理程序执行链？</h2><p>Spring中的处理程序执行链是一种由处理程序映射和处理程序拦截器(简单点说就是由谁来处理，处理之前和之后应该干点啥)组成的责任链设计模式。处理器映射器用于将当前请求与其专用的controller进行匹配。拦截器是用来在一些调度动作(如controller解析，视图渲染等)之前和之后所调用的对象。</p>
<p>我们所说的一个处理程序执行链是<code>dispatcher servlet</code>用来处理接收到的请求的一组元素。需要说的是，所有执行链调用都由<code>dispatcher servlet</code>类来进行。其实执行链只是一种容器(见源码): </p>
<ul>
<li>定义处理程序映射和拦截器 </li>
<li>定义在某些时刻应用所应该调度的方法(如处理程序适配器适配之后，<code>controller</code>的方法调用之后等等)</li>
</ul>
<h2 id="HandlerExecutionChain类"><a href="#HandlerExecutionChain类" class="headerlink" title="HandlerExecutionChain类"></a>HandlerExecutionChain类</h2><p>处理程序执行链由<strong>org.springframework.web.servlet.HandlerExecutionChain</strong>类表示。它的主要包含两个私有字段:<strong>Object handler</strong> 和 <strong>HandlerInterceptor[] interceptors</strong>,它们被用在请求的调度过程中。第一个包含用于查找处理程序适配器实例的处理程序对象。第二个是包含拦截器的数组，用来应用于处理过的请求(这里这么说是因为这是一条执行链，一个接一个来对这个请求进行处理)。</p>
<p>在<code>DispatcherServlet</code>类中，<code>HandlerExecutionChain</code>的查找通过<strong>protected HandlerExecutionChain getHandler(HttpServletRequest request)</strong>完成。它遍历所有可用的处理程序映射，并返回能够处理请求的第一个处理程序。</p>
<p>在<code>DispatcherServlet</code>与<code>HandlerExecutionChain</code>实例中要完成的第二件事是应用拦截器的前后调用。这是由DispatcherServlet的方法，如<code>applyPreHandle</code>，<code>applyPostHandle</code>，<code>applyAfterConcurrentHandlingStarted</code>和<code>triggerAfterCompletion</code>(关于后两者我会在后面专门写由Java并发编程到线程池到forkjoin到nio到netty这个系列来具体讲述的)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Handler execution chain, consisting of handler object and any handler interceptors.</div><div class="line"> * Returned by HandlerMapping's &#123;<span class="doctag">@link</span> HandlerMapping#getHandler&#125; method.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 20.06.2003</div><div class="line"> * <span class="doctag">@see</span> HandlerInterceptor</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(HandlerExecutionChain.class);</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object handler;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> HandlerInterceptor[] interceptors;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerInterceptor&gt; interceptorList;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> interceptorIndex = -<span class="number">1</span>;</div><div class="line">  </div><div class="line">  ...</div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * Trigger afterCompletion callbacks on the mapped HandlerInterceptors.</div><div class="line">	 * Will just invoke afterCompletion for all interceptors whose preHandle invocation</div><div class="line">	 * has successfully completed and returned true.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		HandlerInterceptor[] interceptors = getInterceptors();</div><div class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">				HandlerInterceptor interceptor = interceptors[i];</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					interceptor.afterCompletion(request, response, <span class="keyword">this</span>.handler, ex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (Throwable ex2) &#123;</div><div class="line">					logger.error(<span class="string">"HandlerInterceptor.afterCompletion threw exception"</span>, ex2);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">applyAfterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</div><div class="line">		HandlerInterceptor[] interceptors = getInterceptors();</div><div class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">				<span class="keyword">if</span> (interceptors[i] <span class="keyword">instanceof</span> AsyncHandlerInterceptor) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i];</div><div class="line">						asyncInterceptor.afterConcurrentHandlingStarted(request, response, <span class="keyword">this</span>.handler);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">						logger.error(<span class="string">"Interceptor ["</span> + interceptors[i] + <span class="string">"] failed in afterConcurrentHandlingStarted"</span>, ex);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.web.servlet.DispatcherServlet</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Return the HandlerExecutionChain for this request.</div><div class="line">	 * &lt;p&gt;Tries all handler mappings in order.</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP request</div><div class="line">	 * <span class="doctag">@return</span> the HandlerExecutionChain, or &#123;<span class="doctag">@code</span> null&#125; if no handler could be found</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">					logger.trace(</div><div class="line">							<span class="string">"Testing handler map ["</span> + hm + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">				&#125;</div><div class="line">				HandlerExecutionChain handler = hm.getHandler(request);</div><div class="line">				<span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">return</span> handler;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">...</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		HttpServletRequest processedRequest = request;</div><div class="line">  		<span class="comment">//HandlerExecutionChain定义出来，做成函数内局部变量可以做到逃逸管理，和request请求做到用完即毁，提		//高性能，防止内存泄漏</span></div><div class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">			Exception dispatchException = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				processedRequest = checkMultipart(request);</div><div class="line">				multipartRequestParsed = (processedRequest != request);</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler for the current request.</span></div><div class="line">              	<span class="comment">//拿到执行链</span></div><div class="line">				mappedHandler = getHandler(processedRequest);</div><div class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</div><div class="line">					noHandlerFound(processedRequest, response);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler adapter for the current request.</span></div><div class="line">              	<span class="comment">//通过处理器找到相应的适配器，其实就是个拓展代理，参考之前我写的Spring设计模式</span></div><div class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></div><div class="line">				String method = request.getMethod();</div><div class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</div><div class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</div><div class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</div><div class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">						logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//提前批预处理</span></div><div class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Actually invoke the handler.</span></div><div class="line">              	<span class="comment">//执行核心处理</span></div><div class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//默认视图渲染</span></div><div class="line">				applyDefaultViewName(processedRequest, mv);</div><div class="line">              	<span class="comment">//秋后算账</span></div><div class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				dispatchException = ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">				<span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></div><div class="line">				<span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></div><div class="line">				dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</div><div class="line">			&#125;</div><div class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler,</div><div class="line">					<span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></div><div class="line">              	<span class="comment">//如果是异步的话，不需要解释了吧，看上面英文</span></div><div class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></div><div class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</div><div class="line">					cleanupMultipart(processedRequest);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义处理程序执行链"><a href="#自定义处理程序执行链" class="headerlink" title="自定义处理程序执行链"></a>自定义处理程序执行链</h2><p>为了说明处理程序执行链的使用，我们将从关于<a href="https://muyinchen.github.io/2017/08/02/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AE%BASpring%20DispatcherServlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Spring DispatcherServlet生命周期</a>的文章中拿到我们自定义的<code>dispatcher  servlet</code>类，并向其添加一个自定义的处理程序执行链。但是，无须深挖并使用<code>HandlerExecutionChain</code>中的所有<code>Spring</code>的类，我们来创建一个新的对象(<code>DumberHandlerExecutionChain</code>)，添加两个方法来调用拦截器，并在<code>DispatcherServlet</code>的类中使用它。请看下面编写的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// we start directly by doService method which handles incoming request</span></div><div class="line"><span class="comment">// retrieve execution chain and handler adapters adapted to received request</span></div><div class="line">DumberHandlerExecutionChain executionChain = <span class="keyword">new</span> DumberHandlerExecutionChain(getHandlerExecutionChain(request));</div><div class="line">System.out.println(<span class="string">"Working with following handler execution chain: "</span>+executionChain);</div><div class="line">HandlerAdapter adapter = getHandlerAdapter(executionChain.getHandler());</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (!executionChain.preHandle(request, response)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Some of defined interceptors weren't ivoked correctly."</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// handle the request and try to generate a ModelAndView instance</span></div><div class="line">ModelAndView modelView = adapter.handle(request, response, executionChain.getHandler());</div><div class="line"><span class="keyword">if</span> (modelView == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Handled ModelAndView can't be null (handled with adapter: "</span>+adapter+<span class="string">")"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!modelView.isReference()) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Only view models defined as references can be used in this servlet"</span>);</div><div class="line">&#125;</div><div class="line">executionChain.postHandle(request, response, modelView);</div></pre></td></tr></table></figure>
<p>只需要改变3行代码。第一个是<code>DumberHandlerExecutionChain</code>实例的定义，替换掉<code>HandlerExecutionChain</code>。第二个更改是<code>applyPreHandler</code>和<code>applyPostHandler</code>方法。这段代码这样来看的话好理解吧。我们来看看DumberHandlerExecutionChain类的定义:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DumberHandlerExecutionChain</span> <span class="keyword">extends</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DumberHandlerExecutionChain</span><span class="params">(HandlerExecutionChain chain)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(chain);</div><div class="line">        System.out.println(<span class="string">"Overriden constructor DumberHandlerExecutionChain invoked"</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (HandlerInterceptor interceptor : getInterceptors()) &#123;</div><div class="line">            System.out.println(<span class="string">"Running pre handler for :"</span>+interceptor);</div><div class="line">            <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.getHandler())) &#123;</div><div class="line">                System.out.println(<span class="string">"An error occured on calling handler for "</span>+interceptor);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ModelAndView viewModel)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (HandlerInterceptor interceptor : getInterceptors()) &#123;</div><div class="line">            interceptor.postHandle(request, response, <span class="keyword">this</span>.getHandler(), viewModel);</div><div class="line">            System.out.println(<span class="string">"Running post handler for :"</span>+interceptor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"DumberHandlerExecutionChain &#123;interceptors :"</span>+Arrays.asList(<span class="keyword">this</span>.getInterceptors())+<span class="string">", handler: "</span>+<span class="keyword">this</span>.getHandler()+<span class="string">"&#125;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它们是前面提到的两种方法:<code>preHandle</code>和<code>postHandle</code>。两者很相似。他们首先迭代所有可用的拦截器。区别在于第一个调用拦截器的<code>preHandle</code>方法和第二个拦截器的<code>postHandle</code>方法。第二个区别是结果。如果所有拦截器正确完成了操作，<code>preHandle</code>将返回true。<code>postHandle</code>不返回任何东西(这里和<code>HandlerExecutionChain</code>源码内相应的方法实现大致一样，但是做了逻辑上的简单处理达到咱们想要的效果即可)。</p>
<p>但这两种方法并不是这个类的核心。它最重要的地方是调用这个父类的构造函数:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. Invoked directly by super(chain) call</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(handler, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 2. Called directly by previous constructor</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler, @Nullable HandlerInterceptor... interceptors)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerExecutionChain) &#123;</div><div class="line">			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler;</div><div class="line">			<span class="keyword">this</span>.handler = originalChain.getHandler();</div><div class="line">			<span class="keyword">this</span>.interceptorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), <span class="keyword">this</span>.interceptorList);</div><div class="line">			CollectionUtils.mergeArrayIntoCollection(interceptors, <span class="keyword">this</span>.interceptorList);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.handler = handler;</div><div class="line">			<span class="keyword">this</span>.interceptors = interceptors;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>由上可以看到，通过<code>handler instanceof</code>检查，我们可以在<code>dispatcher servlet</code>中本地生成<code>HandlerExecutionChain</code>。我们不需要查找产生<code>HandlerExecutionChain</code>实例的处理程序映射(例如:<code>org.springframework.web.servlet.handler.AbstractHandlerMapping</code>或<code>org.springframework.web.servlet.handler.AbstractUrlHandlerMapping</code>的实现类)并覆盖重写现有代码。而不是使用这些复杂的步骤，我们只需简单地将<code>HandlerExecutionChain</code>的实例传递给我们自定义的执行链类的构造函数即可。</p>
<p>完成上面的工作，接下来，你可以在日志中看到以下信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Overriden constructor DumberHandlerExecutionChain invoked</div><div class="line"><span class="comment">//tag1</span></div><div class="line">Working with following handler execution chain: DumberHandlerExecutionChain &#123;interceptors :[org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor@<span class="number">77f</span>6d2e3, com.migo.interceptors.LotteryInterceptor@<span class="number">6</span>d8f729c], handler: <span class="keyword">public</span> java.lang.String com.migo.controller.TestController.test(javax.servlet.http.HttpServletRequest)&#125;</div><div class="line"><span class="comment">//pre</span></div><div class="line">Running pre handler <span class="keyword">for</span> :org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor@<span class="number">77f</span>6d2e3</div><div class="line">Running pre handler <span class="keyword">for</span> :com.migo.interceptors.LotteryInterceptor@<span class="number">6</span>d8f729c</div><div class="line">[LotteryInterceptor] preHandle</div><div class="line"><span class="comment">//excute Controller</span></div><div class="line">Controller asks, are you a lottery winner ? <span class="keyword">true</span></div><div class="line">Current locale is :org.springframework.web.servlet.DispatcherServlet$<span class="number">1</span>@<span class="number">5</span>cf346dc</div><div class="line">Request attributes are :org.apache.catalina.connector.RequestFacade@<span class="number">7</span>d9ccb73</div><div class="line"><span class="comment">//post</span></div><div class="line">Running post handler <span class="keyword">for</span> :org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor@<span class="number">77f</span>6d2e3</div><div class="line">[LotteryInterceptor] postHandle</div><div class="line">Running post handler <span class="keyword">for</span> :com.migo.interceptors.LotteryInterceptor@<span class="number">6</span>d8f729c</div></pre></td></tr></table></figure>
<p>在本文中，我们分析了在Spring 中dispatcher servlet中处理程序执行链的概念。而且已经知道，它不仅包含处理程序映射(在查找处理程序适配器之后用，源码有标注注释)，而且在不同的时间点会调用拦截器。接着，我们详细分析了<code>HandlerExecutionChain</code>类。里面有两个主要的私有字段，一个是一个处理程序，另一个是拦截器数组。在最后一部分，我们通过写一个我们自定义的处理程序执行链，以能够在我们自定义处理程序适配器的操作之前和之后调用拦截器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring-Web中的处理程序执行链&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring-Web中的处理程序执行链&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring Web中的处理程序执行链&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring Web中的处理程序执行链&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring的DispatcherServlet假如缺少几个关键元素将无法分派请求。其中最重要的一个是处理程序执行链。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们把注意力放在&lt;strong&gt;处理程序执行链&lt;/strong&gt;之上。老规矩，第一部分将介绍这个概念。第二部分把目光引入到Spring执行链的世界中。在最后一部分，我们将分析如何在Spring中利用之前自定义DispatcherServlet中实现一个自定义的处理程序执行链。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring中Bean的作用域</title>
    <link href="https://muyinchen.github.io/2017/08/25/Spring%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://muyinchen.github.io/2017/08/25/Spring中的作用域/</id>
    <published>2017-08-25T08:39:08.482Z</published>
    <updated>2017-09-13T05:59:35.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring中Bean的作用域"><a href="#Spring中Bean的作用域" class="headerlink" title="Spring中Bean的作用域"></a>Spring中Bean的作用域</h1><blockquote>
<p>Spring Bean，就像JavaBeans中一样，有其使用的作用域。前面的文章中我们已经看到其中的两个:singleton 和prototype。这次来讲讲另外2个作用域(总共六个，参考本人<a href="https://github.com/muyinchen/Spring-Framework-5.0.0.M3-CN/blob/master/3.5-bean.md" target="_blank" rel="external">Spring5文档翻译</a>)。</p>
</blockquote>
<a id="more"></a>
<p>本文将分为两部分。每个部分描述一个bean作用域。所以，在第一个，我们将探讨下<code>request请求</code>作用域。第二个描述的是<code>session</code>和<code>全局session</code>(此在Spring5文档中已经消失)的作用域。每一部分将由理论和实践组成。需要注意的是:这些概念仅在Web Spring应用程序上下文中有效。</p>
<h2 id="Spring中request请求作用域是什么？"><a href="#Spring中request请求作用域是什么？" class="headerlink" title="Spring中request请求作用域是什么？"></a>Spring中request请求作用域是什么？</h2><p>每个请求初始化具有此作用域的Bean注解。这听起来像是原型作用域的描述，但它们有一些差异。第一个区别是原型作用域在Spring的上下文中可用。而请求作用域仅适用于Web应用程序。第二个是原型bean根据需求进行初始化，而请求bean是在每个请求下构建的。需要说的是，request作用域bean在其作用域内有且仅有一个实例。而你可以拥有一个或多个原型作用域bean实例。</p>
<p>在以下代码中，你可以看到请求作用域bean的示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCartRequest"</span> <span class="attr">class</span>=<span class="string">"com.migo.scope.ShoppingCartRequest"</span> <span class="attr">scope</span>=<span class="string">"request"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当使用注解驱动组件或Java Config时，<code>@RequestScope</code>注解可以用于将一个组件分配给<code>request</code>作用域。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestScope</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCartRequest</span> </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// request bean</span></div><div class="line"> </div><div class="line"><span class="comment">// injection sample</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ShoppingCartRequest shoppingCartRequest;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"shoppingCartRequest is :"</span>+shoppingCartRequest);</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意<strong><code>&lt;bean&gt;</code>定义内</strong>存在的<strong><code>&lt;aop: scoped-proxy /&gt;</code></strong>标签。这代表着使用代理对象。所以实际上，TestController持有的是代理对象的引用。我们所有的调用该对象都会转发到真正的<code>ShoppingCartRequest</code>对象。</p>
<p>有时我们需要使用<code>DispatcherServlet</code>的另一个<code>servlet</code>来处理请求。在这种情况下，我们必须确保Spring中所有请求都可用(否则可以抛出与下面类似的异常)。为此，我们需要在<code>web.xml</code>中定义一个监听器:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<p>调用/测试URL后，你应该能在日志中的发现以下信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shoppingCartRequest is :com.migo.scope.ShoppingCartRequest@<span class="number">2586</span>b11c</div><div class="line">shoppingCartRequest is :com.migo.scope.ShoppingCartRequest@<span class="number">3</span>bd5b945</div></pre></td></tr></table></figure>
<p>如果我们尝试在单例bean中使用request作用域的bean，则会在应用程序上下文加载阶段抛出一个<code>BeanCreationException</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'testController'</span>: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: <span class="keyword">private</span> com.migo.scope.ShoppingCartRequest com.migo.controller.TestController.shoppingCartRequest; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:<span class="number">292</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1185</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">537</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">475</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory$<span class="number">1</span>.getObject(AbstractBeanFactory.java:<span class="number">304</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">228</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">300</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">195</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class="number">700</span>)</div><div class="line">	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class="number">760</span>)</div><div class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">482</span>)</div><div class="line">	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:<span class="number">381</span>)</div><div class="line">	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:<span class="number">293</span>)</div><div class="line">	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:<span class="number">106</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:<span class="number">4701</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5204</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5199</span>)</div><div class="line">	at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)</div><div class="line">	at java.util.concurrent.FutureTask.run(Unknown Source)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</div><div class="line">	at java.lang.Thread.run(Unknown Source)</div><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: <span class="keyword">private</span> com.migo.scope.ShoppingCartRequest com.migo.controller.TestController.shoppingCartRequest; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:<span class="number">508</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:<span class="number">87</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:<span class="number">289</span>)</div><div class="line">	... <span class="number">21</span> more</div><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">353</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">195</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:<span class="number">1014</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:<span class="number">957</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:<span class="number">855</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:<span class="number">480</span>)</div><div class="line">	... <span class="number">23</span> more</div><div class="line">Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:<span class="number">131</span>)</div><div class="line">	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:<span class="number">41</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">338</span>)</div><div class="line">	... <span class="number">28</span> more</div></pre></td></tr></table></figure>
<h2 id="什么是Spring的Session作用域？"><a href="#什么是Spring的Session作用域？" class="headerlink" title="什么是Spring的Session作用域？"></a>什么是Spring的Session作用域？</h2><p>Session作用域的bean与request 作用域的bean没有太大的不同。它们也与纯Web应用程序上下文相关联。注解为Session作用域的Bean对于每个用户的会话仅创建一次。他们在会话结束时被破坏销毁掉。</p>
<p>由Session作用域限制的Bean可以被认为是面向Web的单例，因为给定环境(用户会话)仅存在一个实例。但请记住，你无法在Web应用程序上下文中使用它们(说个好理解点的，就是一个函数内部自定义变量所在的作用域，函数执行完就销毁了，没有什么逃逸，关于此处更深入的理解请看我的博文<a href="https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/">由域联系到的逃逸分析</a>)。</p>
<p>想知道Session作用域bean在Spring中的操作，我们需要在配置文件中定义一个bean:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCartRequest"</span> <span class="attr">class</span>=<span class="string">"com.migo.scope.ShoppingCartSession"</span> <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过<code>@Autowired</code>注解，查找这个bean的方式与request 作用域的bean相同。可以看到以下结果:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">2f</span>87fafc</div></pre></td></tr></table></figure>
<p>你可以看到，前5个打印输出代表相同的对象。最后一个是不同的。这是什么意思 ?简单来说，这代表 着一个新的用户使用自动注入的Session作用域访问该页面。我们可以通过打开两个浏览器的测试页(/test)来观察它。每个都将初始化一个新的会话Session，因此也就创建新的<code>ShoppingCartSession bean</code>实例。</p>
<p>关于全局会话作用域(Global session scope)属于4.3x的范畴了，Spring5已经没有了，Spring5文档是去掉了因为4的存在所以还是说两句，它保留给portlet应用程序。 是不是一脸懵逼，so，来解释一下portlet是什么。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与servlet不同，每个portlet都有不同的会话。在这种情况下，Spring提供了一个名为<code>global-session</code>的作用域。通过它，一个bean可以通过应用程序中的多个portlet共享。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userPreferences"</span> <span class="attr">class</span>=<span class="string">"com.foo.UserPreferences"</span> <span class="attr">scope</span>=<span class="string">"globalSession"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>至此，我们解释了请求和面向会话的作用域。第一个的作用是在每个request请求上创建新的bean。第二个在Session会话开始的时候初始化bean。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring中Bean的作用域&quot;&gt;&lt;a href=&quot;#Spring中Bean的作用域&quot; class=&quot;headerlink&quot; title=&quot;Spring中Bean的作用域&quot;&gt;&lt;/a&gt;Spring中Bean的作用域&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Bean，就像JavaBeans中一样，有其使用的作用域。前面的文章中我们已经看到其中的两个:singleton 和prototype。这次来讲讲另外2个作用域(总共六个，参考本人&lt;a href=&quot;https://github.com/muyinchen/Spring-Framework-5.0.0.M3-CN/blob/master/3.5-bean.md&quot;&gt;Spring5文档翻译&lt;/a&gt;)。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-@Autowired</title>
    <link href="https://muyinchen.github.io/2017/08/23/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@Autowired/"/>
    <id>https://muyinchen.github.io/2017/08/23/Spring5源码解析-@Autowired/</id>
    <published>2017-08-23T04:17:11.417Z</published>
    <updated>2017-09-13T05:59:55.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Autowired"><a href="#Spring5源码解析-Autowired" class="headerlink" title="Spring5源码解析-@Autowired"></a>Spring5源码解析-@Autowired</h1><blockquote>
<p>你有没有思考过Spring中的@Autowired注解？通常用于方便依赖注入，而隐藏在这个过程之后的机制到底是怎样，将在本篇中进行讲述。</p>
</blockquote>
<a id="more"></a>
<h2 id="Autowired所具有的功能"><a href="#Autowired所具有的功能" class="headerlink" title="@Autowired所具有的功能"></a>@Autowired所具有的功能</h2><p><code>@Autowired</code>是一个用来执行依赖注入的注解。每当一个<code>Spring</code>管理的<code>bean</code>发现有这个注解时候，它会直接注入相应的另一个<code>Spring</code>管理的<code>bean</code>。</p>
<p><strong>该注解可以在不同的层次上应用:</strong> </p>
<ul>
<li><strong>类字段:</strong>Spring将通过扫描自定义的<code>packages</code>(例如在我们所注解的<code>controllers</code>)或通过在配置文件中直接查找bean。 </li>
<li><strong>方法:</strong>使用<code>@Autowired</code>注解的每个方法都要用到依赖注入。但要注意的是，方法签名中呈现的所有对象都必须是Spring所管理的bean。如果你有一个方法，比如<code>setTest(Article article, NoSpringArticle noSpringArt)</code> ，其中只有一个参数 (<em><code>Article article</code></em>)是由Spring管理的，那么就将抛出一个<strong>org.springframework.beans.factory.BeanCreationException</strong>异常。这是由于Spring容器里并没有指定的一个或多个参数所指向的bean，所以也就无法解析它们。完整的异常跟踪如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'testController'</span>: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: <span class="keyword">public</span> <span class="keyword">void</span> org.krams.tutorial.controller.TestController.ix(com.mysite.controller.IndexController,com.mysite.nospring.data.Article); nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.mysite.nospring.data.Article] found <span class="keyword">for</span> dependency: expected at least <span class="number">1</span> bean which qualifies as autowire candidate <span class="keyword">for</span> <span class="keyword">this</span> dependency. Dependency annotations: &#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>构造函数:</strong><code>@Autowired</code>的工作方式和方法相同。</li>
</ul>
<p><strong>对象注入需要遵循一些规则。一个bean可以按照下面的方式注入: </strong></p>
<ul>
<li><strong>名称:</strong>bean解析是通过bean名称(看后面的例子)。 </li>
<li><strong>类型:</strong>解析过程基于bean的类型。</li>
</ul>
<p>在某些情况下，<code>@Autowired</code>应该通过<code>@Qualifier</code>注解协作注入。例如下面几个是相同类型的bean:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment1"</span> <span class="attr">class</span>=<span class="string">"com.migo.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"Content of the 1st comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment2"</span> <span class="attr">class</span>=<span class="string">"com.migo.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"Content of the 2nd comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面这种情况，假如只是一个简单的<code>@Autowired</code>，<code>Spring</code>根本不知道你要注入哪个<code>bean</code>。这就是为什么我们要使用<code>@Qualifier(value =“beanName”)</code>这个注解。在我们的例子中，要从 <code>com.migo.Comment</code>这个类型的bean中区分<code>comment1</code>,<code>comment2</code>，我们可以写下面的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span>(value=<span class="string">"comment1"</span>)</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Comment firstComment;</div><div class="line"> </div><div class="line"><span class="meta">@Qualifier</span>(value=<span class="string">"comment2"</span>)</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Comment secondComment;</div></pre></td></tr></table></figure>
<h2 id="在Spring中如何使用-Autowired"><a href="#在Spring中如何使用-Autowired" class="headerlink" title="在Spring中如何使用@Autowired"></a>在Spring中如何使用@Autowired</h2><p>正如前面部分所看到的，我们知道了在Spring中实现<code>@Autowired</code>的不同方法。在这一部分中，我们将使用<code>XML</code>配置的方式激活<code>@Autowired</code>注解来自动注入。然后，我们将编写一个简单的类并配置一些bean。最后，我们将分别在另外两个类中使用它们:由@Controller注解的控件和不由Spring所管理的类。(为什么用<code>XML</code>配置来做例子，我觉得这样更直观，其实XML和使用注解没多少区别，都是往容器里添加一些bean和组织下彼此之间的依赖而已，不必要非要拘泥于一种形式，哪种顺手用哪种，不过<code>Springboot</code>自定义的这些还是推荐使用注解了)</p>
<p>我们从启动注解的自动注入开始:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>你必须将上面这个放在应用程序上下文配置中。它可以使在遇到<code>@Autowired注解</code>时启用依赖注入。</p>
<p>现在，我们来编写和配置我们的bean:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// beans first</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> String content;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// sample controller</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">     </div><div class="line">    <span class="meta">@Qualifier</span>(value=<span class="string">"comment1"</span>)</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment firstComment;</div><div class="line">     </div><div class="line">    <span class="meta">@Qualifier</span>(value=<span class="string">"comment2"</span>)</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment secondComment;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"1st comment text: "</span>+firstComment.getText());</div><div class="line">        System.out.println(<span class="string">"2nd comment text: "</span>+secondComment.getText());</div><div class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// no-Spring managed class</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNoSpring</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment comment;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComment</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (comment == <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"Comment's instance wasn't autowired because this class is not Spring-managed bean"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            comment.setContent(content);</div><div class="line">            System.out.println(<span class="string">"Comment's content: "</span>+comment.getContent());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>XML配置(在前面部分已经看到过):</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment1"</span> <span class="attr">class</span>=<span class="string">"com.specimen.exchanger.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"Content of the 1st comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment2"</span> <span class="attr">class</span>=<span class="string">"com.specimen.exchanger.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"Content of the 2nd comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在，我们打开<code>http://localhost:8080/test</code>来运行<code>TestController</code>。如预期的那样，<code>TestController</code>的注解字段正确地自动注入，而<code>TestNoSpring</code>的注解字段并没有注入进去:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>st comment text: Content of the <span class="number">1</span>st comment</div><div class="line"><span class="number">2</span>nd comment text: Content of the <span class="number">2</span>nd comment</div><div class="line">Comment<span class="string">'s instance wasn'</span>t autowired because <span class="keyword">this</span> <span class="class"><span class="keyword">class</span> <span class="title">is</span> <span class="title">not</span> <span class="title">Spring</span>-<span class="title">managed</span> <span class="title">bean</span></span></div></pre></td></tr></table></figure>
<p>哪里不对 ？TestNoSpring类不由Spring所管理。这就是为什么Spring不能注入Comment实例的依赖。我们将在下一部分中解释这个概念。</p>
<h2 id="Autowired注解背后的工作原理？"><a href="#Autowired注解背后的工作原理？" class="headerlink" title="@Autowired注解背后的工作原理？"></a>@Autowired注解背后的工作原理？</h2><p>在讨论代码细节之前，我们再来了解下基础知识。Spring管理可用于整个应用程序的Java对象bean。他们所在的Spring容器，被称为应用程序上下文。这意味着我们不需要处理他们的生命周期(初始化，销毁)。该任务由此容器来完成。另外，该上下文具有入口点，在Web应用程序中，是dispatcher servlet。容器(也就是该上下文)会在它那里被启动并且所有的bean都会被注入。</p>
<p>说的再清楚点，请看<code>&lt;context:annotation-config /&gt;</code>的定义:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"annotation-config"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span>&lt;![CDATA[</div><div class="line">	Activates various annotations to be detected in bean classes: Spring's @Required and</div><div class="line">	@Autowired, as well as JSR 250's @PostConstruct, @PreDestroy and @Resource (if available),</div><div class="line">	JAX-WS's @WebServiceRef (if available), EJB 3's @EJB (if available), and JPA's</div><div class="line">	@PersistenceContext and @PersistenceUnit (if available). Alternatively, you may</div><div class="line">	choose to activate the individual BeanPostProcessors for those annotations.</div><div class="line"></div><div class="line">	Note: This tag does not activate processing of Spring's @Transactional or EJB 3's</div><div class="line">	@TransactionAttribute annotation. Consider the use of the &lt;tx:annotation-driven&gt;</div><div class="line">	tag for that purpose.</div><div class="line"></div><div class="line">	See javadoc for org.springframework.context.annotation.AnnotationConfigApplicationContext</div><div class="line">	for information on code-based alternatives to bootstrapping annotation-driven support.</div><div class="line">			]]&gt;<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>可以看出 :</strong>  类内部的注解，如：<code>@Autowired</code>、<code>@Value</code>、<code>@Required</code>、<code>@Resource</code>以及<code>EJB</code>和<code>WebSerivce</code>相关的注解，是容器对Bean对象实例化和依赖注入时，通过容器中注册的Bean后置处理器处理这些注解的。</p>
<p>所以配置了上面这个配置(<code>&lt;context:component-scan&gt;</code>假如有配置这个，那么就可以省略<code>&lt;context:annotation-config /&gt;</code>)后，将隐式地向Spring容器注册<code>AutowiredAnnotationBeanPostProcessor</code>、<code>CommonAnnotationBeanPostProcessor</code>、<code>RequiredAnnotationBeanPostProcessor</code>、<code>PersistenceAnnotationBeanPostProcessor</code>以及这4个专门用于处理注解的Bean后置处理器。</p>
<p>当 Spring 容器<strong>启动</strong>时，<code>AutowiredAnnotationBeanPostProcessor</code> 将<strong>扫描 Spring 容器中所有 Bean，当发现 Bean 中拥有@Autowired 注解时就找到和其匹配（默认按类型匹配）的 Bean</strong>，<strong>并注入</strong>到对应的地方中去。 源码分析如下:</p>
<p>通过<strong>org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor</strong>可以<strong>实现依赖自动注入</strong>。通过这个类来处理<code>@Autowired</code>和<code>@Value</code>这俩<code>Spring注解</code>。它也可以管理<code>JSR-303</code>的<code>@Inject</code>注解(如果可用的话)。在<code>AutowiredAnnotationBeanPostProcessor</code>构造函数中定义要处理的注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">InstantiationAwareBeanPostProcessorAdapter</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">MergedBeanDefinitionPostProcessor</span>, <span class="title">PriorityOrdered</span>, <span class="title">BeanFactoryAware</span> &#123;</div><div class="line">		...</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new AutowiredAnnotationBeanPostProcessor</div><div class="line">	 * for Spring's standard &#123;<span class="doctag">@link</span> Autowired&#125; annotation.</div><div class="line">	 * &lt;p&gt;Also supports JSR-330's &#123;<span class="doctag">@link</span> javax.inject.Inject&#125; annotation, if available.</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Autowired.class);</div><div class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Value.class);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</div><div class="line">					ClassUtils.forName(<span class="string">"javax.inject.Inject"</span>, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</div><div class="line">			logger.info(<span class="string">"JSR-330 'javax.inject.Inject' annotation found and supported for autowiring"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">			<span class="comment">// JSR-330 API not available - simply skip.</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>之后，有几种方法来对<code>@Autowired注解</code>进行处理。</p>
<p>第一个，<code>private InjectionMetadata buildAutowiringMetadata(final Class&lt;?&gt; clazz)</code>解析等待<strong>自动注入</strong>类的所有属性。它通过分析所有字段和方法并初始化<strong>org.springframework.beans.factory.annotation.InjectionMetadata</strong>类的实例来实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> InjectionMetadata <span class="title">buildAutowiringMetadata</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">		LinkedList&lt;InjectionMetadata.InjectedElement&gt; elements = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">		Class&lt;?&gt; targetClass = clazz;</div><div class="line"></div><div class="line">		<span class="keyword">do</span> &#123;</div><div class="line">			<span class="keyword">final</span> LinkedList&lt;InjectionMetadata.InjectedElement&gt; currElements = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">			<span class="comment">//分析所有字段</span></div><div class="line">			ReflectionUtils.doWithLocalFields(targetClass, field -&gt; &#123;</div><div class="line">              <span class="comment">//findAutowiredAnnotation(field)此方法后面会解释</span></div><div class="line">				AnnotationAttributes ann = findAutowiredAnnotation(field);</div><div class="line">				<span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">if</span> (Modifier.isStatic(field.getModifiers())) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation is not supported on static fields: "</span> + field);</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">boolean</span> required = determineRequiredStatus(ann);</div><div class="line">					currElements.add(<span class="keyword">new</span> AutowiredFieldElement(field, required));</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">//分析所有方法</span></div><div class="line">			ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</div><div class="line">				Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);</div><div class="line">				<span class="keyword">if</span> (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);</div><div class="line">				<span class="keyword">if</span> (ann != <span class="keyword">null</span> &amp;&amp; method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</div><div class="line">					<span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation is not supported on static methods: "</span> + method);</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (method.getParameterCount() == <span class="number">0</span>) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation should only be used on methods with parameters: "</span> +</div><div class="line">									method);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">boolean</span> required = determineRequiredStatus(ann);</div><div class="line">					PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</div><div class="line">					currElements.add(<span class="keyword">new</span> AutowiredMethodElement(method, required, pd));</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			elements.addAll(<span class="number">0</span>, currElements);</div><div class="line">			targetClass = targetClass.getSuperclass();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (targetClass != <span class="keyword">null</span> &amp;&amp; targetClass != Object.class);</div><div class="line">		<span class="comment">//返回一个InjectionMetadata初始化的对象实例</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> InjectionMetadata(clazz, elements);</div><div class="line">	&#125;</div><div class="line">...</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * 'Native' processing method for direct calls with an arbitrary target instance,</div><div class="line">	 * resolving all of its fields and methods which are annotated with &#123;<span class="doctag">@code</span> <span class="doctag">@Autowired</span>&#125;.</div><div class="line">	 * <span class="doctag">@param</span> bean the target instance to process</div><div class="line">	 * <span class="doctag">@throws</span> BeanCreationException if autowiring failed</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processInjection</span><span class="params">(Object bean)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</div><div class="line">		Class&lt;?&gt; clazz = bean.getClass();</div><div class="line">		InjectionMetadata metadata = findAutowiringMetadata(clazz.getName(), clazz, <span class="keyword">null</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			metadata.inject(bean, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (BeanCreationException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">					<span class="string">"Injection of autowired dependencies failed for class ["</span> + clazz + <span class="string">"]"</span>, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>InjectionMetadata</code>类包含要注入的元素的列表。注入是通过Java的API <code>Reflection (Field set(Object obj, Object value)</code> 或<code>Method invoke(Object obj，Object ... args)</code>方法完成的。此过程直接在<code>AutowiredAnnotationBeanPostProcessor</code>的方法中调用<code>public void processInjection(Object bean) throws BeanCreationException</code>。它将所有可注入的bean检索为<code>InjectionMetadata</code>实例，并调用它们的<code>inject()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectionMetadata</span> </span>&#123;</div><div class="line">  ...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, @Nullable String beanName, @Nullable PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		Collection&lt;InjectedElement&gt; checkedElements = <span class="keyword">this</span>.checkedElements;</div><div class="line">		Collection&lt;InjectedElement&gt; elementsToIterate =</div><div class="line">				(checkedElements != <span class="keyword">null</span> ? checkedElements : <span class="keyword">this</span>.injectedElements);</div><div class="line">		<span class="keyword">if</span> (!elementsToIterate.isEmpty()) &#123;</div><div class="line">			<span class="keyword">boolean</span> debug = logger.isDebugEnabled();</div><div class="line">			<span class="keyword">for</span> (InjectedElement element : elementsToIterate) &#123;</div><div class="line">				<span class="keyword">if</span> (debug) &#123;</div><div class="line">					logger.debug(<span class="string">"Processing injected element of bean '"</span> + beanName + <span class="string">"': "</span> + element);</div><div class="line">				&#125;</div><div class="line">              	<span class="comment">//看下面静态内部类的方法</span></div><div class="line">				element.inject(target, beanName, pvs);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  ...</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectedElement</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">protected</span> <span class="keyword">final</span> Member member;</div><div class="line"></div><div class="line">		<span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isField;</div><div class="line">      ...</div><div class="line">        <span class="comment">/**</span></div><div class="line">		 * Either this or &#123;<span class="doctag">@link</span> #getResourceToInject&#125; needs to be overridden.</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, @Nullable String requestingBeanName, @Nullable PropertyValues pvs)</span></span></div><div class="line">				<span class="keyword">throws</span> Throwable &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.isField) &#123;</div><div class="line">				Field field = (Field) <span class="keyword">this</span>.member;</div><div class="line">				ReflectionUtils.makeAccessible(field);</div><div class="line">				field.set(target, getResourceToInject(target, requestingBeanName));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (checkPropertySkipping(pvs)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">                  	<span class="comment">//具体的注入看此处咯</span></div><div class="line">					Method method = (Method) <span class="keyword">this</span>.member;</div><div class="line">					ReflectionUtils.makeAccessible(method);</div><div class="line">					method.invoke(target, getResourceToInject(target, requestingBeanName));</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (InvocationTargetException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> ex.getTargetException();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AutowiredAnnotationBeanPostProcessor</code>类中的另一个重要方法是<strong>private AnnotationAttributes findAutowiredAnnotation(AccessibleObject ao)</strong>。它通过分析属于一个字段或一个方法的所有注解来查找<code>@Autowired</code>注解。如果未找到<code>@Autowired</code>注解，则返回<code>null</code>，字段或方法也就视为不可注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">private</span> AnnotationAttributes <span class="title">findAutowiredAnnotation</span><span class="params">(AccessibleObject ao)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ao.getAnnotations().length &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Class&lt;? extends Annotation&gt; type : <span class="keyword">this</span>.autowiredAnnotationTypes) &#123;</div><div class="line">				AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);</div><div class="line">				<span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">return</span> attributes;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在上面的文章中，我们看到了Spring中自动注入过程。通过整篇文章可以看到，这种依赖注入是一种便捷易操作方式(可以在字段以及方法上完成)，也促使我们逐渐在抛弃XML配置文件。还增强了代码的可读性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Autowired&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Autowired&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-@Autowired&quot;&gt;&lt;/a&gt;Spring5源码解析-@Autowired&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;你有没有思考过Spring中的@Autowired注解？通常用于方便依赖注入，而隐藏在这个过程之后的机制到底是怎样，将在本篇中进行讲述。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-@ModelAttribute</title>
    <link href="https://muyinchen.github.io/2017/08/17/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@ModelAttribute/"/>
    <id>https://muyinchen.github.io/2017/08/17/Spring5源码解析-@ModelAttribute/</id>
    <published>2017-08-17T02:26:31.107Z</published>
    <updated>2017-08-24T04:28:21.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-ModelAttribute"><a href="#Spring5源码解析-ModelAttribute" class="headerlink" title="Spring5源码解析-@ModelAttribute"></a>Spring5源码解析-@ModelAttribute</h1><blockquote>
<p>之前我们讨论了Spring中如何通过验证器来达到校验目的。其中有几行我们提到了@ModelAttribute注解。但是，单单理解这个概念还不够，总感觉飘如浮萍。</p>
</blockquote>
<p>本文将对<code>@ModelAttribute</code>进行解析。将分为两部分。首先将介绍此注解的用法。第二部分将通过具体的代码来分析这个注解和其相应的解析器的细节。<br><a id="more"></a></p>
<h2 id="什么是-ModelAttribute注解？"><a href="#什么是-ModelAttribute注解？" class="headerlink" title="什么是@ModelAttribute注解？"></a>什么是@ModelAttribute注解？</h2><p><code>@ModelAttribute</code>注解主要用来将请求转换为使用此注解指定的对象。例如，如果在<code>@ModelAttribute</code>旁边指定了一个<code>Article</code>实例，则与<code>Article</code>的字段对应的所有请求参数将被用作<code>Article</code>的字段值。什么意思呢，例如，<code>POST提交</code>后参数<code>title</code>的值将被设置为<code>Article</code>的<code>title</code> 字段。这里推荐一篇文章解释的很清晰:<a href="http://blog.csdn.net/hejingyuan6/article/details/49995987" target="_blank" rel="external">http://blog.csdn.net/hejingyuan6/article/details/49995987</a></p>
<p>因此，此注解允许开发人员通过请求来持久化一个对象。没有它，Spring认为必须创建一个新对象。另外，它直接显示一个对象模型来查看。你不需要在方法中再调用model.setAttribute()。在视图部分，可以通过注解中的指定值查找指定对象(例如，@ModelAttribute(“articleView”)可以在jsp中通过<code>${articleView}</code>获取相应的值)或对象的类名称(例如<code>@ModelAttribute()Article article</code>将在视图层获取方式就是<code>${article}</code>)。</p>
<h2 id="ModelAttribute注解相关代码详解"><a href="#ModelAttribute注解相关代码详解" class="headerlink" title="@ModelAttribute注解相关代码详解"></a>@ModelAttribute注解相关代码详解</h2><p>还是分两波来说吧，也参考了不少其他解析的文章，看了很多相关评论，大都觉得各种迷迷糊糊所以就旧版新版都说说咯，反正都是源码学习，4.3版本之前和之后(4.2之后机制已经改了，下面讲新版本的时候会看到源码相关注释)，4.3版本之后被废弃掉了，先谈老版本的。</p>
<h3 id="老版本"><a href="#老版本" class="headerlink" title="老版本"></a>老版本</h3><p>总体来看，有三个关键类协助<code>@ModelAttribute</code>来转换得到我们所需要的预期对象。第一个是<strong>org.springframework.web.bind.annotation.support.HandlerMethodResolver</strong>。它包含一个Set类型的私有字段，称为<code>modelAttributeMethods</code>。此字段包含被<code>@ModelAttribute</code>注解了的方法。在init()方法中，解析器将所有相关方法放在此集合中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Method&gt; modelAttributeMethods = <span class="keyword">new</span> LinkedHashSet&lt;Method&gt;();</div><div class="line">...</div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Initialize a new HandlerMethodResolver for the specified handler type.</div><div class="line">	 * <span class="doctag">@param</span> handlerType the handler class to introspect</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; handlerType)</span> </span>&#123;</div><div class="line">		Set&lt;Class&lt;?&gt;&gt; handlerTypes = <span class="keyword">new</span> LinkedHashSet&lt;Class&lt;?&gt;&gt;();</div><div class="line">		Class&lt;?&gt; specificHandlerType = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span> (!Proxy.isProxyClass(handlerType)) &#123;</div><div class="line">			handlerTypes.add(handlerType);</div><div class="line">			specificHandlerType = handlerType;</div><div class="line">		&#125;</div><div class="line">		handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()));</div><div class="line">		<span class="keyword">for</span> (Class&lt;?&gt; currentHandlerType : handlerTypes) &#123;</div><div class="line">			<span class="keyword">final</span> Class&lt;?&gt; targetClass = (specificHandlerType != <span class="keyword">null</span> ? specificHandlerType : currentHandlerType);</div><div class="line">			ReflectionUtils.doWithMethods(currentHandlerType, <span class="keyword">new</span> ReflectionUtils.MethodCallback() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWith</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">					Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);</div><div class="line">					Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);</div><div class="line">					<span class="keyword">if</span> (isHandlerMethod(specificMethod) &amp;&amp;</div><div class="line">							(bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) &#123;</div><div class="line">						handlerMethods.add(specificMethod);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (isInitBinderMethod(specificMethod) &amp;&amp;</div><div class="line">							(bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) &#123;</div><div class="line">						initBinderMethods.add(specificMethod);</div><div class="line">					&#125;</div><div class="line">                  <span class="comment">//此处代码可知</span></div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (isModelAttributeMethod(specificMethod) &amp;&amp;</div><div class="line">							(bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) &#123;</div><div class="line">						modelAttributeMethods.add(specificMethod);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;, ReflectionUtils.USER_DECLARED_METHODS);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.typeLevelMapping = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);</div><div class="line">		SessionAttributes sessionAttributes = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class);</div><div class="line">		<span class="keyword">this</span>.sessionAttributesFound = (sessionAttributes != <span class="keyword">null</span>);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.sessionAttributesFound) &#123;</div><div class="line">			<span class="keyword">this</span>.sessionAttributeNames.addAll(Arrays.asList(sessionAttributes.names()));</div><div class="line">			<span class="keyword">this</span>.sessionAttributeTypes.addAll(Arrays.asList(sessionAttributes.types()));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>之后，<strong>org.springframework.web.bind.annotation.support.HandlerMethodInvoker</strong>就可以开始干活了。在其方法<code>invokeHandlerMethod()</code>中，它从<code>modelAttributeMethods Set</code>遍历所有方法。如果之前model属性没有解析，它将通过创建对象来将请求参数绑定到对象的相应字段。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Method attributeMethod : <span class="keyword">this</span>.methodResolver.getModelAttributeMethods()) &#123;</div><div class="line">				Method attributeMethodToInvoke = BridgeMethodResolver.findBridgedMethod(attributeMethod);</div><div class="line">				Object[] args = resolveHandlerArguments(attributeMethodToInvoke, handler, webRequest, implicitModel);</div><div class="line">				<span class="keyword">if</span> (debug) &#123;</div><div class="line">					logger.debug(<span class="string">"Invoking model attribute method: "</span> + attributeMethodToInvoke);</div><div class="line">				&#125;</div><div class="line">				String attrName = AnnotationUtils.findAnnotation(attributeMethod, ModelAttribute.class).value();</div><div class="line">				<span class="keyword">if</span> (!<span class="string">""</span>.equals(attrName) &amp;&amp; implicitModel.containsAttribute(attrName)) &#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">				ReflectionUtils.makeAccessible(attributeMethodToInvoke);</div><div class="line">				Object attrValue = attributeMethodToInvoke.invoke(handler, args);</div><div class="line">				<span class="keyword">if</span> (<span class="string">""</span>.equals(attrName)) &#123;</div><div class="line">					Class&lt;?&gt; resolvedType = GenericTypeResolver.resolveReturnType(attributeMethodToInvoke, handler.getClass());</div><div class="line">					attrName = Conventions.getVariableNameForReturnType(attributeMethodToInvoke, resolvedType, attrValue);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (!implicitModel.containsAttribute(attrName)) &#123;</div><div class="line">					implicitModel.addAttribute(attrName, attrValue);</div><div class="line">				&#125;</div><div class="line">			&#125;</div></pre></td></tr></table></figure>
<p>通过<strong>org.springframework.web.method.annotation.ModelAttributeMethodProcessor</strong>来做绑定。更确切地说，它是通过方法<strong>protected void bindRequestParameters(WebDataBinder binder，NativeWebRequest request)</strong>来将请求绑定到目标对象。而更准确地说，它使用<code>WebRequestDataBinder</code>的<code>bind()</code>方法来做到这一点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Extension point to bind the request to the target object.</div><div class="line">	 * <span class="doctag">@param</span> binder the data binder instance to use for the binding</div><div class="line">	 * <span class="doctag">@param</span> request the current request</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bindRequestParameters</span><span class="params">(WebDataBinder binder, NativeWebRequest request)</span> </span>&#123;</div><div class="line">		((WebRequestDataBinder) binder).bind(request);</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 此处会在新版本的最后提到，到时可从此开始看的</div><div class="line">	 * Resolve the argument from the model or if not found instantiate it with</div><div class="line">	 * its default if it is available. The model attribute is then populated</div><div class="line">	 * with request values via data binding and optionally validated</div><div class="line">	 * if &#123;<span class="doctag">@code</span> <span class="doctag">@java</span>.validation.Valid&#125; is present on the argument.</div><div class="line">	 * <span class="doctag">@throws</span> BindException if data binding and validation result in an error</div><div class="line">	 * and the next method parameter is not of type &#123;<span class="doctag">@link</span> Errors&#125;.</div><div class="line">	 * <span class="doctag">@throws</span> Exception if WebDataBinder initialization fails.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span></div><div class="line">			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		String name = ModelFactory.getNameForParameter(parameter);</div><div class="line">		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :</div><div class="line">				createAttribute(name, parameter, binderFactory, webRequest));</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</div><div class="line">			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);</div><div class="line">			<span class="keyword">if</span> (ann != <span class="keyword">null</span> &amp;&amp; !ann.binding()) &#123;</div><div class="line">				mavContainer.setBindingDisabled(name);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//此处来做绑定</span></div><div class="line">		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</div><div class="line">		<span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</div><div class="line">				bindRequestParameters(binder, webRequest);</div><div class="line">			&#125;</div><div class="line">			validateIfApplicable(binder, parameter);</div><div class="line">			<span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Add resolved attribute and BindingResult at the end of the model</span></div><div class="line">		Map&lt;String, Object&gt; bindingResultModel = binder.getBindingResult().getModel();</div><div class="line">		mavContainer.removeAttributes(bindingResultModel);</div><div class="line">		mavContainer.addAllAttributes(bindingResultModel);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>WebRequestDataBinder</code>的<code>bind()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Bind the parameters of the given request to this binder's target,</div><div class="line">	 * also binding multipart files in case of a multipart request.</div><div class="line">	 * &lt;p&gt;This call can create field errors, representing basic binding</div><div class="line">	 * errors like a required field (code "required"), or type mismatch</div><div class="line">	 * between value and bean property (code "typeMismatch").</div><div class="line">	 * &lt;p&gt;Multipart files are bound via their parameter name, just like normal</div><div class="line">	 * HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,</div><div class="line">	 * invoking a "setUploadedFile" setter method.</div><div class="line">	 * &lt;p&gt;The type of the target property for a multipart file can be Part, MultipartFile,</div><div class="line">	 * byte[], or String. The latter two receive the contents of the uploaded file;</div><div class="line">	 * all metadata like original file name, content type, etc are lost in those cases.</div><div class="line">	 * <span class="doctag">@param</span> request request with parameters to bind (can be multipart)</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.web.multipart.MultipartRequest</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.web.multipart.MultipartFile</div><div class="line">	 * <span class="doctag">@see</span> javax.servlet.http.Part</div><div class="line">	 * <span class="doctag">@see</span> #bind(org.springframework.beans.PropertyValues)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(WebRequest request)</span> </span>&#123;</div><div class="line">		MutablePropertyValues mpvs = <span class="keyword">new</span> MutablePropertyValues(request.getParameterMap());</div><div class="line">		<span class="keyword">if</span> (isMultipartRequest(request) &amp;&amp; request <span class="keyword">instanceof</span> NativeWebRequest) &#123;</div><div class="line">			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class);</div><div class="line">			<span class="keyword">if</span> (multipartRequest != <span class="keyword">null</span>) &#123;</div><div class="line">				bindMultipart(multipartRequest.getMultiFileMap(), mpvs);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (servlet3Parts) &#123;</div><div class="line">				HttpServletRequest serlvetRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class);</div><div class="line">				<span class="keyword">new</span> Servlet3MultipartHelper(isBindEmptyMultipartFiles()).bindParts(serlvetRequest, mpvs);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		doBind(mpvs);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>跟着源码 再追下去的话，会发现在其父类<code>DataBinder</code>中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Actual implementation of the binding process, working with the</div><div class="line">	 * passed-in MutablePropertyValues instance.</div><div class="line">	 * <span class="doctag">@param</span> mpvs the property values to bind,</div><div class="line">	 * as MutablePropertyValues instance</div><div class="line">	 * <span class="doctag">@see</span> #checkAllowedFields</div><div class="line">	 * <span class="doctag">@see</span> #checkRequiredFields</div><div class="line">	 * <span class="doctag">@see</span> #applyPropertyValues</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBind</span><span class="params">(MutablePropertyValues mpvs)</span> </span>&#123;</div><div class="line">		checkAllowedFields(mpvs);</div><div class="line">		checkRequiredFields(mpvs);</div><div class="line">		applyPropertyValues(mpvs);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>DataBinder</code>的<code>applyPropertyValues</code>方法中来对字段值进行设置:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyPropertyValues</span><span class="params">(MutablePropertyValues mpvs)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// Bind request parameters onto target object.</span></div><div class="line">        getPropertyAccessor().setPropertyValues(mpvs, isIgnoreUnknownFields(), isIgnoreInvalidFields());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (PropertyBatchUpdateException ex) &#123;</div><div class="line">        <span class="comment">// Use bind error processor to create FieldErrors.</span></div><div class="line">        <span class="keyword">for</span> (PropertyAccessException pae : ex.getPropertyAccessExceptions()) &#123;</div><div class="line">            getBindingErrorProcessor().processPropertyAccessException(pae, getInternalBindingResult());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，它得到一个<strong>org.springframework.beans.AbstractPropertyAccessor</strong>类(<code>getPropertyAccessor</code>)的实现。之后，通过具体实现这个抽象方法<strong>public void setPropertyValue(String propertyName，Object value)</strong>将<code>HTTP</code>请求中找到的值放入解析对象中。此方法由<strong>org.springframework.beans</strong>包中的<code>BeanWrapperImpl</code>和<code>DirectFieldAccessor</code>类<em>实现</em>。默认情况下，<code>ModelAttributeMethodProcessor</code>使用的类是<strong>org.springframework.beans.BeanWrapperImpl，</strong>这是<code>BeanWrapper</code>的默认实现。此默认实现可以设置和获取<code>bean</code>的属性(类字段)。它以这种方式实现一个<code>setPropertyValue</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNestablePropertyAccessor</span> <span class="keyword">extends</span> <span class="title">AbstractPropertyAccessor</span> </span>&#123;</div><div class="line">  ...</div><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(String propertyName, Object value)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		AbstractNestablePropertyAccessor nestedPa; <span class="comment">//此处看下一段代码一眼便知</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			nestedPa = getPropertyAccessorForPropertyPath(propertyName);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (NotReadablePropertyException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NotWritablePropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</div><div class="line">					<span class="string">"Nested property in path '"</span> + propertyName + <span class="string">"' does not exist"</span>, ex);</div><div class="line">		&#125;</div><div class="line">		PropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedPa, propertyName));</div><div class="line">		nestedPa.setPropertyValue(tokens, <span class="keyword">new</span> PropertyValue(propertyName, value));</div><div class="line">	&#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Default &#123;<span class="doctag">@link</span> BeanWrapper&#125; implementation that should be sufficient</div><div class="line"> * for all typical use cases. Caches introspection results for efficiency.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Note: Auto-registers default property editors from the</div><div class="line"> * &#123;<span class="doctag">@code</span> org.springframework.beans.propertyeditors&#125; package, which apply</div><div class="line"> * in addition to the JDK's standard PropertyEditors. Applications can call</div><div class="line"> * the &#123;<span class="doctag">@link</span> #registerCustomEditor(Class, java.beans.PropertyEditor)&#125; method</div><div class="line"> * to register an editor for a particular instance (i.e. they are not shared</div><div class="line"> * across the application). See the base class</div><div class="line"> * &#123;<span class="doctag">@link</span> PropertyEditorRegistrySupport&#125; for details.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span> As of Spring 2.5, this is - for almost all purposes - an</div><div class="line"> * internal class.&lt;/b&gt; It is just public in order to allow for access from</div><div class="line"> * other framework packages. For standard application access purposes, use the</div><div class="line"> * &#123;<span class="doctag">@link</span> PropertyAccessorFactory#forBeanPropertyAccess&#125; factory method instead.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rod Johnson</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@author</span> Rob Harrop</div><div class="line"> * <span class="doctag">@author</span> Stephane Nicoll</div><div class="line"> * <span class="doctag">@since</span> 15 April 2001</div><div class="line"> * <span class="doctag">@see</span> #registerCustomEditor</div><div class="line"> * <span class="doctag">@see</span> #setPropertyValues</div><div class="line"> * <span class="doctag">@see</span> #setPropertyValue</div><div class="line"> * <span class="doctag">@see</span> #getPropertyValue</div><div class="line"> * <span class="doctag">@see</span> #getPropertyType</div><div class="line"> * <span class="doctag">@see</span> BeanWrapper</div><div class="line"> * <span class="doctag">@see</span> PropertyEditorRegistrySupport</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWrapperImpl</span> <span class="keyword">extends</span> <span class="title">AbstractNestablePropertyAccessor</span> <span class="keyword">implements</span> <span class="title">BeanWrapper</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>结果被转移到<strong>private void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv)</strong>，这里就不详细介绍了。你只需要知道它是一个设置一个字段的值的方法。set字段可以是一个简单的类型(String，int等)，也可以是一个集合(List，Map)。</p>
<p>以上介绍了在老版本中关于@ModelAttribute如何在Spring Web应用程序解析的。如上所看到的，代码执行的基本流程以<code>HandlerMethodResolver</code>对象开头，并以<code>ModelAttributeMethodProcessor</code>实例解析的可选对象结束。整个过程基于数据绑定，在DataBinder子类中实现。他们通过属性访问器(默认BeanWrapperImpl)从请求中获取键值对并将其放在目标对象中。</p>
<h3 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h3><p>通过上面可以看出，老版本的代码其实穿梭的蛮复杂的，这里就通过新版的代码再来梳理下:</p>
<p><code>@ModelAttribute</code>注解的方法是作用于整个<code>Controller</code>的，实际上在执行<code>Controller</code>的每个请求时都会执行<code>@ModelAttribute</code>注解的方法。</p>
<p>执行过程在<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</code>中查看，每次执行Controller时都会执行<code>@ModelAttribute</code>注解的方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Invoke the &#123;<span class="doctag">@link</span> RequestMapping&#125; handler method preparing a &#123;<span class="doctag">@link</span> ModelAndView&#125;</div><div class="line">	 * if view resolution is required.</div><div class="line">	 * <span class="doctag">@since</span> 4.2 可以看到4.2开始启用了</div><div class="line">	 * <span class="doctag">@see</span> #createInvocableHandlerMethod(HandlerMethod)</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</div><div class="line">			ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</div><div class="line"></div><div class="line">			ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</div><div class="line">				invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</div><div class="line">				invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</div><div class="line">			&#125;</div><div class="line">			invocableMethod.setDataBinderFactory(binderFactory);</div><div class="line">			invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line"></div><div class="line">			ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</div><div class="line">			mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</div><div class="line">           <span class="comment">//执行@ModelAttribute注解的方法  </span></div><div class="line">			modelFactory.initModel(webRequest, mavContainer, invocableMethod);</div><div class="line">			mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</div><div class="line"></div><div class="line">			AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</div><div class="line">			asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</div><div class="line"></div><div class="line">			WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">			asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</div><div class="line">			asyncManager.setAsyncWebRequest(asyncWebRequest);</div><div class="line">			asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</div><div class="line">			asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</div><div class="line">				Object result = asyncManager.getConcurrentResult();</div><div class="line">				mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</div><div class="line">				asyncManager.clearConcurrentResult();</div><div class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">					logger.debug(<span class="string">"Found concurrent result value ["</span> + result + <span class="string">"]"</span>);</div><div class="line">				&#125;</div><div class="line">				invocableMethod = invocableMethod.wrapConcurrentResult(result);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//执行Controller中的方法  </span></div><div class="line">			invocableMethod.invokeAndHandle(webRequest, mavContainer);</div><div class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			webRequest.requestCompleted();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>modelFactory.initModel(webRequest, mavContainer, invocableMethod)</code>中会执行<code>@ModelAttribute</code>注解的方法(<strong>org.springframework.web.method.annotation.ModelFactory</strong>中可查看):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Populate the model in the following order:</div><div class="line">	 * &lt;ol&gt;</div><div class="line">	 * &lt;li&gt;Retrieve "known" session attributes listed as &#123;<span class="doctag">@code</span> <span class="doctag">@SessionAttributes</span>&#125;.</div><div class="line">	 * &lt;li&gt;Invoke &#123;<span class="doctag">@code</span> <span class="doctag">@ModelAttribute</span>&#125; methods</div><div class="line">	 * &lt;li&gt;Find &#123;<span class="doctag">@code</span> <span class="doctag">@ModelAttribute</span>&#125; method arguments also listed as</div><div class="line">	 * &#123;<span class="doctag">@code</span> <span class="doctag">@SessionAttributes</span>&#125; and ensure they're present in the model raising</div><div class="line">	 * an exception if necessary.</div><div class="line">	 * &lt;/ol&gt;</div><div class="line">	 * <span class="doctag">@param</span> request the current request</div><div class="line">	 * <span class="doctag">@param</span> container a container with the model to be initialized</div><div class="line">	 * <span class="doctag">@param</span> handlerMethod the method for which the model is initialized</div><div class="line">	 * <span class="doctag">@throws</span> Exception may arise from &#123;<span class="doctag">@code</span> <span class="doctag">@ModelAttribute</span>&#125; methods</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initModel</span><span class="params">(NativeWebRequest request, ModelAndViewContainer container,</span></span></div><div class="line">			HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		Map&lt;String, ?&gt; sessionAttributes = <span class="keyword">this</span>.sessionAttributesHandler.retrieveAttributes(request);</div><div class="line">		container.mergeAttributes(sessionAttributes);</div><div class="line">      <span class="comment">//执行@ModelAttribute注解的方法  </span></div><div class="line">		invokeModelAttributeMethods(request, container);</div><div class="line">		<span class="comment">////方法执行结果的值放到container  </span></div><div class="line">		<span class="keyword">for</span> (String name : findSessionAttributeArguments(handlerMethod)) &#123;</div><div class="line">			<span class="keyword">if</span> (!container.containsAttribute(name)) &#123;</div><div class="line">				Object value = <span class="keyword">this</span>.sessionAttributesHandler.retrieveAttribute(request, name);</div><div class="line">				<span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> HttpSessionRequiredException(<span class="string">"Expected session attribute '"</span> + name + <span class="string">"'"</span>, name);</div><div class="line">				&#125;</div><div class="line">				container.addAttribute(name, value);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在<code>private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)</code>中会判断方法上是否被<code>@ModelAttribute</code>注解，如果是则会执行这个方法，并将返回值放到<code>container</code>中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Invoke model attribute methods to populate the model.</div><div class="line"> * Attributes are added only if not already present in the model.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeModelAttributeMethods</span><span class="params">(NativeWebRequest request, ModelAndViewContainer container)</span></span></div><div class="line">		<span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (!<span class="keyword">this</span>.modelMethods.isEmpty()) &#123;</div><div class="line">		InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod();</div><div class="line">         <span class="comment">//判断方法是否被@ModelAttribute注解  </span></div><div class="line">		ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class);</div><div class="line">		Assert.state(ann != <span class="keyword">null</span>, <span class="string">"No ModelAttribute annotation"</span>);</div><div class="line">		<span class="keyword">if</span> (container.containsAttribute(ann.name())) &#123;</div><div class="line">			<span class="keyword">if</span> (!ann.binding()) &#123;</div><div class="line">				container.setBindingDisabled(ann.name());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">	 <span class="comment">//执行被@ModelAttribute注解的方法  </span></div><div class="line">		Object returnValue = modelMethod.invokeForRequest(request, container);</div><div class="line">		<span class="keyword">if</span> (!modelMethod.isVoid())&#123;</div><div class="line">			String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType());</div><div class="line">			<span class="keyword">if</span> (!ann.binding()) &#123;</div><div class="line">				container.setBindingDisabled(returnValueName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!container.containsAttribute(returnValueName)) &#123;</div><div class="line">				container.addAttribute(returnValueName, returnValue);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们进入<strong>org.springframework.web.method.support.InvocableHandlerMethod</strong> 的<code>invokeForRequest</code>方法，在给定<code>request</code>请求的上下文中解析其参数值后调用该方法，参数值通常通过 <code>HandlerMethodArgumentResolver</code>来解析。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Invoke the method after resolving its argument values in the context of the given request.</div><div class="line"> * &lt;p&gt;Argument values are commonly resolved through &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125;s.</div><div class="line"> * The &#123;<span class="doctag">@code</span> providedArgs&#125; parameter however may supply argument values to be used directly,</div><div class="line"> * i.e. without argument resolution. Examples of provided argument values include a</div><div class="line"> * &#123;<span class="doctag">@link</span> WebDataBinder&#125;, a &#123;<span class="doctag">@link</span> SessionStatus&#125;, or a thrown exception instance.</div><div class="line"> * Provided argument values are checked before argument resolvers.</div><div class="line"> * <span class="doctag">@param</span> request the current request</div><div class="line"> * <span class="doctag">@param</span> mavContainer the ModelAndViewContainer for this request</div><div class="line"> * <span class="doctag">@param</span> providedArgs "given" arguments matched by type, not resolved</div><div class="line"> * <span class="doctag">@return</span> the raw value returned by the invoked method</div><div class="line"> * <span class="doctag">@exception</span> Exception raised if no suitable argument resolver can be found,</div><div class="line"> * or if the method raised an exception</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></div><div class="line">		Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line">	<span class="comment">//看下面的方法</span></div><div class="line">	Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</div><div class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">		logger.trace(<span class="string">"Invoking '"</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</div><div class="line">				<span class="string">"' with arguments "</span> + Arrays.toString(args));</div><div class="line">	&#125;</div><div class="line">	Object returnValue = doInvoke(args);</div><div class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">		logger.trace(<span class="string">"Method ["</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</div><div class="line">				<span class="string">"] returned ["</span> + returnValue + <span class="string">"]"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> returnValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Get the method argument values for the current request.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</div><div class="line">		Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">	MethodParameter[] parameters = getMethodParameters();</div><div class="line">	Object[] args = <span class="keyword">new</span> Object[parameters.length];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</div><div class="line">		MethodParameter parameter = parameters[i];</div><div class="line">		parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line">		args[i] = resolveProvidedArgument(parameter, providedArgs);</div><div class="line">		<span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers.supportsParameter(parameter)) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">                 <span class="comment">//又回归到解析参数的老路上了，就不多解析了</span></div><div class="line">				args[i] = <span class="keyword">this</span>.argumentResolvers.resolveArgument(</div><div class="line">						parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">					logger.debug(getArgumentResolutionErrorMessage(<span class="string">"Failed to resolve"</span>, i), ex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (args[i] == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not resolve method parameter at index "</span> +</div><div class="line">					parameter.getParameterIndex() + <span class="string">" in "</span> + parameter.getExecutable().toGenericString() +</div><div class="line">					<span class="string">": "</span> + getArgumentResolutionErrorMessage(<span class="string">"No suitable resolver for"</span>, i));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> args;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.web.method.support.HandlerMethodArgumentResolverComposite</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Iterate over registered &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125;s and invoke the one that supports it.</div><div class="line"> * <span class="doctag">@throws</span> IllegalStateException if no suitable &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125; is found.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></div><div class="line">		NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">	HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);</div><div class="line">	<span class="keyword">if</span> (resolver == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown parameter type ["</span> + parameter.getParameterType().getName() + <span class="string">"]"</span>);</div><div class="line">	&#125;</div><div class="line">     <span class="comment">//又回到老版本的resolveArgument路上了</span></div><div class="line">	<span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Find a registered &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125; that supports the given method parameter.</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</div><div class="line">	HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</div><div class="line">	<span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (HandlerMethodArgumentResolver methodArgumentResolver : <span class="keyword">this</span>.argumentResolvers) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">				logger.trace(<span class="string">"Testing if argument resolver ["</span> + methodArgumentResolver + <span class="string">"] supports ["</span> +</div><div class="line">						parameter.getGenericParameterType() + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (methodArgumentResolver.supportsParameter(parameter)) &#123;</div><div class="line">				result = methodArgumentResolver;</div><div class="line">				<span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回到<strong>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</strong>,可以看到:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> &#123;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; customArgumentResolvers;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> HandlerMethodArgumentResolverComposite argumentResolvers;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> HandlerMethodArgumentResolverComposite initBinderArgumentResolvers;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; customReturnValueHandlers;</div></pre></td></tr></table></figure>
<p>又回到老版本的<code>resolveArgument</code>这里了,就不往下解释了</p>
<p>关于<code>@ModelAttribute</code>的例子请看这篇博客文章的，自己就不整例子了<a href="http://blog.csdn.net/hejingyuan6/article/details/49995987" target="_blank" rel="external">http://blog.csdn.net/hejingyuan6/article/details/49995987</a></p>
<p>总之,通过源码可以看出,当<code>@ModelAttribute</code>注解方法时,这个方法在每次访问<code>Controller</code>时都会被执行,其执行到的原理就是在每次执行<code>Controller</code>时都会判断一次,并执行<code>@ModelAttribute</code>的方法,将执行后的结果值放到<code>container</code>中,其实我们只需要知道这么多就成了，背后的机制无论新老版本都是解析绑定这4个字。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-ModelAttribute&quot;&gt;&lt;a href=&quot;#Spring5源码解析-ModelAttribute&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-@ModelAttribute&quot;&gt;&lt;/a&gt;Spring5源码解析-@ModelAttribute&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前我们讨论了Spring中如何通过验证器来达到校验目的。其中有几行我们提到了@ModelAttribute注解。但是，单单理解这个概念还不够，总感觉飘如浮萍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文将对&lt;code&gt;@ModelAttribute&lt;/code&gt;进行解析。将分为两部分。首先将介绍此注解的用法。第二部分将通过具体的代码来分析这个注解和其相应的解析器的细节。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-使用@Valid进行Spring验证</title>
    <link href="https://muyinchen.github.io/2017/08/11/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%BD%BF%E7%94%A8@Valid%E8%BF%9B%E8%A1%8CSpring%E9%AA%8C%E8%AF%81/"/>
    <id>https://muyinchen.github.io/2017/08/11/Spring5源码解析-使用@Valid进行Spring验证/</id>
    <published>2017-08-11T01:39:35.570Z</published>
    <updated>2017-08-16T14:03:11.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-使用-Valid进行Spring验证"><a href="#Spring5源码解析-使用-Valid进行Spring验证" class="headerlink" title="Spring5源码解析-使用@Valid进行Spring验证"></a>Spring5源码解析-使用@Valid进行Spring验证</h1><blockquote>
<p>验证功能在Spring中是很常用的。你可以使用注解或自己的验证器并将其绑定到请求中。本文将重点介绍第一种解决方案。</p>
</blockquote>
<p>第一部分将介绍注解验证流程。在第二部分中，将介绍基本实现的组件。最后一部分将包含Spring初学者开发人员常见错误的解释:是否有必要直接在验证对象之后放置<code>BindingResult</code>。<br><a id="more"></a></p>
<h2 id="使用-Valid注解在Spring中进行验证流程"><a href="#使用-Valid注解在Spring中进行验证流程" class="headerlink" title="使用@Valid注解在Spring中进行验证流程"></a>使用@Valid注解在Spring中进行验证流程</h2><p>要了解使用<code>标准Java @Valid</code>或<code>特定Spring @Validated</code>注解的验证过程，我们首先需要了解Spring如何解析使用了<code>@ModelAttribute</code>注解的对象。它们在controller的方法签名进行注解。@ModelAttribute注解用于将动态请求参数<code>转换</code>为Java注解中指定的对象。例如，观察代码<strong>@ModelAttribute(“article”)Article article </strong>,Spring会尝试将所有请求参数匹配到Article类的字段中。现在，假设这个类有两个字段:<code>title</code>和<code>content</code>。如果请求包含<code>title</code>和<code>content</code>参数，它们将被用作<code>Article</code>的<code>title</code>和<code>content</code>的值(后面会对<code>@ModelAttribute</code>方面的源码做进一步的分析)。</p>
<p>当我们有对象需要进行验证时，<code>@ModelAttribute</code>注解的处理器(<strong>org.springframework.web.method.annotation.ModelAttributeMethodProcessor</strong>)会检查是否必须应用验证注解。注解验证必须以“Valid”这个字眼开头。接下来，对象通过<strong>org.springframework.validation.DataBinder</strong>类中的<strong>public void validate(Object … validationHints)</strong>进行<strong>验证</strong>。该方法遍历所有可用的验证器，并调用每个验证器的<code>validate</code>方法。验证器取自带有<code>validator</code>ID的bean。这样，它可以与<code>annotation-driven</code>的xml配置相关联:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"validator"</span> &gt;</span></div></pre></td></tr></table></figure>
<p>如果未指定验证器bean，则将使用默认验证器:<strong>org.springframework.validation.beanvalidation.LocalValidatorFactoryBean</strong>。</p>
<h2 id="如何在Spring中处理验证？"><a href="#如何在Spring中处理验证？" class="headerlink" title="如何在Spring中处理验证？"></a>如何在Spring中处理验证？</h2><p>我们已经了解了验证流程。现在，我们可以专注于验证过程本身，即验证器是如何知道一个字段不正确的。<code>LocalValidatorFactoryBean</code>继承自同一个包下的<code>SpringValidatorAdapter</code>，但不会覆盖其的validate()方法。这些方法用于检查验证字段是否正确。更准确地说，<code>SpringValidatorAdapter</code>包含一个目标验证器字段(<code>Validator</code>类型的<code>targetValidator</code>)。它将在<code>validate()</code>方法中使用来验证已验证对象的所有字段。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringValidatorAdapter</span> <span class="keyword">implements</span> <span class="title">SmartValidator</span>, <span class="title">javax</span>.<span class="title">validation</span>.<span class="title">Validator</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; internalAnnotationAttributes = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">3</span>);</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		internalAnnotationAttributes.add(<span class="string">"message"</span>);</div><div class="line">		internalAnnotationAttributes.add(<span class="string">"groups"</span>);</div><div class="line">		internalAnnotationAttributes.add(<span class="string">"payload"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> javax.validation.Validator targetValidator;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new SpringValidatorAdapter for the given JSR-303 Validator.</div><div class="line">	 * <span class="doctag">@param</span> targetValidator the JSR-303 Validator to wrap</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SpringValidatorAdapter</span><span class="params">(javax.validation.Validator targetValidator)</span> </span>&#123;</div><div class="line">		Assert.notNull(targetValidator, <span class="string">"Target Validator must not be null"</span>);</div><div class="line">		<span class="keyword">this</span>.targetValidator = targetValidator;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	SpringValidatorAdapter() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setTargetValidator</span><span class="params">(javax.validation.Validator targetValidator)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.targetValidator = targetValidator;</div><div class="line">	&#125;</div><div class="line">...</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(@Nullable Object target, Errors errors)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.targetValidator != <span class="keyword">null</span>) &#123;</div><div class="line">			processConstraintViolations(<span class="keyword">this</span>.targetValidator.validate(target), errors);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(@Nullable Object target, Errors errors, @Nullable Object... validationHints)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.targetValidator != <span class="keyword">null</span>) &#123;</div><div class="line">			Set&lt;Class&lt;?&gt;&gt; groups = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">			<span class="keyword">if</span> (validationHints != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">for</span> (Object hint : validationHints) &#123;</div><div class="line">					<span class="keyword">if</span> (hint <span class="keyword">instanceof</span> Class) &#123;</div><div class="line">						groups.add((Class&lt;?&gt;) hint);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			processConstraintViolations(</div><div class="line">					<span class="keyword">this</span>.targetValidator.validate(target, groups.toArray(<span class="keyword">new</span> Class&lt;?&gt;[groups.size()])), errors);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>此验证的结果是由在<code>SpringValidatorAdapter</code>内的<code>protected void processConstraintViolations(Set&lt;ConstraintViolation&lt;Object&gt;&gt; violations, Errors errors)</code>方法处理得到。它将错误从JSR-303验证器附加到给定的Spring的错误对象(觉得别扭请看下面方法上的英文注释)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Process the given JSR-303 ConstraintViolations, adding corresponding errors to</div><div class="line">	 * the provided Spring &#123;<span class="doctag">@link</span> Errors&#125; object.</div><div class="line">	 * <span class="doctag">@param</span> violations the JSR-303 ConstraintViolation results</div><div class="line">	 * <span class="doctag">@param</span> errors the Spring errors object to register to</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processConstraintViolations</span><span class="params">(Set&lt;ConstraintViolation&lt;Object&gt;&gt; violations, Errors errors)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (ConstraintViolation&lt;Object&gt; violation : violations) &#123;</div><div class="line">			String field = determineField(violation);</div><div class="line">			FieldError fieldError = errors.getFieldError(field);</div><div class="line">			<span class="keyword">if</span> (fieldError == <span class="keyword">null</span> || !fieldError.isBindingFailure()) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					ConstraintDescriptor&lt;?&gt; cd = violation.getConstraintDescriptor();</div><div class="line">					String errorCode = determineErrorCode(cd);</div><div class="line">					Object[] errorArgs = getArgumentsForConstraint(errors.getObjectName(), field, cd);</div><div class="line">					<span class="keyword">if</span> (errors <span class="keyword">instanceof</span> BindingResult) &#123;</div><div class="line">						<span class="comment">// Can do custom FieldError registration with invalid value from ConstraintViolation,</span></div><div class="line">						<span class="comment">// as necessary for Hibernate Validator compatibility (non-indexed set path in field)</span></div><div class="line">						BindingResult bindingResult = (BindingResult) errors;</div><div class="line">						String nestedField = bindingResult.getNestedPath() + field;</div><div class="line">						<span class="keyword">if</span> (<span class="string">""</span>.equals(nestedField)) &#123;</div><div class="line">							String[] errorCodes = bindingResult.resolveMessageCodes(errorCode);</div><div class="line">							bindingResult.addError(<span class="keyword">new</span> ObjectError(</div><div class="line">									errors.getObjectName(), errorCodes, errorArgs, violation.getMessage()));</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">else</span> &#123;</div><div class="line">							Object rejectedValue = getRejectedValue(field, violation, bindingResult);</div><div class="line">							String[] errorCodes = bindingResult.resolveMessageCodes(errorCode, field);</div><div class="line">							bindingResult.addError(<span class="keyword">new</span> FieldError(</div><div class="line">									errors.getObjectName(), nestedField, rejectedValue, <span class="keyword">false</span>,</div><div class="line">									errorCodes, errorArgs, violation.getMessage()));</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						<span class="comment">// got no BindingResult - can only do standard rejectValue call</span></div><div class="line">						<span class="comment">// with automatic extraction of the current field value</span></div><div class="line">						errors.rejectValue(field, errorCode, errorArgs, violation.getMessage());</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (NotReadablePropertyException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"JSR-303 validated property '"</span> + field +</div><div class="line">							<span class="string">"' does not have a corresponding accessor for Spring data binding - "</span> +</div><div class="line">							<span class="string">"check your DataBinder's configuration (bean property versus direct field access)"</span>, ex);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>验证错误直接附加到<code>DataBinder</code>的<strong>private AbstractPropertyBindingResult bindingResult</strong>字段。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBinder</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistry</span>, <span class="title">TypeConverter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/** Default object name used for binding: "target" */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_OBJECT_NAME = <span class="string">"target"</span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Default limit for array and collection growing: 256 */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_AUTO_GROW_COLLECTION_LIMIT = <span class="number">256</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * We'll create a lot of DataBinder instances: Let's use a static logger.</div><div class="line">	 */</div><div class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(DataBinder.class);</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object target;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String objectName;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> AbstractPropertyBindingResult bindingResult;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> SimpleTypeConverter typeConverter;</div></pre></td></tr></table></figure>
<p>此时它的值会在<code>ModelAttributeMethodProcessor</code>中检索:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (binder.getBindingResult().hasErrors()) &#123;</div><div class="line">    <span class="keyword">if</span> (isBindExceptionRequired(binder, parameter)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="controller方法内获取BindingResult"><a href="#controller方法内获取BindingResult" class="headerlink" title="controller方法内获取BindingResult"></a>controller方法内获取BindingResult</h2><p>需要注意的是，要在控制器的方法中检索<code>BindingResult</code>，必须将<code>BindingResult</code>实例直接放在经过验证的对象之后。具体请看<strong>public String addArticle(@ModelAttribute(“article”) @Valid Article article, BindingResult result)</strong>，<code>BindingResult</code>的实例将包含所有的验证错误。这时，如果你在<code>Article</code>和<code>BindingResult</code>实例之间放置另一个对象(例如:<code>HttpServletRequest request</code>)，将抛出如下异常:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">An Errors/BindingResult argument is expected to be declared immediately after the  model attribute, the @RequestBody or the @RequestPart arguments to which they apply.</div></pre></td></tr></table></figure>
<p>此错误消息的内容可以在<strong>org.springframework.web.method.annotation.ErrorsMethodArgumentResolver</strong>类中找到。此类用于从方法签名中解析错误实例。如果问为什么用<code>ErrorsMethodArgumentResolver</code>来解析<code>BindingResults</code>？简单来说，这是由于<code>BindingResult</code>接口扩展了<code>Errors</code>接口的缘故。所以，两者都可以用相同的参数解析器解决。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Resolves &#123;<span class="doctag">@link</span> Errors&#125; method arguments.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;An &#123;<span class="doctag">@code</span> Errors&#125; method argument is expected to appear immediately after</div><div class="line"> * the model attribute in the method signature. It is resolved by expecting the</div><div class="line"> * last two attributes added to the model to be the model attribute and its</div><div class="line"> * &#123;<span class="doctag">@link</span> BindingResult&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rossen Stoyanchev</div><div class="line"> * <span class="doctag">@since</span> 3.1</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorsMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</div><div class="line">		Class&lt;?&gt; paramType = parameter.getParameterType();</div><div class="line">		<span class="keyword">return</span> Errors.class.isAssignableFrom(paramType);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></div><div class="line">			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">"Errors/BindingResult argument only supported on regular handler methods"</span>);</div><div class="line"></div><div class="line">		ModelMap model = mavContainer.getModel();</div><div class="line">		<span class="keyword">if</span> (model.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> lastIndex = model.size()-<span class="number">1</span>;</div><div class="line">			String lastKey = <span class="keyword">new</span> ArrayList&lt;&gt;(model.keySet()).get(lastIndex);</div><div class="line">			<span class="keyword">if</span> (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) &#123;</div><div class="line">				<span class="keyword">return</span> model.get(lastKey);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">				<span class="string">"An Errors/BindingResult argument is expected to be declared immediately after the model attribute, "</span> +</div><div class="line">				<span class="string">"the @RequestBody or the @RequestPart arguments to which they apply: "</span> + parameter.getMethod());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面代码可以看出，由于BindingResult的放置的位置 不正确，而导致验证过程失败的方法其实很简单:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ModelMap model = mavContainer.getModel();</div><div class="line"><span class="keyword">if</span> (model.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">int</span> lastIndex = model.size()-<span class="number">1</span>;</div><div class="line">    String lastKey = <span class="keyword">new</span> ArrayList&lt;String&gt;(model.keySet()).get(lastIndex);</div><div class="line">    <span class="keyword">if</span> (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) &#123;</div><div class="line">        <span class="keyword">return</span> model.get(lastKey);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，它获得用于构建视图部分的模型数据的ModelMap。所要验证对象和<code>BindingResult</code>如果放置正确，那么所要打印的日志应该如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">model equals to &#123;article=Article &#123;text = &#125;, org.springframework.validation.BindingResult.article=org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> errors</div><div class="line">Field error in object <span class="string">'article'</span> on field <span class="string">'text'</span>: rejected value []; codes [NotEmpty.article.text,NotEmpty.text,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [article.text,text]; arguments []; <span class="keyword">default</span> message [text]]; <span class="keyword">default</span> message [Text can<span class="string">'t be empty]&#125;</span></div></pre></td></tr></table></figure>
<p>之后，将值放在<code>ArrayList</code>中，并获取最后一个 entry key。然后，检查此键是否以<code>org.springframework.validation.BindingResult</code>开头(BindingResult 接口的常量值)。如果是，该方法返回发现的Errors实例。否则，将抛出一个IllegalStateException异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BindingResult</span> <span class="keyword">extends</span> <span class="title">Errors</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Prefix for the name of the BindingResult instance in a model,</div><div class="line">	 * followed by the object name.</div><div class="line">	 */</div><div class="line">	String MODEL_KEY_PREFIX = BindingResult.class.getName() + <span class="string">"."</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return the wrapped target object, which may be a bean, an object with</div><div class="line">	 * public fields, a Map - depending on the concrete binding strategy.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function">Object <span class="title">getTarget</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>这篇文章讲了Spring 验证的一些过程细节。它的第一部分介绍了验证流程，从@ModelAttribute开始，并以验证器集合结束。第二部分看了看基本的Spring验证器。在最后，我们看到一个非常常见的bug，基于直接在验证对象之后放置BindingResult实例，并解释了其中的原理所在。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-使用-Valid进行Spring验证&quot;&gt;&lt;a href=&quot;#Spring5源码解析-使用-Valid进行Spring验证&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-使用@Valid进行Spring验证&quot;&gt;&lt;/a&gt;Spring5源码解析-使用@Valid进行Spring验证&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;验证功能在Spring中是很常用的。你可以使用注解或自己的验证器并将其绑定到请求中。本文将重点介绍第一种解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一部分将介绍注解验证流程。在第二部分中，将介绍基本实现的组件。最后一部分将包含Spring初学者开发人员常见错误的解释:是否有必要直接在验证对象之后放置&lt;code&gt;BindingResult&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的处理拦截器</title>
    <link href="https://muyinchen.github.io/2017/08/07/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://muyinchen.github.io/2017/08/07/Spring5源码解析-Spring中的处理拦截器/</id>
    <published>2017-08-07T09:18:26.872Z</published>
    <updated>2017-09-13T06:00:52.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的处理拦截器"><a href="#Spring5源码解析-Spring中的处理拦截器" class="headerlink" title="Spring5源码解析-Spring中的处理拦截器"></a>Spring5源码解析-Spring中的处理拦截器</h1><p>在Java的Web应用程序中通常使用过滤器(即filter)来捕获HTTP请求。但它们仅为webapps保留。Spring引入了一种新的方法来实现，更通用，称为处理程序拦截器。</p>
<p>本文将分3部分。第一部分来讲Spring处理程序拦截器的理论概念。第二部分，说一说默认的Spring拦截器。最后一部分老规矩，应用实战，我们将写我们自己的处理程序拦截器。<br><a id="more"></a></p>
<h2 id="什么是Spring中的处理程序拦截器？"><a href="#什么是Spring中的处理程序拦截器？" class="headerlink" title="什么是Spring中的处理程序拦截器？"></a>什么是Spring中的处理程序拦截器？</h2><p>要了解Spring拦截器的作用，我们需要先解释一下HTTP请求的执行链。DispatcherServlet捕获每个请求。调度员做的第一件事就是将接收到的URL和相应的controller进行映射(controller必须恰到好处地处理当前的请求)。但是，在到达对应的controller之前，请求可以被拦截器处理。这些拦截器就像过滤器。只有当URL找到对应于它们的映射时才调用它们。在通过拦截器(拦截器预处理，其实也可以说前置处理)进行前置处理后，请求最终到达controller。之后，发送请求生成视图。但是在这之前，拦截器还是有可能来再次处理它(拦截器后置处理)。只有在最后一次操作之后，视图解析器才能捕获数据并输出视图。</p>
<p>处理程序映射拦截器基于<strong>org.springframework.web.servlet.HandlerInterceptor</strong>接口。和之前简要描述的那样，它们可以在将其发送到控制器(方法前使用<strong>preHandle</strong>)之前或之后(方法后使用<strong>postHandle</strong>)拦截请求。<code>preHandle</code>方法返回一个<code>布尔值</code>，如果返回<code>false</code>，则可以在执行链中<code>执行中断请求处理</code>。此接口中还有一个方法<strong>afterCompletion</strong>，只有在<code>preHandler</code>方法发送为true时才会在渲染视图后调用它(完成请求处理后的回调，即渲染视图后)。</p>
<p>拦截器也可以在新线程中启动。在这种情况下，拦截器必须实现<strong>org.springframework.web.servlet.AsyncHandlerInterceptor</strong>接口。它继承<code>HandlerInterceptor</code>并提供一个方法<strong>afterConcurrentHandlingStarted</strong>。每次处理程序得到正确执行时，都会调用此方法而不是调用<code>postHandler()</code>和<code>afterCompletion()</code>。它也可以对发送请求进行异步处理。通过Spring源码此方法注释可以知道，这个方法的典型的应用是可以用来清理本地线程变量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Extends &#123;<span class="doctag">@code</span> HandlerInterceptor&#125; with a callback method invoked after the</div><div class="line"> * start of asynchronous request handling.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;When a handler starts an asynchronous request, the &#123;<span class="doctag">@link</span> DispatcherServlet&#125;</div><div class="line"> * exits without invoking &#123;<span class="doctag">@code</span> postHandle&#125; and &#123;<span class="doctag">@code</span> afterCompletion&#125; as it</div><div class="line"> * normally does for a synchronous request, since the result of request handling</div><div class="line"> * (e.g. ModelAndView) is likely not yet ready and will be produced concurrently</div><div class="line"> * from another thread. In such scenarios, &#123;<span class="doctag">@link</span> #afterConcurrentHandlingStarted&#125;</div><div class="line"> * is invoked instead, allowing implementations to perform tasks such as cleaning</div><div class="line"> * up thread-bound attributes before releasing the thread to the Servlet container.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;When asynchronous handling completes, the request is dispatched to the</div><div class="line"> * container for further processing. At this stage the &#123;<span class="doctag">@code</span> DispatcherServlet&#125;</div><div class="line"> * invokes &#123;<span class="doctag">@code</span> preHandle&#125;, &#123;<span class="doctag">@code</span> postHandle&#125;, and &#123;<span class="doctag">@code</span> afterCompletion&#125;.</div><div class="line"> * To distinguish between the initial request and the subsequent dispatch</div><div class="line"> * after asynchronous handling completes, interceptors can check whether the</div><div class="line"> * &#123;<span class="doctag">@code</span> javax.servlet.DispatcherType&#125; of &#123;<span class="doctag">@link</span> javax.servlet.ServletRequest&#125;</div><div class="line"> * is &#123;<span class="doctag">@code</span> "REQUEST"&#125; or &#123;<span class="doctag">@code</span> "ASYNC"&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Note that &#123;<span class="doctag">@code</span> HandlerInterceptor&#125; implementations may need to do work</div><div class="line"> * when an async request times out or completes with a network error. For such</div><div class="line"> * cases the Servlet container does not dispatch and therefore the</div><div class="line"> * &#123;<span class="doctag">@code</span> postHandle&#125; and &#123;<span class="doctag">@code</span> afterCompletion&#125; methods will not be invoked.</div><div class="line"> * Instead, interceptors can register to track an asynchronous request through</div><div class="line"> * the &#123;<span class="doctag">@code</span> registerCallbackInterceptor&#125; and &#123;<span class="doctag">@code</span> registerDeferredResultInterceptor&#125;</div><div class="line"> * methods on &#123;<span class="doctag">@link</span> org.springframework.web.context.request.async.WebAsyncManager</div><div class="line"> * WebAsyncManager&#125;. This can be done proactively on every request from</div><div class="line"> * &#123;<span class="doctag">@code</span> preHandle&#125; regardless of whether async request processing will start.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rossen Stoyanchev</div><div class="line"> * <span class="doctag">@since</span> 3.2</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.context.request.async.WebAsyncManager</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.context.request.async.CallableProcessingInterceptor</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.context.request.async.DeferredResultProcessingInterceptor</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncHandlerInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called instead of &#123;<span class="doctag">@code</span> postHandle&#125; and &#123;<span class="doctag">@code</span> afterCompletion&#125;, when</div><div class="line">	 * the a handler is being executed concurrently.</div><div class="line">	 * &lt;p&gt;Implementations may use the provided request and response but should</div><div class="line">	 * avoid modifying them in ways that would conflict with the concurrent</div><div class="line">	 * execution of the handler. A typical use of this method would be to</div><div class="line">	 * clean up thread-local variables.</div><div class="line">	 * <span class="doctag">@param</span> request the current request</div><div class="line">	 * <span class="doctag">@param</span> response the current response</div><div class="line">	 * <span class="doctag">@param</span> handler the handler (or &#123;<span class="doctag">@link</span> HandlerMethod&#125;) that started async</div><div class="line">	 * execution, for type and/or instance examination</div><div class="line">	 * <span class="doctag">@throws</span> Exception in case of errors</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">afterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="拦截器和过滤器之间的区别"><a href="#拦截器和过滤器之间的区别" class="headerlink" title="拦截器和过滤器之间的区别"></a>拦截器和过滤器之间的区别</h2><p>拦截器看起来很像servlet过滤器，为什么Spring不采用默认的Java解决方案？这其中主要区别就是<code>两者的作用域</code>的问题。过滤器只能在servlet容器下使用。而我们的Spring容器不一定运行在web环境中，在这种情况下过滤器就不好使了，而拦截器依然可以在Spring容器中调用。</p>
<p>Spring通过拦截器为请求提供了一个更细粒度的控制。就像我们之前看到的那样，它们可以在controller对请求处理之前或之后被调用，也可以在将渲染视图呈现给用户之后被调用。如果是过滤器的话，只能在将响应返回给最终用户之前使用它们。</p>
<p>下一个不同之处在于中断链执行的难易程度。拦截器可以通过在<code>preHandler()</code>方法内返回<code>false</code>来简单实现。而在过滤器的情况下，它就变得复杂了，因为它必须处理请求和响应对象来引发中断，需要一些额外的动作，比如如将用户重定向到错误页面。</p>
<h2 id="什么是默认的Spring拦截器？"><a href="#什么是默认的Spring拦截器？" class="headerlink" title="什么是默认的Spring拦截器？"></a>什么是默认的Spring拦截器？</h2><p>Spring主要将拦截器用于切换操作。比如我们最常用的功能之一是区域设置更改(也就是本地化更改)。请查看<strong>org.springframework.web.servlet.i18n.LocaleChangeInterceptor</strong>类中源码，可以通过我们所定义的语言环境解析器来对HTTP请求进行分析来实现。所有区域设置解析器都会分析请求元素(headers，Cookie)，以确定向用户提供哪种本地化语言设置。</p>
<p>另一个本地拦截器是<strong>org.springframework.web.servlet.theme.ThemeChangeInterceptor</strong>，它允许更改视图的主题(见此类的注释)。它还使用主题解析器更精确地来知道要使用的主题(参照下面<strong>preHandle</strong>方法)。它的解析器也基于请求分析(cookie，会话或参数)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interceptor that allows for changing the current theme on every request,</div><div class="line"> * via a configurable request parameter (default parameter name: "theme").</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 20.06.2003</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.servlet.ThemeResolver</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeChangeInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Default name of the theme specification parameter: "theme".</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PARAM_NAME = <span class="string">"theme"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String paramName = DEFAULT_PARAM_NAME;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the name of the parameter that contains a theme specification</div><div class="line">	 * in a theme change request. Default is "theme".</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParamName</span><span class="params">(String paramName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.paramName = paramName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return the name of the parameter that contains a theme specification</div><div class="line">	 * in a theme change request.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getParamName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.paramName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException &#123;</div><div class="line"></div><div class="line">		String newTheme = request.getParameter(<span class="keyword">this</span>.paramName);</div><div class="line">		<span class="keyword">if</span> (newTheme != <span class="keyword">null</span>) &#123;</div><div class="line">			ThemeResolver themeResolver = RequestContextUtils.getThemeResolver(request);</div><div class="line">			<span class="keyword">if</span> (themeResolver == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No ThemeResolver found: not in a DispatcherServlet request?"</span>);</div><div class="line">			&#125;</div><div class="line">			themeResolver.setThemeName(request, response, newTheme);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// Proceed in any case.</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在Spring中自定义处理程序拦截器"><a href="#在Spring中自定义处理程序拦截器" class="headerlink" title="在Spring中自定义处理程序拦截器"></a>在Spring中自定义处理程序拦截器</h2><p>我们写一个例子来简单实现HandlerInterceptor。一个乐透彩票的场景，这个自定义的拦截器将分析每个请求，并决定是否是彩票的“lottery winner”。为了简化代码逻辑，只有用于生成一个随机数并通过取模判断是否返回0的请求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ATTR_NAME = <span class="string">"lottery_winner"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LotteryInterceptor.class);</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[LotteryInterceptor] afterCompletion"</span>);</div><div class="line">         </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView view)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[LotteryInterceptor] postHandle"</span>);</div><div class="line">         </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[LotteryInterceptor] preHandle"</span>);</div><div class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(ATTR_NAME) == <span class="keyword">null</span>) &#123;</div><div class="line">            Random random = <span class="keyword">new</span> Random();</div><div class="line">            <span class="keyword">int</span> i = random.nextInt(<span class="number">10</span>);</div><div class="line">            request.getSession().setAttribute(ATTR_NAME, i%<span class="number">2</span> == <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于相应controller中要展示的信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TestController.class);</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"Controller asks, are you a lottery winner ? "</span>+request.getSession().getAttribute(LotteryInterceptor.ATTR_NAME));</div><div class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们尝试访问<code>/test</code>，我们将看不到拦截器的日志，因为它没有在配置中定义。如果我们是使用注解来配置的webapp。我们需要将下面这个配置添加到应用程序的上下文文件中(Springboot配置个相应的bean就可):</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.interceptors.LotteryInterceptor"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在我们可以访问/ test页面并检查日志:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[LotteryInterceptor] preHandle</div><div class="line">Controller asks, are you a lottery winner ? <span class="keyword">false</span></div><div class="line">[LotteryInterceptor] postHandle</div><div class="line">[LotteryInterceptor] afterCompletion</div></pre></td></tr></table></figure>
<p>总结一下，拦截器是一种可以应用到整个Spring生态系统中的servlet过滤器。它们可以在请求之前或之后启动，也可以在视图呈现之后启动。它们也可以通过AsyncHandlerInterceptor接口的实现达到异步处理的效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的处理拦截器&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的处理拦截器&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的处理拦截器&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的处理拦截器&lt;/h1&gt;&lt;p&gt;在Java的Web应用程序中通常使用过滤器(即filter)来捕获HTTP请求。但它们仅为webapps保留。Spring引入了一种新的方法来实现，更通用，称为处理程序拦截器。&lt;/p&gt;
&lt;p&gt;本文将分3部分。第一部分来讲Spring处理程序拦截器的理论概念。第二部分，说一说默认的Spring拦截器。最后一部分老规矩，应用实战，我们将写我们自己的处理程序拦截器。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的处理器handlers</title>
    <link href="https://muyinchen.github.io/2017/08/05/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8handlers/"/>
    <id>https://muyinchen.github.io/2017/08/05/Spring5源码解析-Spring中的处理器handlers/</id>
    <published>2017-08-05T15:50:00.223Z</published>
    <updated>2017-09-13T06:01:08.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring5源码解析-Spring中的处理器handlers"><a href="#Spring5源码解析-Spring中的处理器handlers" class="headerlink" title="Spring5源码解析-Spring中的处理器handlers"></a>Spring5源码解析-Spring中的处理器handlers</h2><blockquote>
<p>Spring Web应用程序的中心站是<code>DispatcherServlet</code>(具体请查看<a href="https://muyinchen.github.io/2017/08/02/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AE%BASpring%20DispatcherServlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Spring5源码解析-论Spring DispatcherServlet的生命周期</a>)。这是所有传入请求的中心入口。但如果没有但如果没有众多的handlers，我们依然不能做任何事情。</p>
</blockquote>
<p>首先，在本文中，我们先解读<code>handler</code>到底是个啥。之后，我们将介绍一些<code>Spring</code>框架中<code>handlers</code>的两种处理类型。最后我们加点<code>salt</code>来让我们学的东西进行落地，我们将编写我们自己的handler。<br><a id="more"></a></p>
<h2 id="Spring中的两种handler类型"><a href="#Spring中的两种handler类型" class="headerlink" title="Spring中的两种handler类型"></a>Spring中的两种handler类型</h2><p>首先，在Spring的世界中，这些<code>handler</code>到底做了些什么。简单的讲，这个就和我们听到一句话或者看到某个场景，然后有相关的反应是一样的，由很多处理最后转换到我们大脑皮层所能理解的东西。从机器语言的角度就是词法分析，语法分析，好咯，大家知道编译语言的重要性也就是基础的重要性了吧，回到框架中来，对于Spring来讲，这些处理程序就是一种将用户操作转换为Spring可以理解的元素。说到<code>用户操作</code>，我们可以考虑像<code>http://xxx.com/login</code>这样的URL类型。而我们的<code>handler</code>，在这里作为翻译处理，将尝试找到为此地址应该调用哪个控制器来处理。通常我们写<code>Spring controller</code>代码都知道，处理程序可以查找<code>@RequestMapping</code>的注解，并检查哪些映射与<code>/login</code> 这个URL匹配。由上一篇文章我们可以知道，这个处理程序将在<code>DispatcherServlet</code>的内被调用。</p>
<p>更准确地说，Spring中存在两种类型的handlers。第一种是<strong>handler mappings(处理程序映射)</strong>。它们的角色定位与前面所描述的功能完全相同。它们尝试将当前请求与相应的<code>controller</code>以及其中的方法相匹配。第二种是<strong>handler adapter(处理器适配器)</strong>。<code>handler adapter</code>从<code>handler mappings</code>中获取映射的<code>controllers</code> 和方法并调用它们。这种类型的适配器必须实现<strong>org.springframework.web.servlet.HandlerAdapter</strong>接口，它只有3种方法： </p>
<ul>
<li><strong>boolean supports(Object handler)</strong>:检查传入参数的对象是否可以由此适配器处理 </li>
<li><strong>ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) </strong>: 将请求翻译成视图。</li>
<li><strong>long getLastModified(HttpServletRequest request, Object handler)</strong>:返回给定<code>HttpServletRequest</code>的最后修改日期，以毫秒为单位。</li>
</ul>
<p>但这里要注意的是，在Spring版本中有一些重要变化。作为<code>DefaultAnnotationHandlerMapping</code>，<code>AnnotationMethodHandlerAdapter</code>或<code>AnnotationMethodHandlerExceptionResolver</code>的处理程序适配器自Spring 3.2版本以来已经废弃，在<code>Spring4.x</code>里还可以看到，在<code>Spring5</code>内已经删除掉了，替代品为<code>RequestMappingHandlerMapping</code>，<code>RequestMappingHandlerAdapter</code>和<code>ExceptionHandlerExceptionResolver</code>。通过这些新类以便于自定义映射。另外，通过在<code>since 3.1</code> 版本中<strong>org.springframework.web.method.HandlerMethod</strong>类中引入，来将所处理的对象转换为其方法表示。我们可以通过这个方法来判断对象返回的类型或者哪些参数是我们所期望的(看着拗口的话请打开源码查看此类注释)。</p>
<h2 id="Spring框架中的handler"><a href="#Spring框架中的handler" class="headerlink" title="Spring框架中的handler"></a>Spring框架中的handler</h2><p>除了已经提供的处理程序适配器之外，Spring也有本地处理程序映射，最基本的处理程序映射器是<strong>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping</strong>类。它将<code>URL</code>与相应的bean进行匹配。例如，请看下面的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/friends"</span> <span class="attr">class</span>=<span class="string">"com.migo.controller.FriendsController"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>正如你所看到的，这种配置在很多URL的情况下是很不实用的。一些更灵活的处理映射器是<strong>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping</strong>。而不是为每个请求创建<code>bean</code>，我们可以创建一个映射文件，其中包含URL作为键和<code>controller</code>作为值，看下面的配置:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleUrlMapping"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/friends.html"</span>&gt;</span>FriendsController<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是，在<code>SimpleUrlHandlerMapping</code>中，处理稍微复杂URL也是一个头疼的问题。这也是为什么我们要用<code>DefaultAnnotationHandlerMapping</code>或者在最新的<code>Spring</code>版本中使用</p>
<p><code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code>的</p>
<p>原因。它们的映射检测是基于注解。这样，所有的逻辑都保留在Java代码这块，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendsController</span> </span>&#123;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/friends.html"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showFriendsList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"friendsListView"</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/friends/potential-friends.html"</span> method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showPotentialFriends</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"potentialFriendsView"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与以前的处理程序不同的是，基于注解允许更灵活的配置。不仅不需要在<code>XML</code>进行各种繁琐的配置，一旦<code>URL</code>很多的情况下，想象一下<code>XML</code>,各种头大，现在通过注解，我们可以把一条路上不同岔口的<code>URL</code>在一个<code>controller</code>里进行接收处理就好。当配置文件中定义<code>&lt;mvc:annotation-driven/&gt;</code>时，此处理程序将被激活。另外，为了更细粒度的处理<code>controller</code>注解，我们可以通过添加<code>&lt;context:annotation-config /&gt;</code>(有后面这个之后此处也可以省略，后者本身 就具有此功能)和<code>&lt;context:component-scan base-package =“path.with.my.services.and.controllers”/&gt;</code>来启用它们。</p>
<h2 id="编写自定义的Spring-handler程序"><a href="#编写自定义的Spring-handler程序" class="headerlink" title="编写自定义的Spring handler程序"></a>编写自定义的Spring handler程序</h2><p>现在我们更深入了解一下Spring mapping handlers。我们来实现个我们自己的URL处理程序。其实很简单(因为只需要达到最基本的处理目的就可以了) ，我们将替换<code>RequestMappingHandlerMapping</code>，并使一个简单的映射器来处理URL地址。我们的映射器将只处理静态URL，如:<code>/home.html</code>。它无须也无法从方法签名中获取动态参数以及也无须知道<code>@PathVariable</code>元素。主要目标是让大家从中发现Spring处理一个请求所进行的步骤。</p>
<p>我们这个<code>handler</code>将扩展<code>RequestMappingHandlerMapping</code>并覆盖其方法(有些方法可以从<code>RequestMappingInfoHandlerMapping</code>找到，其实就是重写或实现<code>AbstractHandlerMethodMapping</code>里的几个抽象方法)： </p>
<ul>
<li><strong>protected void registerHandlerMethod(Object handler，Method method，RequestMappingInfo mapping)</strong>: </li>
<li><p><strong>protected boolean isHandler(Class beanType)</strong>: 检查bean是否符合给定处理程序的条件。 </p>
</li>
<li><p><strong>protected RequestMappingInfo getMappingForMethod(Method method，Class handlerType)</strong>: 为给定的Method实例提供映射的方法，该方法表示处理的方法（例如，使用<code>@RequestMapping</code>注解的<code>controller</code>的方法上所对应的<code>URL</code>）。</p>
</li>
</ul>
<ul>
<li><strong>protected HandlerMethod handleNoMatch(Set requestMappingInfos, String lookupPath, HttpServletRequest request)</strong> : 在给定的<code>HttpServletRequest</code>对象找不到匹配的处理方法时被调用。  </li>
<li><strong>protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request)</strong> : 当为给定的<code>HttpServletRequest</code>对象找到匹配的处理方法时调用。</li>
</ul>
<p>在写这个<code>handler</code>之前，让我们写个自定义的<code>@RequestMapping</code>的注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DumberRequestMapping &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>唯一的属性是代表<code>URL路径</code>的值，与<code>@RequestMapping</code>注解中的<code>value属性</code>完全相同。现在我们可以传入我们的处理程序映射类。该课程在内部进行评论。这就是为什么它不会在通常的“文本模式”中包含任何补充评论。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DumberRequestHandlerMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingHandlerMapping</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DumberRequestHandlerMapping.class);</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Checks if handler should be applied to given bean's class. The check is made through looking for DumberRequestMapping annotation.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</div><div class="line">        Method[] methods = ReflectionUtils.getAllDeclaredMethods(beanType);</div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">            <span class="keyword">if</span> (AnnotationUtils.findAnnotation(method, DumberRequestMapping.class) != <span class="keyword">null</span>) &#123;</div><div class="line">                LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] Method "</span>+method+<span class="string">" supports @DumberRequestMapping "</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Make some operations directly before returning HttpServletRequest instance into mapped controller's method. For example, if you add here some attributes to this object, those attributes will be reachable from controller's method which handles the request. </div><div class="line">     * RequestMappingInfoHandlerMapping does some of more complicated stuff here like exposing URI template variables or extracting </div><div class="line">     * "matrix variable".</div><div class="line">     * NOTE : "matrix variables" are name-value pairs within path segments, separated with a semicolon (;). For example in this URL </div><div class="line">     * /clubs;country=France;division=Ligue 1, Ligue 2) we can find 2 matrix variables: country (France) and division (list composed by </div><div class="line">     * Ligue 1 and Ligue 2)</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleMatch</span><span class="params">(RequestMappingInfo info, String lookupPath, HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] handleMatch info "</span>+info+  <span class="string">", lookupPath ="</span>+ lookupPath + <span class="string">", request ="</span>+request);</div><div class="line">        request.setAttribute(<span class="string">"isDumber"</span>, <span class="keyword">true</span>);</div><div class="line">        request.setAttribute(<span class="string">"handledTime"</span>, System.nanoTime());</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Method invoked when given lookupPath doesn't match with this handler mapping.</div><div class="line">     * Native RequestMappingInfoHandlerMapping uses this method to launch two exceptions : </div><div class="line">     * - HttpRequestMethodNotSupportedException - if some URLs match, but no theirs HTTP methods.</div><div class="line">     * - HttpMediaTypeNotAcceptableException - if some URLs match, but no theirs content types. For example, a handler can match an URL </div><div class="line">     * like /my-page/test, but can expect that the request should be send as application/json. Or, the handler can match the URL but </div><div class="line">     * returns an inappropriate response type, for example: text/html instead of application/json.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">handleNoMatch</span><span class="params">(Set&lt;RequestMappingInfo&gt; requestMappingInfos, String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] handleNoMatch info "</span>+requestMappingInfos+  <span class="string">", lookupPath ="</span>+ lookupPath + <span class="string">", request ="</span>+request);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Here we constructs RequestMappingInfo instance for given method.</div><div class="line">     * RequestMappingInfo - this object is used to encapsulate mapping conditions. For example, it contains an instance of </div><div class="line">     * PatternsRequestCondition which  is used in native Spring's RequestMappingInfoHandlerMapping  handleMatch() method to put URI </div><div class="line">     * variables into <span class="doctag">@RequestMapping</span> pattern. </div><div class="line">     * Ie, it will take the following URL /test/1 and match it for URI template /test/&#123;id&#125;. In occurrence, it will found that 1 </div><div class="line">     * corresponding to <span class="doctag">@PathVariable</span> represented  by id variable (&#123;id&#125;) and will set its value to 1.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">getMappingForMethod</span><span class="params">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] getMappingForMethod method "</span>+method+  <span class="string">", handlerType ="</span>+handlerType);</div><div class="line">        RequestMappingInfo info = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// look for @DumberRequestMapping annotation for the Method method from signature</span></div><div class="line">        DumberRequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, DumberRequestMapping.class);</div><div class="line">        <span class="keyword">if</span> (methodAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">            RequestCondition&lt;?&gt; methodCondition = getCustomMethodCondition(method);</div><div class="line">            info = createRequestMappingInfo(methodAnnotation, methodCondition);</div><div class="line">        &#125;</div><div class="line">        LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] getMappingForMethod method; returns info mapping "</span>+info);</div><div class="line">        <span class="keyword">return</span> info;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates RequestMappingInfo object which encapsulates:</div><div class="line">     * - PatternsRequestCondition: represents URI template to resolve. Resolving is helped by UrlPathHelper utility class from</div><div class="line">     * package org.springframework.web.util.</div><div class="line">     * - RequestMethodsRequestCondition: methods accepted by this handler. You can make a test and replace RequestMethod.GET by </div><div class="line">     * RequestMethod.POST. You will able to observe that our test won't work.</div><div class="line">     * - ParamsRequestCondition: </div><div class="line">     * - HeadersRequestCondition: headers which should be send in request to given handler should handle this request. You can,</div><div class="line">     * for exemple, put there an header value like "my-header:test" and observe the program behavior.</div><div class="line">     * - ConsumesRequestCondition: this condition allows to specify the content-type of request. We can use it for, for example,</div><div class="line">     * specify that a method can be handled only for application/json request.</div><div class="line">     * - ProducesRequestCondition: this condition allows to specify the content-type of response. We can use it for, for example,</div><div class="line">     * specify that a method can be applied only for text/plain response. </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">createRequestMappingInfo</span><span class="params">(DumberRequestMapping annotation, RequestCondition&lt;?&gt; customCondition)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RequestMappingInfo(</div><div class="line">                <span class="keyword">new</span> PatternsRequestCondition(<span class="keyword">new</span> String[] &#123;annotation.value()&#125;),</div><div class="line">                <span class="keyword">new</span> RequestMethodsRequestCondition(<span class="keyword">new</span> RequestMethod[]&#123;RequestMethod.GET&#125;),</div><div class="line">                <span class="keyword">new</span> ParamsRequestCondition(<span class="keyword">new</span> String[]&#123;&#125;),</div><div class="line">                <span class="keyword">new</span> HeadersRequestCondition(<span class="keyword">new</span> String[] &#123;&#125;),</div><div class="line">                <span class="keyword">new</span> ConsumesRequestCondition(<span class="keyword">new</span> String[]&#123;&#125;, <span class="keyword">new</span> String[]&#123;&#125;),</div><div class="line">                <span class="keyword">new</span> ProducesRequestCondition(<span class="keyword">new</span> String[]&#123;&#125;, <span class="keyword">new</span> String[]&#123;&#125;, getContentNegotiationManager()),</div><div class="line">                customCondition);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们需要向我们的应用程序上下文添加新的<code>HandlerMapping</code>。请看下面这个基于XML的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.mypackage.handler.DumberRequestHandlerMapping"</span>&gt;</span>//此处根据自己的包进行配置</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>请注意，order属性的存在确定了按顺序将请求由<code>HandlerMapping</code>处理。在这里，如果<code>DumberRequestHandlerMapping</code>可以应用于一个请求，Spring将立即使用它，而不需要寻找另一个可用的处理程序。</p>
<p>最后一件事是使用<code>@DumberRequestMapping</code>在方法上添加注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TestController.class);</div><div class="line">    <span class="meta">@DumberRequestMapping</span>(value = <span class="string">"/test"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSession</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"Is dumber request ?"</span>+request.getAttribute(<span class="string">"isDumber"</span>));</div><div class="line">        LOGGER.debug(<span class="string">"Handled time ?"</span>+request.getAttribute(<span class="string">"handledTime"</span>));</div><div class="line">        <span class="keyword">return</span> <span class="string">"testTemplate"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过执行<code>http://localhost:8084/test</code>，您将看到在<code>DumberRequestHandlerMapping</code>的<code>handleMatch</code>方法中设置的请求的属性存在。如果您部署有应用程序的日志，您将看到有关controller执行流程的一些信息：</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">027</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [org<span class="variable">.springframework</span><span class="variable">.web</span><span class="variable">.servlet</span><span class="variable">.mvc</span><span class="variable">.method</span><span class="variable">.annotation</span><span class="variable">.RequestMappingHandlerMapping</span>]-[DEBUG] Looking up handler method <span class="keyword">for</span> path /test   <span class="comment">//先在RequestMappingHandlerMapping找的，也就是先找有@RequestMapping注解相应处理逻辑的方法来处理</span></div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">028</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [org<span class="variable">.springframework</span><span class="variable">.web</span><span class="variable">.servlet</span><span class="variable">.mvc</span><span class="variable">.method</span><span class="variable">.annotation</span><span class="variable">.RequestMappingHandlerMapping</span>]-[DEBUG] Did <span class="keyword">not</span> find handler method <span class="keyword">for</span> [/test]   <span class="comment">//在RequestMappingHandlerMapping中没找到相应的处理逻辑</span></div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">028</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.DumberRequestHandlerMapping</span>]-[DEBUG] Looking up handler method <span class="keyword">for</span> path /test</div><div class="line">  <span class="comment">//从DumberRequestHandlerMapping里找，发现@DumberRequestMapping所注解的方法可以处理，那就处理咯</span></div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">029</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.DumberRequestHandlerMapping</span>]-[DEBUG] [DumberRequestHandlerMapping] handleMatch info &#123;[/test],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]&#125;, lookupPath =/test, request =org<span class="variable">.apache</span><span class="variable">.catalina</span><span class="variable">.connector</span><span class="variable">.RequestFacade</span>@<span class="number">24</span>a7274b</div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">030</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.DumberRequestHandlerMapping</span>]-[DEBUG] Returning handler method [public java<span class="variable">.lang</span><span class="variable">.String</span> com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.controller</span><span class="variable">.TestController</span><span class="variable">.testSession</span>(javax<span class="variable">.servlet</span><span class="variable">.http</span><span class="variable">.HttpServletRequest</span>)]</div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">030</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [org<span class="variable">.springframework</span><span class="variable">.beans</span><span class="variable">.factory</span><span class="variable">.support</span><span class="variable">.DefaultListableBeanFactory</span>]-[DEBUG] Returning cached <span class="keyword">instance</span> of singleton bean 'testController'</div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">030</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [org<span class="variable">.springframework</span><span class="variable">.web</span><span class="variable">.servlet</span><span class="variable">.DispatcherServlet</span>]-[DEBUG] Last-Modified value <span class="keyword">for</span> [/test] is: -<span class="number">1</span></div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">040</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.controller</span><span class="variable">.TestController</span>]-[DEBUG] Is dumber request ?true</div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">040</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.controller</span><span class="variable">.TestController</span>]-[DEBUG] Handled <span class="keyword">time</span> ?<span class="number">21230126522470</span></div><div class="line">Handled <span class="keyword">time</span> ?<span class="number">17452005683775</span></div></pre></td></tr></table></figure>
<p>我们可以看到， handler mapping是Spring生态系统中的一个关键概念。所有的URL都由对应的处理程序处理，由此，Spring可以匹配传入的HTTP请求和所加注解配置的controller的方法。我们也看到了如何根据不同规则来过滤请求，例如：Content-Type，Accept或其他headers 或HTTP方法。我们还编写了一个poor版本的Spring的<code>RequestMappingInfoHandlerMapping</code>，它拦截一些URL处理并将结果通过视图输出给用户。</p>
<p>总结起来就是，通过一定的方式确定相应请求的处理位置(我们通常通过注解来确定)，仅此而已，啰嗦了太多的东西，最后也就是如此的直白</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring5源码解析-Spring中的处理器handlers&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的处理器handlers&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的处理器handlers&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的处理器handlers&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Web应用程序的中心站是&lt;code&gt;DispatcherServlet&lt;/code&gt;(具体请查看&lt;a href=&quot;https://muyinchen.github.io/2017/08/02/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AE%BASpring%20DispatcherServlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/&quot;&gt;Spring5源码解析-论Spring DispatcherServlet的生命周期&lt;/a&gt;)。这是所有传入请求的中心入口。但如果没有但如果没有众多的handlers，我们依然不能做任何事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，在本文中，我们先解读&lt;code&gt;handler&lt;/code&gt;到底是个啥。之后，我们将介绍一些&lt;code&gt;Spring&lt;/code&gt;框架中&lt;code&gt;handlers&lt;/code&gt;的两种处理类型。最后我们加点&lt;code&gt;salt&lt;/code&gt;来让我们学的东西进行落地，我们将编写我们自己的handler。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-论Spring DispatcherServlet的生命周期</title>
    <link href="https://muyinchen.github.io/2017/08/02/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AE%BASpring%20DispatcherServlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://muyinchen.github.io/2017/08/02/Spring5源码解析-论Spring DispatcherServlet的生命周期/</id>
    <published>2017-08-02T15:25:58.734Z</published>
    <updated>2017-08-02T17:07:42.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-论Spring-DispatcherServlet的生命周期"><a href="#Spring5源码解析-论Spring-DispatcherServlet的生命周期" class="headerlink" title="Spring5源码解析-论Spring DispatcherServlet的生命周期"></a>Spring5源码解析-论Spring DispatcherServlet的生命周期</h1><p>Spring Web框架架构的主要部分是<code>DispatcherServlet</code>。也就是本文中重点介绍的对象。<br><a id="more"></a><br>在本文的第一部分中，我们将看到基于<code>Spring的DispatcherServlet</code>的主要概念：前端控制器模式。第二部分将专门介绍Spring应用程序中的执行链。接下来是<code>DispatcherServlet类</code>的解释。在最后一部分，我们将尝试开发一个自定义的<code>dispatcher servlet</code>。</p>
<p>请注意，本文分析的DispatcherServlet来自Spring的5.0.0.RC3版本。如果使用不同的版本，则可能需要进行几个调整，其实因为分析的都是比较固定的东西，很少有改的。</p>
<h2 id="什么是前端控制器模式？"><a href="#什么是前端控制器模式？" class="headerlink" title="什么是前端控制器模式？"></a>什么是前端控制器模式？</h2><p>在进入<code>DispatcherServlet</code>之前，我们需要了解一些关于它的概念基础。<code>DispatcherServlet</code>所隐含的关键概念其实就是<strong>前端控制器模式</strong>。</p>
<p>此模式为Web应用程序提供了一个中心入口点。该集中入口点将系统组件的共同特征进行重新组合。我们可以在那里找到安全资源，语言切换，会话管理，缓存或输入过滤的处理程序。这样做的一个很大的好处是:这个共同的入口点有助于避免代码重复。</p>
<p>因此，从技术上讲，前端控制器模式由一个捕获所有传入请求的类组成。之后，分析每个请求以知道哪个控制器以及哪个方法应该来处理该请求。</p>
<p>前端控制器模式有助于对以下询问做出最佳响应: </p>
<ul>
<li>如何集中授权和认证？ </li>
<li>如何处理正确的视图渲染？ </li>
<li>如何使用URL重写映射将请求发送到适当的控制器？</li>
</ul>
<p>这个前台控制器模式包含5名参与者： </p>
<ul>
<li>客户端：发送请求。 </li>
<li>控制器：应用程序的中心点，捕获所有请求。 </li>
<li>调度员：管理视图的选择，以呈现给客户端。 </li>
<li>视图：表示呈现给客户端的内容。 </li>
<li>帮助：帮助查看和/或控制器完成请求处理。</li>
</ul>
<h2 id="什么是DispatcherServlet的执行链？"><a href="#什么是DispatcherServlet的执行链？" class="headerlink" title="什么是DispatcherServlet的执行链？"></a>什么是DispatcherServlet的执行链？</h2><p>由标题可以看到，前端控制器模式有自己的执行链。这意味着它有自己的逻辑来处理请求并将视图返回给客户端：</p>
<ol>
<li><p>请求由客户端发送。它到达作为Spring的默认前端控制器的<code>DispatcherServlet</code>类。</p>
</li>
<li><p><code>DispatcherServlet</code>使用请求处理程序映射来发现将分析请求的控制器(controller</p>
<p>)。接口<strong>org.springframework.web.servlet.HandlerMapping</strong>的实现返回一个包含<strong>org.springframework.web.servlet.HandlerExecutionChain</strong>类的实例。此实例包含可在控制器调用之前或之后调用的处理程序拦截器数组。你可以在Spring中有关于拦截器的文章中了解更多的信息。如果在所有定义的处理程序映射中找不到<code>HandlerExecutionChain</code>，这意味着Spring无法将URL与对应的控制器进行匹配。这样的话会抛出一个错误。</p>
</li>
<li><p>现在系统进行拦截器预处理并调用由映射处理器找到的相应的controller(其实就是在找到的controller之前进行一波拦截处理)。在controller处理请求后，<code>DispatcherServlet</code>开始拦截器的后置处理。在此步骤结束时，它从controller接收ModelAndView实例(整个过程其实就是 <code>request请求</code>-&gt;<code>进入interceptors</code>-&gt;<code>controller</code>-&gt;<code>从interceptors出来</code>-&gt;<code>ModelAndView接收</code>)。</p>
</li>
<li><p>DispatcherServlet现在将使用的该视图的名称发送到视图解析器。这个解析器将决定前台的展现内容。接着，它将此视图返回给DispatcherServlet，其实也就是一个“视图生成后可调用”的拦截器。</p>
</li>
<li><p>最后一个操作是视图的渲染并作为对客户端request请求的响应。</p>
</li>
</ol>
<h2 id="什么是DispatcherServlet？"><a href="#什么是DispatcherServlet？" class="headerlink" title="什么是DispatcherServlet？"></a>什么是DispatcherServlet？</h2><p>通过上面讲到的前端控制器模式，我们可以很轻易的知道<code>DispatcherServlet</code>是基于<code>Spring</code>的<code>Web</code>应用程序的中心点。它需要传入请求，并在处理程序映射，拦截器，控制器和视图解析器的帮助下，生成对客户端的响应。所以，我们可以分析这个类的细节，并总结出一些核心要点。</p>
<p>下面是处理一个请求时<code>DispatcherServlet</code>执行的步骤：</p>
<h4 id="1-策略初始化"><a href="#1-策略初始化" class="headerlink" title="1. 策略初始化"></a>1. 策略初始化</h4><p><code>DispatcherServlet</code>是一个位于<strong>org.springframework.web.servlet</strong>包中的类，并扩展了同一个包中的抽象类<code>FrameworkServlet</code>。它包含一些解析器的私有静态字段(用于本地化，视图，异常或上传文件)，<code>映射处理器:handlerMapping</code>和<code>处理适配器:handlerAdapter</code>(进入这个类的第一眼就能看到的)。<code>DispatcherServlet</code>非常重要的一个核心点就是是初始化策略的方法(<strong>protected void initStrategies（ApplicationContext context）</strong>)。在调用<code>onRefresh</code>方法时调用此方法。最后一次调用是在<code>FrameworkServlet</code>中通过<code>initServletBean</code>和<code>initWebApplicationContext</code>方法进行的(<code>initServletBean</code>方法中调用<code>initWebApplicationContext</code>，后者调用<code>onRefresh(wac)</code>)。<code>initServletBean</code>通过所提供的这些策略生成我们所需要的应用程序上下文。其中每个策略都会产生一类在<code>DispatcherServlet</code>中用来处理传入请求的对象。</p>
<p>基于篇幅，有些代码就不给贴示了，请在相应版本的源码中自行对照查找，此处只给一部分源码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This implementation calls &#123;<span class="doctag">@link</span> #initStrategies&#125;.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">	initStrategies(context);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize the strategy objects that this servlet uses.</div><div class="line"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">	initMultipartResolver(context);</div><div class="line">	initLocaleResolver(context);</div><div class="line">	initThemeResolver(context);</div><div class="line">	initHandlerMappings(context);</div><div class="line">	initHandlerAdapters(context);</div><div class="line">	initHandlerExceptionResolvers(context);</div><div class="line">	initRequestToViewNameTranslator(context);</div><div class="line">	initViewResolvers(context);</div><div class="line">	initFlashMapManager(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，如果找的结果不存在，则捕获异常<code>NoSuchBeanDefinitionException</code>(下面两段代码的第一段)，并采用默认策略。如果在DispatcherServlet.properties文件中初始定义的默认策略不存在，则抛出BeanInitializationException异常(下面两段代码的第二段)。默认策略如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Initialize the LocaleResolver used by this class.</div><div class="line">	 * &lt;p&gt;If no bean is defined with the given name in the BeanFactory for this namespace,</div><div class="line">	 * we default to AcceptHeaderLocaleResolver.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocaleResolver</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.localeResolver = context.getBean(LOCALE_RESOLVER_BEAN_NAME, LocaleResolver.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Using LocaleResolver ["</span> + <span class="keyword">this</span>.localeResolver + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">			<span class="comment">// We need to use the default.</span></div><div class="line">			<span class="keyword">this</span>.localeResolver = getDefaultStrategy(context, LocaleResolver.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Unable to locate LocaleResolver with name '"</span> + LOCALE_RESOLVER_BEAN_NAME +<span class="string">"': using default ["</span> + <span class="keyword">this</span>.localeResolver + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>抛出异常后调用<code>getDefaultStrategy</code>(因为容器里都是单例的存在，所以只需要判断基于这个接口的默认实现实例size为1即可，两个以上还能叫默认么，都有选择了):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return the default strategy object for the given strategy interface.</div><div class="line"> * The default implementation delegates to &#123;<span class="doctag">@link</span> #getDefaultStrategies&#125;,</div><div class="line"> * expecting a single object in the list.</div><div class="line"> * <span class="doctag">@param</span> context the current WebApplicationContext</div><div class="line"> * <span class="doctag">@param</span> strategyInterface the strategy interface</div><div class="line"> * <span class="doctag">@return</span> the corresponding strategy object</div><div class="line"> * <span class="doctag">@see</span> #getDefaultStrategies</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">getDefaultStrategy</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">    List&lt;T&gt; strategies = getDefaultStrategies(context, strategyInterface);</div><div class="line">    <span class="keyword">if</span> (strategies.size() != <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">                <span class="string">"DispatcherServlet needs exactly 1 strategy for interface ["</span> + strategyInterface.getName() + <span class="string">"]"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> strategies.get(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a List of default strategy objects for the given strategy interface.</div><div class="line">	 * The default implementation uses the "DispatcherServlet.properties" file (in the same</div><div class="line">	 * package as the DispatcherServlet class) to determine the class names. It instantiates</div><div class="line">	 * the strategy objects through the context's BeanFactory.</div><div class="line">	 * <span class="doctag">@param</span> context the current WebApplicationContext</div><div class="line">	 * <span class="doctag">@param</span> strategyInterface the strategy interface</div><div class="line">	 * <span class="doctag">@return</span> the List of corresponding strategy objects</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="keyword">protected</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getDefaultStrategies</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">		String key = strategyInterface.getName();</div><div class="line">		String value = defaultStrategies.getProperty(key);</div><div class="line">		<span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">			String[] classNames = StringUtils.commaDelimitedListToStringArray(value);</div><div class="line">			List&lt;T&gt; strategies = <span class="keyword">new</span> ArrayList&lt;&gt;(classNames.length);</div><div class="line">			<span class="keyword">for</span> (String className : classNames) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Class&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</div><div class="line">					Object strategy = createDefaultStrategy(context, clazz);</div><div class="line">					strategies.add((T) strategy);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not find DispatcherServlet's default strategy class ["</span> + className +<span class="string">"] for interface ["</span> + key + <span class="string">"]"</span>, ex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (LinkageError err) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">							<span class="string">"Error loading DispatcherServlet's default strategy class ["</span> + className +<span class="string">"] for interface ["</span> + key + <span class="string">"]: problem with class file or dependent class"</span>, err);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> strategies;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="2-请求预处理"><a href="#2-请求预处理" class="headerlink" title="2.请求预处理"></a>2.请求预处理</h4><p><code>FrameworkServlet</code>抽象类扩展了同一个包下的<code>HttpServletBean</code>，<code>HttpServletBean</code>扩展了<strong>javax.servlet.http.HttpServlet</strong>。点开这个类源码可以看到，<code>HttpServlet</code>是一个抽象类，其方法定义主要用来处理每种类型的<code>HTTP</code>请求：<code>doGet（GET请求）</code>，<code>doPost（POST）</code>，<code>doPut（PUT）</code>，<code>doDelete（DELETE）</code>，<code>doTrace（TRACE）</code>，<code>doHead（HEAD）</code> ，<code>doOptions（OPTIONS）</code>。<code>FrameworkServlet</code>通过将每个传入的请求调度到<strong>processRequest(HttpServletRequest  request，HttpServletResponse response)</strong>来覆盖它们。<code>processRequest</code>是一个<code>protected</code>和<code>final</code>的方法，它构造出<code>LocaleContext</code>和<code>ServletRequestAttributes</code>对象，两者都可以在<code>initContextHolders(request, localeContext, requestAttributes)</code>之后访问。所有这些操作的关键代码 请看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">    processRequest(request, response);</div><div class="line">&#125;</div><div class="line"> ...</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Process this request, publishing an event regardless of the outcome.</div><div class="line"> * The actual event handling is performed by the abstract</div><div class="line"> * &#123;<span class="doctag">@link</span> #doService&#125; template method.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">    Throwable failureCause = <span class="keyword">null</span>;</div><div class="line"> </div><div class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</div><div class="line">    LocaleContext localeContext = buildLocaleContext(request);</div><div class="line"> </div><div class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</div><div class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</div><div class="line"> </div><div class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</div><div class="line"> </div><div class="line">    initContextHolders(request, localeContext, requestAttributes);</div><div class="line"> </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        doService(request, response);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">        failureCause = ex;</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">        failureCause = ex;</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">        failureCause = ex;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</div><div class="line">        <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</div><div class="line">            requestAttributes.requestCompleted();</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            <span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Could not complete request"</span>, failureCause);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">                    logger.debug(<span class="string">"Leaving response open for concurrent processing"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.logger.debug(<span class="string">"Successfully completed request"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        publishRequestHandledEvent(request, startTime, failureCause);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initContextHolders</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			@Nullable LocaleContext localeContext, @Nullable RequestAttributes requestAttributes) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (localeContext != <span class="keyword">null</span>) &#123;</div><div class="line">			LocaleContextHolder.setLocaleContext(localeContext, <span class="keyword">this</span>.threadContextInheritable);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</div><div class="line">			RequestContextHolder.setRequestAttributes(requestAttributes, <span class="keyword">this</span>.threadContextInheritable);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">			logger.trace(<span class="string">"Bound request context to thread: "</span> + request);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="3-请求处理"><a href="#3-请求处理" class="headerlink" title="3.请求处理"></a>3.请求处理</h4><p>由上面所看到的，在<code>processRequest</code>的代码中，调用<strong>initContextHolders</strong>方法后，调用<strong>protected void doService(HttpServletRequest request，HttpServletResponse  response)</strong>。doService将一些附加参数放入request（如Flash映射:<code>request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap())</code>，上下文信息:<code>request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext())</code>等）中，并调用<strong>protected void doDispatch(HttpServletRequest request，HttpServletResponse response)</strong>。</p>
<p><code>doDispatch</code>方法最重要的部分是处理(<code>handler</code>)的检索。<code>doDispatch</code>调用<code>getHandler()</code>方法来分析处理后的请求并返回<code>HandlerExecutionChain</code>实例。此实例包含<code>handler mapping</code> 和<code>`interceptors(拦截器)</code>。<code>DispatcherServlet</code>做的另一件事是应用预处理程序拦截器（<em>applyPreHandle()</em>）。如果至少有一个返回<code>false</code>，则请求处理停止。否则，<code>servlet</code>使用与 <code>handler adapter</code>适配(其实理解成这也是个<code>handler</code>就对了)相应的<code>handler mapping</code>来生成视图对象。</p>
<p><code>doDispatch</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Process the actual dispatching to the handler.</div><div class="line"> * The handler will be obtained by applying the servlet's HandlerMappings in order.</div><div class="line"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</div><div class="line"> * to find the first that supports the handler class.</div><div class="line"> * All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</div><div class="line"> * themselves to decide which methods are acceptable.</div><div class="line"> * <span class="doctag">@param</span> request current HTTP request</div><div class="line"> * <span class="doctag">@param</span> response current HTTP response</div><div class="line"> * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		HttpServletRequest processedRequest = request;</div><div class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">			Exception dispatchException = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				processedRequest = checkMultipart(request);</div><div class="line">				multipartRequestParsed = (processedRequest != request);</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler for the current request.</span></div><div class="line">				mappedHandler = getHandler(processedRequest);</div><div class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</div><div class="line">					noHandlerFound(processedRequest, response);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler adapter for the current request.获取可处理request的Handler，适配器其实还				//是调用的相应的Handler,一样的功能，具体请参考本人的Spring设计模式中的适配器模式</span></div><div class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></div><div class="line">				String method = request.getMethod();</div><div class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</div><div class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</div><div class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</div><div class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">						logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Actually invoke the handler.此处就会调用我们写的controller来执行咯</span></div><div class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//视图解析</span></div><div class="line">				applyDefaultViewName(processedRequest, mv);</div><div class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				dispatchException = ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">				<span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></div><div class="line">				<span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></div><div class="line">				dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</div><div class="line">			&#125;</div><div class="line">          	<span class="comment">//此处进行最后一步的视图渲染</span></div><div class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler,</div><div class="line">					<span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></div><div class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></div><div class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</div><div class="line">					cleanupMultipart(processedRequest);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="4-视图解析"><a href="#4-视图解析" class="headerlink" title="4.视图解析"></a>4.视图解析</h4><p>获取<code>ModelAndView</code>实例以查看呈现后，<code>doDispatch</code>方法调用<strong>private void applyDefaultViewName(HttpServletRequest request，ModelAndView mv)</strong>。默认视图名称根据定义的bean名称，即<code>viewNameTranslator</code>。默认情况下，它的实现是<strong>org.springframework.web.servlet.RequestToViewNameTranslator</strong>。这个默认实现只是简单的将URL转换为视图名称，例如(直接从<code>RequestToViewNameTranslator</code>获取):http:// localhost:8080/admin/index.html将生成视图admin / index。</p>
<p>代码如下:</p>
<p>下一步是调用后置拦截器(其实就是出拦截器)做的一些处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** RequestToViewNameTranslator used by this servlet */</span></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</div><div class="line">...</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		initMultipartResolver(context);</div><div class="line">		initLocaleResolver(context);</div><div class="line">		initThemeResolver(context);</div><div class="line">		initHandlerMappings(context);</div><div class="line">		initHandlerAdapters(context);</div><div class="line">		initHandlerExceptionResolvers(context);</div><div class="line">		initRequestToViewNameTranslator(context); <span class="comment">//看下面注释</span></div><div class="line">		initViewResolvers(context);</div><div class="line">		initFlashMapManager(context);</div><div class="line">	&#125;</div><div class="line">...</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Initialize the RequestToViewNameTranslator used by this servlet instance.</div><div class="line">	 * &lt;p&gt;If no implementation is configured then we default to DefaultRequestToViewNameTranslator.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRequestToViewNameTranslator</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.viewNameTranslator =</div><div class="line">					context.getBean(REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME, RequestToViewNameTranslator.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Using RequestToViewNameTranslator ["</span> + <span class="keyword">this</span>.viewNameTranslator + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">			<span class="comment">// We need to use the default.</span></div><div class="line">			<span class="keyword">this</span>.viewNameTranslator = getDefaultStrategy(context, RequestToViewNameTranslator.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Unable to locate RequestToViewNameTranslator with name '"</span> +</div><div class="line">						REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME + <span class="string">"': using default ["</span> + <span class="keyword">this</span>.viewNameTranslator +<span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">....</div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Translate the supplied request into a default view name.</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP servlet request</div><div class="line">	 * <span class="doctag">@return</span> the view name (or &#123;<span class="doctag">@code</span> null&#125; if no default found)</div><div class="line">	 * <span class="doctag">@throws</span> Exception if view name translation failed</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">getDefaultViewName</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.viewNameTranslator != <span class="keyword">null</span> ? <span class="keyword">this</span>.viewNameTranslator.getViewName(request) : <span class="keyword">null</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</code>实现的<code>org.springframework.web.servlet.RequestToViewNameTranslator</code>接口，其内对上段代码中<code>getDefaultViewName</code>的实现为:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRequestToViewNameTranslator</span> <span class="keyword">implements</span> <span class="title">RequestToViewNameTranslator</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLASH = <span class="string">"/"</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">private</span> String prefix = <span class="string">""</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String suffix = <span class="string">""</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String separator = SLASH;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> stripLeadingSlash = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> stripTrailingSlash = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> stripExtension = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the prefix to prepend to generated view names.</div><div class="line">	 * <span class="doctag">@param</span> prefix the prefix to prepend to generated view names</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.prefix = (prefix != <span class="keyword">null</span> ? prefix : <span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the suffix to append to generated view names.</div><div class="line">	 * <span class="doctag">@param</span> suffix the suffix to append to generated view names</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.suffix = (suffix != <span class="keyword">null</span> ? suffix : <span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the value that will replace '&#123;<span class="doctag">@code</span> /&#125;' as the separator</div><div class="line">	 * in the view name. The default behavior simply leaves '&#123;<span class="doctag">@code</span> /&#125;'</div><div class="line">	 * as the separator.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeparator</span><span class="params">(String separator)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.separator = separator;</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Translates the request URI of the incoming &#123;<span class="doctag">@link</span> HttpServletRequest&#125;</div><div class="line">	 * into the view name based on the configured parameters.</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.web.util.UrlPathHelper#getLookupPathForRequest</div><div class="line">	 * <span class="doctag">@see</span> #transformPath</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getViewName</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">		String lookupPath = <span class="keyword">this</span>.urlPathHelper.getLookupPathForRequest(request);</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.prefix + transformPath(lookupPath) + <span class="keyword">this</span>.suffix);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Transform the request URI (in the context of the webapp) stripping</div><div class="line">	 * slashes and extensions, and replacing the separator as required.</div><div class="line">	 * <span class="doctag">@param</span> lookupPath the lookup path for the current request,</div><div class="line">	 * as determined by the UrlPathHelper</div><div class="line">	 * <span class="doctag">@return</span> the transformed path, with slashes and extensions stripped</div><div class="line">	 * if desired</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">transformPath</span><span class="params">(String lookupPath)</span> </span>&#123;</div><div class="line">		String path = lookupPath;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.stripLeadingSlash &amp;&amp; path.startsWith(SLASH)) &#123;</div><div class="line">			path = path.substring(<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.stripTrailingSlash &amp;&amp; path.endsWith(SLASH)) &#123;</div><div class="line">			path = path.substring(<span class="number">0</span>, path.length() - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.stripExtension) &#123;</div><div class="line">			path = StringUtils.stripFilenameExtension(path);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!SLASH.equals(<span class="keyword">this</span>.separator)) &#123;</div><div class="line">			path = StringUtils.replace(path, SLASH, <span class="keyword">this</span>.separator);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> path;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-处理调度请求-视图渲染"><a href="#5-处理调度请求-视图渲染" class="headerlink" title="5.处理调度请求 - 视图渲染"></a>5.处理调度请求 - 视图渲染</h4><p>现在，<code>servlet</code>知道应该是哪个视图被渲染。它通过<strong>private void processDispatchResult(HttpServletRequest request，HttpServletResponse response，@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,@Nullable Exception exception)</strong>方法来进行最后一步操作 - 视图渲染。</p>
<p>首先，<code>processDispatchResult</code>检查它们是否有参数传递异常。有一些异常的话，它定义了一个新的视图，专门用来定位错误页面。如果没有任何异常，该方法将检查<code>ModelAndView实例</code>，如果它不为<code>null</code>，则调用<code>render</code>方法。</p>
<p>渲染方法<code>protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception</code>。跳进此方法内部，根据定义的视图策略，它会查找得到一个<code>View类</code>实例。它将负责显示响应。如果没有找到<code>View</code>，则会抛出一个<code>ServletException异常</code>。有的话，<code>DispatcherServlet</code>会调用其<code>render</code>方法来显示结果。</p>
<p>其实可以说成是后置拦截器(进入拦截器前置拦截处理-&gt;controller处理-&gt;出拦截器之前的此拦截器的后置处理)，也就是在请求处理的最后一个步骤中被调用。</p>
<p>下面是<code>processDispatchResult</code>和<code>render(渲染)</code>的相关代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Handle the result of handler selection and handler invocation, which is</div><div class="line">	 * either a ModelAndView or an Exception to be resolved to a ModelAndView.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">			@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,</div><div class="line">			@Nullable Exception exception) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		<span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</div><div class="line">				logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</div><div class="line">				mv = ((ModelAndViewDefiningException) exception).getModelAndView();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">				mv = processHandlerException(request, response, handler, exception);</div><div class="line">				errorView = (mv != <span class="keyword">null</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Did the handler return a view to render?</span></div><div class="line">		<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</div><div class="line">          <span class="comment">//开始渲染</span></div><div class="line">			render(mv, request, response);</div><div class="line">			<span class="keyword">if</span> (errorView) &#123;</div><div class="line">				WebUtils.clearErrorRequestAttributes(request);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</div><div class="line">						<span class="string">"': assuming HandlerAdapter completed request handling"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">			<span class="comment">// Concurrent handling started during a forward</span></div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">			mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Render the given ModelAndView.</div><div class="line">	 * &lt;p&gt;This is the last stage in handling a request. It may involve resolving the view by name.</div><div class="line">	 * <span class="doctag">@param</span> mv the ModelAndView to render</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP servlet request</div><div class="line">	 * <span class="doctag">@param</span> response current HTTP servlet response</div><div class="line">	 * <span class="doctag">@throws</span> ServletException if view is missing or cannot be resolved</div><div class="line">	 * <span class="doctag">@throws</span> Exception if there's a problem rendering the view</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// Determine locale for request and apply it to the response.</span></div><div class="line">		Locale locale =</div><div class="line">				(<span class="keyword">this</span>.localeResolver != <span class="keyword">null</span> ? <span class="keyword">this</span>.localeResolver.resolveLocale(request) : request.getLocale());</div><div class="line">		response.setLocale(locale);</div><div class="line"></div><div class="line">		View view;</div><div class="line">		String viewName = mv.getViewName();</div><div class="line">		<span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// We need to resolve the view name.</span></div><div class="line">			view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</div><div class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() +</div><div class="line">						<span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></div><div class="line">			view = mv.getView();</div><div class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> +<span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Delegate to the View object for rendering.</span></div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(<span class="string">"Rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</div><div class="line">				response.setStatus(mv.getStatus().value());</div><div class="line">			&#125;</div><div class="line">			view.render(mv.getModelInternal(), request, response);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> +</div><div class="line">						getServletName() + <span class="string">"'"</span>, ex);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Handle the result of handler selection and handler invocation, which is</div><div class="line"> * either a ModelAndView or an Exception to be resolved to a ModelAndView.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">        HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) <span class="keyword">throws</span> Exception &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</div><div class="line">            logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</div><div class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">            mv = processHandlerException(request, response, handler, exception);</div><div class="line">            errorView = (mv != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// Did the handler return a view to render?</span></div><div class="line">    <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</div><div class="line">        render(mv, request, response);</div><div class="line">        <span class="keyword">if</span> (errorView) &#123;</div><div class="line">            WebUtils.clearErrorRequestAttributes(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</div><div class="line">                    <span class="string">"': assuming HandlerAdapter completed request handling"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">        <span class="comment">// Concurrent handling started during a forward</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * Render the given ModelAndView.</div><div class="line"> * This is the last stage in handling a request. It may involve resolving the view by name.</div><div class="line"> * <span class="doctag">@param</span> mv the ModelAndView to render</div><div class="line"> * <span class="doctag">@param</span> request current HTTP servlet request</div><div class="line"> * <span class="doctag">@param</span> response current HTTP servlet response</div><div class="line"> * <span class="doctag">@throws</span> ServletException if view is missing or cannot be resolved</div><div class="line"> * <span class="doctag">@throws</span> Exception if there's a problem rendering the view</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// Determine locale for request and apply it to the response.</span></div><div class="line">    Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</div><div class="line">    response.setLocale(locale);</div><div class="line"> </div><div class="line">    View view;</div><div class="line">    <span class="keyword">if</span> (mv.isReference()) &#123;</div><div class="line">        <span class="comment">// We need to resolve the view name.</span></div><div class="line">        view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(</div><div class="line">                    <span class="string">"Could not resolve view with name '"</span> + mv.getViewName() + <span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></div><div class="line">        view = mv.getView();</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> + <span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// Delegate to the View object for rendering.</span></div><div class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">        logger.debug(<span class="string">"Rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        view.render(mv.getModelInternal(), request, response);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这部分中，你需要记住的是我们定义了两个上下文：一个用于应用程序，另一个用于Web应用程序。他们有什么区别？应用程序上下文包含所有通用配置，比如service定义，数据库配置。Web应用程序上下文定义所有与Web相关的组件，比如<code>controllers</code>或视图解析器。</p>
<h2 id="Custom-DispatcherServlet"><a href="#Custom-DispatcherServlet" class="headerlink" title="Custom DispatcherServlet"></a>Custom DispatcherServlet</h2><p>我们已经了解了<code>DispatcherServlet</code>的理论知识。通过文中的这些实用要点，我们可以编写自己的servlet来分派处理请求。同样的，我们也将按步进行，从捕获请求开始，以视图渲染结束。</p>
<p>通过上面的描述，为了捕获请求，我们需要覆盖<code>doService</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CustomDispatcherServlet.class);</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[CustomDispatcherServlet] I got the request !"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，在我们的日志文件中，我们应该可以找到一条“[CustomDispatcherServlet]I got the request！”。接着，我们继续添加在<code>DispatcherServlet</code>中<code>doDispatch方法</code>所应该做的一些工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"[CustomDispatcherServlet] I got the request !"</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        LOGGER.debug(<span class="string">"[CustomDispatcherServlet] doService"</span>);</div><div class="line">        LocaleContext localeContext = buildLocaleContext(request);</div><div class="line"> </div><div class="line">        RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</div><div class="line">        ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</div><div class="line"> </div><div class="line">        initContextHolders(request, localeContext, requestAttributes);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法是做什么的？首先，它为构建一个<code>Locale实例</code>用来接收请求。第二步是初始化<strong>org.springframework.web.context.request.ServletRequestAttributes</strong>实例。它是<code>RequestAttributes</code>接口的实现，和本地化在同一级别。通过这个，我们可以访问<code>servlet</code>请求的对象和会话对象，而不必区分会话和全局会话。最后，我们调用<strong>初始化context holders</strong>的<code>initContextHolders()</code>方法，即从应用程序通过<code>LocaleContextHolder</code>和<code>RequestContextHolder</code>静态方法(分别为:<code>getLocaleContext和getRequestAttributes</code>)访问请求属性和区域设置的对象。</p>
<p>当请求被拦截，一些基本的设置就绪的时候。我们发现我们还没有执行链和处理器适配器。我们可以通过以下代码进行:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> HandlerExecutionChain <span class="title">getHandlerExecutionChain</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">for</span> (HandlerMapping mapper : <span class="keyword">this</span>.handlerMappings) &#123;</div><div class="line">        HandlerExecutionChain executionChain = mapper.getHandler(request);</div><div class="line">        <span class="keyword">if</span> (executionChain != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> executionChain;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Execution chain wasn't be found in provided handler mappings: "</span>+<span class="keyword">this</span>.handlerMappings);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过执行链，我们可以通过 handler adapter将处理当前请求。看以下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object executionChain)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">    <span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</div><div class="line">        LOGGER.debug(<span class="string">"[CustomDispatcherServlet] "</span>+adapter + <span class="string">" is instanceof HandlerMethod ? "</span>+(adapter <span class="keyword">instanceof</span> HandlerMethod));</div><div class="line">        <span class="keyword">if</span> (adapter.supports(executionChain)) &#123;</div><div class="line">            <span class="keyword">return</span> adapter;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span>  ServletException(<span class="string">"Handler adapter was not found from adapters list :"</span>+<span class="keyword">this</span>.handlerAdapters);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有应用程序上下文中定义的适配器（<code>this.handlerAdapter</code>）支持适配所生成的执行链（<code>adapter.supports</code>）才可以返回我们想要的适配器。最后，我们可以返回到我们的<code>doService</code>方法并操作它们来渲染视图：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ModelAndView modelView = adapter.handle(request, response, executionChain.getHandler());</div><div class="line">Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</div><div class="line">response.setLocale(locale);</div><div class="line"> </div><div class="line">View view = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (!modelView.isReference()) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Only view models defined as references can be used in this servlet"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</div><div class="line">    view = viewResolver.resolveViewName(modelView.getViewName(), locale);</div><div class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + modelView.getViewName() + <span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">&#125;</div><div class="line">view.render(modelView.getModelMap(), request, response);</div></pre></td></tr></table></figure>
<p>我们的servlet中简化了渲染。实际上，我们仅处理<code>ModelAndView</code>的引用对象。这意味着<code>ModelAndView</code>是一个<code>String</code>的实例，用来表示要解析的视图模型，例如：我们定义好几个模板解析器(比如<code>freemaker</code>，<code>Thymeleaf</code>)，然后查看其配置。在这个检查之后，我们迭代当前视图解析器。能够生成View实例的第一个解析器被视为处理过的请求中使用的解析器。最后，我们检查视图是否正确生成。拿到view实例后，我们调用其render()方法来在屏幕中显示请求处理结果。</p>
<p>在这部分中，我们将描述和代码部分限制在最低限度。只是为了把Spring的整个过程给集中呈现以下，达到更好的理解，其实就是在Servlet中的service方法内做些对request和response的文章而已了。</p>
<blockquote>
<p>本文介绍了Spring Web应用程序的中心点，一个调度器servlet。请记住，它是一个处理所有传入请求并将视图呈现给用户的类。在重写之前，你应该熟悉执行链，handler mapping 或handler adapter等概念。请记住，第一步要做的是定义在调度过程中我们要调用的所有元素。handler mapping 是将传入请求(也就是它的URL)映射到适当的controller。最后提到的元素，一个handler适配器，就是一个对象，它将通过其内包装的handler mapping将请求发送到controller。此调度产生的结果是ModelAndView类的一个实例，后面被用于生成和渲染视图。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-论Spring-DispatcherServlet的生命周期&quot;&gt;&lt;a href=&quot;#Spring5源码解析-论Spring-DispatcherServlet的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-论Spring DispatcherServlet的生命周期&quot;&gt;&lt;/a&gt;Spring5源码解析-论Spring DispatcherServlet的生命周期&lt;/h1&gt;&lt;p&gt;Spring Web框架架构的主要部分是&lt;code&gt;DispatcherServlet&lt;/code&gt;。也就是本文中重点介绍的对象。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(五)</title>
    <link href="https://muyinchen.github.io/2017/08/01/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/"/>
    <id>https://muyinchen.github.io/2017/08/01/Spring框架中的设计模式(五)/</id>
    <published>2017-07-31T16:07:31.895Z</published>
    <updated>2017-07-31T16:08:57.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring框架中的设计模式-五"><a href="#Spring框架中的设计模式-五" class="headerlink" title="Spring框架中的设计模式 (五)"></a>Spring框架中的设计模式 (五)</h2><p>通过以前的4篇文章，我们看到Spring采用了大量的关于创建和结构方面的设计模式。</p>
<p>本文将描述属于行为方面的两种设计模式：命令和访问者。<br><a id="more"></a></p>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>这篇文章描述的第一个行为设计模式是<strong>命令</strong>。它允许将请求封装在一个对象内并附加一个回调动作(每次遇到所所谓的回调大家就只需要理解为一个函数方法就好，省的去浪费那么多脑子)。请求被封装在命令对象之下，而请求的结果被发送到接收者。命令本身不是由调用者执行。为了直白了解其中的主要思想，想象一下管理服务器的情况(远程通过<code>ssh</code>操作<code>Linux</code>服务器)。管理员（<code>invoker</code>）在命令行（<code>commands</code>）中启动一些操作，将结果发送到服务器（接收器）。在这里,所有这一切都是由客户端的终端(也就是我们用的<code>xshell</code>)来完成的。搞个<code>Demo</code>来说明一下(对于命令，它的动作就是执行，对于管理员来讲，我们的动作其实就是一个回车，执不执行当然是管理员说的算了，执行交给命令对象了，服务器最后就是一个展示结果)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="comment">// This test method is a client</span></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Administrator admin = <span class="keyword">new</span> Administrator();</div><div class="line">    Server server = <span class="keyword">new</span> Server();</div><div class="line">     </div><div class="line">    <span class="comment">// start Apache</span></div><div class="line">    admin.setCommand(<span class="keyword">new</span> StartApache(server));</div><div class="line">    admin.typeEnter();</div><div class="line">     </div><div class="line">    <span class="comment">// start Tomcat</span></div><div class="line">    admin.setCommand(<span class="keyword">new</span> StartTomcat(server));</div><div class="line">    admin.typeEnter();</div><div class="line">     </div><div class="line">    <span class="comment">// check executed commands</span></div><div class="line">    <span class="keyword">int</span> executed = server.getExecutedCommands().size();</div><div class="line">    assertTrue(<span class="string">"Two commands should be executed but only "</span>+</div><div class="line">      executed+ <span class="string">" were"</span>, executed == <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// commands</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerCommand</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">protected</span> Server server;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ServerCommand</span><span class="params">(Server server)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.server = server;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StartTomcat</span> <span class="keyword">extends</span> <span class="title">ServerCommand</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StartTomcat</span><span class="params">(Server server)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(server);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">    server.launchCommand(<span class="string">"sudo service tomcat7 start"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StartApache</span> <span class="keyword">extends</span> <span class="title">ServerCommand</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StartApache</span><span class="params">(Server server)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(server);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">    server.launchCommand(<span class="string">"sudo service apache2 start"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// invoker</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Administrator</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> ServerCommand command;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(ServerCommand command)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.command = command;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">typeEnter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.command.execute();</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// receiver</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="comment">// as in common terminals, we store executed commands in history</span></div><div class="line">  <span class="keyword">private</span> List&lt;String&gt; executedCommands = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">launchCommand</span><span class="params">(String command)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Executing: "</span>+command+<span class="string">" on server"</span>);</div><div class="line">    <span class="keyword">this</span>.executedCommands.add(command);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getExecutedCommands</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.executedCommands;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试应通过并打印两个命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Executing: sudo service apache2 start on server</div><div class="line">Executing: sudo service tomcat7 start on server</div></pre></td></tr></table></figure>
<p>命令模式不仅允许封装请求（ServerCommand）并将其传输到接收器（Server），而且还可以更好地处理给定的请求。在这里，这种更好的处理是通过存储命令的执行历史。在Spring中，我们在beanFactory后置处理器的特性中来找到指令设计模式的原理。要通过快速对它们进行定义，应用程序上下文会启动后置处理器，并可以用来对创建的bean进行一些操作（这里不打算细说了，具体的我后面会专门写一篇这方面的文章，来分析其中的源码细节）。</p>
<p>当我们将先前Demo里呈现的命令逻辑转换并对比到<code>Spring bean工厂后处理器</code>时，我们可以区分以下<code>actors</code>：<strong>后置处理器bean</strong>(是指实现<code>BeanFactoryPostProcessor</code>接口)是命令，<strong>org.springframework.context.support.PostProcessorRegistrationDelegate</strong>是调用者(它执行<code>postProcessBeanFactory</code>方法注册所有的后置处理器bean，此处看下面第二段代码)和接收器<strong>org.springframework.beans.factory.config.ConfigurableListableBeanFactory</strong>可以在元素（bean）构造初始化之前修改它们（例如：在初始化bean之前可以更改属性）。</p>
<p>另外，回顾下上面的那个Demo，和我们的Demo中的命令历史管理一样。<code>PostProcessorRegistrationDelegate</code>包含一个内部类<code>BeanPostProcessorChecker</code>，它可以记录当一个bean不符合处理条件的情况。</p>
<p>可以观察<code>PostProcessorRegistrationDelegate</code>中的两段代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * BeanPostProcessor that logs an info message when a bean is created during</div><div class="line">	 * BeanPostProcessor instantiation, i.e. when a bean is not eligible for</div><div class="line">	 * getting processed by all BeanPostProcessors.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorChecker</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(BeanPostProcessorChecker.class);</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> ConfigurableListableBeanFactory beanFactory;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> beanPostProcessorTargetCount;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">BeanPostProcessorChecker</span><span class="params">(ConfigurableListableBeanFactory beanFactory, <span class="keyword">int</span> beanPostProcessorTargetCount)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.beanFactory = beanFactory;</div><div class="line">			<span class="keyword">this</span>.beanPostProcessorTargetCount = beanPostProcessorTargetCount;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> bean;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (bean != <span class="keyword">null</span> &amp;&amp; !(bean <span class="keyword">instanceof</span> BeanPostProcessor) &amp;&amp; !isInfrastructureBean(beanName) &amp;&amp;</div><div class="line">					<span class="keyword">this</span>.beanFactory.getBeanPostProcessorCount() &lt; <span class="keyword">this</span>.beanPostProcessorTargetCount) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">					logger.info(<span class="string">"Bean '"</span> + beanName + <span class="string">"' of type ["</span> + bean.getClass() +</div><div class="line">							<span class="string">"] is not eligible for getting processed by all BeanPostProcessors "</span> +</div><div class="line">							<span class="string">"(for example: not eligible for auto-proxying)"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> bean;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInfrastructureBean</span><span class="params">(String beanName)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (beanName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.beanFactory.containsBeanDefinition(beanName)) &#123;</div><div class="line">				BeanDefinition bd = <span class="keyword">this</span>.beanFactory.getBeanDefinition(beanName);</div><div class="line">				<span class="keyword">return</span> RootBeanDefinition.ROLE_INFRASTRUCTURE == bd.getRole();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>定义后的调用,用的就是<code>ConfigurableListableBeanFactory</code>的实例(看<code>BeanPostProcessorChecker</code>注释):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></div><div class="line">			ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123;</div><div class="line"></div><div class="line">		String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Register BeanPostProcessorChecker that logs an info message when</span></div><div class="line">		<span class="comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span></div><div class="line">		<span class="comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span></div><div class="line">		<span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</div><div class="line">  <span class="comment">//BeanPostProcessorChecker</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</div><div class="line"></div><div class="line">		<span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></div><div class="line">		<span class="comment">// Ordered, and the rest.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">				BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">				priorityOrderedPostProcessors.add(pp);</div><div class="line">				<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">					internalPostProcessors.add(pp);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">				orderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				nonOrderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></div><div class="line">		sortPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			orderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		sortPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Now, register all regular BeanPostProcessors.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			nonOrderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></div><div class="line">		sortPostProcessors(beanFactory, internalPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, internalPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span></div><div class="line">		<span class="comment">// moving it to the end of the processor chain (for picking up proxies etc).</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>总结一个过程就是，我要BeanFactory里面得到对象(也就是为了得到一个命令的执行结果)，那么，想要在得到对象的时候就已经实现了一些对其修改的想法，那么就通过后置处理器，也是就实现了后置处理器接口的beans(命令里可以通过传入不同的参数来得到不同结果，或者对命令的脚本进行修改)，然后还需要一个执行者(我们在做自动化运维的时候，不止操作一个脚本，这里的<code>PostProcessorRegistrationDelegate</code>就是集中来管理这些的)，最后得到的结果就由<code>BeanFactory</code>来展示咯。</p>
</blockquote>
<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>接下来要介绍的一个行为设计模式是<strong>Visitor</strong>:抽象一点就是通过另一种类型的对象来使一个对象访问。在这个简短定义中，使用这个设计模式中的对象将被视为访问者或对象可被访问。第一个访问者要有可访问支持。这个模式的一个现实的例子可以是一个汽车质检员，他们检查一些汽车零件，比如轮子，制动器和发动机，以判断汽车质量是否合格。我们来做个JUnit测试用例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    CarComponent car = <span class="keyword">new</span> Car();</div><div class="line">    Mechanic mechanic = <span class="keyword">new</span> QualifiedMechanic();</div><div class="line">    car.accept(mechanic);</div><div class="line">    assertTrue(<span class="string">"After qualified mechanics visit, the car should be broken"</span>,</div><div class="line">      car.isBroken());</div><div class="line">    Mechanic nonqualifiedMechanic = <span class="keyword">new</span> NonQualifiedMechanic();</div><div class="line">    car.accept(nonqualifiedMechanic);</div><div class="line">    assertFalse(<span class="string">"Car shouldn't be broken becase non qualified mechanic "</span> +</div><div class="line">      <span class="string">" can't see breakdowns"</span>, car.isBroken());</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// visitor</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mechanic</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CarComponent element)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QualifiedMechanic</span> <span class="keyword">implements</span> <span class="title">Mechanic</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CarComponent element)</span> </span>&#123;</div><div class="line">    element.setBroken(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"qualified"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonQualifiedMechanic</span> <span class="keyword">implements</span> <span class="title">Mechanic</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CarComponent element)</span> </span>&#123;</div><div class="line">    element.setBroken(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"unqualified"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// visitable</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> broken;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span></span>;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBroken</span><span class="params">(<span class="keyword">boolean</span> broken)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.broken = broken;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBroken</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.broken;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> broken = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">private</span> CarComponent[] components;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</div><div class="line">    components = <span class="keyword">new</span> CarComponent[] &#123;</div><div class="line">      <span class="keyword">new</span> Wheels(), <span class="keyword">new</span> Engine(), <span class="keyword">new</span> Brake()</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.broken = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (mechanic.getName().equals(<span class="string">"qualified"</span>)) &#123;</div><div class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">      <span class="keyword">while</span> (i &lt; components.length &amp;&amp; <span class="keyword">this</span>.broken == <span class="keyword">false</span>) &#123;</div><div class="line">        CarComponent component = components[i];</div><div class="line">        mechanic.visit(component);</div><div class="line">        <span class="keyword">this</span>.broken = component.isBroken();</div><div class="line">        i++;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// if mechanic isn't qualified, we suppose that </span></div><div class="line">    <span class="comment">// he isn't able to see breakdowns and so </span></div><div class="line">    <span class="comment">// he considers the car as no broken </span></div><div class="line">    <span class="comment">// (even if the car is broken)</span></div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBroken</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.broken;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheels</span> <span class="keyword">extends</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span> </span>&#123;</div><div class="line">    mechanic.visit(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> <span class="keyword">extends</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span> </span>&#123;</div><div class="line">    mechanic.visit(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brake</span> <span class="keyword">extends</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span> </span>&#123;</div><div class="line">    mechanic.visit(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个例子中，我们可以看到他们有两个机制(访问者,其实就是免检和不免检)：合格和不合格。暴露于他们的可见对象是汽车。通过其接受方式，决定哪个角色应该适用于被访问者(通过代码<code>mechanic.getName().equals(&quot;qualified&quot;)</code>来判断)。当访问者合格时，Car让他分析所有组件。如果访问者不合格，Car认为其干预是无用的，并且在方法<code>isBroken()</code>中直接返回<code>false</code>(其实就是为了达到一个免检的效果)。<code>Spring在beans配置中实现了访问者设计模式</code>。为了观察，我们可以看看<strong>org.springframework.beans.factory.config.BeanDefinitionVisitor</strong>对象，该对象用于<code>解析bean元数据</code>并将其解析为<code>String</code>（例如：具有作用域或工厂方法名称的XML属性）或<code>Object</code>（例如：构造函数定义中的参数）。已解析的值在与分析的bean关联的<code>BeanDefinition</code>实例中进行判断设置。具体的源码请看<code>BeanDefinitionVisitor</code>的代码片段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Traverse the given BeanDefinition object and the MutablePropertyValues</div><div class="line"> * and ConstructorArgumentValues contained in them.</div><div class="line"> * <span class="doctag">@param</span> beanDefinition the BeanDefinition object to traverse</div><div class="line"> * <span class="doctag">@see</span> #resolveStringValue(String)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitBeanDefinition</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</div><div class="line">  visitParentName(beanDefinition);</div><div class="line">  visitBeanClassName(beanDefinition);</div><div class="line">  visitFactoryBeanName(beanDefinition);</div><div class="line">  visitFactoryMethodName(beanDefinition);</div><div class="line">  visitScope(beanDefinition);</div><div class="line">  visitPropertyValues(beanDefinition.getPropertyValues());</div><div class="line">  ConstructorArgumentValues cas = beanDefinition.</div><div class="line">    getConstructorArgumentValues();</div><div class="line">  visitIndexedArgumentValues(cas.</div><div class="line">    getIndexedArgumentValues());</div><div class="line">  visitGenericArgumentValues(cas.</div><div class="line">    getGenericArgumentValues());</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">visitParentName</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</div><div class="line">  String parentName = beanDefinition.getParentName();</div><div class="line">  <span class="keyword">if</span> (parentName != <span class="keyword">null</span>) &#123;</div><div class="line">    String resolvedName = resolveStringValue(parentName);</div><div class="line">    <span class="keyword">if</span> (!parentName.equals(resolvedName)) &#123;</div><div class="line">      beanDefinition.setParentName(resolvedName);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，他们只是访问方式，没有对访问者做任何补充的控制(在Demo里对car的质检员做了控制)。这里访问包括分析给定<code>BeanDefinition</code>的参数，并将其替换为已解析对象。</p>
<p>在最后一篇关于Spring中设计模式的文章中，我们发现了2种行为模式：<code>用于处理bean工厂的后置处理的命令模式</code>和<code>用于将定义的bean参数转换为面向对象（String或Object的实例）参数的访问者模式</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring框架中的设计模式-五&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-五&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式 (五)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式 (五)&lt;/h2&gt;&lt;p&gt;通过以前的4篇文章，我们看到Spring采用了大量的关于创建和结构方面的设计模式。&lt;/p&gt;
&lt;p&gt;本文将描述属于行为方面的两种设计模式：命令和访问者。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(四)</title>
    <link href="https://muyinchen.github.io/2017/07/28/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20(%E5%9B%9B)/"/>
    <id>https://muyinchen.github.io/2017/07/28/Spring框架中的设计模式 (四)/</id>
    <published>2017-07-28T03:34:36.564Z</published>
    <updated>2017-09-13T06:01:43.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的设计模式-四"><a href="#Spring框架中的设计模式-四" class="headerlink" title="Spring框架中的设计模式 (四)"></a>Spring框架中的设计模式 (四)</h1><p>本文是Spring框架中使用的设计模式第四篇。本文将在此呈现出新的3种模式。</p>
<p>一开始，我们会讨论2种结构模式：适配器和装饰器。在第三部分和最后一部分，我们将讨论单例模式。<br> <a id="more"></a></p>
<h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><p>当我们需要在给定场景下(也就是给定接口)想要不改变自身行为而又想做到一些事情的情况下(就是我给电也就是接口了，你来做事也就是各种电器)，使用<strong>适配器设计模式</strong>(这里再说一点，就相当于我们再一个规章制度的环境下，如何去适应并达到我们期待的效果，放在架构设计这里，可以拿一个php系统和一个Java系统来说，假如两者要互相调用对方的功能，我们可以设计一套对外的api来适配)。这意味着在调用此对象之前，我们将更改使用对象而不改变机制。拿一个现实中的例子进行说明，想象一下你想要用电钻来钻一个洞。要钻一个小洞，你会使用小钻头，钻一个大的需要用大钻头。可以看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    HoleMaker maker = <span class="keyword">new</span> HoleMakerImpl();</div><div class="line">    maker.makeHole(<span class="number">1</span>);</div><div class="line">    maker.makeHole(<span class="number">2</span>);</div><div class="line">    maker.makeHole(<span class="number">30</span>);</div><div class="line">    maker.makeHole(<span class="number">40</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HoleMaker</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHole</span><span class="params">(<span class="keyword">int</span> diameter)</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DrillBit</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSmallHole</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeBigHole</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Two adaptee objects</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigDrillBit</span> <span class="keyword">implements</span> <span class="title">DrillBit</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSmallHole</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// do nothing</span></div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeBigHole</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Big hole is made byt WallBigHoleMaker"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallDrillBit</span> <span class="keyword">implements</span> <span class="title">DrillBit</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSmallHole</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Small hole is made byt WallSmallHoleMaker"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeBigHole</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// do nothing</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Adapter class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drill</span> <span class="keyword">implements</span> <span class="title">HoleMaker</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> DrillBit drillBit;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Drill</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    drillBit = getMakerByDiameter(diameter);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHole</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isSmallDiameter(diameter)) &#123;</div><div class="line">            drillBit.makeSmallHole();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drillBit.makeBigHole();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">private</span> DrillBit <span class="title">getMakerByDiameter</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isSmallDiameter(diameter)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmallDrillBit();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BigDrillBit();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSmallDiameter</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> diameter &lt; <span class="number">10</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Client class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoleMakerImpl</span> <span class="keyword">implements</span> <span class="title">HoleMaker</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHole</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    HoleMaker maker = <span class="keyword">new</span> Drill(diameter);</div><div class="line">    maker.makeHole(diameter);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码的结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Small hole is made byt SmallDrillBit</div><div class="line">Small hole is made byt SmallDrillBit</div><div class="line">Big hole is made byt BigDrillBit</div><div class="line">Big hole is made byt BigDrillBit</div></pre></td></tr></table></figure>
<p>可以看到，hole 是由所匹配的DrillBit对象制成的。如果孔的直径小于10，则使用SmallDrillBit。如果它更大，我们使用BigDrillBit。</p>
<p>思路就是，要打洞，那就要有打洞的工具，这里提供一个电钻接口和钻头。电钻就是用来打洞的，所以，它就一个接口方法即可，接下来定义钻头的接口，无非就是钻头的尺寸标准，然后搞出两个钻头实现类出来，接下来就是把钻头和电钻主机组装起来咯，也就是<code>Drill</code>类，里面有电钻接口+钻头(根据要钻的孔大小来确定用哪个钻头)，其实也就是把几个单一的东西组合起来拥有丰富的功能，最后我们进行封装下:<code>HoleMakerImpl</code>，这样只需要根据尺寸就可以打相应的孔了，对外暴露的接口极为简单，无须管内部逻辑是多么复杂</p>
<p>Spring使用适配器设计模式来处理不同servlet容器中的<strong>加载时编织</strong>(<strong>load-time-weaving</strong>)。在面向切面编程（AOP）中使用<strong>load-time-weaving</strong>，一种方式是在类加载期间将AspectJ的方面注入字节码。另一种方式是对类进行编译时注入或对已编译的类进行静态注入。</p>
<p>我们可以从关于Spring和JBoss的处理接口这里找到一个很好的例子，它包含在<strong>org.springframework.instrument.classloading.jboss</strong>包中。我们检索<code>JBossLoadTimeWeaver类</code>负责<code>JBoss容器</code>的编织管理。然而，类加载器对于<code>JBoss 6</code>（使用<code>JBossMCAdapter</code>实例）和<code>JBoss 7/8</code>（使用<code>JBossModulesAdapter</code>实例）是不同的。根据<code>JBoss</code>版本，我们在<code>JBossLoadTimeWeaver</code>构造函数中初始化相应的适配器（与我们示例中的<code>Drill</code>的构造函数完全相同）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">JBossLoadTimeWeaver</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> JBossClassLoaderAdapter adapter;</div><div class="line"> </div><div class="line">  Assert.notNull(classLoader, <span class="string">"ClassLoader must not be null"</span>);</div><div class="line">  <span class="keyword">if</span> (classLoader.getClass().getName().startsWith(<span class="string">"org.jboss.modules"</span>)) &#123;</div><div class="line">    <span class="comment">// JBoss AS 7 or WildFly 8</span></div><div class="line">    <span class="keyword">this</span>.adapter = <span class="keyword">new</span> JBossModulesAdapter(classLoader);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// JBoss AS 6</span></div><div class="line">    <span class="keyword">this</span>.adapter = <span class="keyword">new</span> JBossMCAdapter(classLoader);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而且，此适配器所创建的实例用于根据运行的servlet容器版本进行编织操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.adapter.addTransformer(transformer);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getInstrumentableClassLoader</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.adapter.getInstrumentableClassLoader();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>总结：适配器模式，其实就是我们用第一人称的视角去看世界，我想拓展我自己的技能的时候，就实行拿来主义，就好比这里的我是电钻的视角，那么我想拥有钻大孔或者小孔的功能，那就把钻头拿到手组合起来就好。</p>
<p>和装饰模式的区别：装饰模式属于第三人称的视角，也就是上帝视角！我只需要把几个功能性的组件给拿到手，进行组合一下，实现一个更加<code>niubility</code>的功能这里提前说下，这样看下面的内容能好理解些。下面解释装饰模式</p>
</blockquote>
<h2 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h2><p>这里描述的第二种设计模式看起来类似于适配器。它是<strong>装饰模式</strong>。这种设计模式的主要作用是为给定的对象添加补充角色。举个现实的例子，就拿咖啡来讲。通常越黑越苦，你可以添加（<code>装饰</code>）糖和牛奶，使咖啡不那么苦。咖啡在这里被装饰的对象，糖与牛奶是用来装饰的。可以参考下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorSample</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Coffee sugarMilkCoffee=<span class="keyword">new</span> MilkDecorator(<span class="keyword">new</span> SugarDecorator(<span class="keyword">new</span> BlackCoffee()));</div><div class="line">    assertEquals(sugarMilkCoffee.getPrice(), <span class="number">6</span>d, <span class="number">0</span>d);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// decorated</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span></span>&#123;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> candied=<span class="number">0</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">double</span> price=<span class="number">2</span>d;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.price;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.price+=price;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.price;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// abstract decorator</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeDecorator</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</div><div class="line">  <span class="keyword">protected</span> Coffee coffee;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CoffeeDecorator</span><span class="params">(Coffee coffee)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.coffee=coffee;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.coffee.getPrice();</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.coffee.makeMoreCandied();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// concrete decorators</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MilkDecorator</span> <span class="keyword">extends</span> <span class="title">CoffeeDecorator</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MilkDecorator</span><span class="params">(Coffee coffee)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(coffee);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()+<span class="number">1</span>d;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.makeMoreCandied()+<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SugarDecorator</span> <span class="keyword">extends</span> <span class="title">CoffeeDecorator</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SugarDecorator</span><span class="params">(Coffee coffee)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(coffee);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()+<span class="number">3</span>d;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.makeMoreCandied()+<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个简单的装饰器的小例子是基于对父方法的调用，从而改变最后的属性（我们这里是指价格和加糖多少）。在Spring中，我们在处理与Spring管理缓存同步事务的相关类中可以 发现装饰器设计模式的例子。这个类是<strong>org.springframework.cache.transaction.TransactionAwareCacheDecorator</strong>。</p>
<p>这个类的哪些特性证明它是<strong>org.springframework.cache.Cache</strong>对象的装饰器？首先，与我们的咖啡示例一样，<code>TransactionAwareCacheDecorator</code>的构造函数接收参数装饰对象（Cache）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Cache targetCache;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Create a new TransactionAwareCache for the given target Cache.</div><div class="line"> * <span class="doctag">@param</span> targetCache the target Cache to decorate</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TransactionAwareCacheDecorator</span><span class="params">(Cache targetCache)</span> </span>&#123;</div><div class="line">  Assert.notNull(targetCache, <span class="string">"Target Cache must not be null"</span>);</div><div class="line">  <span class="keyword">this</span>.targetCache = targetCache;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，通过这个对象，我们可以得到一个新的行为:为给定的目标缓存创建一个新的TransactionAwareCache。这个我们可以在<code>TransactionAwareCacheDecorator</code>的注释中可以阅读到，其主要目的是提供缓存和Spring事务之间的同步级别。这是通过<strong>org.springframework.transaction.support.TransactionSynchronizationManager</strong>中的两种缓存方法实现的：<code>put</code> 和 <code>evict</code>(其实最终不还是通过<code>targetCache</code>来实现的么)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">final</span> Object key, <span class="keyword">final</span> Object value)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</div><div class="line">    TransactionSynchronizationManager.registerSynchronization(</div><div class="line">      <span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</div><div class="line">          targetCache.put(key, value);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.targetCache.put(key, value);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evict</span><span class="params">(<span class="keyword">final</span> Object key)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</div><div class="line">          TransactionSynchronizationManager.registerSynchronization(</div><div class="line">            <span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</div><div class="line">                targetCache.evict(key);</div><div class="line">              &#125;</div><div class="line">          &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.targetCache.evict(key);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种模式看起来类似于适配器，对吧？但是，它们还是有区别的。我们可以看到，适配器将对象适配到运行时环境，即。如果我们在JBoss 6中运行，我们使用与JBoss 7不同的类加载器。Decorator每次使用相同的主对象（Cache）工作，并且仅向其添加新行为（与本例中的Spring事务同步），另外，可以通过我在解读这个设计模式之前的说法来区分二者。</p>
<p>我们再以springboot的初始化来举个例子的，这块后面会进行仔细的源码分析的，这里就仅仅用设计模式来说下的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Event published as early as conceivably possible as soon as a &#123;<span class="doctag">@link</span> SpringApplication&#125;</div><div class="line"> * has been started - before the &#123;<span class="doctag">@link</span> Environment&#125; or &#123;<span class="doctag">@link</span> ApplicationContext&#125; is</div><div class="line"> * available, but after the &#123;<span class="doctag">@link</span> ApplicationListener&#125;s have been registered. The source</div><div class="line"> * of the event is the &#123;<span class="doctag">@link</span> SpringApplication&#125; itself, but beware of using its internal</div><div class="line"> * state too much at this early stage since it might be modified later in the lifecycle.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Dave Syer</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationStartedEvent</span> <span class="keyword">extends</span> <span class="title">SpringApplicationEvent</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new &#123;<span class="doctag">@link</span> ApplicationStartedEvent&#125; instance.</div><div class="line">	 * <span class="doctag">@param</span> application the current application</div><div class="line">	 * <span class="doctag">@param</span> args the arguments the application is running with</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ApplicationStartedEvent</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(application, args);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从注释可以看出 <code>ApplicationListener</code>要先行到位的，然后就是started的时候<code>Event published</code>走起，接着就是<code>Environment</code>配置好，<code>ApplicationContext</code>进行初始化完毕，那我们去看<code>ApplicationListener</code>的源码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Listener for the &#123;<span class="doctag">@link</span> SpringApplication&#125; &#123;<span class="doctag">@code</span> run&#125; method.</div><div class="line"> * &#123;<span class="doctag">@link</span> SpringApplicationRunListener&#125;s are loaded via the &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125;</div><div class="line"> * and should declare a public constructor that accepts a &#123;<span class="doctag">@link</span> SpringApplication&#125;</div><div class="line"> * instance and a &#123;<span class="doctag">@code</span> String[]&#125; of arguments. A new</div><div class="line"> * &#123;<span class="doctag">@link</span> SpringApplicationRunListener&#125; instance will be created for each run.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Phillip Webb</div><div class="line"> * <span class="doctag">@author</span> Dave Syer</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called immediately when the run method has first started. Can be used for very</div><div class="line">	 * early initialization.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called once the environment has been prepared, but before the</div><div class="line">	 * &#123;<span class="doctag">@link</span> ApplicationContext&#125; has been created.</div><div class="line">	 * <span class="doctag">@param</span> environment the environment</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called once the &#123;<span class="doctag">@link</span> ApplicationContext&#125; has been created and prepared, but</div><div class="line">	 * before sources have been loaded.</div><div class="line">	 * <span class="doctag">@param</span> context the application context</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called once the application context has been loaded but before it has been</div><div class="line">	 * refreshed.</div><div class="line">	 * <span class="doctag">@param</span> context the application context</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called immediately before the run method finishes.</div><div class="line">	 * <span class="doctag">@param</span> context the application context or null if a failure occurred before the</div><div class="line">	 * context was created</div><div class="line">	 * <span class="doctag">@param</span> exception any run exception or null if run completed successfully.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看类注释我们可以知道，需要实现此接口内所定义的这几个方法，ok，来看个实现类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@link</span> SpringApplicationRunListener&#125; to publish &#123;<span class="doctag">@link</span> SpringApplicationEvent&#125;s.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * Uses an internal &#123;<span class="doctag">@link</span> ApplicationEventMulticaster&#125; for the events that are fired</div><div class="line"> * before the context is actually refreshed.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Phillip Webb</div><div class="line"> * <span class="doctag">@author</span> Stephane Nicoll</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventPublishingRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span>, <span class="title">Ordered</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> SpringApplication application;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String[] args;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ApplicationEventMulticaster initialMulticaster;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EventPublishingRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.application = application;</div><div class="line">		<span class="keyword">this</span>.args = args;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</div><div class="line">		<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : application.getListeners()) &#123;</div><div class="line">			<span class="keyword">this</span>.initialMulticaster.addApplicationListener(listener);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster</div><div class="line">				.multicastEvent(<span class="keyword">new</span> ApplicationStartedEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster.multicastEvent(<span class="keyword">new</span> ApplicationEnvironmentPreparedEvent(</div><div class="line">				<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, environment));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : <span class="keyword">this</span>.application.getListeners()) &#123;</div><div class="line">			<span class="keyword">if</span> (listener <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</div><div class="line">				((ApplicationContextAware) listener).setApplicationContext(context);</div><div class="line">			&#125;</div><div class="line">			context.addApplicationListener(listener);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster.multicastEvent(</div><div class="line">				<span class="keyword">new</span> ApplicationPreparedEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, context));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</div><div class="line">		<span class="comment">// Listeners have been registered to the application context so we should</span></div><div class="line">		<span class="comment">// use it at this point</span></div><div class="line">		context.publishEvent(getFinishedEvent(context, exception));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> SpringApplicationEvent <span class="title">getFinishedEvent</span><span class="params">(</span></span></div><div class="line">			ConfigurableApplicationContext context, Throwable exception) &#123;</div><div class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ApplicationFailedEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, context,</div><div class="line">					exception);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApplicationReadyEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, context);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上可以看出，<code>EventPublishingRunListener</code>里对接口功能的实现，主要是通过<code>SpringApplication</code> <code>ApplicationEventMulticaster</code> 来实现的，自己不干活，挂个虚名，从上帝模式的角度来看，这不就是应用了装饰模式来实现的么。</p>
<p>更多源码解析请关注后续的本人对Spring框架全面的重点部分解析系列博文</p>
<h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p><strong>单例</strong>，我们最常用的设计模式。正如我们在很多Spring Framework中关于单例和原型bean的文章(网上太多了)中已经看到过的，单例是几个bean作用域中的中的一个。此作用域在每个应用程序上下文中仅创建一个给定bean的实例。与signleton设计模式有所区别的是，Spring将实例的数量限制的作用域在整个应用程序的上下文。而Singleton设计模式在Java应用程序中是将这些实例的数量限制在给定类加载器管理的整个空间中。这意味着我们可以为两个Spring的上下文(同一份配置文件起两个容器，也就是不同端口的容器实例)使用相同的类加载器，并检索两个单例作用域的bean。</p>
<p>在看Spring单例应用之前，让我们来看一个Java的单例例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    President president1 = (President) SingletonsHolder.PRESIDENT.getHoldedObject();</div><div class="line">    President president2 = (President) SingletonsHolder.PRESIDENT.getHoldedObject();</div><div class="line">    assertTrue(<span class="string">"Both references of President should point to the same object"</span>, president1 == president2);</div><div class="line">    System.out.println(<span class="string">"president1 = "</span>+president1+<span class="string">" and president2 = "</span>+president2);</div><div class="line">    <span class="comment">// sample output</span></div><div class="line">    <span class="comment">// president1 = com.migo.test.President@17414c8 and president2 = com.migo.test.President@17414c8</span></div><div class="line"> </div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">enum</span> SingletonsHolder &#123;</div><div class="line">   </div><div class="line">  PRESIDENT(<span class="keyword">new</span> President());</div><div class="line">   </div><div class="line">  <span class="keyword">private</span> Object holdedObject;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonsHolder</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">          <span class="keyword">this</span>.holdedObject = o;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getHoldedObject</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.holdedObject;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">President</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试例子证明，只有一个由SingletonsHolder所持有的President实例。在Spring中，我们可以在bean工厂中找到单例应用的影子（例如在<strong>org.springframework.beans.factory.config.AbstractFactoryBean中</strong>）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Expose the singleton instance or create a new prototype instance.</div><div class="line"> * <span class="doctag">@see</span> #createInstance()</div><div class="line"> * <span class="doctag">@see</span> #getEarlySingletonInterfaces()</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isSingleton()) &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.initialized ? <span class="keyword">this</span>.singletonInstance : getEarlySingletonInstance());</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> createInstance();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看到，当需求对象被视为单例时，它只被初始化一次，并且在每次使用同一个bean类的实例后返回。我们可以在给定的例子中看到，类似于我们以前看到的President情况。将测试bean定义为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.migo.data.ShoppingCart"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>测试用例如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonSpringTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// retreive two different contexts</span></div><div class="line">    ApplicationContext firstContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"applicationContext-test.xml"</span>);</div><div class="line">    ApplicationContext secondContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"applicationContext-test.xml"</span>);</div><div class="line">     </div><div class="line">    <span class="comment">// prove that both contexts are loaded by the same class loader</span></div><div class="line">    assertTrue(<span class="string">"Class loaders for both contexts should be the same"</span>, </div><div class="line">      firstContext.getClassLoader() == secondContext.getClassLoader());</div><div class="line">    <span class="comment">// compare the objects from different contexts</span></div><div class="line">    ShoppingCart firstShoppingCart = (ShoppingCart) firstContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    ShoppingCart secondShoppingCart = (ShoppingCart) secondContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertFalse(<span class="string">"ShoppingCart instances got from different application context shouldn't be the same"</span>, </div><div class="line">      firstShoppingCart == secondShoppingCart);</div><div class="line">     </div><div class="line">    <span class="comment">// compare the objects from the same context</span></div><div class="line">    ShoppingCart firstShoppingCartBis = (ShoppingCart) firstContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertTrue(<span class="string">"ShoppingCart instances got from the same application context should be the same"</span>, </div><div class="line">      firstShoppingCart == firstShoppingCartBis);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试案例显示了Spring单例模式与纯粹的单例设计模式的主要区别。尽管使用相同的类加载器来加载两个应用程序上下文，但是ShoppingCart的实例是不一样的。但是，当我们比较两次创建并属于相同上下文的实例时，我们认为它们是相等的。</p>
<p>也正因为有了单例，Spring可以控制在每个应用程序上下文中只有一个这样指定的bean的实例可用。因为适配器，Spring可以决定使用由谁来处理<code>JBoss servlet</code>容器中的加载时编织,也可以实现<code>ConfigurableListableBeanFactory</code>的相应实例。第三种设计模式，装饰器，用于向Cache对象添加同步功能，还有Springboot的容器初始化。</p>
<p>其实对于适配器和装饰者确实有太多的相似的地方，一个是运行时选择，一个是加料组合产生新的化学效应，还有从看待事物的角度不同得到不同的行为，适配适配，更注重面向接口的实现，而内部又根据不同情况调用面向一套接口的多套实现的实例的相应方法来实现所要实现的具体功能，装饰者更注重添油加醋，通过组合一些其他对象实例来让自己的功能实现的更加华丽一些(达到1+1&gt;2的这种效果)。一家之言，有更好的理解可以联系我。</p>
<p>有更多疑问请加qq群523409180 讨论的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring框架中的设计模式-四&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-四&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式 (四)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式 (四)&lt;/h1&gt;&lt;p&gt;本文是Spring框架中使用的设计模式第四篇。本文将在此呈现出新的3种模式。&lt;/p&gt;
&lt;p&gt;一开始，我们会讨论2种结构模式：适配器和装饰器。在第三部分和最后一部分，我们将讨论单例模式。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(三)</title>
    <link href="https://muyinchen.github.io/2017/07/28/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%89)/"/>
    <id>https://muyinchen.github.io/2017/07/28/Spring框架中的设计模式(三)/</id>
    <published>2017-07-27T17:48:40.528Z</published>
    <updated>2017-09-13T06:01:59.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的设计模式-三"><a href="#Spring框架中的设计模式-三" class="headerlink" title="Spring框架中的设计模式(三)"></a>Spring框架中的设计模式(三)</h1><blockquote>
<p>在之前的两篇文章中，我们看到了一些在Spring框架中实现的设计模式。这一次我们会发现这个流行框架使用的3种新模式。<br><a id="more"></a><br>本文将从描述两个创意设计模式开始：原型和对象池。最后我们将重点关注行为模式—&gt;观察者。</p>
</blockquote>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>这篇文章的第一个设计模式是<strong>原型</strong>。可以通过官方文档查找有关Spring作用域中的bean作用域的文章中介绍了类似的概念(<strong>prototype</strong>)。原型设计模式与有用相同名称的(<strong>prototype</strong>)作用域有点相似。此设计模式允许通过复制已存在的对象来创建一个对象的实例。副本应该是<strong>真正的副本</strong>。这意味着新对象的所有属性应与复制对象的属性相同。如果不清楚，比一个简单的<code>JUnit</code>案例更好的说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Robot firstRobot = <span class="keyword">new</span> Robot(<span class="string">"Droid#1"</span>);</div><div class="line">    Robot secondRobot = (Robot) firstRobot.clone();</div><div class="line">    assertTrue(<span class="string">"Cloned robot's instance can't be the same as the"</span></div><div class="line">      +<span class="string">" source robot instance"</span>, </div><div class="line">      firstRobot != secondRobot);</div><div class="line">    assertTrue(<span class="string">"Cloned robot's name should be '"</span>+firstRobot.getName()+<span class="string">"'"</span></div><div class="line">      +<span class="string">" but was '"</span>+secondRobot.getName()+<span class="string">"'"</span>, </div><div class="line">      secondRobot.getName().equals(firstRobot.getName()));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Robot</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.clone();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>Spring</code>中，在<strong>org.springframework.beans.factory.support.AbstractBeanFactory</strong>中使用一种特定的原型设计模式，它将初始化<code>bean原型作用域</code>。新对象基于配置文件中的bean定义。我们可以看到，在给定的例子中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.migo.data.ShoppingCart"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"applicationContext-test.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringPrototypeTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> BeanFactory beanFactory;</div><div class="line">   </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    ShoppingCart cart1 = (ShoppingCart) beanFactory.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertTrue(<span class="string">"Id of cart1 should be 9 but was "</span>+cart1.getId(), </div><div class="line">      cart1.getId() == <span class="number">9</span>);</div><div class="line">    cart1.setId(<span class="number">100</span>);</div><div class="line">    ShoppingCart cart2 = (ShoppingCart) beanFactory.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertTrue(<span class="string">"Id of cart2 should be 9 but was "</span>+cart2.getId(), </div><div class="line">      cart2.getId() == <span class="number">9</span>);</div><div class="line">    assertTrue(<span class="string">"Id of second cart ("</span>+cart2.getId()+<span class="string">") shouldn't be the same as the first one: "</span>+cart1.getId(), </div><div class="line">      cart1.getId() != cart2.getId());</div><div class="line">    cart2.setId(cart1.getId());</div><div class="line">    assertTrue(<span class="string">"Now (after cart2.setId(cart1.getId())), the id of second cart ("</span>+cart2.getId()+<span class="string">") should be the same as the first one: "</span></div><div class="line">      +cart1.getId(), cart1.getId() == cart2.getId());</div><div class="line">    assertTrue(<span class="string">"Both instance shouldn't be the same"</span>, cart1 != cart2);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从前面的例子可以看出，<code>ShoppingCart</code>实例是直接从bean定义创建的。最初，<code>cart1</code>和<code>cart2</code>对象的<code>id</code>值为<code>9</code>.它在测试结束时被修改，以证明两个引用都属于两个不同的对象。</p>
<h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><p><code>Spring</code>中使用的另一个模型是<strong>对象池设计模式</strong>。其主要目的在于在一个池中保存特定数量的对象，并根据需要重新使用。通过它，我们可以改善我们想要使用<code>巨型对象</code>的响应时间。<code>巨型</code>意味着这些对象的构造需要很多时间（例如：持有数据库连接的对象），最好重用已经存在的和未获取的对象，而不是创建新对象。</p>
<p>Spring还使用线程池来管理其调度部分。一些示例位于<strong>org.springframework.scheduling.concurrent中</strong>。我们检索数据库（<code>Spring JDBC</code>）项目中的对象池的想法。数据库连接池不是由<code>Spring</code>直接实现的，而是适用于<code>Spring</code>工作方式的项目，如<code>C3P0</code>或<code>Jakarta Commons DBCP</code>连接池。</p>
<h2 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h2><p>这里呈现的最后一个设计模式是<strong>观察者</strong>。当一个或几个课程正在等待具体事件时可以使用它。观察者模式由一个科目和观察员名单组成。一个很好的例子就是<code>GUI界面</code>，其中点击按钮（按钮是主题）会引起听众（观察者）启动的一些操作(再说的直白点就是电影院一场电影这个<code>subject</code>,需要<code>观众</code>(也就是观察者咯),电影产生的一些画面产生的事件，比如恐怖 电影给男人女人带来的不同的感官的感受，传播到观察者也就是观众的眼里所带来的不一样的反应，这个中间一般会添加一个<code>事件传播者</code>，在后面解释<code>Spring</code>的例子的时候会说到)，例如：打开一个新页面这个动作。可以参考下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Observer pageOpener = <span class="keyword">new</span> PageOpener();</div><div class="line">    Observer register = <span class="keyword">new</span> Register();</div><div class="line">    Button btn = <span class="keyword">new</span> Button();</div><div class="line">    btn.addListener(pageOpener);</div><div class="line">    btn.addListener(register);</div><div class="line">    btn.clickOn();</div><div class="line">    assertTrue(<span class="string">"Button should be clicked but it wasn't"</span>, </div><div class="line">      btn.wasClicked());</div><div class="line">    assertTrue(<span class="string">"Page opener should be informed about click but it wasn't"</span>, </div><div class="line">      pageOpener.wasInformed());</div><div class="line">    assertTrue(<span class="string">"Register should be informed about click but it wasn't"</span>, </div><div class="line">      register.wasInformed());</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> clicked;</div><div class="line">  <span class="keyword">private</span> List&lt;observer&gt; listeners;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;observer&gt; <span class="title">getListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.listeners == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.listeners = <span class="keyword">new</span> ArrayList&lt;observer&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listeners;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">    getListeners().add(observer);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wasClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.clicked;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clickOn</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.clicked = <span class="keyword">true</span>;</div><div class="line">    informAll();</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">informAll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Observer observer : getListeners()) &#123;</div><div class="line">      observer.informAboutEvent();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> informed;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">informAboutEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.informed = <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wasInformed</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.informed;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageOpener</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">informAboutEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Preparing download of new page"</span>);</div><div class="line">    <span class="keyword">super</span>.informAboutEvent();</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">informAboutEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Adding the action to register"</span>);</div><div class="line">    <span class="keyword">super</span>.informAboutEvent();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，关于我们的<code>Button</code>实例点击的事件被发送到所有的观察者对象。从这些对象开始下载页面内容，第二个将在事件的信息保存在注册表中。在<code>Spring</code>中，观察者设计模式用于将与应用程序上下文相关的事件传输到<strong>org.springframework.context.ApplicationListener的实现</strong>。要了解它们的实现方法，我们来看一下<code>AbstractApplicationContext</code>类(老版本的代码，新版本的请自行对照)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></div><div class="line">  <span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span>, <span class="title">DisposableBean</span> &#123;</div><div class="line">  <span class="comment">/** Statically specified listeners */</span></div><div class="line">  <span class="keyword">private</span> Set&lt;applicationlistener&lt;?&gt;&gt; applicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;applicationlistener&lt;?&gt;&gt;();</div><div class="line">   </div><div class="line">  <span class="comment">// some other fields and methods</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.applicationEventMulticaster != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.applicationEventMulticaster.addApplicationListener(listener);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;<span class="comment">//新版本这里直接咔嚓掉，上面的applicationEventMulticaster一旦为空，就会报错的</span></div><div class="line">      <span class="keyword">this</span>.applicationListeners.add(listener);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Return the list of statically specified ApplicationListeners.</div><div class="line">    */</div><div class="line">  <span class="keyword">public</span> Collection&lt;applicationlistener&lt;?&gt;&gt; getApplicationListeners() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.applicationListeners;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add beans that implement ApplicationListener as listeners.</div><div class="line">    * Doesn't affect other listeners, which can be added without being beans.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Register statically specified listeners first.</span></div><div class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</div><div class="line">      getApplicationEventMulticaster().addApplicationListener(listener);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></div><div class="line">    <span class="comment">// uninitialized to let post-processors apply to them!</span></div><div class="line">    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">for</span> (String lisName : listenerBeanNames) &#123;</div><div class="line">      getApplicationEventMulticaster().addApplicationListenerBean(lisName);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在提供的代码中，监听器在内部添加到应用程序上下文类中，并且在<code>registerListeners()</code>方法之后，它们被注册到由接口<strong>org.springframework.context.event.ApplicationEventMulticaster</strong>表示的适当的事件多路广播器(因为有很多listeners)。<code>EventMulticaster</code>负责管理不同的<code>listener</code>和向他们发布事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleApplicationEventMulticaster</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationEventMulticaster</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Executor taskExecutor;</div><div class="line">    <span class="keyword">private</span> ErrorHandler errorHandler;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleApplicationEventMulticaster</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleApplicationEventMulticaster</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setBeanFactory(beanFactory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskExecutor</span><span class="params">(Executor taskExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskExecutor = taskExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Executor <span class="title">getTaskExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.taskExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorHandler</span><span class="params">(ErrorHandler errorHandler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.errorHandler = errorHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> ErrorHandler <span class="title">getErrorHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.errorHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.multicastEvent(event, <span class="keyword">this</span>.resolveDefaultEventType(event));</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//发布事件:通过池执行任务的方式来做并发处理，这样就把之前的对象池模式给利用上了</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, ResolvableType eventType)</span> </span>&#123;</div><div class="line">        ResolvableType type = eventType != <span class="keyword">null</span>?eventType:<span class="keyword">this</span>.resolveDefaultEventType(event);</div><div class="line">        Iterator var4 = <span class="keyword">this</span>.getApplicationListeners(event, type).iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</div><div class="line">            <span class="keyword">final</span> ApplicationListener&lt;?&gt; listener = (ApplicationListener)var4.next();</div><div class="line">            Executor executor = <span class="keyword">this</span>.getTaskExecutor();</div><div class="line">            <span class="keyword">if</span>(executor != <span class="keyword">null</span>) &#123;</div><div class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        SimpleApplicationEventMulticaster.<span class="keyword">this</span>.invokeListener(listener, event);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.invokeListener(listener, event);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这次我们讲3种设计模式:用于在同一个调用作用域内创建<code>bean的原型</code>，避免重新创建巨型对象的对象池，以及将应用程序的上下文事件分派给适当的监听器的观察者。</p>
<p>有更多疑问请加qq群523409180 讨论的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring框架中的设计模式-三&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-三&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式(三)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式(三)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在之前的两篇文章中，我们看到了一些在Spring框架中实现的设计模式。这一次我们会发现这个流行框架使用的3种新模式。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(二)</title>
    <link href="https://muyinchen.github.io/2017/07/21/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)/"/>
    <id>https://muyinchen.github.io/2017/07/21/Spring框架中的设计模式(二)/</id>
    <published>2017-07-21T09:12:33.397Z</published>
    <updated>2017-07-27T09:23:43.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的设计模式-二"><a href="#Spring框架中的设计模式-二" class="headerlink" title="Spring框架中的设计模式(二)"></a>Spring框架中的设计模式(二)</h1><p>在上一篇中我们在Spring中所谈到的设计模式涉及到了创建模式三剑客和1个行为模式(解释器模式)。这次我们会将眼光更多地关注在具有结构性和行为性的设计模式上。</p>
<p>在这篇文章中，我们将看到每个类型的两种模式。首先将关注类型是的结构设计模式。它将包含代理和复合。下一个将介绍行为模式：策略和模板方法。<br> <a id="more"></a></p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>面向对象编程（OOP）可能是编程中最流行的概念。然而，Spring引入了另一种编码规范，<strong>面向切面编程</strong>（AOP）。为了简化定义，AOP是面向系统特定点的一种编程，如：异常抛出，特定类别方法的执行等.AOP允许在执行这些特定点之前或之后执行补充动作。如何实现这种操作？它可以通过监听器(listeners)进行。但在这种情况下，我们应该在只要可能存在调用的地方都需要定义监听器来进行监听（比如在一个方法的开始的地方）。这就是为什么Spring不采用这个idea。相反，Spring实现了一种能够通过额外的方法调用完成任务的设计模式 - <strong>代理设计模式</strong>。</p>
<p>代理就像对象的镜像一样。也正因为如此，代理对象不仅可以覆盖真实对象，还可以扩展其功能。因此，对于只能在屏幕上打印一些文本的对象，我们可以添加另一个对象来过滤显示单词。可以通过代理来定义第二个对象的调用。代理是封装真实对象的对象。例如，如果您尝试调用Waiter bean，那么您将调用该Bean的代理，其行为方式完全相同。</p>
<p>代理设计模式的一个很好的例子是<strong>org.springframework.aop.framework.ProxyFactoryBean</strong>。该工厂根据Spring bean构建AOP代理。该类实现了定义<strong>getObject()</strong>方法的<code>FactoryBean</code>接口。此方法用于将需求<code>Bean</code>的实例返回给<code>bean factory</code>。在这种情况下，它不是返回的实例，而是<code>AOP代理</code>。在执行代理对象的方法之前，可以通过调用补充方法来进一步“修饰”代理对象(其实所谓的静态代理不过是在装饰模式上加了个要不要你来干动作行为而已，而不是装饰模式什么也不做就加了件衣服，其他还得由你来全权完成)。</p>
<p><code>ProxyFactory</code>的一个例子是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxyAop</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    ProxyFactory factory = <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> House());</div><div class="line">    factory.addInterface(Construction.class);</div><div class="line">    factory.addAdvice(<span class="keyword">new</span> BeforeConstructAdvice());</div><div class="line">    factory.setExposeProxy(<span class="keyword">true</span>);</div><div class="line"> </div><div class="line">    Construction construction = (Construction) factory.getProxy();</div><div class="line">    construction.construct();</div><div class="line">    assertTrue(<span class="string">"Construction is illegal. "</span></div><div class="line">      + <span class="string">"Supervisor didn't give a permission to build "</span></div><div class="line">      + <span class="string">"the house"</span>, construction.isPermitted());</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Construction</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givePermission</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPermitted</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">implements</span> <span class="title">Construction</span></span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> permitted = <span class="keyword">false</span>;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPermitted</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.permitted;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"I'm constructing a house"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givePermission</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Permission is given to construct a simple house"</span>);</div><div class="line">    <span class="keyword">this</span>.permitted = <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeforeConstructAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] arguments, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">    <span class="keyword">if</span> (method.getName().equals(<span class="string">"construct"</span>)) &#123;</div><div class="line">      ((Construction) target).givePermission();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试应该通过，因为我们不直接在House实例上操作，而是代理它。代理调用第一个<code>BeforeConstructAdvice</code>的<code>before</code>方法（指向在执行目标方法之前执行，在我们的例子中为<code>construct()</code>）通过它，给出了一个“权限”来构造对象的字段（house）。代理层提供了一个额外新功能，因为它可以简单地分配给另一个对象。要做到这一点，我们只能在before方法之前修改过滤器。</p>
<h2 id="复合模式"><a href="#复合模式" class="headerlink" title="复合模式"></a>复合模式</h2><p>另一种结构模式是<strong>复合模式</strong>。在关于<a href="https://muyinchen.github.io/2017/07/20/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80">Spring中设计模式</a>)的第一篇文章中，我们使用构建器来构造复杂对象。另一种实现方法是使用复合模式。这种模式是基于具有共同行为的多个对象的存在，用于构建更大的对象。较大的对象仍然具有与最小对象相同的特征。那么用它来定义相同的行为。</p>
<p>复合对象的非Spring示例可以是一个写入HTML的文本对象，由包含span或em标签的段落组成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    TextTagComposite composite = <span class="keyword">new</span> PTag();</div><div class="line">    composite.addTag(<span class="keyword">new</span> SpanTag());</div><div class="line">    composite.addTag(<span class="keyword">new</span> EmTag());</div><div class="line">     </div><div class="line">    <span class="comment">// sample client code</span></div><div class="line">    composite.startWrite();</div><div class="line">    <span class="keyword">for</span> (TextTag leaf : composite.getTags()) &#123;</div><div class="line">      leaf.startWrite();</div><div class="line">      leaf.endWrite();</div><div class="line">    &#125;</div><div class="line">    composite.endWrite();</div><div class="line">    assertTrue(<span class="string">"Composite should contain 2 tags but it contains "</span>+composite.getTags().size(), composite.getTags().size() == <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TextTag</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWrite</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endWrite</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TextTagComposite</span> <span class="keyword">extends</span> <span class="title">TextTag</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;TextTag&gt; <span class="title">getTags</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTag</span><span class="params">(TextTag tag)</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PTag</span> <span class="keyword">implements</span> <span class="title">TextTagComposite</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> List&lt;TextTag&gt; tags = <span class="keyword">new</span> ArrayList&lt;TextTag&gt;();</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;p&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;/p&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;TextTag&gt; <span class="title">getTags</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> tags;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTag</span><span class="params">(TextTag tag)</span> </span>&#123;</div><div class="line">    tags.add(tag);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpanTag</span> <span class="keyword">implements</span> <span class="title">TextTag</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;span&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;/span&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmTag</span> <span class="keyword">implements</span> <span class="title">TextTag</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;em&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;/em&gt;"</span>);</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，可以看到一个复合对象。我们可以区分复合与非复合对象，因为第一个可以容纳一个或多个非复合对象（<code>PTag</code>类中的<code>private List tags</code>字段）。非复合对象称为叶子。<code>TextTag</code>接口被称为组件，因为它为两个对象类型提供了共同的行为规范(有点像<code>Linux</code>文件管理系统的有共同点的文件放在一个文件夹下进行管理，其实就是节点管理)。</p>
<p>在<code>Spring</code>世界中，我们检索复合对象的概念是<strong>org.springframework.beans.BeanMetadataElement</strong>接口，用于配置<code>bean</code>对象。它是所有继承对象的基本界面。现在，在一方面，我们有一个叶子，由<strong>org.springframework.beans.factory.parsing.BeanComponentDefinition</strong>表示，另一边是复合<strong>org.springframework.beans.factory.parsing.CompositeComponentDefinition</strong>。<code>CompositeComponentDefinition</code>类似于组件，因为它包含<strong>addNestedComponent（ComponentDefinition component）</strong>方法，它允许将叶添加到私有final列表中<code>nestedComponents</code>。您可以看到，由于此列表，<code>BeanComponentDefinition</code>和<code>CompositeComponentDefinition</code>的组件是<strong>org.springframework.beans.factory.parsing.ComponentDefinition</strong>。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170721_175052.png" alt=""></p>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>本文描述的第三个概念是<strong>策略设计模式</strong>。策略定义了通过不同方式完成相同事情的几个对象。完成任务的方式取决于采用的策略。举个例子说明，我们可以去一个国家。我们可以乘公共汽车，飞机，船甚至汽车去那里。所有这些方法将把我们运送到目的地国家。但是，我们将通过检查我们的银行帐户来选择最适应的方式。如果我们有很多钱，我们将采取最快的方式（可能是私人飞行）。如果我们没有足够的话，我们会采取最慢的（公车，汽车）。该银行账户作为确定适应策略的因素。</p>
<p>Spring在<strong>org.springframework.web.servlet.mvc.multiaction.MethodNameResolver</strong>类(过时，但不影响拿来研究)中使用策略设计模式。它是<code>MultiActionController</code>(同样过时)的参数化实现。在开始解释策略之前，我们需要了解MultiActionController的实用性。这个类允许同一个类处理几种类型的请求。作为Spring中的每个控制器，MultiActionController执行方法来响应提供的请求。策略用于检测应使用哪种方法。解析过程在MethodNameResolver实现中实现，例如在同一个包中的<strong>ParameterMethodNameResolver中</strong>。方法可以通过多个条件解决：属性映射，HTTP请求参数或URL路径。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHandlerMethodName</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> NoSuchRequestHandlingMethodException </span>&#123;</div><div class="line">  String methodName = <span class="keyword">null</span>;</div><div class="line"> </div><div class="line">  <span class="comment">// Check parameter names where the very existence of each parameter</span></div><div class="line">  <span class="comment">// means that a method of the same name should be invoked, if any.</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.methodParamNames != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (String candidate : <span class="keyword">this</span>.methodParamNames) &#123;</div><div class="line">      <span class="keyword">if</span> (WebUtils.hasSubmitParameter(request, candidate)) &#123;</div><div class="line">        methodName = candidate;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">          logger.debug(<span class="string">"Determined handler method '"</span> + methodName +</div><div class="line">            <span class="string">"' based on existence of explicit request parameter of same name"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// Check parameter whose value identifies the method to invoke, if any.</span></div><div class="line">  <span class="keyword">if</span> (methodName == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.paramName != <span class="keyword">null</span>) &#123;</div><div class="line">    methodName = request.getParameter(<span class="keyword">this</span>.paramName);</div><div class="line">    <span class="keyword">if</span> (methodName != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">        logger.debug(<span class="string">"Determined handler method '"</span> + methodName +</div><div class="line">          <span class="string">"' based on value of request parameter '"</span> + <span class="keyword">this</span>.paramName + <span class="string">"'"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (methodName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.logicalMappings != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// Resolve logical name into real method name, if appropriate.</span></div><div class="line">    String originalName = methodName;</div><div class="line">    methodName = <span class="keyword">this</span>.logicalMappings.getProperty(methodName, methodName);</div><div class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">      logger.debug(<span class="string">"Resolved method name '"</span> + originalName + <span class="string">"' to handler method '"</span> + methodName + <span class="string">"'"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (methodName != <span class="keyword">null</span> &amp;&amp; !StringUtils.hasText(methodName)) &#123;</div><div class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">      logger.debug(<span class="string">"Method name '"</span> + methodName + <span class="string">"' is empty: treating it as no method name found"</span>);</div><div class="line">    &#125;</div><div class="line">    methodName = <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (methodName == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.defaultMethodName != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// No specific method resolved: use default method.</span></div><div class="line">      methodName = <span class="keyword">this</span>.defaultMethodName;</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">        logger.debug(<span class="string">"Falling back to default handler method '"</span> + <span class="keyword">this</span>.defaultMethodName + <span class="string">"'"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// If resolution failed completely, throw an exception.</span></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchRequestHandlingMethodException(request);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> methodName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如我们在前面的代码中可以看到的，方法的名称通过提供的参数映射，URL中的预定义属性或参数存在来解决（默认情况下，该参数的名称是action）。</p>
<h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>本文提出的最后一个设计模式是<strong>模板方法</strong>。此模式定义了类行为的骨架，并将子步骤的某些步骤的延迟执行(具体就是下面例子中一个方法放在另一个方法中，只有调用另一方方法的时候这个方法才会执行,而且还可能会在其他行为方法之后按顺序执行)。其中写了一种方法(下面例子中的construct())，注意定义为final，起着同步器的角色。它以给定的顺序执行由子类定义的方法。在现实世界中，我们可以将模板方法与房屋建设进行比较。独立于建造房屋的公司，我们需要从建立基础开始，只有在我们完成之后才能做其他的工作。这个执行逻辑将被保存在一个我们不能改变的方法中。例如基础建设或刷墙会被作为一个模板方法中的方法，具体到建筑房屋的公司。我们可以在给定的例子中看到它：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethod</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    HouseAbstract house = <span class="keyword">new</span> SeaHouse();</div><div class="line">    house.construct();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseAbstract</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">constructFoundations</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">constructWall</span><span class="params">()</span></span>;</div><div class="line">   </div><div class="line">  <span class="comment">// template method</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</div><div class="line">    constructFoundations();</div><div class="line">    constructWall();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EcologicalHouse</span> <span class="keyword">extends</span> <span class="title">HouseAbstract</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">constructFoundations</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Making foundations with wood"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">constructWall</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Making wall with wood"</span>);</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeaHouse</span> <span class="keyword">extends</span> <span class="title">HouseAbstract</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">constructFoundations</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Constructing very strong foundations"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">constructWall</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Constructing very strong wall"</span>);</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该代码应该输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Constructing very strong foundations</div><div class="line">Constructing very strong wall</div></pre></td></tr></table></figure>
<p>Spring在<strong>org.springframework.context.support.AbstractApplicationContext</strong>类中使用模板方法。他们不是一个模板方法（在我们的例子中是construct ），而是多个。例如，<strong>getsFreshBeanFactory</strong>返回内部<code>bean工厂</code>的新版本，调用两个抽象方法：<code>refreshBeanFactory</code>（刷新工厂bean）和<code>getBeanFactory</code>（以获取更新的工厂bean）。这个方法和其他一些方法一样，用在<strong>public void refresh()</strong>中，抛出<strong>构造应用程序上下文的BeansException，IllegalStateException</strong>方法(这里会在后面Spring中与应用程序上下文分析中再次提到)。</p>
<p>我们可以从同一个包中的GenericApplicationContext找到一些通过模板方法所实现的抽象方法的实现的例子(说的有点拗口，多读几遍就好):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Do nothing: We hold a single internal BeanFactory and rely on callers</div><div class="line">  * to register beans through our public methods (or the BeanFactory's).</div><div class="line">  * <span class="doctag">@see</span> #registerBeanDefinition</div><div class="line">  */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.refreshed) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">      <span class="string">"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.beanFactory.setSerializationId(getId());</div><div class="line">  <span class="keyword">this</span>.refreshed = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cancelRefresh</span><span class="params">(BeansException ex)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.beanFactory.setSerializationId(<span class="keyword">null</span>);</div><div class="line">  <span class="keyword">super</span>.cancelRefresh(ex);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">  * Not much to do: We hold a single internal BeanFactory that will never</div><div class="line">  * get released.</div><div class="line">  */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">closeBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.beanFactory.setSerializationId(<span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return the single internal BeanFactory held by this context</div><div class="line">  * (as ConfigurableListableBeanFactory).</div><div class="line">  */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return the underlying bean factory of this context,</div><div class="line">  * available for registering bean definitions.</div><div class="line">  * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; You need to call &#123;<span class="doctag">@link</span> #refresh()&#125; to initialize the</div><div class="line">  * bean factory and its contained beans with application context semantics</div><div class="line">  * (autodetecting BeanFactoryPostProcessors, etc).</div><div class="line">  * <span class="doctag">@return</span> the internal bean factory (as DefaultListableBeanFactory)</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> DefaultListableBeanFactory <span class="title">getDefaultListableBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过上面这些可以让我们发现Spring如何通过使用行为和结构设计模式来更好地组织上下文（<strong>模板方法</strong>），并通过相应<strong>策略</strong>来解决执行方法。它使用两种结构设计模式，通过<strong>代理模式</strong>来简化AOP部分并通过<strong>复合模式</strong>来构造复杂对象。</p>
<p>有问题可以加qq群523409180 讨论的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring框架中的设计模式-二&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-二&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式(二)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式(二)&lt;/h1&gt;&lt;p&gt;在上一篇中我们在Spring中所谈到的设计模式涉及到了创建模式三剑客和1个行为模式(解释器模式)。这次我们会将眼光更多地关注在具有结构性和行为性的设计模式上。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将看到每个类型的两种模式。首先将关注类型是的结构设计模式。它将包含代理和复合。下一个将介绍行为模式：策略和模板方法。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(一)</title>
    <link href="https://muyinchen.github.io/2017/07/20/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/"/>
    <id>https://muyinchen.github.io/2017/07/20/Spring框架中的设计模式(一)/</id>
    <published>2017-07-20T15:21:39.964Z</published>
    <updated>2017-09-20T10:26:36.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的设计模式-一"><a href="#Spring框架中的设计模式-一" class="headerlink" title="Spring框架中的设计模式(一)"></a>Spring框架中的设计模式(一)</h1><p>设计模式有助于遵循良好的编程实践。作为最流行的Web框架之一的Spring框架也使用其中的一些。</p>
<p>本文将介绍Spring Framework中使用的设计模式。这是5篇专题文章的第一部分。这次我们将发现Spring框架中使用的4种设计模式：解释器，构建器，工厂方法和抽象工厂。每部分将首先解释给定模式的原理。紧接着，将会使用Spring的一个例子来加深理解。<br> <a id="more"></a></p>
<h2 id="解释器设计模式"><a href="#解释器设计模式" class="headerlink" title="解释器设计模式"></a>解释器设计模式</h2><p>在现实世界中，我们人类需要解释手势。他们可以对文化有不同的含义。这是我们的解释，给他们一个意义。在编程中，我们还需要分析一件事情，并决定它是什么意思。我们可以用<strong>解释设计模式</strong>来做。</p>
<p>此模式基于表达式和评估器部分。第一个代表一个要分析的事情。这个分析是由评价者来做出的，它们知道构成表达的人物的意义。不必要的操作是在一个上下文中进行的。</p>
<p>Spring主要以<em>Spring Expression Language</em>（Spel）为例。这里快速提个醒，SpEL是一种由Spring的<strong>org.springframework.expression.ExpressionParser</strong>实现分析和执行的语言。这些实现使用作为字符串给出的Spel表达式，并将它们转换为<strong>org.springframework.expression.Expression的</strong>实例。上下文组件由<strong>org.springframework.expression.EvaluationContext</strong>实现表示，例如：StandardEvaluationContext。</p>
<p>举个Spel的一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Writer writer = <span class="keyword">new</span> Writer();</div><div class="line">writer.setName(<span class="string">"Writer's name"</span>);</div><div class="line">StandardEvaluationContext modifierContext = <span class="keyword">new</span> StandardEvaluationContext(subscriberContext);</div><div class="line">modifierContext.setVariable(<span class="string">"name"</span>, <span class="string">"Overriden writer's name"</span>);</div><div class="line">parser.parseExpression(<span class="string">"name = #name"</span>).getValue(modifierContext);</div><div class="line">System.out.println(<span class="string">"writer's name is : "</span> + writer.getName());</div></pre></td></tr></table></figure>
<p>输出应打印“Overriden writer’s name”。如你所见，一个对象的属性是通过一个表达式<code>name = #name</code>进行修改的，这个表达式只有在<code>ExpressionParser</code>才能理解，因为提供了<code>context</code>（前面的样例中的<code>modifierContext</code>实例）。</p>
<h2 id="建设者模式"><a href="#建设者模式" class="headerlink" title="建设者模式"></a>建设者模式</h2><p><strong>建设者设计模式</strong>是属于创建对象模式三剑客的第一种模式。该模式用于简化复杂对象的构造。要理解这个概念，想象一个说明程序员简历的对象。在这个对象中，我们想存储个人信息（名字，地址等）以及技术信息（知识语言，已实现的项目等）。该对象的构造可能如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// with constructor</span></div><div class="line">Programmer programmer = <span class="keyword">new</span> Programmer(<span class="string">"first name"</span>, <span class="string">"last name"</span>, <span class="string">"address Street 39"</span>, <span class="string">"ZIP code"</span>, <span class="string">"City"</span>, <span class="string">"Country"</span>, birthDateObject, <span class="keyword">new</span> String[] &#123;<span class="string">"Java"</span>, <span class="string">"PHP"</span>, <span class="string">"Perl"</span>, <span class="string">"SQL"</span>&#125;, <span class="keyword">new</span> String[] &#123;<span class="string">"CRM system"</span>, <span class="string">"CMS system for government"</span>&#125;);</div><div class="line"><span class="comment">// or with setters</span></div><div class="line">Programmer programmer = <span class="keyword">new</span> Programmer();</div><div class="line">programmer.setName(<span class="string">"first name"</span>);</div><div class="line">programmer.setLastName(<span class="string">"last name"</span>);</div><div class="line"><span class="comment">// ... multiple lines after</span></div><div class="line">programmer.setProjects(<span class="keyword">new</span> String[] &#123;<span class="string">"CRM system"</span>, <span class="string">"CMS system for government"</span>&#125;);</div></pre></td></tr></table></figure>
<p>Builder允许我们通过使用将值传递给父类的内部构建器对象来清楚地分解对象构造。所以对于我们这个程序员简历的对象的创建，构建器可以看起来像：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Programmer programmer = <span class="keyword">new</span> Programmer.ProgrammerBuilder().setFirstName(<span class="string">"F"</span>).setLastName(<span class="string">"L"</span>)</div><div class="line">            .setCity(<span class="string">"City"</span>).setZipCode(<span class="string">"0000A"</span>).setAddress(<span class="string">"Street 39"</span>)</div><div class="line">            .setLanguages(<span class="keyword">new</span> String[] &#123;<span class="string">"bash"</span>, <span class="string">"Perl"</span>&#125;).setProjects(<span class="keyword">new</span> String[] &#123;<span class="string">"Linux kernel"</span>&#125;).build();</div><div class="line">    assertTrue(<span class="string">"Programmer should be 'F L' but was '"</span>+ programmer+<span class="string">"'"</span>, programmer.toString().equals(<span class="string">"F L"</span>));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String firstName;</div><div class="line">  <span class="keyword">private</span> String lastName;</div><div class="line">  <span class="keyword">private</span> String address;</div><div class="line">  <span class="keyword">private</span> String zipCode;</div><div class="line">  <span class="keyword">private</span> String city;</div><div class="line">  <span class="keyword">private</span> String[] languages;</div><div class="line">  <span class="keyword">private</span> String[] projects;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Programmer</span><span class="params">(String fName, String lName, String addr, String zip, String city, String[] langs, String[] projects)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.firstName = fName;</div><div class="line">    <span class="keyword">this</span>.lastName = lName;</div><div class="line">    <span class="keyword">this</span>.address = addr;</div><div class="line">    <span class="keyword">this</span>.zipCode = zip;</div><div class="line">    <span class="keyword">this</span>.city = city;</div><div class="line">    <span class="keyword">this</span>.languages = langs;</div><div class="line">    <span class="keyword">this</span>.projects = projects;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgrammerBuilder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">    <span class="keyword">private</span> String zipCode;</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line">    <span class="keyword">private</span> String[] languages;</div><div class="line">    <span class="keyword">private</span> String[] projects;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.firstName = firstName;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.lastName = lastName;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.address = address;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setZipCode</span><span class="params">(String zipCode)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.zipCode = zipCode;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.city = city;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setLanguages</span><span class="params">(String[] languages)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.languages = languages;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setProjects</span><span class="params">(String[] projects)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.projects = projects;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> Programmer <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Programmer(firstName, lastName, address, zipCode, city, languages, projects);</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span>+<span class="keyword">this</span>.lastName;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，构建器后面隐藏了对象构造的复杂性，内部静态类接受链接方法的调用。在Spring中，我们可以在<strong>org.springframework.beans.factory.support.BeanDefinitionBuilder</strong>类中检索这个逻辑。这是一个允许我们以编程方式定义bean的类。我们可以在关于<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">bean工厂后处理器的</a>文章中看到它，<code>BeanDefinitionBuilder</code>包含几个方法，它们为<strong>AbstractBeanDefinition</strong>抽象类的相关实现设置值，比如作用域，工厂方法，属性等。想看看它是如何工作的，请查看以下这些方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanDefinitionBuilder</span> </span>&#123;</div><div class="line">       <span class="comment">/**</span></div><div class="line">    * The &#123;<span class="doctag">@code</span> BeanDefinition&#125; instance we are creating.</div><div class="line">    */</div><div class="line">  <span class="keyword">private</span> AbstractBeanDefinition beanDefinition;</div><div class="line"> </div><div class="line">  <span class="comment">// ... some not important methods for this article</span></div><div class="line"> </div><div class="line">  <span class="comment">// Some of building methods</span></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Set the name of the parent definition of this bean definition.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">setParentName</span><span class="params">(String parentName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.setParentName(parentName);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Set the name of the factory method to use for this definition.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">setFactoryMethod</span><span class="params">(String factoryMethod)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.setFactoryMethodName(factoryMethod);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add an indexed constructor arg value. The current index is tracked internally</div><div class="line">    * and all additions are at the present point.</div><div class="line">    * <span class="doctag">@deprecated</span> since Spring 2.5, in favor of &#123;<span class="doctag">@link</span> #addConstructorArgValue&#125;</div><div class="line">    */</div><div class="line">  <span class="meta">@Deprecated</span></div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addConstructorArg</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> addConstructorArgValue(value);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add an indexed constructor arg value. The current index is tracked internally</div><div class="line">    * and all additions are at the present point.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addConstructorArgValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(</div><div class="line">                    <span class="keyword">this</span>.constructorArgIndex++, value);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add a reference to a named bean as a constructor arg.</div><div class="line">    * <span class="doctag">@see</span> #addConstructorArgValue(Object)</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addConstructorArgReference</span><span class="params">(String beanName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(</div><div class="line">                    <span class="keyword">this</span>.constructorArgIndex++, <span class="keyword">new</span> RuntimeBeanReference(beanName));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add the supplied property value under the given name.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addPropertyValue</span><span class="params">(String name, Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.getPropertyValues().add(name, value);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add a reference to the specified bean name under the property specified.</div><div class="line">    * <span class="doctag">@param</span> name the name of the property to add the reference to</div><div class="line">    * <span class="doctag">@param</span> beanName the name of the bean being referenced</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addPropertyReference</span><span class="params">(String name, String beanName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.getPropertyValues().add(name, <span class="keyword">new</span> RuntimeBeanReference(beanName));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Set the init method for this definition.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">setInitMethodName</span><span class="params">(String methodName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.setInitMethodName(methodName);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// Methods that can be used to construct BeanDefinition</span></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Return the current BeanDefinition object in its raw (unvalidated) form.</div><div class="line">    * <span class="doctag">@see</span> #getBeanDefinition()</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">getRawBeanDefinition</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.beanDefinition;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Validate and return the created BeanDefinition object.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">getBeanDefinition</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.validate();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.beanDefinition;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>创建对象模式三剑客的第二个成员是<strong>工厂方法设计模式</strong>。它完全适于使用动态环境作为Spring框架。实际上，这种模式允许通过公共静态方法对象进行初始化，称为工厂方法。在这个概念中，我们需要定义一个接口来创建对象。但是创建是由使用相关对象的类创建的。</p>
<p>但是在跳到Spring世界之前，让我们用Java代码做一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Meal fruit = Meal.valueOf(<span class="string">"banana"</span>);</div><div class="line">    Meal vegetable = Meal.valueOf(<span class="string">"carrot"</span>);</div><div class="line">    assertTrue(<span class="string">"Banana should be a fruit but is "</span>+fruit.getType(), fruit.getType().equals(<span class="string">"fruit"</span>));</div><div class="line">    assertTrue(<span class="string">"Carrot should be a vegetable but is "</span>+vegetable.getType(), vegetable.getType().equals(<span class="string">"vegetable"</span>));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> String type;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Meal</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.type = type;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.type;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// Example of factory method - different object is created depending on current context</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Meal <span class="title">valueOf</span><span class="params">(String ingredient)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ingredient.equals(<span class="string">"banana"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Meal(<span class="string">"fruit"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Meal(<span class="string">"vegetable"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Spring中，我们可以通过指定的工厂方法创建bean。该方法与以前代码示例中看到的valueOf方法完全相同。它是静态的，可以采取没有或多个参数。为了更好地了解案例，让我们来看一下实例。首先搞定下配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"welcomerBean"</span> <span class="attr">class</span>=<span class="string">"com.mysite.Welcomer"</span> <span class="attr">factory-method</span>=<span class="string">"createWelcomer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"messagesLocator"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messagesLocator"</span> <span class="attr">class</span>=<span class="string">"com.mysite.MessageLocator"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messages"</span> <span class="attr">value</span>=<span class="string">"messages_file.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在请关注这个bean的初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcomer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String message;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Welcomer</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Welcomer <span class="title">createWelcomer</span><span class="params">(MessageLocator messagesLocator)</span> </span>&#123;</div><div class="line">    Calendar cal = Calendar.getInstance();</div><div class="line">    String msgKey = <span class="string">"welcome.pm"</span>;</div><div class="line">    <span class="keyword">if</span> (cal.get(Calendar.AM_PM) == Calendar.AM) &#123;</div><div class="line">      msgKey = <span class="string">"welcome.am"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Welcomer(messagesLocator.getMessageByKey(msgKey));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当Spring将构造welcomerBean时，它不会通过传统的构造函数，而是通过定义的静态工厂方法createWelcomer来实现。还要注意，这个方法接受一些参数（MessageLocator bean的实例包含所有可用的消息） 标签，通常保留给传统的构造函数。</p>
<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>最后一个，<strong>抽象的工厂设计模式</strong>，看起来类似于工厂方法。不同之处在于，我们可以将抽象工厂视为这个词的工业意义上的工厂，即。作为提供所需对象的东西。工厂部件有：抽象工厂，抽象产品，产品和客户。更准确地说，抽象工厂定义了构建对象的方法。抽象产品是这种结构的结果。产品是具有同样结构的具体结果。客户是要求创造产品来抽象工厂的人。</p>
<p>同样的，在进入Spring的细节之前，我们将首先通过示例Java代码说明这个概念：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="comment">// Test method which is the client</span></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Kitchen factory = <span class="keyword">new</span> KitchenFactory();</div><div class="line">    KitchenMeal meal = factory.getMeal(<span class="string">"P.1"</span>);</div><div class="line">    KitchenMeal dessert = factory.getDessert(<span class="string">"I.1"</span>);</div><div class="line">    assertTrue(<span class="string">"Meal's name should be 'protein meal' and was '"</span>+meal.getName()+<span class="string">"'"</span>, meal.getName().equals(<span class="string">"protein meal"</span>));</div><div class="line">    assertTrue(<span class="string">"Dessert's name should be 'ice-cream' and was '"</span>+dessert.getName()+<span class="string">"'"</span>, dessert.getName().equals(<span class="string">"ice-cream"</span>));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// abstract factory</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Kitchen</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> KitchenMeal <span class="title">getMeal</span><span class="params">(String preferency)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> KitchenMeal <span class="title">getDessert</span><span class="params">(String preferency)</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// concrete factory</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KitchenFactory</span> <span class="keyword">extends</span> <span class="title">Kitchen</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> KitchenMeal <span class="title">getMeal</span><span class="params">(String preferency)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (preferency.equals(<span class="string">"F.1"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> FastFoodMeal();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preferency.equals(<span class="string">"P.1"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ProteinMeal();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VegetarianMeal();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> KitchenMeal <span class="title">getDessert</span><span class="params">(String preferency)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (preferency.equals(<span class="string">"I.1"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IceCreamMeal();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// abstract product</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// concrete products</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProteinMeal</span> <span class="keyword">extends</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"protein meal"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VegetarianMeal</span> <span class="keyword">extends</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"vegetarian meal"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FastFoodMeal</span> <span class="keyword">extends</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"fast-food meal"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IceCreamMeal</span> <span class="keyword">extends</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"ice-cream"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以在这个例子中看到，抽象工厂封装了对象的创建。对象创建可以使用与经典构造函数一样使用的工厂方法模式。在Spring中，工厂的例子是<strong>org.springframework.beans.factory.BeanFactory</strong>。通过它的实现，我们可以从Spring的容器访问bean。根据采用的策略，<strong>getBean</strong>方法可以返回已创建的对象（共享实例，单例作用域）或初始化新的对象（原型作用域）。在<code>BeanFactory</code>的实现中，我们可以区分：<code>ClassPathXmlApplicationContext</code>，<code>XmlWebApplicationContext</code>，<code>StaticWebApplicationContext</code>，<code>StaticPortletApplicationContext</code>，<code>GenericApplicationContext</code>，<code>StaticApplicationContext</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"file:test-context.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProduct</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> BeanFactory factory;</div><div class="line">   </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Concrete factory is: "</span>+factory.getClass());</div><div class="line">    assertTrue(<span class="string">"Factory can't be null"</span>, factory != <span class="keyword">null</span>);</div><div class="line">    ShoppingCart cart = (ShoppingCart) factory.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertTrue(<span class="string">"Shopping cart object can't be null"</span>, cart != <span class="keyword">null</span>);</div><div class="line">    System.out.println(<span class="string">"Found shopping cart bean:"</span>+cart.getClass());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，抽象工厂由BeanFactory接口表示。具体工厂是在第一个System.out中打印的，是<strong>org.springframework.beans.factory.support.DefaultListableBeanFactory</strong>的实例。它的抽象产物是一个对象。在我们的例子中，具体的产品就是被强转为ShoppingCart实例的抽象产品（Object）。</p>
<p>第一篇文章介绍了通过设计模式来正确组织的我们实现良好的编程风格。在这里，我们可以看到在Spring框架中使用解释器，构建器，工厂方法和工厂。第一个是帮助解释以SpEL表达的文本。三个最后的模式属于创建设计模式的三剑客，它们在Spring中的主要目的是简化对象的创建。他们通过分解复杂对象（构建器）的初始化或通过集中在公共点的初始化来做到对象的创建(要不然怎么叫工厂呢，必须有通用点的)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring框架中的设计模式-一&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-一&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式(一)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式(一)&lt;/h1&gt;&lt;p&gt;设计模式有助于遵循良好的编程实践。作为最流行的Web框架之一的Spring框架也使用其中的一些。&lt;/p&gt;
&lt;p&gt;本文将介绍Spring Framework中使用的设计模式。这是5篇专题文章的第一部分。这次我们将发现Spring框架中使用的4种设计模式：解释器，构建器，工厂方法和抽象工厂。每部分将首先解释给定模式的原理。紧接着，将会使用Spring的一个例子来加深理解。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>如何在Maven项目中设置Java 9</title>
    <link href="https://muyinchen.github.io/2017/07/19/%E5%A6%82%E4%BD%95%E5%9C%A8Maven%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%AE%BE%E7%BD%AEJava%209/"/>
    <id>https://muyinchen.github.io/2017/07/19/如何在Maven项目中设置Java 9/</id>
    <published>2017-07-19T15:05:38.162Z</published>
    <updated>2017-07-19T15:24:39.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在Maven项目中设置Java-9"><a href="#如何在Maven项目中设置Java-9" class="headerlink" title="如何在Maven项目中设置Java 9"></a>如何在Maven项目中设置Java 9</h1><p>在这个简短的教程中，我想向你展示如何配置新的Java 9启用的Maven项目。</p>
 <a id="more"></a>
<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>您可以在这里找到一个示例项目：<a href="https://github.com/springuni/springuni-java9" target="_blank" rel="external">https//github.com/springuni/springuni-java9</a>。</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><strong>模块</strong></h2><p>我们以前也可以在Maven（也有Gradle，Ant等）中创建了多个模块项目，但是它们并不是严格的模块。他们似乎是独立的代码库，没有一个标准的方法来定义这些模块提供和需要的功能。使用构建系统，您可以声明依赖关系，但是模块本身并不负责管理自己的依赖关系并提供服务。</p>
<p>在大型项目中，当多个版本的同一个库被拉入作为传递依赖关系的副作用时，开发人员很快就会遇到<a href="https://dzone.com/articles/what-is-jar-hell" target="_blank" rel="external">jar-hell</a>。</p>
<p>Java 9的变化如何减轻这一点，您现在可以正式声明<a href="http://openjdk.java.net/projects/jigsaw/quick-start" target="_blank" rel="external"><strong>module-info.java</strong></a>封装以下信息的模块。</p>
<ul>
<li><em>模块名称</em></li>
<li><em>该模块依赖的其他模块</em></li>
<li><em>该模块提供了其他模块</em></li>
</ul>
<p>许多知名的库(<strong>library </strong>)预计将迁移到Java 9的模块系统，因此他们可以共享其公共API并使用此机制来隐藏其内部。</p>
<p>但有一点值得注意的是，<strong>如果您将来需要使用这样的库(library)</strong>，<strong>那么您将要做什么呢？</strong>这是一个合理的问题，这里就是模块类型。</p>
<h2 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a><strong>模块类型</strong></h2><p>模块只是以前的简单的旧JAR文件，但是从Java 9开始，它们将包含一个我上面提到的一个特殊的<em>module-info.java</em>。还有一个称为<em>模块路径</em>的新概念，它是众所周知的<em>类路径</em>的兄弟。</p>
<p>说到<strong>这里有四种模块类型</strong>：</p>
<ul>
<li><em>命名的模块</em>（也称为应用程序模块）包含上述<em>module-info.java</em></li>
<li><em>平台模块</em>（类似于前者，但这些都是随JDK一起发货）</li>
<li><em>自动模块</em>是在模块路径上提供的那些旧JAR</li>
<li><em>未命名的模块</em>是标准类路径上列出的所有内容</li>
</ul>
<h2 id="对Maven用户的影响"><a href="#对Maven用户的影响" class="headerlink" title="对Maven用户的影响"></a><strong>对Maven用户的影响</strong></h2><p>像Maven这样的构建工具必须要处理JDK的新结构，也就是<code>module-info.java</code>模块路径。他们有一个<a href="https://cwiki.apache.org/confluence/display/MAVEN/Java+9+-+Jigsaw" target="_blank" rel="external">Wiki页面</a>，其中列出了Java 9的所有插件要求。</p>
<h3 id="编译器插件"><a href="#编译器插件" class="headerlink" title="编译器插件"></a><strong>编译器插件</strong></h3><p>为了能够使用JDK 9的模块系统<strong>maven-compiler-plugin</strong>版本<strong>3.6.1</strong>或更高版本是必需的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">showDeprecation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showDeprecation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="工具链插件"><a href="#工具链插件" class="headerlink" title="工具链插件"></a><strong>工具链插件</strong></h3><p>这或多或少是可选的，但是我强烈建议您使用它。Java 9尚未发布，我们仍在使用Java 8（或Java 7）进行生产项目，并且不舒服地更改所有的环境变量，并将其指向JDK 9的主目录，我们一直想要实验它。 <strong>maven-toolchains-plugin</strong>使您能够轻松地使用各种环境。</p>
<p>创建<strong>$HOME/.m2/toolchains.xml</strong>（或  <code>%USERPROFILE%\.m2\toolchains.xml</code>在Windows上），如果你还没有的话。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">toolchains</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">toolchain</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jdk<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">provides</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">vendor</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">provides</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Change path to JDK9 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">jdkHome</span>&gt;</span>/opt/oracle/jdk-9<span class="tag">&lt;/<span class="name">jdkHome</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">toolchain</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">toolchain</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jdk<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">provides</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">vendor</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">provides</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">jdkHome</span>&gt;</span>/opt/oracle/jdk-1.8.0.65<span class="tag">&lt;/<span class="name">jdkHome</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">toolchain</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">toolchains</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将路径更改为实际的JDK安装。之后，工具链插件可以添加到您的项目中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-toolchains-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">toolchains</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">jdk</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">vendor</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">toolchains</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>toolchain<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="启用Java-9语言支持"><a href="#启用Java-9语言支持" class="headerlink" title="启用Java 9语言支持"></a><strong>启用Java 9语言支持</strong></h3><p>从JDK 9 b72开始，有个新功能将成为可用:<a href="http://mail.openjdk.java.net/pipermail/jdk9-dev/2015-July/002414.html" target="_blank" rel="external"><strong>javac –release</strong></a>命令行选项。简而言之，要使用<code>javac</code>交叉编译到较旧版本的平台，将设置<code>-source</code>和<code>-target</code>选项设置为较旧的值是不够的; 在<code>bootclasspath</code>也必须设置对应于旧版本了。设置<code>bootclasspath</code>经常被遗忘并获取所需的信息可能不方便。</p>
<p>该<code>--release</code>标志着<code>javac</code>解决了这两个缺点。在交叉编译时仅需要设置单个标志，相比以前需要设置三个标志（<code>source</code>，<code>-target</code>，<code>-bootclasspath</code>）和这样所需要的信息都被包括在JDK。接受的参数值为<code>--release</code>6,7,8和9。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">maven.compiler.release</span>&gt;</span>9<span class="tag">&lt;/<span class="name">maven.compiler.release</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<p>属性  <strong>maven.compiler.release</strong>直接映射到该<code>--release</code>标志<code>javac</code>，而另外两个属性只对<em>IntelliJ</em>有必要 ，用来了解源码兼容性。</p>
<h2 id="已知的问题"><a href="#已知的问题" class="headerlink" title="已知的问题"></a>已知的问题</h2><p>不幸的是，在写作时有测试编译失败。这是由于<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8178012" target="_blank" rel="external">JDK-8178012</a>引入的一个突破性的改变  ，它<strong>删除了-Xmodule编译器标志</strong>。希望  <a href="https://issues.apache.org/jira/browse/MCOMPILER-294" target="_blank" rel="external">MCOMPILER-294</a>可以很快得到修复，但同时也可以禁用编译测试源。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Fix breaking change introduced by JDK-8178012: Finish removal of -Xmodule</div><div class="line">    Reference:  http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8178012</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-testCompile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">showDeprecation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showDeprecation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何在Maven项目中设置Java-9&quot;&gt;&lt;a href=&quot;#如何在Maven项目中设置Java-9&quot; class=&quot;headerlink&quot; title=&quot;如何在Maven项目中设置Java 9&quot;&gt;&lt;/a&gt;如何在Maven项目中设置Java 9&lt;/h1&gt;&lt;p&gt;在这个简短的教程中，我想向你展示如何配置新的Java 9启用的Maven项目。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 9" scheme="https://muyinchen.github.io/tags/Java-9/"/>
    
  </entry>
  
  <entry>
    <title>构建用户管理微服务</title>
    <link href="https://muyinchen.github.io/2017/07/15/%E6%9E%84%E5%BB%BA%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://muyinchen.github.io/2017/07/15/构建用户管理微服务/</id>
    <published>2017-07-15T04:15:38.401Z</published>
    <updated>2017-07-15T04:15:28.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建用户管理微服务"><a href="#构建用户管理微服务" class="headerlink" title="构建用户管理微服务"></a>构建用户管理微服务</h1><p>翻译自:<a href="https://springuni.com/user-management-microservice-part-1/" target="_blank" rel="external">https://springuni.com/user-management-microservice-part-1/</a></p>
  <a id="more"></a>
<h2 id="构建用户管理微服务（一）：定义领域模型和-REST-API"><a href="#构建用户管理微服务（一）：定义领域模型和-REST-API" class="headerlink" title="构建用户管理微服务（一）：定义领域模型和 REST API"></a>构建用户管理微服务（一）：定义领域模型和 REST API</h2><p>在《构建用户管理微服务》的第一部分中，我们会定义应用的需求，初始的领域模型和供前端使用的 REST API。 我们首先定义<strong>用户注册</strong>和<strong>管理用户</strong>的故事。</p>
<h3 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h3><p>在设计新系统时，值得考虑的是用户希望实现的结果。 下面您可以找到用户注册系统应具有的基本功能的列表。</p>
<ul>
<li>作为<strong>用户</strong>，我想注册，以便我可以访问需要注册的内容</li>
<li>作为<strong>用户</strong>，我想在注册后确认我的电子邮件地址</li>
<li>作为<strong>用户</strong>，我想登录并注销</li>
<li>作为<strong>用户</strong>，我想更改我的密码</li>
<li>作为<strong>用户</strong>，我想更改我的电子邮件地址</li>
<li>作为<strong>用户</strong>，我想要重置我的密码，以便我忘记密码后可以登录</li>
<li>作为<strong>用户</strong>，我想更新我的个人资料，以便我可以提供我正确的联络资料</li>
<li>作为<strong>用户</strong>，我想关闭我的帐户，以便我可以关闭我与我注册的服务的关系</li>
<li>作为<strong>管理员</strong>，我想手动管理（创建/删除/更新）用户，以便工作人员不必重新进行注册过程</li>
<li>作为<strong>管理员</strong>，我想手动创建用户，这样工作人员就不用再过注册过程了</li>
<li>作为<strong>管理员</strong>，我想列出所有用户，即使是那些曾经关闭帐户的用户</li>
<li>作为<strong>管理员</strong>，我希望能够看到用户的活动（登录，注销，密码重置，确认，个人资料更新），以便我可以遵守外部审计要求</li>
</ul>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>我们来看看系统将要支持什么样的工作流程。首先，人们应该能够注册和登录，这些是相当明显的功能。</p>
<p><a href="http://blog.daocloud.io/wp-content/uploads/2017/06/1.jpg" target="_blank" rel="external"><img src="http://og0sybnix.bkt.clouddn.com/User_registration_workflow_861x571_final%20%281%29.png" alt="1"></a></p>
<p>但是，处理确认令牌时需要谨慎。 由于它们可用于执行特权操作，因此我们使用一次性随机令牌来处理密码重置和电子邮件确认。</p>
<p>当一个新的令牌由用户生成，无论什么原因，所有以前的都是无效的。 当有人记住他们的密码时，以前发出的和有效的密码重置令牌必须过期。</p>
<h3 id="非功能性需求"><a href="#非功能性需求" class="headerlink" title="非功能性需求"></a>非功能性需求</h3><p>用户故事通常不会定义非功能性要求，例如安全性，开发原理，技术栈等。所以我们在这里单独列出。</p>
<ul>
<li>领域模型是使用域驱动的设计原则在纯 Java 中实现的，并且独立于要使用的底层技术栈</li>
<li>当用户登录时，将为他们生成一个 JWT 令牌，有效期是 24 小时。在后续请求中包含此令牌，用户可以执行需要身份验证的操作</li>
<li>密码重置令牌有效期为 10 分钟，电子邮件地址确认令牌为一天</li>
<li>密码用加密算法（Bcrypt）加密，并且每用户加盐</li>
<li>提供了 RESTful API，用于与用户注册服务进行交互</li>
<li>应用程序将具有模块化设计，以便能够为各种场景提供单独的部署工件（例如，针对 Google App Engine 的 2.5 servlet 兼容 WAR 和其他用例的基于 Spring Boot 的自包含可执行 JAR）</li>
<li>实体标识符以数据库无关的方式生成，也就是说，不会使用数据库特定机制（AUTO_INCREMENT 或序列）来获取下一个 ID 值。解决方案将类似于 Instagram genetes ID。</li>
</ul>
<h3 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h3><p>对于第一轮实现中，我们只关注三个实体，即用户，确认令牌和用户事件。</p>
<p><a href="http://blog.daocloud.io/wp-content/uploads/2017/06/0.png" target="_blank" rel="external"><img src="http://og0sybnix.bkt.clouddn.com/unnamed.png" alt="0"></a></p>
<h3 id="rest-api"><a href="#rest-api" class="headerlink" title="rest api"></a>rest api</h3><p>访问下面的大多数 API 都需要认证，否则返回一个<strong> UNAUTHORIZED</strong> 状态码。 如果用户尝试查询属于某个其他用户的实体，则他们还会返回客户端错误（FORBIDDEN），除非他具有管理权限。 如果指定的实体不存在，则调用的端点返回 NOT_FOUND。</p>
<p>创建会话（POST /sessions）和注册新用户（POST / users）是公开的，它们不需要身份验证。</p>
<h4 id="Session-management"><a href="#Session-management" class="headerlink" title="Session management"></a>Session management</h4><p><code>1    GET /session/{session_id}</code>                                </p>
<p>如果没有给定 ID 的会话或者会话已经过期，则返回给定会话的详细信息或 NOT_FOUND。</p>
<p><code>1    POST /session</code>                   </p>
<p>创建新会话，前提是指定的电子邮件和密码对属于一个有效的用户。</p>
<p><code>1    DELETE /session/{session_id}</code>                                  </p>
<p>删除给定的会话（注销）。</p>
<h4 id="User-management"><a href="#User-management" class="headerlink" title="User management"></a>User management</h4><p><code>1    GET /users/{user_id}</code>                          </p>
<p>根据一个指定的 ID 查找用户。</p>
<p><code>1    GET /users</code>               </p>
<p>列举系统中所有的用户。</p>
<p><code>1    POST /users</code>               </p>
<p>注册一个新的用户。</p>
<p><code>1    DELETE /users/{user_id}</code>                         </p>
<p>删除指定的用户。</p>
<p><code>1    PUT /users/{user_id}</code>                      </p>
<p>更新指定用户的个人信息。</p>
<p><code>1    PUT /users/{user_id}/tokens/{token_id}</code></p>
<p>使用给定用户的令牌执行与令牌类型相关的操作。</p>
<h2 id="构建用户管理微服务（二）：实现领域模型"><a href="#构建用户管理微服务（二）：实现领域模型" class="headerlink" title="构建用户管理微服务（二）：实现领域模型"></a>构建用户管理微服务（二）：实现领域模型</h2><p>在第二部分，将详细介绍如何实现领域模型，在代码之外做了哪些决定。</p>
<h3 id="使用领域驱动设计"><a href="#使用领域驱动设计" class="headerlink" title="使用领域驱动设计"></a>使用领域驱动设计</h3><p>在第一部分中，作者提到了将使用领域驱动设计原则，这意味着，该模型可以不依赖于任何框架或基础设施类。在多次应用实现过程中，作者把领域模型和框架的具体注释（如 JPA 或 Hibernate ）混在一起，就如同和 Java POJO 一起工作（贫血模型）。在设计领域模型中，唯一使用的库是Lombok，用于减少定义的 getter 和 setter 方法以避免冗余。</p>
<p>当设计 DDD 的模型，第一步是对类进行分类。在埃里克·埃文斯书中的第二部分专注于模型驱动设计的构建模块。考虑到这一点，我们的模型分为以下几类。</p>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>实体有明确的标识和生命周期需要被管理。从这个角度来看，用户肯定是一个实体。</p>
<p>ConfirmationToken 就是一个边缘的例子，因为在没有用户上下文的情况下，逻辑上它就不存在，而另一方面，它可以通过令牌的值来标识并且它有自己的生命周期。</p>
<p>同样的方法也适用于 Session ，这也可能是一个值对象，由于其不可改变的性质，但它仍然有一个 ID 和一个生命周期（会话过期）。</p>
<h3 id="值对象"><a href="#值对象" class="headerlink" title="值对象"></a>值对象</h3><p>相对于实体类，值对象没有一个明确的 ID ，那就是，他们只是将一系列属性组合，并且，如果这些属性和另外一个相同类型的值对象的属性相同，那么我们就可以认为这两个值对象是相同的。</p>
<p>当设计领域模型，值对象提供了一种方便的方式来描述携带有一定的信息片段属性的集合。 AddressData，AuditData，ContactData 和 Password 因此可以认为是值对象。</p>
<p>虽然将所有这些属性实现为不可改变的是不切实际的，他们的某些属性可以单独被修改， Password 是一个很好的例子。当我们创建 Password 的实例，它的盐和哈希创建只有一次。在改变密码时，一个全新的实例与新的盐和散列将会被创建。</p>
<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合代表一组结合在一起，并通过访问所谓的聚合根的对象。</p>
<p>这儿有两个聚合对象：用户和会话。前者包含了所有与用户相关的实体和值对象，而后者只包含一个单一的实体 Session 。</p>
<p>显然，用户聚合根是用户实体。通过一个实例用户实体，我们可以管理确认令牌，用户事件和用户的密码。</p>
<p>聚合 Session 成为一个独立的实体——尽管被捆绑到一个用户的上下文——部分原因是由于其一次性性质，部分是因为当我们查找一个会话时我们不知道用户是谁。 Session 被创建之后，要么过期，要么按需删除。</p>
<h3 id="领域事件"><a href="#领域事件" class="headerlink" title="领域事件"></a>领域事件</h3><p>当需要由系统的另外组件处理的事件发生时，领域事件就会被触发。</p>
<p>用户管理应用程序有一个领域事件，这是 UserEvent ，它有以下类型：</p>
<ul>
<li>DELETED</li>
<li>EMAIL_CHANGED</li>
<li>EMAIL_CHANGE_REQUESTED</li>
<li>EMAIL_CONFIRMED</li>
<li>PASSWORD_CHANGED</li>
<li>PASSWORD_RESET_CONFIRMED</li>
<li>PASSWORD_RESET_REQUESTED</li>
<li>SCREEN_NAME_CHANGED</li>
<li>SIGNIN_SUCCEEDED</li>
<li>SIGNIN_FAILED</li>
<li>SIGNUP_REQUESTED</li>
</ul>
<p>### </p>
<h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>服务包含了能够操作一组领域模型的类的业务逻辑。在本应用中， UserService 管理用户的生命周期，并发出合适的 UserEvent 。SessionService 是用于创建和销毁用户会话。</p>
<p>### </p>
<h3 id="存储库"><a href="#存储库" class="headerlink" title="存储库"></a>存储库</h3><p>存储库旨在代表一个实体对象的概念集合，但是有时他们只是作为数据访问对象。有两种实现方法，一种方法是列出所有的抽象存储库类或超接口可能的数据访问方法，例如 Spring Data ，或者创建专门存储库接口。</p>
<p>对于用户管理应用程序，作者选择了第二种方法。UserRepository  和 SessionRepository  只列出那些绝对必要的处理他们实体的方法。</p>
<p>### </p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>你可能已经注意到，这里有一个 GitHub 上的库： springuni ，它包含用户管理应用程序的一部分，但它不包含应用程序本身的可执行版本。</p>
<p>究其原因，我为什么不提供单一只包含 Spring Boot 少量 @Enable* 注解的库，是为了可重用性。大多数我碰到的项目第一眼看起来是可以模块化的，但实际上他们只是没有良好分解职责的巨大单体应用。当你试图重用这样一个项目的模块，你很快意识到，它依赖于许多其他模块和/或过多的外部库。</p>
<p>springuni-particles （它可能已被也称为 springuni 模块）提供了多个模块的可重复使用的只为某些明确定义的功能。用户和会话管理是很好的例子。</p>
<p>### </p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>springuni-auth-model 包含了所有的领域模型类和用于管理用户生命周期的业务逻辑，它是完全与框架无关的。它的存储库，并且可以使用任何数据存储机制，对于手头的实际任务最符合。还有，PasswordChecker 和 PasswordEncryptor 可基于任何强大的密码散列技术实现。</p>
<p>springuni-commons 包含了通用的工具库。有很多著名的第三方库（如 Apache Commons Lang，Guava 等），这外延了 JDK 的标准库。在另一方面，我发现自己很多时候仅仅只用这些非常可扩展库的少量类。我特别喜欢的 Apache Commons Lang 中的 StringUtils 的和 Apache 共同集合的 CollectionUtils 类，但是，我宁愿为当前项目提供一个高度定制化的 StringUtils 和 CollectionUtils，这样就不需要添加外部依赖。</p>
<p>sprinuni-crm-model 定义了通用的值对象，用于处理联系人数据，如地址，国家等。虽然微服务架构的倡导者将投票反对使用共享库，但我认为这个特定点可能需要不时修订手头的任务。我最近参与了一些 CRM 集成项目，不得不重新实现了几乎同样的领域模型在不同的限界上下文（即用户，客户，联系人），这样一遍又一遍的操作是乏味的。也就是说，我认为使用联系人数据领域模型的小型通用库是值得尝试的。</p>
<h2 id="构建用户管理微服务（三）：实现和测试存储库"><a href="#构建用户管理微服务（三）：实现和测试存储库" class="headerlink" title="构建用户管理微服务（三）：实现和测试存储库"></a>构建用户管理微服务（三）：实现和测试存储库</h2><p>详细介绍一个完整的基于 JPA 的用户存储库实现，一个 JPA 的支撑模型和一些测试用例。</p>
<h3 id="使用-XML-来映射简单的-JAVA-对象"><a href="#使用-XML-来映射简单的-JAVA-对象" class="headerlink" title="使用 XML 来映射简单的 JAVA 对象"></a>使用 XML 来映射简单的 JAVA 对象</h3><p>仅看到用户存储库，也许你就能想到在对它添加基于 JPA 的实现时会遇到什么困难。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long userId)</span> <span class="keyword">throws</span> NoSuchUserException</span>;  </div><div class="line"><span class="function">Optional&lt;User&gt; <span class="title">findById</span><span class="params">(Long id)</span></span>;  </div><div class="line"><span class="function">Optional&lt;User&gt; <span class="title">findByEmail</span><span class="params">(String email)</span></span>;  </div><div class="line"><span class="function">Optional&lt;User&gt; <span class="title">findByScreenName</span><span class="params">(String screenName)</span></span>;  </div><div class="line"><span class="function">User <span class="title">save</span><span class="params">(User user)</span></span>; </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是, 正如我在第一部分提到的, 我们将使用 DDD (域驱动设计), 因此, 在模型中就不能使用特定框架的依赖关系云 (包括 JPA 的注解) ，剩下的唯一可行性方法是用 XML 进行映射。如果我没有记错的话，自2010年以来，我再也没有接触过任何一个 orm.xml 的文件 , 这也就是我为什么开始怀念它的原因。</p>
<p>接下来我们看看XML文件中User的映射情况，以下是 user-orm.xml 的部分摘录。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">entity</span> <span class="attr">class</span>=<span class="string">"com.springuni.auth.domain.model.user.User"</span> <span class="attr">cacheable</span>=<span class="string">"true"</span> <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"user_"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">named-query</span> <span class="attr">name</span>=<span class="string">"findByIdQuery"</span>&gt;</span>  <span class="tag">&lt;<span class="name">query</span>&gt;</span>    </div><div class="line">&lt;![CDATA[</div><div class="line">     select u from User u      </div><div class="line">     where u.id = :userId      </div><div class="line">     and u.deleted = false    </div><div class="line">   ]]&gt;  <span class="tag">&lt;/<span class="name">query</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">named-query</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">named-query</span> <span class="attr">name</span>=<span class="string">"findByEmailQuery"</span>&gt;</span>  <span class="tag">&lt;<span class="name">query</span>&gt;</span>    </div><div class="line">&lt;![CDATA[      </div><div class="line">     select u from User u      </div><div class="line">     where u.contactData.email = :email      </div><div class="line">     and u.deleted = false    </div><div class="line">   ]]&gt;  <span class="tag">&lt;/<span class="name">query</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">named-query</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">named-query</span> <span class="attr">name</span>=<span class="string">"findByScreenNameQuery"</span>&gt;</span>  <span class="tag">&lt;<span class="name">query</span>&gt;</span>    </div><div class="line">&lt;![CDATA[      </div><div class="line">     select u from User u      </div><div class="line">     where u.screenName = :screenName      </div><div class="line">     and u.deleted = false    </div><div class="line">   ]]&gt;  <span class="tag">&lt;/<span class="name">query</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">named-query</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">entity-listeners</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">entity-listener</span> <span class="attr">class</span>=<span class="string">"com.springuni.commons.jpa.IdentityGeneratorListener"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">entity-listeners</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attributes</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"timezone"</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">enumerated</span>&gt;</span>STRING<span class="tag">&lt;/<span class="name">enumerated</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">basic</span>&gt;</span>  <span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"locale"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"confirmed"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"locked"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"deleted"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">name</span>=<span class="string">"confirmationTokens"</span> <span class="attr">fetch</span>=<span class="string">"LAZY"</span> <span class="attr">mapped-by</span>=<span class="string">"owner"</span> <span class="attr">orphan-removal</span>=<span class="string">"true"</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">cascade</span>&gt;</span>      </div><div class="line"> <span class="tag">&lt;<span class="name">cascade-persist</span>/&gt;</span>      </div><div class="line">  <span class="tag">&lt;<span class="name">cascade-merge</span>/&gt;</span>    </div><div class="line"> <span class="tag">&lt;/<span class="name">cascade</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">element-collection</span> <span class="attr">name</span>=<span class="string">"authorities"</span>&gt;</span>    </div><div class="line">   <span class="tag">&lt;<span class="name">collection-table</span> <span class="attr">name</span>=<span class="string">"authority"</span>&gt;</span>      </div><div class="line">   <span class="tag">&lt;<span class="name">join-column</span> <span class="attr">name</span>=<span class="string">"user_id"</span>/&gt;</span>    </div><div class="line"> <span class="tag">&lt;/<span class="name">collection-table</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">element-collection</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">embedded</span> <span class="attr">name</span>=<span class="string">"auditData"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">embedded</span> <span class="attr">name</span>=<span class="string">"contactData"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">embedded</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- Do not map email directly through its getter/setter --&gt;</span>  <span class="tag">&lt;<span class="name">transient</span> <span class="attr">name</span>=<span class="string">"email"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">attributes</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">entity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>域驱动设计是一种持久化无关的方法，因此坚持设计一个没有具体目标数据结构的模型可能很有挑战性。当然, 它也存在优势, 即可对现实世界中的问题直接进行建模, 而不存在只能以某种方式使用某种技术栈之类的副作用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Entity</span>&lt;<span class="title">Long</span>, <span class="title">User</span>&gt; </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> Long id;  </div><div class="line"><span class="keyword">private</span> String screenName;  ...  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> Set&lt;String&gt; authorities = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般来说，一组简单的字符串或枚举值就能对用户的权限（或特权）进行建模了。</p>
<p>使用像 MongoDB 这样的文档数据库能够轻松自然地维护这个模型，如下所示。(顺便一提, 我还计划在本系列的后续内容中添加一个基于 Mongo 的存储库实现)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;   "id":123456789,   </div><div class="line">"screenName":"test",   ...   </div><div class="line">"authorities":[      </div><div class="line">             "USER",      </div><div class="line">             "ADMIN"   </div><div class="line">] </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而, 在关系模型中, 权限的概念必须作为用户的子关系进行处理。但是在现实世界中, 这仅仅只是一套权限规则。我们需要如何弥合这样的差距呢？</p>
<p>在 JPA 2.0 中可以引入 ElementCollection 来进行操作，它的用法类似于 OneToMany。在这种情况下, 已经配置好的 JPA 提供的程序 (Hibernate) 将自动生成必要的子关系。</p>
<p>alter table authority  add constraint FKoia3663r5o44m6knaplucgsxn  foreign key (user<em>id) references user</em></p>
<p>## </p>
<h3 id="项目中的新模块"><a href="#项目中的新模块" class="headerlink" title="项目中的新模块"></a>项目中的新模块</h3><p>我一直在讨论的 springuni-auth-user-jpa 包含了一个完整的基于 JPA 的 UserRepository 实现。其目标是, 每个模块都应该只拥有那些对它们的操作来说绝对必要的依赖关系，而这些关系只需要依赖 JPA API 便可以实现。</p>
<p>springuni-commons-jpa 是一个支撑模块, 它能够使用预先配置好的 HikariCP 和 Hibernate 的组合作为实体管理器, 而不必关心其他细节。 它的特色是 AbstractJpaConfiguration, 类似于 Spring Boot 的 HibernateJpaAutoConfiguration。</p>
<p>然而我没有使用后者的原因是 Spring Boot 的自动配置需要一定的初始化。因为谷歌应用引擎标准环境是我的目标平台之一，因此能否快速地启动是至关重要的。</p>
<h3 id="单元测试存储库"><a href="#单元测试存储库" class="headerlink" title="单元测试存储库"></a>单元测试存储库</h3><p>虽然有人可能会说, 对于存储库没必要进行过多的测试, 尤其是在使用 Spring Data 的 存储库接口的时候。但是我认为测试代码可以避免运行时存在的一些问题，例如错误的实体映射或错误的 JPQL 查询。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = [UserJpaTestConfiguration])</div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Rollbackclass</span> UserJpaRepositoryTest &#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  UserRepository userRepository</div><div class="line"> </div><div class="line">  User user</div><div class="line"> </div><div class="line">  <span class="meta">@Before</span>  <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">    user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"test"</span>, <span class="string">"test@springuni.com"</span>)</div><div class="line">    user.addConfirmationToken(ConfirmationTokenType.EMAIL, <span class="number">10</span>)</div><div class="line">    userRepository.save(user)</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  ...</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span>  <span class="function"><span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</div><div class="line">    Optional&lt;User&gt; userOptional = userRepository.findById(user.id)</div><div class="line">    assertTrue(userOptional.isPresent())</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  ...</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试用例启动了一个具有嵌入式 H2 数据库的实体管理器。H2 非常适合于测试, 因为它支持许多众所周知的数据库 (如 MySQL) 的兼容模式，可以模拟你的真实数据库。</p>
<h2 id="构建用户管理微服务（四）：实现-REST-控制器"><a href="#构建用户管理微服务（四）：实现-REST-控制器" class="headerlink" title="构建用户管理微服务（四）：实现 REST 控制器"></a>构建用户管理微服务（四）：实现 REST 控制器</h2><p>将 REST 控制器添加到领域控制模型的顶端</p>
<h3 id="有关-REST"><a href="#有关-REST" class="headerlink" title="有关 REST"></a>有关 REST</h3><p>REST, 全称是 Resource Representational State Transfer（Resource 被省略掉了）。通俗来讲就是：资源在网络中以某种表现形式进行状态转移。在 web 平台上，REST 就是选择通过使用 http 协议和 uri，利用 client/server model 对资源进行 CRUD (Create/Read/Update/Delete) 增删改查操作。</p>
<p>使用 REST 结构风格是因为，随着时代的发展，传统前后端融为一体的网页模式无法满足需求，而 RESTful 可以通过一套统一的接口为 Web，iOS 和 Android 提供服务。另外对于广大平台来说，比如 Facebook platform，微博开放平台，微信公共平台等，他们需要一套提供服务的接口，于是 RESTful 更是它们最好的选择。</p>
<h3 id="REST-端点的支撑模块"><a href="#REST-端点的支撑模块" class="headerlink" title="REST 端点的支撑模块"></a>REST 端点的支撑模块</h3><p>我经手的大多数项目，都需要对控制器层面正确地进行 Spring MVC 的配置。随着近几年单页应用程序的广泛应用，越来越不需要在 Spring mvc 应用程序中配置和开发视图层 (使用 jsp 或模板引擎)。</p>
<p>现在，创建完整的 REST 后端的消耗并生成了 JSON 是相当典型的, 然后通过 SPA 或移动应用程序直接使用。基于以上所讲, 我收集了 Spring MVC 常见配置，这能实现对后端的开发。</p>
<ul>
<li>Jackson 用于生成和消解 JSON</li>
<li>application/json 是默认的内容类型</li>
<li>ObjectMapper 知道如何处理 Joda 和 JSR-310 日期/时间 api, 它在 iso 格式中对日期进行序列化, 并且不将缺省的值序列化 (NON_ABSENT)</li>
<li>ModelMapper 用于转换为 DTO 和模型类</li>
<li>存在一个自定义异常处理程序, 用于处理 EntityNotFoundException 和其他常见应用程序级别的异常</li>
<li>捕获未映射的请求并使用以前定义的错误响应来处理它们</li>
</ul>
<p>#### </p>
<h4 id="能被重新使用的常见-REST-配置项目"><a href="#能被重新使用的常见-REST-配置项目" class="headerlink" title="能被重新使用的常见 REST 配置项目"></a>能被重新使用的常见 REST 配置项目</h4><p>该代码在 github, 有一个新的模块 springuni-commons-rest , 它包含实现 REST 控制器所需的所有常用的实用程序。 专有的 RestConfiguration 可以通过模块进行扩展, 它们可以进一步细化默认配置。</p>
<p>#### </p>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>正常的 web 应用程序向最终用户提供易于使用的错误页。但是，对于一个纯粹的 JSON-based REST 后端, 这不是一个需求, 因为它的客户是 SPA 或移动应用。</p>
<p>因此, 最好的方法是用一个明确定义的 JSON 结构 (RestErrorResponse) 前端可以很容易地响应错误, 这是非常可取的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestErrorResponse</span> </span>&#123;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> statusCode;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String reasonPhrase;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String detailMessage; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">RestErrorResponse</span><span class="params">(HttpStatus status, String detailMessage)</span> </span>&#123;    </div><div class="line">statusCode = status.value();    </div><div class="line">reasonPhrase = status.getReasonPhrase();    </div><div class="line"><span class="keyword">this</span>.detailMessage = detailMessage;  &#125;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestErrorResponse <span class="title">of</span><span class="params">(HttpStatus status)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> of(status, <span class="keyword">null</span>);  &#125;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestErrorResponse <span class="title">of</span><span class="params">(HttpStatus status, Exception ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestErrorResponse(status, ex.getMessage());  &#125; &#125;</div></pre></td></tr></table></figure>
<p>以上代码将返回 HTTP 错误代码，包括 HTTP 错误的文本表示和对客户端的详细信息，RestErrorHandler 负责生成针对应用程序特定异常的正确响应。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestErrorHandler</span> <span class="keyword">extends</span> <span class="title">ResponseEntityExceptionHandler</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(ApplicationException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleApplicationException</span><span class="params">(<span class="keyword">final</span> ApplicationException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, BAD_REQUEST);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(EntityAlreadyExistsException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleEntityExistsException</span><span class="params">(<span class="keyword">final</span> EntityAlreadyExistsException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, BAD_REQUEST);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(EntityConflictsException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleEntityConflictsException</span><span class="params">(<span class="keyword">final</span> EntityConflictsException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, CONFLICT);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(EntityNotFoundException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleEntityNotFoundException</span><span class="params">(<span class="keyword">final</span> EntityNotFoundException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, NOT_FOUND);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(RuntimeException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleRuntimeException</span><span class="params">(<span class="keyword">final</span> RuntimeException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, INTERNAL_SERVER_ERROR);  &#125; </div><div class="line"> </div><div class="line"> <span class="meta">@ExceptionHandler</span>(UnsupportedOperationException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleUnsupportedOperationException</span><span class="params">(      </span></span></div><div class="line"><span class="keyword">final</span> UnsupportedOperationException ex) &#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, NOT_IMPLEMENTED);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title">handleExceptionInternal</span><span class="params">(      </span></span></div><div class="line">Exception ex, Object body, HttpHeaders headers, HttpStatus status, WebRequest request) &#123;    </div><div class="line">RestErrorResponse restErrorResponse = RestErrorResponse.of(status, ex);    </div><div class="line"><span class="keyword">return</span> <span class="keyword">super</span>.handleExceptionInternal(ex, restErrorResponse, headers, status, request);  &#125;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">private</span> ResponseEntity&lt;Object&gt; <span class="title">handleExceptionInternal</span><span class="params">(Exception ex, HttpStatus status)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, <span class="keyword">null</span>, <span class="keyword">null</span>, status, <span class="keyword">null</span>);  &#125; &#125;</div></pre></td></tr></table></figure>
<h4 id="处理未响应请求"><a href="#处理未响应请求" class="headerlink" title="处理未响应请求"></a>处理未响应请求</h4><p>为了处理未映射的请求, 首先我们需要定义一个默认处理程序, 然后用 RequestMappingHandlerMapping 来设置它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultController</span> </span>&#123; </div><div class="line"> </div><div class="line"><span class="meta">@RequestMapping</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;RestErrorResponse&gt; <span class="title">handleUnmappedRequest</span><span class="params">(<span class="keyword">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> ResponseEntity.status(NOT_FOUND).body(RestErrorResponse.of(NOT_FOUND));  </div><div class="line">   &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过这样的设置，RestConfiguration 在一定程度上扩展了 WebMvcConfigurationSupport, 这提供了用于调用 MVC 基础结构的自定义钩子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableWebMvc</span> </div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;  </div><div class="line">...  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createDefaultHandler</span><span class="params">()</span> </span>&#123;   </div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> DefaultController();  &#125;    </div><div class="line">... </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> RequestMappingHandlerMapping <span class="title">createRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;    </div><div class="line">RequestMappingHandlerMapping handlerMapping = <span class="keyword">super</span>.createRequestMappingHandlerMapping();    </div><div class="line">Object defaultHandler = createDefaultHandler();    </div><div class="line">handlerMapping.setDefaultHandler(defaultHandler);    </div><div class="line">   <span class="keyword">return</span> handlerMapping;  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="用于管理用户的-REST-端点"><a href="#用于管理用户的-REST-端点" class="headerlink" title="用于管理用户的 REST 端点"></a>用于管理用户的 REST 端点</h4><p>在第一部分中，我定义了一堆用于和用户管理服务进行交互的 REST 风格的端点。而实际上, 他们与用 Spring MVC 创建 REST 风格的端点相比，并没有什么特别的。但是,我有一些最近意识到的小细节想要补充。</p>
<ul>
<li>正如 Spring 4.3 有一堆用于定义请求处理程序的速记注解，@GetMapping 是一个组合的注解, 它为 @RequestMapping (method = RequestMethod. GET) 作为其对应的 @PostMapping、@PutMapping 等的快捷方式。</li>
<li>我找到了一个用于处理从/到模型类转换的 DTO 的模块映射库 。在此之前，我用的是 Apache Commons Beanutils。</li>
<li>手动注册控制器来加快应用程序初始化的速度。正如我在第三部分中提到的, 这个应用程序将托管在谷歌应用引擎标准环境中，而开启一个新的实例是至关重要的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span> <span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;  </div><div class="line"> </div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;  </div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> ModelMapper modelMapper;  </div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(ModelMapper modelMapper, UserService userService)</span> </span>&#123;    </div><div class="line"> <span class="keyword">this</span>.modelMapper = modelMapper;    </div><div class="line"> <span class="keyword">this</span>.userService = userService; </div><div class="line"> &#125; </div><div class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/&#123;userId&#125;"</span>)  </div><div class="line"> <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">long</span> userId)</span> <span class="keyword">throws</span> ApplicationException </span>&#123; </div><div class="line">   	User user = userService.getUser(userId);    </div><div class="line"> 	<span class="keyword">return</span> modelMapper.map(user, UserDto.class); </div><div class="line"> &#125;  </div><div class="line"> </div><div class="line"> ... </div><div class="line"> </div><div class="line"><span class="meta">@PostMapping</span>  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(@RequestBody @Validated UserDto userDto)</span> <span class="keyword">throws</span> ApplicationException </span>&#123;   </div><div class="line">	User user = modelMapper.map(userDto, User.class);   </div><div class="line">	userService.signup(user, userDto.getPassword()); </div><div class="line"> &#125;  </div><div class="line">... </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="将-DTO-映射到模型类"><a href="#将-DTO-映射到模型类" class="headerlink" title="将 DTO 映射到模型类"></a>将 DTO 映射到模型类</h4><p>虽然 ModelMapper 在查找匹配属性时是相当自动的, 但在某些情况下需要进行手动调整。比如说，用户的密码。这是我们绝对不想暴露的内容。</p>
<p>通过定义自定义属性的映射, 可以很容易地避免这一点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.modelmapper.PropertyMap;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMap</span> <span class="keyword">extends</span> <span class="title">PropertyMap</span>&lt;<span class="title">User</span>, <span class="title">UserDto</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">skip().setPassword(<span class="keyword">null</span>);  </div><div class="line"> </div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当 ModelMapper 的实例被创建时, 我们可以自定义属性映射、转换器、目标值提供程序和一些其他的内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span> </div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRestConfiguration</span> <span class="keyword">extends</span> <span class="title">RestConfiguration</span> </span>&#123;    </div><div class="line">...  </div><div class="line"> <span class="meta">@Bean</span>  </div><div class="line"> <span class="function"><span class="keyword">public</span> ModelMapper <span class="title">modelMapper</span><span class="params">()</span> </span>&#123;    </div><div class="line"> ModelMapper modelMapper = <span class="keyword">new</span> ModelMapper();    </div><div class="line"> customizeModelMapper(modelMapper);    </div><div class="line"> modelMapper.validate();    </div><div class="line">   <span class="keyword">return</span> modelMapper;  &#125;  </div><div class="line"> <span class="meta">@Override</span>  </div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeModelMapper</span><span class="params">(ModelMapper modelMapper)</span> </span>&#123;    </div><div class="line"> modelMapper.addMappings(<span class="keyword">new</span> UserMap());    </div><div class="line"> modelMapper.addMappings(<span class="keyword">new</span> UserDtoMap());  &#125;  </div><div class="line"> ... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试-REST-控制器"><a href="#测试-REST-控制器" class="headerlink" title="测试 REST 控制器"></a>测试 REST 控制器</h4><p>自 MockMvc 在 Spring 3.2 上推出以来, 使用 Spring mvc 测试 REST 控制器变得非常容易。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner) </div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = [AuthRestTestConfiguration]) </div><div class="line"><span class="meta">@WebAppConfigurationclass</span> UserControllerTest &#123;  </div><div class="line"><span class="meta">@Autowired</span>  WebApplicationContext context    </div><div class="line"><span class="meta">@Autowired</span>  UserService userService  MockMvc mockMvc  </div><div class="line"><span class="meta">@Before</span>  </div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;    </div><div class="line"> mockMvc = MockMvcBuilders.webAppContextSetup(context).build()    </div><div class="line"> reset(userService)    </div><div class="line"> when(userService.getUser(<span class="number">0L</span>)).thenThrow(NoSuchUserException)    </div><div class="line"> when(userService.getUser(<span class="number">1L</span>))        </div><div class="line"> .thenReturn(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"test"</span>, <span class="string">"test@springuni.com"</span>))  &#125;  </div><div class="line"><span class="meta">@Test</span>  </div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">testGetUser</span><span class="params">()</span> </span>&#123;    </div><div class="line"> mockMvc.perform(get(<span class="string">"/users/1"</span>).contentType(APPLICATION_JSON))        </div><div class="line"> .andExpect(status().isOk())        </div><div class="line"> .andExpect(jsonPath(<span class="string">"id"</span>, is(<span class="number">1</span>)))        </div><div class="line"> .andExpect(jsonPath(<span class="string">"screenName"</span>, is(<span class="string">"test"</span>)))        </div><div class="line"> .andExpect(jsonPath(<span class="string">"contactData.email"</span>, is(<span class="string">"test@springuni.com"</span>)))        </div><div class="line"> .andDo(print())    </div><div class="line"> verify(userService).getUser(<span class="number">1L</span>)    </div><div class="line"> verifyNoMoreInteractions(userService)  </div><div class="line">&#125;  </div><div class="line">... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有两种方式能让 MockMvc 与 MockMvcBuilders 一起被搭建。 一个是通过 web 应用程序上下文 (如本例中) 来完成, 另一种方法是向 standaloneSetup () 提供具体的控制器实例。我使用的是前者,当 Spring Security得到配置的时候，测试控制器显得更为合适。</p>
<h2 id="构建用户管理微服务（五）：使用-JWT-令牌和-Spring-Security-来实现身份验证"><a href="#构建用户管理微服务（五）：使用-JWT-令牌和-Spring-Security-来实现身份验证" class="headerlink" title="构建用户管理微服务（五）：使用 JWT 令牌和 Spring Security 来实现身份验证"></a>构建用户管理微服务（五）：使用 JWT 令牌和 Spring Security 来实现身份验证</h2><p>我们已经建立了业务逻辑、数据访问层和前端控制器, 但是忽略了对身份进行验证。随着 Spring Security 成为实际意义上的标准, 将会在在构建 Java web 应用程序的身份验证和授权时使用到它。在构建用户管理微服务系列的第五部分中, 将带您探索 Spring Security 是如何同 JWT 令牌一起使用的。</p>
<h3 id="有关-Token"><a href="#有关-Token" class="headerlink" title="有关 Token"></a>有关 Token</h3><p>诸如 Facebook，Github，Twitter 等大型网站都在使用基于 Token 的身份验证。相比传统的身份验证方法，Token 的扩展性更强，也更安全，非常适合用在 Web 应用或者移动应用上。我们将 Token 翻译成令牌，也就意味着，你能依靠这个令牌去通过一些关卡，来实现验证。实施 Token 验证的方法很多，JWT 就是相关标准方法中的一种。</p>
<h3 id="关于-JWT-令牌"><a href="#关于-JWT-令牌" class="headerlink" title="关于 JWT 令牌"></a>关于 JWT 令牌</h3><p>JSON Web TOKEN（JWT）是一个开放的标准 （RFC 7519）, 它定义了一种简洁且独立的方式, 让在各方之间的 JSON 对象安全地传输信息。而经过数字签名的信息也可以被验证和信任。</p>
<p>JWT 的应用越来越广泛, 而因为它是轻量级的，你也不需要有一个用来验证令牌的认证服务器。与 OAuth 相比, 这有利有弊。如果 JWT 令牌被截获，它可以用来模拟用户, 也无法防范使用这个被截获的令牌继续进行身份验证。</p>
<p>真正的 JWT 令牌看起来像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</div><div class="line">eyJzdWIiOiJsYXN6bG9fQVRfc3ByaW5ndW5pX0RPVF9jb20iLCJuYW1lIjoiTMOhc3psw7MgQ3NvbnRvcyIsImFkbWluIjp0cnVlfQ.</div><div class="line">XEfFHwFGK0daC80EFZBB5ki2CwrOb7clGRGlzchAD84</div></pre></td></tr></table></figure>
<p>JWT 令牌的第一部分是令牌的 header , 用于标识令牌的类型和对令牌进行签名的算法。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line"> <span class="attr">"alg"</span>: <span class="string">"HS256"</span>, <span class="attr">"typ"</span>: <span class="string">"JWT"</span></div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二部分是 JWT 令牌的 payload 或它的声明。这两者是有区别的。Payload 可以是任意一组数据, 它甚至可以是明文或其他 （嵌入 JWT）的数据。而声明则是一组标准的字段。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line"> <span class="attr">"sub"</span>: <span class="string">"laszlo_AT_springuni_DOT_com"</span>, <span class="attr">"name"</span>: <span class="string">"László Csontos"</span>, <span class="attr">"admin"</span>: <span class="literal">true</span></div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三部分是由算法产生的、由 JWT 的 header 表示的签名。</p>
<h4 id="创建和验证-JWT-令牌"><a href="#创建和验证-JWT-令牌" class="headerlink" title="创建和验证 JWT 令牌"></a>创建和验证 JWT 令牌</h4><p>有相当多的第三方库可用于操作 JWT 令牌。而在本文中, 我使用了 JJWT。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>采用 JwtTokenService 使 JWT 令牌从身份验证实例中创建, 并将 JWTs 解析回身份验证实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenServiceImpl</span> <span class="keyword">implements</span> <span class="title">JwtTokenService</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITIES = <span class="string">"authorities"</span>;  </div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">"ThisIsASecret"</span>;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createJwtToken</span><span class="params">(Authentication authentication, <span class="keyword">int</span> minutes)</span> </span>&#123;</div><div class="line">    Claims claims = Jwts.claims()</div><div class="line">        .setId(String.valueOf(IdentityGenerator.generate()))</div><div class="line">        .setSubject(authentication.getName())</div><div class="line">        .setExpiration(<span class="keyword">new</span> Date(currentTimeMillis() + minutes * <span class="number">60</span> * <span class="number">1000</span>))</div><div class="line">        .setIssuedAt(<span class="keyword">new</span> Date());</div><div class="line"> </div><div class="line">    String authorities = authentication.getAuthorities()</div><div class="line">        .stream()</div><div class="line">        .map(GrantedAuthority::getAuthority)</div><div class="line">        .map(String::toUpperCase)</div><div class="line">        .collect(Collectors.joining(<span class="string">","</span>));</div><div class="line"> </div><div class="line">    claims.put(AUTHORITIES, authorities);    </div><div class="line"> </div><div class="line"><span class="keyword">return</span> Jwts.builder()</div><div class="line">        .setClaims(claims)</div><div class="line">        .signWith(HS512, SECRET)</div><div class="line">        .compact();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">parseJwtToken</span><span class="params">(String jwtToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;    </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      Claims claims = Jwts.parser()</div><div class="line">            .setSigningKey(SECRET)</div><div class="line">            .parseClaimsJws(jwtToken)</div><div class="line">            .getBody();      </div><div class="line"><span class="keyword">return</span> JwtAuthenticationToken.of(claims);</div><div class="line">    &#125; <span class="keyword">catch</span> (ExpiredJwtException | SignatureException e) &#123;      </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(e.getMessage(), e);</div><div class="line">    &#125; <span class="keyword">catch</span> (UnsupportedJwtException | MalformedJwtException e) &#123;      </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(e.getMessage(), e);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;      </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(e.getMessage(), e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据实际的验证，parseClaimsJws () 会引发各种异常。在 parseJwtToken () 中, 引发的异常被转换回 AuthenticationExceptions。虽然 JwtAuthenticationEntryPoint 能将这些异常转换为各种 HTTP 的响应代码, 但它也只是重复 DefaultAuthenticationFailureHandler 来以 http 401 (未经授权) 响应。</p>
<h3 id="登录和身份验证过程"><a href="#登录和身份验证过程" class="headerlink" title="登录和身份验证过程"></a>登录和身份验证过程</h3><p>基本上, 认证过程有两个短语, 让后端将服务用于单页面 web 应用程序。</p>
<h4 id="登录时创建-JWT-令牌"><a href="#登录时创建-JWT-令牌" class="headerlink" title="登录时创建 JWT 令牌"></a>登录时创建 JWT 令牌</h4><p>第一次登录变完成启动, 且在这一过程中, 将创建一个 JWT 令牌并将其发送回客户端。这些是通过以下请求完成的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">POST /session</div><div class="line">&#123;   </div><div class="line">  "username": "laszlo_AT_sprimguni_DOT_com",</div><div class="line">   "password": "secret"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>成功登录后, 客户端会像往常一样向其他端点发送后续请求, 并在授权的 header 中提供本地缓存的 JWT 令牌。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Authorization: Bearer &lt;JWT token&gt;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/login_process_962x741_final.png" alt="img"></p>
<p>正如上面的步骤所讲, LoginFilter 开始进行登录过程。而Spring Security 的内置 UsernamePasswordAuthenticationFilter 被延长, 来让这种情况发生。这两者之间的唯一的区别是, UsernamePasswordAuthenticationFilter 使用表单参数来捕获用户名和密码, 相比之下, LoginFilter 将它们视做 JSON 对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.security.authentication.*;</div><div class="line"><span class="keyword">import</span> org.springframework.security.core.*;</div><div class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.*;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGIN_REQUEST_ATTRIBUTE = <span class="string">"login_request"</span>;</div><div class="line"> </div><div class="line">  ...</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(</span></span></div><div class="line">      HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> AuthenticationException &#123;    </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      LoginRequest loginRequest =</div><div class="line">          objectMapper.readValue(request.getInputStream(), LoginRequest.class);</div><div class="line"> </div><div class="line">      request.setAttribute(LOGIN_REQUEST_ATTRIBUTE, loginRequest);      </div><div class="line"><span class="keyword">return</span> <span class="keyword">super</span>.attemptAuthentication(request, response);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;      </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(ioe.getMessage(), ioe);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      request.removeAttribute(LOGIN_REQUEST_ATTRIBUTE);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">obtainUsername</span><span class="params">(HttpServletRequest request)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> toLoginRequest(request).getUsername();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">obtainPassword</span><span class="params">(HttpServletRequest request)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> toLoginRequest(request).getPassword();</div><div class="line">  &#125;  </div><div class="line"><span class="function"><span class="keyword">private</span> LoginRequest <span class="title">toLoginRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;    <span class="keyword">return</span> (LoginRequest)request.getAttribute(LOGIN_REQUEST_ATTRIBUTE);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>处理登陆过程的结果将在之后分派给一个 AuthenticationSuccessHandler 和 AuthenticationFailureHandler。</p>
<p>两者都相当简单。DefaultAuthenticationSuccessHandler 调用 JwtTokenService 发出一个新的令牌, 然后将其发送回客户端。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_DAY_MINUTES = <span class="number">24</span> * <span class="number">60</span>;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> JwtTokenService jwtTokenService;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultAuthenticationSuccessHandler</span><span class="params">(</span></span></div><div class="line">      JwtTokenService jwtTokenService, ObjectMapper objectMapper) &#123;    </div><div class="line"><span class="keyword">this</span>.jwtTokenService = jwtTokenService;    </div><div class="line"><span class="keyword">this</span>.objectMapper = objectMapper;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(</span></span></div><div class="line">      HttpServletRequest request, HttpServletResponse response, Authentication authentication)      </div><div class="line"><span class="keyword">throws</span> IOException &#123;</div><div class="line"> </div><div class="line">    response.setContentType(APPLICATION_JSON_VALUE);</div><div class="line"> </div><div class="line">    String jwtToken = jwtTokenService.createJwtToken(authentication, ONE_DAY_MINUTES);</div><div class="line">    objectMapper.writeValue(response.getWriter(), jwtToken);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是它的对应, DefaultAuthenticationFailureHandler, 只是发送回一个 http 401 错误消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(DefaultAuthenticationFailureHandler.class);  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultAuthenticationFailureHandler</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;    </div><div class="line"><span class="keyword">this</span>.objectMapper = objectMapper;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(</span></span></div><div class="line">      HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)      </div><div class="line"><span class="keyword">throws</span> IOException &#123;</div><div class="line"> </div><div class="line">    LOGGER.warn(exception.getMessage());</div><div class="line"> </div><div class="line">    HttpStatus httpStatus = translateAuthenticationException(exception);</div><div class="line"> </div><div class="line">    response.setStatus(httpStatus.value());</div><div class="line">    response.setContentType(APPLICATION_JSON_VALUE);</div><div class="line"> </div><div class="line">    writeResponse(response.getWriter(), httpStatus, exception);</div><div class="line">  &#125;  </div><div class="line"><span class="function"><span class="keyword">protected</span> HttpStatus <span class="title">translateAuthenticationException</span><span class="params">(AuthenticationException exception)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> UNAUTHORIZED;</div><div class="line">  &#125;  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeResponse</span><span class="params">(</span></span></div><div class="line">      Writer writer, HttpStatus httpStatus, AuthenticationException exception) <span class="keyword">throws</span> IOException &#123;</div><div class="line"> </div><div class="line">    RestErrorResponse restErrorResponse = RestErrorResponse.of(httpStatus, exception);</div><div class="line">    objectMapper.writeValue(writer, restErrorResponse);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="处理后续请求"><a href="#处理后续请求" class="headerlink" title="处理后续请求"></a>处理后续请求</h4><p>在客户端登陆后, 它将在本地缓存 JWT 令牌, 并在前面讨论的后续请求中发送反回。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/auth_process_792x741_final.png" alt="img"></p>
<p>对于每个请求, JwtAuthenticationFilter 通过 JwtTokenService 验证接收到的 JWT令牌。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(JwtAuthenticationFilter.class);  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORIZATION_HEADER = <span class="string">"Authorization"</span>;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_PREFIX = <span class="string">"Bearer"</span>;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> JwtTokenService jwtTokenService;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">JwtAuthenticationFilter</span><span class="params">(JwtTokenService jwtTokenService)</span> </span>&#123;    </div><div class="line"><span class="keyword">this</span>.jwtTokenService = jwtTokenService;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">      FilterChain filterChain) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">    Authentication authentication = getAuthentication(request);    </div><div class="line"><span class="keyword">if</span> (authentication == <span class="keyword">null</span>) &#123;</div><div class="line">      SecurityContextHolder.clearContext();</div><div class="line">      filterChain.doFilter(request, response);     </div><div class="line"> <span class="keyword">return</span>;</div><div class="line">    &#125;    </div><div class="line"> </div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">      SecurityContextHolder.getContext().setAuthentication(authentication);</div><div class="line">      filterChain.doFilter(request, response);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      SecurityContextHolder.clearContext();</div><div class="line">    &#125;</div><div class="line">  &#125;  <span class="function"><span class="keyword">private</span> Authentication <span class="title">getAuthentication</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    String authorizationHeader = request.getHeader(AUTHORIZATION_HEADER);    <span class="keyword">if</span> (StringUtils.isEmpty(authorizationHeader)) &#123;</div><div class="line">      LOGGER.debug(<span class="string">"Authorization header is empty."</span>);      </div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;    <span class="keyword">if</span> (StringUtils.substringMatch(authorizationHeader, <span class="number">0</span>, TOKEN_PREFIX)) &#123;</div><div class="line">      LOGGER.debug(<span class="string">"Token prefix &#123;&#125; in Authorization header was not found."</span>, TOKEN_PREFIX);      </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    String jwtToken = authorizationHeader.substring(TOKEN_PREFIX.length() + <span class="number">1</span>);    <span class="keyword">try</span> &#123;      </div><div class="line">      <span class="keyword">return</span> jwtTokenService.parseJwtToken(jwtToken);</div><div class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line">      LOGGER.warn(e.getMessage());      </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果令牌是有效的, 则会实例化 JwtAuthenticationToken, 并执行线程的 SecurityContext。而由于恢复的 JWT 令牌包含唯一的 ID 和经过身份验证的用户的权限, 因此无需与数据库联系以再次获取此信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITIES = <span class="string">"authorities"</span>; </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> userId;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">JwtAuthenticationToken</span><span class="params">(<span class="keyword">long</span> userId, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;    </div><div class="line"><span class="keyword">super</span>(authorities);    </div><div class="line"><span class="keyword">this</span>.userId = userId;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> userId;</div><div class="line">  &#125;  <span class="comment">/**   * Factory method for creating a new &#123;<span class="doctag">@code</span> &#123;<span class="doctag">@link</span> JwtAuthenticationToken&#125;&#125;.   * <span class="doctag">@param</span> claims JWT claims   * <span class="doctag">@return</span> a JwtAuthenticationToken   */</span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JwtAuthenticationToken <span class="title">of</span><span class="params">(Claims claims)</span> </span>&#123;    </div><div class="line"><span class="keyword">long</span> userId = Long.valueOf(claims.getSubject());</div><div class="line"> </div><div class="line">    Collection&lt;GrantedAuthority&gt; authorities =</div><div class="line">        Arrays.stream(String.valueOf(claims.get(AUTHORITIES)).split(<span class="string">","</span>))</div><div class="line">            .map(String::trim)</div><div class="line">            .map(String::toUpperCase)</div><div class="line">            .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</div><div class="line">            .collect(Collectors.toSet());</div><div class="line"> </div><div class="line">    JwtAuthenticationToken jwtAuthenticationToken = <span class="keyword">new</span> JwtAuthenticationToken(userId, authorities);</div><div class="line"> </div><div class="line">    Date now = <span class="keyword">new</span> Date();</div><div class="line">    Date expiration = claims.getExpiration();</div><div class="line">    Date notBefore = claims.getNotBefore();</div><div class="line">    jwtAuthenticationToken.setAuthenticated(now.after(notBefore) &amp;&amp; now.before(expiration));    <span class="keyword">return</span> jwtAuthenticationToken;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这之后, 它由安全框架决定是否允许或拒绝请求。</p>
<h3 id="Spring-Security-在-Java-EE-世界中有竞争者吗？"><a href="#Spring-Security-在-Java-EE-世界中有竞争者吗？" class="headerlink" title="Spring Security 在 Java EE 世界中有竞争者吗？"></a>Spring Security 在 Java EE 世界中有竞争者吗？</h3><p>虽然这不是这篇文章的主题, 但我想花一分钟的时间来谈谈。如果我不得不在一个 JAVA EE 应用程序中完成所有这些？Spring Security 真的是在 JAVA 中实现身份验证和授权的黄金标准吗？</p>
<h4 id="让我们做个小小的研究！"><a href="#让我们做个小小的研究！" class="headerlink" title="让我们做个小小的研究！"></a>让我们做个小小的研究！</h4><p>JAVA EE 8 指日可待，他将在 2017 年年底发布，我想看看它是否会是 Spring Security 一个强大的竞争者。我发现 JAVA EE 8 将提供 JSR-375 , 这应该会缓解 JAVA EE 应用程序的安全措施的发展。它的参考实施被称为 Soteira, 是一个相对新的 github 项目。那就是说, 现在的答案是真的没有这样的一个竞争者。</p>
<p>但这项研究是不完整的，并没有提到 Apache Shiro。虽然我从未使用过，但我听说这算是更为简单的 Spring Security。让它更 JWT 令牌 一起使用也不是不可能。从这个角度来看，Apache Shiro 是算 Spring Security 的一个的有可比性的替代品</p>
<h2 id="构建用户管理微服务（六）：添加并记住我使用持久JWT令牌的身份验证"><a href="#构建用户管理微服务（六）：添加并记住我使用持久JWT令牌的身份验证" class="headerlink" title="构建用户管理微服务（六）：添加并记住我使用持久JWT令牌的身份验证"></a>构建用户管理微服务（六）：添加并记住我使用持久JWT令牌的身份验证</h2><p>于用户名和密码的身份验证。如果你错过了这一点，我在这里注意到，JWT令牌是在成功登录后发出的，并验证后续请求。创造长寿的<a href="https://jwt.io/" target="_blank" rel="external">JWT</a>是不实际的，因为它们是独立的，没有办法撤销它们。如果令牌被盗，所有赌注都会关闭。因此，我想添加经典的<a href="http://docs.spring.io/spring-security/site/docs/current/reference/html/ns-config.html#ns-remember-me" target="_blank" rel="external">remember-me</a>风格认证与持久令牌。记住，我的令牌存储在Cookie中作为  <a href="https://jwt.io/" target="_blank" rel="external">JWT</a>作为第一道防线，但是它们也保留在数据库中，并且跟踪其生命周期。</p>
<p>这次我想从演示运行中的用户管理应用程序的工作原理开始，然后再深入细节。</p>
<h3 id="验证流程"><a href="#验证流程" class="headerlink" title="验证流程"></a><strong>验证流程</strong></h3><p>基本上，用户使用用户名/密码对进行身份验证会发生什么，他们可能会表示他们希望应用程序记住他们（持续会话）的意图。大多数时候，UI上还有一个复选框来实现。由于应用程序还没有开发UI，我们用<a href="https://curl.haxx.se/" target="_blank" rel="external">cURL</a>做一切  。</p>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a><strong>登录</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -D- -c cookies.txt -b cookies.txt \</div><div class="line">-XPOST http://localhost:5000/auth/login \</div><div class="line"><span class="_">-d</span> <span class="string">'&#123; "username":"test", "password": "test", "rememberMe": true &#125;'</span></div><div class="line"></div><div class="line">HTTP/1.1 200</div><div class="line">...</div><div class="line">Set-Cookie: remember-me=eyJhbGciOiJIUzUxMiJ9...;Max-Age=1209600;path=/;HttpOnly</div><div class="line">X-Set-Authorization-Bearer: eyJhbGciOiJIUzUxMiJ9...</div></pre></td></tr></table></figure>
<p>成功认证后，  <a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-rest/src/main/java/com/springuni/auth/security/PersistentJwtTokenBasedRememberMeServices.java" target="_blank" rel="external">PersistentJwtTokenBasedRememberMeServices</a>创建一个永久<a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/model/session/Session.java" target="_blank" rel="external">会话</a>，将其保存到数据库并将其转换为JWT令牌。它负责将此持久<em>会话</em>存储在客户端的一个cookie（<em>Set-Cookie</em>）上，并且还发送新创建的瞬时令牌。后者旨在在单页前端的使用寿命内使用，并使用非标准HTTP头（<em>X-Set-Authorization-Bearer</em>）发送。</p>
<p>当<em>rememberMe</em>标志为<em>false时</em>，只创建一个无状态的JWT令牌，并且完全绕过了remember-me基础架构。</p>
<h4 id="在应用程序运行时仅使用瞬态令牌"><a href="#在应用程序运行时仅使用瞬态令牌" class="headerlink" title="在应用程序运行时仅使用瞬态令牌"></a><strong>在应用程序运行时仅使用瞬态令牌</strong></h4><p>当应用程序在浏览器中打开时，它会在每个XHR请求的<em>授权</em>头文件中发送暂时的JWT令牌。然而，当应用程序重新加载时，暂时令牌将丢失。</p>
<p>为了简单起见，这里使用<em>GET / users / {id}</em>来演示正常的请求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">curl -D- -H <span class="string">'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9...'</span> \</div><div class="line">  -XGET http://localhost:5000/users/524201457797040</div><div class="line"></div><div class="line">HTTP/1.1 200</div><div class="line">...</div><div class="line">&#123;</div><div class="line">  <span class="string">"id"</span> : 524201457797040,</div><div class="line">  <span class="string">"screenName"</span> : <span class="string">"test"</span>,</div><div class="line">  <span class="string">"contactData"</span> : &#123;</div><div class="line">  <span class="string">"email"</span> : <span class="string">"test@springuni.com"</span>,</div><div class="line">  <span class="string">"addresses"</span> : [ ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"timezone"</span> : <span class="string">"AMERICA_LOS_ANGELES"</span>,</div><div class="line">  <span class="string">"locale"</span> : <span class="string">"en_US"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用瞬态令牌与持久性令牌结合使用"><a href="#使用瞬态令牌与持久性令牌结合使用" class="headerlink" title="使用瞬态令牌与持久性令牌结合使用"></a><strong>使用瞬态令牌与持久性令牌结合使用</strong></h4><p>当用户在第一种情况下选择了remember-me认证时，会发生这种情况。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">curl -D- -c cookies.txt -b cookies.txt \</div><div class="line">  -H <span class="string">'Authorization: Bearer  eyJhbGciOiJIUzUxMiJ9...'</span> \</div><div class="line">  -XGET http://localhost:5000/users/524201457797040</div><div class="line"></div><div class="line">HTTP/1.1 200</div><div class="line">...</div><div class="line">&#123;</div><div class="line">  <span class="string">"id"</span> : 524201457797040,</div><div class="line">  <span class="string">"screenName"</span> : <span class="string">"test"</span>,</div><div class="line">  <span class="string">"contactData"</span> : &#123;</div><div class="line">    <span class="string">"email"</span> : <span class="string">"test@springuni.com"</span>,</div><div class="line">    <span class="string">"addresses"</span> : [ ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"timezone"</span> : <span class="string">"AMERICA_LOS_ANGELES"</span>,</div><div class="line">  <span class="string">"locale"</span> : <span class="string">"en_US"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，暂时的JWT令牌和一个有效的remember-me cookie都是同时发送的。只要单页应用程序正在运行，就使用暂时令牌。</p>
<h4 id="初始化时使用持久令牌"><a href="#初始化时使用持久令牌" class="headerlink" title="初始化时使用持久令牌"></a>初始化时使用持久令牌</h4><p>当前端在浏览器中加载时，它不知道是否存在任何暂时的JWT令牌。所有它可以做的是测试持久的remember-me cookie尝试执行一个正常的请求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">curl -D- -c cookies.txt -b cookies.txt \</div><div class="line">  -XGET http://localhost:5000/users/524201457797040</div><div class="line"></div><div class="line">HTTP/1.1 200</div><div class="line">...</div><div class="line">Set-Cookie: remember-me=eyJhbGciOiJIUzUxMiJ9...;Max-Age=1209600;path=/;HttpOnly</div><div class="line">X-Set-Authorization-Bearer: eyJhbGciOiJIUzUxMiJ9...</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"id"</span> : 524201457797040,</div><div class="line">  <span class="string">"screenName"</span> : <span class="string">"test"</span>,</div><div class="line">  <span class="string">"contactData"</span> : &#123;</div><div class="line">    <span class="string">"email"</span> : <span class="string">"test@springuni.com"</span>,</div><div class="line">    <span class="string">"addresses"</span> : [ ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"timezone"</span> : <span class="string">"AMERICA_LOS_ANGELES"</span>,</div><div class="line">  <span class="string">"locale"</span> : <span class="string">"en_US"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果持久性令牌（cookie）仍然有效，则会在上次使用数据库时在数据库中进行更新，并在浏览器中更新。还执行另一个重要步骤，用户将自动重新进行身份验证，而无需提供用户名/密码对，并创建新的临时令牌。从现在开始，只要运行该应用程序，该应用程序将使用暂时令牌。</p>
<h4 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h4><p>尽管注销看起来很简单，有一些细节我们需要注意。前端仍然发送无状态的JWT令牌，只要用户进行身份验证，否则UI上的注销按钮甚至不会被提供，后台也不会知道如何注销。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -D- -c cookies.txt -b cookies.txt \</div><div class="line">  -H <span class="string">'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9...'</span> \</div><div class="line">  -XPOST http://localhost:5000/auth/<span class="built_in">logout</span></div><div class="line"></div><div class="line">HTTP/1.1 302 </div><div class="line">Set-Cookie: remember-me=;Max-Age=0;path=/</div><div class="line">Location: http://localhost:5000/login?<span class="built_in">logout</span></div></pre></td></tr></table></figure>
<p>在此请求之后，记住我的cookie被重置，并且数据库中的持久会话被标记为已删除。</p>
<h3 id="实现记住我的身份验证"><a href="#实现记住我的身份验证" class="headerlink" title="实现记住我的身份验证"></a>实现记住我的身份验证</h3><p>正如我在摘要中提到的，我们将使用持久性令牌来增加安全性，以便能够在任何时候撤销它们。有三个步骤，我们需要执行，以使适当的记住我处理与Spring Security。</p>
<h4 id="实现-UserDetailsService"><a href="#实现-UserDetailsService" class="headerlink" title="实现  UserDetailsService"></a>实现  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/core/userdetails/UserDetailsService.html" target="_blank" rel="external">UserDetailsService</a></h4><p>在第一篇文章中，我决定使用DDD开发模型，因此它不能依赖于任何框架特定的类。实际上，它甚至不依赖于任何第三方框架或图书馆。大多数教程通常直接实现<em>UserDetailsService</em>，并且业务逻辑和用于构建应用程序的框架之间没有额外的层。</p>
<p><a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/service/UserService.java" target="_blank" rel="external">UserServices</a>在第二部分很久以前被添加到该项目中，因此我们的任务非常简单，因为现在我们需要的是一个框架特定的组件，它将<em>UserDetailsService</em>的职责委托给现有的逻辑。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingUserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DelegatingUserService</span><span class="params">(UserService userService)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.userService = userService;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</div><div class="line">    Long userId = Long.valueOf(username);</div><div class="line">    UsernameNotFoundException usernameNotFoundException = <span class="keyword">new</span> UsernameNotFoundException(username);</div><div class="line">    <span class="keyword">return</span> userService.findUser(userId)</div><div class="line">        .map(DelegatingUser::<span class="keyword">new</span>)</div><div class="line">        .orElseThrow(() -&gt; usernameNotFoundException);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只是围绕<em>UserService的</em>一个简单的包装器，最终将返回的<a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/model/user/User.java" target="_blank" rel="external">User</a>模型对象转换为框架特定的<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/core/userdetails/UserDetails.html" target="_blank" rel="external">UserDetails</a>实例。除此之外，在这个项目中，我们不直接使用用户的登录名（电子邮件地址或屏幕名称）。相反，他们的用户的身份证遍及各地。</p>
<h4 id="实现-PersistentTokenRepository"><a href="#实现-PersistentTokenRepository" class="headerlink" title="实现  PersistentTokenRepository"></a>实现  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/PersistentTokenRepository.html" target="_blank" rel="external">PersistentTokenRepository</a></h4><p>幸运的是，我们在添加适当的<em>PersistentTokenRepository</em>实现方面同样容易，因为域模型已经包含<a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/service/SessionService.java" target="_blank" rel="external">SessionService</a>和<a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/model/session/Session.java" target="_blank" rel="external">Session</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingPersistentTokenRepository</span> <span class="keyword">implements</span> <span class="title">PersistentTokenRepository</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(DelegatingPersistentTokenRepository.class);</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SessionService sessionService;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DelegatingPersistentTokenRepository</span><span class="params">(SessionService sessionService)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sessionService = sessionService;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNewToken</span><span class="params">(PersistentRememberMeToken token)</span> </span>&#123;</div><div class="line">    Long sessionId = Long.valueOf(token.getSeries());</div><div class="line">    Long userId = Long.valueOf(token.getUsername());</div><div class="line">    sessionService.createSession(sessionId, userId, token.getTokenValue());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateToken</span><span class="params">(String series, String tokenValue, Date lastUsed)</span> </span>&#123;</div><div class="line">    Long sessionId = Long.valueOf(series);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      sessionService.useSession(sessionId, tokenValue, toLocalDateTime(lastUsed));</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchSessionException e) &#123;</div><div class="line">      LOGGER.warn(<span class="string">"Session &#123;&#125; doesn't exists."</span>, sessionId);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> PersistentRememberMeToken <span class="title">getTokenForSeries</span><span class="params">(String seriesId)</span> </span>&#123;</div><div class="line">    Long sessionId = Long.valueOf(seriesId);</div><div class="line">    <span class="keyword">return</span> sessionService</div><div class="line">        .findSession(sessionId)</div><div class="line">        .map(<span class="keyword">this</span>::toPersistentRememberMeToken)</div><div class="line">        .orElse(<span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUserTokens</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">    Long userId = Long.valueOf(username);</div><div class="line">    sessionService.logoutUser(userId);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> PersistentRememberMeToken <span class="title">toPersistentRememberMeToken</span><span class="params">(Session session)</span> </span>&#123;</div><div class="line">    String username = String.valueOf(session.getUserId());</div><div class="line">    String series = String.valueOf(session.getId());</div><div class="line">    LocalDateTime lastUsedAt =</div><div class="line">        Optional.ofNullable(session.getLastUsedAt()).orElseGet(session::getIssuedAt);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersistentRememberMeToken(</div><div class="line">        username, series, session.getToken(), toDate(lastUsedAt));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>情况与<em>UserDetailsService</em>大致相同，包装器会在<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/PersistentRememberMeToken.html" target="_blank" rel="external">PersistentRememberMeToken</a>和<em>Session</em>之间进行转换  。唯一需要特别注意的是<em>PersistentRememberMeToken中</em>的日期字段。在会话中，我分离了两个日期字段（<em>即已发布的</em>和<em>lastUsedAt</em>），后者在用户首次使用remember-me令牌的帮助下登录时获取第一个值。因此有可能它是空的，而且是什么时候使用<em>publishedAt</em>的值。</p>
<h4 id="实现-RememberMeServices"><a href="#实现-RememberMeServices" class="headerlink" title="实现  RememberMeServices"></a>实现  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/RememberMeServices.html" target="_blank" rel="external">RememberMeServices</a></h4><p>在这一点上，我们重新使用<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/PersistentTokenBasedRememberMeServices.html" target="_blank" rel="external">PersistentTokenBasedRememberMeServices</a>并为手头的任务进行自定义，它取决于<em>UserDetailsService</em>和<em>PersistentTokenRepository，</em>而这些已经被考虑到了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentJwtTokenBasedRememberMeServices</span> <span class="keyword">extends</span></span></div><div class="line">    <span class="title">PersistentTokenBasedRememberMeServices</span> &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(PersistentJwtTokenBasedRememberMeServices.class);</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_TOKEN_LENGTH = <span class="number">16</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PersistentJwtTokenBasedRememberMeServices</span><span class="params">(</span></span></div><div class="line">      String key, UserDetailsService userDetailsService,</div><div class="line">      PersistentTokenRepository tokenRepository) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>(key, userDetailsService, tokenRepository);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="keyword">protected</span> String[] decodeCookie(String cookieValue) <span class="keyword">throws</span> InvalidCookieException &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Claims claims = Jwts.parser()</div><div class="line">          .setSigningKey(getKey())</div><div class="line">          .parseClaimsJws(cookieValue)</div><div class="line">          .getBody();</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; claims.getId(), claims.getSubject() &#125;;</div><div class="line">    &#125; <span class="keyword">catch</span> (JwtException e) &#123;</div><div class="line">      LOGGER.warn(e.getMessage());</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidCookieException(e.getMessage());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">encodeCookie</span><span class="params">(String[] cookieTokens)</span> </span>&#123;</div><div class="line">    Claims claims = Jwts.claims()</div><div class="line">        .setId(cookieTokens[<span class="number">0</span>])</div><div class="line">        .setSubject(cookieTokens[<span class="number">1</span>])</div><div class="line">        .setExpiration(<span class="keyword">new</span> Date(currentTimeMillis() + getTokenValiditySeconds() * <span class="number">1000L</span>))</div><div class="line">        .setIssuedAt(<span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Jwts.builder()</div><div class="line">        .setClaims(claims)</div><div class="line">        .signWith(HS512, getKey())</div><div class="line">        .compact();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">generateSeriesData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> seriesId = IdentityGenerator.generate();</div><div class="line">    <span class="keyword">return</span> String.valueOf(seriesId);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">generateTokenData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> RandomUtil.ints(DEFAULT_TOKEN_LENGTH)</div><div class="line">        .mapToObj(i -&gt; String.format(<span class="string">"%04x"</span>, i))</div><div class="line">        .collect(Collectors.joining());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">rememberMeRequested</span><span class="params">(HttpServletRequest request, String parameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Optional.ofNullable((Boolean)request.getAttribute(REMEMBER_ME_ATTRIBUTE)).orElse(<span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个特定的实现使用JWT令牌作为在cookies中存储记住我的令牌的物化形式。Spring Security的默认格式也可以很好，但JWT增加了一个额外的安全层。默认实现没有签名，每个请求最终都是数据库中的一个查询，用于检查remember-me令牌。</p>
<p>JWT防止这种情况，尽管解析它并验证其签名需要更多的CPU周期。</p>
<h4 id="将所有这些组合在一起"><a href="#将所有这些组合在一起" class="headerlink" title="将所有这些组合在一起"></a>将所有这些组合在一起</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthSecurityConfiguration</span> <span class="keyword">extends</span> <span class="title">SecurityConfigurationSupport</span> </span>&#123;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">(UserService userService)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DelegatingUserService(userService);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">(SessionService sessionService)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DelegatingPersistentTokenRepository(sessionService);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> RememberMeAuthenticationFilter <span class="title">rememberMeAuthenticationFilter</span><span class="params">(</span></span></div><div class="line">      AuthenticationManager authenticationManager, RememberMeServices rememberMeServices,</div><div class="line">      AuthenticationSuccessHandler authenticationSuccessHandler) &#123;</div><div class="line"></div><div class="line">    RememberMeAuthenticationFilter rememberMeAuthenticationFilter =</div><div class="line">        <span class="keyword">new</span> ProceedingRememberMeAuthenticationFilter(authenticationManager, rememberMeServices);</div><div class="line"></div><div class="line">    rememberMeAuthenticationFilter.setAuthenticationSuccessHandler(authenticationSuccessHandler);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> rememberMeAuthenticationFilter;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> RememberMeServices <span class="title">rememberMeServices</span><span class="params">(</span></span></div><div class="line">      UserDetailsService userDetailsService, PersistentTokenRepository persistentTokenRepository) &#123;</div><div class="line"></div><div class="line">    String secretKey = getRememberMeTokenSecretKey().orElseThrow(IllegalStateException::<span class="keyword">new</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersistentJwtTokenBasedRememberMeServices(</div><div class="line">        secretKey, userDetailsService, persistentTokenRepository);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRememberMe</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    UserDetailsService userDetailsService = lookup(<span class="string">"userDetailsService"</span>);</div><div class="line">    PersistentTokenRepository persistentTokenRepository = lookup(<span class="string">"persistentTokenRepository"</span>);</div><div class="line">    AbstractRememberMeServices rememberMeServices = lookup(<span class="string">"rememberMeServices"</span>);</div><div class="line">    RememberMeAuthenticationFilter rememberMeAuthenticationFilter =</div><div class="line">        lookup(<span class="string">"rememberMeAuthenticationFilter"</span>);</div><div class="line"></div><div class="line">    http.rememberMe()</div><div class="line">        .userDetailsService(userDetailsService)</div><div class="line">        .tokenRepository(persistentTokenRepository)</div><div class="line">        .rememberMeServices(rememberMeServices)</div><div class="line">        .key(rememberMeServices.getKey())</div><div class="line">        .and()</div><div class="line">        .logout()</div><div class="line">        .logoutUrl(LOGOUT_ENDPOINT)</div><div class="line">        .and()</div><div class="line">        .addFilterAt(rememberMeAuthenticationFilter, RememberMeAuthenticationFilter.class);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>令人感到神奇的结果在最后部分是显而易见的。基本上，这是关于使用Spring Security注册组件，并启用记住我的服务。有趣的是，我们需要一个在<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/AbstractRememberMeServices.html" target="_blank" rel="external">AbstractRememberMeServices</a>  内部使用的键（一个字符串）。 <em>AbstractRememberMeServices</em>  也是此设置中的默认注销处理程序，并在注销时将数据库中的令牌标记为已删除。</p>
<h3 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h3><h4 id="在POST请求的正文中接收用户凭据和remember-me标志作为JSON数据"><a href="#在POST请求的正文中接收用户凭据和remember-me标志作为JSON数据" class="headerlink" title="在POST请求的正文中接收用户凭据和remember-me标志作为JSON数据"></a>在POST请求的正文中接收用户凭据和remember-me标志作为JSON数据</h4><p>默认情况下，  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.html" target="_blank" rel="external">UsernamePasswordAuthenticationFilter</a>会将凭据作为POST请求的HTTP请求参数，但是我们希望发送JSON文档。进一步下去，  <a href="http://docs.spring.io/autorepo/docs/spring-security/current/apidocs/org/springframework/security/web/authentication/rememberme/AbstractRememberMeServices.html" target="_blank" rel="external">AbstractRememberMeServices</a>还会将remember-me标志的存在检查为请求参数。为了解决这个问题，  <a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-rest/src/main/java/com/springuni/auth/security/LoginFilter.java" target="_blank" rel="external">LoginFilter</a>  将remember-me标志设置为请求属性，并将决定委托给  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/PersistentTokenBasedRememberMeServices.html" target="_blank" rel="external">PersistentTokenBasedRememberMeServices，</a>  如果记住我的身份验证需要启动或不启动。</p>
<h4 id="使用RememberMeServices处理登录成功"><a href="#使用RememberMeServices处理登录成功" class="headerlink" title="使用RememberMeServices处理登录成功"></a>使用<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/RememberMeServices.html" target="_blank" rel="external">RememberMeServices</a>处理登录成功</h4><p><a href="https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/RememberMeAuthenticationFilter.html" target="_blank" rel="external">RememberMeAuthenticationFilter</a>不会继续进入过滤器链中的下一个过滤器，但如果设置了<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/AuthenticationSuccessHandler.html" target="_blank" rel="external">AuthenticationSuccessHandler</a>，它将停止其执行  。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProceedingRememberMeAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">RememberMeAuthenticationFilter</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(ProceedingRememberMeAuthenticationFilter.class);</div><div class="line"></div><div class="line">  <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProceedingRememberMeAuthenticationFilter</span><span class="params">(</span></span></div><div class="line">      AuthenticationManager authenticationManager, RememberMeServices rememberMeServices) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>(authenticationManager, rememberMeServices);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationSuccessHandler</span><span class="params">(AuthenticationSuccessHandler successHandler)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.successHandler = successHandler;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSuccessfulAuthentication</span><span class="params">(</span></span></div><div class="line">      HttpServletRequest request, HttpServletResponse response, Authentication authResult) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (successHandler == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      successHandler.onAuthenticationSuccess(request, response, authResult);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      LOGGER.error(e.getMessage(), e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-rest/src/main/java/com/springuni/auth/security/ProceedingRememberMeAuthenticationFilter.java" target="_blank" rel="external">ProceedingRememberMeAuthenticationFilter</a>  是原始过滤器的自定义版本，当认证成功时，该过滤器不会停止。</p>
<h2 id="构建用户管理微服务器（七）：将以上组合在一起"><a href="#构建用户管理微服务器（七）：将以上组合在一起" class="headerlink" title="构建用户管理微服务器（七）：将以上组合在一起"></a>构建用户管理微服务器（七）：将以上组合在一起</h2><p>从绝对零开始，用户管理应用程序的构建块已被开发出来。在最后一篇中，我想向您展示如何组装这些部分，以使应用程序正常工作。一些功能仍然缺少，我仍然在第一个版本上工作，使其功能完整，但现在基本上是可以使用的。</p>
<h3 id="创建一个独立的可执行模块"><a href="#创建一个独立的可执行模块" class="headerlink" title="创建一个独立的可执行模块"></a>创建一个独立的可执行模块</h3><p>今天建立基于Spring的应用程序最简单的方法是去Spring Boot。毫无疑问。由于一个原因，它正在获得大量采用，这就是使您的生活比使用裸弹更容易。之前我曾在各种情况下与Spring合作过，并在Servlet容器和完全成熟的Java EE应用服务器之上构建了应用程序，但能够将可执行软件包中的所有内容都打包成开发成本。</p>
<p>总而言之，第一步是为应用程序创建一个新的模块，它是<a href="https://github.com/springuni/springuni-particles/tree/master/springuni-auth-boot" target="_blank" rel="external">springuni-auth-boot</a>。</p>
<h4 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springuni-particles<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springuni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springuni-auth-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringUni Auth User Boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Example module for assembling user authentication modules<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springuni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springuni-auth-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springuni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springuni-auth-user-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://github.com/spring-projects/spring-boot/issues/6254#issuecomment-229600830 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>模块<a href="https://github.com/springuni/springuni-particles/tree/master/springuni-auth-rest" target="_blank" rel="external">springuni-auth-rest</a>提供用于用户管理的REST端点，它还将<a href="https://github.com/springuni/springuni-particles/tree/master/springuni-auth-model" target="_blank" rel="external">springuni-auth模型</a>作为传递依赖。<a href="https://github.com/springuni/springuni-particles/tree/master/springuni-auth-user-jpa" target="_blank" rel="external">springuni-auth-user-jpa</a>负责持久化的用户数据，并且将来可以替换其他持久性机制。</p>
<p>第三个依赖是MySQL连接器，也可以根据需要进行替换。</p>
<p>从<a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>的角度来说，以下两个依赖关系是重要的：<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web" target="_blank" rel="external">spring-boot-starter-web</a>和<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat" target="_blank" rel="external">spring-boot-starter-tomcat</a>。为了能够创建一个Web应用程序，我们需要它们。</p>
<h3 id="应用程序的入口点"><a href="#应用程序的入口点" class="headerlink" title="应用程序的入口点"></a>应用程序的入口点</h3><p>在没有Spring Boot的情况下执行此步骤将会非常费力（必须在web.xml中注册上下文监听器并为应用程序设置容器）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.springuni.auth.domain.model.AuthJpaRepositoryConfiguration;</div><div class="line"><span class="keyword">import</span> com.springuni.auth.domain.service.AuthServiceConfiguration;</div><div class="line"><span class="keyword">import</span> com.springuni.auth.rest.AuthRestConfiguration;</div><div class="line"><span class="keyword">import</span> com.springuni.auth.security.AuthSecurityConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Import</span>(&#123;</div><div class="line">    AuthJpaRepositoryConfiguration.class,</div><div class="line">    AuthServiceConfiguration.class,</div><div class="line">    AuthRestConfiguration.class,</div><div class="line">    AuthSecurityConfiguration.class</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    SpringApplication.run(Application.class, args);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这几乎是一个虚拟模块，所有重要的举措都归结为不得不导入一些基于Java的Spring配置类。</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>Spring Boot附带了一个非常有用的Maven插件，可以将整个项目重新打包成一个可执行的überJAR。它也能够在本地启动项目。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn -pl springuni-auth-boot spring-boot:run</div></pre></td></tr></table></figure>
<h3 id="测试驱动用户管理应用程序"><a href="#测试驱动用户管理应用程序" class="headerlink" title="测试驱动用户管理应用程序"></a>测试驱动用户管理应用程序</h3><p>第一部分定义了所有可用的REST端点，现在已经有一些现实世界的用例来测试它们。</p>
<h4 id="注册新用户"><a href="#注册新用户" class="headerlink" title="注册新用户"></a>注册新用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -XPOST http://localhost:5000/users <span class="_">-d</span> \</div><div class="line"><span class="string">'&#123;</span></div><div class="line"> "screenName":"test2",</div><div class="line"> "contactData": &#123;</div><div class="line">   "email": "test2@springuni.com"</div><div class="line"> &#125;,</div><div class="line"> "password": "test"</div><div class="line">&#125;'</div><div class="line">HTTP/1.1 200</div></pre></td></tr></table></figure>
<h3 id="首次登录尝试"><a href="#首次登录尝试" class="headerlink" title="首次登录尝试"></a>首次登录尝试</h3><p>此时首次登录尝试不可避免地会失败，因为用户帐号尚未确认</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -D- -XPOST http://localhost:5000/auth/login <span class="_">-d</span> <span class="string">'&#123; "username":"test5", "password": "test" &#125;'</span> </div><div class="line">HTTP/1.1 401 </div><div class="line">&#123;</div><div class="line"> <span class="string">"statusCode"</span> : 401,</div><div class="line"> <span class="string">"reasonPhrase"</span> : <span class="string">"Unauthorized"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="确认帐号"><a href="#确认帐号" class="headerlink" title="确认帐号"></a>确认帐号</h3><p>一般情况下，最终用户将收到一封电子邮件中的确认链接，点击该链接会启动以下请求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -D- -XPUT http://localhost:5000/users/620366184447377/77<span class="built_in">fc</span>990b-210c-4132-ac93-ec50522ba06f</div><div class="line">HTTP/1.1 200</div></pre></td></tr></table></figure>
<h3 id="第二次登录尝试"><a href="#第二次登录尝试" class="headerlink" title="第二次登录尝试"></a>第二次登录尝试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -D- -XPOST http://localhost:5000/auth/login <span class="_">-d</span> <span class="string">'&#123; "username":"test5", "password": "test" &#125;'</span></div><div class="line">HTTP/1.1 200</div><div class="line">X-Set-Authorization-Bearer: eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiI2MjA1OTkwNjIwMTQ4ODEiLCJzdWIiOiI2MjAzNjYxODQ0NDczNzciLCJleHAiOjE0OTcxMDQ3OTAsImlhdCI6MTQ5NzAxODM5MCwiYXV0aG9yaXRpZXMiOiI<span class="keyword">if</span>Q.U-GfabsdYidg-Y9eSp2lyyh7DxxaI-zaTOZISlCf3RjKQUTmu0-vm6DH80xYWE69SmoGgm07qiYM32JBd9d5oQ</div></pre></td></tr></table></figure>
<p>用户的电子邮件地址确认后，即可登录。</p>
<h2 id="下一步是什么？"><a href="#下一步是什么？" class="headerlink" title="下一步是什么？"></a>下一步是什么？</h2><p>正如我之前提到的，这个应用程序有很多工作要做。其中还有一些基本功能，也没有UI。您可以按照以下步骤进行：  <a href="https://github.com/springuni/springuni-particles/projects/1" target="_blank" rel="external">https://github.com/springuni/springuni-particles/projects/1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构建用户管理微服务&quot;&gt;&lt;a href=&quot;#构建用户管理微服务&quot; class=&quot;headerlink&quot; title=&quot;构建用户管理微服务&quot;&gt;&lt;/a&gt;构建用户管理微服务&lt;/h1&gt;&lt;p&gt;翻译自:&lt;a href=&quot;https://springuni.com/user-management-microservice-part-1/&quot;&gt;https://springuni.com/user-management-microservice-part-1/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="https://muyinchen.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="https://muyinchen.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
