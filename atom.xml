<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muyinchen.github.io/"/>
  <updated>2017-01-10T09:34:13.282Z</updated>
  <id>https://muyinchen.github.io/</id>
  
  <author>
    <name>知秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重走Java基础之Streams(一)</title>
    <link href="https://muyinchen.github.io/2017/01/10/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams(%E4%B8%80)/"/>
    <id>https://muyinchen.github.io/2017/01/10/重走Java基础之Streams(一)/</id>
    <published>2017-01-10T09:31:05.585Z</published>
    <updated>2017-01-10T09:34:13.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重走Java基础之Streams-一"><a href="#重走Java基础之Streams-一" class="headerlink" title="重走Java基础之Streams(一)"></a>重走Java基础之Streams(一)</h1><p>因为经常逛<code>stackoverflow</code>,最近也在看reactive和storm以及前一阵子也用流式ORM框架<code>speedment</code>与<code>Springboot</code>整合改造了<a href="https://github.com/muyinchen/migoshop2.0" target="_blank" rel="external">migo2.0</a>中的单点登录,深深的感受到java8已经融入我们很深了，尤其是Spring5对其进行大力支持，觉得有必要再对自己的知识整理一下，顺带就把<code>stackoverflow</code>一些东西自己拿过来整理翻译一下，里面也会加入一些自己的理解 版本只关注于Java SE 8<br> <a id="more"></a></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>流表示一系列元素并支持不同类型的操作来对这些元素执行计算。在Java 8中，Collection接口有两种方法来生成Stream </p>
<ul>
<li>1）stream()和  </li>
<li>2） parallelStream()<br> 流操作包括中间或终端。 中间操作返回一个流，所以我们可以链接多个中间操作而不使用分号。 终端操作是void的或返回非流结果。</li>
</ul>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h4 id="Using-Streams"><a href="#Using-Streams" class="headerlink" title="Using Streams"></a>Using Streams</h4><p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>是可以执行顺序和并行聚合操作的一系列元素 。 任何给定的“Stream”都可能有无限量的数据流过它。 你所得到的结果是从“Stream”接收的数据在到达时被单独处理，而不是完全对数据执行批处理。 当与<a href="https://stackoverflow.com/documentation/java/91/lambda-expressions" target="_blank" rel="external">lambda表达式</a> 结合时，它们提供了使用函数方法对数据序列执行操作的简明方法。</p>
<p><strong>Example:</strong> (<a href="https://ideone.com/IUWRdv" target="_blank" rel="external">see it work on Ideone</a>)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; fruitStream = Stream.of(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"pear"</span>, <span class="string">"kiwi"</span>, <span class="string">"orange"</span>);</div><div class="line"></div><div class="line">fruitStream.filter(s -&gt; s.contains(<span class="string">"a"</span>))</div><div class="line">           .map(String::toUpperCase)</div><div class="line">           .sorted()</div><div class="line">           .forEach(System.out::println);</div></pre></td></tr></table></figure>
<p><strong>Output:</strong></p>
<blockquote>
<p>APPLE<br>BANANA<br>ORANGE<br>PEAR</p>
</blockquote>
<p>上述代码执行的操作可以总结如下：</p>
<ol>
<li><p>使用静态工厂方法<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#of-T...-" target="_blank" rel="external"><code>Stream.of(values)</code></a>创建一个包含fruit <code>String</code>的顺序排序<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>的<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a> 元素</p>
</li>
<li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#filter-java.util.function.Predicate-" target="_blank" rel="external"><code>filter()</code></a>操作仅保留与给定谓词（由谓词返回true测试时的元素）匹配的元素。 在这种情况下，它保留含有“a”的元素。 谓词作为lambda表达式给出。</p>
</li>
<li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#map-java.util.function.Function-" target="_blank" rel="external"><code>map()</code></a> 操作转换 每个元素使用给定的函数，称为映射器。 在这种情况下，每个fruit <code>String</code>使用<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="external">method-reference</a>映射到将string字符串转换为大写版本<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toUpperCase--" target="_blank" rel="external"><code>String::toUppercase</code></a>。</p>
<blockquote>
<p><strong>Note</strong> 如果映射函数返回与其输入参数不同的类型，那么<code>map()</code>操作将返回具有不同泛型类型的流。 例如在一个<code>Stream</code>调用<code>.map(String :: isEmpty)</code>返回一个<code>Stream&lt;Boolean&gt;</code></p>
</blockquote>
</li>
<li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted--" target="_blank" rel="external"><code>sorted()</code></a>操作对<code>Stream</code>的元素进行排序 根据它们的自然排序（根据在’String’的情况下对所在字典的顺序，其实都知道）。</p>
</li>
</ol>
<p>5.最后， <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#forEach-java.util.function.Consumer-" target="_blank" rel="external"><code>forEach(action)</code></a> 操作执行一个动作，作用于“Stream”的每个元素，将其传递给一个 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted-java.util.Comparator-" target="_blank" rel="external">Consumer</a>。 在该示例中，每个元素只是被打印到控制台。 该操作是终端操作，因此不可能再次进行操作。<br>6.</p>
<blockquote>
<p><strong>Note</strong> 在<code>Stream</code>中定义的操作之所以被执行，是因为最后有终端操作。 假如没有终端操作，’Stream’将不被处理，因为’Stream’输出不被任何终端操作使用(省的浪费计算资源，所以很多书上称之为被动式foreach)。</p>
</blockquote>
<p>[<img src="http://og0sybnix.bkt.clouddn.com/6p8aM.png" alt="Chained operations"></p>
<p>操作（如上所示）链接在一起以形成可以被视为对数据的查询</p>
<hr>
<h2 id="Reusing-Streams"><a href="#Reusing-Streams" class="headerlink" title="Reusing Streams"></a>Reusing Streams</h2><p>一个<code>Stream</code>不能重复使用。 一旦调用任何中间或终端操作，“Stream”对象将变得不可用。 <code>Stream</code>代替地使用中间<code>Stream</code>对象以便将中间操作链接在一起通过一系列<code>Stream</code>操作来生成一个<code>Stream</code>对象作为中间对象，最后再调用这个生成的<code>Stream</code>对象来完成最终的操作，最后一步的操作只能进行一次，之后，此流已经没了(生命周期已结束)。</p>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; stream =</div><div class="line">    Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</div><div class="line">        .filter(s -&gt; s.startsWith(<span class="string">"a"</span>));</div><div class="line"></div><div class="line">stream.anyMatch(s -&gt; <span class="keyword">true</span>);  <span class="comment">// The Stream has been used and is now consumed.</span></div><div class="line">stream.noneMatch(s -&gt; <span class="keyword">true</span>); <span class="comment">// IllegalStateException; stream was already used</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Closing-Streams"><a href="#Closing-Streams" class="headerlink" title="Closing Streams"></a>Closing Streams</h2><p><code>Stream</code>接口扩展了 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html" target="_blank" rel="external"><code>AutoCloseable</code></a>。Streams可以通过调用 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html#close--" target="_blank" rel="external"><code>close</code></a>方法或使用try-with -resource语句来关闭。</p>
<blockquote>
<p><strong>请注意，Stream通常不必关闭。</strong>仅需要关闭在IO通道上运行的流。 大多数<code>Stream</code> 型不对资源操作，因此不需要关闭。</p>
</blockquote>
<p><code>Stream</code> 应该关闭的示例用例是，当您从文件创建一个<code>Stream</code> 行时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(<span class="keyword">final</span> Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">"somePath"</span>)))&#123;</div><div class="line">    lines.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Stream</code>接口也声明了<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#onClose-java.lang.Runnable-" target="_blank" rel="external"><code>Stream.onClose()</code></a> 方法，它允许你注册 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html" target="_blank" rel="external"><code>Runnable</code></a>处理程序，当 流关闭。 一个示例用例是产生流的代码需要知道它何时被消耗以执行一些清理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Stream&lt;String&gt;streamAndDelete(Path path) <span class="keyword">throws</span> IOException &#123;</div><div class="line">    <span class="keyword">return</span> Files.lines(path)</div><div class="line">        .onClose(()-&gt;someClass.deletePath(path));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行处理程序只有在调用<code>close()</code> 方法时才会执行，例如通过try-with-resources：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Path myPath = Paths.get(<span class="string">"somePath"</span>);</div><div class="line"></div><div class="line"><span class="keyword">try</span>(<span class="keyword">final</span> Stream&lt;String&gt; lines = streamAndDelete(myPath))&#123;</div><div class="line">    lines.forEach(System.out::println);</div><div class="line">&#125;</div><div class="line">Files.exists(myPath); <span class="comment">// returns false</span></div></pre></td></tr></table></figure>
<p>If close() isn’t called, explicitly or implicitly, then the handler will not be called either:<br>如果没有明确或隐式地调用<code>close()</code>，那么处理程序不会被调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">streamAndDelete(myPath)</div><div class="line">    .forEach(System.out::println);</div><div class="line">Files.exists(myPath); <span class="comment">// returns true</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Processing-Order"><a href="#Processing-Order" class="headerlink" title="Processing Order"></a>Processing Order</h2><p><code>Stream</code>对象的处理可以是顺序或 <a href="http://stackoverflow.com/documentation/java/88/streams/2785/parallel-stream#t=201607281158351104612" target="_blank" rel="external">parallel(并行)</a>。</p>
<p>在<strong> sequential </strong>模式中，按照“Stream”的源的顺序处理元素。 如果<code>Stream</code>是有序的（例如 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html" target="_blank" rel="external"><code>SortedMap</code></a>实现或<a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="external"><code>List</code></a>，处理过程保证匹配源的排序。 然而，在其他情况下，应注意不要依赖于顺序（参见：<a href="http://stackoverflow.com/q/1882762/1667004" target="_blank" rel="external">是Java的<code>HashMap`` keySet()</code>迭代顺序一致？</a>）。</p>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">42</span>); </div><div class="line"></div><div class="line"><span class="comment">// sequential </span></div><div class="line"><span class="keyword">long</span> howManyOddNumbers = integerList.stream()</div><div class="line">                                    .filter(e -&gt; (e % <span class="number">2</span>) == <span class="number">1</span>).count(); </div><div class="line"></div><div class="line">System.out.println(howManyOddNumbers); <span class="comment">// Output: 2</span></div></pre></td></tr></table></figure>
<p><a href="https://ideone.com/FuMz1c" target="_blank" rel="external">Live on Ideone</a></p>
<p><strong>并行</strong>模式允许在多个核上使用多个线程，但不能保证处理元素的顺序。</p>
<p>如果在顺序的 <code>Stream</code> 上虽然调用了多个方法，则不一定必须要调用每个方法。 例如，如果一个 <code>Stream</code> 被过滤，并且元素的数量减少到一，则不会发生对诸如<code>sort</code>的方法的后续调用。 这可以提高顺序的<code>Stream</code>的性能 - 这是一个并行的<code>Stream</code>不可能实现的优化。</p>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// parallel</span></div><div class="line"><span class="keyword">long</span> howManyOddNumbersParallel = integerList.parallelStream()</div><div class="line">                                            .filter(e -&gt; (e % <span class="number">2</span>) == <span class="number">1</span>).count();</div><div class="line"></div><div class="line">System.out.println(howManyOddNumbersParallel); <span class="comment">// Output: 2</span></div></pre></td></tr></table></figure>
<p><a href="https://ideone.com/FuMz1c" target="_blank" rel="external">Live on Ideone</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重走Java基础之Streams-一&quot;&gt;&lt;a href=&quot;#重走Java基础之Streams-一&quot; class=&quot;headerlink&quot; title=&quot;重走Java基础之Streams(一)&quot;&gt;&lt;/a&gt;重走Java基础之Streams(一)&lt;/h1&gt;&lt;p&gt;因为经常逛&lt;code&gt;stackoverflow&lt;/code&gt;,最近也在看reactive和storm以及前一阵子也用流式ORM框架&lt;code&gt;speedment&lt;/code&gt;与&lt;code&gt;Springboot&lt;/code&gt;整合改造了&lt;a href=&quot;https://github.com/muyinchen/migoshop2.0&quot;&gt;migo2.0&lt;/a&gt;中的单点登录,深深的感受到java8已经融入我们很深了，尤其是Spring5对其进行大力支持，觉得有必要再对自己的知识整理一下，顺带就把&lt;code&gt;stackoverflow&lt;/code&gt;一些东西自己拿过来整理翻译一下，里面也会加入一些自己的理解 版本只关注于Java SE 8&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 8" scheme="https://muyinchen.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>在Spring Framework 5.0中引入Kotlin支持</title>
    <link href="https://muyinchen.github.io/2017/01/09/%E5%9C%A8Spring%20Framework%205.0%E4%B8%AD%E5%BC%95%E5%85%A5Kotlin%E6%94%AF%E6%8C%81/"/>
    <id>https://muyinchen.github.io/2017/01/09/在Spring Framework 5.0中引入Kotlin支持/</id>
    <published>2017-01-09T14:48:07.633Z</published>
    <updated>2017-01-09T15:42:44.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Spring-Framework-5-0中引入Kotlin支持"><a href="#在Spring-Framework-5-0中引入Kotlin支持" class="headerlink" title="在Spring Framework 5.0中引入Kotlin支持"></a>在Spring Framework 5.0中引入Kotlin支持</h1><p>因最近一直在业余做<a href="https://www.gitbook.com/book/muyinchen/spring-framework-5-0-0-m3/details" target="_blank" rel="external">Spring Framework 5.0 M4</a> 文档的翻译工作(也就进度稍慢了)，所以对5里面的各种比较关注，尤其是新东西，发现就拿来先翻译分享给大家了<br><a id="more"></a></p>
<p>我们几个月前有介绍关于<a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin" target="_blank" rel="external">Kotlin在start.spring.io上的支持</a>，我们有一直在进行工作，以确保Spring和<a href="https://kotlin.link/" target="_blank" rel="external">Kotlin</a>在一起玩得很好。 Kotlin的一个关键优势是它提供了一个与用Java编写的库之间非常好的<a href="https://kotlinlang.org/docs/reference/java-interop.html" target="_blank" rel="external">互操作性</a>。但是有更多的方法可以进一步，允许编写完全成熟的Kotlin代码，当开发您的下一个Spring应用程序。除了Spring Framework对Java 8的支持，Kotlin应用程序可以利用类似功能的Web或bean注册API，还有其他Kotlin专用功能，应该可以让你的生产力水平达到一个新的高度。</p>
<p>这就是为什么我们在<a href="https://spring.io/blog/2016/12/30/spring-framework-5-0-m4-released" target="_blank" rel="external">Spring Framework 5.0 M4</a>中引入了一个专门的Kotlin支持，我想在这篇博客中总结的功能，旨在使您的开发人员体验无缝的在Spring中一起使用这些技术。你可以使用<a href="https://jira.spring.io/issues/?filter=15463" target="_blank" rel="external">这个链接</a>在Spring Framework bug  tracker中查找Kotlin的相关问题。</p>
<h2 id="利用Kotlin可空信息-nullable-information"><a href="#利用Kotlin可空信息-nullable-information" class="headerlink" title="利用Kotlin可空信息(nullable information)"></a>利用Kotlin可空信息(nullable information)</h2><p>Spring最初基于来自<a href="https://github.com/rocketraman" target="_blank" rel="external">Raman Gupta</a>的社区贡献，现在利用<a href="https://kotlinlang.org/docs/reference/null-safety.html" target="_blank" rel="external">Kotlin null-safety support</a>以确定是否需要HTTP参数，而不必显式地定义<code>required</code>属性。 这意味着<code>@RequestParam name：String?</code>被视为不需要(not required)，<code>@RequestParam name：String</code>视为必需。 这也支持Spring消息<code>@Header</code>注解。</p>
<p>以类似的方式，使用<code>@Autowired</code>或<code>@Inject</code>的Spring bean注入使用此信息来知道是否需要bean。 <code>@Autowired lateinit var foo：Foo</code>意味着<code>Foo</code>类型的bean必须在应用程序上下文中注册，而<code>@Autowired lateinit var foo：Foo?</code>不会引发错误，如果这样的bean不存在。</p>
<h2 id="RestTemplate和Functional-Web-API的扩展"><a href="#RestTemplate和Functional-Web-API的扩展" class="headerlink" title="RestTemplate和Functional Web API的扩展"></a>RestTemplate和Functional Web API的扩展</h2><p><a href="https://kotlinlang.org/docs/reference/extensions.html" target="_blank" rel="external">Kotlin extensions</a> 允许以非侵入方式扩展现有的API，提供了一个更好的替代实用程序类或在Kotlin特定类层次结构中添加Kotlin专用功能到Spring中。一些类似<a href="https://github.com/MarioAriasC" target="_blank" rel="external">Mario Arias</a>的<a href="https://github.com/MarioAriasC/KotlinPrimavera/wiki" target="_blank" rel="external">KotlinPrimavera</a>已经展示了我们可以带给Spring的各种Kotlin助手API，以允许编写更多的惯用代码。使用Spring Framework 5，我们集成了Spring框架中最有用和最受欢迎的扩展，并添加了新的扩展。</p>
<p>例如，<a href="https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters" target="_blank" rel="external">Kotlin reified type parameters</a>为JVM <a href="https：// docs .oracle.com / javase / tutorial / java / generics / erasure.html">泛型类型擦除</a>提供了一个解决方法，因此我们介绍了一些扩展，以利用此功能在可能的情况下提供更好的API。</p>
<p>这允许为RestTemplate提供方便的API（感谢来自Netflix的<a href="https://github.com/jkschneider" target="_blank" rel="external">Jon Schneider</a>为此做出贡献）。例如，要在Java中检索“Foo”对象的列表，必须写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Foo&gt; result = restTemplate.exchange(url, HttpMethod.GET, <span class="keyword">null</span>, <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;Foo&gt;&gt;() &#123; &#125;).getBody();</div></pre></td></tr></table></figure></p>
<p>或者，如果你使用中间数组：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Foo&gt; result = Arrays.asList(restTemplate.getForObject(url, Foo[].class));</div></pre></td></tr></table></figure></p>
<p>而在Kotlin与Spring Framework 5扩展中，你将能够写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val result : List&lt;Foo&gt; = restTemplate.getForObject(url)</div></pre></td></tr></table></figure>
<p>请注意，Kotlin扩展名是静态解析的，你必须导入它们。 在上面的示例中，您需要添加<code>import org.springframework.web.client.RestOperationsExtension.getForObject</code>才能使用它。 Kotlin扩展通常由IDE（如IntelliJ IDEA）（如静态导入）自动建议，但对于嵌套在容器<code>object</code>中的扩展，它仍然无效（您可以投票<a href="https：//youtrack.jetbrains .com / issue / KT-15440">KT-15440</a>），所以直到它被修复，你将不得不手动添加Spring Kotlin扩展导入。</p>
<p>Spring Framework 5.0 M4中目前可用的“RestTemplate”或功能性Web API扩展包括：</p>
<ul>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtension.kt" target="_blank" rel="external">RestOperationsExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/server/ServerRequestExtension.kt" target="_blank" rel="external">ServerRequestExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/BodyInsertersExtension.kt" target="_blank" rel="external">BodyInsertersExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/BodyExtractorsExtension.kt" target="_blank" rel="external">BodyExtractorsExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/client/ClientResponseExtension.kt" target="_blank" rel="external">ClientResponseExtension</a></li>
</ul>
<p>这些扩展还提供了支持本地Kotlin<code>KClass</code>的成员函数，允许你指定<code>Foo :: class</code>参数而不是<code>Foo :: class.java</code>。</p>
<h2 id="Reactor-Kotlin-extensions"><a href="#Reactor-Kotlin-extensions" class="headerlink" title="Reactor Kotlin extensions"></a>Reactor Kotlin extensions</h2><p><a href="https://projectreactor.io/" target="_blank" rel="external">Reactor</a>是Spring Framework 5.0的反应基础，并且有很好的机会你将使用它的<a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html" target="_blank" rel="external">Mono</a>，<a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html" target="_blank" rel="external">Flux</a>和[StepVerifier] (<a href="https://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.html" target="_blank" rel="external">https://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.html</a>) 开发reactive Web应用程序时的API。</p>
<p>所以今天我们还通过新的<a href="https://github.com/reactor/reactor-kotlin" target="_blank" rel="external">reactor-kotlin</a>项目在Reactor中引入Kotlin支持！它提供了扩展，能够通过写入<code>foo.toMono()</code>从任何类实例创建<code>Mono</code>实例，许多人喜欢<code>Mono.just(foo)</code>。它还支持例如使用<code>stream.toFlux()</code>从Java 8<code>Stream</code>实例创建<code>Flux</code>。还提供了<code>Iterable</code>，<code>CompletableFuture</code>和<code>Throwable</code>扩展以及基于KClass的Reactor API变体。</p>
<p>这仍然是这个项目的早期，所以如果你想提供没有的功能，随时自由地<a href="https://github.com/reactor/reactor-kotlin/pulls" target="_blank" rel="external">贡献</a>你自己的扩展。</p>
<h2 id="Functional-bean-registration-with-Kotlin"><a href="#Functional-bean-registration-with-Kotlin" class="headerlink" title="Functional bean registration with Kotlin"></a>Functional bean registration with Kotlin</h2><p>Spring Framework 5.0引入了一种新的方式来注册bean，使用lambda作为XML或JavaConfig的替代，使用<code>@Configuration</code>和<code>@Bean</code>。 简而言之，它使得有可能注册bean与一个<code>Supplier</code> lambda，充当一个<code>FactoryBean</code>。</p>
<p>在Java中，你将会写如下的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</div><div class="line">context.registerBean(Foo.class);</div><div class="line">context.registerBean(Bar.class, () -&gt; <span class="keyword">new</span> </div><div class="line">	Bar(context.getBean(Foo.class))</div><div class="line">);</div></pre></td></tr></table></figure>
<p>而在Kotlin中，reified类型参数允许我们简单地写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">val context = AnnotationConfigApplicationContext()</div><div class="line">context.registerBean(Foo::<span class="class"><span class="keyword">class</span>)</span></div><div class="line"><span class="title">context</span>.<span class="title">registerBean</span>(<span class="title">Supplier</span> &#123;</div><div class="line">	Bar(context.getBean(Foo::<span class="class"><span class="keyword">class</span>))</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>你可以看到Spring应用程序的一个具体例子，在<a href="https://github.com/mix-it/mixit/" target="_blank" rel="external">https://github.com/mix-it/mixit /</a>使用函数<a href="https://github.com/mix-it/mixit/blob/master/src/main/kotlin/mixit/controller/UserController.kt" target="_blank" rel="external">web</a>和<a href="https://github.com/mix-it/mixit/blob/master/src/main/kotlin/mixit/Application.kt" target="_blank" rel="external"> bean注册</a>API。</p>
<p><code>ApplicationContext</code>相关Kotlin可用扩展如下：</p>
<ul>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtension.kt" target="_blank" rel="external">BeanFactoryExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtension.kt" target="_blank" rel="external">ListableBeanFactoryExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtension.kt" target="_blank" rel="external">GenericApplicationContextExtension</a></li>
</ul>
<h2 id="No-need-to-declare-your-bean-class-as-open-anymore"><a href="#No-need-to-declare-your-bean-class-as-open-anymore" class="headerlink" title="No need to declare your bean class as open anymore"></a>No need to declare your bean class as open anymore</h2><p>直到现在，使用Kotlin构建Spring Boot应用程序时遇到的几个问题之一是需要在每个类上添加一个<code>open</code>关键字，并且使用CGLIB（如<code>@Configuration</code>类）来代替Spring bean的成员函数。 这个需求的根本原因来自于在Kotlin里的<a href="https://discuss.kotlinlang.org/t/classes-final-by-default/166" target="_blank" rel="external">classes are final by default</a>这个事实。</p>
<p>幸运的是，Kotlin 1.0.6现在提供了一个<code>kotlin-spring</code>插件，在默认情况下打开类和它们的成员函数，注解或元注解使用以下注解之一：</p>
<ul>
<li><code>@Component</code></li>
<li><code>@Async</code></li>
<li><code>@Transactional</code></li>
<li><code>@Cacheable</code></li>
</ul>
<p>元注解支持意味着用<code>@Configuration</code>，<code>@Controller</code>，<code>@RestController</code>，<code>@Service</code>或<code>@Repository</code>注解的类会自动打开，因为这些注解是使用<code>@Component</code>进行的元注解。</p>
<p>我们更新了<a href="http://start.spring.io/#!language=kotlin）" target="_blank" rel="external">start.spring.io</a>默认启用它。 你可以看看<a href="https://blog.jetbrains.com/kotlin/2016/12/kotlin-1-0-6-is-here/" target="_blank" rel="external">这个Kotlin 1.0.6博客帖子</a>了解更多详情，包括 新的<code>kotlin-jpa</code>和<code>kotlin-noarg</code>插件对Spring Data实体非常有用。</p>
<h2 id="Kotlin-based-Gradle-build-configuration"><a href="#Kotlin-based-Gradle-build-configuration" class="headerlink" title="Kotlin based Gradle build configuration"></a>Kotlin based Gradle build configuration</h2><p>回到5月，Gradle <a href="https://blog.gradle.org/kotlin-meets-gradle" target="_blank" rel="external">宣布</a>，他们将支持在Groovy之外的Kotlin中编写构建和配置文件。这使得可以在IDE中具有完全自动完成和验证，因为这些文件是常规静态类型的Kotlin脚本文件。这很可能成为基于Kotlin的项目的自然选择，但这也对Java项目也很有价值。</p>
<p>自5月以来，<a href="https://github.com/gradle/gradle-script-kotlin" target="_blank" rel="external">gradle-script-kotlin</a>项目不断发展，现在可以使用2个警告：</p>
<ul>
<li>你需要Kotlin 1.1-EAP IDEA插件来获得自动完成（但如果你使用<code>kotlin-spring</code>插件，因为<code>1.1-M04</code>不能可靠地使用这个插件，等待Kotlin<code>1.1-M05</code>）</li>
<li>文档不完整，但Gradle团队对Kotlin Slack的#gradle频道非常有帮助。</li>
</ul>
<p>两个<a href="https://github.com/sdeleuze/spring-boot-kotlin-demo）和[mixit]（https://github.com/mix-it/mixit/" target="_blank" rel="external">spring-boot-kotlin-demo</a>项目使用这种基于Kotlin的Gradle构建，可以随意看看。我们)在start.spring.io<a href="https://github.com/spring-io/initializr/issues/334" target="_blank" rel="external">讨论</a>上添加了这样的支持。</p>
<h2 id="Kotlin-Script-based-templates"><a href="#Kotlin-Script-based-templates" class="headerlink" title="Kotlin Script based templates"></a>Kotlin Script based templates</h2><p>从4.3版本开始，Spring Framework提供了一个<a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html" target="_blank" rel="external">ScriptTemplateView</a>使用支持<a href="https://www.jcp.org/en/jsr/detail?id=223" target="_blank" rel="external">JSR-223</a>的脚本引擎来渲染模板。 Kotlin 1.1-M04提供了这样的支持，并允许渲染基于Kotlin的模板，有关详细信息，请参阅<a href="https://github.com/spring-projects/spring-framework/commit/badde3a479a53e1dd0777dd1bd5b55cb1021cf9e" target="_blank" rel="external">此提交</a>。</p>
<p>这使得出现了一些有趣的使用情况，如使用<a href="https://github.com/Kotlin/kotlinx.html" target="_blank" rel="external">kotlinx.html</a>DSL或简单的Kotlin multiline(多线)’String’插值，编写类型安全模板，例如此<a href="https://github.com/sdeleuze/kotlin-script-templating" target="_blank" rel="external">kotlin -script-templating</a>项目。 这可以允许您在IDE中编写具有完全自动完成功能和重构支持的这类模板：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import io.spring.demo.User</div><div class="line">import io.spring.demo.joinToLine</div><div class="line"></div><div class="line">"""</div><div class="line">$&#123;include("header", bindings)&#125;</div><div class="line">&lt;h1&gt;Title : $title&lt;/h1&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    $&#123;(users as List&lt;User&gt;).joinToLine&#123; "&lt;li&gt;User $&#123;it.firstname&#125; $&#123;it.lastname&#125;&lt;/li&gt;" &#125;&#125;</div><div class="line">&lt;/ul&gt;</div><div class="line">$&#123;include("footer")&#125;</div><div class="line">"""</div></pre></td></tr></table></figure>
<p>这个功能仍在进行中，但我正在与Kotlin团队合作，暂时使其准备好对Spring Framework 5.0 GA上的嵌套模板和i18n在MVC和Reactive两方面的支持。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我使用Kotlin编写Spring Boot应用程序越多，我觉得这两种技术有着共同的目标，允许您使用表达性，简短和可读的代码来更高效地编写应用程序，而Spring Framework 5 Kotlin支持将这些技术以更加自然，简单和强大的方式来展现给我们。</p>
<p>Kotlin可以用来编写<a href="https://github.com/sdeleuze/spring-boot-kotlin-demo" target="_blank" rel="external">基于注解的Spring Boot应用程序</a>，但作为一种新的<a href="https://github.com/mix-it/mixit/" target="_blank" rel="external">functional and reactive applications</a>也将是一种很好的尝试，Spring Framework 5.0将会启用。</p>
<p>Kotlin团队做了一个伟大的工作，修复几乎所有的bug点，我们报告，所以非常感谢他们。即将到来的Kotlin 1.1版本预计也修复<a href="https://youtrack.jetbrains.com/issue/KT-11235" target="_blank" rel="external">KT-11235</a>，以允许指定数组注解标记单个属性值，无须使用<code>arrayOf()</code>。你将面临的主要问题可能是<a href="https://youtrack.jetbrains.com/issue/KT-14984" target="_blank" rel="external">KT-14984</a>，它将需要明确指定lambda类型（如<code>Supplier {}</code>或<code>HandlerFunction {}</code>）其中只需指定<code>{}</code>应该就足够了。</p>
<p>通过转到<a href="https://start.spring.io/#!language=kotlin" target="_blank" rel="external">start.spring.io</a>并生成一个Spring Boot<code>2.0.0（SNAPSHOT）</code>项目，可以自由测试Spring Framework 5.0 Kotlin支持并在这里或者在<a href="http://slack.kotlinlang.org/" target="_blank" rel="external">Kotlin Slack</a>的“＃spring”频道向我们发送您的反馈。你也可以<a href="https://github.com/spring-projects/spring-framework/pulls" target="_blank" rel="external">贡献</a>你需要的Kotlin扩展;-)</p>
<p>翻译自：<a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" target="_blank" rel="external">https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0</a></p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在Spring-Framework-5-0中引入Kotlin支持&quot;&gt;&lt;a href=&quot;#在Spring-Framework-5-0中引入Kotlin支持&quot; class=&quot;headerlink&quot; title=&quot;在Spring Framework 5.0中引入Kotlin支持&quot;&gt;&lt;/a&gt;在Spring Framework 5.0中引入Kotlin支持&lt;/h1&gt;&lt;p&gt;因最近一直在业余做&lt;a href=&quot;https://www.gitbook.com/book/muyinchen/spring-framework-5-0-0-m3/details&quot;&gt;Spring Framework 5.0 M4&lt;/a&gt; 文档的翻译工作(也就进度稍慢了)，所以对5里面的各种比较关注，尤其是新东西，发现就拿来先翻译分享给大家了&lt;br&gt;
    
    </summary>
    
      <category term="Spring5新特性" scheme="https://muyinchen.github.io/categories/Spring5%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Spring5" scheme="https://muyinchen.github.io/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring缓存数据</title>
    <link href="https://muyinchen.github.io/2017/01/09/%E4%BD%BF%E7%94%A8Spring%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <id>https://muyinchen.github.io/2017/01/09/使用Spring缓存数据/</id>
    <published>2017-01-09T09:55:50.680Z</published>
    <updated>2017-01-09T09:55:38.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Spring缓存数据"><a href="#使用Spring缓存数据" class="headerlink" title="使用Spring缓存数据"></a>使用Spring缓存数据</h1><p>本指南将指导您完成在Spring所托管bean上启用缓存的过程。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>您将构建一个应用程序，在一个简单的book repository中启用缓存。</p>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那        里开始工作 。</li>
</ul>
<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2><p>与大多数[Spring 入门指南]一样(<a href="https://spring.io/guides)，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。" target="_blank" rel="external">https://spring.io/guides)，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。</a> 无论如何，你最终得到工作代码。</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-caching/archive/master.zip" target="_blank" rel="external">Download</a>  并解压缩本指南的源代码仓库，或使用  <a href="https://spring.io/understanding/Git" target="_blank" rel="external">Git</a>: <code>git clone https://github.com/spring-guides/gs-caching.git</code></li>
<li>cd 到 <code>gs-caching/initial</code></li>
<li>跳转到<a href="https://spring.io/guides/gs/caching/#initial" target="_blank" rel="external">Create a Redis message receiver</a>.</li>
</ul>
<p><strong>当你做完这一切</strong>,  你可以根据 <code>gs-caching/complete</code>中的代码检查结果.</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序时，但是需要使用<a href="http://gradle.org" target="_blank" rel="external">Gradle</a>和<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a> 来写你的代码。 如果你不熟悉任何一个，请参考<a href="https://spring.io/guides/gs/gradle" target="_blank" rel="external">使用Gradle构建Java项目</a>或<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>。</p>
<h3 id="Create-the-directory-structure"><a href="#Create-the-directory-structure" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<h3 id="Create-a-Gradle-build-file"><a href="#Create-a-Gradle-build-file" class="headerlink" title="Create a Gradle build file"></a>Create a Gradle build file</h3><p>下面是 <a href="https://github.com/spring-guides/gs-caching/blob/master/initial/build.gradle" target="_blank" rel="external">initial Gradle build file</a>.<br><code>build.gradle</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">'eclipse'</span></div><div class="line">apply plugin: <span class="string">'idea'</span></div><div class="line">apply plugin: <span class="string">'org.springframework.boot'</span></div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = <span class="string">'gs-caching'</span></div><div class="line">    version =  <span class="string">'0.1.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line">targetCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-cache"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-gradle-plugin" target="_blank" rel="external">Spring Boot gradle插件</a>提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和传递服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序，但是需要使用<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a>来构建你的代码。 如果你不熟悉Maven，请参考<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>.</p>
<h3 id="Create-the-directory-structure-1"><a href="#Create-the-directory-structure-1" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<p><code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-caching<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-maven-plugin" target="_blank" rel="external">Spring Boot Maven插件</a> 提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和运输服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><ul>
<li>阅读如何通过本指南直接导入<a href="https://spring.io/guides/gs/sts/" target="_blank" rel="external">Spring Tool Suite</a>。</li>
<li>阅读如何在<a href="https://spring.io/guides/gs/intellij-idea" target="_blank" rel="external">IntelliJ IDEA</a>上使用本指南。</li>
</ul>
<h2 id="Create-a-book-repository"><a href="#Create-a-book-repository" class="headerlink" title="Create a book repository"></a>Create a book repository</h2><p>首先，让我们为你的book创建一个非常简单的模型</p>
<p><code>src/main/java/hello/Book.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String isbn;</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String isbn, String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isbn = isbn;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIsbn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isbn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsbn</span><span class="params">(String isbn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isbn = isbn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> + <span class="string">"isbn='"</span> + isbn + <span class="string">'\''</span> + <span class="string">", title='"</span> + title + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和该model的存储库：</p>
<p><code>src/main/java/hello/BookRepository.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Book <span class="title">getByIsbn</span><span class="params">(String isbn)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您可以使用<a href="http://projects.spring.io/spring-data/" target="_blank" rel="external">Spring Data</a>在很多的SQL或NoSQL stores中提供repository仓库的实现，但是出于本指南的目的， 将使用模拟一些延迟（网络服务，慢延迟等）进行简单地的实现。</p>
<p><code>src/main/java/hello/SimpleBookRepository.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getByIsbn</span><span class="params">(String isbn)</span> </span>&#123;</div><div class="line">        simulateSlowService();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book(isbn, <span class="string">"Some book"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Don't do this at home</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">simulateSlowService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> time = <span class="number">3000L</span>;</div><div class="line">            Thread.sleep(time);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>simulateSlowService</code>是故意在每个<code>getByIsbn</code>调用中插入一个三秒延迟。 这是一个例子，稍后，你可以通过加入缓存来看到加速的效果。</p>
<h2 id="Using-the-repository"><a href="#Using-the-repository" class="headerlink" title="Using the repository"></a>Using the repository</h2><p>接下来，连接repository库并使用它访问一些书。</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@ SpringBootApplication是一个方便的注解，添加了以下所有内容：</p>
<ul>
<li>@ Configuration将类标记为应用程序上下文的bean定义的来源。</li>
<li>@ EnableAutoConfiguration告诉Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。</li>
<li>通常你会为Spring MVC应用程序添加@ EnableWebMvc，但是Spring Boot在类路径上看到<strong> spring-webmvc </strong>时会自动添加它。这将应用程序标记为Web应用程序，并激活关键行为，如设置一个“DispatcherServlet”。</li>
<li>@ ComponentScan告诉Spring在hello包中寻找其他组件，配置和服务，允许它找到控制器。</li>
</ul>
<p>main()方法使用Spring Boot的SpringApplication.run()方法来启动应用程序。你有注意到一行XML？没有<strong> web.xml </strong>文件。这个Web应用程序是100％纯Java，你不必处理配置任何管道或基础设施。</p>
<p>还有一个<a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-command-line-runner" target="_blank" rel="external"><code>CommandLineRunner</code></a>，注入<code>BookRepository</code>和 用不同的参数调用它几次。</p>
<p><code>src/main/java/hello/AppRunner.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AppRunner.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookRepository bookRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppRunner</span><span class="params">(BookRepository bookRepository)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookRepository = bookRepository;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">".... Fetching books"</span>);</div><div class="line">        logger.info(<span class="string">"isbn-1234 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-1234"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-4567 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-4567"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-1234 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-1234"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-4567 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-4567"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-1234 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-1234"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-1234 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-1234"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你尝试在此时运行应用程序，您会注意到它很慢，即使您几次检索完全相同的书。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2014-06-05 12:15:35.783  ... : .... Fetching books</div><div class="line">2014-06-05 12:15:40.783  ... : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2014-06-05 12:15:43.784  ... : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2014-06-05 12:15:46.786  ... : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div></pre></td></tr></table></figure>
<p>从时间戳可以看出，每本书花了大约三秒钟来检索，即使它是相同的标题被重复抓取。</p>
<h2 id="Enable-caching"><a href="#Enable-caching" class="headerlink" title="Enable caching"></a>Enable caching</h2><p>让我们在你的SimpleBookRepository上启用缓存，这样书就会被缓存在<code>books</code>缓存中。</p>
<p><code>src/main/java/hello/SimpleBookRepository.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@Cacheable</span>(<span class="string">"books"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getByIsbn</span><span class="params">(String isbn)</span> </span>&#123;</div><div class="line">        simulateSlowService();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book(isbn, <span class="string">"Some book"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Don't do this at home</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">simulateSlowService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> time = <span class="number">3000L</span>;</div><div class="line">            Thread.sleep(time);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您现在需要启用缓存注解的处理</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableCaching</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/EnableCaching.html" target="_blank" rel="external"><code>@EnableCaching</code></a>注解触发检查并处理每个Spring bean用于存在对公共方法的缓存注解。如果找到这样的注解，则自动创建代理以拦截方法调用并相应地处理缓存行为。</p>
<p>缓存处理的相应注解是<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html" target="_blank" rel="external"><code>Cacheable</code></a>，<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CachePut.html" target="_blank" rel="external"> <code>CachePut</code></a>和<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CacheEvict.html" target="_blank" rel="external"><code>CacheEvict</code></a>.有关更多详细信息，可以参考javadocs和<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html" target="_blank" rel="external">文档</a>。</p>
<p>Spring Boot会自动配置一个合适的<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/CacheManager.html" target="_blank" rel="external"><code>CacheManager</code></a>，作为相关缓存。有关更多详细信息，请参阅<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-caching.html" target="_blank" rel="external">Spring Boot文档</a>。</p>
<p>我们的示例不使用特定的缓存库，因此我们的缓存存储是使用<code>ConcurrentHashMap</code>的简单回退。缓存抽象支持各种各样的缓存库，并完全符合JSR-107（JCache）。</p>
<h3 id="Build-an-executable-JAR"><a href="#Build-an-executable-JAR" class="headerlink" title="Build an executable JAR"></a>Build an executable JAR</h3><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，易于跨不同环境将服务作为应用程序进行发布，维护版本和部署等等。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-caching-0.1.0.jar</div></pre></td></tr></table></figure>
<p>如果您使用Maven，可以使用<code>./mvnw spring-boot:run</code>运行应用程序。 或者你可以用<code>./mvnw clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-caching-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">build a classic WAR file</a></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Test-the-application"><a href="#Test-the-application" class="headerlink" title="Test the application"></a>Test the application</h2><p>现在缓存已启用，您可以再次执行它，并通过添加或不使用相同的isbn的额外调用查看差异。 你应该可以看到其产生明显的区别。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2016-09-01 11:12:47.033  .. : .... Fetching books</div><div class="line">2016-09-01 11:12:50.039  .. : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.044  .. : isbn-4567 --&gt;Book&#123;isbn=<span class="string">'isbn-4567'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.045  .. : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.045  .. : isbn-4567 --&gt;Book&#123;isbn=<span class="string">'isbn-4567'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.045  .. : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.045  .. : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div></pre></td></tr></table></figure>
<p>This excerpt from the console shows that the first time to fetch each title took three seconds, but each subsequent call was near instantaneous.<br>从控制台的这段日志显示，第一次获取每个标题花了三秒钟，但每个后续的访问接近瞬间。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜！ 你刚刚通过Springcache在托管bean上启用了缓存。</p>
<p>翻译自：<a href="https://spring.io/guides/gs/caching/" target="_blank" rel="external">https://spring.io/guides/gs/caching/</a></p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Spring缓存数据&quot;&gt;&lt;a href=&quot;#使用Spring缓存数据&quot; class=&quot;headerlink&quot; title=&quot;使用Spring缓存数据&quot;&gt;&lt;/a&gt;使用Spring缓存数据&lt;/h1&gt;&lt;p&gt;本指南将指导您完成在Spring所托管bean上启用缓存的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>关于编程路上的一些杂谈 多线程中锁的秘密(二)</title>
    <link href="https://muyinchen.github.io/2017/01/07/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E8%B0%88%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E9%94%81%E7%9A%84%E7%A7%98%E5%AF%86(%E4%BA%8C)/"/>
    <id>https://muyinchen.github.io/2017/01/07/关于编程路上的一些杂谈 多线程中锁的秘密(二)/</id>
    <published>2017-01-07T15:44:27.261Z</published>
    <updated>2017-01-07T15:56:57.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于编程路上的一些杂谈-多线程中锁的秘密-二"><a href="#关于编程路上的一些杂谈-多线程中锁的秘密-二" class="headerlink" title="关于编程路上的一些杂谈 多线程中锁的秘密(二)"></a>关于编程路上的一些杂谈 多线程中锁的秘密(二)</h1><p>接上篇<a href="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/">关于编程路上的一些杂谈 由线程的通信原理想到的(一)</a></p>
<p>其实已经讨论一些锁的实现了，这里再深入一下，把问题讲明白。<br><a id="more"></a></p>
<h2 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h2><pre><code>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事情。
</code></pre><ol>
<li><p><strong>将当前处理器缓存行的数据写回到系统内存。</strong></p>
</li>
<li><p><strong>这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</strong></p>
<p>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存（L1，L2或其他）后再进行操作，但操作完不知道何时会写到内存。如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题。所以，在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。 </p>
</li>
</ol>
<p>   同样，参照上面所说的，对于volatile来说，它的实现也不外乎需要达到以下两种实现效果：</p>
<p><strong>1）Lock前缀指令会引起处理器缓存回写到内存Lock前缀指令会引起处理器缓存回写到内存</strong></p>
<p><strong>2）一个处理器的缓存回写到内存会导致其他处理器的缓存无效</strong></p>
<h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><p>对象头：包括两部分信息。第一部分用于存储对象自身的运行时数据，如哈希码，GC分代年龄、锁状态、线程持有锁、等等。这部分数据的长度在32为或64位，官方称之为“MarkWord”。对象头的另一部分是类型指针，即对象指向它的类元素的指针，通过这个指针来确定这个对象时那个类的实例。（如果Java对象时一个数组，则对象头还必须有一块用于记录数组长度的数据。因为Java数组元数据中没有数组大小的记录）</p>
<h2 id="偏向锁的概念"><a href="#偏向锁的概念" class="headerlink" title="偏向锁的概念"></a>偏向锁的概念</h2><p>HotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。 </p>
<h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><p>在<a href="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/">关于编程路上的一些杂谈 由线程的通信原理想到的(一)</a>其实已经有讲到volatile 的实现方式的，通过上面的深入想必已经有更细致的了解，然后也相信大家对于像i++  这种复合操作不具有原子性(i是volatile变量 )很是疑惑，这里要说一个概念： </p>
<h3 id="程序计数器PC"><a href="#程序计数器PC" class="headerlink" title="程序计数器PC"></a>程序计数器PC</h3><p>程序计数器即指令地址寄存器。在某些计算机中用来存放当前正在执行的指令地址；而在另一些计算机中则用来存放即将要执行的下一条指令地址；而在有指令预取功能的计算机中，一般还要增加一个程序计数器用来存放下一条要取出的指令地址。程序计数器用以指出下条指令在主存中的存放地址，CPU根据PC的内容去主存取得指令。因程序中指令是顺序执行的，所以PC有自增功能。</p>
<p><code>也就是说其实i++可以理解成一条指令，而i=i+1便是两条指令了包括i+1和将结果赋给i，应该不需要我再深入了，已经很明了了。</code></p>
<h3 id="锁的语义"><a href="#锁的语义" class="headerlink" title="锁的语义"></a>锁的语义</h3><p>这里在<a href="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/">关于编程路上的一些杂谈 由线程的通信原理想到的(一)</a>已经有说其底层还是依靠volatile来实现，接下来就通过<code>ReentrantLock</code>源码来具体对其进行分析：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_213212.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_215402.png" alt=""></p>
<p>对于<code>compareAndSetState</code>来说：</p>
<p>CAS, CPU指令，在大多数处理器架构，包括IA32、Space中采用的都是CAS指令，CAS的语义是“我认为V的值应该为A，如果是，那么将V的值更新为B，否则不修改并告诉V的值实际为多少”，CAS是项 <strong>乐观锁</strong> 技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。</p>
<p>CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>
<p>对于<code>compareAndSetState</code>来说：它是个原子方法,原理就是是CAS.这个是高效,而且是原子的,不用加锁. 也会因为其他值改了而产生误操作,应为会先判断当前值,符合期望才去改变,而我们所要操作的值无非就是<code>state</code>而已</p>
<p>对于上面截图的代码说的直白点就是对于一个线程如果当前没有竞争，则直接拿到或者上锁，否则，尝试获取即acquire(1)方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Sync object for non-fair locks</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Performs lock.  Try immediate barge, backing up to normal</div><div class="line">         * acquire on failure.</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">                setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">            <span class="keyword">else</span></div><div class="line">                acquire(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> nonfairTryAcquire(acquires);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_222450.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Acquires in exclusive mode, ignoring interrupts.  Implemented</div><div class="line">    * by invoking at least once &#123;<span class="doctag">@link</span> #tryAcquire&#125;,</div><div class="line">    * returning on success.  Otherwise the thread is queued, possibly</div><div class="line">    * repeatedly blocking and unblocking, invoking &#123;<span class="doctag">@link</span></div><div class="line">    * #tryAcquire&#125; until success.  This method can be used</div><div class="line">    * to implement method &#123;<span class="doctag">@link</span> Lock#lock&#125;.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> arg the acquire argument.  This value is conveyed to</div><div class="line">    *        &#123;<span class="doctag">@link</span> #tryAcquire&#125; but is otherwise uninterpreted and</div><div class="line">    *        can represent anything you like.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">           acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">           selfInterrupt();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_225458.png" alt=""></p>
<p>首先通过tryAcquire()方法尝试获取，如果不能的话，则通过AddWaiter()方法，用当前线程生成一个Node放入队尾，而acquireQueued()则是一种自旋锁的实现方式。最后把当前线程interrupt。这里可以发现，java的 AQS的实现很巧妙的一个地方就是把tryAcquire延迟到子类去实现。公平锁和非公平锁的实现方式是不一样的。非公平锁的tryAcquire()的是通过nonfairTryAcquire()。</p>
<p>然后看acquireQueued(),其实就是一个无限循环，直到获得锁为止。通过上图源码可以看到在shouldParkAfterFailedAcquire()方法中，通过前一个Node的waitStatus来判断是否应该把当前线程阻塞(所以用了双&amp;&amp;开关语义)，阻塞是通过parkAndCheckInterrupt()中的<strong>LockSupport</strong>.park()实现。</p>
<p>再看一下释放锁：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Attempts to release this lock.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the current thread is the holder of this lock then the hold</div><div class="line">     * count is decremented.  If the hold count is now zero then the lock</div><div class="line">     * is released.  If the current thread is not the holder of this</div><div class="line">     * lock then &#123;<span class="doctag">@link</span> IllegalMonitorStateException&#125; is thrown.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> IllegalMonitorStateException if the current thread does not</div><div class="line">     *         hold this lock</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.release(<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>release：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Releases in exclusive mode.  Implemented by unblocking one or</div><div class="line">     * more threads if &#123;<span class="doctag">@link</span> #tryRelease&#125; returns true.</div><div class="line">     * This method can be used to implement method &#123;<span class="doctag">@link</span> Lock#unlock&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> arg the release argument.  This value is conveyed to</div><div class="line">     *        &#123;<span class="doctag">@link</span> #tryRelease&#125; but is otherwise uninterpreted and</div><div class="line">     *        can represent anything you like.</div><div class="line">     * <span class="doctag">@return</span> the value returned from &#123;<span class="doctag">@link</span> #tryRelease&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">            Node h = head;</div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">                unparkSuccessor(h);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">           <span class="keyword">int</span> c = getState() - releases;</div><div class="line">           <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">           <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">           <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">               free = <span class="keyword">true</span>;</div><div class="line">               setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">           setState(c);</div><div class="line">           <span class="keyword">return</span> free;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>可以看出tryRelease和tryAcquire一样，也是延迟到子类(Sync)实现的。c==0的时候，才能成功释放锁，所以多次锁定(看源码就可以知道lock一次c就+1，第一张截图的第二个判断，假如是当前线程的话就再+一次1)就需要多次释放才能解锁。<br>释放锁之后，就会唤醒队列的一个node中的线程</p>
<p>这段代码目的在于找出第一个可以unpark的线程，一般说来head.next == head，Head就是第一个线程，但Head.next可能会被置为null(参考acquireQueued()源码)，因此比较稳妥的办法是从后往前找第一个可用线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Wakes up node&apos;s successor, if one exists.</div><div class="line">    *</div><div class="line">    * @param node the node</div><div class="line">    */</div><div class="line">   private void unparkSuccessor(Node node) &#123;</div><div class="line">       /*</div><div class="line">        * If status is negative (i.e., possibly needing signal) try</div><div class="line">        * to clear in anticipation of signalling.  It is OK if this</div><div class="line">        * fails or if status is changed by waiting thread.</div><div class="line">        */</div><div class="line">       int ws = node.waitStatus;</div><div class="line">       if (ws &lt; 0)</div><div class="line">           compareAndSetWaitStatus(node, ws, 0);</div><div class="line"></div><div class="line">       /*</div><div class="line">        * Thread to unpark is held in successor, which is normally</div><div class="line">        * just the next node.  But if cancelled or apparently null,</div><div class="line">        * traverse backwards from tail to find the actual</div><div class="line">        * non-cancelled successor.</div><div class="line">        */</div><div class="line">       Node s = node.next;</div><div class="line">       if (s == null || s.waitStatus &gt; 0) &#123;</div><div class="line">           s = null;</div><div class="line">           for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</div><div class="line">               if (t.waitStatus &lt;= 0)</div><div class="line">                   s = t;</div><div class="line">       &#125;</div><div class="line">       if (s != null)</div><div class="line">           LockSupport.unpark(s.thread);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_231634.png" alt=""></p>
<p>其实我们在设计代码的时候也是可以通过静态内部类的方式来实现一些自己想要的功能，不过我们经常会用Spring框架，其通过动态代理已经实现了这个按需的延迟加载这些特性，也无须去头疼这些那些的</p>
<p>其实关键点也就这些，绕来绕去其实就一句话，假如有A和B两个线程，A符合期望的话，那么A就可以入主东宫了，B还老老实实的做它的嫔妃就是</p>
<p>通过以上这些解释，其实我们发现，锁的底层其实也是在反复操作一个volatile 变量，而多线程的其他操作也是基于volatile 的特性来实现的，包括计数器，barrier，各种安全工具类，理解这个其他自然都不是什么问题，包括很多并发框架的和事务等的设计，先就扯到这里吧。</p>
<p>参考文献：Java并发编程的艺术</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于编程路上的一些杂谈-多线程中锁的秘密-二&quot;&gt;&lt;a href=&quot;#关于编程路上的一些杂谈-多线程中锁的秘密-二&quot; class=&quot;headerlink&quot; title=&quot;关于编程路上的一些杂谈 多线程中锁的秘密(二)&quot;&gt;&lt;/a&gt;关于编程路上的一些杂谈 多线程中锁的秘密(二)&lt;/h1&gt;&lt;p&gt;接上篇&lt;a href=&quot;https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/&quot;&gt;关于编程路上的一些杂谈 由线程的通信原理想到的(一)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实已经讨论一些锁的实现了，这里再深入一下，把问题讲明白。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://muyinchen.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>关于编程路上的一些杂谈 由线程的通信原理想到的(一)</title>
    <link href="https://muyinchen.github.io/2017/01/06/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E8%B0%88%20%E7%94%B1%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%83%B3%E5%88%B0%E7%9A%84(%E4%B8%80)/"/>
    <id>https://muyinchen.github.io/2017/01/06/关于编程路上的一些杂谈 由线程的通信原理想到的(一)/</id>
    <published>2017-01-06T09:23:38.970Z</published>
    <updated>2017-01-06T09:25:48.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于编程路上的一些杂谈-由线程的通信原理想到的-一"><a href="#关于编程路上的一些杂谈-由线程的通信原理想到的-一" class="headerlink" title="关于编程路上的一些杂谈 由线程的通信原理想到的(一)"></a>关于编程路上的一些杂谈 由线程的通信原理想到的(一)</h1><p>​    写这个其实想了很多，到底该用什么方式来写，最后还是按照自己的随意来随意的拉拉家常算了。<br><a id="more"></a><br>时常听说身边和网友说自己遇到瓶颈，接下来不知道该往哪里走，我给的建议就是：<code>请回归基础</code>.</p>
<p>​    为何这样说，先拿一个大家都知道的东西来说，并发编程中 ，线程之间如何通信及线程之间如何同步 ，线程之间的通信机制有两种：共享内存和消息传递 ，如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170106_162517.png" alt=""></p>
<p>如果线程A与线程B之间要通信的话，必须要经历下面2个步骤：</p>
<ol>
<li>线程A把本地内存A中更新过的共享变量刷新到主内存中去。</li>
<li>线程B到主内存中去读取线程A之前已更新过的共享变量。 </li>
</ol>
<p>好了，就言仅于此，接下来我们跳过这里看一个让人感觉离的比较远的东西。</p>
<p>​    就拿大家觉得比较在上层的<code>zookeeper</code>来讲，<code>分布式锁</code>这个概念相信不少人都听过，Linux文件系统的组成相信大家也一定知道点，最起码的是这个<code>文件系统</code>是以<code>树</code>的形式组织起来的,知道这个其实你就已经理解了三分之一了，因为<code>zookeeper</code>的数据结构也是这么组织的，也是一棵树的形式，其实大家很自然就想到了b+树这个概念，这也是面试里为何会经常问到b+树到底是个什么东西，回到正题，当大家一谈分布式这个概念的时候，往往就会觉得头大，不想触碰，我觉得无非就是几份同样的代码给分放到不同的机器里来运行，各自有各自的web服务器，而我们可以很自然的把相应的服务器看成是一个容器，也就是上下文，其实也就是上图里A和B线程相当于是两台机器，而共享变量的副本其实就是各自机器里的上下文而已，这么看来，所谓的分布式不也就是我们在单机上操作的多线程么，又有何高大上可言。</p>
<p>​    既然搞分布式，那么我们接下来要解决的就是两台机器间的通信问题，也就是线程之间如何通信及线程之间如何同步变成了分布式环境下两台机器如何进行通信和同步，同样的，我们需要一个所谓的<code>主存</code>，这里的主存就是<code>zookeeper</code>,这里先对大致的原理说下，在以后的文章里会对细节各种说道的，使用过zookeeper的都知道，我们可以通过相应的API(个人推荐Curator)在zookeeper里创建一个临时的节点，一个<code>操作session</code>结束这个节点的生命周期也就结束销毁了,利用这个特性，我们在A机器修改某一个共享变量的时候，会先在zookeeper里获取下有没有这个节点，没有则创建，有则等待(因为是同一份代码，所以创建的节点也会相同)，这样便不会对共享变量同时进行多次操作，具体的实现细节以后再说，其实这个api的写法和Java底层的源码没多大区别，用法也没多少区别。</p>
<p>​    其实所说的就是分布式锁的原理，其实我们是可以从volatile 的语义联系到锁的语义的，拿<code>ReentrantLock</code>来说，<code>其底层也无非是维护一个节点(请看下图)</code>，用的也是volatile语义，再回头看看zookeeper的这种操作方式，难道还有疑虑么，所谓的抽象出来的高度的东西，其实还是底层的一些实现，用的代码也逃不出底层代码那些套路，包括zookeeper里的barrier，计数器等等。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170106_171258.png" alt=""></p>
<p>​    这次就暂时说到这里了，篇幅长了大家也没人看，下一篇想想，最近两个月一直在用通用mapper，不如来讲下通用mapper是如何根据mybatis生成的东西做的一系列组合封装，方便大家项目中使用相应的思想，后面依然会回到基础和上层一些架构框架之间的联系上来，不仅仅是多线程这块的东西.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于编程路上的一些杂谈-由线程的通信原理想到的-一&quot;&gt;&lt;a href=&quot;#关于编程路上的一些杂谈-由线程的通信原理想到的-一&quot; class=&quot;headerlink&quot; title=&quot;关于编程路上的一些杂谈 由线程的通信原理想到的(一)&quot;&gt;&lt;/a&gt;关于编程路上的一些杂谈 由线程的通信原理想到的(一)&lt;/h1&gt;&lt;p&gt;​    写这个其实想了很多，到底该用什么方式来写，最后还是按照自己的随意来随意的拉拉家常算了。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://muyinchen.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>使用Redis进行消息传递</title>
    <link href="https://muyinchen.github.io/2017/01/05/Messaging%20with%20Redis/"/>
    <id>https://muyinchen.github.io/2017/01/05/Messaging with Redis/</id>
    <published>2017-01-05T06:32:49.660Z</published>
    <updated>2017-01-05T06:37:32.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Redis进行消息传递"><a href="#使用Redis进行消息传递" class="headerlink" title="使用Redis进行消息传递"></a>使用Redis进行消息传递</h1><p>本指南将指导您完成使用Spring Data Redis发布和订阅(通过Redis发送)的消息的过程。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>你将构建一个使用<code>StringRedisTemplate</code>来发布一个字符串消息的应用程序，并且有一个<a href="https://spring.io/understanding/POJO" target="_blank" rel="external">POJO</a>使用<code>MessageListenerAdapter</code>来订阅。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>使用Spring Data Redis作为发布消息的手段可能听起来很奇怪，但是你会发现，Redis不仅提供了NoSQL数据存储，还提供了一个消息系统.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那        里开始工作 。</li>
<li>Redis服务器（安装说明如下）</li>
</ul>
<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2><p>与大多数[Spring 入门指南]一样(<a href="https://spring.io/guides)，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。" target="_blank" rel="external">https://spring.io/guides)，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。</a> 无论如何，你最终得到工作代码。</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-messaging-redis/archive/master.zip" target="_blank" rel="external">Download</a>  并解压缩本指南的源代码仓库，或使用  <a href="https://spring.io/understanding/Git" target="_blank" rel="external">Git</a>: <code>git clone https://github.com/spring-guides/gs-messaging-redis.git</code></li>
<li>cd 到 <code>gs-messaging-redis/initial</code></li>
<li>跳转到<a href="https://spring.io/guides/gs/messaging-redis/#initial" target="_blank" rel="external">Create a Redis message receiver</a>.</li>
</ul>
<p><strong>当你做完这一切</strong>,  你可以根据 <code>gs-messaging-redis/complete</code>中的代码检查结果.</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序时，但是需要使用<a href="http://gradle.org" target="_blank" rel="external">Gradle</a>和<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a> 来写你的代码。 如果你不熟悉任何一个，请参考<a href="https://spring.io/guides/gs/gradle" target="_blank" rel="external">使用Gradle构建Java项目</a>或<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>。</p>
<h3 id="Create-the-directory-structure"><a href="#Create-the-directory-structure" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<h3 id="Create-a-Gradle-build-file"><a href="#Create-a-Gradle-build-file" class="headerlink" title="Create a Gradle build file"></a>Create a Gradle build file</h3><p>下面是 <a href="https://github.com/spring-guides/gs-consuming-rest/blob/master/initial/build.gradle" target="_blank" rel="external">initial Gradle build file</a>.<br><code>build.gradle</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">'eclipse'</span></div><div class="line">apply plugin: <span class="string">'idea'</span></div><div class="line">apply plugin: <span class="string">'org.springframework.boot'</span></div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = <span class="string">'gs-messaging-redis'</span></div><div class="line">    version =  <span class="string">'0.1.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line">targetCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter"</span>)</div><div class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-redis"</span>)</div><div class="line">    testCompile(<span class="string">"junit:junit"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-gradle-plugin" target="_blank" rel="external">Spring Boot gradle插件</a>提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和传递服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序，但是需要使用<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a>来构建你的代码。 如果你不熟悉Maven，请参考<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>.</p>
<h3 id="Create-the-directory-structure-1"><a href="#Create-the-directory-structure-1" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<p><code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-messaging-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-maven-plugin" target="_blank" rel="external">Spring Boot Maven插件</a> 提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和运输服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><ul>
<li>阅读如何通过本指南直接导入<a href="https://spring.io/guides/gs/sts/" target="_blank" rel="external">Spring Tool Suite</a>。</li>
<li>阅读如何在<a href="https://spring.io/guides/gs/intellij-idea" target="_blank" rel="external">IntelliJ IDEA</a>上使用本指南。</li>
</ul>
<h2 id="Standing-up-a-Redis-server"><a href="#Standing-up-a-Redis-server" class="headerlink" title="Standing up a Redis server"></a>Standing up a Redis server</h2><p>在您可以构建消息传递应用程序之前，您需要设置将要处理接收和发送消息的服务器。</p>
<p>Redis是一个开源的，BSD许可的键值数据存储，它还带有一个消息系统。 服务器在<a href="http://redis.io/download" target="_blank" rel="external">http://redis.io/download</a> 上免费提供。 你可以手动下载，或者如果你使用Mac的homebrew：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install redis</div></pre></td></tr></table></figure>
<p>解压缩Redis后，您可以使用默认设置启动它。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server</div></pre></td></tr></table></figure>
<p>您应该看到这样的消息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[35142] 01 May 14:36:28.939 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></div><div class="line">[35142] 01 May 14:36:28.940 * Max number of open files <span class="built_in">set</span> to 10032</div><div class="line">                _._</div><div class="line">              _.-``__ <span class="string">''</span>-._</div><div class="line">        _.-``    `.  `_.  <span class="string">''</span>-._           Redis 2.6.12 (00000000/0) 64 bit</div><div class="line">    .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._</div><div class="line">  (    <span class="string">'      ,       .-`  | `,    )     Running in stand alone mode</span></div><div class="line">  |`-._`-...-` __...-.``-._|'` _.-<span class="string">'|     Port: 6379</span></div><div class="line">  |    `-._   `._    /     _.-'    |     PID: 35142</div><div class="line">    `-._    `-._  `-./  _.-<span class="string">'    _.-'</span></div><div class="line">  |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></div><div class="line">  |    `-._`-._        _.-'_.-<span class="string">'    |           http://redis.io</span></div><div class="line">    `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span></div><div class="line">  |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></div><div class="line">  |    `-._`-._        _.-'_.-<span class="string">'    |</span></div><div class="line">    `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span></div><div class="line">        `-._    `-.__.-<span class="string">'    _.-'</span></div><div class="line">            `-._        _.-<span class="string">'</span></div><div class="line">                `-.__.-'</div><div class="line"></div><div class="line">[35142] 01 May 14:36:28.941 <span class="comment"># Server started, Redis version 2.6.12</span></div><div class="line">[35142] 01 May 14:36:28.941 * The server is now ready to accept connections on port 6379</div></pre></td></tr></table></figure>
<h2 id="Create-a-Redis-message-receiver"><a href="#Create-a-Redis-message-receiver" class="headerlink" title="Create a Redis message receiver"></a>Create a Redis message receiver</h2><p>在任何基于消息的应用程序中，有消息发布者和消息接收者。 要创建消息接收器，请使用响应消息的方法实现一个接收器：<br><code>src/main/java/hello/Receiver.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Receiver.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Receiver</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.latch = latch;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"Received &lt;"</span> + message + <span class="string">"&gt;"</span>);</div><div class="line">        latch.countDown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Receiver</code>是一个简单的POJO，它定义了一个接收消息的方法。 正如你在注册<code>Receiver</code>作为消息侦听器时所看到的，你可以将消息处理方法命名为任何你想要的。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>为了演示的目的，它由具有倒计时锁存器(CountDownLatch,这个不清楚的可以谷歌一下，并发编程经常用的东西)的构造函数自动装配。 这样，它可以在它接收到消息时发出信号.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Register-the-listener-and-send-a-message"><a href="#Register-the-listener-and-send-a-message" class="headerlink" title="Register the listener and send a message"></a>Register the listener and send a message</h2><p>Spring Data Redis提供了使用Redis发送和接收消息所需的所有组件。 具体来说，你需要配置：</p>
<ul>
<li>连接工厂(connection factory)</li>
<li>消息侦听器容器( message listener container)</li>
<li>Redis模板(Redis template)</li>
</ul>
<p>你将使用Redis模板发送消息，使用消息侦听器容器注册“Receiver”，以便它将接收消息。 连接工厂驱动模板和消息侦听器容器，使它们能够连接到Redis服务器。</p>
<p>这个例子使用Spring Boot的默认<code>RedisConnectionFactory</code>，一个<code>JedisConnectionFactory</code>的实例，它基于<a href="https://github.com/xetorthio/jedis" target="_blank" rel="external">Jedis</a> Redis库。 连接工厂被注入到消息侦听器容器和Redis模板中。</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.PatternTopic;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Application.class);</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></div><div class="line">			MessageListenerAdapter listenerAdapter) &#123;</div><div class="line"></div><div class="line">		RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</div><div class="line">		container.setConnectionFactory(connectionFactory);</div><div class="line">		container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</div><div class="line"></div><div class="line">		<span class="keyword">return</span> container;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiveMessage"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">Receiver <span class="title">receiver</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Receiver(latch);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">CountDownLatch <span class="title">latch</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">StringRedisTemplate <span class="title">template</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = SpringApplication.run(Application.class, args);</div><div class="line"></div><div class="line">		StringRedisTemplate template = ctx.getBean(StringRedisTemplate.class);</div><div class="line">		CountDownLatch latch = ctx.getBean(CountDownLatch.class);</div><div class="line"></div><div class="line">		LOGGER.info(<span class="string">"Sending message..."</span>);</div><div class="line">		template.convertAndSend(<span class="string">"chat"</span>, <span class="string">"Hello from Redis!"</span>);</div><div class="line"></div><div class="line">		latch.await();</div><div class="line"></div><div class="line">		System.exit(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>listenerAdapter</code>方法中定义的bean作为参数，并在<code>container</code>中定义的消息侦听器容器中注册为消息侦听器，并将在“chat”主题上侦听消息。因为<code>Receiver</code>类是一个POJO，它需要被包装在一个消息监听器适配器中，该适配器实现<code>addMessageListener()</code>所需的<code>MessageListener</code>接口。消息侦听器适配器还配置为在消息到达时调用<code>Receiver&#39;上的</code>receiveMessage()`方法。</p>
<p>连接工厂和消息监听器容器bean都是你用来监听消息的。要发送消息，您还需要一个Redis模板。这里，它是一个配置为<code>StringRedisTemplate</code>的bean，是RedisTemplate的一个实现，它专注于Redis的常见用法，其中键和值都是String。</p>
<p><code>main()</code>方法通过创建一个Spring应用程序上下文来处理所有事情。应用程序上下文然后启动消息侦听器容器，消息侦听器容器bean开始侦听消息。 <code>main()</code>方法然后从应用程序上下文中检索<code>StringRedisTemplate</code> bean(其实就是IOC里的DL)，并使用它在 “chat”主题下发送“Hello from Redis！”消息。最后，它关闭Spring应用程序上下文，应用程序结束。</p>
<h2 id="Build-an-executable-JAR"><a href="#Build-an-executable-JAR" class="headerlink" title="Build an executable JAR"></a>Build an executable JAR</h2><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，易于跨不同环境将服务作为应用程序进行发布，维护版本和部署等等。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-messaging-redis-0.1.0.jar</div></pre></td></tr></table></figure>
<p>如果您使用Maven，可以使用<code>./mvnw spring-boot:run</code>运行应用程序。 或者你可以用<code>./mvnw clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-messaging-redis-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">build a classic WAR file</a></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>您应该看到类似下面的输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.4.3.RELEASE)</div><div class="line"></div><div class="line">2014-04-18 08:03:34.032  INFO 47002 --- [           main] hello.Application                        : Starting Application on retina with PID 47002 (/Users/gturnquist/src/spring-guides/gs-messaging-redis/complete/target/classes started by gturnquist)</div><div class="line">2014-04-18 08:03:34.062  INFO 47002 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@7a53c84a: startup date [Fri Apr 18 08:03:34 CDT 2014]; root of context hierarchy</div><div class="line">2014-04-18 08:03:34.326  INFO 47002 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 2147483647</div><div class="line">2014-04-18 08:03:34.357  INFO 47002 --- [           main] hello.Application                        : Started Application in 0.605 seconds (JVM running for 0.899)</div><div class="line">2014-04-18 08:03:34.357  INFO 47002 --- [           main] hello.Application                        : Sending message...</div><div class="line">2014-04-18 08:03:34.370  INFO 47002 --- [    container-2] hello.Receiver                           : Received &lt;Hello from Redis!&gt;</div><div class="line">2014-04-18 08:03:34.379  INFO 47002 --- [       Thread-1] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@7a53c84a: startup date [Fri Apr 18 08:03:34 CDT 2014]; root of context hierarchy</div><div class="line">2014-04-18 08:03:34.380  INFO 47002 --- [       Thread-1] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 2147483647</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜！ 你刚刚使用Spring和Redis开发了一个简单的发布和订阅应用程序。</p>
<p>翻译自：<a href="https://spring.io/guides/gs/messaging-redis/" target="_blank" rel="external">https://spring.io/guides/gs/messaging-redis/</a></p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Redis进行消息传递&quot;&gt;&lt;a href=&quot;#使用Redis进行消息传递&quot; class=&quot;headerlink&quot; title=&quot;使用Redis进行消息传递&quot;&gt;&lt;/a&gt;使用Redis进行消息传递&lt;/h1&gt;&lt;p&gt;本指南将指导您完成使用Spring Data Redis发布和订阅(通过Redis发送)的消息的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>计划任务</title>
    <link href="https://muyinchen.github.io/2017/01/01/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    <id>https://muyinchen.github.io/2017/01/01/计划任务/</id>
    <published>2017-01-01T13:12:13.355Z</published>
    <updated>2017-01-01T13:30:19.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><p>本指南将指导您完成使用Spring计划任务(即大家常说的定时任务)的步骤。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>你将构建一个应用程序，使用Spring的’@ Scheduled’注释每五秒打印一次当前时间。</p>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那        里开始工作 。</li>
</ul>
<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2><p>与大多数Spring <a href="https://spring.io/guides" target="_blank" rel="external">入门指南</a>一样，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。 无论如何，你最终得到工作代码。<br> <strong>要从头开始</strong>, 请转到<a href="https://spring.io/guides/gs/consuming-rest/#scratch" target="_blank" rel="external">使用Gradle构建</a>.</p>
<p> <strong>要跳过基本操作</strong>,请执行以下操作：</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-consuming-rest/archive/master.zip" target="_blank" rel="external">Download</a> 并解压缩本指南的源代码仓库，或使用  <a href="https://spring.io/understanding/Git" target="_blank" rel="external">Git</a>: <code>git clone https://github.com/spring-guides/gs-scheduling-tasks.git</code></li>
<li>cd 到 <code>gs-scheduling-tasks/initial</code></li>
<li>跳转到<a href="https://spring.io/guides/gs/scheduling-tasks/#initial" target="_blank" rel="external">Create a scheduled task</a>.</li>
</ul>
<p><strong>当你做完这一切</strong>,  你可以根据 <code>gs-scheduling-tasks/complete</code>中的代码检查结果.</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><p>见 <a href="https://muyinchen.github.io/2016/12/30/%E4%BD%BF%E7%94%A8RESTful%20Web%E6%9C%8D%E5%8A%A1/">使用RESTful Web服务</a></p>
<h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><p>见 <a href="https://muyinchen.github.io/2016/12/30/%E4%BD%BF%E7%94%A8RESTful%20Web%E6%9C%8D%E5%8A%A1/">使用RESTful Web服务</a></p>
<h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><ul>
<li>阅读如何通过本指南直接导入<a href="https://spring.io/guides/gs/sts/" target="_blank" rel="external">Spring Tool Suite</a>。</li>
<li>阅读如何在<a href="https://spring.io/guides/gs/intellij-idea" target="_blank" rel="external">IntelliJ IDEA</a>上使用本指南。</li>
<li>​<h2 id="创建计划任务"><a href="#创建计划任务" class="headerlink" title="创建计划任务"></a>创建计划任务</h2></li>
</ul>
<p>完成项目设置后，您可以创建一个计划任务。</p>
<p><code>src/main/java/hello/ScheduledTasks.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(ScheduledTasks.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        log.info(<span class="string">"The time is now &#123;&#125;"</span>, dateFormat.format(<span class="keyword">new</span> Date()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Scheduled</code>注解定义了一个特定方法在何时运行。 注意：此示例使用<code>fixedRate</code>，它指定从每次调用的开始时间开始测量的方法调用之间的间隔。 有<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-annotation-support-scheduled" target="_blank" rel="external">其他选项</a>，如<code>fixedDelay</code>，其中 指定从任务完成起测量的调用之间的间隔。 您还可以<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html" target="_blank" rel="external">使用<code>@Scheduled(cron=&quot;. . .&quot;)</code>表达式来进行更复杂的任务调度</a>.</p>
<h2 id="启用计划任务"><a href="#启用计划任务" class="headerlink" title="启用计划任务"></a>启用计划任务</h2><p>尽管计划任务可以嵌入在Web应用程序和WAR文件中，但下面演示的更简单的方法创建了一个独立的应用程序。 你把一切都包装在一个可执行的JAR文件中，由一个大家初学Java时的Java<code>main()</code>方法驱动。<br><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>@SpringBootApplication</code>是一个很方便的注解，查看其源码可以发现添加了以下所有内容：</p>
<ul>
<li><code>@Configuration</code>将类标记为应用程序上下文的bean定义的源。</li>
<li><code>@EnableAutoConfiguration</code>告诉Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。</li>
<li>通常你会为Spring MVC应用程序添加<code>@EnableWebMvc</code>，但是Spring Boot在类路径上看到<strong> spring-webmvc </strong>时会自动添加它。这将应用程序标记为Web应用程序，并激活关键行为，如设置一个“DispatcherServlet”。</li>
<li><code>@ComponentScan</code>告诉Spring在<code>hello</code>包中寻找其他组件，配置和服务，允许它找到控制器。</li>
</ul>
<p><code>main()</code>方法使用Spring Boot的<code>SpringApplication.run()</code>方法来启动应用程序。你注意到没有一行XML？没有<strong> web.xml </strong>文件。这个Web应用程序是100％纯Java，你不必处理配置任何管道或基础设施。</p>
<p><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#scheduling-enable-annotation-support" target="_blank" rel="external"><code>@EnableScheduling</code></a> 确保创建了后台任务执行器。没有它，鬼知道什么时候运行定时计划任务，更不用说执行了。</p>
<h3 id="构建可执行JAR"><a href="#构建可执行JAR" class="headerlink" title="构建可执行JAR"></a>构建可执行JAR</h3><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，易于跨不同环境将服务作为应用程序进行发布，维护版本和部署等等。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-scheduling-tasks-0.1.0.jar</div></pre></td></tr></table></figure>
<p>如果您使用Maven，可以使用 <code>./mvnw spring-boot:run</code>.运行应用程序。 或者你可以用<code>./mvnw clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-scheduling-tasks-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">build a classic WAR file</a></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>将显示日志输出，你可以从日志中看到它在后台线程上运行。 你应该会看到你的预定任务每5秒钟触发一次：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[...]</div><div class="line">2016-08-25 13:10:00.143  INFO 31565 --- [pool-1-thread-1] hello.ScheduledTasks : The time is now 13:10:00</div><div class="line">2016-08-25 13:10:05.143  INFO 31565 --- [pool-1-thread-1] hello.ScheduledTasks : The time is now 13:10:05</div><div class="line">2016-08-25 13:10:10.143  INFO 31565 --- [pool-1-thread-1] hello.ScheduledTasks : The time is now 13:10:10</div><div class="line">2016-08-25 13:10:15.143  INFO 31565 --- [pool-1-thread-1] hello.ScheduledTasks : The time is now 13:10:15</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜！ 您已使用计划任务创建应用程序。此技术适用于任何类型的应用程序。<br>翻译自：<a href="https://spring.io/guides/gs/scheduling-tasks/" target="_blank" rel="external">https://spring.io/guides/gs/scheduling-tasks/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计划任务&quot;&gt;&lt;a href=&quot;#计划任务&quot; class=&quot;headerlink&quot; title=&quot;计划任务&quot;&gt;&lt;/a&gt;计划任务&lt;/h1&gt;&lt;p&gt;本指南将指导您完成使用Spring计划任务(即大家常说的定时任务)的步骤。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>使用RESTful Web服务</title>
    <link href="https://muyinchen.github.io/2016/12/30/%E4%BD%BF%E7%94%A8RESTful%20Web%E6%9C%8D%E5%8A%A1/"/>
    <id>https://muyinchen.github.io/2016/12/30/使用RESTful Web服务/</id>
    <published>2016-12-30T09:50:47.485Z</published>
    <updated>2016-12-30T09:52:59.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用RESTful-Web服务"><a href="#使用RESTful-Web服务" class="headerlink" title="使用RESTful Web服务"></a>使用RESTful Web服务</h1><p>本指南将指导您完成创建使用REST式Web服务的应用程序的过程。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>你将构建一个使用Spring的<code>RestTemplate</code>来检索随机Spring Boot引用的应用程序 <a href="https://gturnquist-quoters.cfapps.io/api/random" target="_blank" rel="external">http://gturnquist-quoters.cfapps.io/api/random</a>.</p>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那里开始工作 。<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2></li>
</ul>
<p>与大多数Spring <a href="https://spring.io/guides" target="_blank" rel="external">入门指南</a>一样，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。 无论如何，你最终得到工作代码。<br> <strong>要从头开始</strong>, 请转到<a href="https://spring.io/guides/gs/consuming-rest/#scratch" target="_blank" rel="external">使用Gradle构建</a>.</p>
<p> <strong>要跳过基本操作</strong>,请执行以下操作：</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-consuming-rest/archive/master.zip" target="_blank" rel="external">Download</a> 并解压缩本指南的源代码仓库，或使用 <a href="https://spring.io/understanding/Git" target="_blank" rel="external">Git</a>: <code>git clone https://github.com/spring-guides/gs-consuming-rest.git</code></li>
<li>cd 到 <code>gs-consuming-rest/initial</code></li>
<li>跳转到 <a href="https://spring.io/guides/gs/consuming-rest/#initial" target="_blank" rel="external">Fetch a REST resource</a>.</li>
</ul>
<p><strong>完成</strong>, 你可以根据 <code>gs-consuming-rest/complete</code>中的代码检查结果.</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序时，但是需要使用<a href="http://gradle.org" target="_blank" rel="external">Gradle</a>和<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a> 来写你的代码。 如果你不熟悉任何一个，请参考<a href="https://spring.io/guides/gs/gradle" target="_blank" rel="external">使用Gradle构建Java项目</a>或<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>。</p>
<h3 id="Create-the-directory-structure"><a href="#Create-the-directory-structure" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<h3 id="Create-a-Gradle-build-file"><a href="#Create-a-Gradle-build-file" class="headerlink" title="Create a Gradle build file"></a>Create a Gradle build file</h3><p>下面是 <a href="https://github.com/spring-guides/gs-consuming-rest/blob/master/initial/build.gradle" target="_blank" rel="external">initial Gradle build file</a>.</p>
<p><code>build.gradle</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">'eclipse'</span></div><div class="line">apply plugin: <span class="string">'idea'</span></div><div class="line">apply plugin: <span class="string">'org.springframework.boot'</span></div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = <span class="string">'gs-consuming-rest'</span></div><div class="line">    version =  <span class="string">'0.1.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line">targetCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter"</span>)</div><div class="line">    compile(<span class="string">"org.springframework:spring-web"</span>)</div><div class="line">    compile(<span class="string">"com.fasterxml.jackson.core:jackson-databind"</span>)</div><div class="line">    testCompile(<span class="string">"junit:junit"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-gradle-plugin" target="_blank" rel="external">Spring Boot gradle插件</a>提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和传递服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies]</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序，但是需要使用<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a>来构建你的代码。 如果你不熟悉Maven，请参考<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>.</p>
<h3 id="Create-the-directory-structure-1"><a href="#Create-the-directory-structure-1" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<p><code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-consuming-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-maven-plugin" target="_blank" rel="external">Spring Boot Maven插件</a> 提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和运输服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><ul>
<li>阅读如何通过本指南直接导入<a href="https://spring.io/guides/gs/sts/" target="_blank" rel="external">Spring Tool Suite</a>。</li>
<li>阅读如何在<a href="https://spring.io/guides/gs/intellij-idea" target="_blank" rel="external">IntelliJ IDEA</a>上使用本指南。</li>
</ul>
<h2 id="获取REST资源"><a href="#获取REST资源" class="headerlink" title="获取REST资源"></a>获取REST资源</h2><p>完成项目设置后，您可以创建一个使用RESTful服务的简单应用程序。</p>
<p>一个RESTful服务已经在<a href="https://gturnquist-quoters.cfapps.io/api/random" target="_blank" rel="external">http://gturnquist-quoters.cfapps.io/api/random</a> 上建立了起来。 它随机获取关于Spring Boot的引用，并将它们作为JSON字符串返回。</p>
<p>如果您通过Web浏览器或curl请求该网址，您会收到一个JSON字符串，如下所示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   type: "success",</div><div class="line">   value: &#123;</div><div class="line">      id: 10,</div><div class="line">      quote: "Really loving Spring Boot, makes stand alone Spring apps easy."</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>足够简单吧，不过通过浏览器或通过curl去获取，终究不是长久之事。</p>
<p>一种更有用的方式来测试REST Web服务是以编程方式。 为了帮助你完成这个任务，Spring提供了一个方便的模板类<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="external"><code>RestTemplate</code></a>。 <code>RestTemplate</code>使得与大多数RESTful服务进行交互是一种享受。 它甚至可以将该数据绑定到自定义域类型。</p>
<p>首先，创建一个domain类以包含所需的数据。<br><code>src/main/java/hello/Quote.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</div><div class="line"></div><div class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quote</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String type;</div><div class="line">    <span class="keyword">private</span> Value value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Quote</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Value value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Quote&#123;"</span> +</div><div class="line">                <span class="string">"type='"</span> + type + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", value="</span> + value +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如你所看到的，这是一个简单的Java类，有几个属性和相应的getter方法。 当使用来自Jackson JSON处理库的<code>@ JsonIgnoreProperties</code>进行注释，代表在此类中未绑定的任何属性都应该被忽略。</p>
<p>需要一个额外的类来嵌入内部引用本身。</p>
<p><code>src/main/java/hello/Value.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</div><div class="line"></div><div class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String quote;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Value</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQuote</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.quote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuote</span><span class="params">(String quote)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.quote = quote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Value&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", quote='"</span> + quote + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过使用相同的注解，但可以很轻松地映射到其他数据字段。</p>
<h2 id="使应用程序可以执行"><a href="#使应用程序可以执行" class="headerlink" title="使应用程序可以执行"></a>使应用程序可以执行</h2><p>虽然可以将此服务打包为用于部署到外部应用程序服务器的传统<a href="https://spring.io/understanding/WAR" target="_blank" rel="external">WAR</a> 文件，但下面演示的创建一个独立应用程序的方法更简单。 你把一切都包装在一个可执行的JAR文件中，由一个大家初学Java时的Java<code>main()</code>方法驱动。 整个过程，你使用Spring支持嵌入的<a href="https://spring.io/understanding/Tomcat" target="_blank" rel="external">Tomcat</a>servlet容器作为HTTP运行时的容器，而不是部署到外部实例中去。</p>
<p>现在你可以写使用<code>RestTemplate</code>的<code>Application</code>类来从我们的Spring Boot引用服务并且获取数据。<br><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(Application.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</div><div class="line">        Quote quote = restTemplate.getForObject(<span class="string">"http://gturnquist-quoters.cfapps.io/api/random"</span>, Quote.class);</div><div class="line">        log.info(quote.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为Jackson JSON处理库在类路径中，<code>RestTemplate</code>将使用它（通过<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/HttpMessageConverter.html" target="_blank" rel="external">message converter</a>）将传入的JSON数据转换为一个“Quote”对象。 从那里，<code>Quote</code>对象的内容将被记录到控制台。</p>
<p>这里你只使用<code>RestTemplate</code>来做一个HTTP<code>GET</code>请求。 但是RestTemplate也支持其他HTTP动词，例如<code>POST</code>，<code>PUT</code>和<code>DELETE</code>。</p>
<h2 id="使用Spring-Boot管理应用程序生命周期"><a href="#使用Spring-Boot管理应用程序生命周期" class="headerlink" title="使用Spring Boot管理应用程序生命周期"></a>使用Spring Boot管理应用程序生命周期</h2><p>到目前为止，我们没有在我们的应用程序中使用Spring Boot，Spring Bootd 一些优点，使用起来并不难。 其中的一个优点是我们可能想让Spring Boot管理<code>RestTemplate</code>中的消息转换器，以便定制很容易声明性地添加。 为此，就像在任何Spring Boot应用程序中一样，我们在主类上使用<code>@ SpringBootApplication</code>，并转换main方法来启动它。 最后，我们将<code>RestTemplate</code>移动到<code>CommandLineRunner</code>回调，所以它在启动时由Spring Boot执行：</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(Application.class);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">		SpringApplication.run(Application.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> builder.build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">run</span><span class="params">(RestTemplate restTemplate)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> args -&gt; &#123;</div><div class="line">			Quote quote = restTemplate.getForObject(</div><div class="line">					<span class="string">"http://gturnquist-quoters.cfapps.io/api/random"</span>, Quote.class);</div><div class="line">			log.info(quote.toString());</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>RestTemplateBuilder</code>是由Spring注入的，如果你使用它来创建一个<code>RestTemplate</code>，那么你将受益于在Spring Boot中使用消息转换器和请求工厂发生的所有自动配置。 我们还将<code>RestTemplate</code>注解为<code>@ Bean</code>，以便更容易测试（它可以更容易地被测试）。</p>
<h3 id="构建可执行JAR"><a href="#构建可执行JAR" class="headerlink" title="构建可执行JAR"></a>构建可执行JAR</h3><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，易于跨不同环境将服务作为应用程序进行发布，维护版本和部署等等。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-consuming-rest-0.1.0.jar</div></pre></td></tr></table></figure>
<p>如果您使用Maven，可以使用<code>./maven spring-boot：run</code>运行应用程序。 或者你可以用<code>./mvn clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-consuming-rest-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">build a classic WAR file</a></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>您应该看到类似下面的输出，带有随机引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2015-09-23 14:22:26.415  INFO 23613 --- [main] hello.Application  : Quote&#123;type=&apos;success&apos;, value=Value&#123;id=12, quote=&apos;@springboot with @springframework is pure productivity! Who said in #java one has to write double the code than in other langs? #newFavLib&apos;&#125;&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>如果您看到错误<code>Could not extract response: no suitable HttpMessageConverter found for response type [class hello.Quote]</code>“无法提取响应：没有找到适合响应类型[类hello.Quote]的HttpMessageConverter”，可能是在一个环境中无法连接到后端服务（如果可以到达它发送JSON）。 也许你是在使用其他网络代理？ 尝试将标准系统属性<code>http.proxyHost</code>和<code>http.proxyPort</code>设置为适合您的环境的值。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜！ 你刚刚使用Spring开发了一个简单的REST客户端。</p>
<p>想要写一个新的指南或贡献现有的？ 查看我们的<a href="https://github.com/spring-guides/getting-started-guides/wiki" target="_blank" rel="external">贡献指南</a>.</p>
<p>翻译自：<a href="https://spring.io/guides/gs/consuming-rest/" target="_blank" rel="external">https://spring.io/guides/gs/consuming-rest/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用RESTful-Web服务&quot;&gt;&lt;a href=&quot;#使用RESTful-Web服务&quot; class=&quot;headerlink&quot; title=&quot;使用RESTful Web服务&quot;&gt;&lt;/a&gt;使用RESTful Web服务&lt;/h1&gt;&lt;p&gt;本指南将指导您完成创建使用REST式Web服务的应用程序的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>Messaging with RabbitMQ</title>
    <link href="https://muyinchen.github.io/2016/12/27/Messaging%20with%20RabbitMQ/"/>
    <id>https://muyinchen.github.io/2016/12/27/Messaging with RabbitMQ/</id>
    <published>2016-12-27T03:06:33.560Z</published>
    <updated>2016-12-27T03:06:00.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Messaging-with-RabbitMQ"><a href="#Messaging-with-RabbitMQ" class="headerlink" title="Messaging with RabbitMQ"></a>Messaging with RabbitMQ</h1><p>本文翻译自：<a href="https://spring.io/guides/gs/messaging-rabbitmq/" target="_blank" rel="external">https://spring.io/guides/gs/messaging-rabbitmq/</a><br>打算翻译一批Spring的各种指引文档，此为第一篇</p>
<p>本指南将引导您完成建立一个发布和订阅消息的RabbitMQ AMQP服务器的过程。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>您将使用Spring AMQP的<code>RabbitTemplate</code>构建一个发布消息的应用程序，并使用<code>MessageListenerAdapter</code>订阅<a href="https://spring.io/understanding/POJO" target="_blank" rel="external">POJO</a>上的消息。</p>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那里开始工作 。</li>
<li>RabbitMQ服务器(安装说明如下)<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2></li>
</ul>
<p>与大多数Spring <a href="https://spring.io/guides" target="_blank" rel="external">入门指南</a>一样，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。 无论如何，你最终得到工作代码。</p>
<p>要从头开始**，请转到<a href="https://spring.io/guides/gs/messaging-rabbitmq/#scratch" target="_blank" rel="external">使用Gradle构建</a>。</p>
<p>要跳过基本操作**，请执行以下操作：</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-messaging-rabbitmq/archive/master.zip" target="_blank" rel="external">下载</a>并解压缩本指南的源代码仓库，或使用<a href="https：// spring.io/understanding/Git">Git</a>：<code>git clone https：// github.com / spring-guides / gs-messaging-rabbitmq.git</code></li>
<li>cd到<code>gs-messaging-rabbitmq / initial</code></li>
<li>跳转到<a href="https://spring.io/guides/gs/messaging-rabbitmq/#initial" target="_blank" rel="external">创建RabbitMQ消息接收器</a>。</li>
</ul>
<p><strong>完成</strong>后，您可以根据<code>gs-messaging-rabbitmq / complete</code>中的代码检查结果。</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><h2 id="Set-up-RabbitMQ-broker"><a href="#Set-up-RabbitMQ-broker" class="headerlink" title="Set up RabbitMQ broker"></a>Set up RabbitMQ broker</h2><p>在构建消息传递应用程序之前，您需要设置将处理接收和发送消息的服务器。</p>
<p>RabbitMQ是一个AMQP服务器。 服务器可以免费访问[<a href="http://www.rabbitmq.com/download.html&quot;(http://www.rabbitmq.com/download.html）。" target="_blank" rel="external">http://www.rabbitmq.com/download.html&quot;(http://www.rabbitmq.com/download.html）。</a> 你可以手动下载，或者如果你使用Mac与homebrew：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install rabbitmq</div></pre></td></tr></table></figure>
<p>解压缩服务器并使用默认设置启动它。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmq-server</div></pre></td></tr></table></figure>
<p>你应该会看到这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">            RabbitMQ 3.1.3. Copyright (C) 2007-2013 VMware, Inc.</div><div class="line"><span class="comment">##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></div><div class="line"><span class="comment">##  ##</span></div><div class="line"><span class="comment">##########  Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log</span></div><div class="line"><span class="comment">######  ##        /usr/local/var/log/rabbitmq/rabbit@localhost-sasl.log</span></div><div class="line"><span class="comment">##########</span></div><div class="line">            Starting broker... completed with 6 plugins.</div></pre></td></tr></table></figure>
<p>如果Docker在本地运行，您还可以使用[Docker Compose]（<a href="https://docs.docker.com/compose/）快速启动RabbitMQ服务器。" target="_blank" rel="external">https://docs.docker.com/compose/）快速启动RabbitMQ服务器。</a> 在Github的“完整”项目的根目录中有一个<code>docker-compose.yml</code>。 很简单：</p>
<p><code>docker-compose.yml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rabbitmq:</div><div class="line">  image: rabbitmq:management</div><div class="line">  ports:</div><div class="line">    - &quot;5672:5672&quot;</div><div class="line">    - &quot;15672:15672&quot;</div></pre></td></tr></table></figure>
<p>有了这个文件在当前目录中，你可以运行<code>docker-compose up</code>来使RabbitMQ在容器中运行</p>
<h2 id="Create-a-RabbitMQ-message-receiver"><a href="#Create-a-RabbitMQ-message-receiver" class="headerlink" title="Create a RabbitMQ message receiver"></a>Create a RabbitMQ message receiver</h2><p>对于任何基于消息的应用程序，您需要创建一个接收器来响应已发布的消息。</p>
<p><code>src/main/java/hello/Receiver.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Received &lt;"</span> + message + <span class="string">"&gt;"</span>);</div><div class="line">        latch.countDown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> CountDownLatch <span class="title">getLatch</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> latch;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>`Receiver’是一个简单的POJO，它定义了一个接收消息的方法。 当您注册它以接收消息时，您可以将其命名为任何您想要的。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>为了方便起见，这个POJO也有一个<code>CountDownLatch</code>。 这允许它发信号通知接收到消息。 这是你不可能在生产应用程序中实现的东西。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Register-the-listener-and-send-a-message"><a href="#Register-the-listener-and-send-a-message" class="headerlink" title="Register the listener and send a message"></a>Register the listener and send a message</h2><p>Spring AMQP的`RabbitTemplate’提供了使用RabbitMQ发送和接收消息所需的一切。 具体来说，您需要配置：</p>
<ul>
<li>消息侦听器容器</li>
<li>声明队列，交换和它们之间的绑定</li>
<li>发送一些消息以测试侦听器的组件</li>
</ul>
<table>
<thead>
<tr>
<th>**</th>
<th>Spring Boot自动创建一个连接工厂和一个RabbitTemplate，减少了你必须编写的代码量。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>你将使用<code>RabbitTemplate</code>来发送消息，你将使用消息监听器容器注册一个<code>Receiver</code>来接收消息。 连接工厂并驱动两者，允许它们连接到RabbitMQ服务器。</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String queueName = <span class="string">"spring-boot"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(queueName, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"spring-boot-exchange"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">Binding <span class="title">binding</span><span class="params">(Queue queue, TopicExchange exchange)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(queueName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">SimpleMessageListenerContainer <span class="title">container</span><span class="params">(ConnectionFactory connectionFactory,</span></span></div><div class="line">            MessageListenerAdapter listenerAdapter) &#123;</div><div class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer();</div><div class="line">        container.setConnectionFactory(connectionFactory);</div><div class="line">        container.setQueueNames(queueName);</div><div class="line">        container.setMessageListener(listenerAdapter);</div><div class="line">        <span class="keyword">return</span> container;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiveMessage"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>@ SpringBootApplication</code>是一个方便的注解，添加了以下所有内容：</p>
<ul>
<li><code>@ Configuration</code>将类标记为应用程序上下文的bean定义的来源。</li>
<li><code>@ EnableAutoConfiguration</code>告诉Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。</li>
<li>通常你会为Spring MVC应用程序添加<code>@ EnableWebMvc</code>，但是Spring Boot在类路径上看到<strong> spring-webmvc </strong>时会自动添加它。这将应用程序标记为Web应用程序，并激活关键行为，如设置一个“DispatcherServlet”。</li>
<li><code>@ ComponentScan</code>告诉Spring在<code>hello</code>包中寻找其他组件，配置和服务，允许它找到控制器。</li>
</ul>
<p><code>main（）</code>方法使用Spring Boot的<code>SpringApplication.run（）</code>方法来启动应用程序。你有注意到一行XML？没有<strong> web.xml </strong>文件。这个Web应用程序是100％纯Java，你不必处理配置任何管道或基础设施。</p>
<p>在<code>listenerAdapter（）</code>方法中定义的bean被注册为在<code>container（）</code>中定义的容器中的消息侦听器。它将监听“spring-boot”队列上的消息。因为<code>Receiver</code>类是一个POJO，它需要被包装在<code>MessageListenerAdapter</code>中，你可以指定它来调用<code>receiveMessage</code>。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>JMS队列和AMQP队列具有不同的语义。 例如，JMS仅向一个使用者发送排队的消息。 虽然AMQP队列做同样的事情，AMQP生产者不直接发送消息到队列。 相反，消息发送到交换，可以转到单个队列，或扇出到多个队列(1-&gt;1,1-&gt;n)，模拟JMS主题的概念。 更多，见<a href="https://spring.io/understanding/AMQP" target="_blank" rel="external">Understanding AMQP</a>.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>消息侦听器容器和receiver beans都是您侦听消息所需要的。 要发送消息，您还需要一个Rabbit模板。</p>
<p><code>queue（）</code>方法创建一个AMQP队列。 <code>exchange（）</code>方法创建一个主题交换。 <code>binding（）</code>方法将这两个绑定在一起，定义当RabbitTemplate发布到交换时发生的行为。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>Spring AMQP要求将“Queue”，“TopicExchange”和“Binding”声明为顶级Spring bean，以便正确设置。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Send-a-Test-Message"><a href="#Send-a-Test-Message" class="headerlink" title="Send a Test Message"></a>Send a Test Message</h2><p>测试消息由<code>CommandLineRunner</code>发送，它也等待接收器中的锁存器(此处原文： the latch in the receiver )并关闭应用程序上下文：</p>
<p><code>src/main/java/hello/Runner.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Receiver receiver;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigurableApplicationContext context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Runner</span><span class="params">(Receiver receiver, RabbitTemplate rabbitTemplate,</span></span></div><div class="line">            ConfigurableApplicationContext context) &#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sending message..."</span>);</div><div class="line">        rabbitTemplate.convertAndSend(Application.queueName, <span class="string">"Hello from RabbitMQ!"</span>);</div><div class="line">        receiver.getLatch().await(<span class="number">10000</span>, TimeUnit.MILLISECONDS);</div><div class="line">        context.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The runner可以在测试中模拟出来，以便接收器可以单独测试。</p>
<h2 id="Run-the-Application"><a href="#Run-the-Application" class="headerlink" title="Run the Application"></a>Run the Application</h2><p><code>main（）</code>方法通过创建一个Spring应用程序上下文来启动这个过程。 这将启动消息侦听容器，它将开始侦听消息。 有一个<code>Runner</code> bean然后自动执行：它从应用程序上下文中检索<code>RabbitTemplate</code>，并发送一个“RabbitMQ！”。 消息在“spring-boot”队列。 最后，它关闭Spring应用程序上下文，应用程序结束。</p>
<h2 id="Build-an-executable-JAR"><a href="#Build-an-executable-JAR" class="headerlink" title="Build an executable JAR"></a>Build an executable JAR</h2><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，跨不同环境等等，易于将服务作为应用程序进行发布，版本和部署。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-messaging-rabbitmq-0.1.0.jar</div></pre></td></tr></table></figure></p>
<p>如果您使用Maven，可以使用<code>./maven spring-boot：run</code>运行应用程序。 或者你可以用<code>./mvn clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-messaging-rabbitmq-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择[构建传统的WAR文件]（<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">https://spring.io/guides/gs/convert-jar-to-war/</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>您应该看到以下输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sending message...</div><div class="line">Received &lt;Hello from RabbitMQ!&gt;</div></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>恭喜！ 你刚刚用Spring和RabbitMQ开发了一个简单的发布和订阅应用程序。 <a href="http://docs.spring.io/spring-amqp/reference/html/_introduction.html#quick-tour" target="_blank" rel="external">more you can do with Spring and RabbitMQ</a>比这里涵盖的内容更多，但这应该提供一个好的 开始。</p>
<p>想要写一个新的指南或贡献现有的？ 查看我们的 <a href="https://github.com/spring-guides/getting-started-guides/wiki" target="_blank" rel="external">contribution guidelines</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Messaging-with-RabbitMQ&quot;&gt;&lt;a href=&quot;#Messaging-with-RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;Messaging with RabbitMQ&quot;&gt;&lt;/a&gt;Messaging with RabbitMQ&lt;/h1&gt;&lt;p&gt;本文翻译自：&lt;a href=&quot;https://spring.io/guides/gs/messaging-rabbitmq/&quot;&gt;https://spring.io/guides/gs/messaging-rabbitmq/&lt;/a&gt;&lt;br&gt;打算翻译一批Spring的各种指引文档，此为第一篇&lt;/p&gt;
&lt;p&gt;本指南将引导您完成建立一个发布和订阅消息的RabbitMQ AMQP服务器的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>谈 `AOP` 的通俗理解</title>
    <link href="https://muyinchen.github.io/2016/12/25/%E8%B0%88%20%60AOP%60%20%E7%9A%84%E9%80%9A%E4%BF%97%E7%90%86%E8%A7%A3/"/>
    <id>https://muyinchen.github.io/2016/12/25/谈 `AOP` 的通俗理解/</id>
    <published>2016-12-25T03:43:52.732Z</published>
    <updated>2016-12-25T03:43:19.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈-AOP-的通俗理解"><a href="#谈-AOP-的通俗理解" class="headerlink" title="谈 AOP 的通俗理解"></a>谈 <code>AOP</code> 的通俗理解</h1><p>最近在翻译<a href="https://www.gitbook.com/book/muyinchen/spring-framework-5-0-0-m3/details" target="_blank" rel="external">Spring Framework 5.0.0.M3中文文档</a> ,看到<code>AOP</code>时索性把自己的理解写写。<br><a id="more"></a><br>Spring的面向方面的编程（<code>AOP</code>）,国内大都说面向切面，其实我还是觉得面向方面最恰当，何解？那就扯一扯。</p>
<p><strong>1.</strong> <code>AOP</code>相关的概念</p>
<p>1） <em><code>Aspect</code></em> ：切面，切入系统的一个切面。比如事务管理是一个切面，权限管理也是一个切面；</p>
<p>2） <em><code>Join point</code></em> ：连接点，也就是可以进行横向切入的位置；</p>
<p>3） <em><code>Advice</code></em> ：通知，切面在某个连接点执行的操作(分为: <em><code>Before advice</code></em> , <em><code>After returning advice</code></em> , <em><code>After throwing advice</code></em> , <em><code>After (finally) advice</code></em> , <em><code>Around advice</code></em> )；</p>
<p>4） <em><code>Pointcut</code></em> ：切点，符合切点表达式的连接点，也就是真正被切入的地方；</p>
<p>​      这就好比一团面，都是一团白面，根据食谱的不同，我们做什么样的面食即可，厨师关心的是做法，而客人关心的是色香味，再进一步的说，我同样的做面方法，完全可以用不一样的面粉(白面，玉米面，荞麦面等等)，由此便可抽象出面团便是所谓的切点，而面团的加工，比如加水，放鸡蛋，放油，盐等的各种加工便是面的前置方法<em><code>Before advice</code></em>，将面团炸，煎，煮等做出成品来便是其后置方法<em><code>After advice</code></em> ，期间有所谓的环绕方法<em><code>Around advice</code></em> ，而客人的品评则是<em><code>finally  advice</code></em> 中间出现问题了所造成的事件 <em><code>After throwing advice</code></em>   仅供理解，里面可能有不恰当的地方，但自己写代码的时注意即可，由此，这个做面的过程便是面向方面编程即所谓的一个切面(<em><code>Aspect</code></em> )</p>
<p>​     而<code>AOP</code>的核心思想所在便是要求程序员专注于自己的逻辑业务，而非这团面，得以更好的去处理各种问题，从本质上进行解耦。</p>
<p>​    最后，再贴上一段代码来做参考对比：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span> <span class="comment">// for auto scan</span></div><div class="line"><span class="comment">//@Order(2)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInterceptor</span> </span>&#123;	</div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"execution(public * net.aazj.service..*.getUser(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">	<span class="meta">@Before</span>(<span class="string">"myMethod()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method start"</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@After</span>(<span class="string">"myMethod()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method after"</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@AfterReturning</span>(<span class="string">"execution(public * net.aazj.mapper..*.*(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterReturning</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method AfterReturning"</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@AfterThrowing</span>(<span class="string">"execution(public * net.aazj.mapper..*.*(..))"</span>)</div><div class="line"><span class="comment">//  @Around("execution(public * net.aazj.mapper..*.*(..))")</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterThrowing</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method AfterThrowing"</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@Around</span>(<span class="string">"execution(public * net.aazj.mapper..*.*(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">Around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method Around"</span>);</div><div class="line">		SourceLocation sl = jp.getSourceLocation();</div><div class="line">		Object ret = jp.proceed();</div><div class="line">		System.out.println(jp.getTarget());</div><div class="line">		<span class="keyword">return</span> ret;</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@Before</span>(<span class="string">"execution(public * net.aazj.service..*.getUser(..)) &amp;&amp; args(userId,..)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before3</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"userId-----"</span> + userId);</div><div class="line">	&#125;  </div><div class="line">	<span class="meta">@Before</span>(<span class="string">"myMethod()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before2</span><span class="params">(JoinPoint jp)</span> </span>&#123;</div><div class="line">		Object[] args = jp.getArgs();</div><div class="line">		System.out.println(<span class="string">"userId11111: "</span> + (Integer)args[<span class="number">0</span>]);</div><div class="line">		System.out.println(jp.getTarget());</div><div class="line">		System.out.println(jp.getThis());</div><div class="line">		System.out.println(jp.getSignature());</div><div class="line">		System.out.println(<span class="string">"method start"</span>);</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈-AOP-的通俗理解&quot;&gt;&lt;a href=&quot;#谈-AOP-的通俗理解&quot; class=&quot;headerlink&quot; title=&quot;谈 AOP 的通俗理解&quot;&gt;&lt;/a&gt;谈 &lt;code&gt;AOP&lt;/code&gt; 的通俗理解&lt;/h1&gt;&lt;p&gt;最近在翻译&lt;a href=&quot;https://www.gitbook.com/book/muyinchen/spring-framework-5-0-0-m3/details&quot;&gt;Spring Framework 5.0.0.M3中文文档&lt;/a&gt; ,看到&lt;code&gt;AOP&lt;/code&gt;时索性把自己的理解写写。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://muyinchen.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>深度解析Java 8：JDK1.8 AbstractQueuedSynchronizer的实现分析（下）</title>
    <link href="https://muyinchen.github.io/2016/12/19/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%60Java%208%EF%BC%9AAbstractQueuedSynchronizer%60%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://muyinchen.github.io/2016/12/19/深度解析`Java 8：AbstractQueuedSynchronizer`的实现分析（下）/</id>
    <published>2016-12-19T12:36:56.833Z</published>
    <updated>2016-12-19T12:39:13.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度解析Java-8：AbstractQueuedSynchronizer的实现分析（下）"><a href="#深度解析Java-8：AbstractQueuedSynchronizer的实现分析（下）" class="headerlink" title="深度解析Java 8：AbstractQueuedSynchronizer的实现分析（下）"></a>深度解析<code>Java 8：AbstractQueuedSynchronizer</code>的实现分析（下）</h1><p>更多多线程<code>API</code>解析请参考<a href="https://github.com/muyinchen/woker/tree/master/%E5%B9%B6%E5%8F%91/jdk8%20%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB" target="_blank" rel="external"><code>jdk8</code> 版本并发源码解读</a></p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过本系列的上半部分<a href="">JDK1.8 AbstractQueuedSynchronizer的实现分析（上）</a>的解读，相信很多读者已经对<code>AbstractQueuedSynchronizer</code>(下文简称AQS)的独占功能了然于胸,那么这次我们通过对另一个工具类:<code>CountDownLatch</code>的分析来解读<code>AQS</code>的另外一个功能：共享功能。</p>
<h2 id="AQS共享功能的实现"><a href="#AQS共享功能的实现" class="headerlink" title="AQS共享功能的实现"></a><code>AQS</code>共享功能的实现</h2><p>在开始解读<code>AQS</code>的共享功能前，我们再重温一下<code>CountDownLatch</code>，<code>CountDownLatch</code>为<code>java.util.concurrent</code>包下的计数器工具类，常被用在多线程环境下，它在初始时需要指定一个计数器的大小，然后可被多个线程并发的实现减1操作，并在计数器为0后调用<code>await</code>方法的线程被唤醒，从而实现多线程间的协作。它在多线程环境下的基本使用方式为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main thread</span></div><div class="line">      <span class="comment">// 新建一个CountDownLatch，并指制定一个初始大小</span></div><div class="line">      CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</div><div class="line">      <span class="comment">// 调用await方法后，main线程将阻塞在这里，直到countDownLatch 中的计数为0 </span></div><div class="line">      countDownLatch.await();</div><div class="line">      System.out.println(<span class="string">"over"</span>);</div><div class="line"></div><div class="line">     <span class="comment">//thread1</span></div><div class="line">     <span class="comment">// do something </span></div><div class="line">     <span class="comment">//...........</span></div><div class="line">     <span class="comment">//调用countDown方法，将计数减1</span></div><div class="line">      countDownLatch.countDown();</div><div class="line"></div><div class="line">     <span class="comment">//thread2</span></div><div class="line">     <span class="comment">// do something </span></div><div class="line">     <span class="comment">//...........</span></div><div class="line">     <span class="comment">//调用countDown方法，将计数减1</span></div><div class="line">      countDownLatch.countDown();</div><div class="line"></div><div class="line">       <span class="comment">//thread3</span></div><div class="line">     <span class="comment">// do something </span></div><div class="line">     <span class="comment">//...........</span></div><div class="line">     <span class="comment">//调用countDown方法，将计数减1</span></div><div class="line">      countDownLatch.countDown();</div></pre></td></tr></table></figure>
<p>注意，线程<code>thread 1,2,3</code>各自调用 <code>countDown后</code>，<code>countDownLatch</code> 的计数为0，<code>await</code>方法返回，控制台输入<code>“over”</code>,在此之前<code>main thread</code> 会一直沉睡。</p>
<p>可以看到<code>CountDownLatch</code>的作用类似于一个“栏栅”，在<code>CountDownLatch</code>的计数为0前，调用<code>await</code>方法的线程将一直阻塞，直到<code>CountDownLatch</code>计数为0，<code>await方法</code>才会返回，</p>
<p>而<code>CountDownLatch</code>的<code>countDown()方法</code>则一般由各个线程调用，实现<code>CountDownLatch</code>计数的减1。</p>
<p>知道了<code>CountDownLatch</code>的基本使用方式，我们就从上述<code>DEMO</code>的第一行<code>new CountDownLatch（3）</code>开始，看看<code>CountDownLatch</code>是怎么实现的。</p>
<p>首先，看下<code>CountDownLatch</code>的构造方法：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815010.png" alt=""></p>
<p>和<code>ReentrantLock</code>类似，<code>CountDownLatch</code>内部也有一个叫做<code>Sync</code>的内部类，同样也是用它继承了<code>AQS</code>。</p>
<p>再看下<code>Sync</code>：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815011.png" alt=""></p>
<p>如果你看过本系列的上半部分，你对<code>setState</code>方法一定不会陌生，它是<code>AQS</code>的一个“状态位”，在不同的场景下，代表不同的含义，比如在<code>ReentrantLock</code>中，表示加锁的次数，在<code>CountDownLatch</code>中，则表示<code>CountDownLatch</code>的计数器的初始大小。</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815012.png" alt=""></p>
<p>设置完计数器大小后<code>CountDownLatch</code>的构造方法返回，下面我们再看下<code>CountDownLatch</code>的<code>await()</code>方法：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815013.png" alt=""></p>
<p>调用了<code>Sync</code>的<code>acquireSharedInterruptibly</code>方法，因为<code>Sync</code>是<code>AQS</code>子类的原因，这里其实是直接调用了<code>AQS</code>的<code>acquireSharedInterruptibly</code>方法：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815014.png" alt=""></p>
<p>从方法名上看，这个方法的调用是响应线程的打断的，所以在前两行会检查下线程是否被打断。接着，尝试着获取共享锁，小于0，表示获取失败，通过本系列的上半部分的解读， 我们知道AQS在获取锁的思路是，先尝试直接获取锁，如果失败会将当前线程放在队列中，按照FIFO的原则等待锁。而对于共享锁也是这个思路，如果和独占锁一致，这里的<code>tryAcquireShared</code>应该是个空方法，留给子类去判断:</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815015.png" alt=""></p>
<p>再看看<code>CountDownLatch</code>：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815016.png" alt=""></p>
<p>如果<code>state</code>变成0了，则返回1，表示获取成功，否则返回-1则表示获取失败。</p>
<p>看到这里，读者可能会发现， <code>await</code>方法的获取方式更像是在获取一个独占锁，那为什么这里还会用<code>tryAcquireShared</code>呢？</p>
<p>回想下<code>CountDownLatch</code>的<code>await</code>方法是不是只能在主线程中调用？答案是否定的，<code>CountDownLatch</code>的<code>await</code>方法可以在多个线程中调用，当<code>CountDownLatch</code>的计数器为0后，调用<code>await</code>的方法都会依次返回。 也就是说可以多个线程同时在等待<code>await</code>方法返回，所以它被设计成了实现<code>tryAcquireShared</code>方法，获取的是一个共享锁，锁在所有调用<code>await</code>方法的线程间共享，所以叫共享锁。</p>
<p>回到<code>acquireSharedInterruptibly</code>方法：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815017.png" alt=""></p>
<p>如果获取共享锁失败（返回了-1，说明<code>state</code>不为0，也就是<code>CountDownLatch</code>的计数器还不为0），进入调用<code>doAcquireSharedInterruptibly</code>方法中，按照我们上述的猜想，应该是要将当前线程放入到队列中去。</p>
<p>在这之前，我们再回顾一下<code>AQS</code>队列的数据结构：<code>AQS</code>是一个双向链表，通过节点中的<code>next</code>，<code>pre</code>变量分别指向当前节点后一个节点和前一个节点。其中，每个节点中都包含了一个线程和一个类型变量：表示当前节点是独占节点还是共享节点，头节点中的线程为正在占有锁的线程，而后的所有节点的线程表示为正在等待获取锁的线程。如下图所示：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815018.png" alt=""></p>
<p>黄色节点为头节点，表示正在获取锁的节点，剩下的蓝色节点（Node1、Node2、Node3）为正在等待锁的节点，他们通过各自的<code>next</code>、<code>pre</code>变量分别指向前后节点，形成了<code>AQS</code>中的双向链表。每个线程被加上类型（共享还是独占）后便是一个<code>Node</code>， 也就是本文中说的节点。</p>
<p>再看看<code>doAcquireSharedInterruptibly</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED); </div><div class="line"><span class="comment">//将当前线程包装为类型为Node.SHARED的节点，标示这是一个共享节点。</span></div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                <span class="keyword">if</span> (p == head) &#123;</div><div class="line"><span class="comment">//如果新建节点的前一个节点，就是Head，说明当前节点是AQS队列中等待获取锁的第一个节点，</span></div><div class="line"><span class="comment">//按照FIFO的原则，可以直接尝试获取锁。</span></div><div class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg);</div><div class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        setHeadAndPropagate(node, r); </div><div class="line"><span class="comment">//获取成功，需要将当前节点设置为AQS队列中的第一个节点，这是AQS的规则//队列的头节点表示正在获取锁的节点</span></div><div class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                        failed = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; <span class="comment">//检查下是否需要将当前节点挂起</span></div><div class="line">                    parkAndCheckInterrupt()) </div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed)</div><div class="line">                cancelAcquire(node);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里有几点需要说明的：</p>
<p>1. <code>setHeadAndPropagate</code>方法：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815019.png" alt=""></p>
<p>首先，使用了<code>CAS</code>更换了头节点，然后，将当前节点的下一个节点取出来，如果同样是“<code>shared</code>”类型的，再做一个”<code>releaseShared</code>“操作。</p>
<p>看下<code>doReleaseShared</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (;;) &#123;</div><div class="line">            Node h = head;</div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</div><div class="line">                <span class="keyword">int</span> ws = h.waitStatus;</div><div class="line">                <span class="keyword">if</span> (ws == Node.SIGNAL) &#123; </div><div class="line">                    <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>)) </div><div class="line"><span class="comment">//如果当前节点是SIGNAL意味着，它正在等待一个信号，  </span></div><div class="line"><span class="comment">//或者说，它在等待被唤醒，因此做两件事，1是重置waitStatus标志位，2是重置成功后,唤醒下一个节点。</span></div><div class="line">                        <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></div><div class="line">                    unparkSuccessor(h);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</div><div class="line">                         !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))  </div><div class="line"><span class="comment">//如果本身头节点的waitStatus是出于重置状态（waitStatus==0）的，将其设置为“传播”状态。</span></div><div class="line"><span class="comment">//意味着需要将状态向后一个节点传播。</span></div><div class="line">                    <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>为什么要这么做呢？这就是共享功能和独占功能最不一样的地方，对于独占功能来说，有且只有一个线程（通常只对应一个节点，拿<code>ReentantLock</code>举例，如果当前持有锁的线程重复调用<code>lock()</code>方法，那根据本系列上半部分我们的介绍，我们知道，会被包装成多个节点在<code>AQS</code>的队列中，所以用一个线程来描述更准确），能够获取锁，但是对于共享功能来说。</p>
<p>共享的状态是可以被共享的，也就是意味着其他<code>AQS</code>队列中的其他节点也应能第一时间知道状态的变化。因此，一个节点获取到共享状态流程图是这样的：</p>
<p>比如现在有如下队列：</p>
<p>当<code>Node1</code>调用<code>tryAcquireShared</code>成功后，更换了头节点：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815020.png" alt=""></p>
<pre><code>`Node1`变成了头节点然后调用`unparkSuccessor()`方法唤醒了`Node2`、`Node2`中持有的线程A出于上面流程图的`park node`的位置，
</code></pre><p>线程A被唤醒后，重复黄色线条的流程，重新检查调用<code>tryAcquireShared</code>方法，看能否成功，如果成功，则又更改头节点，重复以上步骤，以实现节点自身获取共享锁成功后，唤醒下一个共享类型节点的操作，实现共享状态的向后传递。</p>
<p>2.其实对于<code>doAcquireShared</code>方法，<code>AQS</code>还提供了集中类似的实现：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815021.png" alt=""></p>
<p>分别对应了：</p>
<ol>
<li>带参数请求共享锁。 （忽略中断）</li>
<li>带参数请求共享锁，且响应中断。（每次循环时，会检查当前线程的中断状态，以实现对线程中断的响应）</li>
<li>带参数请求共享锁但是限制等待时间。（第二个参数设置超时时间，超出时间后，方法返回。）</li>
</ol>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815022.png" alt=""></p>
<p>比较特别的为最后一个<code>doAcquireSharedNanos</code>方法，我们一起看下它怎么实现超时时间的控制的。</p>
<p>因为该方法和其余获取共享锁的方法逻辑是类似的，我用红色框圈出了它所不一样的地方，也就是实现超时时间控制的地方。</p>
<p>可以看到，其实就是在进入方法时，计算出了一个“<code>deadline</code>”，每次循环的时候用当前时间和“<code>deadline</code>”比较，大于“<code>dealine</code>”说明超时时间已到，直接返回方法。</p>
<p>注意，最后一个红框中的这行代码：</p>
<p><code>nanosTimeout &gt; spinForTimeoutThreshold</code></p>
<p>从变量的字面意思可知，这是拿超时时间和超时自旋的最小作比较，在这里<code>Doug Lea</code>把超时自旋的阈值设置成了<code>1000ns,</code>即只有超时时间大于<code>1000ns</code>才会去挂起线程，否则，再次循环，以实现“自旋”操作。这是“自旋”在<code>AQS</code>中的应用之处。</p>
<p>看完<code>await</code>方法，我们再来看下<code>countDown</code>()方法：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815023.png" alt=""></p>
<p>调用了<code>AQS</code>的<code>releaseShared</code>方法,并传入了参数1:</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815024.png" alt=""></p>
<p>同样先尝试去释放锁，<code>tryReleaseShared</code>同样为空方法，留给子类自己去实现，以下是<code>CountDownLatch</code>的内部类<code>Sync</code>的实现：</p>
<p><img src="http://cdn.infoqstatic.com/statics_s2_20161214-0550/resource/articles/java8-abstractqueuedsynchronizer/zh/resources/0815025.png" alt=""></p>
<p>死循环更新<code>state</code>的值，实现<code>state</code>的减1操作，之所以用死循环是为了确保<code>state</code>值的更新成功。</p>
<p>从上文的分析中可知，如果<code>state</code>的值为0，在<code>CountDownLatch</code>中意味：所有的子线程已经执行完毕，这个时候可以唤醒调用<code>await()</code>方法的线程了，而这些线程正在<code>AQS</code>的队列中，并被挂起的，</p>
<p>所以下一步应该去唤醒<code>AQS</code>队列中的头节点了（<code>AQS</code>的队列为<code>FIFO</code>队列），然后由头节点去依次唤醒<code>AQS</code>队列中的其他共享节点。</p>
<p>如果<code>tryReleaseShared</code>返回<code>true</code>,进入<code>doReleaseShared()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            Node h = head;</div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</div><div class="line">                <span class="keyword">int</span> ws = h.waitStatus;</div><div class="line">                <span class="keyword">if</span> (ws == Node.SIGNAL) &#123; </div><div class="line">                    <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>)) </div><div class="line"><span class="comment">//如果当前节点是SIGNAL意味着，它正在等待一个信号，</span></div><div class="line"> <span class="comment">//或者说，它在等待被唤醒，因此做两件事，1是重置waitStatus标志位，2是重置成功后,唤醒下一个节点。</span></div><div class="line">                        <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></div><div class="line">                    unparkSuccessor(h);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</div><div class="line">                         !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))  </div><div class="line"><span class="comment">//如果本身头节点的waitStatus是出于重置状态（waitStatus==0）的，将其设置为“传播”状态。</span></div><div class="line"><span class="comment">//意味着需要将状态向后一个节点传播。</span></div><div class="line">                    <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>当线程被唤醒后，会重新尝试获取共享锁，而对于<code>CountDownLatch</code>线程获取共享锁判断依据是<code>state</code>是否为0，而这个时候显然<code>state</code>已经变成了0，因此可以顺利获取共享锁并且依次唤醒AQS队里中后面的节点及对应的线程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从<code>CountDownLatch</code>入手，深入分析了<code>AQS</code>关于共享锁方面的实现方式：</p>
<p>如果获取共享锁失败后，将请求共享锁的线程封装成<code>Node</code>对象放入<code>AQS</code>的队列中，并挂起<code>Node</code>对象对应的线程，实现请求锁线程的等待操作。待共享锁可以被获取后，从头节点开始，依次唤醒头节点及其以后的所有共享类型的节点。实现共享状态的传播。</p>
<p>这里有几点值得注意：</p>
<ol>
<li>与<code>AQS</code>的独占功能一样，共享锁是否可以被获取的判断为空方法，交由子类去实现。</li>
<li>与<code>AQS</code>的独占功能不同，当锁被头节点获取后，独占功能是只有头节点获取锁，其余节点的线程继续沉睡，等待锁被释放后，才会唤醒下一个节点的线程，而共享功能是只要头节点获取锁成功，就在唤醒自身节点对应的线程的同时，继续唤醒<code>AQS</code>队列中的下一个节点的线程，每个节点在唤醒自身的同时还会唤醒下一个节点对应的线程，以实现共享状态的“向后传播”，从而实现共享功能。</li>
</ol>
<p>以上的分析都是从<code>AQS</code>子类的角度去看待<code>AQS</code>的部分功能的，而如果直接看待<code>AQS</code>，或许可以这么去解读：</p>
<p>首先，<code>AQS</code>并不关心“是什么锁”，对于<code>AQS</code>来说它只是实现了一系列的用于判断“资源”是否可以访问的<code>API</code>,并且封装了在“访问资源”受限时将请求访问的线程的加入队列、挂起、唤醒等操作， <code>AQS</code>只关心“资源不可以访问时，怎么处理？”、“资源是可以被同时访问，还是在同一时间只能被一个线程访问？”、“如果有线程等不及资源了，怎么从<code>AQS</code>的队列中退出？”等一系列围绕资源访问的问题，而至于“资源是否可以被访问？”这个问题则交给<code>AQS</code>的子类去实现。</p>
<p>当<code>AQS</code>的子类是实现独占功能时，例如<code>ReentrantLock</code>，“资源是否可以被访问”被定义为只要<code>AQS</code>的<code>state</code>变量不为0，并且持有锁的线程不是当前线程，则代表资源不能访问。</p>
<p>当<code>AQS</code>的子类是实现共享功能时，例如：<code>CountDownLatch</code>，“资源是否可以被访问”被定义为只要AQS的<code>state</code>变量不为0，说明资源不能访问。</p>
<p>这是典型的将规则和操作分开的设计思路：规则子类定义，操作逻辑因为具有公用性，放在父类中去封装。</p>
<p>当然，正式因为<code>AQS</code>只是关心“资源在什么条件下可被访问”，所以子类还可以同时使用<code>AQS</code>的共享功能和独占功能的<code>API</code>以实现更为复杂的功能。</p>
<p>比如：<code>ReentrantReadWriteLock</code>，我们知道<code>ReentrantReadWriteLock</code>的中也有一个叫<code>Sync</code>的内部类继承了<code>AQS</code>，而<code>AQS</code>的队列可以同时存放共享锁和独占锁，对于<code>ReentrantReadWriteLock</code>来说分别代表读锁和写锁，当队列中的头节点为读锁时，代表读操作可以执行，而写操作不能执行，因此请求写操作的线程会被挂起，当读操作依次推出后，写锁成为头节点，请求写操作的线程被唤醒，可以执行写操作，而此时的读请求将被封装成<code>Node</code>放入<code>AQS</code>的队列中。如此往复，实现读写锁的读写交替进行。</p>
<p>而本系列文章上半部分提到的<code>FutureTask</code>，其实思路也是：封装一个存放线程执行结果的变量<code>A</code>,使用<code>AQS</code>的独占<code>API</code>实现线程对变量A的独占访问，判断规则是，线程没有执行完毕：<code>call()</code>方法没有返回前，不能访问变量A，或者是超时时间没到前不能访问变量<code>A</code>(这就是<code>FutureTask</code>的<code>get</code>方法可以实现获取线程执行结果时，设置超时时间的原因)。</p>
<p>综上所述，本系列文章从<code>AQS</code>独占锁和共享锁两个方面深入分析了<code>AQS</code>的实现方式和独特的设计思路，希望对读者有启发，下一篇文章，我们将继续<code>JDK 1.8下 J.U.C (java.util.concurrent)</code>包中的其他工具类，敬请期待。</p>
<p>转自：<a href="http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer" target="_blank" rel="external">http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深度解析Java-8：AbstractQueuedSynchronizer的实现分析（下）&quot;&gt;&lt;a href=&quot;#深度解析Java-8：AbstractQueuedSynchronizer的实现分析（下）&quot; class=&quot;headerlink&quot; title=&quot;深度解析Java 8：AbstractQueuedSynchronizer的实现分析（下）&quot;&gt;&lt;/a&gt;深度解析&lt;code&gt;Java 8：AbstractQueuedSynchronizer&lt;/code&gt;的实现分析（下）&lt;/h1&gt;&lt;p&gt;更多多线程&lt;code&gt;API&lt;/code&gt;解析请参考&lt;a href=&quot;https://github.com/muyinchen/woker/tree/master/%E5%B9%B6%E5%8F%91/jdk8%20%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB&quot;&gt;&lt;code&gt;jdk8&lt;/code&gt; 版本并发源码解读&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="并发源码解读" scheme="https://muyinchen.github.io/categories/%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="并发源码解读" scheme="https://muyinchen.github.io/tags/%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>单点登录的实现原理</title>
    <link href="https://muyinchen.github.io/2016/12/19/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://muyinchen.github.io/2016/12/19/单点登录的实现原理/</id>
    <published>2016-12-19T12:32:04.150Z</published>
    <updated>2016-12-19T12:31:36.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单点登录的实现原理"><a href="#单点登录的实现原理" class="headerlink" title="单点登录的实现原理"></a>单点登录的实现原理</h1><p>单点登录在现在的系统架构中广泛存在，他将多个子系统的认证体系打通，实现了一个入口多处使用，而在架构单点登录时，也会遇到一些小问题，在不同的应用环境中可以采用不同的单点登录实现方案来满足需求。我将以我所遇到的应用环境以及在其中所经历的各个阶段与大家分享，若有不足，希望各位不吝赐教。<br><a id="more"></a></p>
<h2 id="一、共享Session"><a href="#一、共享Session" class="headerlink" title="一、共享Session"></a>一、共享<code>Session</code></h2><p>　　共享<code>Session</code>可谓是实现单点登录最直接、最简单的方式。将用户认证信息保存于<code>Session</code>中，即以<code>Session</code>内存储的值为用户凭证，这在单个站点内使用是很正常也很容易实现的，而在用户验证、用户信息管理与业务应用分离的场景下即会遇到单点登录的问题，在应用体系简单，子系统很少的情况下，可以考虑采用<code>Session</code>共享的方法来处理这个问题。</p>
<p><img src="http://images.cnitblog.com/i/548874/201406/222043593482457.png" alt=""></p>
<p>　　这个架构我使用了基于Redis的<code>Session</code>共享方案。将<code>Session</code>存储于<code>Redis</code>上，然后将整个系统的全局<code>Cookie Domain</code>设置于顶级域名上，这样<code>SessionID</code>就能在各个子系统间共享。</p>
<p>　　这个方案存在着严重的扩展性问题，首先，ASP.NET的<code>Session</code>存储必须为<code>SessionStateItemCollection</code>对象，而存储的结构是经过序列化后经过加密存储的。并且当用户访问应用时，他首先做的就是将存储容器里的所有内容全部取出，并且反序列化为SessionStateItemCollection对象。这就决定了他具有以下约束：</p>
<p>　　1、  <code>Session</code>中所涉及的类型必须是子系统中共同拥有的（即程序集、类型都需要一致），这导致<code>Session</code>的使用受到诸多限制；</p>
<p>　　2、  跨顶级域名的情况完全无法处理；</p>
<h2 id="二、基于OpenId的单点登录"><a href="#二、基于OpenId的单点登录" class="headerlink" title="　　二、基于OpenId的单点登录"></a>　　二、基于<code>OpenId</code>的单点登录</h2><p>　　这种单点登录将用户的身份标识信息简化为<code>OpenId</code>存放于客户端，当用户登录某个子系统时，将<code>OpenId</code>传送到服务端，服务端根据<code>OpenId</code>构造用户验证信息，多用于<code>C/S</code>与<code>B/S</code>相结合的系统，流程如下：</p>
<p><img src="http://images.cnitblog.com/i/548874/201406/222046506453455.png" alt=""></p>
<p>　　由上图可以看到，这套单点登录依赖于<code>OpenId</code>的传递，其验证的基础在于<code>OpenId</code>的存储以及发送。</p>
<p>　　　1、当用户第一次登录时，将用户名密码发送给验证服务；</p>
<p>　　　2、验证服务将用户标识<code>OpenId</code>返回到客户端；</p>
<p>　　   3、客户端进行存储；</p>
<p>　　　4、访问子系统时，将<code>OpenId</code>发送到子系统；</p>
<p>　　　5、子系统将<code>OpenId</code>转发到验证服务；</p>
<p>　　　6、验证服务将用户认证信息返回给子系统；</p>
<p>　　　7、子系统构建用户验证信息后将授权后的内容返回给客户端。</p>
<p>　　这套单点登录验证机制的主要问题在于他基于<code>C/S</code>架构下将用户的<code>OpenId</code>存储于客户端，在子系统之间发送<code>OpenId</code>，而<code>B/S模式</code>下要做到这一点就显得较为困难。为了处理这个问题我们将引出下一种方式，这种方式将解决<code>B/S</code>模式下的<code>OpenId</code>的存储、传递问题。</p>
<h2 id="三、基于Cookie的OpenId存储方案"><a href="#三、基于Cookie的OpenId存储方案" class="headerlink" title="　　三、基于Cookie的OpenId存储方案"></a>　　三、基于<code>Cookie</code>的<code>OpenId</code>存储方案</h2><p>　　我们知道，<code>Cookie</code>的作用在于充当一个信息载体在<code>Server端</code>和<code>Browser端</code>进行信息传递，而<code>Cookie</code>一般是以域名为分割的，例如<code>a.xxx.com</code>与<code>b.xxx.com</code>的<code>Cookie</code>是不能互相访问的，但是子域名是可以访问上级域名的<code>Cookie</code>的。即<code>a.xxx.com</code>和<code>b.xxx.com</code>是可以访问<code>xxx.com</code>下的<code>Cookie</code>的，于是就能将顶级域名的<code>Cookie</code>作为<code>OpenId</code>的载体。</p>
<p>　　<img src="http://images.cnitblog.com/i/548874/201406/222048373015306.png" alt=""></p>
<p>　　验证步骤和上第二个方法非常相似：</p>
<p>　　1、  在提供验证服务的站点里登录；</p>
<p>　　2、  将<code>OpenId</code>写入顶级域名<code>Cookie</code>里；</p>
<p>　　3、  访问子系统（<code>Cookie</code>里带有<code>OpenId</code>）</p>
<p>　　4、  子系统取出<code>OpenId</code>通过并向验证服务发送<code>OpenId</code></p>
<p>　　5、  返回用户认证信息</p>
<p>　　6、  返回授权后的内容</p>
<p>　　在以上两种方法中我们都可以看到通过OpenId解耦了<code>Session</code>共享方案中的类型等问题，并且构造用户验证信息将更灵活，子系统间的验证是相互独立的，但是在第三种方案里，我们基于所有子系统都是同一个顶级域名的假设，而在实际生产环境里有多个域名是很正常的事情，那么就不得不考虑跨域问题究竟如何解决。</p>
<h2 id="四、B-S多域名环境下的单点登录处理"><a href="#四、B-S多域名环境下的单点登录处理" class="headerlink" title="　　四、B/S多域名环境下的单点登录处理"></a>　　四、B/S多域名环境下的单点登录处理</h2><p>　　　在多个顶级域名的情况下，我们将无法让各个子系统的<code>OpenId</code>共享。处理<code>B/S</code>环境下的跨域问题，我们首先就应该想到<code>JSONP</code>的方案。</p>
<p><img src="http://images.cnitblog.com/i/548874/201406/222049506614217.png" alt=""></p>
<p>　　验证步骤如下：</p>
<p>　　1、  用户通过登录子系统进行用户登录；</p>
<p>　　2、  用户登录子系统记录了用户的登录状态、<code>OpenId</code>等信息；</p>
<p>　　3、  用户使用业务子系统；</p>
<p>　　4、  若用户未登录业务子系统则将用户跳转至用户登录子系统；</p>
<p>　　5、  用户子系统通过<code>JSONP</code>接口将用户<code>OpenId</code>传给业务子系统；</p>
<p>　　6、  业务子系统通过<code>OpenId</code>调用验证服务；</p>
<p>　　7、  验证服务返回认证信息、业务子系统构造用户登录凭证；（此时用户客户端已经与子业务系统的验证信息已经一一对应）</p>
<p>　　8、  将用户登录结果返回用户登录子系统，若成功登录则将用户跳转回业务子系统；</p>
<p>　　9、  将授权后的内容返回客户端；</p>
<h2 id="五、安全问题"><a href="#五、安全问题" class="headerlink" title="　　五、安全问题"></a>　　五、安全问题</h2><p>　　经过以上步骤，跨域情况下的单点登录问题已经可以得到解决。而在整个开发过程初期，我们采用用户表中纪录一个<code>OpenId字段</code>来保存用户<code>OpenId</code>，而这个机制下很明显存在一些安全性、扩展性问题。这个扩展性问题主要体现在一个方面：<code>OpenId</code>的安全性和用户体验的矛盾。</p>
<p>　　整个单点登录的机制决定了<code>OpenId</code>是会出现在客户端的，所以<code>OpenId</code>需要有过期机制，假如用户在一个终端登录的话可以选择在用户每次登录或者每次退出时刷新<code>OpenId</code>，而在多终端登录的情况下就会出现矛盾：当一个终端刷新了<code>OpenId</code>之后其他终端将无法正常授权。而最终，我采用了单用户<code>多OpenId</code>的解决方案。每次用户通过用户名/密码登录时，产生一个<code>OpenId</code>保存在<code>Redis</code>里，并且设定过期时间，这样多个终端登录就会有<code>多个OpenId</code>与之对应，<code>不再会存在一个OpenId失效所有终端验证都失效的情况</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单点登录的实现原理&quot;&gt;&lt;a href=&quot;#单点登录的实现原理&quot; class=&quot;headerlink&quot; title=&quot;单点登录的实现原理&quot;&gt;&lt;/a&gt;单点登录的实现原理&lt;/h1&gt;&lt;p&gt;单点登录在现在的系统架构中广泛存在，他将多个子系统的认证体系打通，实现了一个入口多处使用，而在架构单点登录时，也会遇到一些小问题，在不同的应用环境中可以采用不同的单点登录实现方案来满足需求。我将以我所遇到的应用环境以及在其中所经历的各个阶段与大家分享，若有不足，希望各位不吝赐教。&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>深度解析Java 8：JDK1.8 AbstractQueuedSynchronizer的实现分析（上）</title>
    <link href="https://muyinchen.github.io/2016/12/18/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%60Java%208%EF%BC%9AJDK1.8%20AbstractQueuedSynchronizer%60%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://muyinchen.github.io/2016/12/18/深度解析`Java 8：JDK1.8 AbstractQueuedSynchronizer`的实现分析（上）/</id>
    <published>2016-12-18T15:17:21.829Z</published>
    <updated>2016-12-18T15:19:52.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度解析Java-8：JDK1-8-AbstractQueuedSynchronizer的实现分析（上）"><a href="#深度解析Java-8：JDK1-8-AbstractQueuedSynchronizer的实现分析（上）" class="headerlink" title="深度解析Java 8：JDK1.8 AbstractQueuedSynchronizer的实现分析（上）"></a>深度解析<code>Java 8：JDK1.8 AbstractQueuedSynchronizer</code>的实现分析（上）</h1><p>更多多线程<code>API</code>解析请参考<a href="https://github.com/muyinchen/woker/tree/master/%E5%B9%B6%E5%8F%91/jdk8%20%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB" target="_blank" rel="external"><code>jdk8</code> 版本并发源码解读</a></p>
 <a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中的<code>FutureTask</code>作为可异步执行任务并可获取执行结果而被大家所熟知。通常可以使用<code>future.get()</code>来获取线程的执行结果，在线程执行结束之前，<code>get方法</code>会一直阻塞状态，直到<code>call()</code>返回，其<code>优点</code>是使用线程异步执行任务的情况下还可以获取到线程的执行结果，但是<code>FutureTask</code>的以上功能却是依靠通过一个叫<code>AbstractQueuedSynchronizer</code>的类来实现，至少在<code>JDK 1.5、JDK1.6</code>版本是这样的（从<code>1.7</code>开始<code>FutureTask</code>已经被其作者<code>Doug Lea</code>修改为<code>不再依赖AbstractQueuedSynchronizer实现</code>了，这是<code>JDK1.7的变化之一</code>）。但是<code>AbstractQueuedSynchronizer</code>在<code>JDK1.8</code>中还有如下图所示的众多子类：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730000.png" alt=""></p>
<p>这些<code>JDK</code>中的工具类或多或少都被大家用过不止一次，比如ReentrantLock，我们知道<code>ReentrantLock</code>的功能是实现代码段的并发访问控制，也就是通常意义上所说的锁，在没有看到<code>AbstractQueuedSynchronizer</code>前，可能会以为它的实现是通过类似于<code>synchronized</code>，通过对<code>对象</code>加锁来实现的。但事实上它仅仅是一个工具类！没有使用更“高级”的机器指令，不是关键字，也不依靠<code>JDK编译</code>时的特殊处理，仅仅作为一个普普通通的类就完成了代码块的并发访问控制，这就更让人疑问它怎么实现的代码块的并发访问控制的了。那就让我们一起来仔细看下<code>Doug Lea</code>怎么去实现的这个锁。为了方便，本文中使用<code>AQS</code>代替<code>AbstractQueuedSynchronizer</code>。</p>
<h2 id="细说AQS"><a href="#细说AQS" class="headerlink" title="细说AQS"></a>细说<code>AQS</code></h2><p>在深入分析<code>AQS</code>之前，我想先从<code>AQS</code>的功能上说明下<code>AQS</code>，站在使用者的角度，<code>AQS</code>的功能可以分为两类：独占功能和共享功能，它的所有子类中，要么实现并使用了它独占功能的<code>API</code>，要么使用了共享锁的功能，而不会同时使用两套<code>API</code>，即便是它最有名的子类<code>ReentrantReadWriteLock</code>，也是通过两个内部类：读锁和写锁，分别实现的两套<code>API</code>来实现的，为什么这么做，后面我们再分析，到目前为止，我们只需要明白<code>AQS</code>在功能上有独占控制和共享控制两种功能即可。</p>
<h3 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h3><p>在真正对解读<code>AQS</code>之前，我想先从使用了它独占控制功能的子类<code>ReentrantLock</code>说起，分析<code>ReentrantLock</code>的同时看一看<code>AQS</code>的实现，再推理出<code>AQS</code>独特的设计思路和实现方式。最后，再看其共享控制功能的实现。</p>
<p>对于<code>ReentrantLock</code>，使用过的同学应该都知道，通常是这么用它的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reentrantLock.lock()</div><div class="line">        <span class="comment">//do something</span></div><div class="line">        reentrantLock.unlock()</div></pre></td></tr></table></figure>
<p><code>ReentrantLock</code>会保证 <code>do something</code>在同一时间只有一个线程在执行这段代码，或者说，同一时刻只有一个线程的lock方法会返回。其余线程会被挂起，直到获取锁。从这里可以看出，其实<code>ReentrantLock</code>实现的就是一个独占锁的功能：有且只有一个线程获取到锁，其余线程全部挂起，直到该拥有锁的线程释放锁，被挂起的线程被唤醒重新开始竞争锁。没错，<code>ReentrantLock</code>使用的就是AQS的独占<code>API</code>实现的。</p>
<p>那现在我们就从<code>ReentrantLock</code>的实现开始一起看看重入锁是怎么实现的。</p>
<p>首先看lock方法：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730001.png" alt=""></p>
<p>如<code>FutureTask（JDK1.6）</code>一样，<code>ReentrantLock</code>内部有代理类完成具体操作，<code>ReentrantLock</code>只是封装了统一的一套<code>API</code>而已。值得注意的是，使用过<code>ReentrantLock</code>的同学应该知道，<code>ReentrantLock</code>又分为公平锁和非公平锁，所以，<code>ReentrantLock</code>内部只有两个sync的实现：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730002.png" alt=""></p>
<p>公平锁：每个线程抢占锁的顺序为先后调用<code>lock方法</code>的顺序依次获取锁，类似于排队吃饭。</p>
<p>非公平锁：每个线程抢占锁的顺序不定，谁运气好，谁就获取到锁，和调用lock方法的先后顺序无关，类似于堵车时，加塞的那些XXXX。</p>
<p>到这里，通过<code>ReentrantLock</code>的功能和锁的所谓排不排队的方式，我们是否可以这么猜测<code>ReentrantLock</code>或者<code>AQS</code>的实现（现在不清楚谁去实现这些功能）：有那么一个被<code>volatile</code>修饰的标志位叫做<code>key</code>，用来表示有没有线程拿走了锁，或者说，锁还存不存在，还需要一个线程安全的队列，维护一堆被挂起的线程，以至于当锁被归还时，能通知到这些被挂起的线程，可以来竞争获取锁了。</p>
<p>至于公平锁和非公平锁，唯一的区别是在获取锁的时候是直接去获取锁，还是进入队列排队的问题了。为了验证我们的猜想，我们继续看一下<code>ReentrantLock</code>中公平锁的实现：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730003.png" alt=""></p>
<p>调用到了<code>AQS</code>的acquire方法：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730004.png" alt=""></p>
<p>从方法名字上看语义是，尝试获取锁，获取不到则创建一个<code>waiter</code>（当前线程）后放到队列中，这和我们猜测的好像很类似。<a href="$">[G1]</a></p>
<p>先看下<code>tryAcquire</code>方法:</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730005.png" alt=""></p>
<p>留空了，<code>Doug Lea</code>是想留给子类去实现（既然要给子类实现，应该用抽象方法，但是Doug Lea没有这么做，原因是<code>AQS</code>有两种功能，面向两种使用场景，需要给子类定义的方法都是抽象方法了，会导致子类无论如何都需要实现另外一种场景的抽象方法，显然，这对子类来说是不友好的。）</p>
<p>看下<code>FairSync</code>的<code>tryAcquire</code>方法：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730006.png" alt=""></p>
<p><code>getState方法</code>是<code>AQS</code>的方法，因为在<code>AQS</code>里面有个叫<code>statede</code>的标志位 :</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730007.png" alt=""></p>
<p>事实上，这个<code>state</code>就是前面我们猜想的那个“<code>key</code>”！</p>
<p>回到<code>tryAcquire</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">            <span class="keyword">final</span> Thread current = Thread.currentThread();<span class="comment">//获取当前线程</span></div><div class="line">            <span class="keyword">int</span> c = getState();  <span class="comment">//获取父类AQS中的标志位</span></div><div class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; </div><div class="line">                    <span class="comment">//如果队列中没有其他线程  说明没有线程正在占有锁！</span></div><div class="line">                    compareAndSetState(<span class="number">0</span>, acquires)) &#123; </div><div class="line">                    <span class="comment">//修改一下状态位，注意：这里的acquires是在lock的时候传递来的，从上面的图中可以知道，这个值是写死的1</span></div><div class="line">                    setExclusiveOwnerThread(current);</div><div class="line">                    <span class="comment">//如果通过CAS操作将状态为更新成功则代表当前线程获取锁，因此，将当前线程设置到AQS的一个变量中，说明这个线程拿走了锁。</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">             <span class="comment">//如果不为0 意味着，锁已经被拿走了，但是，因为ReentrantLock是重入锁，</span></div><div class="line">             <span class="comment">//是可以重复lock,unlock的，只要成对出现行。一次。这里还要再判断一次 获取锁的线程是不是当前请求锁的线程。</span></div><div class="line">                <span class="keyword">int</span> nextc = c + acquires;<span class="comment">//如果是的，累加在state字段上就可以了。</span></div><div class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">                setState(nextc);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>到此，如果如果获取锁，<code>tryAcquire</code>返回<code>true</code>，反之，返回<code>false</code>，回到<code>AQS</code>的acquire方法。</p>
<p>如果没有获取到锁，按照我们的描述，应该将当前线程放到队列中去，只不过，在放之前，需要做些包装。</p>
<p>先看<code>addWaiter</code>方法：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730008.png" alt=""></p>
<p>用当前线程去构造一个<code>Node</code>对象，<code>mode</code>是一个表示<code>Node</code>类型的字段，仅仅表示这个节点是独占的，还是共享的，或者说，<code>AQS</code>的这个队列中，哪些节点是独占的，哪些是共享的。</p>
<p>这里<code>lock</code>调用的是<code>AQS</code>独占的<code>API</code>，当然，可以写死是独占状态的节点。</p>
<p>创建好节点后，将节点加入到队列尾部，此处，在队列不为空的时候，先尝试通过<code>cas</code>方式修改尾节点为最新的节点，如果修改失败，意味着有并发，这个时候才会进入<code>enq</code>中死循环，“自旋”方式修改。</p>
<p>将线程的节点接入到队里中后，当然还需要做一件事:将当前线程挂起！这个事，由acquireQueued来做。</p>
<p>在解释acquireQueued之前，我们需要先看下<code>AQS</code>中队列的内存结构，我们知道，队列由Node类型的节点组成，其中至少有两个变量，一个封装线程，一个封装节点类型。</p>
<p>而实际上，它的内存结构是这样的（第一次节点插入时，第一个节点是一个空节点，代表有一个线程已经获取锁，事实上，队列的第一个节点就是代表持有锁的节点）：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730009.png" alt=""></p>
<p>黄色节点为队列默认的头节点，每次有线程竞争失败，进入队列后其实都是插入到队列的尾节点（<code>tail</code>后面）后面。这个从<code>enq方法</code>可以看出来，上文中有提到<code>enq方法</code>为将节点插入队列的方法:</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/07300010.png" alt=""></p>
<p>再回来看看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">             <span class="comment">//如果当前的节点是head说明他是队列中第一个“有效的”节点，因此尝试获取，上文中有提到这个类是交给子类去扩展的。</span></div><div class="line">                    setHead(node);<span class="comment">//成功后，将上图中的黄色节点移除，Node1变成头节点。</span></div><div class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                    failed = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">return</span> interrupted;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; </div><div class="line">                <span class="comment">//否则，检查前一个节点的状态为，看当前获取锁失败的线程是否需要挂起。</span></div><div class="line">                    parkAndCheckInterrupt()) </div><div class="line">               <span class="comment">//如果需要，借助JUC包下的LockSopport类的静态方法Park挂起当前线程。知道被唤醒。</span></div><div class="line">                    interrupted = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (failed) <span class="comment">//如果有异常</span></div><div class="line">                cancelAcquire(node);<span class="comment">// 取消请求，对应到队列操作，就是将当前节点从队列中移除。</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这块代码有几点需要说明：</p>
<p>1. <code>Node节点</code>中，除了存储当前线程，节点类型，队列中前后元素的变量，还有一个叫<code>waitStatus</code>的变量，改变量用于描述节点的状态，为什么需要这个状态呢？</p>
<p>原因是：<code>AQS</code>的队列中，在有并发时，肯定会存取一定数量的节点，每个节点<a href="$-0">[G4]</a> 代表了一个线程的状态，有的线程可能“等不及”获取锁了，需要放弃竞争，退出队列，有的线程在等待一些条件满足，满足后才恢复执行（这里的描述很像某个<code>J.U.C</code>包下的工具类，<code>ReentrankLock的Condition</code>，事实上，<code>Condition</code>同样也是<code>AQS</code>的子类）等等，总之，各个线程有各个线程的状态，但总需要一个变量来描述它，这个变量就叫waitStatus,它有四种状态：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730011.png" alt=""></p>
<p>分别表示：</p>
<ol>
<li>节点取消</li>
<li>节点等待触发</li>
<li>节点等待条件</li>
<li>节点状态需要向后传播。</li>
</ol>
<p>只有当前节点的前一个节点为<code>SIGNAL</code>时，才能当前节点才能被挂起。</p>
<ol>
<li>对线程的挂起及唤醒操作是通过使用<code>UNSAFE类</code>调用<code>JNI方法</code>实现的。当然，还提供了挂起指定时间后唤醒的<code>API</code>，在后面我们会讲到。</li>
</ol>
<p>到此为止，一个线程对于锁的一次竞争才告于段落，结果有两种，要么成功获取到锁（不用进入到<code>AQS</code>队列中），要么，获取失败，被挂起，等待下次唤醒后继续循环尝试获取锁，值得注意的是，<code>AQS</code>的队列为FIFO队列，所以，每次被CPU假唤醒，且当前线程不是出在头节点的位置，也是会被挂起的。<code>AQS</code>通过这样的方式，实现了竞争的排队策略。</p>
<p>看完了获取锁，在看看释放锁，具体看代码之前，我们可以先继续猜下，释放操作需要做哪些事情：</p>
<ol>
<li>因为获取锁的线程的节点，此时在<code>AQS</code>的头节点位置，所以，可能需要将头节点移除。</li>
<li>而应该是直接释放锁，然后找到<code>AQS</code>的头节点，通知它可以来竞争锁了。</li>
</ol>
<p>是不是这样呢?我们继续来看下，同样我们用<code>ReentrantLock</code>的<code>FairSync</code>来说明：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730012.png" alt=""></p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730013.png" alt=""></p>
<p><code>unlock方法</code>调用了<code>AQS</code>的<code>release</code>方法，同样传入了参数1，和获取锁的相应对应，获取一个锁，标示为+1，释放一个锁，标志位-1。</p>
<p>同样，<code>release</code>为空方法，子类自己实现逻辑：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> c = getState() - releases; </div><div class="line">       <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread()) <span class="comment">//如果释放的线程和获取锁的线程不是同一个，抛出非法监视器状         态异常。</span></div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">       <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;<span class="comment">//因为是重入的关系，不是每次释放锁c都等于0，直到最后一次释放锁时，才通知AQS不需要再记录哪个线程正在获取锁。</span></div><div class="line">           free = <span class="keyword">true</span>;</div><div class="line">           setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">       &#125;</div><div class="line">       setState(c);</div><div class="line">       <span class="keyword">return</span> free;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>释放锁，成功后，找到<code>AQS</code>的头节点，并唤醒它即可：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730014.png" alt=""></p>
<p>值得注意的是，寻找的顺序是从队列尾部开始往前去找的最前面的一个<code>waitStatus</code>小于0的节点。</p>
<p>到此，<code>ReentrantLock</code>的<code>lock和unlock方法</code>已经基本解析完毕了，唯独还剩下一个非公平锁<code>NonfairSync</code>没说，其实，它和公平锁的唯一区别就是获取锁的方式不同，一个是按前后顺序一次获取锁，一个是抢占式的获取锁，那<code>ReentrantLock</code>是怎么实现的呢？再看两段代码：</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730015.png" alt=""></p>
<p>非公平锁的<code>lock方法</code>的处理方式是: 在<code>lock</code>的时候先直接<code>cas</code>修改一次<code>state变量</code>（尝试获取锁），成功就返回，不成功再排队，从而达到不排队直接抢占的目的。</p>
<p><img src="http://cdn4.infoqstatic.com/statics_s2_20161214-0550/resource/articles/jdk1.8-abstractqueuedsynchronizer/zh/resources/0730016.png" alt=""></p>
<p>而对于公平锁：则是老老实实的开始就走<code>AQS</code>的流程排队获取锁。如果前面有人调用过其<code>lock</code>方法，则排在队列中前面，也就更有机会更早的获取锁，从而达到“公平”的目的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章，我们从<code>ReentrantLock</code>出发，完整的分析了<code>AQS</code>独占功能的<code>API</code>及内部实现，总的来说，思路其实并不复杂，还是使用的标志位+队列的方式，记录获取锁、竞争锁、释放锁等一系列锁的状态，或许用更准确一点的描述的话，应该是使用的标志位+队列的方式，记录锁、竞争、释放等一系列独占的状态，因为站在<code>AQS</code>的层面state可以表示锁，也可以表示其他状态，它并不关心它的子类把它变成一个什么工具类，而只是提供了一套维护一个独占状态。甚至，最准确的是<code>AQS</code>只是维护了一个状态，因为，别忘了，它还有一套共享状态的<code>API</code>，所以，<code>AQS</code>只是维护一个状态，一个控制各个线程何时可以访问的状态，它只对状态负责，而这个状态表示什么含义，由子类自己去定义。</p>
<p>转自 <a href="http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer" target="_blank" rel="external">http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深度解析Java-8：JDK1-8-AbstractQueuedSynchronizer的实现分析（上）&quot;&gt;&lt;a href=&quot;#深度解析Java-8：JDK1-8-AbstractQueuedSynchronizer的实现分析（上）&quot; class=&quot;headerlink&quot; title=&quot;深度解析Java 8：JDK1.8 AbstractQueuedSynchronizer的实现分析（上）&quot;&gt;&lt;/a&gt;深度解析&lt;code&gt;Java 8：JDK1.8 AbstractQueuedSynchronizer&lt;/code&gt;的实现分析（上）&lt;/h1&gt;&lt;p&gt;更多多线程&lt;code&gt;API&lt;/code&gt;解析请参考&lt;a href=&quot;https://github.com/muyinchen/woker/tree/master/%E5%B9%B6%E5%8F%91/jdk8%20%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB&quot;&gt;&lt;code&gt;jdk8&lt;/code&gt; 版本并发源码解读&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="并发源码解读" scheme="https://muyinchen.github.io/categories/%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
    
      <category term="并发源码解读" scheme="https://muyinchen.github.io/tags/%E5%B9%B6%E5%8F%91%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Redis 集群操作</title>
    <link href="https://muyinchen.github.io/2016/12/16/Redis%20%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C/"/>
    <id>https://muyinchen.github.io/2016/12/16/Redis 集群操作/</id>
    <published>2016-12-16T14:51:04.256Z</published>
    <updated>2016-12-16T14:50:44.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-集群操作"><a href="#Redis-集群操作" class="headerlink" title="Redis 集群操作"></a>Redis 集群操作</h1><a id="more"></a>
<p>当前Redis Cluster状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">pwd</span></div><div class="line">/home/zxm/BD/redis-cluster</div><div class="line">$ ls <span class="_">-l</span></div><div class="line">总用量 32</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 20:15 7000</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 20:22 7001</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 17:32 7002</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 20:36 7003</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 17:32 7004</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 20:23 7005</div></pre></td></tr></table></figure>
<p>集群中各个节点状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb check 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: ca33b3d7a60f8df7b74473f86c11f84df609fa45 192.168.174.3:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8f26d8a386853e338e7176c33e66166b5f835175 192.168.174.3:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">S: 46f81794cfcf6fbf10fcf18c44f137f446f28be9 192.168.174.3:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">M: a2e08eda093f5b962881f309b8a3b9d5961e6aa8 192.168.174.3:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 43d98665d41381c89d45c6f69bf8a2622b7b9dc3 192.168.174.3:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates a2e08eda093f5b962881f309b8a3b9d5961e6aa8</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<h2 id="Redis集群-Resharding"><a href="#Redis集群-Resharding" class="headerlink" title="Redis集群 Resharding"></a>Redis集群 Resharding</h2><p><strong>resharding步骤：</strong></p>
<p>1) 使用命令开启reshard命令</p>
<blockquote>
<p>./redis-trib.rb reshard host:port</p>
</blockquote>
<p>2) 指定需要重新reshard的slots个数</p>
<blockquote>
<p>How many slots do you want to move (from 1 to 16384)? 1000</p>
</blockquote>
<p>3) 指定需要接收的节点ID</p>
<blockquote>
<p>What is the receiving node ID? 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</p>
</blockquote>
<p>4) 指定需要重新shard的节点，输入done开始reshard</p>
<blockquote>
<p>Source node #1:ca33b3d7a60f8df7b74473f86c11f84df609fa45<br>Source node #2:done</p>
</blockquote>
<p>具体操作流程如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb reshard 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: ca33b3d7a60f8df7b74473f86c11f84df609fa45 192.168.174.3:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8f26d8a386853e338e7176c33e66166b5f835175 192.168.174.3:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">S: 46f81794cfcf6fbf10fcf18c44f137f446f28be9 192.168.174.3:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">M: a2e08eda093f5b962881f309b8a3b9d5961e6aa8 192.168.174.3:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 43d98665d41381c89d45c6f69bf8a2622b7b9dc3 192.168.174.3:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates a2e08eda093f5b962881f309b8a3b9d5961e6aa8</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 1000</div><div class="line">What is the receiving node ID? 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">Please enter all the <span class="built_in">source</span> node IDs.</div><div class="line">  Type <span class="string">'all'</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</div><div class="line">  Type <span class="string">'done'</span> once you entered all the <span class="built_in">source</span> nodes IDs.</div><div class="line">Source node <span class="comment">#1:ca33b3d7a60f8df7b74473f86c11f84df609fa45</span></div><div class="line">Source node <span class="comment">#2:done</span></div><div class="line"></div><div class="line">Ready to move 1000 slots.</div><div class="line">  Source nodes:</div><div class="line">    M: ca33b3d7a60f8df7b74473f86c11f84df609fa45 192.168.174.3:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">  Destination node:</div><div class="line">    M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">  Resharding plan:</div><div class="line">    Moving slot 10923 from ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">    ... ...</div><div class="line">    Moving slot 11921 from ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">    Moving slot 11922 from ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">Do you want to proceed with the proposed reshard plan (yes/no)?yes</div><div class="line">Moving slot 10923 from 192.168.174.3:7002 to 192.168.174.3:7000:</div><div class="line">Moving slot 10924 from 192.168.174.3:7002 to 192.168.174.3:7000:</div><div class="line">... ...</div><div class="line">Moving slot 11921 from 192.168.174.3:7002 to 192.168.174.3:7000:</div><div class="line">Moving slot 11922 from 192.168.174.3:7002 to 192.168.174.3:7000:</div></pre></td></tr></table></figure>
<p><strong>重新sharding后集群中各个节点状态：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb check 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: ca33b3d7a60f8df7b74473f86c11f84df609fa45 192.168.174.3:7002</div><div class="line">   slots:11923-16383 (4461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8f26d8a386853e338e7176c33e66166b5f835175 192.168.174.3:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">S: 46f81794cfcf6fbf10fcf18c44f137f446f28be9 192.168.174.3:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">M: a2e08eda093f5b962881f309b8a3b9d5961e6aa8 192.168.174.3:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 43d98665d41381c89d45c6f69bf8a2622b7b9dc3 192.168.174.3:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates a2e08eda093f5b962881f309b8a3b9d5961e6aa8</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<h2 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h2><p>1) 添加节点</p>
<p>添加redis实例，端口为7006</p>
<blockquote>
<p>$ cp -r 7005 7006</p>
</blockquote>
<p>修改7006目录中redis-cluster.conf文件中的参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cat 7006/redis-cluster.conf</div><div class="line"><span class="built_in">bind</span> 192.168.174.3</div><div class="line">port 7006</div><div class="line">daemonize yes</div><div class="line">logfile <span class="string">"/home/zxm/BD/redis-cluster/7006/redis.log"</span></div><div class="line">cluster-enabled yes</div><div class="line">cluster-config-file nodes.conf</div><div class="line">cluster-node-timeout 5000</div><div class="line">appendonly yes</div></pre></td></tr></table></figure>
<p>启动redis实例节点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> 7006</div><div class="line">$ redis-server redis-cluster.conf</div></pre></td></tr></table></figure>
<h3 id="添加Salve节点"><a href="#添加Salve节点" class="headerlink" title="添加Salve节点"></a>添加Salve节点</h3><p>方式一：<br>1）将新的节点添加到集群中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> $ ./redis-trib.rb add-node 192.168.174.3:7006 192.168.174.3:7000</div><div class="line"> &gt;&gt;&gt; Adding node 192.168.174.3:7006 to cluster 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">    ... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.174.3:7006 to make it join the cluster.</div><div class="line">[OK] New node added correctly.</div></pre></td></tr></table></figure>
<p>2) 进入redis命令行,并查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ redis-cli -c -h 192.168.174.3 -p 7006</div><div class="line">192.168.174.3:7006&gt; cluster nodes   </div><div class="line">... ... </div><div class="line">fca935760ac28db5cbdc5396b5a326a85e4f8760 192.168.174.3:7006 myself,master - 0 0 0 connected</div><div class="line">7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000 master - 0 1472046744344 7 connected 0-5460 10923-11922</div><div class="line">... ...</div></pre></td></tr></table></figure>
<p>可以看到默认将新添加的节点作为master</p>
<p>3） 将新节点修改为7000节点的slave，并查看修改后的集群状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">192.168.174.3:7006&gt; cluster replicate 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">OK</div><div class="line">192.168.174.3:7006&gt; cluster nodes</div><div class="line">... ...</div><div class="line">fca935760ac28db5cbdc5396b5a326a85e4f8760 192.168.174.3:7006 myself,slave 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 0 0 0 connected</div><div class="line">7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000 master - 0 1472047082185 7 connected 0-5460 10923-11922</div><div class="line">... ...</div></pre></td></tr></table></figure>
<p>方式二：</p>
<p>1) 将新节点直接作为7000节点的slave添加到集群中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb add-node --slave --master-id 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7006 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Adding node 192.168.174.3:7006 to cluster 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.174.3:7006 to make it join the cluster.</div><div class="line">Waiting <span class="keyword">for</span> the cluster to join.</div><div class="line">&gt;&gt;&gt; Configure node as replica of 192.168.174.3:7000.</div><div class="line">[OK] New node added correctly.</div></pre></td></tr></table></figure>
<p>2) 查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb check 192.168.174.3:7001</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7001)</div><div class="line">... ...</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   2 additional replica(s)</div><div class="line">S: 1a0d5c686108182ab2ea7ca136c8e726d077171e 192.168.174.3:7006</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p><strong>删除7000节点，并将7000端口节点上的slots分配到7006上</strong></p>
<p>1) 将7006节点作为master节点添加到集群中，并察看集群状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[zxm@node1 src]$ ./redis-trib.rb check 192.168.174.3:7001</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7001)</div><div class="line">... ... </div><div class="line">M: d7a7e6e57827d94803a139f6f36425276c9e1019 192.168.174.3:7006</div><div class="line">   slots: (0 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<p>2) 对集群进行reshard操作，将7000节点上的所有slots转移到7006节点上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[zxm@node1 src]$ ./redis-trib.rb reshard 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">... ...</div><div class="line">M: d7a7e6e57827d94803a139f6f36425276c9e1019 192.168.174.3:7006</div><div class="line">   slots: (0 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 6461</div><div class="line">What is the receiving node ID? d7a7e6e57827d94803a139f6f36425276c9e1019</div><div class="line">Please enter all the <span class="built_in">source</span> node IDs.</div><div class="line">  Type <span class="string">'all'</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</div><div class="line">  Type <span class="string">'done'</span> once you entered all the <span class="built_in">source</span> nodes IDs.</div><div class="line">Source node <span class="comment">#1:7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</span></div><div class="line">Source node <span class="comment">#2:done</span></div></pre></td></tr></table></figure>
<p>3) 查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb check 192.168.174.3:7001</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7001)</div><div class="line">... ...</div><div class="line">M: d7a7e6e57827d94803a139f6f36425276c9e1019 192.168.174.3:7006</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<p>4) 删除7000节点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb del-node 192.168.174.3:7000 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">&gt;&gt;&gt; Removing node 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c from cluster 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</div><div class="line">&gt;&gt;&gt; SHUTDOWN the node.</div></pre></td></tr></table></figure>
<p><strong>⚠️删除master节点时，该节点上slots必须为零</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis-集群操作&quot;&gt;&lt;a href=&quot;#Redis-集群操作&quot; class=&quot;headerlink&quot; title=&quot;Redis 集群操作&quot;&gt;&lt;/a&gt;Redis 集群操作&lt;/h1&gt;
    
    </summary>
    
      <category term="redis" scheme="https://muyinchen.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://muyinchen.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用redis3.0实现tomcat集群session共享</title>
    <link href="https://muyinchen.github.io/2016/12/16/%E4%BD%BF%E7%94%A8redis3.0%E5%AE%9E%E7%8E%B0tomcat%E9%9B%86%E7%BE%A4session%E5%85%B1%E4%BA%AB/"/>
    <id>https://muyinchen.github.io/2016/12/16/使用redis3.0实现tomcat集群session共享/</id>
    <published>2016-12-16T14:46:57.666Z</published>
    <updated>2016-12-16T14:55:27.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用redis3-0实现tomcat集群session共享"><a href="#使用redis3-0实现tomcat集群session共享" class="headerlink" title="使用redis3.0实现tomcat集群session共享"></a>使用redis3.0实现tomcat集群session共享</h1> <a id="more"></a>
<ol>
<li>部署两个<code>tomcat</code>节点，<a href="https://muyinchen.github.io/2016/11/10/Migo%E5%95%86%E5%9F%8E2.0%C2%A0Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%20%E4%B8%89/">使用nginx实现集群</a></li>
</ol>
<ol>
<li><p><a href="https://muyinchen.github.io/2016/12/08/Migo%E5%95%86%E5%9F%8E2.0%20%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E4%B8%AD%E6%B7%BB%E5%8A%A0redis%20%E7%BC%93%E5%AD%98\(1\"> <code>redis</code>安装 </a>%20%E5%8D%81%E4%B9%9D/) </p>
</li>
<li><p>建一个简单的<code>web项目</code>，打包发布到各个<code>tomcat</code>中，用于测试<code>session</code>是否真的实现了共享（自己想办法怎么建测试项目）</p>
</li>
<li><p>下载开源组件<code>tomcat-redis-session-manager</code></p>
</li>
</ol>
<p>​       </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">下载方式一：https://github.com/jcoleman/tomcat-redis-session-manager/downloads  (这个是早期的，不支持redis3.0集群)</div><div class="line">下载方式二（推荐）：https://github.com/ran-jit/TomcatClusterRedisSessionManager （支持redis3集群和tomat8）</div><div class="line"></div><div class="line">https://github.com/ran-jit/TomcatClusterRedisSessionManager/wiki/Tomcat-Cluster-Redis-Session-Manager</div><div class="line"></div><div class="line">commons-logging-1.2.jar</div><div class="line"></div><div class="line">commons-pool2-2.4.1.jar</div><div class="line"></div><div class="line">jedis-2.8.0.jar</div><div class="line"></div><div class="line">commons-pool2-2.4.1.jar</div><div class="line"></div><div class="line">commons-logging-1.2.jar</div><div class="line"></div><div class="line">RedisDataCache.properties</div></pre></td></tr></table></figure>
<p>5、将上面<code>jar</code>包拷贝到各个<code>tomcat</code>的<code>lib</code>目录下， 将<code>RedisDataCache.properties</code>拷到<code>tomcat</code>的<code>conf目录</code>下。</p>
<p>6、配置文件修改</p>
<p>（1）修改<code>RedisDataCache.properties</code>配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># redis hosts ex: 127.0.0.1:6379, 127.0.0.2:6379, 127.0.0.2:6380, ....</div><div class="line"></div><div class="line">redis.hosts=192.168.187.131:6379 (redis服务器IP及端口号)</div><div class="line"></div><div class="line"># Redis Password</div><div class="line"></div><div class="line">redis.password= redis （REDIS配置文件中设置的密码）</div><div class="line"></div><div class="line"># set true to enable redis cluster mode</div><div class="line"></div><div class="line">redis.cluster.enabled=false</div></pre></td></tr></table></figure>
<p>（2）在<code>tomcat/conf/context.xml</code>文件中增加以下两行：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"com.r.tomcat.session.management.RequestSessionHandlerValve"</span>/&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.r.tomcat.session.management.RequestSessionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>（3)设置<code>tomcat/conf/web.xml</code> 中<code>session</code>有效期</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div><div class="line"></div><div class="line">         <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 如果项目里也配置了<code>session</code>有效期，则以项目中有准。</p>
<p>7、先启动<code>redis</code>,再启动<code>tomcat</code>，访问测试项目进行测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用redis3-0实现tomcat集群session共享&quot;&gt;&lt;a href=&quot;#使用redis3-0实现tomcat集群session共享&quot; class=&quot;headerlink&quot; title=&quot;使用redis3.0实现tomcat集群session共享&quot;&gt;&lt;/a&gt;使用redis3.0实现tomcat集群session共享&lt;/h1&gt;
    
    </summary>
    
      <category term="redis" scheme="https://muyinchen.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://muyinchen.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>谈小米的高可用推送系统设计</title>
    <link href="https://muyinchen.github.io/2016/12/14/%E8%B0%88%E5%B0%8F%E7%B1%B3%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E6%8E%A8%E9%80%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://muyinchen.github.io/2016/12/14/谈小米的高可用推送系统设计/</id>
    <published>2016-12-14T15:25:42.088Z</published>
    <updated>2016-12-14T15:25:09.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈小米的高可用推送系统设计"><a href="#谈小米的高可用推送系统设计" class="headerlink" title="谈小米的高可用推送系统设计"></a>谈小米的高可用推送系统设计</h1><p>原文：<a href="http://www.uml.org.cn/zjjs/201612141.asp?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.uml.org.cn/zjjs/201612141.asp</a></p>
<p>小米推送是目前国内领先的推送服务提供商，主要为开发者提供快捷、准确、稳定的推送服务。目前日活跃设备突破3亿，日消息量突破50亿。本文将会介绍小米推送在提高系统可用性方面的一些经验和教训。<br> <a id="more"></a></p>
<ol>
<li><p>推送系统的高可用性以及 如何提高可用性</p>
</li>
<li><p>缓冲机制与 服务解耦</p>
</li>
<li><p>无状态服务以及多机房部署</p>
</li>
<li><p>过载保护与分级机制</p>
</li>
</ol>
<p>小米推送是目前国内领先的推送服务提供商，主要为开发者提供快捷、准确、稳定的推送服务。目前接入APP 7000+家，日活跃设备突破3亿，日消息量突破50亿。</p>
<p>之所以取得如此的成绩，一方面得益于我们在小米手机上系统级的连接，使我们有更高的消息送达率，另一方面是因为我们本身的服务质量不低于业内其他的推送服务提供商。目前我们在小米手机上的日活为1亿+，而在非小米手机上的日活突破2亿，在iOS上的累计接入设备也达到3亿以上，从这些非MIUI的数据也可以看出，开发者对我们的推送质量是比较认可的。</p>
<p>我们是面向开发者的服务，主要职责是将开发者的消息实时准确的推送到目标设备上，是连接开发者与用户设备之间的一条高速消息通道。这中间涉及很多环节，提高系统可用性就是提高每个环节的可用性，只有系统无短板，高可用性才有可能。</p>
<h3 id="什么是高可用性"><a href="#什么是高可用性" class="headerlink" title="什么是高可用性"></a>什么是高可用性</h3><p>在介绍如何提高系统可用性之前， 我们首先需要先了解一下什么是系统可用性 。</p>
<p>基于业务性质的差异，每个业务对可用性的定义也不尽相同，不过一般情况下，大多以系统可用时间占总服务时间的比例做为可用性的定义。例如我们常说的4个9的可用性，就是可用时间占比超过9999/10000，即只有不到万分之一的时间不可用，也即一年只有不到60分钟的不可用时间。因此设计、维持一个高可用的系统是非常困难的，这不仅要求我们的系统基本不出问题，在出现问题之后也要以尽可能短的时间内恢复可用。</p>
<p>小米推送是面向开发者的服务，从本质上来说我们从事于服务行业，系统是否可用除了使用上面的可用时间占比来衡量之外，开发者主观或客观的使用感受也是衡量我们服务质量的重要标准，例如网络连接的稳定性，API的可用性，设备的连通率等。从上面的各种指标中抽象出来，我们重点关注的有两点，一个是消息的送达率，第二个是消息的送达延迟。</p>
<p>由于送达率关联因素很多，不好准确量化，因此除了上面的可用性定义之外，我们还以消息的送达延迟作为可用性的另一计算标准。比如在线设备送达延迟（从开发者消息开始处理到送达到设备上）在N（1、5、15、30）分钟的比例占比高于多少我们认为系统可用，否则认为系统可用性低。</p>
<h3 id="如何提高系统可用性"><a href="#如何提高系统可用性" class="headerlink" title="如何提高系统可用性"></a>如何提高系统可用性</h3><p>那我们如何提高系统可用性呢？</p>
<p>由可用性的定义可知，要想提高系统可用性，唯有将系统不可用时间降低到最低。一方面我们要尽量减少系统不可用（故障）出现的几率，另一方面，在故障发生后，我们要尽量减少故障带来的影响，减少故障恢复所需要的时间，将损失降低到最低。</p>
<p>要做到这几点，我们需要清楚的知道，我们所面临的主要挑战和风险是什么，只有弄清楚所面临的风险点，才能提前想好对策加以应对。对自己的业务性质加以剖析，理清楚风险因素与主要矛盾，是做一个高可用系统的第一步。</p>
<p>具体到推送系统来说，我们所面临的挑战和风险主要有以下几点：</p>
<ol>
<li><p>我们面临的开发者众多，每个开发者的水平良莠不齐，而他们对推送的理解也不尽相同，很可能跟我们预期的使用方式千差万别，开发者无意中的使用，很可能对我们的系统造成“攻击”行为。而开发者在高峰期“扎堆”推送消息，也给我们带来过载的风险。</p>
</li>
<li><p>我们的量级比较庞大（同时在线1.5亿+，日消息量50亿+），别的业务不容易遇到的事情在我们这边更容易发生，例如性能问题。</p>
</li>
<li><p>我们面临的运营环境不尽完善，机房故障、网络故障、磁盘故障、机器死机等情况时有发生，如何从设计上避免这些故障带给我们的风险也是我们需要考虑的重点。</p>
</li>
<li><p>我们使用的一些第三方组件不一定是非常可靠的，如何选取合适的组件，如何规避地基不稳带来的影响，在架构设计和技术选型时也要特别注意。</p>
</li>
<li><p>来自我们自身的挑战，我们无法保证自己的程序不出bug，也无法保证自己的操作不出意外，如何从流程和规范上尽量避免人为因素造成的影响也是非常重要的。</p>
</li>
</ol>
<p>理清风险因素之后，剩下的事情就是去一一解决这些风险，规避风险的发生，良好的架构设计、谨慎的技术选型和合理规范的流程是其中的三剂良方。下面将重点从缓冲、解耦、服务去状态、服务分级等几方面介绍一下小米推送在提高系统可用性方面做的一些尝试。</p>
<h4 id="缓冲机制"><a href="#缓冲机制" class="headerlink" title="缓冲机制"></a>缓冲机制</h4><p>架构设计是高可用性的根基，一个好的架构可以避免绝大多数风险的发生，将影响可用性的风险因素扼杀在摇篮里。在做架构设计时，我们需要明白我们要解决的首要矛盾是什么。</p>
<p>对于推送系统来说，我们面临的主要问题是系统流量随时间分布不均衡以及系统容易过载的问题。我们面临的请求来源主要是两个，<code>一是来自设备的请求</code>，这部分连接数多，请求量大，但总体可控，只要我们设计好足够的系统容量，基本不会出很大的问题；<code>另一个是来自开发者的请求</code>，这类请求属于不可控类型，所有的开发者都希望在尽可能短的时间内将自己的消息推送出去，我们无法提前得知开发者请求发送的时间以及发送的数量，它属于脉冲式的访问类型。由于设备活跃时间的原因，开发者的请求时间一般极为集中。</p>
<p>对于这类请求，我们不可能为峰值准备足够的容量，这会造成极大的资源浪费。但如果我们不做提前预防，极有可能我们的系统会被高峰期的瞬发流量压垮，因此我们需要引入一个<code>缓冲机制</code>。</p>
<p>这属于典型的<code>消息队列（Message Queue）</code>的使用场景。消息队列是一种服务间数据通信的常见中间件，一般使用<code>producer-consumer</code>模式或<code>publisher-subscriber</code>模式，除了缓冲的作用之外，解耦和扩展性也是我们采用它的重要原因。常见的消息队列组件有<code>Kafka</code>、<code>RabbitMQ</code>、<code>ActiveMQ</code>等等，可以根据业务性质以及队列的特点选择合适的组件。</p>
<p><img src="http://img0.tuicool.com/77bYN3f.jpg!web" alt=""></p>
<p><img src="http://img1.tuicool.com/nuueEf6.jpg!web" alt=""></p>
<p>在推送系统中我们大量使用了<code>消息队列（MQ）</code>组件，将开发者的请求缓存在消息队列中，然后逐渐消费，缓解开发者集中式的推送带给我们系统的瞬间压力。上面<code>第一张图</code>是我们接入层接收到的开发者请求量，高峰期的请求量是平时的数倍甚至数十倍，<code>第二张图</code>是我们业务层使用<code>MQ</code>之后处理的请求量，可以看到曲线平滑了许多，缓冲效果相当明显。（这是在我们系统本身处理能力非常强大的情况下，否则缓冲作用会更加明显）</p>
<h4 id="服务解耦"><a href="#服务解耦" class="headerlink" title="服务解耦"></a>服务解耦</h4><p>耦合度是判断一个系统是否健壮的重要标准之一。耦合度高的系统在稳定性、容灾和扩展性方面都不容乐观，常常会因局部故障扩散传染到其他模块，而导致故障恶化，受影响面扩大，甚至影响整个系统的可用性，给系统带来较高风险。因此，系统解耦是我们设计一个分布式系统时需要重点考虑的问题。架构分层、服务拆分、通信解耦、代码重构等是降低系统耦合度的比较常见的解决方案。</p>
<h5 id="首先是代码解耦。"><a href="#首先是代码解耦。" class="headerlink" title="首先是代码解耦。"></a>首先是代码解耦。</h5><p>代码耦合会使代码的维护变得异常困难，极大的增加了代码阅读和理解的难度，并增大了出现bug的几率，另一方面，代码的耦合也常常使模块逻辑上的关系变得复杂。因此，采取一定的手段进行代码解耦是我们提高系统可用性的基础一步，例如更加良好的代码结构设计，更加巧妙的抽象层次，定期的代码重构等等。</p>
<h5 id="其次是功能解耦。"><a href="#其次是功能解耦。" class="headerlink" title="其次是功能解耦。"></a>其次是功能解耦。</h5><p><code>功能耦合是系统设计的大忌</code>，常常会使功能之间的可用性相互影响。</p>
<p>例如一个变更频繁的功能A和一个比较稳定的功能B耦合在一个服务模块中，功能A的频繁发布变更必然会导致引入故障的几率增加（发布是可用性的最大杀手），这样虽然B功能较为稳定，但由于它和A处于同一进程中，A功能的故障很可能导致B功能无法使用。</p>
<p>这就要求我们对服务进行拆分，根据功能之间的关联将服务尽可能的拆分为简单单一的模块，每个功能模块间的耦合尽可能的降到最低，从而保证某一个功能模块出故障时，其他模块不受影响。</p>
<p><code>服务拆分</code>可以分为<code>垂直拆分</code>与<code>水平拆分</code>。<code>垂直拆分</code>指的是系统的分层扩展能力，大多情况下，为了架构的清晰与逻辑的解耦，我们一般将系统根据一定原则分为若干层级，例如根据请求的处理时序分为接入层、业务层、存储层等，或者根据数据的访问情况分为代理层、逻辑层、<code>Cache</code>层、<code>DB层</code>等，良好的层次不仅有利于后续的维护，对于服务解耦和性能提升也有很多的帮助。<code>水平拆分</code>指的是系统在水平方向上的扩展能力，例如在业务层有若干模块处理若干事项，当一个新功能出现时，我们可以通过增加一个业务模块的方式去处理新增加的业务逻辑，从而做到了功能之间的 解耦，增强了系统的稳定性。</p>
<p>既然服务拆分有那么多好处，是不是拆分的粒度越细越好呢？也不尽然，需要根据具体情况进行分析，服务拆分之后进程内通信势必要变为服务间通信，性能会受到一定影响，需要根据业务性质以及对性能的要求进行综合考虑。（<code>服务拆分还可能会产生数据一致性的问题，解决该问题使用的事务机制也会极大的降低系统性能以及增加系统复杂度</code>）</p>
<h5 id="再次是服务间的通信解耦"><a href="#再次是服务间的通信解耦" class="headerlink" title="再次是服务间的通信解耦"></a>再次是服务间的通信解耦</h5><p>有时候<code>服务拆分之后系统的耦合度依然很高，服务间的通信方式可能会导致拆分效果大打折扣</code>。</p>
<p>例如A、B、C三个服务模块，A调用B相关的接口，B调用C相关的接口，如果都是同步调用，或相互之间有其他时序或逻辑上的依赖，C一旦出问题，可能会导致A、B同时陷入故障状态，从而导致连锁反应（甚至产生逻辑死锁），故障在服务之间传染。</p>
<p><code>解决的方法就是避免服务间的逻辑（或时序）依赖关系，采用一定的异步访问策略</code>，如消息队列、异步调用等，可以根据业务性质与数据的重要性灵活选取。需要着重提一下的是消息队列(MQ)，一般MQ的实现中都提供了良好的解耦机制，生产者在接收到请求后，将请求放入MQ，然后继续处理其他事情，而消费者在适当的时候对请求进行处理，生产者和消费者之间不用相互依赖，降低了模块之间的关联，对提升系统的稳定性有很大帮助。<code>在推送系统中，接入层对内部系统的访问都使用异步调用方式，其他重要的处理路径使用消息队列进行通信，而非关键路径(可丢弃)使用udp进行通信（内网稳定性丢包率极低）</code>。</p>
<p>总体上来说，<code>解耦的关键点是做到故障隔离，保证故障发生时影响面尽可能小，故障不会从一个模块传染到另一个模块</code>。</p>
<p><img src="http://img0.tuicool.com/quA3eiB.jpg!web" alt=""></p>
<p>上图是小米推送的系统架构图。整个系统根据业务性质分为在线、离线、旁路三个子系统。其中在线系统负责处理线上业务逻辑，根据请求处理过程分成接入层(以及设备接入层)、业务层、Cache层、存储层等四个层级，业务层根据功能或功能组合拆分为若干模块。旁路系统负责实时监控在线系统并对在线系统进行反馈，离线系统对日志进行分析并生成统计报表。各个模块（子系统）功能简单，逻辑清晰，稳定性、可扩展性和可用性得到一定保障。</p>
<h4 id="无状态服务与多机房部署"><a href="#无状态服务与多机房部署" class="headerlink" title="无状态服务与多机房部署"></a>无状态服务与多机房部署</h4><p>单点和过载是可用性的另外两个重要杀手。</p>
<p>由于机器、磁盘、网络等多种不可控因素的存在，集群局部故障发生的概率很大，如何在局部故障发生时维持对外的可用性是我们必须要面对的问题。应对这个问题的方案就是做到<code>容量冗余</code>，也就是在系统本身的容量之外预留一定的处理能力，这样在局部故障发生时，由于容量buffer的存在，不会导致系统停摆或出现过载。而要做到这一点，就要求我们的服务有良好的可扩展性，可以比较容易的进行扩容或缩容，更不能有单点的存在。</p>
<p><code>单点一般意义上是指某个模块只有一个节点对外提供服务</code>，一般属于设计上的缺陷，由于模块内部状态过于复杂而无法进行多点部署。单点意味着系统要承受极大的可用性压力，在过载或节点发生故障时，该模块将无法对外提供服务。<code>因此我们在做系统设计时一定要避免产生单点服务，这其中的关键点是去除或降低对服务的内部状态的依赖性，做到节点间的无差别服务，也就是应尽力做到服务的去状态化</code>。</p>
<p><code>状态在代码设计上一般表现为节点间数据的差异性</code>，例如某接入层服务模块，节点A管理一部分连接，节点B管理另一部分连接，从而导致某些请求必须在节点A或节点B处理，从而产生数据差异，导致节点间状态的产生。消<code>除状态的过程也就是去除数据差异的过程</code>，例如去除模块节点缓存的数据，或者将模块数据转移至其他模块去存储。</p>
<p><code>无状态服务有诸多好处，比较显著的就是极大的增强了服务的可扩展性以及应对局部故障的能力</code>。我们可以非常容易的增加或者删除一个节点，在某个节点故障时，该节点的请求会自动被其他节点处理，从而实现故障的自动恢复。（failover）</p>
<p><code>而有时候有些模块因为某些原因（如性能或复杂度）无法做到去状态化，这时候可以采用一定的路由策略</code>，如<code>一致性hash算法</code>，来降低节点状态带来的影响。</p>
<p>除了刚才说的单点之外，还有<code>另外一种意义上的单点——部署机房的单点</code>。虽说机房整体故障的概率不大，但如果不加以重视，一旦出现将会给我们带来灭顶之灾。因此，我们要将服务部署在多个机房以规避这种风险。</p>
<p>那我们的服务需要在几个机房部署呢？这需要根据实际情况来决定，理论上越多越好，机房数量越多，每个机房需要担负的冗余容量会越少，造成的资源浪费也就越少。在机房数量=N时，假如某机房发生故障，剩余其他机房需要有承担所有流量的能力，即N-1的机房需要承担的流量为1，则总体资源占用为 N/(N-1)，N越大，资源占用总量越小，浪费也越少。</p>
<p><code>在多机房部署时，需要特别考虑一下多机房之间数据同步的问题。经验告诉我们，一定要在设计上避免对机房间数据同步机制产生依赖，否则很容易带来数据一致性的问题。</code>例如某数据在机房A写入，在机房B读取，但读取时很可能数据并没有从A同步完毕，从而导致B读取的数据与实际数据不一致，产生数据一致性问题，<code>如果数据存在缓存机制，则会加大这种不一致带来的风险</code>。</p>
<p><img src="http://img0.tuicool.com/VNraaef.png!web" alt=""></p>
<p>上图是我们经过若干次演变之后的多机房访问策略。我们将请求根据资源使用情况映射到0~1之间的浮点数，每个机房处理一部分请求，而同一资源相关的请求也只能被同一个机房的服务处理，从而避免了同一资源在多机房读写带来的数据一致性问题。</p>
<blockquote>
<p>1）接入层接收到请求之后，将请求放入本机房的MQ中，避免跨机房访问带来的接入层稳定性的降低。</p>
<p>2）每个机房的业务层同时处理所有机房MQ中的数据，然后根据一定的过滤规则过滤掉不属于本节点相关的请求。</p>
<p>3）相当于使用相对宽裕的内网流量换取了架构的简单与可用性的提升。</p>
</blockquote>
<h4 id="过载保护与分级机制"><a href="#过载保护与分级机制" class="headerlink" title="过载保护与分级机制"></a>过载保护与分级机制</h4><p>虽说消息队列的缓冲机制能给我们系统带来很大的保护，防止我们被洪水猛兽般的请求量冲垮。但系统不出问题并不代表系统可用，请求堆积在消息队列中得不到处理，一样不是我们希望看到的。因此过载保护一样是我们需要考虑的问题。在过载保护方面，我们所做的有以下几点：</p>
<ol>
<li><p>接入层建立自我保护机制，对开发者的请求频率加以限制，对异常请求提前拒绝。</p>
</li>
<li><p>建立旁路监控系统，实时分析出异常请求，并反馈给在线系统。对于逻辑异常的请求及早拒绝，对于数量异常的请求降低处理优先级，防止单个开发者的请求影响到整个系统服务可用性。</p>
</li>
<li><p>在系统过载时，及时丢弃失效请求。系统过载时，大量请求可能堆积在消息队列中，这些请求很可能已经失效，客户端已经超时，继续处理这些请求毫无价值，及早的发现并忽略这些请求有助于系统的快速恢复。</p>
</li>
<li><p>建立模块分级机制。每个模块功能不同，重要性也不一样，在系统超载时，降低非核心模块的优先级，保障核心模块的运行，可以最大程度上保障核心功能的可用性。</p>
</li>
<li><p>建立消息分级机制。对于消息量异常或逻辑异常的APP请求，适时自动降低消息处理优先级，降低处理速度，从而保障大多数正常开发者的使用。</p>
</li>
</ol>
<h4 id="流程与规范"><a href="#流程与规范" class="headerlink" title="流程与规范"></a>流程与规范</h4><p><code>影响可用性的因素很多，发布、单点、过载是最常见的三种情况</code>，后两种可以通过精心的架构设计加以规避，但发布却无法通过架构上的设计加以规避。人的因素是可用性的最大敌人，如果一个服务在设计好之后没有任何变更，相信良好的设计可以使可用性长期稳定在一个很高的水平之上。但不做变更基本不可能，而服务变更势必增加了风险引入的可能，如何规避人的因素带来的风险，是提高可用性的最重要的一步。在大多数情况下，我们无法完全避免风险的发生，我们可做的就是降低风险发生的概率，以及在风险发生时有足够的措施可以降低它带来的影响。这就<code>需要有一套完善的流程来规范我们的行为</code>（说易行难，贵在坚持）：</p>
<h5 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h5><ul>
<li><p>测试用例先行，全方位的用例覆盖</p>
</li>
<li><p>任何功能都要增加开关控制，以便在发生故障时可以及时关闭有问题特性</p>
</li>
<li><p>有足够的日志、完善的监控证明功能正确性</p>
</li>
<li><p>交叉code review，规避个人盲点</p>
</li>
</ul>
<h5 id="上线阶段"><a href="#上线阶段" class="headerlink" title="上线阶段"></a>上线阶段</h5><ul>
<li><p>必须所有测试用例全部通过方可上线，并在线上环境实时运行测试case</p>
</li>
<li><p>变更通告，周知相关人，以便及早发现问题</p>
</li>
<li><p>灰度：节点灰度，流量灰度等</p>
</li>
<li><p>记录发布日志，便于后续追查问题</p>
</li>
</ul>
<h5 id="故障阶段"><a href="#故障阶段" class="headerlink" title="故障阶段"></a>故障阶段</h5><ul>
<li><p>优先关闭开关、回滚服务</p>
</li>
<li><p>故障恢复后再追查问题原因，避免因追查问题导致影响增大</p>
</li>
<li><p>事后总结，完善测试用例及相关监控，防止类似事件再次发生</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>转眼小米推送已经成立四年多了，这期间经历了从无到有，从漏洞百出到逐步稳定，踩过许多坑，迈过许多坎，架构经历了数次调整，代码也经过若干次重构，系统的可用性终于有了稳步的提高，服务质量也逐渐得到认可。下面总结了一些我们在提高系统可用性、提高服务质量方面的一些小小经验，以供参考。</p>
<p><code>KISS(Keep It Simple Stupid!)</code>。<code>无论是代码还是架构，都要尽可能的保持简单</code>，如果一个系统（或代码）复杂到需要小心维护，那它离大规模风险爆发也就不远了。架构不是一成不变的，它往往是为了解决当时的问题而做出的设计，随着时间的变化和业务的发展，有时并不能很好的适应当前的需要。<code>定时对系统架构（和代码）进行审视，并根据需要做出调整（或重构），可以有效的提高系统的可用性</code>。</p>
<p><code>技术选型要慎重</code>。技术选型决定后续系统实现的难度以及稳定性等，需要根据团队成员的知识结构以及选用技术的掌握难度、社区活跃程度等慎重选择。<code>做后台服务首要的就是稳定性与可用性</code>，新技术可以从边缘模块进行尝试，成熟后再在核心系统使用，贸然在核心系统中使用新技术，往往会付出难以承受的代价。现在开源技术比较火热，系统中对开源组件的使用也越来越多，<code>在技术选型确定后，对系统中使用的每个组件都要进行深入了解，不能只是简单的会用，而是要用好。理解每深入一分，系统的性能和稳定性也会增加一分</code>。</p>
<p><code>给自己留足后路。</code>要想保持系统稳定完全不出问题其实很难，人都会犯错，关键是要给自己留足后路。<code>我们不是在面向对象编程，我们其实是在面向bug编程</code>，首先假设bug可能会出现，然后在设计上、编码上预防（或解决）这些可能出现的问题，预留足够的开关以便在bug真的发生时可以随时补救，<code>设计足够多的测试case并在线上循环运行，上报足够的监控数据验证系统运行的正确性，打印充分的日志以便在故障发生时快速的定位问题，开发足够的工具以提高我们定位、解决问题的效率。</code></p>
<p><code>重视暴露的每个小问题</code>。每次曲线异常、每次报警触发、每个case fail、每个用户反馈，每个小问题的背后都可能是隐藏着的大风险，重视每个出现的小问题，<code>深究下去</code>，直到系统变得更稳健。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈小米的高可用推送系统设计&quot;&gt;&lt;a href=&quot;#谈小米的高可用推送系统设计&quot; class=&quot;headerlink&quot; title=&quot;谈小米的高可用推送系统设计&quot;&gt;&lt;/a&gt;谈小米的高可用推送系统设计&lt;/h1&gt;&lt;p&gt;原文：&lt;a href=&quot;http://www.uml.org.cn/zjjs/201612141.asp?utm_source=tuicool&amp;amp;utm_medium=referral&quot;&gt;http://www.uml.org.cn/zjjs/201612141.asp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;小米推送是目前国内领先的推送服务提供商，主要为开发者提供快捷、准确、稳定的推送服务。目前日活跃设备突破3亿，日消息量突破50亿。本文将会介绍小米推送在提高系统可用性方面的一些经验和教训。&lt;br&gt;
    
    </summary>
    
      <category term="MQ" scheme="https://muyinchen.github.io/categories/MQ/"/>
    
    
      <category term="MQ" scheme="https://muyinchen.github.io/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>如何更好的设计RESTful API</title>
    <link href="https://muyinchen.github.io/2016/12/13/%E8%B7%9F%E7%9D%80%20Github%20%E5%AD%A6%E4%B9%A0%20Restful%20HTTP%20API%20%E8%AE%BE%E8%AE%A1/"/>
    <id>https://muyinchen.github.io/2016/12/13/跟着 Github 学习 Restful HTTP API 设计/</id>
    <published>2016-12-13T14:00:26.202Z</published>
    <updated>2016-12-27T09:24:30.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何更好的设计RESTful-API"><a href="#如何更好的设计RESTful-API" class="headerlink" title="如何更好的设计RESTful API"></a>如何更好的设计RESTful API</h1><p>当您的数据模型已开始稳定，您可以为您的网络应用程序创建公共API。 你意识到，很难对你的API进行重大更改，一旦它发布，并希望尽可能得到尽可能多的前面。 现在，互联网对API设计的意见有很多。 但是，因为没有一个广泛采用的标准在所有情况下都有效，所以你前面有一堆选择：你应该接受什么格式？ 你应该如何认证？ 你的API是否应该版本化？<br><a id="more"></a><br>构建API是您可以做的最重要的事情之一，以提高您的服务的价值。 通过使用API，您的服务/核心应用程序有可能成为其他服务增长的平台。 看看当前巨大的科技公司：Facebook，Twitter，谷歌，GitHub，亚马逊，Netflix …没有一个人会像今天一样大，如果他们没有通过API打开他们的数据。 事实上，整个行业存在的唯一目的是消费由所述平台提供的数据。</p>
<blockquote>
<p>你的API越简单明了，使用的人就越多。</p>
</blockquote>
<p>许多在网络上发现的API设计观点是围绕主观的模糊标准解释的学术讨论，而不是在现实世界中有意义的。 我的目标是描述一个为当今的Web应用程序设计的务实的API的最佳实践。 我没有尝试满足一个标准，如果它不觉得正确。 为了帮助指导决策过程，我写了一些API必须努力达到的要求：</p>
<ul>
<li>它应该使用Web标准，他们有意义</li>
<li>它应该对开发人员友好，可以通过浏览器地址栏探索</li>
<li>它应该简单，直观和一致，使采用不仅容易，但愉快</li>
<li>它应该提供足够的灵活性来支持大部分我们所设计的UI</li>
<li>应该是有效的，同时保持与其他要求的平衡</li>
</ul>
<p>API是开发人员的UI - 就像任何UI一样，确保用户的体验被仔细考虑是非常重要的！</p>
<h3 id="RESTful-API设计定义"><a href="#RESTful-API设计定义" class="headerlink" title="RESTful API设计定义"></a>RESTful API设计定义</h3><p>以下是我将在本文档中使用的一些重要术语：</p>
<ul>
<li><strong> Resource </strong>：对象的单个实例。 例如，一只动物。</li>
<li><strong>集合</strong>：对象的集合。 例如，动物。</li>
<li><strong> HTTP </strong>：用于通过网络通信的协议。</li>
<li><strong> Consumer </strong>：能够发出HTTP请求的客户端计算机应用程序。</li>
<li><strong>第三方开发人员</strong>：不是您项目的一部分，但希望使用您的数据服务的开发人员。</li>
<li><strong>服务器</strong>：可通过网络从客户端访问的HTTP服务器/应用程序。</li>
<li><strong>端点</strong>：服务器上的API网址，表示资源或整个集合。</li>
<li><strong>幂等</strong>：无边际效应，多次操作得到相同的结果。</li>
<li><strong>网址区段</strong>：网址中的斜线分隔的信息。</li>
</ul>
<h3 id="数据设计和抽象"><a href="#数据设计和抽象" class="headerlink" title="数据设计和抽象"></a>数据设计和抽象</h3><p>首先将从你写的开发文档API开始(比如我们可以看到各个开发平台的暴露出来的API文档)，您需要决定如何设计数据，以及您的核心服务/应用程序如何工作。 如果你在做的API是第一次开发，这应该很容易。 如果您要将API附加到现有项目，则可能需要提供更多抽象(毕竟是要按照已有的文档规范来做)。</p>
<p>有时，集合可以表示数据库表，资源可以表示该表中的一行。 然而，这不是通常的情况。 事实上，你的API应该尽可能多地抽象出你的数据和业务逻辑。 非常重要的一点是，如果您不希望使用您的API，则不要使用任何复杂的应用程序数据压倒第三方开发人员。</p>
<p>还有你的服务的很多部分，你不应该通过API公开。 一个常见的例子是许多API不允许第三方创建用户。</p>
<h3 id="设计资源请求"><a href="#设计资源请求" class="headerlink" title="设计资源请求"></a>设计资源请求</h3><p>当然你知道GET和POST请求。当您的浏览器访问不同的网页时，这两个最常用的请求。POST是如此受欢迎，它甚至流行语我们的平常的说话中，即使那些不知道互联网如何工作的人也知道他们可以“发布”的东西在朋友的Facebook上。</p>
<p>有四个半非常重要的HTTP动词，你需要知道。我说“一半”，因为PATCH动词非常类似于PUT动词，两个通常由许多API开发人员组合。这里是动词，在他们旁边是他们相关的数据库调用（我假设大多数人读这个知道更多关于写入数据库而不是设计一个API）。</p>
<ul>
<li><strong> GET </strong>（SELECT）：从服务器检索特定资源，或资源列表。</li>
<li><strong> POST </strong>（CREATE）：在服务器上创建一个新的资源。</li>
<li><strong> PUT </strong>（UPDATE）：更新服务器上的资源，提供整个资源。</li>
<li><strong> PATCH </strong>（UPDATE）：更新服务器上的资源，仅提供更改的属性。</li>
<li><strong> DELETE </strong>（DELETE）：从服务器删除资源。</li>
</ul>
<p>这里有两个较少知名的HTTP动词：</p>
<ul>
<li><strong> HEAD </strong> - 检索有关资源的元数据，例如数据的哈希或上次更新时间。</li>
<li><strong>OPTIONS </strong> - 检索关于客户端被允许对资源做什么的信息。</li>
</ul>
<p>一个好的RESTful API将使用四个半HTTP动词，允许第三方与其数据进行交互，并且不会将动作/动词作为URL段。</p>
<p>通常，GET请求可以被缓存（通常是！）在浏览器，例如将缓存请求头用于第二次用户的POST请求。 HEAD请求基本上是一个没有响应主体的GET，并且也可以被缓存。</p>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>无论你正在构建什么，无论你事先做了多少规划，你的核心应用程序总会改变，你的数据关系总会改变，属性添加和从你的资源中删除。这只是软件开发的工作原理，尤其是如果你的项目还活着并被许多人使用（如果你正在构建一个API，情况可能就会如此）。</p>
<p>记住，API是服务器和客户端之间的已发布约定。如果您更改了服务器API，这些更改会破坏向后兼容性，那么你就打破了这个约定，客户端又会要求你重新支持它(谁让客户端依然是之前的版本，调用的还是之前的API)。为了避免这样的事情，并让您的客户端满意，您需要偶尔引入新版本的API，同时仍允许访问旧版本。</p>
<p>注意，如果你只是为你的API添加新的特性，例如资源上的新属性，或者如果你添加新的端点(比如之前只有查询，现在增加一个修改)，你不需要增加您的API版本号，因为这些更改不会破坏向后兼容性。当然，您将需要更新您的API文档。</p>
<p>随着时间的推移，您可以弃用API的旧版本。弃用某个功能并不意味着关闭它或者降低它的质量，而是告诉客户端您的API，旧版本将在特定日期删除，并且他们应该升级到较新的版本。</p>
<p>一个好的RESTful API设计将跟踪URL中的版本。另一个最常见的解决方案是将版本号放在请求头中，但在与许多不同的第三方开发人员合作之后，我可以告诉您，添加这些请求头信息并不像添加网址细分那么容易。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>跟踪客户端使用的API的版本/端点。 这可以像每次请求时在数据库中增加一个整数一样简单。 有很多原因跟踪API Analytics是一个好主意，例如，最常用的API调用应该是高效的。</p>
<p>为了构建第三方开发者所喜欢的API，最重要的是，当您弃用某个版本的API时，实际上可以使用已弃用的API功能与开发人员联系(在两个异构系统中当对方的开发人员调用本服务时顺带告知对方)。 这是提醒他们在弃用旧API版本之前升级的完美方法。</p>
<p>第三方开发者通知的过程可以自动化，例如。 每当对一个已弃用的功能发出10,000个请求时，发邮件通知开发人员。</p>
<h3 id="API-Root-URL"><a href="#API-Root-URL" class="headerlink" title="API Root URL"></a>API Root URL</h3><p>无论你相信与否，您的API的根位置是重要的。当开发人员使用您的API接手旧项目并需要构建新功能时，他们可能根本不知道您有哪些服务。幸好他们知道客户端对外调用的那些URL列表。重要的是，进入您的API的根入口点尽可能简单，因为长的复杂URL将显得令人生畏，并可能使开发人员直接略过而不会采用。</p>
<p>这里有两个常见的URL根：</p>
<ul>
<li><a href="https://example.org/api/v1/*" target="_blank" rel="external">https://example.org/api/v1/*</a></li>
<li><a href="https://api.example.com/v1/*" target="_blank" rel="external">https://api.example.com/v1/*</a></li>
</ul>
<p>如果您的应用程序庞大，或者您预计它会变得庞大，将API放在自己的子域（例如<strong> api。</strong>）上是一个不错的选择。这可以允许在路上一些更灵活的可扩展性。</p>
<p>如果您预计您的API将不会增长到那么大，或者您想要一个更简单的应用程序设置（例如，您希望从同一个框架托管网站和API），将您的API放置在域根的URL段（例如<strong> / api / </strong>）也有效。</p>
<p>将内容设为您的API根目录是个好主意。例如，点击GitHub的API的根会返回一个端点列表。就个人而言，我喜欢使用根网址提供给开发人员认为有用的信息，例如，如何获取API的开发人员文档。</p>
<p>此外，请注意HTTPS前缀。作为一个好的RESTful API，您必须在HTTPS之后托管您的API(一个好的RESTful API总是基于HTTPS来发布的)。</p>
<h3 id="端点"><a href="#端点" class="headerlink" title="端点"></a>端点</h3><p>端点是您的API中指向特定资源或资源集合的URL。</p>
<p>如果你正在构建一个虚拟的API来代表几个不同的动物园，每个动物园包含许多动物，员工（可以在多个动物园工作）和跟踪每个动物的物种，你可能有以下端点：</p>
<ul>
<li><a href="https://api.example.com/v1/**zoos**" target="_blank" rel="external">https://api.example.com/v1/**zoos**</a></li>
<li><a href="https://api.example.com/v1/**animals**" target="_blank" rel="external">https://api.example.com/v1/**animals**</a></li>
<li><a href="https://api.example.com/v1/**animal_types**" target="_blank" rel="external">https://api.example.com/v1/**animal_types**</a></li>
<li><a href="https://api.example.com/v1/**employees**" target="_blank" rel="external">https://api.example.com/v1/**employees**</a></li>
</ul>
<p>当引用每个端点可以做什么时，您需要列出有效的HTTP动词和端点组合。例如，这里有一个半全面的行动列表，可以使用我们虚构的API执行。请注意，我在每个端点之前都有HTTP动词，因为这是在HTTP请求标头中使用的相同符号。</p>
<ul>
<li>GET / zoos：列出所有动物园（ID和名称，不要太多细节）</li>
<li>POST / zoos：创建一个新的Zoo</li>
<li>GET / zoos / ZID：检索整个Zoo对象</li>
<li>PUT / zoos / ZID：更新Zoo（整个对象）</li>
<li>PATCH / zoos / ZID：更新Zoo（部分对象）</li>
<li>DELETE / zoos / ZID：删除动物园</li>
<li>GET / zoos / ZID / animals：检索动物列表（ID和名称）。</li>
<li>GET / animals：列出所有动物（ID和名称）。</li>
<li>POST / animals：创建一个新的动物</li>
<li>GET / animals / AID：检索动物对象</li>
<li>PUT / animals / AID：更新动物（整个对象）</li>
<li>PATCH / animals / AID：更新动物（部分对象）</li>
<li>GET / animal_types：检索所有动物类型的列表（ID和名称）</li>
<li>GET / animal_types / ATID：检索整个动物类型对象</li>
<li>GET / employees：检索完整的员工列表</li>
<li>GET / employees / EID：检索特定员工</li>
<li>GET / zoos / ZID / employees：检索在此动物园工作的员工（ID和名称）的列表</li>
<li>POST / employees：创建一个新员工</li>
<li>POST / zoos / ZID / employees：在特定动物园雇用员工</li>
<li>DELETE / zoos / ZID / employees / EID：从特定的动物园中解雇员工</li>
</ul>
<p>在上面的列表中，ZID表示Zoo ID，AID表示动物ID，EID表示Employee ID，ATID表示动物类型ID。在你的文档中有一个键，你选择的任何约定是一个好主意。</p>
<p>为了简洁，我在上面的示例中省略了常见的API网址前缀。虽然这在通讯期间可能很好，但在实际的API文档中，您应该始终显示每个端点的完整网址（例如GET <a href="http://api.example.com/v1/animal_type/ATID）。" target="_blank" rel="external">http://api.example.com/v1/animal_type/ATID）。</a></p>
<p>注意数据之间的关系如何显示，特别是雇员和动物园之间的多对多关系。通过添加其他网址细分，您可以执行更具体的互动。当然，对于“FIRE(解雇)”没有HTTP动词，但是通过对位于Zoo内的Employee执行DELETE，我们能够实现相同的效果。</p>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>当客户端请求对象列表时，请务必为它们提供符合所请求条件的每个对象的列表。这个列表可能是巨大的。但是，重要的是不要对数据执行任何任意限制。正是这些任意的限制使第三方开发者很难知道发生了什么。如果他们请求某个集合，并迭代结果，他们从来没有看到超过100个结果，接下来他们就不得不去查找这个限制条件的出处(提供服务端没有问题，就只能是调用端的问题了)。到底是他们的ORM的bug导致的，还是因为网络截断了大数据包？</p>
<blockquote>
<p>尽可能减少那些会影响到第三方开发者开发的无谓限制</p>
</blockquote>
<p>然而，重要的是，您确实为客户端提供了指定某种过滤/结果限制的能力。这么做最重要的一个原因是可以最小化网络传输，客户端尽快得到结果。第二个重要的原因是客户端可能是懒惰的，如果服务器可以为他们做过滤和分页，一切都更好。还有一个不那么重要的原因，请求资源越少，对服务器的一个很大的好处是，减少了负载。</p>
<p>过滤主要用于对资源集合执行GET。由于这些是GET请求，因此应通过URL传递过滤信息。以下是您可能想要添加到API的过滤类型的一些示例：</p>
<ul>
<li>?limit = 10:减少返回给Consumer的结果数（用于分页）</li>
<li>?offset = 10:向客户端发送信息集（用于分页）</li>
<li>?animal_type_id = 1:过滤符合以下条件的记录（WHERE animal_type_id = 1）</li>
<li>?sortby = name&amp;order = asc:根据指定的属性对结果进行排序（ORDER BY<code>name</code> ASC）</li>
</ul>
<p>其中一些过滤可能与端点URLS冗余。例如我之前提到的GET / zoo / ZID / animals。这与GET / animals是一样的吗？zoo_id = ZID。为客户端提供的专用端点将使他们的开发更轻松，这对于您预期他们会做很多的请求尤其如此。在文档中，提及这种冗余，以便第三方开发人员不会留意是否存在差异。</p>
<p>还有一个要说的是，每当您执行数据的过滤或排序时，请确保您列出客户端可以过滤和排序的列。我们不希望将任何数据库错误发送给客户端！</p>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>作为RESTful API，使用正确的HTTP状态代码非常重要;他们是一个标准！各种网络设备能够读取这些状态码，例如，负载平衡器可以配置为避免向发送大量50x错误的Web服务器发送请求。有很多<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">HTTP状态代码</a>可供选择，但此列表应该是一个很好的起点：</p>
<ul>
<li><strong> 200 </strong> OK - [GET]</li>
<li>客户端从服务器请求数据，服务器为它们找到它（等幂）</li>
<li><strong> 201 </strong> CREATED - [POST / PUT / PATCH]</li>
<li>客户端提供了服务器数据，并且服务器创建了一个资源</li>
<li><strong> 204 </strong>无内容 - [删除]</li>
<li>客户端要求服务器删除资源，并且服务器将其删除</li>
<li><strong> 400 </strong>无效请求 - [POST / PUT / PATCH]</li>
<li>客户端给服务器的数据不良，服务器没有做任何事情（幂等）</li>
<li><em>*错误404 - [</em>]<pre><code>*客户端引用了一个不存在的资源或集合，并且服务器什么也不做（幂等）
</code></pre></li>
<li><em>*500内部服务器错误 - [</em>]<pre><code>*服务器遇到错误，并且客户端不知道请求是否成功
</code></pre></li>
</ul>
<h4 id="状态码范围"><a href="#状态码范围" class="headerlink" title="状态码范围"></a>状态码范围</h4><p><strong> 1xx </strong>范围保留用于底层HTTP的东西，你很可能永远也用不到。</p>
<p><strong> 2xx </strong>范围保留用于成功消息，尽可能确保您的服务器尽可能多地向客户端发送这些消息。</p>
<p><strong> 3xx </strong>范围保留用于重定向。大多数API不使用这些请求很多（不像SEO人使用它们那么频繁），然而，较新的超媒体风格API将更多地使用这些请求。</p>
<p><strong> 4xx </strong>范围保留用于响应客户端做出的错误，例如。他们提供不良数据或要求不存在的东西。这些请求应该是幂等的，而不是更改服务器的状态。</p>
<p><strong> 5xx </strong>范围的状态码是保留给服务器端错误用的。这些错误常常是从底层的函数抛出来的，甚至开发人员也通常没法处理，发送这类状态码的目的以确保客户端获得某种响应。当收到5xx响应时，客户端不可能知道服务器的状态，所以这类状态码是要尽可能的避免。</p>
<p>预期的返回文档</p>
<p>当使用不同的HTTP动词对服务器端点执行操作时，客户端需要在返回结果里面拿到一系列的信息</p>
<p>。 下面的列表是非常典型的RESTful API：</p>
<ul>
<li>GET / collection：返回资源对象的列表（数组）</li>
<li>GET / collection / resource：返回单个Resource对象</li>
<li>POST / collection：返回新创建的Resource对象</li>
<li>PUT / collection / resource：返回完整的Resource对象</li>
<li>PATCH / collection / resource：返回完整的Resource对象</li>
<li>DELETE / collection / resource：返回一个空文档</li>
</ul>
<p>请注意，当Consumer创建资源时，他们通常不知道正在创建的资源的ID（也不知道其他属性，如创建和修改的时间戳）（如果适用）。 这些附加属性与后续请求一起返回，当然作为对初始POST的响应。</p>
<p>###认证</p>
<p>大多数时候，一个服务器想要知道谁正在做哪些请求。当然，一些API提供公共用户(匿名用户)使用的，但大多数时间的工作是代表某人执行。</p>
<p><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="external">OAuth 2.0</a>提供了一个很好的方法。对于每个请求，您可以确定知道哪个客户正在发出请求，代表他们请求哪个用户，并提供一种（大部分）标准化的方式来过期访问或允许用户撤消来自客户端的访问权，需要第三方客户端知道用户登录凭据。</p>
<p>还有<a href="http://tools.ietf.org/html/rfc5849" target="_blank" rel="external">OAuth 1.0</a>和<a href="https://dev.twitter.com/docs/oauth/xauth" target="_blank" rel="external">xAuth</a>同样适用这样的场景。无论您选择哪种方法，请确保它是常见的，并且有许多不同的库为您的客户端可能使用的语言/平台编写的文档(比如redis提供Java调用的API)。</p>
<p>我可以诚实地告诉你，OAuth 1.0a，虽然它是最安全的选项，但是实现起来很痛苦。建议你选择一个替代品。</p>
<h3 id="内容类型"><a href="#内容类型" class="headerlink" title="内容类型"></a>内容类型</h3><p>目前，最令人兴奋的API提供来自RESTful接口的JSON数据。这包括Facebook，Twitter，GitHub，你命名。 XML似乎已经失去了优势（除了在大型企业环境中）。 SOAP，不幸的是，它过时了，我们真的没有看到太多的API把HTML作为结果返回给客户端（除非你在构建一个爬虫程序）。</p>
<p>只要你返回给他们有效的数据格式，开发者就可以使用流行的语言和框架进行解析。如果你正在构建一个通用的响应对象并使用不同的序列化器，你也可以很容易的提供之前所提到的那些数据格式（不包括SOAP）。而你所要做的就是把使用方式放在响应数据的接收头里面。</p>
<p>一些API创建者建议向URL（端点之后）添加.json，.xml或.html文件扩展名以指定要返回的内容类型，但我个人不喜欢这一点。我真的很喜欢Accept头（它是内置在HTTP规范），并且我觉得这么做也比较适当一些。</p>
<h3 id="超媒体API"><a href="#超媒体API" class="headerlink" title="超媒体API"></a>超媒体API</h3><p>超媒体API很可能是RESTful API设计的未来。 实际上是一个非常好的概念，它回归到了HTTP和HTML如何运作的“本质”。</p>
<p>当使用非超媒体RESTful API时，URL端点是服务器和使用者之间的约定的一部分。这些端点必须由客户端提前知道，并且更改这些端点意味着客户端不再能够按预期与服务器通信。你可以先假定这是一个限制。</p>
<p>现在，API客户端已经不仅仅只有那些创建HTTP请求的用户代理了。大多数HTTP请求是由人们通过浏览器产生的。人们不会被哪些预先定义好的RESTful API端点URL所约束。是什么让人们变的如此与众不同？人们可以阅读内容，点击链接，看看有趣的标题，一般来说，探索一个网站，解释内容，去他们想去的地方。即使一个URL改变，人们也不受影响（除非，他们事先给某个页面做了书签，在这种情况下，他们去主页并发现原来有一条新的路径可以去往之前的页面）。</p>
<p>超媒体API概念的工作方式与人类相同。请求API的根返回一个URL列表，它可能指向每个信息集合，并以客户端可以理解的方式描述每个集合。为每个资源提供ID并不重要（或必需），只要提供了一个URL即可。</p>
<p>随着超媒体API的客户端爬行链接和收集信息，URL在响应中始终是最新的，并且不需要事先知道作为约定的一部分。如果URL被缓存，并且后续请求返回404，则客户端可以简单地返回到根并再次发现内容。</p>
<p>在检索集合中的资源列表时，将返回包含各个资源的完整URL的属性。当执行POST / PATCH / PUT时，响应可以是3xx重定向到完整的资源。</p>
<p>JSON不仅告诉了我们需要定义哪些属性作为URL，也告诉了我们如何将URL与当前文档关联的语义。正如你猜的那样，HTML就提供了这样的信息。我们可能很乐意看到我们的API走完了完整的周期，并回到了处理HTML上来。想一下我们与CSS一起前行了多远，有一天我们甚至可能会看到，API和网站使用完全相同的URL和内容是常见的做法。</p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>老实说，即便你不能百分之百的遵循指南中的条款，你的API不一定是糟糕的。但是，如果你不为API准备文档的话，没有人会知道如何使用它，那它真的会成为一个糟糕的API。</p>
<p>使您的文档可用于未经身份验证的开发人员。</p>
<p>不要使用自动文档生成器，或者如果你这样做，你也要保证自己审阅过并使其具有更好的版式。</p>
<p>不要截断示例请求和响应正文，要展示完整的东西。在文档中使用语法高亮指示符。</p>
<p>记录每个端点的预期响应代码和可能的错误消息，以及导致这些错误消息可能出现的错误。</p>
<p>如果您有空闲时间，请构建一个开发人员API控制台，以便开发人员可以立即试用您的API。这不像你想象的那么难，开发者（内部和第三方）也会因此而拥戴你！</p>
<p>确保您的文档可以打印; CSS是一个强大的东西;不要害怕在打印文档时隐藏侧边栏。即使没有人打印过物理副本，你会惊奇的发现有多少开发者喜欢打印到PDF以供离线阅读。</p>
<h3 id="勘误：原始的HTTP封包"><a href="#勘误：原始的HTTP封包" class="headerlink" title="勘误：原始的HTTP封包"></a>勘误：原始的HTTP封包</h3><p>因为我们所做的一切都是通过HTTP，我将向你展示一个HTTP包的剖析。 我经常感到惊讶的是，有多少人不知道这些东西是什么样子的！ 当客户端向服务器发送请求时，它们提供一组键/值对，称为标题，以及两个换行符，最后是请求体。 这都是在同一个数据包中发送的。</p>
<p>服务器然后以所述键/值对格式，用两个换行符然后响应主体进行响应。 HTTP是一个请求/响应协议; 没有“推送”支持（服务器向客户端发送数据未经安全），除非您使用不同的协议，如Websockets。</p>
<p>在设计API时，您应该能够使用允许查看原始HTTP数据包的工具。 例如，考虑使用<a href="https://www.wireshark.org/" target="_blank" rel="external">Wireshark</a>。 此外，请确保您使用的框架/ Web服务器，允许您阅读和更改尽可能多的这些字段。</p>
<h4 id="Example-HTTP-Request"><a href="#Example-HTTP-Request" class="headerlink" title="Example HTTP Request"></a>Example HTTP Request</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">POST /v1/animal HTTP/1.1</div><div class="line">Host: api.example.org</div><div class="line">Accept: application/json</div><div class="line">Content-Type: application/json</div><div class="line">Content-Length: 24</div><div class="line"> </div><div class="line">&#123;</div><div class="line">  "name": "Gir",</div><div class="line">  "animal_type": 12</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Example-HTTP-Response"><a href="#Example-HTTP-Response" class="headerlink" title="Example HTTP Response"></a>Example HTTP Response</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Wed, 18 Dec 2013 06:08:22 GMT</div><div class="line">Content-Type: application/json</div><div class="line">Access-Control-Max-Age: 1728000</div><div class="line">Cache-Control: no-cache</div><div class="line"> </div><div class="line">&#123;</div><div class="line">  "id": 12,</div><div class="line">  "created": 1386363036,</div><div class="line">  "modified": 1386363036,</div><div class="line">  "name": "Gir",</div><div class="line">  "animal_type": 12</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="https://codeplanet.io/principles-good-restful-api-design/" target="_blank" rel="external">https://codeplanet.io/principles-good-restful-api-design/</a><br> <a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api" target="_blank" rel="external">http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何更好的设计RESTful-API&quot;&gt;&lt;a href=&quot;#如何更好的设计RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;如何更好的设计RESTful API&quot;&gt;&lt;/a&gt;如何更好的设计RESTful API&lt;/h1&gt;&lt;p&gt;当您的数据模型已开始稳定，您可以为您的网络应用程序创建公共API。 你意识到，很难对你的API进行重大更改，一旦它发布，并希望尽可能得到尽可能多的前面。 现在，互联网对API设计的意见有很多。 但是，因为没有一个广泛采用的标准在所有情况下都有效，所以你前面有一堆选择：你应该接受什么格式？ 你应该如何认证？ 你的API是否应该版本化？&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础" scheme="https://muyinchen.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 最佳技巧</title>
    <link href="https://muyinchen.github.io/2016/12/13/Java%208%20%E6%9C%80%E4%BD%B3%E6%8A%80%E5%B7%A7/"/>
    <id>https://muyinchen.github.io/2016/12/13/Java 8 最佳技巧/</id>
    <published>2016-12-13T11:10:19.512Z</published>
    <updated>2016-12-13T11:09:30.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-8-最佳技巧"><a href="#Java-8-最佳技巧" class="headerlink" title="Java 8 最佳技巧"></a>Java 8 最佳技巧</h1><blockquote>
<p>翻译文章</p>
</blockquote>
<p> 在过去的几年中，我一直使用<code>Java 8</code> 进行了很多的编码工作，用于开发 <a href="http://trishagee.github.io/presentation/java8_in_anger/" target="_blank" rel="external">新应用</a> 和 <a href="http://trishagee.github.io/presentation/refactoring_to_java_8/" target="_blank" rel="external">迁移遗留应用</a> ，我觉得是时候写一些有用的”最佳实践”。我个人不喜欢”最佳实践”这个术语，因为它意味着“一刀切”的解决方案，当然编码工作是不会这样的–这是因为我们开发人员会想出适合我们的方案。但我发现我对<code>Java8</code>特别的喜欢，它让我的生活更轻松一点，所以我想就此话题展开讨论。<br> <a id="more"></a></p>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a><code>Optional</code></h2><p> <a href="http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html" target="_blank" rel="external"> <code>Optional</code> </a> 是一个被严重低估的功能, 它消除了很多困扰着我们的   <code>NullPointerExceptions。它在代码边界（包括你调用和提供 API）处理上特别有用，因为它允许你和你调用的代码说明程序运行的期望结果。</code> </p>
<p>然而，如果没有必要的思考和设计，那么就会导致一个小变化而影响大量的类，也会导致可读性变差。这里有一些关于如何高效使用<code>Optional</code>的提示。</p>
<h3 id="Optional-应该只用于返回类型"><a href="#Optional-应该只用于返回类型" class="headerlink" title="Optional 应该只用于返回类型"></a><code>Optional</code> 应该只用于返回类型</h3><p>…不能是参数和属性. 阅读 <a href="http://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html" target="_blank" rel="external">这个博客</a> 了解怎样使用 <code>Optional</code>。 幸运的是, <code>IntelliJ IDEA</code> 在打开  <a href="https://www.jetbrains.com/help/idea/2016.2/code-inspection.html" target="_blank" rel="external">inspection</a> 功能的情况下会检查你是否遵循了这些建议。<br><img src="http://img2.tuicool.com/FRbYzeF.png!web" alt=""> </p>
<p>可选值应该在使用的地方进行处理.  <code>IntelliJ IDEA</code>的建议可以防止你不恰当的使用<code>Optional</code>, 所以你应该立即处理你发现的不恰当使用<code>Optional</code>。(根据自己的理解翻译)<br><img src="http://img0.tuicool.com/yuQFV3F.png!web" alt=""> </p>
<h3 id="你不应该简单的调用-get"><a href="#你不应该简单的调用-get" class="headerlink" title="你不应该简单的调用 get()"></a>你不应该简单的调用 <code>get()</code></h3><p><code>Optinal</code>的目的是为了表示此值有可能为空，且让你有能力来应付这种情况。因此，在使用值之前进行检查是非常重要的。在某些情况下简单的调用<code>get()</code>而没有先使用<code>isPresent()</code>进行检查是一样会导致空指针问题。幸运的是，<code>IntelliJ IDEA</code> 任然会检查出这个问题并警告你。<br><img src="http://img1.tuicool.com/AvaieqY.png!web" alt=""> </p>
<h3 id="有可能是一个更优雅的方式"><a href="#有可能是一个更优雅的方式" class="headerlink" title="有可能是一个更优雅的方式"></a>有可能是一个更优雅的方式</h3><p> <code>isPresent()</code> 与&nbsp; <code>get()</code> 结合 <code>使用的技巧</code> … </p>
<p> <img src="http://img1.tuicool.com/A7RjYny.png!web" alt=""> </p>
<p> …但还有更优雅的解决方案。你可以使用 <code>orElse方法来使得当它为null时给出一个代替的值。</code> </p>
<p> <img src="http://img0.tuicool.com/niQZJfn.png!web" alt=""> </p>
<p> …或者使用 <code>orElseGet方法来处理上述相同情况。这个例子和上面的看起来好像一样，但本例是可以调用</code> <code>supplier</code> 接口的 <code>实现</code> ,，因此如果它是一个高开销的方法，可以使用 <code>lambda</code> 表达式来获得更好的性能。 </p>
<p> <img src="http://img1.tuicool.com/vAvURb6.png!web" alt=""> </p>
<h2 id="使用Lambda表达式"><a href="#使用Lambda表达式" class="headerlink" title="使用Lambda表达式"></a>使用Lambda表达式</h2><p> <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda 表达式</a> 是 <code>Java 8</code> 的卖点之一.。即使你还没有使用过<code>Java 8</code>， 到目前你也可能有一些基本的了解。但在<code>Java</code>编程中还是一种新的方式，它也不是明显的”最佳实践” 。 这里有一些我遵循的指南。 </p>
<h3 id="保持简短"><a href="#保持简短" class="headerlink" title="保持简短"></a>保持简短</h3><p> 函数式程序员更愿意使用较长的<code>lambda</code> 表达式，但我们这些仅仅使用Java很多年的程序员来说更容易保持<code>lambda</code> 表达式的短小。你甚至更喜欢把它们限制在一行，更容易把较长的表达式  <a href="http://www.amazon.cn/gp/product/B003BY6PLK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=importnew-23&amp;linkCode=as2&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003BY6PLK" target="_blank" rel="external">重构</a>  到一个方法中。 </p>
<p> <img src="http://img2.tuicool.com/mMNvqij.png!web" alt=""> </p>
<p>把它们变成一个方法引用， 方法引用看起来有一点陌生，但却值得这样做，因为在某些情况有助于提高可读性，后面我再谈可读性。</p>
<p> <img src="http://img1.tuicool.com/bmQRBrJ.png!web" alt=""> </p>
<h3 id="明确的"><a href="#明确的" class="headerlink" title="明确的"></a>明确的</h3><p>(作者应该想要表达的是: 参数命名规范，要有意义；有更好的翻译请修正)</p>
<p>   lambda 表达式中类型信息已经丢失了，因此你会发现包含类型信息的参数会更有用。<br>  <img src="http://img2.tuicool.com/jIV3Qb7.png!web" alt=""> </p>
<p>如你所见，这样会比较麻烦。因此我更喜欢给参数一个更有意义的命名。当然，你做与否， IntelliJ IDEA 都会让你看到参数的类型信息。<br>  <img src="http://img2.tuicool.com/eeeEbyE.png!web" alt=""> </p>
<p>即使是在函数式接口的<code>lambda</code> 表达式中:</p>
<p> <img src="http://img0.tuicool.com/UN7F32R.png!web" alt=""> </p>
<h2 id="针对-Lambda-表达式进行设计"><a href="#针对-Lambda-表达式进行设计" class="headerlink" title="针对 Lambda 表达式进行设计"></a>针对 <code>Lambda</code> 表达式进行设计</h2><p> 我认为lambda表达式有点像 <a href="http://docs.oracle.com/javase/tutorial/extra/generics/index.html" target="_blank" rel="external">泛型</a> – 泛型,我们经常使用它们 (例如, 给  <code>List&lt;&gt;</code> 添加类型信息 )，但不常见的是我们把一个方法或类泛型化  (如:  <code>Person&lt;T&gt;</code> )。同样的, 它就像我们使用通过<code>lambdas</code>包装的 <code>Streams API</code>，但对我们来说更罕见的是创建一个需要  <code>lambda 表达式</code>参数的方法。 </p>
<h3 id="IntelliJ-IDEA-可以帮助你引入一个函数化的参数"><a href="#IntelliJ-IDEA-可以帮助你引入一个函数化的参数" class="headerlink" title="IntelliJ IDEA 可以帮助你引入一个函数化的参数"></a><code>IntelliJ IDEA</code> 可以帮助你引入一个函数化的参数</h3><p> 这里让你可以使用 <code>Lambda</code> 表达式而非对象来 <a href="https://www.jetbrains.com/help/idea/2016.1/extract-functional-parameter.html" target="_blank" rel="external">创建一个参数</a> 。这个功能的好处在于其建议使用一个已有的  <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html" target="_blank" rel="external">函数接口</a> 来匹配这个规范。 </p>
<p> <img src="http://img2.tuicool.com/MZ3Q3iq.png!web" alt=""> </p>
<p>这个将引导我们</p>
<h3 id="使用已有的函数接口"><a href="#使用已有的函数接口" class="headerlink" title="使用已有的函数接口"></a>使用已有的函数接口</h3><p> 当开发者越来越熟悉 Java 8 代码时，我们会知道使用例如 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html" target="_blank" rel="external"> <code>Supplier</code> </a> 和  <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html" target="_blank" rel="external"> <code>Consumer</code> </a> 这样的接口会发生什么，但是单独再创建一个 <code>ErrorMessageCreator</code> 会让我们很诧异并且很浪费时间。你可以翻阅  <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external"> <code>function package</code> </a> 来查看系统本身已经给我们准备了什么。 </p>
<h3 id="为函数接口添加-FunctionalInterface-注解"><a href="#为函数接口添加-FunctionalInterface-注解" class="headerlink" title="为函数接口添加 @FunctionalInterface 注解"></a>为函数接口添加 <code>@FunctionalInterface</code> 注解</h3><p>如果你真的需要创建自己的函数接口，那么就需要用这个 <code>@FunctionalInterface</code> 注解。这个注解似乎没多大用处，但是 <code>IntelliJ IDEA</code> 会在接口不满足这个注解要求的情况下予以提示。例如你没有指定要继承的方法：</p>
<p><img src="http://img1.tuicool.com/IVv6jaI.png!web" alt=""> </p>
<p>指定太多的方法：</p>
<p><img src="http://img2.tuicool.com/BzAzea2.png!web" alt=""> </p>
<p>在类中使用注解而不是在接口：</p>
<p><img src="http://img1.tuicool.com/Q3U77jJ.png!web" alt=""> </p>
<p><code>Lambda</code> 表达式可用于任意只包含单个抽象方法的接口中，但是不能用于满足该要求的抽象类。看似不符合逻辑，但实际要求必须如此。</p>
<h2 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h2><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external">Stream API</a> 是<code>Java 8</code>的另一大卖点, 我认为到现在为止，我们仍然不知道这会对我们的编码方式有多大改变．但我发现这是一个好坏参半的功能。 </p>
<h3 id="流式风格"><a href="#流式风格" class="headerlink" title="流式风格"></a>流式风格</h3><p>就我个人而言，更喜欢使用流式风格．当然你不必也这么做, 但我发现它帮助了我：</p>
<ul>
<li>一眼就能看出有哪些操作，它的执行顺序是什么</li>
<li>更方便调试（虽然<code>IntelliJ IDEA</code>提供了 <a href="https://youtu.be/rimzOolGguo?t=3s" target="_blank" rel="external">在包含lambda表达式的行上设置断点的能力</a> ，为了更方便调试，把它拆分到不同的行上）*   在测试的时候允许取消一个操作</li>
<li>在调试或测试是，可以很方便的插入<code>peek()</code> </li>
</ul>
<p><img src="http://img1.tuicool.com/zANbeyI.png!web" alt=""> </p>
<p>在我看来这样写很简洁。但是使用这种方法并没有给我们节省多少代码行。你可能需要调整代码格式化设置让代码看起来更加清晰。<br><img src="http://img2.tuicool.com/yANV3mA.png!web" alt=""> </p>
<h3 id="使用方法引用"><a href="#使用方法引用" class="headerlink" title="使用方法引用"></a>使用方法引用</h3><p>是的，你需要一点时间来适应这个奇怪的语法。但如果使用恰当，真的可以提升代码的可读性，看看下面代码：</p>
<p><img src="http://img0.tuicool.com/Mj6zuuj.png!web" alt=""> </p>
<p>以及使用 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html" target="_blank" rel="external"> <code>Objects</code> </a> 类的辅助方法： </p>
<p><img src="http://img1.tuicool.com/uqmm6zN.png!web" alt=""> </p>
<p>后面一段代码更加的明确可读。<code>IntelliJ IDEA</code> 通常会知道怎么将一个 <code>Lambda 表达式</code>进行折叠。<br>  <img src="http://img0.tuicool.com/NVJJf2b.png!web" alt=""> </p>
<h3 id="当对集合进行元素迭代时，尽可能的使用-Streams-API"><a href="#当对集合进行元素迭代时，尽可能的使用-Streams-API" class="headerlink" title="当对集合进行元素迭代时，尽可能的使用 Streams API"></a>当对集合进行元素迭代时，尽可能的使用 Streams API</h3><p>…或者用新的集合方法，例如 <code>forEach</code> .  <code>IntelliJ IDEA</code> 会建议你这么做： </p>
<p><img src="http://img0.tuicool.com/qMBzA3Q.png!web" alt=""> </p>
<p>一般来说使用 <code>Streams API</code> 比起循环和 <code>if 语句</code>组合来得更加直观，例如：</p>
<p><img src="http://img0.tuicool.com/f2eMziQ.png!web" alt=""> </p>
<p><code>IntelliJ IDEA</code> 会建议这样的写法进行重构：</p>
<p><img src="http://img2.tuicool.com/QjuQFjI.png!web" alt=""> </p>
<p>我做过的性能测试显示这种重构带来的结果比较奇怪，难以预测，有时候好，有时候坏，有时候没区别。一如既往的，如果你的应用对性能问题非常在意，请认真的进行衡量。</p>
<h3 id="遍历数组时请用-for-循环"><a href="#遍历数组时请用-for-循环" class="headerlink" title="遍历数组时请用 for 循环"></a>遍历数组时请用 for 循环</h3><p>然后，使用 <code>Java 8</code> 并不意味着你一定要使用<code>流 API</code> 以及<code>集合的新方法</code>。<code>IntelliJ IDEA</code> 会建议一些做法改用流的方式重构，但你不一定非得接受 (记住 <a href="https://www.jetbrains.com/help/idea/2016.2/suppressing-inspections.html" target="_blank" rel="external">inspections can be suppressed</a> 或者  <a href="https://www.jetbrains.com/help/idea/2016.2/disabling-and-enabling-inspections.html" target="_blank" rel="external">turned off</a> ). </p>
<p>特别是对一个原始类型的小数组时，使用 <code>for 循环</code>的性能是最好的，而且代码更具可读性（至少对 <code>Streams API</code> 的新手来说是这样）：</p>
<p><img src="http://img2.tuicool.com/Zv6F7zi.png!web" alt=""> </p>
<p>任何的技巧和提示都不是一成不变的，你应该自己决定哪里需要使用 <code>Streams API</code> ，而哪里还用循环操作。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我每天都在发现一些新的东西，有时候我的偏好会有所变化。例如我过去会讨厌方法的引用。非常期待倾听你的建议。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-8-最佳技巧&quot;&gt;&lt;a href=&quot;#Java-8-最佳技巧&quot; class=&quot;headerlink&quot; title=&quot;Java 8 最佳技巧&quot;&gt;&lt;/a&gt;Java 8 最佳技巧&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;翻译文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在过去的几年中，我一直使用&lt;code&gt;Java 8&lt;/code&gt; 进行了很多的编码工作，用于开发 &lt;a href=&quot;http://trishagee.github.io/presentation/java8_in_anger/&quot;&gt;新应用&lt;/a&gt; 和 &lt;a href=&quot;http://trishagee.github.io/presentation/refactoring_to_java_8/&quot;&gt;迁移遗留应用&lt;/a&gt; ，我觉得是时候写一些有用的”最佳实践”。我个人不喜欢”最佳实践”这个术语，因为它意味着“一刀切”的解决方案，当然编码工作是不会这样的–这是因为我们开发人员会想出适合我们的方案。但我发现我对&lt;code&gt;Java8&lt;/code&gt;特别的喜欢，它让我的生活更轻松一点，所以我想就此话题展开讨论。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 8" scheme="https://muyinchen.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>redis-cli中那些或许我们还不知道的一些实用小功能</title>
    <link href="https://muyinchen.github.io/2016/12/12/redis-cli%E4%B8%AD%E9%82%A3%E4%BA%9B%E6%88%96%E8%AE%B8%E6%88%91%E4%BB%AC%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    <id>https://muyinchen.github.io/2016/12/12/redis-cli中那些或许我们还不知道的一些实用小功能/</id>
    <published>2016-12-12T12:01:34.331Z</published>
    <updated>2016-12-12T12:01:14.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis-cli中那些或许我们还不知道的一些实用小功能"><a href="#redis-cli中那些或许我们还不知道的一些实用小功能" class="headerlink" title="redis-cli中那些或许我们还不知道的一些实用小功能"></a>redis-cli中那些或许我们还不知道的一些实用小功能</h1><p>玩过<code>redis</code>的朋友都知道，<code>redis</code>中有一个叫做<code>redis-cli</code>的小工具，我们可以利用它在<code>test</code>和<code>develop</code>环境下进行高效的模拟测试，然而在现实环境中，我们只知道直接键入<code>redis-cli</code>启动命令的交互式，而这个对<code>redis-cli</code>来说绝对是九牛一毛，下面我逐一给大家演示下。<br> <a id="more"></a></p>
<h3 id="一：非REPL-Read-Eval-Print-Loop-模式"><a href="#一：非REPL-Read-Eval-Print-Loop-模式" class="headerlink" title="一：非REPL (Read Eval Print Loop) 模式"></a>一：非REPL (Read Eval Print Loop) 模式</h3><p>通常我们都是使用REPL模式，就是连接上端口之后，发一条<code>request</code>再等待<code>response</code>这样一个<code>loop</code>的形式，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216</span></div><div class="line">192.168.1.216:6379&gt;  <span class="built_in">set</span> username jack</div><div class="line">OK</div><div class="line">192.168.1.216:6379&gt;  <span class="built_in">set</span> password 12345</div><div class="line">OK</div><div class="line">192.168.1.216:6379&gt;</div></pre></td></tr></table></figure>
<p>其实我还可以直接在命令行中使用<code>redis-cli</code>再配合各种附加参数，效果和上面图示是一模一样的，比如下面这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 set username jack</span></div><div class="line">OK</div><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 set password 12345</span></div><div class="line">OK</div><div class="line">[root@localhost Desktop]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>看到没有，这样也是可以的，是不是有点意思哈~~~</p>
<h3 id="二：从本地文件中执行命令导入"><a href="#二：从本地文件中执行命令导入" class="headerlink" title="二：从本地文件中执行命令导入"></a>二：从本地文件中执行命令导入</h3><p>乍一看还是挺酷的，就是可以把本地文件中的一组<code>redis</code>命令直接导入到<code>redis-cli</code>中执行，这样也就免去了一行一行的去键入了，对不对，工作量可以大大的减轻，比如下面这样：</p>
<ol>
<li><p>首先找一个目录，这里就选择<code>/usr/</code>， 下面新建一个<code>txt文件</code>，命令还是非常的简单，执行两个<code>set</code>操作。</p>
<p><img src="http://img1.tuicool.com/qUBbQre.png!web" alt=""> </p>
</li>
</ol>
<p>然后我们用 <code>&lt; 命令</code>导入就可以了，这里<code>126</code>的ip是本地局域网内的一台虚拟机，是不是有点像<code>pipeline</code>管道操作，牛逼吧~~~ 如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 &lt; /usr/1.txt</span></div><div class="line">OK</div><div class="line">OK</div><div class="line">[root@localhost Desktop]<span class="comment">#</span></div></pre></td></tr></table></figure>
<h3 id="三：对指定redis命令重复调用"><a href="#三：对指定redis命令重复调用" class="headerlink" title="三：对指定redis命令重复调用"></a>三：对指定<code>redis</code>命令重复调用</h3><p>对指定的<code>redis</code>命令进行重复调用，乍一看也没什么用处，但是如果你调用<code>info</code>命令会是咋样的呢？？？ 你肯定会想到，我操，监控对不对？？？好吧，猜对了，命令格式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli -r &lt;count&gt; and -i &lt;delay&gt; <span class="built_in">command</span></div></pre></td></tr></table></figure>
<p>其中<code>-r</code> 是<code>repeat</code>的次数，<code>-i</code>是<code>delay</code>的<code>sencond</code>的秒数，那接下来我演示一下啊，调用<code>info</code>命令10次，每次延迟<code>1s</code>，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 -r 10 -i 1 INFO</span></div><div class="line"><span class="comment"># Server</span></div><div class="line">redis_version:3.2.4</div><div class="line">redis_git_sha1:00000000</div><div class="line">redis_git_dirty:0</div><div class="line">redis_build_id:<span class="built_in">fc</span>9ad9a14d3a0fb5</div><div class="line">redis_mode:standalone</div><div class="line">os:Linux 3.10.0-327.el7.x86_64 x86_64</div><div class="line">arch_bits:64</div><div class="line">multiplexing_api:epoll</div><div class="line">gcc_version:4.8.5</div><div class="line">process_id:6171</div><div class="line">run_id:8d1d5cffbf81e31c6c6e0bd144186e9df9fea482</div><div class="line">tcp_port:6379</div><div class="line">uptime_in_seconds:3536932</div><div class="line">uptime_in_days:40</div><div class="line">hz:10</div><div class="line">lru_clock:5049094</div><div class="line">executable:/etc/redis/redis-server</div><div class="line">config_file:/etc/redis/6379.conf</div><div class="line"></div><div class="line"><span class="comment"># Clients</span></div><div class="line">connected_clients:7</div><div class="line">client_longest_output_list:0</div><div class="line">client_biggest_input_buf:0</div><div class="line">blocked_clients:0</div><div class="line"></div><div class="line"><span class="comment"># Memory</span></div><div class="line">used_memory:1295512</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_rss:10395648</div><div class="line">used_memory_rss_human:9.91M</div><div class="line">used_memory_peak:35199336</div><div class="line">used_memory_peak_human:33.57M</div><div class="line">total_system_memory:2099109888</div><div class="line">total_system_memory_human:1.95G</div><div class="line">used_memory_lua:37888</div><div class="line">used_memory_lua_human:37.00K</div><div class="line">maxmemory:0</div><div class="line">maxmemory_human:0B</div><div class="line">maxmemory_policy:noeviction</div><div class="line">mem_fragmentation_ratio:8.02</div><div class="line">mem_allocator:jemalloc-4.0.3</div><div class="line"></div><div class="line"><span class="comment"># Persistence</span></div><div class="line">loading:0</div><div class="line">rdb_changes_since_last_save:0</div><div class="line">rdb_bgsave_in_progress:0</div><div class="line">rdb_last_save_time:1481443658</div><div class="line">rdb_last_bgsave_status:ok</div><div class="line">rdb_last_bgsave_time_sec:0</div><div class="line">rdb_current_bgsave_time_sec:-1</div><div class="line">aof_enabled:0</div><div class="line">aof_rewrite_in_progress:0</div><div class="line">aof_rewrite_scheduled:0</div><div class="line">aof_last_rewrite_time_sec:-1</div><div class="line">aof_current_rewrite_time_sec:-1</div><div class="line">aof_last_bgrewrite_status:ok</div><div class="line">aof_last_write_status:ok</div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以看到，命令一下子就刷出来了很多，有点眼花缭乱，一般来说我只关注的是<code>used_memory_human</code>字段，也就仅仅需要知道当然redis占用了多少内存就完事了，所以这里我需要<code>grep</code>一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 -r 10 -i 1 INFO | grep used_memory_human</span></div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">[root@localhost Desktop]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>可以清楚的看到，当前<code>memory_human</code>占用<code>1.24M</code>对吧。。。是不是有一种监控的效果呢？</p>
<h3 id="四：-stat完整版监控"><a href="#四：-stat完整版监控" class="headerlink" title="四：--stat完整版监控"></a>四：<code>--stat</code>完整版监控</h3><p>其实上面的这个监控还仅仅算是一个极简的版本，可能不能满足有些朋友的需求，比如你就看不到当前的<code>redis</code>中有多少的<code>keys</code>,有多少的<code>clients</code>，有多少被<code>blocked</code>，有多少<code>requests</code>等等信息，如果这些都有了，是不是有点像<code>mongodb</code>中的<code>mongostats</code>呢？哈哈，下面我就迫不及待的给大家来演示一下吧，非常的简单。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 --stat</span></div><div class="line">------- data ------ --------------------- load -------------------- - child -</div><div class="line">keys       mem      clients blocked requests            connections          </div><div class="line">27         1.24M    7       0       1198768 (+0)        2206        </div><div class="line">27         1.24M    7       0       1198769 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198770 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198771 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198772 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198773 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198774 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198775 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198776 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198777 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198778 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198779 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198780 (+1)        2206        </div><div class="line">27         1.27M    7       0       1198782 (+2)        2206        </div><div class="line">27         1.24M    7       0       1198783 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198784 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198785 (+1)        2206</div></pre></td></tr></table></figure>
<p>看到没有，是不是非常的牛逼，一目了然。</p>
<p>转<a href="http://www.cnblogs.com/huangxincheng/p/6159890.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/huangxincheng/p/6159890.html?utm_source=tuicool&amp;utm_medium=referral</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis-cli中那些或许我们还不知道的一些实用小功能&quot;&gt;&lt;a href=&quot;#redis-cli中那些或许我们还不知道的一些实用小功能&quot; class=&quot;headerlink&quot; title=&quot;redis-cli中那些或许我们还不知道的一些实用小功能&quot;&gt;&lt;/a&gt;redis-cli中那些或许我们还不知道的一些实用小功能&lt;/h1&gt;&lt;p&gt;玩过&lt;code&gt;redis&lt;/code&gt;的朋友都知道，&lt;code&gt;redis&lt;/code&gt;中有一个叫做&lt;code&gt;redis-cli&lt;/code&gt;的小工具，我们可以利用它在&lt;code&gt;test&lt;/code&gt;和&lt;code&gt;develop&lt;/code&gt;环境下进行高效的模拟测试，然而在现实环境中，我们只知道直接键入&lt;code&gt;redis-cli&lt;/code&gt;启动命令的交互式，而这个对&lt;code&gt;redis-cli&lt;/code&gt;来说绝对是九牛一毛，下面我逐一给大家演示下。&lt;br&gt;
    
    </summary>
    
      <category term="redis" scheme="https://muyinchen.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://muyinchen.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 商品详情页面的实现 二十一</title>
    <link href="https://muyinchen.github.io/2016/12/10/Migo%E5%95%86%E5%9F%8E2.0%20%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0%20%E4%BA%8C%E5%8D%81%E4%B8%80/"/>
    <id>https://muyinchen.github.io/2016/12/10/Migo商城2.0 商品详情页面的实现 二十一/</id>
    <published>2016-12-09T17:13:58.256Z</published>
    <updated>2016-12-09T17:18:36.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-商品详情页面的实现-二十一"><a href="#Migo商城2-0-商品详情页面的实现-二十一" class="headerlink" title="Migo商城2.0 商品详情页面的实现 二十一"></a>Migo商城2.0 商品详情页面的实现 二十一</h2><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>正常来说，这块是可以单独拿出来做一个系统，然后进行页面静态化，提高响应速度，这里就不做那么麻烦了，直接找后台管理系统这里对外提供web服务，页面静态化以后有时间再做，反正也没多少技术含量<br><a id="more"></a><br>我们打开一个商品的链接，大概是如下的形式：</p>
<p><a href="http://www.taotao.com/item/%7bitemId%7d.html" target="_blank" rel="external">http://www.migo.com/item/{itemId}.html</a></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_210508.png" alt=""></p>
<p>从上图应该就可以看到jd商品详情页面应该是一个单独的工程，后面直接跟了商品的id，好了，分析完毕，开搞代码：</p>
<p>如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_210925.png" alt=""></p>
<h3 id="通过商品id查询商品，返回数据加入modelAndView中"><a href="#通过商品id查询商品，返回数据加入modelAndView中" class="headerlink" title="通过商品id查询商品，返回数据加入modelAndView中"></a>通过商品<code>id</code>查询商品，返回数据加入<code>modelAndView</code>中</h3><h4 id="portal系统中导入POJO"><a href="#portal系统中导入POJO" class="headerlink" title="portal系统中导入POJO"></a><code>portal</code>系统中导入<code>POJO</code></h4><p>注意点如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_213301.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.pojo;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span>  </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String sellPoint;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long price;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer num;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String barcode;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String image;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long cid;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer status;</div><div class="line">    <span class="keyword">private</span> Date created;</div><div class="line">    <span class="keyword">private</span> Date updated;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] getImages()&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.split(<span class="keyword">this</span>.getImage(),<span class="string">","</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> created;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreated</span><span class="params">(Date created)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.created = created;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdated</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> updated;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdated</span><span class="params">(Date updated)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.updated = updated;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSellPoint</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sellPoint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSellPoint</span><span class="params">(String sellPoint)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sellPoint = sellPoint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Long price)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.num = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBarcode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> barcode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBarcode</span><span class="params">(String barcode)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.barcode = barcode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.image = image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(Long cid)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cid = cid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Item [id="</span> + id + <span class="string">", title="</span> + title + <span class="string">", sellPoint="</span> + sellPoint + <span class="string">", price="</span> + price</div><div class="line">                + <span class="string">", num="</span> + num + <span class="string">", barcode="</span> + barcode + <span class="string">", image="</span> + image + <span class="string">", cid="</span> + cid + <span class="string">", status="</span></div><div class="line">                + status + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller代码："><a href="#controller代码：" class="headerlink" title="controller代码："></a>controller代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.portal.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItem</span><span class="params">(Model model, @PathVariable(value = <span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line">        Item item=<span class="keyword">this</span>.itemService.queryItemByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"item"</span>,item);</div><div class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="service代码："><a href="#service代码：" class="headerlink" title="service代码："></a>service代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.utils.HttpClientUtil;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;MIGO_MANAGE_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String MIGO_MANAGE_URL;</div><div class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">queryItemByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">            <span class="keyword">return</span> JsonUtils.jsonToPojo(doGetJsonData,Item.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="manage系统提供接口服务："><a href="#manage系统提供接口服务：" class="headerlink" title="manage系统提供接口服务："></a><code>manage</code>系统提供接口服务：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller.webs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"webs/item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsItemController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(WebsItemController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">queryByItemId</span><span class="params">(@PathVariable(<span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据itemId查询商品详情 itemId = &#123;&#125;"</span>,itemId);</div><div class="line">            &#125;</div><div class="line">            Item item = <span class="keyword">this</span>.itemService.queryById(itemId);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span>==item)&#123;</div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(item);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"根据itemId查询商品详情出错，服务器傲娇了 itemId = &#123;&#125;"</span>,itemId,e);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_221910.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_222020.png" alt=""></p>
<h3 id="添加商品描述："><a href="#添加商品描述：" class="headerlink" title="添加商品描述："></a>添加商品描述：</h3><p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_223918.png" alt=""></p>
<h4 id="portal工程controller-model加入itemDesc属性"><a href="#portal工程controller-model加入itemDesc属性" class="headerlink" title="portal工程controller model加入itemDesc属性"></a><code>portal</code>工程<code>controller</code> <code>model</code>加入<code>itemDesc</code>属性</h4><p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.portal.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItem</span><span class="params">(Model model, @PathVariable(value = <span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line">        Item item=<span class="keyword">this</span>.itemService.queryItemByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"item"</span>,item);</div><div class="line">        ItemDesc itemDesc=<span class="keyword">this</span>.itemService.queryItemDescByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"itemDesc"</span>,itemDesc);</div><div class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>service</code>实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> ItemDesc <span class="title">queryItemDescByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/desc/"</span>+itemId;</div><div class="line">        String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">        <span class="keyword">return</span> JsonUtils.jsonToPojo(doGetJsonData,ItemDesc.class);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<h4 id="manage系统提供相应接口服务"><a href="#manage系统提供相应接口服务" class="headerlink" title="manage系统提供相应接口服务"></a><code>manage</code>系统提供相应接口服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 根据itemId查询商品描述</div><div class="line">    * <span class="doctag">@param</span> itemId</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/desc/&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemDesc&gt; <span class="title">queryDescByitemId</span><span class="params">(@PathVariable(<span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">               logger.info(<span class="string">"根据itemId查询商品描述 itemId = &#123;&#125;"</span>,itemId);</div><div class="line">           &#125;</div><div class="line">           ItemDesc itemDesc = <span class="keyword">this</span>.itemDescService.queryById(itemId);</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">null</span>==itemDesc) &#123;</div><div class="line">               <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> ResponseEntity.ok(itemDesc);</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"根据itemId查询商品描述出错，服务器傲娇了 itemId = &#123;&#125;"</span>,itemId,e);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_225320.png" alt=""></p>
<h3 id="显示商品规格参数"><a href="#显示商品规格参数" class="headerlink" title="显示商品规格参数"></a>显示商品规格参数</h3><p><code>portal</code>工程<code>controller</code> <code>model</code>加入<code>itemParam</code>属性</p>
<p><code>controller</code>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.portal.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItem</span><span class="params">(Model model, @PathVariable(value = <span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line">        Item item=<span class="keyword">this</span>.itemService.queryItemByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"item"</span>,item);</div><div class="line">        ItemDesc itemDesc=<span class="keyword">this</span>.itemService.queryItemDescByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"itemDesc"</span>,itemDesc);</div><div class="line">        String itemParamItem=<span class="keyword">this</span>.itemService.queryItemParamItemByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"itemParam"</span>,itemParamItem);</div><div class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_223918.png" alt=""></p>
<p>如此图所示，得到<code>itemParam</code>后直接显示，那么需要对得到数据里面参数做页面格式化:</p>
<p>所以<code>service</code>代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItemParamItemByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/paramitem/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">            ItemParamItem itemParamItem = JsonUtils.jsonToPojo(doGetJsonData, ItemParamItem.class);</div><div class="line">            String paramData = itemParamItem.getParamData();</div><div class="line">            ArrayNode arrayNode = (ArrayNode) MAPPER.readTree(paramData);</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            sb.append(<span class="string">"&lt;table cellpadding=\"0\" cellspacing=\"1\" width=\"100%\" border=\"0\" class=\"Ptable\"&gt;&lt;tbody&gt;"</span>);</div><div class="line">            <span class="keyword">for</span> (JsonNode param : arrayNode) &#123;</div><div class="line">                sb.append(<span class="string">"&lt;tr&gt;&lt;th class=\"tdTitle\" colspan=\"2\"&gt;"</span> + param.get(<span class="string">"group"</span>).asText()</div><div class="line">                        + <span class="string">"&lt;/th&gt;&lt;/tr&gt;"</span>);</div><div class="line">                ArrayNode params = (ArrayNode) param.get(<span class="string">"params"</span>);</div><div class="line">                <span class="keyword">for</span> (JsonNode p : params) &#123;</div><div class="line">                    sb.append(<span class="string">"&lt;tr&gt;&lt;td class=\"tdTitle\"&gt;"</span> + p.get(<span class="string">"k"</span>).asText() + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span></div><div class="line">                            + p.get(<span class="string">"v"</span>).asText() + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sb.append(<span class="string">"&lt;/tbody&gt;&lt;/table&gt;"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> sb.toString();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>manage</code>系统提供服务接口：</p>
<p><code>controller</code>代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 根据itemId查询商品规格参数</div><div class="line">     * <span class="doctag">@param</span> itemId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/paramitem/&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemParamItem&gt; <span class="title">queryItemParamItemByitemId</span><span class="params">(</span></span></div><div class="line">            @PathVariable(<span class="string">"itemId"</span>) Long itemId)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据itemId查询商品规格参数 itemId = &#123;&#125;"</span>,itemId);</div><div class="line">            &#125;</div><div class="line">            ItemParamItem itemParamItem = <span class="keyword">this</span>.itemParamItemService.queryByIdse(itemId);</div><div class="line">            <span class="keyword">if</span> (itemParamItem==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemParamItem);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"根据itemId查询商品规格参数出错，服务器傲娇了 itemId = &#123;&#125;"</span>,itemId,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>service</code>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 根据商品id查询商品规格参数数据</div><div class="line">    * <span class="doctag">@param</span> itemId</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> ItemParamItem <span class="title">queryByIdse</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">       ItemParamItem example=<span class="keyword">new</span> ItemParamItem();</div><div class="line">       example.setItemId(itemId);</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.itemParamItemMapper.select(example).get(<span class="number">0</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>测试得到结果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_234711.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_234902.png" alt=""></p>
<p><code>portal</code>和后端<code>manage</code>系统中相应<code>service</code>中加入缓存逻辑：</p>
<h3 id="portal端添加逻辑代码："><a href="#portal端添加逻辑代码：" class="headerlink" title="portal端添加逻辑代码："></a><code>portal</code>端添加逻辑代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.ItemParamItem;</div><div class="line"><span class="keyword">import</span> com.migo.service.JedisClient;</div><div class="line"><span class="keyword">import</span> com.migo.utils.HttpClientUtil;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisClient jedisClient;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_KEY = <span class="string">"MIGO_PORTAL"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer REDIS_TIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;MIGO_MANAGE_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String MIGO_MANAGE_URL;</div><div class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">queryItemByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//添加缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+<span class="string">":ITEM_DETAIL"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            String redisJsonData = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(redisJsonData))&#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(redisJsonData,Item.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//正常业务逻辑</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">            <span class="comment">//将数据写入缓存中</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                jedisClient.set(key,doGetJsonData,REDIS_TIME);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> JsonUtils.jsonToPojo(doGetJsonData,Item.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ItemDesc <span class="title">queryItemDescByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="comment">//添加缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+<span class="string">":ITEM_DESC"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            String redisJsonData = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(redisJsonData))&#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(redisJsonData,ItemDesc.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/desc/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line"></div><div class="line">            <span class="comment">//将数据写入缓存中</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                jedisClient.set(key,doGetJsonData,REDIS_TIME);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> JsonUtils.jsonToPojo(doGetJsonData,ItemDesc.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryItemParamItemByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="comment">//添加缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+<span class="string">":ITEM_PARAM_ITEM"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String redisJsonData = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(redisJsonData))&#123;</div><div class="line">                <span class="keyword">return</span> redisJsonData;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/paramitem/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">            ItemParamItem itemParamItem = JsonUtils.jsonToPojo(doGetJsonData, ItemParamItem.class);</div><div class="line">            String paramData = itemParamItem.getParamData();</div><div class="line">            ArrayNode arrayNode = (ArrayNode) MAPPER.readTree(paramData);</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            sb.append(<span class="string">"&lt;table cellpadding=\"0\" cellspacing=\"1\" width=\"100%\" border=\"0\" class=\"Ptable\"&gt;&lt;tbody&gt;"</span>);</div><div class="line">            <span class="keyword">for</span> (JsonNode param : arrayNode) &#123;</div><div class="line">                sb.append(<span class="string">"&lt;tr&gt;&lt;th class=\"tdTitle\" colspan=\"2\"&gt;"</span> + param.get(<span class="string">"group"</span>).asText()</div><div class="line">                        + <span class="string">"&lt;/th&gt;&lt;/tr&gt;"</span>);</div><div class="line">                ArrayNode params = (ArrayNode) param.get(<span class="string">"params"</span>);</div><div class="line">                <span class="keyword">for</span> (JsonNode p : params) &#123;</div><div class="line">                    sb.append(<span class="string">"&lt;tr&gt;&lt;td class=\"tdTitle\"&gt;"</span> + p.get(<span class="string">"k"</span>).asText() + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span></div><div class="line">                            + p.get(<span class="string">"v"</span>).asText() + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sb.append(<span class="string">"&lt;/tbody&gt;&lt;/table&gt;"</span>);</div><div class="line"></div><div class="line">            <span class="comment">//将数据写入缓存中</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                jedisClient.set(key,sb.toString(),REDIS_TIME);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> sb.toString();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="manage端添加缓存代码："><a href="#manage端添加缓存代码：" class="headerlink" title="manage端添加缓存代码："></a><code>manage</code>端添加缓存代码：</h3><h4 id="ItemService"><a href="#ItemService" class="headerlink" title="ItemService"></a><code>ItemService</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public Item queryByIdse(Long itemId) &#123;</div><div class="line">       String key=REDIS_KEY+&quot;:&quot;+itemId+ITEM_DETAIL_KEY;</div><div class="line">       //添加缓存逻辑</div><div class="line">       try &#123;</div><div class="line">           String jsonData = jedisClient.get(key);</div><div class="line">           if (StringUtils.isNotEmpty(jsonData))&#123;</div><div class="line">               return JsonUtils.jsonToPojo(jsonData,Item.class);</div><div class="line">           &#125;</div><div class="line">       &#125; catch (Exception e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line"></div><div class="line">       Item item = super.queryById(itemId);</div><div class="line"></div><div class="line">       //数据加入缓存</div><div class="line">       try &#123;</div><div class="line">           jedisClient.set(key,JsonUtils.objectToJson(item),REDIS_TIME);</div><div class="line">       &#125; catch (Exception e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">       return item;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="ItemParamItemService"><a href="#ItemParamItemService" class="headerlink" title="ItemParamItemService"></a><code>ItemParamItemService</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 根据商品id查询商品规格参数数据</div><div class="line">     * <span class="doctag">@param</span> itemId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ItemParamItem <span class="title">queryByIdse</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="comment">//添加缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+ITEM_PARAM_KEY;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String s = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(s))&#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(s,ItemParamItem.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        ItemParamItem example=<span class="keyword">new</span> ItemParamItem();</div><div class="line">        example.setItemId(itemId);</div><div class="line"></div><div class="line">        ItemParamItem itemParamItem = <span class="keyword">this</span>.itemParamItemMapper.select(example).get(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">//加入缓存</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jedisClient.set(key,JsonUtils.objectToJson(itemParamItem),REDIS_TIME);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> itemParamItem;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="ItemDescService"><a href="#ItemDescService" class="headerlink" title="ItemDescService"></a><code>ItemDescService</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDescService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemDesc</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;REDIS_KEY&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String REDIS_KEY;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;REDIS_TIME&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> Integer REDIS_TIME;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_DESC_KEY = <span class="string">":ITEM_DESC"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisClient jedisClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ItemDesc <span class="title">queryByIdse</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="comment">//加入缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+ITEM_DESC_KEY;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String jsonData = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(jsonData))&#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(jsonData,ItemDesc.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ItemDesc itemDesc = <span class="keyword">super</span>.queryById(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//数据添加到缓存中</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jedisClient.set(key,JsonUtils.objectToJson(itemDesc),REDIS_TIME);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> itemDesc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161210_010314.png" alt=""></p>
<h3 id="关于两个系统间缓存同步问题会在后面通过消息中间件处理，这里就不添加临时解决方案了"><a href="#关于两个系统间缓存同步问题会在后面通过消息中间件处理，这里就不添加临时解决方案了" class="headerlink" title="关于两个系统间缓存同步问题会在后面通过消息中间件处理，这里就不添加临时解决方案了"></a>关于两个系统间缓存同步问题会在后面通过消息中间件处理，这里就不添加临时解决方案了</h3><p>上面的代码其实还有进一步 的优化方法，这里留给读者思考了，又搞到凌晨1点多了，睡觉！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-商品详情页面的实现-二十一&quot;&gt;&lt;a href=&quot;#Migo商城2-0-商品详情页面的实现-二十一&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 商品详情页面的实现 二十一&quot;&gt;&lt;/a&gt;Migo商城2.0 商品详情页面的实现 二十一&lt;/h2&gt;&lt;h3 id=&quot;分析：&quot;&gt;&lt;a href=&quot;#分析：&quot; class=&quot;headerlink&quot; title=&quot;分析：&quot;&gt;&lt;/a&gt;分析：&lt;/h3&gt;&lt;p&gt;正常来说，这块是可以单独拿出来做一个系统，然后进行页面静态化，提高响应速度，这里就不做那么麻烦了，直接找后台管理系统这里对外提供web服务，页面静态化以后有时间再做，反正也没多少技术含量&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
</feed>
