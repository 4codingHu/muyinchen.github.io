<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muyinchen.github.io/"/>
  <updated>2017-03-22T16:58:48.228Z</updated>
  <id>https://muyinchen.github.io/</id>
  
  <author>
    <name>知秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hsweb的系列学习——hsweb-easy-orm分析  中</title>
    <link href="https://muyinchen.github.io/2017/03/23/hsweb%E7%9A%84%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94hsweb-easy-orm%E5%88%86%E6%9E%90%20%20%E4%B8%AD/"/>
    <id>https://muyinchen.github.io/2017/03/23/hsweb的系列学习——hsweb-easy-orm分析  中/</id>
    <published>2017-03-22T16:59:26.068Z</published>
    <updated>2017-03-22T16:58:48.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hsweb的系列学习——hsweb-easy-orm分析-中"><a href="#hsweb的系列学习——hsweb-easy-orm分析-中" class="headerlink" title="hsweb的系列学习——hsweb-easy-orm分析  中"></a>hsweb的系列学习——hsweb-easy-orm分析  中</h1><p>接上篇<br> <a id="more"></a></p>
<h2 id="三，curd的逻辑"><a href="#三，curd的逻辑" class="headerlink" title="三，curd的逻辑"></a>三，curd的逻辑</h2><p>从sql语句里可以看出，查，删，改，都是伴随着条件进行的，首先对条件进行设计，然后再具体事情具体办</p>
<h4 id="1，设计一个统一的条件类型的支持接口来统一接收"><a href="#1，设计一个统一的条件类型的支持接口来统一接收" class="headerlink" title="1，设计一个统一的条件类型的支持接口来统一接收"></a>1，设计一个统一的条件类型的支持接口来统一接收</h4><h5 id="一个是根据输入条件TermTypeConditionalSupport"><a href="#一个是根据输入条件TermTypeConditionalSupport" class="headerlink" title="一个是根据输入条件TermTypeConditionalSupport:"></a>一个是根据输入条件<code>TermTypeConditionalSupport</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TermTypeConditionalSupport</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Accepter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="function">T <span class="title">accept</span><span class="params">(String column, String termType, Object value)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">SimpleAccepter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="function">T <span class="title">accept</span><span class="params">(String column, Object value)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="另外一个根据实例化的po-bean-TermTypeConditionalFromBeanSupport"><a href="#另外一个根据实例化的po-bean-TermTypeConditionalFromBeanSupport" class="headerlink" title="另外一个根据实例化的po bean TermTypeConditionalFromBeanSupport:"></a>另外一个根据实例化的po bean <code>TermTypeConditionalFromBeanSupport</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtilsBean;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtilsBean;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TermTypeConditionalFromBeanSupport</span> </span>&#123;</div><div class="line">    Logger logger = LoggerFactory.getLogger(<span class="string">"queryForBean"</span>);</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Object <span class="title">getValue</span><span class="params">(String property)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getBean() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        PropertyUtilsBean propertyUtilsBean = BeanUtilsBean.getInstance().getPropertyUtils();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> propertyUtilsBean.getProperty(getBean(), property);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.warn(<span class="string">"get bean property &#123;&#125; error"</span>, property, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="接下来就搞定条件的设置接口-Conditional"><a href="#接下来就搞定条件的设置接口-Conditional" class="headerlink" title="接下来就搞定条件的设置接口:Conditional"></a>接下来就搞定条件的设置接口:<code>Conditional</code></h5><p>对于<code>Java8</code>  <code>Consumer接口</code> 的知识预备，请查看  <a href="https://github.com/muyinchen/woker/blob/master/JAVA8/Predicate%E5%92%8CConsumer%E6%8E%A5%E5%8F%A3%E2%80%93%20Java%208%E4%B8%ADjava.util.function%E5%8C%85%E4%B8%8B%E7%9A%84%E6%8E%A5%E5%8F%A3.md" target="_blank" rel="external">Predicate和Consumer接口– Java 8中java.util.function包下的接口</a></p>
<p>对于嵌套条件的设置，请查看<code>org.hsweb.ezorm.core.NestConditional</code>,</p>
<p>源码最后关于<code>Supplier接口</code>和<code>BiConsumer&lt;T, U&gt;接口</code>,不懂的请看<a href="https://github.com/muyinchen/woker/blob/master/JAVA8/Java%208%E4%B9%8BStream%E7%9A%84%E5%BC%BA%E5%A4%A7%E5%B7%A5%E5%85%B7Collector.md" target="_blank" rel="external">Java 8之Stream的强大工具Collector</a></p>
<p>先把各种条件关键字用方法给设定出来，如，and(),or(),where()，以及最后条件追加，根据条件判断然后再确定追加与否这些情况进行设定等，同样支持直接拼接sql，代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.TermType;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</div><div class="line"><span class="keyword">import</span> java.util.function.BooleanSupplier;</div><div class="line"><span class="keyword">import</span> java.util.function.Consumer;</div><div class="line"><span class="keyword">import</span> java.util.function.Function;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Conditional</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Conditional</span>&gt; <span class="keyword">extends</span> <span class="title">TermTypeConditionalSupport</span> </span>&#123;</div><div class="line">    <span class="function">NestConditional&lt;T&gt; <span class="title">nest</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">NestConditional&lt;T&gt; <span class="title">nest</span><span class="params">(String column, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">NestConditional&lt;T&gt; <span class="title">orNest</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">NestConditional&lt;T&gt; <span class="title">orNest</span><span class="params">(String column, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">and</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">or</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">and</span><span class="params">(Consumer&lt;Conditional&gt; consumer)</span> </span>&#123;</div><div class="line">        consumer.accept(<span class="keyword">this</span>.and());</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">or</span><span class="params">(Consumer&lt;Conditional&gt; consumer)</span> </span>&#123;</div><div class="line">        consumer.accept(<span class="keyword">this</span>.or());</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">and</span><span class="params">(String column, String termType, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">or</span><span class="params">(String column, String termType, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Accepter&lt;T&gt; <span class="title">getAccepter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">where</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> and(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">where</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span>  T <span class="title">where</span><span class="params">(Consumer&lt;Conditional&gt; consumer)</span> </span>&#123;</div><div class="line">        consumer.accept(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">and</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> and(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">is</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">or</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> or(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">like</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.like, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T like$(String column, Object value) &#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> like(column, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.like, StringUtils.concat(value, <span class="string">"%"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T $like(String column, Object value) &#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> like(column, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.like, StringUtils.concat(<span class="string">"%"</span>, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T $like$(String column, Object value) &#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> like(column, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.like, StringUtils.concat(<span class="string">"%"</span>, value, <span class="string">"%"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notLike</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.nlike, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">gt</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.gt, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">lt</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.lt, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">gte</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.gte, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">lte</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.lte, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">in</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.in, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">in</span><span class="params">(String column, Object... values)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.in, values);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">in</span><span class="params">(String column, Collection values)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.in, values);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notIn</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.nin, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">isEmpty</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.empty, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notEmpty</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.nempty, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">isNull</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.isnull, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notNull</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.notnull, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">not</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.not, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">between</span><span class="params">(String column, Object between, Object and)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.btw, Arrays.asList(between, and));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notBetween</span><span class="params">(String column, Object between, Object and)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.nbtw, Arrays.asList(between, and));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">accept</span><span class="params">(String column, String termType, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getAccepter().accept(column, termType, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 直接拼接sql,参数支持预编译</div><div class="line">     * 例如</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;query.sql("name=?","admin")&lt;/li&gt;</div><div class="line">     * &lt;li&gt;query.sql("name=#&#123;name&#125;",&#123;name:"admin"&#125;)&lt;/li&gt;</div><div class="line">     * &lt;li&gt;query.sql("name=#&#123;[0]&#125;",["admin"])&lt;/li&gt;</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql    sql字符串</div><div class="line">     * <span class="doctag">@param</span> params 参数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     */</div><div class="line">    <span class="function">T <span class="title">sql</span><span class="params">(String sql, Object... params)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> &lt;O&gt; <span class="function">T <span class="title">each</span><span class="params">(Collection&lt;O&gt; list, BiConsumer&lt;O, Conditional&lt;T&gt;&gt; consumer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; consumer.accept(o, <span class="keyword">this</span>));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 遍历一个集合，进行条件追加</div><div class="line">     * 例如:&lt;br&gt;</div><div class="line">     * query.or().each("areaId",[1,2,3],(query)-&gt;query::$like$)&lt;br&gt;</div><div class="line">     * 将追加sql&lt;br&gt;</div><div class="line">     * areaId like '%1%' or areaId like '%2%' or areaId like '%3%'</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> column         要追加到的列名</div><div class="line">     * <span class="doctag">@param</span> list           集合</div><div class="line">     * <span class="doctag">@param</span> accepterGetter 追加方式函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Function</div><div class="line">     * <span class="doctag">@see</span> Conditional</div><div class="line">     * <span class="doctag">@see</span> org.hsweb.ezorm.core.TermTypeConditionalSupport.SimpleAccepter</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(String column, Collection list, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepterGetter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; accepterGetter.apply(<span class="keyword">this</span>).accept(column, o));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(String column, String termType, Collection list, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepterGetter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; accepterGetter.apply(<span class="keyword">this</span>).accept(column, termType, o));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 参照 &#123;<span class="doctag">@link</span> Conditional#each(String, Collection, Function)&#125;</div><div class="line">     * 提供了一个valueMapper进行值转换如:</div><div class="line">     * &lt;br&gt;</div><div class="line">     * query.or().each("areaId",[1,2,3],(query)-&gt;query::$like$,(value)-&gt;","+value+",")&lt;br&gt;</div><div class="line">     * 将追加sql&lt;br&gt;</div><div class="line">     * areaId like '%,1,%' or areaId like '%,2,%' or areaId like '%,3,%'</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> column         要追加到的列名</div><div class="line">     * <span class="doctag">@param</span> list           集合</div><div class="line">     * <span class="doctag">@param</span> accepterGetter 追加方式函数</div><div class="line">     * <span class="doctag">@param</span> valueMapper    值转换函数 &#123;<span class="doctag">@link</span> Function&#125;</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Function</div><div class="line">     * <span class="doctag">@see</span> Conditional</div><div class="line">     * <span class="doctag">@see</span> org.hsweb.ezorm.core.TermTypeConditionalSupport.SimpleAccepter</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(String column, Collection list, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepterGetter, Function&lt;Object, Object&gt; valueMapper)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; accepterGetter.apply(<span class="keyword">this</span>).accept(column, valueMapper.apply(o)));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(String column, String termType, Collection list, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepterGetter, Function&lt;Object, Object&gt; valueMapper)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; accepterGetter.apply(<span class="keyword">this</span>).accept(column, termType, valueMapper.apply(o)));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 遍历一个Map,进行条件追加</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> mapParam map参数</div><div class="line">     * <span class="doctag">@param</span> accepter 追加方式函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Function</div><div class="line">     * <span class="doctag">@see</span> Conditional</div><div class="line">     * <span class="doctag">@see</span> org.hsweb.ezorm.core.TermTypeConditionalSupport.SimpleAccepter</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(Map&lt;String, Object&gt; mapParam, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mapParam)</div><div class="line">            mapParam.forEach((k, v) -&gt; accepter.apply(<span class="keyword">this</span>).accept(k, v));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(Map&lt;String, Object&gt; mapParam, String termType, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mapParam)</div><div class="line">            mapParam.forEach((k, v) -&gt; accepter.apply(<span class="keyword">this</span>).accept(k, termType, v));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定一个前置条件,当条件满足的时候,调用回调进行自定义参数&lt;br&gt;</div><div class="line">     * 如: query(age&gt;10,query-&gt;query.gt("age",10))</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> condition 前置条件</div><div class="line">     * <span class="doctag">@param</span> consumer  回调</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">when</span><span class="params">(<span class="keyword">boolean</span> condition, Consumer&lt;Conditional&lt;T&gt;&gt; consumer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (condition) &#123;</div><div class="line">            consumer.accept(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过BooleanSupplier获取条件,例如&lt;br&gt;</div><div class="line">     * query.when(()-&gt;age&gt;10,query-&gt;query.gt("age",10));</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> Conditional#when(boolean, Consumer)</div><div class="line">     * <span class="doctag">@see</span> BooleanSupplier</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">when</span><span class="params">(BooleanSupplier condition, Consumer&lt;Conditional&lt;T&gt;&gt; consumer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> when(condition.getAsBoolean(), consumer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定前置条件,列名,参数值,条件构造函数。当条件满足的时候，执行构造器添加条件.例如&lt;br&gt;</div><div class="line">     * query.when(age&gt;10,"age",10,query-&gt;query::gt);&lt;br&gt;</div><div class="line">     * 等同于&lt;br&gt;</div><div class="line">     * if(age&gt;10)query.gt(age,10);&lt;br&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> condition 前置条件</div><div class="line">     * <span class="doctag">@param</span> column    要查询的列名</div><div class="line">     * <span class="doctag">@param</span> value     参数值</div><div class="line">     * <span class="doctag">@param</span> accepter  条件构造函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">when</span><span class="params">(<span class="keyword">boolean</span> condition, String column, Object value, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (condition) &#123;</div><div class="line">            accepter.apply(<span class="keyword">this</span>).accept(column, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定列名，参数值，条件判断函数，条件构造函数进行条件添加。如&lt;br&gt;</div><div class="line">     * query.when("age",10,value-&gt;value&gt;10,query-&gt;query::gt)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> column    列名</div><div class="line">     * <span class="doctag">@param</span> value     值</div><div class="line">     * <span class="doctag">@param</span> condition 条件判断函数</div><div class="line">     * <span class="doctag">@param</span> accepter  条件构造函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Conditional#when(boolean, String, Object, Function)</div><div class="line">     */</div><div class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">T <span class="title">when</span><span class="params">(String column, V value, Function&lt;V, Boolean&gt; condition, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> when(condition.apply(value), column, value, accepter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 功能与&#123;<span class="doctag">@link</span> Conditional#when(boolean, String, Object, Function)&#125; 类似,可自定义termType 如:&lt;br&gt;</div><div class="line">     * query.when(true,"age","like",10,query-&gt;query::or)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> condition 条件</div><div class="line">     * <span class="doctag">@param</span> column    列名</div><div class="line">     * <span class="doctag">@param</span> termType  条件类型</div><div class="line">     * <span class="doctag">@param</span> value     参数</div><div class="line">     * <span class="doctag">@param</span> accepter  条件构造函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Conditional#when(boolean, String, Object, Function)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">when</span><span class="params">(<span class="keyword">boolean</span> condition, String column, String termType, Object value, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (condition) &#123;</div><div class="line">            accepter.apply(<span class="keyword">this</span>).accept(column, termType, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 功能与&#123;<span class="doctag">@link</span> Conditional#when(String, Object, Function, Function)&#125; 类似,可自定义termType 如:&lt;br&gt;</div><div class="line">     * query.when("age","like",10,value-&gt;value==10,query-&gt;query::or)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> condition 条件</div><div class="line">     * <span class="doctag">@param</span> column    列名</div><div class="line">     * <span class="doctag">@param</span> termType  条件类型</div><div class="line">     * <span class="doctag">@param</span> value     参数</div><div class="line">     * <span class="doctag">@param</span> accepter  条件构造函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Conditional#when(boolean, String, Object, Function)</div><div class="line">     * <span class="doctag">@see</span> TermType</div><div class="line">     */</div><div class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">T <span class="title">when</span><span class="params">(String column, String termType, V value, Function&lt;V, Boolean&gt; condition, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> when(condition.apply(value), column, termType, value, accepter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为之前有设计针对sql的直接封装，那么相应的增加<code>SqlConditionSupport&lt;T&gt;</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.SqlTerm;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlConditionSupport</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Term.Type nowTermType = Term.Type.and;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">addSqlTerm</span><span class="params">(SqlTerm term)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Term.<span class="function">Type <span class="title">getNowTermType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nowTermType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">setOr</span><span class="params">()</span> </span>&#123;</div><div class="line">        nowTermType = Term.Type.or;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">setAnd</span><span class="params">()</span> </span>&#123;</div><div class="line">        nowTermType = Term.Type.and;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">sql</span><span class="params">(String sql, Object... params)</span> </span>&#123;</div><div class="line">        SqlTerm sqlTerm = <span class="keyword">new</span> SqlTerm();</div><div class="line">        sqlTerm.setColumn(sql);</div><div class="line">        sqlTerm.setValue(params);</div><div class="line">        sqlTerm.setType(getNowTermType());</div><div class="line">        <span class="keyword">return</span> addSqlTerm(sqlTerm);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2，对删，改，查的设计与实现"><a href="#2，对删，改，查的设计与实现" class="headerlink" title="2，对删，改，查的设计与实现"></a>2，对删，改，查的设计与实现</h3><h5 id="对改的接口设计Update"><a href="#对改的接口设计Update" class="headerlink" title="对改的接口设计Update:"></a>对改的接口设计<code>Update</code>:</h5><p>具体不需要解释了，英文已经很清晰明白了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.UpdateParam;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Conditional</span>&lt;<span class="title">Update</span>&lt;<span class="title">T</span>&gt;&gt;, <span class="title">TriggerSkipSupport</span>&lt;<span class="title">Update</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">set</span><span class="params">(T data)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">set</span><span class="params">(String property, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">includes</span><span class="params">(String... fields)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">excludes</span><span class="params">(String... fields)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">setParam</span><span class="params">(UpdateParam param)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">exec</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.*;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.SqlTerm;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.UpdateParam;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SQL;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlRender;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-5.</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleUpdate</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ValidatorAndTriggerSupport</span>&lt;<span class="title">Update</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Update</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Update.class);</div><div class="line">    <span class="keyword">private</span> UpdateParam    updateParam;</div><div class="line">    <span class="keyword">private</span> SimpleTable&lt;T&gt; table;</div><div class="line">    <span class="keyword">private</span> SqlExecutor    sqlExecutor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleUpdate</span><span class="params">(SimpleTable&lt;T&gt; table, SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.table = table;</div><div class="line">        <span class="keyword">this</span>.sqlExecutor = sqlExecutor;</div><div class="line">        updateParam = <span class="keyword">new</span> UpdateParam();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">set</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        updateParam.setData(data);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">set</span><span class="params">(String property, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (updateParam.getData() == <span class="keyword">null</span>) updateParam.setData(<span class="keyword">new</span> HashMap&lt;&gt;());</div><div class="line">        <span class="keyword">if</span> (updateParam.getData() <span class="keyword">instanceof</span> Map) &#123;</div><div class="line">            ((Map) updateParam.getData()).put(property, value);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                BeanUtils.setProperty(updateParam.getData(), property, value);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                logger.warn(<span class="string">"property error"</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Update&lt;T&gt; <span class="title">addSqlTerm</span><span class="params">(SqlTerm term)</span> </span>&#123;</div><div class="line">        updateParam.addTerm(term);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">includes</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        updateParam.includes(fields);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">excludes</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        updateParam.excludes(fields);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">and</span><span class="params">(String condition, String termType, Object value)</span> </span>&#123;</div><div class="line">        updateParam.and(condition, termType, value);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">or</span><span class="params">(String condition, String termType, Object value)</span> </span>&#123;</div><div class="line">        updateParam.or(condition, termType, value);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Accepter accepter=<span class="keyword">this</span>::and;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">and</span><span class="params">()</span> </span>&#123;</div><div class="line">        setAnd();</div><div class="line">        accepter = <span class="keyword">this</span>::and;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">or</span><span class="params">()</span> </span>&#123;</div><div class="line">        setOr();</div><div class="line">        accepter = <span class="keyword">this</span>::or;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Accepter <span class="title">getAccepter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accepter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> NestConditional&lt;Update&lt;T&gt;&gt; nest() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleNestConditional&lt;&gt;(<span class="keyword">this</span>, updateParam.nest());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> NestConditional&lt;Update&lt;T&gt;&gt; nest(String column, Object value) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleNestConditional&lt;&gt;(<span class="keyword">this</span>, updateParam.nest(column, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> NestConditional&lt;Update&lt;T&gt;&gt; orNest() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleNestConditional&lt;&gt;(<span class="keyword">this</span>, updateParam.orNest());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> NestConditional&lt;Update&lt;T&gt;&gt; orNest(String column, Object value) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleNestConditional&lt;&gt;(<span class="keyword">this</span>, updateParam.orNest(column, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">setParam</span><span class="params">(UpdateParam param)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.updateParam = param;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> supportBefore = !triggerSkip &amp;&amp; table.getMeta().triggerIsSupport(Trigger.update_before);</div><div class="line">        <span class="keyword">boolean</span> supportDone = !triggerSkip &amp;&amp; table.getMeta().triggerIsSupport(Trigger.update_done);</div><div class="line">        Map&lt;String, Object&gt; context = table.getDatabase().getTriggerContextRoot();</div><div class="line">        <span class="keyword">if</span> (supportBefore || supportDone) &#123;</div><div class="line">            context = table.getDatabase().getTriggerContextRoot();</div><div class="line">            context.put(<span class="string">"table"</span>, table);</div><div class="line">            context.put(<span class="string">"database"</span>, table.getDatabase());</div><div class="line">            context.put(<span class="string">"param"</span>, updateParam);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (supportBefore) &#123;</div><div class="line">            table.getMeta().on(Trigger.update_before, context);</div><div class="line">        &#125;</div><div class="line">        SqlRender&lt;UpdateParam&gt; render = table.getMeta().getDatabaseMetaData().getRenderer(SqlRender.TYPE.UPDATE);</div><div class="line">        SQL sql = render.render(table.getMeta(), updateParam);</div><div class="line">        tryValidate(updateParam.getData(), Validator.Operation.UPDATE);</div><div class="line">        <span class="keyword">int</span> total = sqlExecutor.update(sql);</div><div class="line">        <span class="keyword">if</span> (supportDone) &#123;</div><div class="line">            context.put(<span class="string">"total"</span>, total);</div><div class="line">            table.getMeta().on(Trigger.update_done, context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> total;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">RDBTableMetaData <span class="title">getTableMeta</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> table.getMeta();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="最关键的地方也就在于exec"><a href="#最关键的地方也就在于exec" class="headerlink" title="最关键的地方也就在于exec(),"></a>最关键的地方也就在于<code>exec()</code>,</h6><p>​        <code>boolean supportBefore = !triggerSkip &amp;&amp; table.getMeta().triggerIsSupport(Trigger.update_before);</code></p>
<p>在触发条件不忽略，然后此table的元数据触发条件支持<code>Trigger.update_before</code>,返回true，调用过程如下图:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170322_223008.png" alt=""></p>
<p>同理,<code>supportDone</code>就不再解释了，</p>
<p><code>Map&lt;String, Object&gt; context = table.getDatabase().getTriggerContextRoot();</code>其实就是产生一个<code>map</code>,具体源码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getTriggerContextRoot</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>符合<code>supportBefore || supportDone</code>条件，添加table，database，param信息</p>
<p>当符合<code>supportBefore</code>条件时，<code>table.getMeta().on(Trigger.update_before, context);</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170322_225901.png" alt=""></p>
<p>这里只看到了这一个脚本实现类，就顺带贴下</p>
<p>对后面代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SqlRender&lt;UpdateParam&gt; render = table.getMeta().getDatabaseMetaData().getRenderer(SqlRender.TYPE.UPDATE);</div><div class="line">SQL sql = render.render(table.getMeta(), updateParam);</div><div class="line">tryValidate(updateParam.getData(), Validator.Operation.UPDATE);</div><div class="line"><span class="keyword">int</span> total = sqlExecutor.update(sql);</div></pre></td></tr></table></figure>
<p>下图<code>RDBDatabaseMetaData</code> 下面被掩盖的标记代码为<code>public abstract SqlRender getRenderer(SqlRender.TYPE type);</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170322_231154.png" alt=""></p>
<h6 id="AbstractRDBDatabaseMetaData对RDBDatabaseMetaData进行抽象实现"><a href="#AbstractRDBDatabaseMetaData对RDBDatabaseMetaData进行抽象实现" class="headerlink" title="AbstractRDBDatabaseMetaData对RDBDatabaseMetaData进行抽象实现"></a><code>AbstractRDBDatabaseMetaData</code>对<code>RDBDatabaseMetaData</code>进行抽象实现</h6><p>在<code>getRenderer()</code>内得到相应数据库类型的render，在<code>init()</code>放入相应数据库类型的render</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBDatabaseMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlRender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.simple.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRDBDatabaseMetaData</span> <span class="keyword">extends</span> <span class="title">RDBDatabaseMetaData</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Map&lt;SqlRender.TYPE, SqlRender&gt; renderMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Dialect dialect;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractRDBDatabaseMetaData</span><span class="params">(Dialect dialect)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dialect = dialect;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        putRenderer(SqlRender.TYPE.DELETE, <span class="keyword">new</span> SimpleDeleteSqlRender(getDialect()));</div><div class="line">        putRenderer(SqlRender.TYPE.INSERT, <span class="keyword">new</span> SimpleInsertSqlRender());</div><div class="line">        putRenderer(SqlRender.TYPE.SELECT, <span class="keyword">new</span> SimpleSelectSqlRender(getDialect()));</div><div class="line">        putRenderer(SqlRender.TYPE.UPDATE, <span class="keyword">new</span> SimpleUpdateSqlRender(getDialect()));</div><div class="line">        putRenderer(SqlRender.TYPE.SELECT_TOTAL, <span class="keyword">new</span> SimpleSelectTotalSqlRender(getDialect()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Dialect <span class="title">getDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dialect;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlRender <span class="title">getRenderer</span><span class="params">(SqlRender.TYPE type)</span> </span>&#123;</div><div class="line">        SqlRender render = renderMap.get(type);</div><div class="line">        <span class="keyword">if</span> (render == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(type + <span class="string">" is not support"</span>);</div><div class="line">        <span class="keyword">return</span> render;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putRenderer</span><span class="params">(SqlRender.TYPE type, SqlRender sqlRender)</span> </span>&#123;</div><div class="line">        renderMap.put(type, sqlRender);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="最后再看具体实现类，此处拿MysqlRDBDatabaseMetaData为例"><a href="#最后再看具体实现类，此处拿MysqlRDBDatabaseMetaData为例" class="headerlink" title="最后再看具体实现类，此处拿MysqlRDBDatabaseMetaData为例"></a>最后再看具体实现类，此处拿<code>MysqlRDBDatabaseMetaData</code>为例</h6><p>在此<code>MysqlRDBDatabaseMetaData</code>实例进行初始化时，设置MysqL数据库方言并会调用<code>init()</code>方法放入MysqL数据库类型的render</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlRender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.mysql.MysqlDeleteSqlRender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.mysql.MysqlMetaAlterRender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.mysql.MysqlMetaCreateRender;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlRDBDatabaseMetaData</span> <span class="keyword">extends</span> <span class="title">AbstractRDBDatabaseMetaData</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_NAME = <span class="string">"mysql"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.init();</div><div class="line">        renderMap.put(SqlRender.TYPE.META_CREATE, <span class="keyword">new</span> MysqlMetaCreateRender());</div><div class="line">        renderMap.put(SqlRender.TYPE.DELETE, <span class="keyword">new</span> MysqlDeleteSqlRender(getDialect()));</div><div class="line">        renderMap.put(SqlRender.TYPE.META_ALTER, <span class="keyword">new</span> MysqlMetaAlterRender(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MysqlRDBDatabaseMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Dialect.MYSQL);</div><div class="line">        name = DEFAULT_NAME;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="对update-sql语句的组合渲染："><a href="#对update-sql语句的组合渲染：" class="headerlink" title="对update sql语句的组合渲染："></a>对<code>update sql</code>语句的组合渲染：</h6><p>首先设计一个其他类型语句共有的语句特性，比如指定了exclude 字段,没有指定include  字段</p>
<h6 id="CommonSqlRender-具体逻辑如下，不仔细解释了"><a href="#CommonSqlRender-具体逻辑如下，不仔细解释了" class="headerlink" title="CommonSqlRender:具体逻辑如下，不仔细解释了"></a><code>CommonSqlRender</code>:具体逻辑如下，不仔细解释了</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.support.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.Correlation;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Param;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlRender;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonSqlRender</span>&lt;<span class="title">R</span> <span class="keyword">extends</span> <span class="title">Param</span>&gt; <span class="keyword">implements</span> <span class="title">SqlRender</span>&lt;<span class="title">R</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationColumn</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String            tableName;</div><div class="line">        <span class="keyword">private</span> RDBColumnMetaData RDBColumnMetaData;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OperationColumn</span><span class="params">(String tableName, RDBColumnMetaData RDBColumnMetaData)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.tableName = tableName;</div><div class="line">            <span class="keyword">this</span>.RDBColumnMetaData = RDBColumnMetaData;</div><div class="line">            <span class="keyword">if</span> (tableName == <span class="keyword">null</span>) <span class="keyword">this</span>.tableName = RDBColumnMetaData.getTableMetaData().getAlias();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getTableName</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> tableName;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> RDBColumnMetaData <span class="title">getRDBColumnMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> RDBColumnMetaData;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;OperationColumn&gt; <span class="title">parseOperationField</span><span class="params">(RDBTableMetaData metaData, R param)</span> </span>&#123;</div><div class="line">        Set&lt;String&gt; includes = param.getIncludes(),</div><div class="line">                excludes = param.getExcludes();</div><div class="line">        <span class="keyword">boolean</span> includesIsEmpty = includes.isEmpty(),</div><div class="line">                excludesIsEmpty = excludes.isEmpty();</div><div class="line">        List&lt;OperationColumn&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> ((includesIsEmpty &amp;&amp; excludesIsEmpty)) &#123;</div><div class="line">            metaData.getColumns().forEach(column -&gt; tmp.add(<span class="keyword">new</span> OperationColumn(<span class="keyword">null</span>, column)));</div><div class="line">            <span class="keyword">return</span> tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//指定了exclude,没有指定include</span></div><div class="line">        <span class="keyword">if</span> (includesIsEmpty &amp;&amp; !excludesIsEmpty) &#123;</div><div class="line">            <span class="keyword">boolean</span> hasSelf = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (String exclude : excludes) &#123;</div><div class="line">                <span class="keyword">if</span> (exclude.contains(<span class="string">"."</span>)) &#123;</div><div class="line">                  <span class="comment">//表.*</span></div><div class="line">                    includes.add(exclude.split(<span class="string">"[.]"</span>)[<span class="number">0</span>] + <span class="string">".*"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">//不包含表. 就设置下面的*就好</span></div><div class="line">                    hasSelf = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (hasSelf) includes.add(<span class="string">"*"</span>);</div><div class="line">            includesIsEmpty = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!includesIsEmpty) &#123;</div><div class="line">            includes.forEach(include -&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (excludes.contains(include)) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"*"</span>.equals(include)) &#123;</div><div class="line">                    metaData.getColumns().forEach(column -&gt; &#123;</div><div class="line">                        <span class="keyword">if</span> (excludes.contains(column.getAlias()) || excludes.contains(column.getName()))</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        tmp.add(<span class="keyword">new</span> OperationColumn(<span class="keyword">null</span>, column));</div><div class="line">                    &#125;);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (include.contains(<span class="string">"."</span>)) &#123;</div><div class="line">                    String[] columnInfo = include.split(<span class="string">"[.]"</span>);</div><div class="line">                    RDBTableMetaData table = metaData.getDatabaseMetaData().getTableMetaData(columnInfo[<span class="number">0</span>]);</div><div class="line">                    String tname = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == table) &#123;</div><div class="line">                        Correlation correlation = metaData.getCorrelation(columnInfo[<span class="number">0</span>]);</div><div class="line">                        <span class="keyword">if</span> (correlation != <span class="keyword">null</span>) &#123;</div><div class="line">                            table = metaData.getDatabaseMetaData().getTableMetaData(correlation.getTargetTable());</div><div class="line">                            tname = correlation.getAlias();</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        tname = table.getAlias();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == table) <span class="keyword">return</span>;</div><div class="line">                    <span class="keyword">if</span> (columnInfo[<span class="number">1</span>].equals(<span class="string">"*"</span>)) &#123;</div><div class="line">                        String finalName = tname;</div><div class="line">                        table.getColumns().forEach(column -&gt; &#123;</div><div class="line">                            <span class="keyword">if</span> (excludes.contains(column.getFullAliasName()) || excludes.contains(column.getFullName())</div><div class="line">                                    || excludes.contains(finalName + <span class="string">"."</span> + column.getName())</div><div class="line">                                    || excludes.contains(finalName + <span class="string">"."</span> + column.getAlias()))</div><div class="line">                                <span class="keyword">return</span>;</div><div class="line">                            tmp.add(<span class="keyword">new</span> OperationColumn(finalName, column));</div><div class="line">                        &#125;);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        RDBColumnMetaData column = metaData.findColumn(include);</div><div class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != column) &#123;</div><div class="line">                            <span class="keyword">if</span> (excludes.contains(column.getFullAliasName()) || excludes.contains(column.getFullName()))</div><div class="line">                                <span class="keyword">return</span>;</div><div class="line">                            tmp.add(<span class="keyword">new</span> OperationColumn(tname, column));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    RDBColumnMetaData column = metaData.findColumn(include);</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != column) &#123;</div><div class="line">                        <span class="keyword">if</span> (excludes.contains(column.getAlias()) || excludes.contains(column.getName()))</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        tmp.add(<span class="keyword">new</span> OperationColumn(column.getTableMetaData().getAlias(), column));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (tmp.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"未找到任何查询字段!"</span>);</div><div class="line">        <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="拼接sql准备"><a href="#拼接sql准备" class="headerlink" title="拼接sql准备:"></a>拼接sql准备:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 浩 on 2015-11-07 0007.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlAppender</span> <span class="keyword">extends</span> <span class="title">LinkedList</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlAppender</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlAppender</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">        add(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlAppender <span class="title">add</span><span class="params">(Object... str)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Object s : str) &#123;</div><div class="line">            <span class="keyword">this</span>.add(String.valueOf(s));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlAppender <span class="title">addEdSpc</span><span class="params">(Object... str)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Object s : str) &#123;</div><div class="line">            <span class="keyword">this</span>.add(String.valueOf(s));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.add(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 接入sql语句，并自动加入空格</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> str</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> SqlAppender <span class="title">addSpc</span><span class="params">(Object... str)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Object s : str) &#123;</div><div class="line">            <span class="keyword">this</span>.add(s);</div><div class="line">            <span class="keyword">this</span>.add(<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">this</span>.forEach(builder::append);</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="where语句的共同部分进行抽象"><a href="#where语句的共同部分进行抽象" class="headerlink" title="where语句的共同部分进行抽象"></a>where语句的共同部分进行抽象</h5><h6 id="首先是Dialect的设定"><a href="#首先是Dialect的设定" class="headerlink" title="首先是Dialect的设定:"></a>首先是<code>Dialect</code>的设定:</h6><p>接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.TableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlAppender;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hsweb.ezorm.rdb.executor.AbstractJdbcSqlExecutor.APPEND_PATTERN;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hsweb.ezorm.rdb.executor.AbstractJdbcSqlExecutor.PREPARED_PATTERN;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">TermTypeMapper</span> </span>&#123;</div><div class="line">        <span class="function">SqlAppender <span class="title">accept</span><span class="params">(String wherePrefix, Term term, RDBColumnMetaData column, String tableAlias)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">static</span> TermTypeMapper <span class="title">sql</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (wherePrefix, term, column, tableAlias) -&gt; <span class="keyword">new</span> SqlAppender(sql);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">static</span> TermTypeMapper <span class="title">sql</span><span class="params">(String sql, Object param)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> (wherePrefix, term, column, tableAlias) -&gt; &#123;</div><div class="line">                Object finalParam = param;</div><div class="line">                String template = sql;</div><div class="line">                <span class="comment">//?方式预编译</span></div><div class="line">                <span class="keyword">if</span> (template.contains(<span class="string">"?"</span>)) &#123;</div><div class="line">                    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">while</span> (template.contains(<span class="string">"?"</span>)) &#123;</div><div class="line">                        template = template.replaceFirst(<span class="string">"\\?"</span>, <span class="string">"#\\&#123;["</span> + index++ + <span class="string">"]&#125;"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (finalParam <span class="keyword">instanceof</span> Object[]) &#123;</div><div class="line">                    Object[] array = ((Object[]) finalParam);</div><div class="line">                    <span class="keyword">if</span> (array.length == <span class="number">1</span>) &#123;</div><div class="line">                        finalParam = array[<span class="number">0</span>];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                Matcher prepared_matcher = PREPARED_PATTERN.matcher(template);</div><div class="line">                Matcher append_matcher = APPEND_PATTERN.matcher(template);</div><div class="line">                term.setValue(finalParam);</div><div class="line">                <span class="keyword">while</span> (append_matcher.find()) &#123;</div><div class="line">                    String group = append_matcher.group();</div><div class="line">                    String reg = StringUtils.concat(<span class="string">"\\$\\&#123;"</span>, group.replace(<span class="string">"$"</span>, <span class="string">"\\$"</span>).replace(<span class="string">"["</span>, <span class="string">"\\["</span>).replace(<span class="string">"]"</span>, <span class="string">"\\]"</span>), <span class="string">"&#125;"</span>);</div><div class="line">                    String target = StringUtils.concat(<span class="string">"\\$\\&#123;"</span>, wherePrefix, group.startsWith(<span class="string">"["</span>) ? <span class="string">".value"</span> : <span class="string">".value."</span>, group, <span class="string">"&#125;"</span>);</div><div class="line">                    template = template.replaceFirst(reg, target);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (prepared_matcher.find()) &#123;</div><div class="line">                    String group = prepared_matcher.group();</div><div class="line">                    template = template.replaceFirst(StringUtils.concat(<span class="string">"#\\&#123;"</span>, group.replace(<span class="string">"$"</span>, <span class="string">"\\$"</span>).replace(<span class="string">"["</span>, <span class="string">"\\["</span>).replace(<span class="string">"]"</span>, <span class="string">"\\]"</span>), <span class="string">"&#125;"</span>),</div><div class="line">                            StringUtils.concat(<span class="string">"#\\&#123;"</span>, wherePrefix, group.startsWith(<span class="string">"["</span>) ? <span class="string">".value"</span> : <span class="string">".value."</span>, group, <span class="string">"&#125;"</span>));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SqlAppender(template);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">DataTypeMapper</span> </span>&#123;</div><div class="line">        <span class="function">String <span class="title">getDataType</span><span class="params">(RDBColumnMetaData columnMetaData)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ColumnMapper</span> </span>&#123;</div><div class="line">        <span class="function">String <span class="title">getColumn</span><span class="params">(RDBColumnMetaData columnMetaData)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTermTypeMapper</span><span class="params">(String termType, TermTypeMapper mapper)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDataTypeMapper</span><span class="params">(JDBCType jdbcType, DataTypeMapper mapper)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColumnMapper</span><span class="params">(String columnType, ColumnMapper mapper)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getQuoteStart</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getQuoteEnd</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">SqlAppender <span class="title">buildCondition</span><span class="params">(String wherePrefix, Term term, RDBColumnMetaData RDBColumnMetaData, String tableAlias)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">buildDataType</span><span class="params">(RDBColumnMetaData columnMetaData)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">doPaging</span><span class="params">(String sql, <span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">columnToUpperCase</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">buildColumnName</span><span class="params">(String tableName, String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isNullOrEmpty(tableName)) &#123;</div><div class="line">            <span class="keyword">return</span> StringUtils.concat(getQuoteStart(), columnToUpperCase() ? columnName.toUpperCase() : columnName, getQuoteEnd());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> StringUtils.concat(tableName, <span class="string">"."</span>, getQuoteStart(), columnToUpperCase() ? columnName.toUpperCase() : columnName, getQuoteEnd());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">TableMetaParser <span class="title">getDefaultParser</span><span class="params">(SqlExecutor sqlExecutor)</span></span>;</div><div class="line"></div><div class="line">    Dialect MYSQL  = <span class="keyword">new</span> MysqlDialect();</div><div class="line">    Dialect ORACLE = <span class="keyword">new</span> OracleDialect();</div><div class="line">    Dialect H2     = <span class="keyword">new</span> H2Dialect();</div><div class="line"></div><div class="line">    Dialect MSSQL = <span class="keyword">new</span> MSSQLDialect();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="默认实现DefaultDialect"><a href="#默认实现DefaultDialect" class="headerlink" title="默认实现DefaultDialect"></a>默认实现<code>DefaultDialect</code></h6><p>其中<code>TableMetaParser</code>默认使用<code>OracleTableMetaParser</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.SqlTerm;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.TermType;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.OracleTableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.TableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlAppender;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDialect</span> <span class="keyword">implements</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, TermTypeMapper&gt; termTypeMappers       = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, DataTypeMapper&gt; dataTypeMappers       = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> DataTypeMapper              defaultDataTypeMapper = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> List&lt;JDBCType&gt; numberJdbcType = Arrays.asList(JDBCType.NUMERIC, JDBCType.INTEGER, JDBCType.BIGINT, JDBCType.TINYINT, JDBCType.DOUBLE, JDBCType.FLOAT);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//默认查询条件支持</span></div><div class="line">        termTypeMappers.put(TermType.eq, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"=#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.not, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"!=#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.like, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">" LIKE #&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.nlike, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">" NOT LIKE #&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.isnull, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">" IS NULL"</span>));</div><div class="line">        termTypeMappers.put(TermType.notnull, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">" IS NOT NULL"</span>));</div><div class="line">        termTypeMappers.put(TermType.gt, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"&gt;#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.lt, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"&lt;#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.gte, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"&gt;=#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.lte, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"&lt;=#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.empty, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"=''"</span>));</div><div class="line">        termTypeMappers.put(TermType.nempty, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"!=''"</span>));</div><div class="line">        termTypeMappers.put(TermType.func, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(term.getValue()));</div><div class="line">        termTypeMappers.put(TermType.btw, (wherePrefix, term, column, tableAlias) -&gt; &#123;</div><div class="line">            SqlAppender sqlAppender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            List&lt;Object&gt; objects = param2list(term.getValue(), column);</div><div class="line">            <span class="keyword">if</span> (objects.size() == <span class="number">1</span>)</div><div class="line">                objects.add(objects.get(<span class="number">0</span>));</div><div class="line">            term.setValue(objects);</div><div class="line">            sqlAppender.add(buildColumnName(tableAlias, column.getName()), <span class="string">" "</span>).addSpc(<span class="string">"BETWEEN"</span>)</div><div class="line">                    .add(<span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value[0]&#125;"</span>)</div><div class="line">                    .add(<span class="string">" AND "</span>, <span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value[1]&#125;"</span>);</div><div class="line">            <span class="keyword">return</span> sqlAppender;</div><div class="line">        &#125;);</div><div class="line">        termTypeMappers.put(TermType.nbtw, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">        &#123;</div><div class="line">            SqlAppender sqlAppender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            List&lt;Object&gt; objects = param2list(term.getValue(), column);</div><div class="line">            <span class="keyword">if</span> (objects.size() == <span class="number">1</span>)</div><div class="line">                objects.add(objects.get(<span class="number">0</span>));</div><div class="line">            term.setValue(objects);</div><div class="line">            sqlAppender.add(buildColumnName(tableAlias, column.getName()), <span class="string">" "</span>).addSpc(<span class="string">"NOT BETWEEN"</span>)</div><div class="line">                    .add(<span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value[0]&#125;"</span>)</div><div class="line">                    .add(<span class="string">" AND "</span>, <span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value[1]&#125;"</span>);</div><div class="line">            <span class="keyword">return</span> sqlAppender;</div><div class="line">        &#125;);</div><div class="line">        termTypeMappers.put(TermType.in, (wherePrefix, term, column, tableAlias) -&gt; &#123;</div><div class="line">            List&lt;Object&gt; values = param2list(term.getValue(), column);</div><div class="line">            term.setValue(values);</div><div class="line">            SqlAppender appender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            appender.add(tableAlias, <span class="string">"."</span>).addSpc(column.getName()).add(<span class="string">"IN("</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.size(); i++) &#123;</div><div class="line">                appender.add(<span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value["</span>, i, <span class="string">"]&#125;"</span>, <span class="string">","</span>);</div><div class="line">            &#125;</div><div class="line">            appender.removeLast();</div><div class="line">            appender.add(<span class="string">")"</span>);</div><div class="line">            <span class="keyword">return</span> appender;</div><div class="line">        &#125;);</div><div class="line">        termTypeMappers.put(TermType.nin, (wherePrefix, term, column, tableAlias) -&gt; &#123;</div><div class="line">            List&lt;Object&gt; values = param2list(term.getValue(), column);</div><div class="line">            term.setValue(values);</div><div class="line">            SqlAppender appender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            appender.add(tableAlias, <span class="string">"."</span>).addSpc(column.getName()).add(<span class="string">"NOT IN("</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.size(); i++) &#123;</div><div class="line">                appender.add(<span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value["</span>, i, <span class="string">"]&#125;"</span>, <span class="string">","</span>);</div><div class="line">            &#125;</div><div class="line">            appender.removeLast();</div><div class="line">            appender.add(<span class="string">")"</span>);</div><div class="line">            <span class="keyword">return</span> appender;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlAppender <span class="title">buildCondition</span><span class="params">(String wherePrefix, Term term, RDBColumnMetaData RDBColumnMetaData, String tableAlias)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (term <span class="keyword">instanceof</span> SqlTerm) &#123;</div><div class="line">            TermTypeMapper mapper = TermTypeMapper.sql(term.getColumn(), term.getValue());</div><div class="line">            <span class="keyword">return</span> mapper.accept(wherePrefix, term, RDBColumnMetaData, tableAlias);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (term.getValue() <span class="keyword">instanceof</span> TermTypeMapper) &#123;</div><div class="line">            <span class="keyword">return</span> ((TermTypeMapper) term.getValue()).accept(wherePrefix, term, RDBColumnMetaData, tableAlias);</div><div class="line">        &#125;</div><div class="line">        TermTypeMapper mapper = termTypeMappers.get(term.getTermType());</div><div class="line">        <span class="keyword">if</span> (mapper == <span class="keyword">null</span>) mapper = termTypeMappers.get(TermType.eq);</div><div class="line">        <span class="keyword">return</span> mapper.accept(wherePrefix, term, RDBColumnMetaData, tableAlias);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> List&lt;Object&gt; <span class="title">param2list</span><span class="params">(Object value, RDBColumnMetaData columnMetaData)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> List) <span class="keyword">return</span> ((List) value);</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Collection) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(((Collection) value));</div><div class="line">        <span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> Collection)) &#123;</div><div class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</div><div class="line">                String[] arr = ((String) value).split(<span class="string">"[, ;]"</span>);</div><div class="line">                Object[] objArr = <span class="keyword">new</span> Object[arr.length];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">                    String str = arr[i];</div><div class="line">                    Object val = str;</div><div class="line">                    <span class="comment">//数字类型</span></div><div class="line">                    <span class="keyword">if</span> (numberJdbcType.contains(columnMetaData.getJdbcType())) &#123;</div><div class="line">                        <span class="keyword">if</span> (StringUtils.isInt(str))</div><div class="line">                            val = StringUtils.toInt(str);</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isDouble(str))</div><div class="line">                            val = StringUtils.toDouble(str);</div><div class="line">                    &#125;</div><div class="line">                    objArr[i] = val;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> Arrays.asList(objArr);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.getClass().isArray()) &#123;</div><div class="line">                <span class="keyword">return</span> Arrays.asList(((Object[]) value));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(value));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTermTypeMapper</span><span class="params">(String termType, TermTypeMapper mapper)</span> </span>&#123;</div><div class="line">        termType = termType.toLowerCase();</div><div class="line">        termTypeMappers.put(termType, mapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataTypeMapper</span><span class="params">(JDBCType jdbcType, DataTypeMapper mapper)</span> </span>&#123;</div><div class="line">        dataTypeMappers.put(jdbcType.getName(), mapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColumnMapper</span><span class="params">(String columnType, ColumnMapper mapper)</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 16-10-28</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildDataType</span><span class="params">(RDBColumnMetaData columnMetaData)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (columnMetaData.getJdbcType() == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        DataTypeMapper mapper = dataTypeMappers.get(columnMetaData.getJdbcType().getName());</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mapper) mapper = defaultDataTypeMapper;</div><div class="line">        <span class="keyword">return</span> mapper.getDataType(columnMetaData);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TableMetaParser <span class="title">getDefaultParser</span><span class="params">(SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OracleTableMetaParser(sqlExecutor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体到相应数据库，这里拿<code>MysqlDialect</code>为例:</p>
<p>其实主要还是设置对应的数据类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.MysqlTableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.TableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlDialect</span> <span class="keyword">extends</span> <span class="title">DefaultDialect</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">MysqlDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        defaultDataTypeMapper = (meta) -&gt; meta.getJdbcType().getName().toLowerCase();</div><div class="line">        setDataTypeMapper(JDBCType.CHAR, (meta) -&gt; StringUtils.concat(<span class="string">"char("</span>, meta.getLength(), <span class="string">")"</span>));</div><div class="line">        setDataTypeMapper(JDBCType.VARCHAR, (meta) -&gt; StringUtils.concat(<span class="string">"varchar("</span>, meta.getLength(), <span class="string">")"</span>));</div><div class="line">        setDataTypeMapper(JDBCType.TIMESTAMP, (meta) -&gt; <span class="string">"datetime"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.TIME, (meta) -&gt; <span class="string">"time"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.DATE, (meta) -&gt; <span class="string">"year"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.CLOB, (meta) -&gt; <span class="string">"text"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.LONGVARBINARY, (meta) -&gt; <span class="string">"longblob"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.LONGVARCHAR, (meta) -&gt; <span class="string">"longtext"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.BLOB, (meta) -&gt; <span class="string">"blob"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.BIGINT, (meta) -&gt; <span class="string">"bigint"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.DOUBLE, (meta) -&gt; <span class="string">"double"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.INTEGER, (meta) -&gt; <span class="string">"int"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.NUMERIC, (meta) -&gt; StringUtils.concat(<span class="string">"decimal("</span>, meta.getPrecision(), <span class="string">","</span>, meta.getScale(), <span class="string">")"</span>));</div><div class="line">        setDataTypeMapper(JDBCType.DECIMAL, (meta) -&gt; StringUtils.concat(<span class="string">"decimal("</span>, meta.getPrecision(), <span class="string">","</span>, meta.getScale(), <span class="string">")"</span>));</div><div class="line">        setDataTypeMapper(JDBCType.TINYINT, (meta) -&gt; <span class="string">"tinyint"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.BIGINT, (meta) -&gt; <span class="string">"bigint"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.OTHER, (meta) -&gt; <span class="string">"other"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQuoteStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"`"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQuoteEnd</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"`"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doPaging</span><span class="params">(String sql, <span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(sql)</div><div class="line">                .append(<span class="string">" limit "</span>)</div><div class="line">                .append(pageSize * pageIndex)</div><div class="line">                .append(<span class="string">","</span>)</div><div class="line">                .append(pageSize).toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">columnToUpperCase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TableMetaParser <span class="title">getDefaultParser</span><span class="params">(SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MysqlTableMetaParser(sqlExecutor);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="这里漏说了一个表元素的解析"><a href="#这里漏说了一个表元素的解析" class="headerlink" title="这里漏说了一个表元素的解析:"></a>这里漏说了一个表元素的解析:</h6><p>先设计个接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.parser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TableMetaParser</span> </span>&#123;</div><div class="line">    <span class="function">RDBTableMetaData <span class="title">parse</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;RDBTableMetaData&gt; <span class="title">parseAll</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>抽出抽象部分:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.parser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.commons.StringUtils;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.expand.SimpleMapWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.Dialect;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Objects;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTableMetaParser</span> <span class="keyword">implements</span> <span class="title">TableMetaParser</span> </span>&#123;</div><div class="line">    Map&lt;String, JDBCType&gt; jdbcTypeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    Map&lt;JDBCType, Class&gt;  javaTypeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> SqlExecutor sqlExecutor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> Dialect <span class="title">getDialect</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractTableMetaParser</span><span class="params">(SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sqlExecutor = sqlExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getTableMetaSql</span><span class="params">(String tname)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getTableCommentSql</span><span class="params">(String tname)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getAllTableSql</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getTableExistsSql</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            param.put(<span class="string">"table"</span>, name);</div><div class="line">            Map&lt;String, Object&gt; res = sqlExecutor.single(<span class="keyword">new</span> SimpleSQL(getTableExistsSql(), param), <span class="keyword">new</span> LowerCasePropertySimpleMapWrapper());</div><div class="line">            <span class="keyword">return</span> res.get(<span class="string">"total"</span>) != <span class="keyword">null</span> &amp;&amp; StringUtils.toInt(res.get(<span class="string">"total"</span>)) &gt; <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RDBTableMetaData <span class="title">parse</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!tableExists(name)) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        RDBTableMetaData metaData = <span class="keyword">new</span> RDBTableMetaData();</div><div class="line">        metaData.setName(name);</div><div class="line">        metaData.setAlias(name);</div><div class="line">        Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        param.put(<span class="string">"table"</span>, name);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            List&lt;RDBColumnMetaData&gt; metaDatas = sqlExecutor.list(<span class="keyword">new</span> SimpleSQL(getTableMetaSql(name), param), <span class="keyword">new</span> RDBColumnMetaDataWrapper());</div><div class="line">            metaDatas.forEach(metaData::addColumn);</div><div class="line">            Map&lt;String, Object&gt; comment = sqlExecutor.single(<span class="keyword">new</span> SimpleSQL(getTableCommentSql(name), param), <span class="keyword">new</span> LowerCasePropertySimpleMapWrapper());</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != comment &amp;&amp; comment.get(<span class="string">"comment"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">                metaData.setComment(String.valueOf(comment.get(<span class="string">"comment"</span>)));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> metaData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;RDBTableMetaData&gt; <span class="title">parseAll</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        List&lt;Map&lt;String, Object&gt;&gt; tables = sqlExecutor.list(<span class="keyword">new</span> SimpleSQL(getAllTableSql()), <span class="keyword">new</span> LowerCasePropertySimpleMapWrapper());</div><div class="line">        <span class="keyword">return</span> tables.stream()</div><div class="line">                .map(map -&gt; (String) map.get(<span class="string">"name"</span>))</div><div class="line">                .filter(Objects::nonNull)</div><div class="line">                .map(<span class="keyword">this</span>::parse).filter(Objects::nonNull)</div><div class="line">                .collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LowerCasePropertySimpleMapWrapper</span> <span class="keyword">extends</span> <span class="title">SimpleMapWrapper</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wrapper</span><span class="params">(Map&lt;String, Object&gt; instance, <span class="keyword">int</span> index, String attr, Object value)</span> </span>&#123;</div><div class="line">            attr = attr.toLowerCase();</div><div class="line">            <span class="keyword">super</span>.wrapper(instance, index, attr, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RDBColumnMetaDataWrapper</span> <span class="keyword">implements</span> <span class="title">ObjectWrapper</span>&lt;<span class="title">RDBColumnMetaData</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Class&lt;RDBColumnMetaData&gt; <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> RDBColumnMetaData.class;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> RDBColumnMetaData <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RDBColumnMetaData();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wrapper</span><span class="params">(RDBColumnMetaData instance, <span class="keyword">int</span> index, String attr, Object value)</span> </span>&#123;</div><div class="line">            String stringValue;</div><div class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</div><div class="line">                stringValue = ((String) value).toLowerCase();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                stringValue = value == <span class="keyword">null</span> ? <span class="string">""</span> : value.toString();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (attr.equalsIgnoreCase(<span class="string">"name"</span>)) &#123;</div><div class="line">                instance.setName(stringValue);</div><div class="line">                instance.setProperty(<span class="string">"old-name"</span>, stringValue);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attr.equalsIgnoreCase(<span class="string">"comment"</span>)) &#123;</div><div class="line">                instance.setComment(stringValue);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (attr.toLowerCase().equals(<span class="string">"not-null"</span>)) &#123;</div><div class="line">                    value = <span class="string">"1"</span>.equals(stringValue);</div><div class="line">                    instance.setNotNull((<span class="keyword">boolean</span>) value);</div><div class="line">                &#125;</div><div class="line">                instance.setProperty(attr.toLowerCase(), value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">(RDBColumnMetaData instance)</span> </span>&#123;</div><div class="line">            String data_type = instance.getProperty(<span class="string">"data_type"</span>).toString().toLowerCase();</div><div class="line">            <span class="keyword">int</span> len = instance.getProperty(<span class="string">"data_length"</span>).toInt();</div><div class="line">            <span class="keyword">int</span> data_precision = instance.getProperty(<span class="string">"data_precision"</span>).toInt();</div><div class="line">            <span class="keyword">int</span> data_scale = instance.getProperty(<span class="string">"data_scale"</span>).toInt();</div><div class="line">            <span class="keyword">if</span> (data_type == <span class="keyword">null</span>) &#123;</div><div class="line">                data_type = <span class="string">"varchar"</span>;</div><div class="line">            &#125;</div><div class="line">            instance.setLength(len);</div><div class="line">            instance.setPrecision(data_precision);</div><div class="line">            instance.setScale(data_scale);</div><div class="line"></div><div class="line">            JDBCType jdbcType;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                jdbcType = JDBCType.valueOf(data_type.toUpperCase());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                jdbcType = jdbcTypeMap.get(data_type);</div><div class="line">            &#125;</div><div class="line">            Class javaType = javaTypeMap.get(jdbcType);</div><div class="line">            instance.setJdbcType(jdbcType);</div><div class="line">            instance.setJavaType(javaType);</div><div class="line">            instance.setDataType(getDialect().buildDataType(instance));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体数据库完成具体部分<code>MysqlTableMetaParser</code>为例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.parser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.Dialect;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.MysqlDialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlTableMetaParser</span> <span class="keyword">extends</span> <span class="title">AbstractTableMetaParser</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_META_SQL = <span class="string">" select "</span> +</div><div class="line">            <span class="string">"column_name as `name`, "</span> +</div><div class="line">            <span class="string">"data_type as `data_type`, "</span> +</div><div class="line">            <span class="string">"character_maximum_length as `data_length`, "</span> +</div><div class="line">            <span class="string">"numeric_precision as `data_precision`, "</span> +</div><div class="line">            <span class="string">"numeric_scale as `data_scale`, "</span> +</div><div class="line">            <span class="string">"column_comment as `comment`, "</span> +</div><div class="line">            <span class="string">"case when is_nullable='YES' then 0 else 1 end as 'not-null' "</span> +</div><div class="line">            <span class="string">"from information_schema.columns where table_schema=database() and table_name=#&#123;table&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_COMMENT_SQL = <span class="string">" select "</span> +</div><div class="line">            <span class="string">"table_comment as `comment` "</span> +</div><div class="line">            <span class="string">"from information_schema.tables where table_name=#&#123;table&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ALL_TABLE_SQL = <span class="string">"select table_name as `name` from information_schema.`TABLES` where table_schema=database()"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_EXISTS_SQL = <span class="string">"select count(1) as 'total' from information_schema.`TABLES` where table_schema=database() and table_name=#&#123;table&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MysqlTableMetaParser</span><span class="params">(SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(sqlExecutor);</div><div class="line">        jdbcTypeMap.put(<span class="string">"int"</span>, JDBCType.INTEGER);</div><div class="line">        jdbcTypeMap.put(<span class="string">"year"</span>, JDBCType.TIME);</div><div class="line">        jdbcTypeMap.put(<span class="string">"datetime"</span>, JDBCType.TIMESTAMP);</div><div class="line">        jdbcTypeMap.put(<span class="string">"text"</span>, JDBCType.CLOB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">Dialect <span class="title">getDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Dialect.MYSQL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">String <span class="title">getTableMetaSql</span><span class="params">(String tname)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> TABLE_META_SQL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">String <span class="title">getTableCommentSql</span><span class="params">(String tname)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> TABLE_COMMENT_SQL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">String <span class="title">getAllTableSql</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ALL_TABLE_SQL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">String <span class="title">getTableExistsSql</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> TABLE_EXISTS_SQL;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="其次是SimpleWhereSqlBuilder："><a href="#其次是SimpleWhereSqlBuilder：" class="headerlink" title="其次是SimpleWhereSqlBuilder："></a>其次是<code>SimpleWhereSqlBuilder</code>：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.support.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.SqlTerm;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.TermType;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.Correlation;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlAppender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.Dialect;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWhereSqlBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getTableAlias</span><span class="params">(RDBTableMetaData metaData, String field)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (field.contains(<span class="string">"."</span>))</div><div class="line">            field = field.split(<span class="string">"[.]"</span>)[<span class="number">0</span>];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> metaData.getAlias();</div><div class="line">        Correlation correlation = metaData.getCorrelation(field);</div><div class="line">        <span class="keyword">if</span> (correlation != <span class="keyword">null</span>) <span class="keyword">return</span> correlation.getAlias();</div><div class="line">        <span class="keyword">return</span> metaData.getAlias();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWhere</span><span class="params">(RDBTableMetaData metaData, String prefix,</span></span></div><div class="line">                           List&lt;Term&gt; terms, SqlAppender appender,</div><div class="line">                           Set&lt;String&gt; needSelectTable) &#123;</div><div class="line">        <span class="keyword">if</span> (terms == <span class="keyword">null</span> || terms.isEmpty()) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</div><div class="line">        String prefixTmp = StringUtils.concat(prefix, StringUtils.isNullOrEmpty(prefix) ? <span class="string">""</span> : <span class="string">"."</span>);</div><div class="line">        <span class="keyword">for</span> (Term term : terms) &#123;</div><div class="line">            index++;</div><div class="line">            <span class="keyword">boolean</span> nullTerm = StringUtils.isNullOrEmpty(term.getColumn());</div><div class="line">            RDBColumnMetaData column = metaData.findColumn(term.getColumn());</div><div class="line">            <span class="comment">//不是空条件 也不是可选字段</span></div><div class="line">            <span class="keyword">if</span> (!nullTerm &amp;&amp; column == <span class="keyword">null</span> &amp;&amp; term.getTermType() != TermType.func &amp;&amp; !(term <span class="keyword">instanceof</span> SqlTerm)) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">//不是空条件，值为空</span></div><div class="line">            <span class="keyword">if</span> (!nullTerm &amp;&amp; StringUtils.isNullOrEmpty(term.getValue())) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">//是空条件，但是无嵌套</span></div><div class="line">            <span class="keyword">if</span> (nullTerm &amp;&amp; term.getTerms().isEmpty()) <span class="keyword">continue</span>;</div><div class="line">            String tableAlias = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (column != <span class="keyword">null</span>) &#123;</div><div class="line">                tableAlias = getTableAlias(metaData, term.getColumn());</div><div class="line">                needSelectTable.add(tableAlias);</div><div class="line">                <span class="comment">//转换参数的值</span></div><div class="line">                term.setValue(transformationValue(column, term.getValue()));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//用于sql预编译的参数名</span></div><div class="line">            prefix = StringUtils.concat(prefixTmp, <span class="string">"terms["</span>, index, <span class="string">"]"</span>);</div><div class="line">            <span class="comment">//添加类型，and 或者 or</span></div><div class="line">            appender.add(StringUtils.concat(<span class="string">" "</span>, term.getType().toString().toUpperCase(), <span class="string">" "</span>));</div><div class="line">            <span class="keyword">if</span> (!term.getTerms().isEmpty()) &#123;</div><div class="line">                <span class="comment">//构建嵌套的条件</span></div><div class="line">                SqlAppender nest = <span class="keyword">new</span> SqlAppender();</div><div class="line">                buildWhere(metaData, prefix, term.getTerms(), nest, needSelectTable);</div><div class="line">                <span class="comment">//如果嵌套结果为空,</span></div><div class="line">                <span class="keyword">if</span> (nest.isEmpty()) &#123;</div><div class="line">                    appender.removeLast();<span class="comment">//删除最后一个（and 或者 or）</span></div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (nullTerm) &#123;</div><div class="line">                    <span class="comment">//删除 第一个（and 或者 or）</span></div><div class="line">                    nest.removeFirst();</div><div class="line">                &#125;</div><div class="line">                appender.add(<span class="string">"("</span>);</div><div class="line">                <span class="keyword">if</span> (!nullTerm)</div><div class="line">                    appender.add(getDialect().buildCondition(prefix, term, column, tableAlias));</div><div class="line">                appender.addAll(nest);</div><div class="line">                appender.add(<span class="string">")"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!nullTerm)</div><div class="line">                    appender.add(getDialect().buildCondition(prefix, term, column, tableAlias));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">transformationValue</span><span class="params">(RDBColumnMetaData column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; column.getValueConverter() != <span class="keyword">null</span>) &#123;</div><div class="line">            value = column.getValueConverter().getData(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; column.getOptionConverter() != <span class="keyword">null</span>) &#123;</div><div class="line">            Object tmp = column.getOptionConverter().converterData(value);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != tmp) value = tmp;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        JDBCType type = column.getJdbcType();</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//        if (type == null) return value;</span></div><div class="line"><span class="comment">//        switch (type) &#123;</span></div><div class="line"><span class="comment">//            case INTEGER:</span></div><div class="line"><span class="comment">//            case NUMERIC:</span></div><div class="line"><span class="comment">//                if (StringUtils.isInt(type)) return StringUtils.toInt(value);</span></div><div class="line"><span class="comment">//                if (StringUtils.isDouble(type)) return StringUtils.toDouble(value);</span></div><div class="line"><span class="comment">//                break;</span></div><div class="line"><span class="comment">//            case TIMESTAMP:</span></div><div class="line"><span class="comment">//            case TIME:</span></div><div class="line"><span class="comment">//            case DATE:</span></div><div class="line"><span class="comment">//                if (!(value instanceof Date)) &#123;</span></div><div class="line"><span class="comment">//                    String strValue = String.valueOf(value);</span></div><div class="line"><span class="comment">//                    Date date = DateTimeUtils.formatUnknownString2Date(strValue);</span></div><div class="line"><span class="comment">//                    if (date != null) return date;</span></div><div class="line"><span class="comment">//                &#125;</span></div><div class="line"><span class="comment">//                break;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Dialect <span class="title">getDialect</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="拼接出的sql封装："><a href="#拼接出的sql封装：" class="headerlink" title="拼接出的sql封装："></a>拼接出的sql封装：</h6><p>关联查询sql:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.executor;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 浩 on 2015-11-06 0006.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindSQL</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SQL sql;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String toField;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SQL <span class="title">getSql</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sql;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSql</span><span class="params">(SQL sql)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sql = sql;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToField</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toField;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToField</span><span class="params">(String toField)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.toField = toField;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义<code>SQL</code>封装接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.executor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SQL</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取sql语句模板</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> sql语句模板</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">getSql</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取预编译参数</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">getParams</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取关联查询的sql</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;BindSQL&gt; <span class="title">getBinds</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.support.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.BindSQL;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SQL;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSQL</span> <span class="keyword">implements</span> <span class="title">SQL</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String sql;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object param;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;BindSQL&gt; bindSQLs;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleSQL</span><span class="params">(String sql, Object param)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sql = sql;</div><div class="line">        <span class="keyword">this</span>.param = param;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleSQL</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sql = sql;</div><div class="line">        <span class="keyword">this</span>.param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sql;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> param;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;BindSQL&gt; <span class="title">getBinds</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bindSQLs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBindSQLs</span><span class="params">(List&lt;BindSQL&gt; bindSQLs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bindSQLs = bindSQLs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bindSQLs == <span class="keyword">null</span> ? <span class="number">1</span> : bindSQLs.size() + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        builder.append(sql).append(<span class="string">"\n"</span>).append(param);</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="回到SimpleUpdateSqlRender实现"><a href="#回到SimpleUpdateSqlRender实现" class="headerlink" title="回到SimpleUpdateSqlRender实现:"></a>回到<code>SimpleUpdateSqlRender</code>实现:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.support.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtilsBean;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtilsBean;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.UpdateParam;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SQL;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlAppender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.Dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleUpdateSqlRender</span> <span class="keyword">extends</span> <span class="title">CommonSqlRender</span>&lt;<span class="title">UpdateParam</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SimpleUpdateSqlRenderProcess</span> <span class="keyword">extends</span> <span class="title">SimpleWhereSqlBuilder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> RDBTableMetaData      metaData;</div><div class="line">        <span class="keyword">private</span> UpdateParam           param;</div><div class="line">        <span class="keyword">private</span> List&lt;OperationColumn&gt; updateField;</div><div class="line">        <span class="keyword">private</span> SqlAppender whereSql       = <span class="keyword">new</span> SqlAppender();</div><div class="line">        <span class="keyword">private</span> Set&lt;String&gt; conditionTable = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        PropertyUtilsBean propertyUtils = BeanUtilsBean.getInstance().getPropertyUtils();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SimpleUpdateSqlRenderProcess</span><span class="params">(RDBTableMetaData metaData, UpdateParam param)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.metaData = metaData;</div><div class="line">            <span class="keyword">this</span>.param = param.clone();</div><div class="line">          <span class="comment">//先得到条件</span></div><div class="line">            List&lt;Term&gt; terms = param.getTerms();</div><div class="line">          <span class="comment">//对包含条件进行过滤转换得到一个list</span></div><div class="line">            terms = terms.stream().filter(term -&gt; term.getColumn() == <span class="keyword">null</span> || !term.getColumn().contains(<span class="string">"."</span>)).collect(Collectors.toList());</div><div class="line">            param.setTerms(terms);</div><div class="line">            <span class="comment">//解析要操作的字段</span></div><div class="line">            <span class="keyword">this</span>.updateField = parseOperationField(metaData, param);</div><div class="line">            <span class="comment">//解析查询条件</span></div><div class="line">            buildWhere(metaData, <span class="string">""</span>, param.getTerms(), whereSql, conditionTable);</div><div class="line">            <span class="keyword">if</span> (!whereSql.isEmpty()) whereSql.removeFirst();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> SQL <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">            SqlAppender appender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            appender.add(<span class="string">"UPDATE "</span>, metaData.getName(), <span class="string">" "</span>, metaData.getAlias(), <span class="string">" SET "</span>);</div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</div><div class="line">            Map&lt;String, Object&gt; valueProxy = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            updateField.forEach(operationColumn -&gt; &#123;</div><div class="line">                RDBColumnMetaData column = operationColumn.getRDBColumnMetaData();</div><div class="line">                <span class="keyword">if</span> (column.getProperty(<span class="string">"read-only"</span>).isTrue()) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    String dataProperty = column.getAlias();</div><div class="line">                    Object value = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        value = propertyUtils.getProperty(param.getData(), dataProperty);</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; !column.getAlias().equals(column.getName())) &#123;</div><div class="line">                        dataProperty = column.getName();</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            value = propertyUtils.getProperty(param.getData(), dataProperty);</div><div class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (logger.isInfoEnabled())</div><div class="line">                            logger.info(<span class="string">"跳过修改列:[&#123;&#125;], 属性[&#123;&#125;]为null!"</span>, column.getName(), column.getAlias());</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (column.getValueConverter() != <span class="keyword">null</span>) &#123;</div><div class="line">                        Object new_value = column.getValueConverter().getData(value);</div><div class="line">                        <span class="keyword">if</span> (column.getOptionConverter() != <span class="keyword">null</span>) &#123;</div><div class="line">                            new_value = column.getOptionConverter().converterData(new_value);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (value != new_value &amp;&amp; !value.equals(new_value)) &#123;</div><div class="line">                            <span class="comment">// propertyUtils.setProperty(param.getData(), dataProperty, new_value);</span></div><div class="line">                            value = new_value;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    valueProxy.put(dataProperty, value);</div><div class="line">                    appender.add(dialect.buildColumnName(<span class="keyword">null</span>, column.getName()), <span class="string">"="</span>)</div><div class="line">                            .addAll(getParamString(<span class="string">"data."</span>.concat(dataProperty), column));</div><div class="line">                    appender.add(<span class="string">","</span>);</div><div class="line">                    bytes[<span class="number">0</span>]++;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="keyword">if</span> (logger.isInfoEnabled())</div><div class="line">                        logger.info(<span class="string">"跳过修改列:[&#123;&#125;], 可能属性[&#123;&#125;]不存在!"</span>, column.getName(), column.getAlias());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">if</span> (bytes[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"没有列被修改!"</span>);</div><div class="line">            appender.removeLast();</div><div class="line">            <span class="keyword">if</span> (whereSql.isEmpty()) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"禁止执行未设置任何条件的修改操作!"</span>);</div><div class="line">            &#125;</div><div class="line">            appender.add(<span class="string">" WHERE "</span>, <span class="string">""</span>).addAll(whereSql);</div><div class="line">            String sql = appender.toString();</div><div class="line">            param.setData(valueProxy);</div><div class="line">            SimpleSQL simpleSQL = <span class="keyword">new</span> SimpleSQL(sql, param);</div><div class="line">            <span class="keyword">return</span> simpleSQL;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Dialect <span class="title">getDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> dialect;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> SqlAppender <span class="title">getParamString</span><span class="params">(String paramName, RDBColumnMetaData rdbColumnMetaData)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlAppender().add(<span class="string">"#&#123;"</span>, paramName, <span class="string">"&#125;"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SQL <span class="title">render</span><span class="params">(RDBTableMetaData metaData, UpdateParam param)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleUpdateSqlRenderProcess(metaData, param).process();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleUpdateSqlRender</span><span class="params">(Dialect dialect)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dialect = dialect;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Dialect dialect;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Dialect <span class="title">getDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dialect;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDialect</span><span class="params">(Dialect dialect)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dialect = dialect;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="终于得到-了sql，最后，验证之后执行sql语句"><a href="#终于得到-了sql，最后，验证之后执行sql语句" class="headerlink" title="终于得到 了sql，最后，验证之后执行sql语句:"></a>终于得到 了sql，最后，验证之后执行sql语句:</h5><h6 id="设定执行器接口SqlExecutor"><a href="#设定执行器接口SqlExecutor" class="headerlink" title="设定执行器接口SqlExecutor:"></a>设定执行器接口<code>SqlExecutor</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.executor;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.expand.SimpleMapWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * SQL执行器,用于执行sql</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlExecutor</span> </span>&#123;</div><div class="line"></div><div class="line">    SimpleMapWrapper mapWrapper = <span class="keyword">new</span> SimpleMapWrapper();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 传入SQL对象和对象包装器执行查询,将查询结果通过对象包装器进行包装后返回</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql     sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@param</span> wrapper 执行结果对象包装器 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.meta.expand.SimpleMapWrapper&#125;</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;     查询结果类型泛型</div><div class="line">     * <span class="doctag">@return</span> 查询结果</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行查询异常</div><div class="line">     */</div><div class="line">    &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(SQL sql, ObjectWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 传入SQL对象和对象包装器执行查询,将查询结果通过对象包装器进行包装后返回</div><div class="line">     * 只返回单个结果,如果sql结果存在多个值,则返回首个值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql     sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@param</span> wrapper 对象包装其</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;     查询结果类型泛型</div><div class="line">     * <span class="doctag">@return</span> 查询结果</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行查询异常</div><div class="line">     */</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">single</span><span class="params">(SQL sql, ObjectWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行sql</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行update</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@return</span> 执行sql后影响的行数</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行delete</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@return</span> 执行sql后影响的行数</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行insert</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@return</span> 执行sql后影响的行数</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; list(SQL sql) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        <span class="keyword">return</span> list(sql, mapWrapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; list(String sql, Object params) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        <span class="keyword">return</span> list(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; list(String sql) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        <span class="keyword">return</span> list(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, Object&gt; <span class="title">single</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> single(sql, mapWrapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, Object&gt; <span class="title">single</span><span class="params">(String sql, Object params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> single(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, Object&gt; <span class="title">single</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> single(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(String sql, Object params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> insert(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql, Object params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> update(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> update(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String sql, Object params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> delete(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> delete(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        exec(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="JDBC-通用sql执行器"><a href="#JDBC-通用sql执行器" class="headerlink" title="JDBC 通用sql执行器"></a><code>JDBC 通用sql执行器</code></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.executor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtilsBean;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtilsBean;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * JDBC 通用sql执行器,用于执行sql.支持参数化预编译</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractJdbcSqlExecutor</span> <span class="keyword">implements</span> <span class="title">SqlExecutor</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取jdbc链接,由子类实现</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> jdbc 链接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 直接拼接sql的编译表达式: $&#123;&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern APPEND_PATTERN = Pattern.compile(<span class="string">"(?&lt;=\\$\\&#123;)(.+?)(?=\\&#125;)"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进行参数预编译的表达式:#&#123;&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PREPARED_PATTERN = Pattern.compile(<span class="string">"(?&lt;=#\\&#123;)(.+?)(?=\\&#125;)"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 对象属性操作工具</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> PropertyUtilsBean</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> PropertyUtilsBean propertyUtils = BeanUtilsBean.getInstance().getPropertyUtils();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getSqlParamValue</span><span class="params">(Object param, String paramName)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Object obj = propertyUtils.getProperty(param, paramName);</div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Term)</div><div class="line">                obj = ((Term) obj).getValue();</div><div class="line">            <span class="keyword">return</span> obj;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.warn(<span class="string">"获取sql参数失败"</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将sql模板编译为sql信息</div><div class="line">     * 模板语法:$&#123;&#125;代表直接拼接sql,#&#123;&#125;使用预编译</div><div class="line">     * 如: 模板参数为:&#123;name:"张三",age:10&#125;,sql为:select * from user where name=#&#123;name&#125; and age=$&#123;age&#125;</div><div class="line">     * 将被编译为:select * from user where name=? and age=10。 参数列表:["张三"]</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql模板 ,参考&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@return</span> sql 编译好的信息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> SQLInfo <span class="title">compileSql</span><span class="params">(SQL sql)</span> </span>&#123;</div><div class="line">        String sqlTemplate = sql.getSql();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            SQLInfo sqlInfo = <span class="keyword">new</span> SQLInfo();</div><div class="line">            Object param = sql.getParams();</div><div class="line">            Matcher prepared_matcher = PREPARED_PATTERN.matcher(sqlTemplate);</div><div class="line">            Matcher append_matcher = APPEND_PATTERN.matcher(sqlTemplate);</div><div class="line">            List&lt;Object&gt; params = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">            <span class="comment">//直接拼接sql</span></div><div class="line">            <span class="keyword">while</span> (append_matcher.find()) &#123;</div><div class="line">                String group = append_matcher.group();</div><div class="line">                Object obj = getSqlParamValue(param, group);</div><div class="line">                sqlTemplate = sqlTemplate.replaceFirst(StringUtils.concat(<span class="string">"\\$\\&#123;"</span>, escapeExprSpecialWord(group), <span class="string">"\\&#125;"</span>), String.valueOf(obj));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//参数预编译sql</span></div><div class="line">            <span class="keyword">while</span> (prepared_matcher.find()) &#123;</div><div class="line">                String group = prepared_matcher.group();</div><div class="line">                sqlTemplate = sqlTemplate.replaceFirst(StringUtils.concat(<span class="string">"#\\&#123;"</span>, escapeExprSpecialWord(group), <span class="string">"\\&#125;"</span>), <span class="string">"?"</span>);</div><div class="line">                Object obj = getSqlParamValue(param, group);</div><div class="line">                params.add(obj);</div><div class="line">            &#125;</div><div class="line">            sqlInfo.setSql(sqlTemplate);</div><div class="line">            sqlInfo.setParam(params.toArray());</div><div class="line">            <span class="keyword">return</span> sqlInfo;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"compile sql  &#123;&#125;  error"</span>, sqlTemplate, e);</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 释放连接,在执行完sql后,将释放此链接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(SQL sql, ObjectWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//将sql模板编译为可执行的sql</span></div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);<span class="comment">//打印sql信息</span></div><div class="line">        Connection connection = getConnection();</div><div class="line">        PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">        List&lt;T&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//预编译SQL</span></div><div class="line">            statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            <span class="comment">//执行sql</span></div><div class="line">            resultSet = statement.executeQuery();</div><div class="line">            ResultSetMetaData metaData = resultSet.getMetaData();</div><div class="line">            <span class="keyword">int</span> count = metaData.getColumnCount();</div><div class="line">            <span class="comment">//获取到执行sql后返回的列信息</span></div><div class="line">            List&lt;String&gt; headers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</div><div class="line">                headers.add(metaData.getColumnLabel(i));</div><div class="line">            &#125;</div><div class="line">            wrapper.setUp(headers);</div><div class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</div><div class="line">                <span class="comment">//调用包装器,将查询结果包装为对象</span></div><div class="line">                T data = wrapper.newInstance();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.size(); i++) &#123;</div><div class="line">                    Object value = resultSet.getObject(i + <span class="number">1</span>);</div><div class="line">                    wrapper.wrapper(data, index, headers.get(i), value);</div><div class="line">                &#125;</div><div class="line">                index++;</div><div class="line">                wrapper.done(data);</div><div class="line">                datas.add(data);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"&lt;==      total: &#123;&#125;"</span>, index);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            closeResultSet(resultSet);</div><div class="line">            closeStatement(statement);</div><div class="line">            <span class="comment">//重置JDBC链接</span></div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">closeResultSet</span><span class="params">(ResultSet resultSet)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != resultSet)</div><div class="line">                resultSet.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            logger.error(<span class="string">"close ResultSet error"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">closeStatement</span><span class="params">(Statement statement)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != statement)</div><div class="line">                statement.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            logger.error(<span class="string">"close ResultSet error"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">single</span><span class="params">(SQL sql, ObjectWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);</div><div class="line">        Connection connection = getConnection();</div><div class="line">        PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">        T data = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="comment">//预编译参数</span></div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            resultSet = statement.executeQuery();</div><div class="line">            ResultSetMetaData metaData = resultSet.getMetaData();</div><div class="line">            <span class="keyword">int</span> count = metaData.getColumnCount();</div><div class="line">            List&lt;String&gt; headers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</div><div class="line">                headers.add(metaData.getColumnLabel(i));</div><div class="line">            &#125;</div><div class="line">            wrapper.setUp(headers);</div><div class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;</div><div class="line">                data = wrapper.newInstance();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.size(); i++) &#123;</div><div class="line">                    Object value = resultSet.getObject(i + <span class="number">1</span>);</div><div class="line">                    wrapper.wrapper(data, index, headers.get(i), value);</div><div class="line">                &#125;</div><div class="line">                index++;</div><div class="line">                wrapper.done(data);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"&lt;==      total: &#123;&#125;"</span>, index);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            closeResultSet(resultSet);</div><div class="line">            closeStatement(statement);</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span>;</div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);</div><div class="line">        Connection connection = getConnection();</div><div class="line">        PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="comment">//预编译参数</span></div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            statement.execute();</div><div class="line">            <span class="keyword">if</span> (sql.getBinds() != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (BindSQL bindSQL : sql.getBinds()) &#123;</div><div class="line">                    exec(bindSQL.getSql());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            closeStatement(statement);</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);</div><div class="line">        Connection connection = getConnection();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PreparedStatement statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            i = statement.executeUpdate();</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled())</div><div class="line">                logger.debug(<span class="string">"&lt;==    updated: &#123;&#125; rows"</span>, i);</div><div class="line">            closeStatement(statement);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);</div><div class="line">        Connection connection = getConnection();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PreparedStatement statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            i = statement.executeUpdate();</div><div class="line">            <span class="keyword">if</span> (sql.getBinds() != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (BindSQL bindSQL : sql.getBinds()) &#123;</div><div class="line">                    i += delete(bindSQL.getSql());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled())</div><div class="line">                logger.debug(<span class="string">"&lt;==     delete: &#123;&#125; rows"</span>, i);</div><div class="line">            closeStatement(statement);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> update(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String tname)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        Connection connection = getConnection();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DatabaseMetaData metaData = connection.getMetaData();</div><div class="line">            ResultSet resultSet = metaData</div><div class="line">                    .getTables(connection.getCatalog(), <span class="keyword">null</span>, tname.toUpperCase(), <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (resultSet.next()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                resultSet = metaData</div><div class="line">                        .getTables(connection.getCatalog(), <span class="keyword">null</span>, tname.toLowerCase(), <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (resultSet.next()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 预编译参数</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> statement</div><div class="line">     * <span class="doctag">@param</span> info</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">preparedParam</span><span class="params">(PreparedStatement statement, SQLInfo info)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</div><div class="line">        <span class="comment">//预编译参数</span></div><div class="line">        <span class="keyword">for</span> (Object object : info.getParam()) &#123;</div><div class="line">            <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Date)</div><div class="line">                statement.setTimestamp(index++, <span class="keyword">new</span> java.sql.Timestamp(((Date) object).getTime()));</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</div><div class="line">                statement.setBlob(index++, <span class="keyword">new</span> ByteArrayInputStream((<span class="keyword">byte</span>[]) object));</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">                statement.setObject(index++, object);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printSql</span><span class="params">(SQLInfo info)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"==&gt;  Preparing: &#123;&#125;"</span>, info.getSql());</div><div class="line">            <span class="keyword">if</span> (info.getParam() != <span class="keyword">null</span> &amp;&amp; info.getParam().length &gt; <span class="number">0</span>) &#123;</div><div class="line">                logger.debug(<span class="string">"==&gt; Parameters: &#123;&#125;"</span>, info.paramsString());</div><div class="line">                String sim = info.getSql();</div><div class="line">                Object[] param = info.getParam();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.length; i++) &#123;</div><div class="line">                    Object obj = param[i];</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        sim = sim.replaceFirst(<span class="string">"\\?"</span>, obj <span class="keyword">instanceof</span> Number ? String.valueOf(obj) : <span class="string">"'"</span>.concat(escapeExprSpecialWord(String.valueOf(obj))).concat(<span class="string">"'"</span>));</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                logger.debug(<span class="string">"==&gt;  Simulated: &#123;&#125;"</span>, sim);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">escapeExprSpecialWord</span><span class="params">(String keyword)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.isNullOrEmpty(keyword)) &#123;</div><div class="line">            String[] fbsArr = &#123;<span class="string">"\\"</span>, <span class="string">"$"</span>, <span class="string">"("</span>, <span class="string">")"</span>, <span class="string">"*"</span>, <span class="string">"+"</span>, <span class="string">"."</span>, <span class="string">"["</span>, <span class="string">"]"</span>, <span class="string">"?"</span>, <span class="string">"^"</span>, <span class="string">"&#123;"</span>, <span class="string">"&#125;"</span>, <span class="string">"|"</span>&#125;;</div><div class="line">            <span class="keyword">for</span> (String key : fbsArr) &#123;</div><div class="line">                <span class="keyword">if</span> (keyword.contains(key)) &#123;</div><div class="line">                    keyword = keyword.replace(key, <span class="string">"\\"</span> + key);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> keyword;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLInfo</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * sql语句</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> String sql;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 参数列表</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> Object[] param;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 参数字符串</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> String paramString;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> sql;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSql</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.sql = sql;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> Object[] getParam() &#123;</div><div class="line">            <span class="keyword">return</span> param;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParam</span><span class="params">(Object[] param)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.param = param;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">paramsString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (getParam() == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span> (paramString == <span class="keyword">null</span>) &#123;</div><div class="line">                StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (Object param : getParam()) &#123;</div><div class="line">                    <span class="keyword">if</span> (i++ != <span class="number">0</span>)</div><div class="line">                        builder.append(<span class="string">","</span>);</div><div class="line">                    builder.append(String.valueOf(param));</div><div class="line">                    builder.append(<span class="string">"("</span>);</div><div class="line">                    builder.append(param == <span class="keyword">null</span> ? <span class="string">"null"</span> : param.getClass().getSimpleName());</div><div class="line">                    builder.append(<span class="string">")"</span>);</div><div class="line">                &#125;</div><div class="line">                paramString = builder.toString();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> paramString;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，关于改终于分析完毕</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hsweb的系列学习——hsweb-easy-orm分析-中&quot;&gt;&lt;a href=&quot;#hsweb的系列学习——hsweb-easy-orm分析-中&quot; class=&quot;headerlink&quot; title=&quot;hsweb的系列学习——hsweb-easy-orm分析  中&quot;&gt;&lt;/a&gt;hsweb的系列学习——hsweb-easy-orm分析  中&lt;/h1&gt;&lt;p&gt;接上篇&lt;br&gt;
    
    </summary>
    
      <category term="hsweb" scheme="https://muyinchen.github.io/categories/hsweb/"/>
    
    
      <category term="hsweb" scheme="https://muyinchen.github.io/tags/hsweb/"/>
    
  </entry>
  
  <entry>
    <title>hsweb的系列学习——hsweb-easy-orm分析  上</title>
    <link href="https://muyinchen.github.io/2017/03/19/hsweb%E7%9A%84%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94hsweb-easy-orm%E5%88%86%E6%9E%90%20%20%E4%B8%8A/"/>
    <id>https://muyinchen.github.io/2017/03/19/hsweb的系列学习——hsweb-easy-orm分析  上/</id>
    <published>2017-03-19T10:32:45.160Z</published>
    <updated>2017-03-19T10:32:05.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hsweb的系列学习——hsweb-easy-orm分析-上"><a href="#hsweb的系列学习——hsweb-easy-orm分析-上" class="headerlink" title="hsweb的系列学习——hsweb-easy-orm分析  上"></a>hsweb的系列学习——hsweb-easy-orm分析  上</h1><h2 id="对于此orm框架的封装，首先要看的便是-hsweb-easy-orm-core"><a href="#对于此orm框架的封装，首先要看的便是-hsweb-easy-orm-core" class="headerlink" title="对于此orm框架的封装，首先要看的便是:hsweb-easy-orm-core"></a>对于此orm框架的封装，首先要看的便是:<code>hsweb-easy-orm-core</code></h2><blockquote>
<p>整体思路:因为是为动态表单设计的orm框架，所以要有为映射包装的PO类和反映到表元素的元数据类MetaData，</p>
<p>以及对这些bean进行操作的各种周边(最多的也就是curd的细节分拆)<br><a id="more"></a></p>
<h3 id="一，映射包装的PO类"><a href="#一，映射包装的PO类" class="headerlink" title="一，映射包装的PO类"></a>一，映射包装的PO类</h3></blockquote>
<h4 id="列的设定"><a href="#列的设定" class="headerlink" title="列的设定"></a>列的设定</h4><p>我们的curd操作的基本元素首先是表,而我们操作的铁定就是po类，表中的基本元素首先是列，列包含两个属性，名字和字段类型</p>
<p>那么对于这个orm框架中的体现就是:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.1</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Column</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String type;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Column <span class="title">type</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Column <span class="title">build</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Column column = <span class="keyword">new</span> Column();</div><div class="line">        column.setName(name);</div><div class="line">        <span class="keyword">return</span> column;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处单独定义了<code>ColumnType</code>,暂时未见使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.1</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ColumnType</span> </span>&#123;</div><div class="line">    String def = <span class="string">""</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SQL的参数设定"><a href="#SQL的参数设定" class="headerlink" title="SQL的参数设定"></a>SQL的参数设定</h4><p>对列的一系列的操作其实是操作字段及所涉及的数据，那么我们所要设定的地方有:</p>
<p>通过参考一个sql语句可以知道，操作一个字段往往会涉及到<code>where</code>后面的条件，以及要处理的字段如<code>in{...}</code>不处理的字段 <code>not in{...}</code> 具体代码里面的体现就是:</p>
<h5 id="首先对条件类型的设定"><a href="#首先对条件类型的设定" class="headerlink" title="首先对条件类型的设定:"></a>首先对条件类型的设定:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 查询条件类型,用于动态指定查询条件</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TermType</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ==</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String eq      = <span class="string">"eq"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * !=</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String not     = <span class="string">"not"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * like</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String like    = <span class="string">"like"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * not like</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String nlike   = <span class="string">"nlike"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String gt      = <span class="string">"gt"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &lt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String lt      = <span class="string">"lt"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &gt;=</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String gte     = <span class="string">"gte"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &lt;=</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String lte     = <span class="string">"lte"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * in</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String in      = <span class="string">"in"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * notin</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String nin     = <span class="string">"nin"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * =''</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String empty   = <span class="string">"empty"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * !=''</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String nempty  = <span class="string">"nempty"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * is null</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String isnull  = <span class="string">"isnull"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * not null</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String notnull = <span class="string">"notnull"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * between</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String btw     = <span class="string">"btw"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * not between</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String nbtw    = <span class="string">"nbtw"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 此类型将直接执行sql.在类型是从客户端参数中获取的场景中,应该屏蔽此类型</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> SqlTerm</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     * <span class="doctag">@deprecated</span> 此属性已弃用，如果想直接拼接sql，请使用 &#123;<span class="doctag">@link</span> SqlTerm&#125;</div><div class="line">     */</div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    String func = <span class="string">"func"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="其次对于条件的设定"><a href="#其次对于条件的设定" class="headerlink" title="其次对于条件的设定:"></a>其次对于条件的设定:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 执行条件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Term</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 字段</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String column;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Object value;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 链接类型</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Type type = Type.and;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 条件类型</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String termType = TermType.eq;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 嵌套的条件</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> List&lt;Term&gt; terms = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">or</span><span class="params">(String term, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> or(term, TermType.eq,value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">and</span><span class="params">(String term, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> and(term, TermType.eq,value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">or</span><span class="params">(String term, String termType, Object value)</span> </span>&#123;</div><div class="line">        Term queryTerm = <span class="keyword">new</span> Term();</div><div class="line">        queryTerm.setTermType(termType);</div><div class="line">        queryTerm.setColumn(term);</div><div class="line">        queryTerm.setValue(value);</div><div class="line">        queryTerm.setType(Type.or);</div><div class="line">        terms.add(queryTerm);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">and</span><span class="params">(String term, String termType, Object value)</span> </span>&#123;</div><div class="line">        Term queryTerm = <span class="keyword">new</span> Term();</div><div class="line">        queryTerm.setTermType(termType);</div><div class="line">        queryTerm.setColumn(term);</div><div class="line">        queryTerm.setValue(value);</div><div class="line">        queryTerm.setType(Type.and);</div><div class="line">        terms.add(queryTerm);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">nest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nest(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">orNest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> orNest(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">nest</span><span class="params">(String term, Object value)</span> </span>&#123;</div><div class="line">        Term queryTerm = <span class="keyword">new</span> Term();</div><div class="line">        queryTerm.setType(Type.and);</div><div class="line">        queryTerm.setColumn(term);</div><div class="line">        queryTerm.setValue(value);</div><div class="line">        terms.add(queryTerm);</div><div class="line">        <span class="keyword">return</span> queryTerm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">orNest</span><span class="params">(String term, Object value)</span> </span>&#123;</div><div class="line">        Term queryTerm = <span class="keyword">new</span> Term();</div><div class="line">        queryTerm.setType(Type.or);</div><div class="line">        queryTerm.setColumn(term);</div><div class="line">        queryTerm.setValue(value);</div><div class="line">        terms.add(queryTerm);</div><div class="line">        <span class="keyword">return</span> queryTerm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColumn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> column;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColumn</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (column == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (column.contains(<span class="string">"$"</span>)) &#123;</div><div class="line">            String tmp[] = column.split(<span class="string">"[$]"</span>);</div><div class="line">            setTermType(tmp[<span class="number">1</span>]);</div><div class="line">            column = tmp[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.column = column;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(Type type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTermType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> termType.toLowerCase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTermType</span><span class="params">(String termType)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.termType = termType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Term&gt; <span class="title">getTerms</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> terms;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTerms</span><span class="params">(List&lt;Term&gt; terms)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.terms = terms;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">addTerm</span><span class="params">(Term term)</span> </span>&#123;</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setColumn(column);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setTermType(termType);</div><div class="line">        term.setType(type);</div><div class="line">        terms.forEach(t -&gt; term.addTerm(t.clone()));</div><div class="line">        <span class="keyword">return</span> term;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123;</div><div class="line">        or, and;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">fromString</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> Type.valueOf(str.toLowerCase());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">return</span> and;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将各种条件用po来表达出来并进行封装</p>
<h5 id="最后对于SQL参数对象的设定"><a href="#最后对于SQL参数对象的设定" class="headerlink" title="最后对于SQL参数对象的设定:"></a>最后对于SQL参数对象的设定:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * SQL参数对象</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 条件</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> List&lt;Term&gt; terms = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定要处理的字段</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> Set&lt;String&gt; includes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定不处理的字段</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> Set&lt;String&gt; excludes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">or</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> or(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">and</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> and(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">or</span><span class="params">(String column, String termType, Object value)</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setTermType(termType);</div><div class="line">        term.setColumn(column);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setType(Term.Type.or);</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">and</span><span class="params">(String column, String termType, Object value)</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setTermType(termType);</div><div class="line">        term.setColumn(column);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setType(Term.Type.and);</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">nest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nest(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">orNest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> orNest(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">nest</span><span class="params">(String termString, Object value)</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setColumn(termString);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setType(Term.Type.and);</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> term;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">orNest</span><span class="params">(String termString, Object value)</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setColumn(termString);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setType(Term.Type.or);</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> term;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">includes</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        includes.addAll(Arrays.asList(fields));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">excludes</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        excludes.addAll(Arrays.asList(fields));</div><div class="line">        includes.removeAll(Arrays.asList(fields));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">where</span><span class="params">(String key, Object value)</span> </span>&#123;</div><div class="line">        and(key, value);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">where</span><span class="params">(String key, String termType, Object value)</span> </span>&#123;</div><div class="line">        and(key, termType, value);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getIncludes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (includes == <span class="keyword">null</span>) includes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        <span class="keyword">return</span> includes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getExcludes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (excludes == <span class="keyword">null</span>) excludes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        <span class="keyword">return</span> excludes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIncludes</span><span class="params">(Set&lt;String&gt; includes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.includes = includes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExcludes</span><span class="params">(Set&lt;String&gt; excludes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.excludes = excludes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Term&gt; <span class="title">getTerms</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> terms;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTerms</span><span class="params">(List&lt;Term&gt; terms)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.terms = terms;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">addTerm</span><span class="params">(Term term)</span> </span>&#123;</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Param <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        Param param = <span class="keyword">new</span> Param();</div><div class="line">        param.setExcludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(excludes));</div><div class="line">        param.setIncludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(includes));</div><div class="line">        List&lt;Term&gt; terms = <span class="keyword">this</span>.terms.stream().map(term -&gt; term.clone()).collect(Collectors.toList());</div><div class="line">        param.setTerms(terms);</div><div class="line">        <span class="keyword">return</span> param;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过<code>LinkedList</code> 来将条件都包装到一起 ,通过<code>LinkedHashSet</code>来包装要处理的字段</p>
<h4 id="由Param衍生出来的专门对查询-如分页-和更新参数的额外封装"><a href="#由Param衍生出来的专门对查询-如分页-和更新参数的额外封装" class="headerlink" title="由Param衍生出来的专门对查询(如分页)和更新参数的额外封装:"></a>由<code>Param</code>衍生出来的专门对查询(如分页)和更新参数的额外封装:</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp170319_133900.png" alt=""></p>
<h5 id="查询往往会涉及到排序，这里对排序先做下封装"><a href="#查询往往会涉及到排序，这里对排序先做下封装" class="headerlink" title="查询往往会涉及到排序，这里对排序先做下封装:"></a>查询往往会涉及到排序，这里对排序先做下封装:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 排序</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> <span class="keyword">extends</span> <span class="title">Column</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String order = <span class="string">"asc"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> QueryParam queryParam;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> order;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(String order)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.order = order;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sort</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sort</span><span class="params">(QueryParam queryParam, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.queryParam = queryParam;</div><div class="line">        setName(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryParam <span class="title">asc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.order = <span class="string">"asc"</span>;</div><div class="line">        <span class="keyword">return</span> queryParam;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryParam <span class="title">desc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.order = <span class="string">"desc"</span>;</div><div class="line">        <span class="keyword">return</span> queryParam;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Sort <span class="title">and</span><span class="params">(String field)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> queryParam.orderBy(field);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.valueOf(getName()).concat(order).hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.hashCode() == obj.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="QueryParam-排序字段同样LinkedList存储"><a href="#QueryParam-排序字段同样LinkedList存储" class="headerlink" title="QueryParam:   排序字段同样LinkedList存储"></a><code>QueryParam</code>:   排序字段同样<code>LinkedList</code>存储</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 浩 on 2016-01-16 0016.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryParam</span> <span class="keyword">extends</span> <span class="title">Param</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7941767360194797891L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否进行分页，默认为true</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> paging = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第几页 从0开始</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每页显示记录条数</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">25</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 排序字段</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> List&lt;Sort&gt; sorts = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forUpdate = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryParam <span class="title">select</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.includes(fields);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Sort <span class="title">orderBy</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">this</span>, column);</div><div class="line">        sorts.add(sort);</div><div class="line">        <span class="keyword">return</span> sort;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;Q extends QueryParam&gt; <span class="function">Q <span class="title">doPaging</span><span class="params">(<span class="keyword">int</span> pageIndex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageIndex = pageIndex;</div><div class="line">        <span class="keyword">this</span>.paging = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> (Q) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;Q extends QueryParam&gt; <span class="function">Q <span class="title">doPaging</span><span class="params">(<span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageIndex = pageIndex;</div><div class="line">        <span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">        <span class="keyword">this</span>.paging = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> (Q) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;Q extends QueryParam&gt; <span class="function">Q <span class="title">rePaging</span><span class="params">(<span class="keyword">int</span> total)</span> </span>&#123;</div><div class="line">        paging = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">// 当前页没有数据后跳转到最后一页</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getPageIndex() != <span class="number">0</span> &amp;&amp; (pageIndex * pageSize) &gt;= total) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = total / <span class="keyword">this</span>.getPageSize();</div><div class="line">            pageIndex = total % <span class="keyword">this</span>.getPageSize() == <span class="number">0</span> ? tmp - <span class="number">1</span> : tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (Q) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPaging</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> paging;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPaging</span><span class="params">(<span class="keyword">boolean</span> paging)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.paging = paging;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pageIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageIndex</span><span class="params">(<span class="keyword">int</span> pageIndex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageIndex = pageIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pageSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sort&gt; <span class="title">getSorts</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sorts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSorts</span><span class="params">(List&lt;Sort&gt; sorts)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sorts = sorts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForUpdate</span><span class="params">(<span class="keyword">boolean</span> forUpdate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.forUpdate = forUpdate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> forUpdate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryParam <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        QueryParam sqlParam = <span class="keyword">new</span> QueryParam();</div><div class="line">        sqlParam.setExcludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(excludes));</div><div class="line">        sqlParam.setIncludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(includes));</div><div class="line">        List&lt;Term&gt; terms = <span class="keyword">this</span>.terms.stream().map(Term::clone).collect(Collectors.toList());</div><div class="line">        sqlParam.setTerms(terms);</div><div class="line">        sqlParam.setPageIndex(pageIndex);</div><div class="line">        sqlParam.setPageSize(pageSize);</div><div class="line">        sqlParam.setPaging(paging);</div><div class="line">        sqlParam.setSorts(sorts);</div><div class="line">        sqlParam.setForUpdate(forUpdate);</div><div class="line">        <span class="keyword">return</span> sqlParam;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="UpdateParam"><a href="#UpdateParam" class="headerlink" title="UpdateParam:"></a><code>UpdateParam</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-4-19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateParam</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Param</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> T data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateParam</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateParam</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;C extends UpdateParam&lt;T&gt;&gt; <span class="function">C <span class="title">set</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        <span class="keyword">return</span> (C) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UpdateParam <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        UpdateParam&lt;T&gt; param = <span class="keyword">new</span> UpdateParam&lt;&gt;();</div><div class="line">        param.setData(data);</div><div class="line">        param.setExcludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(excludes));</div><div class="line">        param.setIncludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(includes));</div><div class="line">        List&lt;Term&gt; terms = <span class="keyword">this</span>.terms.stream().map(Term::clone).collect(Collectors.toList());</div><div class="line">        param.setTerms(terms);</div><div class="line">        <span class="keyword">return</span> param;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="对更新数据map类型包装的数据做扩展"><a href="#对更新数据map类型包装的数据做扩展" class="headerlink" title="对更新数据map类型包装的数据做扩展:"></a>对更新数据<code>map</code>类型包装的数据做扩展:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-4-21.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateMapParam</span> <span class="keyword">extends</span> <span class="title">UpdateParam</span>&lt;<span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateMapParam</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> HashMap&lt;&gt;());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateMapParam</span><span class="params">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class="line">        setData(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> UpdateMapParam <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.getData().put(key, value);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="表插入数据的封装"><a href="#表插入数据的封装" class="headerlink" title="表插入数据的封装"></a>表插入数据的封装</h4><h6 id="InsertParam"><a href="#InsertParam" class="headerlink" title="InsertParam:"></a><code>InsertParam</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertParam</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> T data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InsertParam</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InsertParam</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> InsertParam&lt;T&gt; <span class="title">value</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">InsertParam&lt;T&gt; <span class="title">build</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InsertParam&lt;&gt;(data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和更新针对<code>map</code>数据类型衍生一样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertParamMapParam</span> <span class="keyword">extends</span> <span class="title">InsertParam</span>&lt;<span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">super</span>.getData() == <span class="keyword">null</span>) setData(<span class="keyword">new</span> HashMap&lt;&gt;());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> InsertParamMapParam <span class="title">value</span><span class="params">(String property, Object value)</span> </span>&#123;</div><div class="line">        getData().put(property, value);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> InsertParamMapParam <span class="title">values</span><span class="params">(Map&lt;String, Object&gt; values)</span> </span>&#123;</div><div class="line">        getData().putAll(values);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二，反映到表元素的元数据类MetaData"><a href="#二，反映到表元素的元数据类MetaData" class="headerlink" title="二，反映到表元素的元数据类MetaData"></a>二，反映到表元素的元数据类MetaData</h3><h4 id="PO转表元素数据"><a href="#PO转表元素数据" class="headerlink" title="PO转表元素数据"></a>PO转表元素数据</h4><h5 id="OptionConverter-选项映射器"><a href="#OptionConverter-选项映射器" class="headerlink" title="OptionConverter:选项映射器"></a><code>OptionConverter</code>:选项映射器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 选项映射器,当一个字段持有映射器时.</div><div class="line"> * &lt;ul&gt;</div><div class="line"> * &lt;li&gt;</div><div class="line"> * 在查询时,会追加一个名为&#123;<span class="doctag">@link</span> OptionConverter#getFieldName()&#125;的字段为&#123;<span class="doctag">@link</span> OptionConverter#converterValue(Object)&#125; 的值</div><div class="line"> * &lt;/li&gt;</div><div class="line"> * &lt;li&gt;</div><div class="line"> * 在修改或者插入时,验证器会首先通过 &#123;<span class="doctag">@link</span> OptionConverter#converterData(Object)&#125;来获取一个结果.</div><div class="line"> * 如果返回null.则调用&#123;<span class="doctag">@link</span> OptionConverter#converterValue(Object)&#125; ,并将值放入数据库.</div><div class="line"> * 如果继续返回null,则会抛出验证器异常,提示值不再选项范围中</div><div class="line"> * &lt;/li&gt;</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> * Created by zhouhao on 16-6-4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OptionConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取所有选项</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 选项</div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">getOptions</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取转换后的字段名称</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 转换后的字段名称</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">getFieldName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将提交的数据,转换为目标数据</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> value 提交的数据</div><div class="line">     * <span class="doctag">@return</span> 转换结果</div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">converterData</span><span class="params">(Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将数据库的数据,转换为目标数据</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> data 数据库数据</div><div class="line">     * <span class="doctag">@return</span> 转换结果</div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">converterValue</span><span class="params">(Object data)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="PropertyWrapper-属性包装"><a href="#PropertyWrapper-属性包装" class="headerlink" title="PropertyWrapper:属性包装"></a><code>PropertyWrapper</code>:属性包装</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertyWrapper</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">toInt</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">toDouble</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTrue</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Date <span class="title">toDate</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Date <span class="title">toDate</span><span class="params">(String format)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">toMap</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Map&gt; <span class="title">toList</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">toBean</span><span class="params">(Class&lt;T&gt; type)</span></span>;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toBeanList</span><span class="params">(Class&lt;T&gt; type)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNullOrEmpty</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">valueTypeOf</span><span class="params">(Class&lt;?&gt; type)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对<code>PropertyWrapper</code>的简单实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> org.hsweb.commons.ClassUtils;</div><div class="line"><span class="keyword">import</span> org.hsweb.commons.DateTimeUtils;</div><div class="line"><span class="keyword">import</span> org.hsweb.commons.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePropertyWrapper</span> <span class="keyword">implements</span> <span class="title">PropertyWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimplePropertyWrapper</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">toInt</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.toInt(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">toDouble</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.toDouble(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.isTrue(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">toDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) <span class="keyword">return</span> ((Date) value);</div><div class="line">        <span class="keyword">return</span> DateTimeUtils.formatUnknownString2Date(toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">toDate</span><span class="params">(String format)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) <span class="keyword">return</span> ((Date) value);</div><div class="line">        <span class="keyword">return</span> DateTimeUtils.formatDateString(toString(), format);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">toBean</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (valueTypeOf(type)) <span class="keyword">return</span> ((T) getValue());</div><div class="line">        <span class="keyword">return</span> JSON.parseObject(toString(), type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">toList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toBeanList(Map.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">toMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toBean(Map.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toBeanList</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getValue() <span class="keyword">instanceof</span> List) <span class="keyword">return</span> ((List) getValue());</div><div class="line">        <span class="keyword">return</span> JSON.parseArray(toString(), type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNullOrEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.isNullOrEmpty(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valueTypeOf</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> ClassUtils.instanceOf(value.getClass(), type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.valueOf(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="ValueConverter-数据转换"><a href="#ValueConverter-数据转换" class="headerlink" title="ValueConverter:数据转换"></a><code>ValueConverter</code>:数据转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValueConverter</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">getData</span><span class="params">(Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">getValue</span><span class="params">(Object data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由其所衍生的类:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170319_151726.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170319_150424.png" alt=""></p>
<p>这里只看其中一两个即可:</p>
<h6 id="ClobValueConverter"><a href="#ClobValueConverter" class="headerlink" title="ClobValueConverter:"></a><code>ClobValueConverter</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.converter;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValueConverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Reader;</div><div class="line"><span class="keyword">import</span> java.sql.Clob;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClobValueConverter</span> <span class="keyword">implements</span> <span class="title">ValueConverter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Clob) &#123;</div><div class="line">            Clob clobData = ((Clob) data);</div><div class="line">            <span class="keyword">try</span> (Reader reader = clobData.getCharacterStream()) &#123;</div><div class="line">                <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) clobData.length()];</div><div class="line">                reader.read(chars);</div><div class="line">                data = <span class="keyword">new</span> String(chars);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="BooleanValueConverter"><a href="#BooleanValueConverter" class="headerlink" title="BooleanValueConverter:"></a><code>BooleanValueConverter</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.converter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValueConverter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooleanValueConverter</span> <span class="keyword">implements</span> <span class="title">ValueConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == data) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Boolean) <span class="keyword">return</span> data;</div><div class="line">        <span class="keyword">return</span> <span class="string">"1"</span>.equals(String.valueOf(data)) || <span class="string">"true"</span>.equals(String.valueOf(data));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="对象包装ObjectWrapper"><a href="#对象包装ObjectWrapper" class="headerlink" title="对象包装ObjectWrapper:"></a>对象包装<code>ObjectWrapper</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对象包装器，在执行查询时，通过包装器对查询结果进行初始化</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObjectWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行初始化,在sql执行后,包装结果前,将调用此方法,传入查询的列</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> columns 列集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(List&lt;String&gt; columns)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &lt;C extends T&gt; <span class="function">Class&lt;C&gt; <span class="title">getType</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建对象实例</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 对象实例</div><div class="line">     */</div><div class="line">    <span class="function">T <span class="title">newInstance</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向实例中填充一个属性值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> instance 实例对象</div><div class="line">     * <span class="doctag">@param</span> index    当前实例的索引</div><div class="line">     * <span class="doctag">@param</span> attr     属性名称</div><div class="line">     * <span class="doctag">@param</span> value    属性值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wrapper</span><span class="params">(T instance, <span class="keyword">int</span> index, String attr, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当一个实例被填充完成后调用，已进行其他操作</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> instance 实例对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">done</span><span class="params">(T instance)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其衍生的类:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170319_152320.png" alt=""></p>
<h5 id="触发-Trigger"><a href="#触发-Trigger" class="headerlink" title="触发:Trigger:"></a>触发:<code>Trigger</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Trigger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Map&lt;String, Object&gt; context)</span></span>;</div><div class="line"></div><div class="line">    String select_before       = <span class="string">"select.before"</span>;</div><div class="line">    String select_wrapper_each = <span class="string">"select.wrapper.each"</span>;</div><div class="line">    String select_wrapper_done = <span class="string">"select.wrapper.done"</span>;</div><div class="line">    String select_done         = <span class="string">"select.done"</span>;</div><div class="line">    String insert_before       = <span class="string">"insert.before"</span>;</div><div class="line">    String insert_done         = <span class="string">"insert.done"</span>;</div><div class="line">    String update_before       = <span class="string">"update.before"</span>;</div><div class="line">    String update_done         = <span class="string">"update.done"</span>;</div><div class="line">    String delete_before       = <span class="string">"delete.before"</span>;</div><div class="line">    String delete_done         = <span class="string">"delete.done"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="定义TableMetaData"><a href="#定义TableMetaData" class="headerlink" title="定义TableMetaData"></a>定义<code>TableMetaData</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.PropertyWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.Trigger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TableMetaData</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getComment</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getAlias</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends DatabaseMetaData&gt; <span class="function">T <span class="title">getDatabaseMetaData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends ColumnMetaData&gt; <span class="function">Set&lt;T&gt; <span class="title">getColumns</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends ColumnMetaData&gt; <span class="function">T <span class="title">getColumn</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends ColumnMetaData&gt; <span class="function">T <span class="title">findColumn</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">ObjectWrapper&lt;T&gt; <span class="title">getObjectWrapper</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">getProperty</span><span class="params">(String property)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">getProperty</span><span class="params">(String property, Object defaultValue)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">setProperty</span><span class="params">(String property, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(String name, Trigger trigger)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(String name, Map&lt;String, Object&gt; triggerContext)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">triggerIsSupport</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>里面包含有表名字，注释，别名，然后就是表所属数据库的元数据信息，表包含列的元数据信息，以及对象的包装，属性的包装，见上面对象包装，属性的包装，以及通过<code>on()</code>方法对<code>Trigger</code>使用</p>
<h5 id="定义DatabaseMetaData"><a href="#定义DatabaseMetaData" class="headerlink" title="定义DatabaseMetaData"></a>定义<code>DatabaseMetaData</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapperFactory;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValidatorFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DatabaseMetaData</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">ObjectWrapperFactory <span class="title">getObjectWrapperFactory</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">ValidatorFactory <span class="title">getValidatorFactory</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>个人认为，其实这里表达的就是衔接的意思，<code>ObjectWrapper</code>和<code>TableMetaData</code>信息的对应(等以后有新的理解了再来修改的)</p>
<p><code>ValidatorFactory</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.TableMetaData;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidatorFactory</span> </span>&#123;</div><div class="line">    <span class="function">Validator <span class="title">createValidator</span><span class="params">(TableMetaData tableMetaData)</span></span>;<span class="comment">//源码里暂时未使用到该接口方法定义</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Validator</code>其实是对<code>INSERT, UPDATE</code>操作和相应数据进行下验证</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Validator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(Object data, Operation operation)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">enum</span> Operation &#123;</div><div class="line">        INSERT, UPDATE</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="定义ColumnMetaData"><a href="#定义ColumnMetaData" class="headerlink" title="定义ColumnMetaData"></a>定义<code>ColumnMetaData</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.OptionConverter;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.PropertyWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValueConverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ColumnMetaData</span> <span class="keyword">extends</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getAlias</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getComment</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Class <span class="title">getJavaType</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">ValueConverter <span class="title">getValueConverter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">OptionConverter <span class="title">getOptionConverter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Set&lt;String&gt; <span class="title">getValidator</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">getProperty</span><span class="params">(String property)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">getProperty</span><span class="params">(String property, Object defaultValue)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">setProperty</span><span class="params">(String property, Object value)</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends ColumnMetaData&gt; <span class="function">T <span class="title">clone</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>里面包含有表名字，注释，别名，然后就是列所属表的元数据信息，表包含列的元数据信息，以及值的转换，选项的转换，属性的包装，见上面数据转换，属性的包装小节，以及通过<code>clone()</code>方法返回相应的<code>ColumnMetaData</code>的实现</p>
<h5 id="TableMetaDataStorage定义"><a href="#TableMetaDataStorage定义" class="headerlink" title="TableMetaDataStorage定义"></a><code>TableMetaDataStorage</code>定义</h5><p>以上三个MetaData元素定义完之后，通过<code>TableMetaDataStorage</code>来对表元数据做存储方面的一些操作:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta.storage;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.TableMetaData;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TableMetaDataStorage</span> </span>&#123;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">Set&lt;T&gt; <span class="title">getAllTableMetaData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">(String nameOrAlias)</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">removeTableMeta</span><span class="params">(String nameOrAlias)</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">putTableMetaData</span><span class="params">(T table)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为本就是<code>key-value</code>形式保存的，那么很自然就衍生成map类型的实现类: 都是一些map方面的操作，就不多说了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta.storage;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.TableMetaData;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTableMetaDataStorage</span> <span class="keyword">implements</span> <span class="title">TableMetaDataStorage</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, TableMetaData&gt; nameTableMetaDataStorage  = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, TableMetaData&gt; aliasTableMetaDataStorage = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">Set&lt;T&gt; <span class="title">getAllTableMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;T&gt; all = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        all.addAll((Set) nameTableMetaDataStorage.values());</div><div class="line">        <span class="keyword">return</span> all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">(String nameOrAlias)</span> </span>&#123;</div><div class="line">        T old = (T) nameTableMetaDataStorage.get(nameOrAlias);</div><div class="line">        <span class="keyword">if</span> (old == <span class="keyword">null</span>) old = (T) aliasTableMetaDataStorage.get(nameOrAlias);</div><div class="line">        <span class="keyword">return</span> old;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">removeTableMeta</span><span class="params">(String nameOrAlias)</span> </span>&#123;</div><div class="line">        T old = (T) nameTableMetaDataStorage.remove(nameOrAlias);</div><div class="line">        T old2 = (T) aliasTableMetaDataStorage.remove(nameOrAlias);</div><div class="line">        <span class="keyword">return</span> old != <span class="keyword">null</span> ? old : old2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">putTableMetaData</span><span class="params">(T table)</span> </span>&#123;</div><div class="line">        nameTableMetaDataStorage.put(table.getName(), table);</div><div class="line">        <span class="keyword">if</span> (!table.getName().equals(table.getAlias())) &#123;</div><div class="line">            nameTableMetaDataStorage.put(table.getAlias(), table);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> table;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        nameTableMetaDataStorage.clear();</div><div class="line">        aliasTableMetaDataStorage.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="对上面定义的三个元数据类型接口的抽象实现"><a href="#对上面定义的三个元数据类型接口的抽象实现" class="headerlink" title="对上面定义的三个元数据类型接口的抽象实现:"></a>对上面定义的三个元数据类型接口的抽象实现:</h5><h6 id="对于DatabaseMetaData的初步通用实现"><a href="#对于DatabaseMetaData的初步通用实现" class="headerlink" title="对于DatabaseMetaData的初步通用实现:"></a>对于<code>DatabaseMetaData</code>的初步通用实现:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapperFactory;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValidatorFactory;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.storage.MapTableMetaDataStorage;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.storage.TableMetaDataStorage;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDatabaseMetaData</span> <span class="keyword">implements</span> <span class="title">DatabaseMetaData</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> ObjectWrapperFactory objectWrapperFactory;</div><div class="line">    <span class="keyword">protected</span> ValidatorFactory     validatorFactory;</div><div class="line">    <span class="keyword">protected</span> TableMetaDataStorage tableMetaDataStorage=<span class="keyword">new</span> MapTableMetaDataStorage();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tableMetaDataStorage.getTableMetaData(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ObjectWrapperFactory <span class="title">getObjectWrapperFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objectWrapperFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ValidatorFactory <span class="title">getValidatorFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> validatorFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectWrapperFactory</span><span class="params">(ObjectWrapperFactory objectWrapperFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.objectWrapperFactory = objectWrapperFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidatorFactory</span><span class="params">(ValidatorFactory validatorFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.validatorFactory = validatorFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTableMetaDataStorage</span><span class="params">(TableMetaDataStorage tableMetaDataStorage)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tableMetaDataStorage = tableMetaDataStorage;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="对于TableMetaData的初步通用实现"><a href="#对于TableMetaData的初步通用实现" class="headerlink" title="对于TableMetaData的初步通用实现:"></a>对于<code>TableMetaData</code>的初步通用实现:</h6><p><code>properties</code> <code>triggerBase</code>都是用map<string,t>来进行相应包装</string,t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTableMetaData</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">AbstractColumnMetaData</span>&gt; <span class="keyword">implements</span> <span class="title">TableMetaData</span> </span>&#123;</div><div class="line">    <span class="comment">//表名称</span></div><div class="line">    <span class="keyword">protected</span> String               name                   = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//表别名,如果指定了别名,查询结果将使用别名进行封装</span></div><div class="line">    <span class="keyword">protected</span> String               alias                  = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//备注</span></div><div class="line">    <span class="keyword">protected</span> String               comment                = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//表字段</span></div><div class="line">    <span class="keyword">protected</span> Map&lt;String, C&gt;       columnMetaDataMap      = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, C&gt;       aliasColumnMetaDataMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Validator            validator              = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">protected</span> ObjectWrapper        objectWrapper          = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt;  properties             = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, Trigger&gt; triggerBase            = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">ObjectWrapper&lt;T&gt; <span class="title">getObjectWrapper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objectWrapper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectWrapper</span><span class="params">(ObjectWrapper objectWrapper)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.objectWrapper = objectWrapper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAlias</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (alias == <span class="keyword">null</span>) alias = name;</div><div class="line">        <span class="keyword">return</span> alias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends AbstractTableMetaData&lt;C&gt;&gt; <span class="function">T <span class="title">addColumn</span><span class="params">(C columnMetaData)</span> </span>&#123;</div><div class="line">        columnMetaData.setTableMetaData(<span class="keyword">this</span>);</div><div class="line">        columnMetaDataMap.put(columnMetaData.getName(), columnMetaData);</div><div class="line">        <span class="keyword">if</span> (!columnMetaData.getName().equals(columnMetaData.getAlias()))</div><div class="line">            aliasColumnMetaDataMap.put(columnMetaData.getAlias(), columnMetaData);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlias</span><span class="params">(String alias)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.alias = alias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(String triggerName, Trigger trigger)</span> </span>&#123;</div><div class="line">        triggerBase.put(triggerName, trigger);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(String triggerName, Map&lt;String, Object&gt; context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (triggerIsSupport(triggerName)) &#123;</div><div class="line">            Trigger trigger = triggerBase.get(triggerName);</div><div class="line">            trigger.execute(context);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;C&gt; <span class="title">getColumns</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinkedHashSet&lt;&gt;(columnMetaDataMap.values());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeColumn</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        columnMetaDataMap.remove(name);</div><div class="line">        aliasColumnMetaDataMap.remove(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">triggerIsSupport</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> triggerBase.containsKey(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.get(name));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">getProperty</span><span class="params">(String name, Object defaultValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.getOrDefault(name, defaultValue));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">removeProperty</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.remove(name));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">setProperty</span><span class="params">(String property, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.put(property, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> C <span class="title">findColumn</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getComment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> comment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> C <span class="title">getColumn</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        C metaData = columnMetaDataMap.get(name);</div><div class="line">        <span class="keyword">if</span> (metaData == <span class="keyword">null</span>) metaData = aliasColumnMetaDataMap.get(name);</div><div class="line">        <span class="keyword">return</span> metaData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComment</span><span class="params">(String comment)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.comment = comment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Map&lt;String, Object&gt; properties)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.properties = properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> validator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidator</span><span class="params">(Validator validator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.validator = validator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name + <span class="string">" ["</span> + alias + <span class="string">"]"</span> + <span class="string">"("</span> + comment + <span class="string">")"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="对于ColumnMetaData的初步通用实现"><a href="#对于ColumnMetaData的初步通用实现" class="headerlink" title="对于ColumnMetaData的初步通用实现:"></a>对于<code>ColumnMetaData</code>的初步通用实现:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.OptionConverter;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.PropertyWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.SimplePropertyWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValueConverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractColumnMetaData</span> <span class="keyword">implements</span> <span class="title">ColumnMetaData</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> String          name;</div><div class="line">    <span class="keyword">protected</span> String          alias;</div><div class="line">    <span class="keyword">protected</span> String          comment;</div><div class="line">    <span class="keyword">protected</span> Class           javaType;</div><div class="line">    <span class="keyword">protected</span> TableMetaData   tableMetaData;</div><div class="line">    <span class="keyword">protected</span> OptionConverter optionConverter;</div><div class="line">    <span class="keyword">protected</span> ValueConverter  valueConverter;</div><div class="line">    <span class="keyword">protected</span> Set&lt;String&gt;     validator;</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt; properties = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAlias</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (alias == <span class="keyword">null</span>) alias = name;</div><div class="line">        <span class="keyword">return</span> alias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getComment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (comment == <span class="keyword">null</span>) comment = <span class="string">""</span>;</div><div class="line">        <span class="keyword">return</span> comment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">getJavaType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> javaType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> validator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) tableMetaData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ValueConverter <span class="title">getValueConverter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> valueConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OptionConverter <span class="title">getOptionConverter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> optionConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">getProperty</span><span class="params">(String property)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.get(property));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">getProperty</span><span class="params">(String property, Object defaultValue)</span> </span>&#123;</div><div class="line">        Object value = properties.get(property);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(value == <span class="keyword">null</span> ? defaultValue : value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">setProperty</span><span class="params">(String property, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.put(property, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlias</span><span class="params">(String alias)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.alias = alias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComment</span><span class="params">(String comment)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.comment = comment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJavaType</span><span class="params">(Class javaType)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.javaType = javaType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTableMetaData</span><span class="params">(TableMetaData tableMetaData)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tableMetaData = tableMetaData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOptionConverter</span><span class="params">(OptionConverter optionConverter)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.optionConverter = optionConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValueConverter</span><span class="params">(ValueConverter valueConverter)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.valueConverter = valueConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidator</span><span class="params">(Set&lt;String&gt; validator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.validator = validator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Map&lt;String, Object&gt; properties)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.properties = properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractColumnMetaData <span class="title">clone</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因篇幅有点长，增删改查的相关操作在下一篇中说</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hsweb的系列学习——hsweb-easy-orm分析-上&quot;&gt;&lt;a href=&quot;#hsweb的系列学习——hsweb-easy-orm分析-上&quot; class=&quot;headerlink&quot; title=&quot;hsweb的系列学习——hsweb-easy-orm分析  上&quot;&gt;&lt;/a&gt;hsweb的系列学习——hsweb-easy-orm分析  上&lt;/h1&gt;&lt;h2 id=&quot;对于此orm框架的封装，首先要看的便是-hsweb-easy-orm-core&quot;&gt;&lt;a href=&quot;#对于此orm框架的封装，首先要看的便是-hsweb-easy-orm-core&quot; class=&quot;headerlink&quot; title=&quot;对于此orm框架的封装，首先要看的便是:hsweb-easy-orm-core&quot;&gt;&lt;/a&gt;对于此orm框架的封装，首先要看的便是:&lt;code&gt;hsweb-easy-orm-core&lt;/code&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;整体思路:因为是为动态表单设计的orm框架，所以要有为映射包装的PO类和反映到表元素的元数据类MetaData，&lt;/p&gt;
&lt;p&gt;以及对这些bean进行操作的各种周边(最多的也就是curd的细节分拆)&lt;br&gt;
    
    </summary>
    
      <category term="hsweb" scheme="https://muyinchen.github.io/categories/hsweb/"/>
    
    
      <category term="hsweb" scheme="https://muyinchen.github.io/tags/hsweb/"/>
    
  </entry>
  
  <entry>
    <title>一个轻量级分布式 RPC 框架 上</title>
    <link href="https://muyinchen.github.io/2017/03/16/%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%88%86%E5%B8%83%E5%BC%8F%20RPC%20%E6%A1%86%E6%9E%B6%20%E4%B8%8A/"/>
    <id>https://muyinchen.github.io/2017/03/16/轻量级分布式 RPC 框架 上/</id>
    <published>2017-03-16T11:05:26.277Z</published>
    <updated>2017-03-26T10:19:05.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个轻量级分布式-RPC-框架-上"><a href="#一个轻量级分布式-RPC-框架-上" class="headerlink" title="一个轻量级分布式 RPC 框架 上"></a>一个轻量级分布式 RPC 框架 上</h1><p>RPC，即 Remote Procedure Call（远程过程调用），说得通俗一点就是：调用远程计算机上的服务，就像调用本地服务一样。</p>
<p>具体的介绍就不多说了，通过搜索引擎可以获得很多这方面的介绍。</p>
<p>这里推荐一篇文章:<a href="https://my.oschina.net/huangyong/blog/361751" target="_blank" rel="external">https://my.oschina.net/huangyong/blog/361751</a></p>
<p>对于架构的设计，说些自己的看法，不想去说那么抽象，拿一个人来讲:</p>
<p>首先，人体的组成必须要由骨架，这就是表示项目应该有一个总体的架构图。</p>
<p>然后，要有各个器官来各司其职，这就是各个模块了。</p>
<p>再者，各个器官之间要交流，那就需要有个中间件来承载的，这里就是血管，而血液就是信息承载体，里面包含了各种器官需要的物质和生产出的物     质，血液在代码中的体现可能是一个<code>ConcurrentMap</code>。</p>
<p>最后，专注于各个模块的实现，所用的逻辑和技术具体问题具体再分析处理</p>
<a id="more"></a>
<p>首先对此框架的设计图:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/rpc.jpg" alt="图1"></p>
<p>​                                                        <code>图1</code>                            </p>
<p>本文将为您揭晓开发轻量级分布式 <code>RPC</code>框架的具体过程，该框架基于 <code>TCP</code>协议，提供了<code>NIO</code>特性，提供高效的序列化方式，同时也具备服务注册与发现的能力。</p>
<p>根据以上技术需求，我们可使用如下技术选型：</p>
<ol>
<li><code>Spring</code>:   它是最强大的依赖注入框架，也是业界的权威标准。</li>
<li><code>Netty</code>:    它使 <code>NIO</code> 编程更加容易，屏蔽了 Java 底层的 NIO 细节。</li>
<li><code>Kryo</code>:      一个快速高效的Java序列化框架，旨在提供快速、高效和易用的API。无论文件、数据库或网络数据Kryo都可以随时完成序列化</li>
<li><code>ZooKeeper</code>:   提供服务注册与发现功能，开发分布式系统的必备选择，同时它也具备天生的集群能力。</li>
</ol>
<p>Netty 请自己找文章或书学习的，推荐<code>Netty.in.Action</code></p>
<h2 id="编写核心模块"><a href="#编写核心模块" class="headerlink" title="编写核心模块"></a>编写核心模块</h2><p>一个模块下面也是可以根据很多细分的小模块流程来做的</p>
<h3 id="1，编写通用模块"><a href="#1，编写通用模块" class="headerlink" title="1，编写通用模块"></a>1，编写通用模块</h3><p>因为用的是netty，所以对于netty的编程主要考虑几个方面，编解码处理，核心逻辑处理类。编解码处理就涉及到了序列化处理和所要处理的对象，</p>
<p>我们所要请求的包括方法的名称参数和方法所属类，设计上，以一个id为唯一标志，服务端处理完返回的结果同样携带此id，这样就可以很轻松取到了，</p>
<p>这也就是血液所携带的信息的体现。</p>
<h5 id="设计请求和回复类"><a href="#设计请求和回复类" class="headerlink" title="设计请求和回复类:"></a>设计请求和回复类:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.protocol;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestId;</div><div class="line">    <span class="keyword">private</span> Class&lt;?&gt; clazz;</div><div class="line">    <span class="keyword">private</span> String method;</div><div class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] parameterTypes;</div><div class="line">    <span class="keyword">private</span> Object[] params;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestTime;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.protocol;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.Getter;</div><div class="line"><span class="keyword">import</span> lombok.Setter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestId;</div><div class="line">    <span class="keyword">private</span> Object response;</div><div class="line">    <span class="keyword">private</span> Throwable throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于<code>lombok</code>,请看<a href="https://github.com/muyinchen/woker/blob/master/rpc%E6%A1%86%E6%9E%B6%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9/%E9%80%9A%E8%BF%87Lombok%E6%9D%A5%E7%AE%80%E5%8C%96%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81.md" target="_blank" rel="external">通过Lombok来简化你的代码</a></p>
<h5 id="序列化处理类"><a href="#序列化处理类" class="headerlink" title="序列化处理类"></a>序列化处理类</h5><p>先创建一个接口，方便以后有其他序列化实现，这里仅使用<code>Kryo</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.serializer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializer</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] serialize(Object obj);</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体实现步骤很简单，如下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.serializer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</div><div class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</div><div class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KryoSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object obj) &#123;</div><div class="line">        Kryo kryo=<span class="keyword">new</span> Kryo();</div><div class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        Output output = <span class="keyword">new</span> Output(byteArrayOutputStream);</div><div class="line">        kryo.writeClassAndObject(output,obj);</div><div class="line">        output.close();</div><div class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</div><div class="line">        Kryo kryo=<span class="keyword">new</span> Kryo();</div><div class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</div><div class="line">        Input input = <span class="keyword">new</span> Input(byteArrayInputStream);</div><div class="line">        input.close();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (T) kryo.readClassAndObject(input);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="编解码处理类"><a href="#编解码处理类" class="headerlink" title="编解码处理类"></a>编解码处理类</h5><h6 id="编码处理"><a href="#编码处理" class="headerlink" title="编码处理:"></a>编码处理:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.protocol;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.serializer.KryoSerializer;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.serializer.Serializer;</div><div class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.MessageToByteEncoder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Serializer serializer = <span class="keyword">new</span> KryoSerializer();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, Object msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] bytes = serializer.serialize(msg);</div><div class="line">        <span class="keyword">int</span> length = bytes.length;</div><div class="line">        out.writeInt(length);</div><div class="line">        out.writeBytes(bytes);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="解码处理"><a href="#解码处理" class="headerlink" title="解码处理"></a>解码处理</h6><p>注意点请看注释，都是一贯套路 具体关于此类的文档总结:<a href="https://github.com/muyinchen/woker/blob/master/rpc%E6%A1%86%E6%9E%B6%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9/netty%20%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%85%E3%80%81%E7%BB%84%E5%8C%85%E3%80%81%E7%B2%98%E5%8C%85%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6(%E9%83%A8%E5%88%86" target="_blank" rel="external">netty 数据分包、组包、粘包处理机制(部分)</a>.md)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.protocol;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.serializer.KryoSerializer;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.serializer.Serializer;</div><div class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="comment">//常用的处理大数据分包传输问题的解决类:LengthFieldBasedFrameDecoder</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcDecoder</span> <span class="keyword">extends</span> <span class="title">LengthFieldBasedFrameDecoder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RpcDecoder.class);</div><div class="line">    <span class="keyword">private</span> Serializer serializer = <span class="keyword">new</span> KryoSerializer();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcDecoder</span><span class="params">(<span class="keyword">int</span> maxFrameLength)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(maxFrameLength, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ByteBuf decode = (ByteBuf) <span class="keyword">super</span>.decode(ctx, in);</div><div class="line">        <span class="keyword">if</span> (decode != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> byteLength = decode.readableBytes();</div><div class="line">            <span class="keyword">byte</span>[] byteHolder = <span class="keyword">new</span> <span class="keyword">byte</span>[byteLength];</div><div class="line">            decode.readBytes(byteHolder);</div><div class="line">            Object deserialize = serializer.deserialize(byteHolder);</div><div class="line">            <span class="keyword">return</span> deserialize;</div><div class="line">        &#125;</div><div class="line">        LOGGER.debug(<span class="string">"Decoder Result is null"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-编写服务端模块"><a href="#2-编写服务端模块" class="headerlink" title="2,编写服务端模块"></a>2,编写服务端模块</h3><h6 id="首先搞定ip和端口的获取"><a href="#首先搞定ip和端口的获取" class="headerlink" title="首先搞定ip和端口的获取"></a>首先搞定ip和端口的获取</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * IP and Port Helper for RPC</div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 此处实现的并不到位，暂时就这样处理的</div><div class="line">     * 用Java获取本机IP地址，需要处理：</div><div class="line">     *1. 多块网卡。</div><div class="line">     *2. 排除loopback设备、虚拟网卡</div><div class="line">     *看似简单的代码，写起来还是要小心一些的。</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLocalIp</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> InetAddress.getLocalHost().getHostAddress();</div><div class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="服务端对客户端过来方法请求-的处理逻辑"><a href="#服务端对客户端过来方法请求-的处理逻辑" class="headerlink" title="服务端对客户端过来方法请求 的处理逻辑:"></a>服务端对客户端过来方法请求 的处理逻辑:</h6><p>此处的service代码里已经解释过，就是服务端所注册的接口(其实也不一定是接口，对外可能是restful的一个地址)的实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.server;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Request;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Response;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Request</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RpcServerHandler.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object service;</div><div class="line"></div><div class="line">    <span class="comment">//此处传入service的实现类对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcServerHandler</span><span class="params">(Object service)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, Request msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        String methodName = msg.getMethod();</div><div class="line">        Object[] params = msg.getParams();</div><div class="line">        Class&lt;?&gt;[] parameterTypes = msg.getParameterTypes();</div><div class="line">        <span class="keyword">long</span> requestId = msg.getRequestId();</div><div class="line">        <span class="comment">//通过反射来获取客户端所要调用的方法并执行</span></div><div class="line">        Method method = service.getClass().getDeclaredMethod(methodName, parameterTypes);</div><div class="line">        method.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object invoke = method.invoke(service, params);</div><div class="line">        Response response = <span class="keyword">new</span> Response();</div><div class="line">        response.setRequestId(requestId);</div><div class="line">        response.setResponse(invoke);</div><div class="line">        channelHandlerContext.pipeline().writeAndFlush(response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.error(<span class="string">"Exception caught on &#123;&#125;, "</span>, ctx.channel(), cause);</div><div class="line">        ctx.channel().close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="定义服务接口"><a href="#定义服务接口" class="headerlink" title="定义服务接口:"></a>定义服务接口:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.server;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Server</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="服务端主逻辑的实现"><a href="#服务端主逻辑的实现" class="headerlink" title="服务端主逻辑的实现:"></a>服务端主逻辑的实现:</h6><ol>
<li><p>通过Curator来操作zookeeper的节点，具体的使用请看<a href="http://ifeve.com/zookeeper-leader/" target="_blank" rel="external">跟着实例学习ZooKeeper的用法</a></p>
</li>
<li><p>服务端起起来，具体看下面<code>start()</code>代码，都是<code>netty</code>的格式化用法，将之前的准备应用到此</p>
</li>
<li><p>然后调用<code>registerService()</code>方面实现注册逻辑:</p>
<p>​    获取所连接<code>zk</code>地址;</p>
<p>​    获取服务端本地<code>ip</code>;</p>
<p>​    通过<code>Curator</code>创建一个<code>zk</code>的客户端;</p>
<p>​    添加注册基础服务节点    ;</p>
</li>
<li><p><code>关停相关服务的逻辑</code>,具体看下面源码:</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.server;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.RpcDecoder;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.RpcEncoder;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.utils.NetUtils;</div><div class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</div><div class="line"><span class="keyword">import</span> io.netty.channel.Channel;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</div><div class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</div><div class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</div><div class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</div><div class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</div><div class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</div><div class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.nia.rpc.core.utils.Constant.ZK_DATA_PATH;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerImpl</span> <span class="keyword">implements</span> <span class="title">Server</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServerImpl.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String localIp;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> Channel channel;</div><div class="line">    <span class="keyword">private</span> Object serviceImpl;</div><div class="line">    <span class="keyword">private</span> String serviceName;</div><div class="line">    <span class="keyword">private</span> String zkConn;</div><div class="line">    <span class="keyword">private</span> String serviceRegisterPath;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">    <span class="keyword">private</span> EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CuratorFramework curatorFramework;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerImpl</span><span class="params">(<span class="keyword">int</span> port, Object serviceImpl, String serviceName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">        <span class="keyword">this</span>.serviceImpl = serviceImpl;</div><div class="line">        <span class="keyword">this</span>.serviceName = serviceName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerImpl</span><span class="params">(<span class="keyword">int</span> port, Object serviceImpl, String serviceName, String zkConn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">        <span class="keyword">this</span>.serviceImpl = serviceImpl;</div><div class="line">        <span class="keyword">this</span>.serviceName = serviceName;</div><div class="line">        <span class="keyword">this</span>.zkConn = zkConn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">        serverBootstrap.group(bossGroup,workerGroup)</div><div class="line">                       .channel(NioServerSocketChannel.class)</div><div class="line">                       .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line">                           <span class="meta">@Override</span></div><div class="line">                           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                               socketChannel.pipeline()</div><div class="line">                                            .addLast(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line">                                            .addLast(<span class="keyword">new</span> RpcDecoder(<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>))</div><div class="line">                                            .addLast(<span class="keyword">new</span> RpcEncoder())</div><div class="line">                                            .addLast(<span class="keyword">new</span> RpcServerHandler(serviceImpl));</div><div class="line">                           &#125;</div><div class="line">                       &#125;);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//调用bind等待客户端来连接</span></div><div class="line">            ChannelFuture future = serverBootstrap.bind(port).sync();</div><div class="line">            <span class="comment">//接着注册服务</span></div><div class="line">            registerService();</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"Server Started At &#123;&#125;"</span>, port);</div><div class="line">            started = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">this</span>.channel = future.channel();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">()</span> </span>&#123;</div><div class="line">         zkConn = getZkConn();</div><div class="line">         localIp = NetUtils.getLocalIp();</div><div class="line">        String serviceIp=localIp+<span class="string">":"</span>+port;</div><div class="line">        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(zkConn,</div><div class="line">                <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</div><div class="line">        curatorFramework.start();</div><div class="line">        <span class="comment">//连接上zk然后开始注册服务节点</span></div><div class="line">        String serviceBasePath=ZK_DATA_PATH+serviceName;</div><div class="line">        <span class="comment">//添加基础服务节点</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            curatorFramework.create()</div><div class="line">                            .creatingParentContainersIfNeeded()</div><div class="line">                            .forPath(serviceBasePath);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (e.getMessage().contains(<span class="string">"NodeExist"</span>)) &#123;</div><div class="line">                LOGGER.info(<span class="string">"This Path Service has already Exist"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                LOGGER.error(<span class="string">"Create Path Error "</span>, e);</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Register error"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> registerSuccess=<span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="comment">//如果添加成功，添加标识服务具体路径的节点</span></div><div class="line">        <span class="keyword">while</span> (!registerSuccess)&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                curatorFramework.create()</div><div class="line">                                .withMode(CreateMode.EPHEMERAL)</div><div class="line">                                .forPath(serviceBasePath+<span class="string">"/"</span>+serviceIp);</div><div class="line">                <span class="comment">//这里测试出现无限注册，特么坑死了，忘添加状态修改了</span></div><div class="line">                registerSuccess = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="comment">//出错重新注册(要先删除下节点再重新注册)</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">                    e1.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                LOGGER.info(<span class="string">"Retry Register ZK, &#123;&#125;"</span>, e.getMessage());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    curatorFramework.delete().forPath(serviceBasePath + <span class="string">"/"</span> + serviceIp);</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e1) &#123;</div><div class="line">                    e1.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//关停相关服务的逻辑</span></div><div class="line">        LOGGER.info(<span class="string">"Shutting down server &#123;&#125;"</span>, serviceName);</div><div class="line">        unRegister();</div><div class="line">        <span class="keyword">if</span> (curatorFramework != <span class="keyword">null</span>) &#123;</div><div class="line">            curatorFramework.close();</div><div class="line">        &#125;</div><div class="line">        bossGroup.shutdownGracefully();</div><div class="line">        workerGroup.shutdownGracefully();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unRegister</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"unRegister zookeeper"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            curatorFramework.delete().forPath(ZK_DATA_PATH+serviceName+<span class="string">"/"</span>+localIp+<span class="string">":"</span>+port);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getZkConn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> zkConn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZkConn</span><span class="params">(String zkConn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.zkConn = zkConn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocalIp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> localIp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocalIp</span><span class="params">(String localIp)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.localIp = localIp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Channel <span class="title">getChannel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChannel</span><span class="params">(Channel channel)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.channel = channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>暂时先到此，接下来的内容请看下篇</p>
<p>源码查看:<a href="https://github.com/muyinchen/migo-RPC" target="_blank" rel="external">https://github.com/muyinchen/migo-RPC</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个轻量级分布式-RPC-框架-上&quot;&gt;&lt;a href=&quot;#一个轻量级分布式-RPC-框架-上&quot; class=&quot;headerlink&quot; title=&quot;一个轻量级分布式 RPC 框架 上&quot;&gt;&lt;/a&gt;一个轻量级分布式 RPC 框架 上&lt;/h1&gt;&lt;p&gt;RPC，即 Remote Procedure Call（远程过程调用），说得通俗一点就是：调用远程计算机上的服务，就像调用本地服务一样。&lt;/p&gt;
&lt;p&gt;具体的介绍就不多说了，通过搜索引擎可以获得很多这方面的介绍。&lt;/p&gt;
&lt;p&gt;这里推荐一篇文章:&lt;a href=&quot;https://my.oschina.net/huangyong/blog/361751&quot;&gt;https://my.oschina.net/huangyong/blog/361751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于架构的设计，说些自己的看法，不想去说那么抽象，拿一个人来讲:&lt;/p&gt;
&lt;p&gt;首先，人体的组成必须要由骨架，这就是表示项目应该有一个总体的架构图。&lt;/p&gt;
&lt;p&gt;然后，要有各个器官来各司其职，这就是各个模块了。&lt;/p&gt;
&lt;p&gt;再者，各个器官之间要交流，那就需要有个中间件来承载的，这里就是血管，而血液就是信息承载体，里面包含了各种器官需要的物质和生产出的物     质，血液在代码中的体现可能是一个&lt;code&gt;ConcurrentMap&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最后，专注于各个模块的实现，所用的逻辑和技术具体问题具体再分析处理&lt;/p&gt;
    
    </summary>
    
      <category term="RPC" scheme="https://muyinchen.github.io/categories/RPC/"/>
    
    
      <category term="RPC" scheme="https://muyinchen.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑 二</title>
    <link href="https://muyinchen.github.io/2017/03/14/hsweb%E7%9A%84%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0%E4%B9%8BFreeMarker%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%B8%8E%E5%8A%A8%E6%80%81%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8C%96%E4%B8%8E%E5%90%8E%E5%8F%B0%E7%BB%93%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%20%E4%BA%8C/"/>
    <id>https://muyinchen.github.io/2017/03/14/hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑 二/</id>
    <published>2017-03-14T10:49:31.291Z</published>
    <updated>2017-03-14T10:52:12.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑-二"><a href="#hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑-二" class="headerlink" title="hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑 二"></a>hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑 二</h2><h3 id="FreeMarker基础补强请参考-https-github-com-muyinchen-migo-freemaker"><a href="#FreeMarker基础补强请参考-https-github-com-muyinchen-migo-freemaker" class="headerlink" title="FreeMarker基础补强请参考:https://github.com/muyinchen/migo-freemaker"></a>FreeMarker基础补强请参考:<a href="https://github.com/muyinchen/migo-freemaker" target="_blank" rel="external">https://github.com/muyinchen/migo-freemaker</a></h3> <a id="more"></a>
<h3 id="首先是对登录逻辑的处理"><a href="#首先是对登录逻辑的处理" class="headerlink" title="首先是对登录逻辑的处理:"></a>首先是对登录逻辑的处理:</h3><p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_135250.png" alt=""></p>
<p><code>图1</code></p>
<h4 id="通过一个ajax来访问，返回的数据信息表示成功就会访问到图17的逻辑"><a href="#通过一个ajax来访问，返回的数据信息表示成功就会访问到图17的逻辑" class="headerlink" title="通过一个ajax来访问，返回的数据信息表示成功就会访问到图17的逻辑"></a>通过一个ajax来访问，返回的数据信息表示成功就会访问到<code>图17</code>的逻辑</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_135919.png" alt=""><br><code>图2</code></p>
<p><code>图3</code>是对<code>图2</code>的登录逻辑的展示</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_213442.png" alt=""><br><code>图3</code></p>
<h4 id="登录之后跳转到index-ftl-在此请看红色标记"><a href="#登录之后跳转到index-ftl-在此请看红色标记" class="headerlink" title="登录之后跳转到index.ftl,在此请看红色标记:"></a>登录之后跳转到<code>index.ftl</code>,在此请看红色标记:</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_144954.png" alt=""><br><code>图4</code></p>
<h4 id="通过macro来自定义一个指令api-定义内容见图5"><a href="#通过macro来自定义一个指令api-定义内容见图5" class="headerlink" title="通过macro来自定义一个指令api,定义内容见图5"></a>通过<code>macro</code>来自定义一个指令<code>api</code>,定义内容见<code>图5</code></h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_145405.png" alt=""><br><code>图5</code></p>
<p>通过上述的定义逻辑会访问到<code>UserModuleController.class</code>里的相应处理逻辑,如下图所示:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_150214.png" alt=""><br><code>图6</code></p>
<h2 id="index页面js处理逻辑"><a href="#index页面js处理逻辑" class="headerlink" title="index页面js处理逻辑"></a><code>index</code>页面<code>js</code>处理逻辑</h2><h4 id="对返回的数据进行展示"><a href="#对返回的数据进行展示" class="headerlink" title="对返回的数据进行展示:"></a>对返回的数据进行展示:</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_150622.png" alt=""><br><code>图7</code></p>
<h4 id="对onNodeClick事件的处理"><a href="#对onNodeClick事件的处理" class="headerlink" title="对onNodeClick事件的处理:"></a>对<code>onNodeClick</code>事件的处理:</h4><p>在此举个小例子:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"tree1"</span> <span class="attr">class</span>=<span class="string">"mini-tree"</span> <span class="attr">url</span>=<span class="string">"../data/tree.txt"</span> <span class="attr">style</span>=<span class="string">"width:300px;padding:5px;"</span></span></div><div class="line">                    <span class="attr">showTreeIcon</span>=<span class="string">"true"</span> <span class="attr">textField</span>=<span class="string">"text"</span> <span class="attr">idField</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"base"</span>                                    <span class="attr">expandOnNodeClick</span>=<span class="string">"true"</span></div><div class="line">                    <span class="attr">onNodeClick</span>=<span class="string">"onNodeClick"</span></div><div class="line">                    &gt;        </div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">function onNodeClick()&#123;</div><div class="line">          var tree=mini.get("tree1")</div><div class="line">               node=tree.getSelectedNode()</div><div class="line">          alert(node.text);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_152749.png" alt=""><br><code>图8</code></p>
<p>乱入一张，防止有些小伙伴迷糊，通过配置文件查看可以得知，返回的地址的后缀名统一为<code>.ftl</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_154651.png" alt=""><br><code>图9</code></p>
<h4 id="对图8中Request-BASH-PATH的解读"><a href="#对图8中Request-BASH-PATH的解读" class="headerlink" title="对图8中Request.BASH_PATH的解读"></a>对<code>图8</code>中<code>Request.BASH_PATH</code>的解读</h4><p>同样，先通过<code>macro</code>来自定义一个指令<code>basePath</code>,注意需要后端传入的模型视图(<code>ModelAndView</code> )中的参数名称为<code>absPath</code>,然后看<code>图10</code>的</p>
<p>箭头所指:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_165039.png" alt=""><br><code>图10</code></p>
<p><code>图11</code>的逻辑就是先通过模型视图找到<code>admin</code>下的<code>login.ftl</code>,填完相应信息再提交给<code>图3</code>的逻辑处理，因为就近原则的关系，<code>hsdemo</code>已经在<code>index.ftl</code>有此逻辑了，可以在自己的项目中调用此模板来处理的</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_165911.png" alt=""><br><code>图11</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_173628.png" alt=""><br><code>图12</code></p>
<p>通过<code>图12</code>可以看到在此对地址进行转换</p>
<h3 id="对其他访问逻辑的处理"><a href="#对其他访问逻辑的处理" class="headerlink" title="对其他访问逻辑的处理"></a>对其他访问逻辑的处理</h3><p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_165251.png" alt=""><br><code>图13</code></p>
<h4 id="以点击表单管理为例"><a href="#以点击表单管理为例" class="headerlink" title="以点击表单管理为例:"></a>以点击<code>表单管理</code>为例:</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_174234.png" alt=""><br><code>图14</code><br>结合图15:</p>
<p>第一个访问连接<code>http://127.0.0.1:8080/admin/form/list.html?_t=769104&amp;_winid=w7605</code>，因为已经经过处理并放入到模型视图(<code>ModelAndView</code> )中，所以会直接访问到下图的<code>list.ftl</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_173753.png" alt=""><br><code>图15</code><br>从<code>图15</code>的红色标记可以看出，访问的链接地址将要跳转到:<code>&quot;http://127.0.0.1:8080/form/~latest&quot;</code>,最后，结合<code>图14</code>，访问相应逻辑</p>
<p>最后再补两张图的,方便理解:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_153032.png" alt=""><br><code>图16</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170314_154442.png" alt=""><br><code>图17</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑-二&quot;&gt;&lt;a href=&quot;#hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑-二&quot; class=&quot;headerlink&quot; title=&quot;hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑 二&quot;&gt;&lt;/a&gt;hsweb的系列学习之FreeMarker模板引擎与动态页面静态化与后台结合的一些处理逻辑 二&lt;/h2&gt;&lt;h3 id=&quot;FreeMarker基础补强请参考-https-github-com-muyinchen-migo-freemaker&quot;&gt;&lt;a href=&quot;#FreeMarker基础补强请参考-https-github-com-muyinchen-migo-freemaker&quot; class=&quot;headerlink&quot; title=&quot;FreeMarker基础补强请参考:https://github.com/muyinchen/migo-freemaker&quot;&gt;&lt;/a&gt;FreeMarker基础补强请参考:&lt;a href=&quot;https://github.com/muyinchen/migo-freemaker&quot;&gt;https://github.com/muyinchen/migo-freemaker&lt;/a&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="hsweb" scheme="https://muyinchen.github.io/categories/hsweb/"/>
    
    
      <category term="hsweb" scheme="https://muyinchen.github.io/tags/hsweb/"/>
    
  </entry>
  
  <entry>
    <title>hsweb的系列学习——hsweb-demo使用步骤</title>
    <link href="https://muyinchen.github.io/2017/03/13/hsweb%E7%9A%84%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94hsweb-demo%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4/"/>
    <id>https://muyinchen.github.io/2017/03/13/hsweb的系列学习——hsweb-demo使用步骤/</id>
    <published>2017-03-13T13:53:51.880Z</published>
    <updated>2017-03-14T05:39:43.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hsweb的系列学习——hsweb-demo使用步骤"><a href="#hsweb的系列学习——hsweb-demo使用步骤" class="headerlink" title="hsweb的系列学习——hsweb-demo使用步骤"></a>hsweb的系列学习——<a href="https://github.com/hs-web/hsweb-demo" target="_blank" rel="external">hsweb-demo</a>使用步骤</h1><h5 id="项目要求：请提前熟悉Java8里面的各种新增的东西，如lambda和Stream"><a href="#项目要求：请提前熟悉Java8里面的各种新增的东西，如lambda和Stream" class="headerlink" title="项目要求：请提前熟悉Java8里面的各种新增的东西，如lambda和Stream"></a>项目要求：请提前熟悉Java8里面的各种新增的东西，如lambda和Stream</h5> <a id="more"></a>
<h2 id="运行步骤："><a href="#运行步骤：" class="headerlink" title="运行步骤："></a>运行步骤：</h2><h4 id="首先导入项目，等待项目构建完毕。"><a href="#首先导入项目，等待项目构建完毕。" class="headerlink" title="首先导入项目，等待项目构建完毕。"></a>首先导入项目，等待项目构建完毕。</h4><h4 id="其次操作步骤看下图看下图"><a href="#其次操作步骤看下图看下图" class="headerlink" title="其次操作步骤看下图看下图:"></a>其次操作步骤看下图看下图:</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_211309.png" alt=""></p>
<h5 id="会生成如下表"><a href="#会生成如下表" class="headerlink" title="会生成如下表:"></a>会生成如下表:</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_212336.png" alt=""></p>
<h5 id="管理员-密码同样是admin"><a href="#管理员-密码同样是admin" class="headerlink" title="管理员:(密码同样是admin)"></a>管理员:(密码同样是admin)</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_213141.png" alt=""></p>
<h5 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑:"></a>登录逻辑:</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_213442.png" alt=""></p>
<p>定位到这块代码往下找:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_213732.png" alt=""></p>
<p>找到对外接口服务模块：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_213955.png" alt=""></p>
<p>此接口实现模块:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_214255.png" alt=""></p>
<p>就先到此吧，要不就扯多了</p>
<h5 id="登录后请看后台输出-可以看出请求走向"><a href="#登录后请看后台输出-可以看出请求走向" class="headerlink" title="登录后请看后台输出:(可以看出请求走向)"></a>登录后请看后台输出:(可以看出请求走向)</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp170313_213001.png" alt=""></p>
<p>下节说</p>
<p>FreeMarker模板引擎与动态页面静态化 在项目中的使用和跳转</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hsweb的系列学习——hsweb-demo使用步骤&quot;&gt;&lt;a href=&quot;#hsweb的系列学习——hsweb-demo使用步骤&quot; class=&quot;headerlink&quot; title=&quot;hsweb的系列学习——hsweb-demo使用步骤&quot;&gt;&lt;/a&gt;hsweb的系列学习——&lt;a href=&quot;https://github.com/hs-web/hsweb-demo&quot;&gt;hsweb-demo&lt;/a&gt;使用步骤&lt;/h1&gt;&lt;h5 id=&quot;项目要求：请提前熟悉Java8里面的各种新增的东西，如lambda和Stream&quot;&gt;&lt;a href=&quot;#项目要求：请提前熟悉Java8里面的各种新增的东西，如lambda和Stream&quot; class=&quot;headerlink&quot; title=&quot;项目要求：请提前熟悉Java8里面的各种新增的东西，如lambda和Stream&quot;&gt;&lt;/a&gt;项目要求：请提前熟悉Java8里面的各种新增的东西，如lambda和Stream&lt;/h5&gt;
    
    </summary>
    
      <category term="hsweb" scheme="https://muyinchen.github.io/categories/hsweb/"/>
    
    
      <category term="hsweb" scheme="https://muyinchen.github.io/tags/hsweb/"/>
    
  </entry>
  
  <entry>
    <title>说一说Android Studio和IDEA中一个很有用的内存调试插件</title>
    <link href="https://muyinchen.github.io/2017/02/05/Android%20Studio%E5%92%8CIDEA%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E5%86%85%E5%AD%98%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6/"/>
    <id>https://muyinchen.github.io/2017/02/05/Android Studio和IDEA中一个很有用的内存调试插件/</id>
    <published>2017-02-05T09:34:50.894Z</published>
    <updated>2017-02-05T09:41:16.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说一说Android-Studio和IDEA中一个很有用的内存调试插件"><a href="#说一说Android-Studio和IDEA中一个很有用的内存调试插件" class="headerlink" title="说一说Android Studio和IDEA中一个很有用的内存调试插件"></a>说一说Android Studio和IDEA中一个很有用的内存调试插件</h1> <a id="more"></a>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-fzVh7Fe1lbTWD_JUPw2chg.png" alt="img">JetBrains JVM Debugger Memory View plugin</p>
<p>在我最近的研发活动期间寻找新的工具，以提高我的开发经验，使Android Studio的生活更轻松，我发现一个有用的插件，我从来没有听说过。 这就是为什么，我决定写这个强大的工具，它如何帮助我与内存调试我的应用程序。</p>
<hr>
<h3 id="What-is-the-plugin-about"><a href="#What-is-the-plugin-about" class="headerlink" title="What is the plugin about?"></a>What is the plugin about?</h3><p>根据<a href="https://plugins.jetbrains.com/idea/plugin/8537-jvm-debugger-memory-view" target="_blank" rel="external">plugin page</a>:</p>
<blockquote>
<p>此插件扩展了内置的JVM调试器，具有在调试会话期间观察JVM堆中的对象的功能。</p>
<p>内存视图按照类名称分组来显示<strong>堆中的对象总数</strong>。</p>
<p>当你一步步调试代码时，<strong>“Diff”列显示调试器停靠点(debugger stops也就是debug点)之间对象数量的变化</strong>。 这种方式你可以很容易地看到你的步进代码如何影响堆。</p>
<p>双击类名称，打开一个包含该类实例的对话框。 该对话框允许您<strong>通过计算表达式过滤实例</strong>。 所有调试器操作（如检查，标记对象，评估表达式，添加到观察等）都可以应用于此对话框中的实例。</p>
</blockquote>
<hr>
<h3 id="How-to-install-this-wonderful-plugin"><a href="#How-to-install-this-wonderful-plugin" class="headerlink" title="How to install this wonderful plugin?"></a>How to install this wonderful plugin?</h3><p>打开Android Studio <strong>Plugins</strong>页面：</p>
<ul>
<li><strong>快捷键：</strong>按<strong>command/ ctrl </strong> + <strong> shift </strong> + <strong>A，</strong>类型 <strong>插件</strong> 随后，按<strong>enter</strong>键：</li>
<li>或打开 <strong>Preferences/Settings:</strong>（Mac：Android Studio - &gt;Preferences<strong> / </strong> Windows和Linux：File - &gt;Settings）并找到<strong>Plugins</strong>页面：</li>
</ul>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-f4Qh8IQIF6-ggoMYgS9aWw.png" alt="img"></p>
<p>按<strong>Install jetBrains plugin… </strong>按钮，搜索<strong> JVM Debugger Memory View </strong>然后<strong> Install </strong>。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-sTEGaAc5YNHz2mKK623m7Q.png" alt="img"></p>
<p>装完重新启动Android Studio。</p>
<h4 id="At-first-glance"><a href="#At-first-glance" class="headerlink" title="At first glance:"></a>At first glance:</h4><p>回到Android Studio后，您会发现<strong>Memory View Tool Window</strong>已经添加到工具栏的右侧。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-EKFuuY55653LlZq8oOV-RQ.png" alt="img"></p>
<p>Memory View Tool Window</p>
<p>内存视图工具窗口</p>
<blockquote>
<p>如果没有看到内存视图，打开工具窗口，使用主菜单：<em>View</em>→<em>Tool Windows </em>→<em>Memory View</em>。</p>
</blockquote>
<p>首先，这个工具只有在打了调试断点并在<em>debug模式</em>运行期间才会显示数据。</p>
<p>其次，我要提到的是，我阅读了Android Studio可能会发生的一些警告和错误，不过，我并没有碰到过。</p>
<blockquote>
<p><strong>警告</strong>：Android Studio版本包含以下限制：</p>
<ul>
<li><p>由于Android内存限制，获取大量的实例可能会失败，并会停止VM。</p>
</li>
<li><p>Android Studio可能会停止响应，请参阅<a href="https://code.google.com/p/android/issues/detail?id=198940&amp;q=subcomponent%3DTools-debugger%20label%3ASubcomponent-Tools-debugger&amp;colspec= ID％20Status％20Priority％20Owner％20Summary％20Stars％20Reporter％20Opened" target="_blank" rel="external">此错误</a></p>
</li>
</ul>
<hr>
</blockquote>
<h3 id="Let’s-debug"><a href="#Let’s-debug" class="headerlink" title="Let’s debug!"></a>Let’s debug!</h3><p>在调试模式下运行应用程序并在BreakPoint上暂停后，您会看到很神奇的画面：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-op2Ga0mTqxxT5SOblPxjAQ.png" alt="img"></p>
<p>这个表让我们最感兴趣的地方是<strong>Diff </strong>”列，当你一步步调试代码行时，你将看到会有多少新的对象实例被创建或销毁！</p>
<p>我想寻找我自己的对象<em>（即ProfileModel类）</em>，所以我搜索它：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-xe0Njts0YXkGb0-Enest4Q.png" alt="img"></p>
<p>正如你可以看到我已经在这行代码更新了ProfileModel vairable，在GC删除旧对象之前我得到差异是+1 ，也可以访问之前不可能访问到的旧的对象。 通过双击这条记录，我将在窗口中获取ProfileModel类的实例：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-iE7_NZ7Llcuevd3Rl8-YQg.png" alt="img"></p>
<p>此窗口还允许你使用类方法通过计算的表达式过滤实例，例如，您可以使用 <strong> OkHttp Response </strong>类的<strong> isSuccessful </strong>方法来过滤筛选在内存中加载不成功的响应：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-VM-zB0hc0Ul21ATlewfiSg.png" alt="img"></p>
<p>实例过滤器功能</p>
<p>另一个有用的功能是跟踪新实例，您可以通过Memory View Tool窗口中的右键菜单启用：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-iNZTW8lV-_JlYHF3U8da-w.png" alt="img"></p>
<p>此功能可帮助您跟踪已生成类的新实例的代码！</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/1-ApP_UVxMbXEid9WBH62wUg.png" alt="img"></p>
<p>你可以在<a href="https://blog.jetbrains.com/idea/2016/08/jvm-debugger-memory-view-for-intellij-idea/" target="_blank" rel="external">JetBrains blog</a>中阅读有关此插件的更多信息.</p>
<hr>
<h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR:"></a>TL;DR:</h3><p>这篇文章是关于一个JetBrains插件，可能会帮助你在使用Android Studio是对应用程序进行内存调试和对在应用程序运行的所有加载对象进行访问。</p>
<p>本文翻译自：<a href="https://hackernoon.com/a-useful-memory-debugger-plugin-for-android-studio-2d9d95bddc24#.cxc5wk6ci" target="_blank" rel="external">https://hackernoon.com/a-useful-memory-debugger-plugin-for-android-studio-2d9d95bddc24#.cxc5wk6ci</a><br>注:IDEA版本请选择2016.3以上</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说一说Android-Studio和IDEA中一个很有用的内存调试插件&quot;&gt;&lt;a href=&quot;#说一说Android-Studio和IDEA中一个很有用的内存调试插件&quot; class=&quot;headerlink&quot; title=&quot;说一说Android Studio和IDEA中一个很有用的内存调试插件&quot;&gt;&lt;/a&gt;说一说Android Studio和IDEA中一个很有用的内存调试插件&lt;/h1&gt;
    
    </summary>
    
      <category term="IDEA" scheme="https://muyinchen.github.io/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="https://muyinchen.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>通过IntelliJ IDEA 2016.3 来更好使用Java 8的Stream API</title>
    <link href="https://muyinchen.github.io/2017/02/05/%E9%80%9A%E8%BF%87IntelliJ%20IDEA%202016.3%20%E6%9D%A5%E6%9B%B4%E5%A5%BD%E4%BD%BF%E7%94%A8Java%208%E7%9A%84Stream%20API/"/>
    <id>https://muyinchen.github.io/2017/02/05/通过IntelliJ IDEA 2016.3 来更好使用Java 8的Stream API/</id>
    <published>2017-02-05T08:06:03.739Z</published>
    <updated>2017-02-05T14:22:46.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过IntelliJ-IDEA-2016-3-来更好使用Java-8的Stream-API"><a href="#通过IntelliJ-IDEA-2016-3-来更好使用Java-8的Stream-API" class="headerlink" title="通过IntelliJ IDEA 2016.3 来更好使用Java 8的Stream API"></a>通过IntelliJ IDEA 2016.3 来更好使用Java 8的Stream API</h1> <a id="more"></a>
<p>本文展示了IntelliJ IDEA如何帮助编写正确的和培养使用Java 8的习惯.版本使用IntelliJ IDEA 2016.3， 通过扩展了IDEA现有的检查以支持这些的案例。</p>
<p>现在，如果在上面定义的局部变量的循环递增中单击Alt + Enter，IDE将提示您使用以count()结尾的一系列steam的链式 API调用来替换它。 注意，如果循环是嵌套的，IDE将使用flatMap():</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_streams_intentions_1.gif" alt="img"></p>
<p>如果变量从另一个方法返回的数字增加，IDE将使用mapToInt()/ mapToLong()/ mapToDouble():</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_streams_intentions_2.gif" alt="img"></p>
<p>如果循环将非原始对象添加到集合中，而不是递增变量，IDE将用以collect()结尾的调用链替换它:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_streams_intentions_5.gif" alt="img"></p>
<p>如果要添加到集合的对象是另一种方法的结果，IDE将使用map()以惯用的方式处理它:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_streams_intentions_10.gif" alt="img"></p>
<p>这些检查所支持的代码细节多么？ 相当多。 考虑一个大量使用continue语句的循环:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_streams_intentions_11.gif" alt="img"></p>
<p>与continue类似，IDE也将使用anyMatch()正确处理返回语句:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_streams_intentions_7.gif" alt="img"></p>
<p>如果您决定使用这些检查，请务必调整默认代码样式设置，以避免超过长方法链的右边距。 在此，你有一个选择，根据你的喜好来设置。</p>
<ul>
<li>下拉链(Chop down chain)方法调用如果它们很长(最适合Java 8)</li>
</ul>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_chop_down.png" alt="img"></p>
<ul>
<li>包装方法( Wrap method )参数调用</li>
</ul>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_wrap_method_calls.png" alt="img"></p>
<p>目前我们正在考虑更改这些默认值。</p>
<p>默认情况下启用检查，但其检查级别设置为最小 - 这意味着没有警告。 这是IntelliJ IDEA 2016的另一个新功能。</p>
<p>您可以在“设置”中更改任何检查的级别:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_streams_intentions_9.png" alt="img"></p>
<p>如果需要，您可以在你选择的范围上以批处理模式来应用这些检查:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_streams_intentions_8.png" alt="img"></p>
<p>我们希望新的检查将帮助并使你的Java 8代码写更加得心应手，并充分利用stream  API。 那些不熟悉stream API的人，请务必阅读Oracle的教程:第1部分和第2部分。</p>
<p>最后但并非最不重要的，IDEA还在努力改进VCS Log的布局:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/idea_2016_3_vcs_log.png" alt="img"></p>
<ul>
<li>提交详细信息已移至右侧，为日志本身提供了更多空间。</li>
<li><p>表中的提交消息现在对齐，因此更易读。</p>
<p>​</p>
</li>
</ul>
<p>关于Java 8 Stream API 的使用，请参考本人的博文:</p>
<p> <a href="https://muyinchen.github.io/2017/01/10/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams%20%E4%B8%80/">重走Java基础之Streams 一</a><br><a href="https://muyinchen.github.io/2017/01/14/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams%20%E4%BA%8C/">重走Java基础之Streams 二</a><br><a href="https://muyinchen.github.io/2017/01/15/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams%20%E4%B8%89/">重走Java基础之Streams 三</a><br><a href="https://muyinchen.github.io/2017/01/16/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams%20%E5%9B%9B/">重走Java基础之Streams 四</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;通过IntelliJ-IDEA-2016-3-来更好使用Java-8的Stream-API&quot;&gt;&lt;a href=&quot;#通过IntelliJ-IDEA-2016-3-来更好使用Java-8的Stream-API&quot; class=&quot;headerlink&quot; title=&quot;通过IntelliJ IDEA 2016.3 来更好使用Java 8的Stream API&quot;&gt;&lt;/a&gt;通过IntelliJ IDEA 2016.3 来更好使用Java 8的Stream API&lt;/h1&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 8" scheme="https://muyinchen.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>重走Java基础之Streams 四</title>
    <link href="https://muyinchen.github.io/2017/01/16/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams%20%E5%9B%9B/"/>
    <id>https://muyinchen.github.io/2017/01/16/重走Java基础之Streams 四/</id>
    <published>2017-01-16T15:34:06.899Z</published>
    <updated>2017-02-05T07:55:32.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重走Java基础之Streams-四"><a href="#重走Java基础之Streams-四" class="headerlink" title="重走Java基础之Streams 四"></a>重走Java基础之Streams 四</h1><p>接上篇<a href="https://muyinchen.github.io/2017/01/15/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams(%E4%B8%89">重走Java基础之Streams 三</a>/)</p>
<h3 id="使用Map-Entry的流在转换后保留初始值"><a href="#使用Map-Entry的流在转换后保留初始值" class="headerlink" title="使用Map.Entry的流在转换后保留初始值"></a>使用Map.Entry的流在转换后保留初始值</h3><a id="more"></a>
<p>当你有一个<code>Stream</code>，你需要映射转换但是想保留初始值，你可以使用下面的实用程序方法将’Stream`映射到Map.Entry：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; Function&lt;K, Map.Entry&lt;K, V&gt;&gt; entryMapper(Function&lt;K, V&gt; mapper)&#123;</div><div class="line">    <span class="keyword">return</span> (k)-&gt;<span class="keyword">new</span> AbstractMap.SimpleEntry&lt;&gt;(k, mapper.apply(k));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后你可以使用你的有权访问原始值和映射转换后值的转换器来处理<code>Stream</code>s：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Set&lt;K&gt; mySet;</div><div class="line">Function&lt;K, V&gt; transformer = SomeClass::transformerMethod;</div><div class="line">Stream&lt;Map.Entry&lt;K, V&gt;&gt; entryStream = mySet.stream()</div><div class="line">    .map(entryMapper(transformer));</div></pre></td></tr></table></figure>
<p>然后，您可以继续正常处理<code>Stream</code>。 这避免了创建中间集合的开销。</p>
<h3 id="将迭代器转换为流"><a href="#将迭代器转换为流" class="headerlink" title="将迭代器转换为流"></a>将迭代器转换为流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;String&gt; iterator = Arrays.asList(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>).iterator();    </div><div class="line">Iterable&lt;String&gt; iterable = () -&gt; iterator;</div><div class="line">Stream&lt;String&gt; stream = StreamSupport.stream(iterable.spliterator(), <span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<h3 id="基于流来创建一个map"><a href="#基于流来创建一个map" class="headerlink" title="基于流来创建一个map"></a>基于流来创建一个map</h3><p><strong>没有重复键的简单情况</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; characters = Stream.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</div><div class="line"></div><div class="line">Map&lt;Integer, String&gt; map = characters</div><div class="line">            .collect(Collectors.toMap(element -&gt; element.hashCode(), element -&gt; element));</div><div class="line"><span class="comment">// map = &#123;65=A, 66=B, 67=C&#125;</span></div></pre></td></tr></table></figure>
<p><strong>可能存在重复键的情况</strong></p>
<p><code>Collectors.toMap</code>在<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toMap-java.util.function.Function-java.util.function.Function-java.util.function.BinaryOperator-" target="_blank" rel="external">javadoc</a><br> 的描述：</p>
<blockquote>
<p>如果映射的键包含重复的（根据Object.equals(Object)），则会在执行收集操作时会抛出IllegalStateException。 如果映射的键可能有重复，请使用toMap(Function，Function，BinaryOperator)。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; characters = Stream.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</div><div class="line"></div><div class="line">Map&lt;Integer, String&gt; map = characters</div><div class="line">            .collect(Collectors.toMap(</div><div class="line">                element -&gt; element.hashCode(),</div><div class="line">                element -&gt; element,</div><div class="line">                (existingVal, newVal) -&gt; (existingVal + newVal)));</div><div class="line"></div><div class="line"><span class="comment">// map = &#123;65=A, 66=BB, 67=C&#125;</span></div></pre></td></tr></table></figure>
<p>传递给<code>Collectors.toMap(...)</code>的<code>BinaryOperator</code>生成在发生重复冲突情况下要存储的值。 它可以：</p>
<ul>
<li><p>返回旧值，以流中的第一个值优先，</p>
</li>
<li><p>返回新值，以流中的最后一个值优先，</p>
</li>
<li><p>组合旧值和新值</p>
<p><strong>按值分组</strong></p>
</li>
</ul>
<p>当你需要执行等效的一个数据库级联“group by”操作(意思就是和此效果一样的需求)时你可以使用 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-java.util.stream.Collector-" target="_blank" rel="external">Collectors.groupingBy</a> 。 为了说明，以下内容创建了一个map，其中人们的姓名分别映射到姓氏：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">List&lt;Person&gt; people = Arrays.asList(</div><div class="line">    <span class="keyword">new</span> Person(<span class="string">"Sam"</span>, <span class="string">"Rossi"</span>),</div><div class="line">    <span class="keyword">new</span> Person(<span class="string">"Sam"</span>, <span class="string">"Verdi"</span>),</div><div class="line">    <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Bianchi"</span>),</div><div class="line">    <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Rossi"</span>),</div><div class="line">    <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Verdi"</span>)</div><div class="line">);</div><div class="line"></div><div class="line">Map&lt;String, List&lt;String&gt;&gt; map = people.stream()</div><div class="line">        .collect(</div><div class="line">                <span class="comment">// function mapping input elements to keys</span></div><div class="line">                Collectors.groupingBy(Person::getName, </div><div class="line">                <span class="comment">// function mapping input elements to values,</span></div><div class="line">                <span class="comment">// how to store values</span></div><div class="line">                Collectors.mapping(Person::getSurname, Collectors.toList()))</div><div class="line">        );</div><div class="line"></div><div class="line"><span class="comment">// map = &#123;John=[Bianchi, Rossi, Verdi], Sam=[Rossi, Verdi]&#125;</span></div></pre></td></tr></table></figure>
<p><a href="https://ideone.com/2Ar9IA" target="_blank" rel="external">Live on Ideone</a></p>
<h3 id="查找有关数值流的统计信息"><a href="#查找有关数值流的统计信息" class="headerlink" title="查找有关数值流的统计信息"></a>查找有关数值流的统计信息</h3><p>Java 8提供了<a href="http://docs.oracle.com/javase/8/docs/api/java/util/IntSummaryStatistics.html" target="_blank" rel="external"><code>IntSummaryStatistics</code></a>，<a href="https://docs.oracle.com/javase/8/docs/api/java/util/DoubleSummaryStatistics.html" target="_blank" rel="external"><code>DoubleSummaryStatistics</code></a>和 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/LongSummaryStatistics.html" target="_blank" rel="external"><code>LongSummaryStatistics</code></a>这些类，它们给出用于收集统计数据对象的状态，例如<code>count</code>，<code>min</code>，<code>max</code>，<code>sum</code>和<code>average</code>。</p>
<p>Java SE 8<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List naturalNumbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</div><div class="line">IntSummaryStatistics stats = naturalNumbers.stream()</div><div class="line">.mapToInt((x) -&gt; x)     </div><div class="line">.summaryStatistics();</div><div class="line">System.out.println(stats);</div></pre></td></tr></table></figure></p>
<p>运行结果如下:</p>
<p>Java SE 8<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics&#123;count=<span class="number">10</span>, sum=<span class="number">55</span>, min=<span class="number">1</span>, max=<span class="number">10</span>, average=<span class="number">5.500000</span>&#125;</div></pre></td></tr></table></figure></p>
<p>可能还有疑问，还是来张运行截图吧：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170116_214851.png" alt=""></p>
<h3 id="获取一个流的片段"><a href="#获取一个流的片段" class="headerlink" title="获取一个流的片段"></a>获取一个流的片段</h3><p>skip: 返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream，如果原Stream中包含的元素个数小于N，那么返回空Stream；<br><img src="http://og0sybnix.bkt.clouddn.com/T24A8mXUJXXXXXXXXX_%21%2190219132.jpg" alt=""></p>
<p>limit: 对一个Stream进行截断操作，获取其前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素；</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/T2QAXlXJBaXXXXXXXX_%21%2190219132.jpg" alt=""></p>
<p><strong>Example:</strong>获取一个包含30个元素的“Stream”，包含集合的第21到第50个（包含）元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> n = <span class="number">20L</span>; <span class="comment">// the number of elements to skip</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> maxSize = <span class="number">30L</span>; <span class="comment">// the number of elements the stream should be limited to</span></div><div class="line"><span class="keyword">final</span> Stream&lt;T&gt; slice = collection.stream().skip(n).limit(maxSize);</div></pre></td></tr></table></figure>
<p><strong>Notes:</strong></p>
<ul>
<li>如果<code>n</code>为负或<code>maxSize</code>为负，则抛出<code>IllegalArgumentException</code></li>
<li><code>skip(long)</code>和<code>limit(long)</code>都是中间操作</li>
<li>如果流包含少于n个元素，则skip（n）将返回一个空流</li>
<li><code>skip(long)</code>和<code>limit(long)</code>都是顺序流管道上的廉价操作，但在有序并行管道上可能相当昂贵(指性能上)</li>
</ul>
<p>再贴个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; nums = Lists.newArrayList(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">null</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="keyword">null</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</div><div class="line">System.out.println(“sum is:”+nums.stream()</div><div class="line">.filter(num -&gt; num != <span class="keyword">null</span></div><div class="line">.distinct()</div><div class="line">.mapToInt(num -&gt; num * <span class="number">2</span>)</div><div class="line">.peek(System.out::println)</div><div class="line">.skip(<span class="number">2</span>)</div><div class="line">.limit(<span class="number">4</span>)</div><div class="line">.sum());</div></pre></td></tr></table></figure></p>
<h3 id="Joining-a-stream-to-a-single-String"><a href="#Joining-a-stream-to-a-single-String" class="headerlink" title="Joining a stream to a single String"></a>Joining a stream to a single String</h3><p>一个经常遇到的用例是从流创建一个<code>String</code>，其中每个流转换出的字符串之间由一个特定的字符分隔。 <code>Collectors.joining()</code>方法可以用于这个，就像下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; fruitStream = Stream.of(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"pear"</span>, <span class="string">"kiwi"</span>, <span class="string">"orange"</span>);</div><div class="line"></div><div class="line">String result = fruitStream.filter(s -&gt; s.contains(<span class="string">"a"</span>))</div><div class="line">           .map(String::toUpperCase)</div><div class="line">           .sorted()</div><div class="line">           .collect(Collectors.joining(<span class="string">", "</span>));</div><div class="line">           </div><div class="line">System.out.println(result);</div></pre></td></tr></table></figure>
<p>Output:</p>
<blockquote>
<p>APPLE, BANANA, ORANGE, PEAR</p>
</blockquote>
<p><code>Collectors.joining()</code>方法也可以满足前缀和后缀：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String result = fruitStream.filter(s -&gt; s.contains(<span class="string">"e"</span>))</div><div class="line">           .map(String::toUpperCase)</div><div class="line">           .sorted()</div><div class="line">           .collect(Collectors.joining(<span class="string">", "</span>, <span class="string">"Fruits: "</span>, <span class="string">"."</span>));</div><div class="line">           </div><div class="line">System.out.println(result);</div></pre></td></tr></table></figure>
<p>Output:</p>
<blockquote>
<p>Fruits: APPLE, ORANGE, PEAR.</p>
</blockquote>
<p><a href="http://ideone.com/e.js/MH4kmG" target="_blank" rel="external">Live on Ideone</a></p>
<h3 id="Reduction-聚合-with-Streams"><a href="#Reduction-聚合-with-Streams" class="headerlink" title="Reduction(聚合) with Streams"></a>Reduction(聚合) with Streams</h3><p>聚合是将二进制操作应用于流的每个元素以产生一个值的过程。</p>
<p><code>IntStream</code>的<code>sum()</code>方法是一个简化的例子; 它对流的每个项应用加法，得到一个最终值：<a href="http://i.stack.imgur.com/2Krwx.png" target="_blank" rel="external"><img src="http://i.stack.imgur.com/2Krwx.png" alt="Sum Reduction"></a></p>
<p>这相当于<code>(((1+2)+3)+4)</code></p>
<p>Stream的<code>reduce</code>方法允许创建自定义reduction。 可以使用<code>reduce</code>方法来实现<code>sum()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IntStream istr;</div><div class="line">    </div><div class="line"><span class="comment">//Initialize istr</span></div><div class="line">    </div><div class="line">OptionalInt istr.reduce((a,b)-&gt;a+b);</div></pre></td></tr></table></figure>
<p>返回<code>Optional</code>对象，以便可以恰当地处理空的Streams。</p>
<p>reduction的另一个示例是将 <code>Stream&lt;LinkedList&lt;T&gt;&gt;</code>组合成单个 <code>LinkedList&lt;T&gt;</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Stream&lt;LinkedList&lt;T&gt;&gt; listStream;</div><div class="line">    </div><div class="line"><span class="comment">//Create a Stream&lt;LinkedList&lt;T&gt;&gt;</span></div><div class="line">    </div><div class="line">Optional&lt;LinkedList&lt;T&gt;&gt; bigList = listStream.reduce((LinkedList&lt;T&gt; list1, LinkedList&lt;T&gt; list2)-&gt;&#123;</div><div class="line">    LinkedList&lt;T&gt; retList = <span class="keyword">new</span> LinkedList&lt;T&gt;();</div><div class="line">    retList.addAll(list1);</div><div class="line">    retList.addAll(list2);</div><div class="line">    <span class="keyword">return</span> retList;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>您还可以提供<em> identity元素</em>。 例如，用于加法的标识元素为0，如<code>x + 0 == x</code>。 对于乘法，identity元素为1，如<code>x * 1 == x</code>。 在上面的例子中，identity元素是一个空的<code>LinkedList</code>，因为如果你将一个空列表添加到另一个列表，你“添加”的列表不会改变：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Stream&lt;LinkedList&lt;T&gt;&gt; listStream;</div><div class="line"></div><div class="line"><span class="comment">//Create a Stream&lt;LinkedList&lt;T&gt;&gt;</span></div><div class="line"></div><div class="line">LinkedList&lt;T&gt; bigList = listStream.reduce(<span class="keyword">new</span> LinkedList&lt;T&gt;(), (LinkedList&lt;T&gt; list1, LinkedList&lt;T&gt; list2)-&gt;&#123;</div><div class="line">    LinkedList&lt;T&gt; retList = <span class="keyword">new</span> LinkedList&lt;T&gt;();</div><div class="line">    retList.addAll(list1);</div><div class="line">    retList.addAll(list2);</div><div class="line">    <span class="keyword">return</span> retList;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意，当提供一个identity元素时，返回值不会被包装在一个<code>Optional</code>中 —- 如果在空流上调用，<code>reduce()</code>将返回identity元素。</p>
<p>二元运算符也必须是<em> associative </em>，意思是 <code>(a+b)+c==a+(b+c)</code>。 这是因为元件可以以任何顺序进行聚合操作(reduced)。 例如，可以如下执行上述加法reduction：</p>
<p><a href="http://i.stack.imgur.com/sCqVF.png" target="_blank" rel="external"><img src="http://i.stack.imgur.com/sCqVF.png" alt="Other sum reduction"></a></p>
<p>这个reduction(聚合操作)等同于写<code>((1+2)+(3+4))</code>。 关联性的属性还允许Java并行地reduction <code>Stream</code> - 每个处理器可以reduction Stream的一部分并得到结果，最后通过reduction结合每个处理器的结果。</p>
<h3 id="使用流排序"><a href="#使用流排序" class="headerlink" title="使用流排序"></a>使用流排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">data.add(<span class="string">"Sydney"</span>);</div><div class="line">data.add(<span class="string">"London"</span>);</div><div class="line">data.add(<span class="string">"New York"</span>);</div><div class="line">data.add(<span class="string">"Amsterdam"</span>);</div><div class="line">data.add(<span class="string">"Mumbai"</span>);</div><div class="line">data.add(<span class="string">"California"</span>);</div><div class="line"></div><div class="line">System.out.println(data);</div><div class="line"></div><div class="line">List&lt;String&gt; sortedData = data.stream().sorted().collect(Collectors.toList());</div><div class="line"></div><div class="line">System.out.println(sortedData);</div></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Sydney, London, New York, Amsterdam, Mumbai, California]</div><div class="line">[Amsterdam, California, London, Mumbai, New York, Sydney]</div></pre></td></tr></table></figure>
<p>它也可以使用不同的比较机制，因为有一个重载<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted-java.util.Comparator-" target="_blank" rel="external"><code>sorted</code></a>版本，它使用比较器作为其参数。</p>
<p>此外，您可以使用lambda表达式进行排序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; sortedData2 = data.stream().sorted((s1,s2) -&gt; s2.compareTo(s1)).collect(Collectors.toList());</div></pre></td></tr></table></figure>
<p>这将输出<code>[Sydney, New York, Mumbai, London, California, Amsterdam]</code></p>
<p>你可以使用<code>Comparator.reverseOrder()</code> ，一个对自然排序进行强行<code>reverse</code>的比较器(反排序)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; reverseSortedData = data.stream().sorted(Comparator.reverseOrder()</div></pre></td></tr></table></figure>
<h3 id="流操作类别"><a href="#流操作类别" class="headerlink" title="流操作类别"></a>流操作类别</h3><p>流操作分为两个主要类别，中间和终端操作，以及两个子类，无状态和有状态。</p>
<hr>
<h4 id="中间操作："><a href="#中间操作：" class="headerlink" title="中间操作："></a>中间操作：</h4><p>一个中间操作总是<em> lazy </em>(延迟执行)，例如一个简单的“Stream.map”。 它不会被调用，直到流实际上消耗。 这可以很容易地验证：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>).stream().map(i -&gt; &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"not gonna happen"</span>);</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>中间操作是流的常见构造块，指在数据源之后操作链，并且通常末端跟随有触发流链式执行的终端操作。</p>
<hr>
<h4 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h4><p>终端操作是触发流的消耗的。 一些最常见的是 <code>Stream.forEach</code>或“ <code>Stream.collect</code>。 它们通常放置在一系列中间操作之后，几乎总是<em> eager </em>。</p>
<hr>
<h4 id="无状态操作"><a href="#无状态操作" class="headerlink" title="无状态操作"></a>无状态操作</h4><p>无状态意味着每个环节(可以理解成流的每个处理环节)在没有其他环节的上下文的情况下被处理。 无状态操作允许流的存储器高效处理。 像Stream.map和Stream.filter这样的不需要关于流的其他环节的信息的操作被认为是无状态的。</p>
<hr>
<h4 id="状态操作"><a href="#状态操作" class="headerlink" title="状态操作"></a>状态操作</h4><p>状态性意味着对每个环节的操作取决于（一些）流的其他环节。 这需要保留一个状态。 状态操作可能会与长流或无限流断开。 像<code>Stream.sorted</code> 这样的操作要求在处理任何环节之前处理整个流，这将在足够长的流的环节中断开。 这可以通过长流（<strong>run at your own risk</strong>）来证明(说的太拗口了，其实就是栈的递归操作，下一步的运行依靠上一步的结果来执行，假如太深，就可能出现问题，看下面例子就知道了)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// works - stateless stream</span></div><div class="line"><span class="keyword">long</span> BIG_ENOUGH_NUMBER = <span class="number">999999999</span>;</div><div class="line">IntStream.iterate(<span class="number">0</span>, i -&gt; i + <span class="number">1</span>).limit(BIG_ENOUGH_NUMBER).forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>这将导致由于Stream.sorted的状态的内存不足：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Out of memory - stateful stream</span></div><div class="line">IntStream.iterate(<span class="number">0</span>, i -&gt; i + <span class="number">1</span>).limit(BIG_ENOUGH_NUMBER).sorted().forEach(System.out::println);</div></pre></td></tr></table></figure>
<h3 id="原始流"><a href="#原始流" class="headerlink" title="原始流"></a>原始流</h3><p>Java为三种类型的原语“IntStream”（用于<code>int</code>s），<code>LongStream</code>（用于<code>long</code>s）和<code>DoubleStream</code>（用于<code>double</code>s）提供专用的<code>Stream</code>。 除了是针对它们各自的原语的优化实现，它们还提供了几个特定的终端方法，通常用于数学运算。 例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntStream is = IntStream.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</div><div class="line"><span class="keyword">double</span> average = is.average().getAsDouble(); <span class="comment">// average is 20.0</span></div></pre></td></tr></table></figure>
<h3 id="将流的结果收集到数组中"><a href="#将流的结果收集到数组中" class="headerlink" title="将流的结果收集到数组中"></a>将流的结果收集到数组中</h3><p>可以通过<code>Stream.toArray()</code>方法获得一个数组：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; fruits = Arrays.asList(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"pear"</span>, <span class="string">"kiwi"</span>, <span class="string">"orange"</span>);</div><div class="line"></div><div class="line">String[] filteredFruits = fruits.stream()</div><div class="line">    .filter(s -&gt; s.contains(<span class="string">"a"</span>))</div><div class="line">    .toArray(String[]::<span class="keyword">new</span>);     </div><div class="line"></div><div class="line"><span class="comment">// prints: [apple, banana, pear, orange]</span></div><div class="line">System.out.println(Arrays.toString(filteredFruits));</div></pre></td></tr></table></figure>
<p><code>String[]::new</code>是一种特殊的方法引用：构造函数引用。</p>
<h3 id="查找匹配条件的第一个元素"><a href="#查找匹配条件的第一个元素" class="headerlink" title="查找匹配条件的第一个元素"></a>查找匹配条件的第一个元素</h3><p>可以找到符合条件的<code>Stream</code> 的第一个元素。</p>
<p>在这个例子中，我们将找到第一个平方超过了50000的<code>Integer</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IntStream.iterate(<span class="number">1</span>, i -&gt; i + <span class="number">1</span>) <span class="comment">// Generate an infinite stream 1,2,3,4...</span></div><div class="line">    .filter(i -&gt; (i*i) &gt; <span class="number">50000</span>) <span class="comment">// Filter to find elements where the square is &gt;50000</span></div><div class="line">    .findFirst(); <span class="comment">// Find the first filtered element</span></div></pre></td></tr></table></figure>
<p>这个表达式将返回一个带有结果的<code>OptionalInt</code>对象。</p>
<p>注意，使用无限的<code>Stream</code>，Java将继续检查每个元素，直到找到一个结果。 在一个有限的<code>Stream</code>，如果Java运行检查了所以元素，但仍然找不到一个结果，它返回一个空的<code>OptionalInt</code>对象。</p>
<h3 id="使用Streams生成随机字符串"><a href="#使用Streams生成随机字符串" class="headerlink" title="使用Streams生成随机字符串"></a>使用Streams生成随机字符串</h3><p>有时，创建随机的<code>Strings</code>有时是有用的，或许作为Web服务的会话ID或在注册应用程序后的初始密码。 这可以很容易地使用<code>Stream</code>s实现。</p>
<p>首先，我们需要初始化一个随机数生成器。 为了增强生成的<code>String</code>s的安全性，使用<code>SecureRandom</code>是一个好主意。</p>
<p><strong>Note</strong>:创建一个<code>SecureRandom</code>是相当消耗资源的，所以最好的做法是只做一次，并且不时地调用它的一个<code>setSeed()</code>方法来重新设置它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SecureRandom rng = <span class="keyword">new</span> SecureRandom(SecureRandom.generateSeed(<span class="number">20</span>)); </div><div class="line"><span class="comment">//20 Bytes as a seed is rather arbitrary, it is the number used in the JavaDoc example</span></div></pre></td></tr></table></figure>
<p>当创建随机的<code>String</code>时，我们通常希望它们只使用某些字符（例如，只有字母和数字）。 因此，我们可以创建一个返回一个<code>boolean</code>的方法，稍后可以用它来过滤<code>Stream</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//returns true for all chars in 0-9, a-z and A-Z</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">useThisCharacter</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">    <span class="comment">//check for range to avoid using all unicode Letter (e.g. some chinese symbols)</span></div><div class="line">    <span class="keyword">return</span> c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'z'</span> &amp;&amp; Character.isLetterOrDigit(c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们可以使用RNG生成一个特定长度的随机字符串，包含通过我们的 <code>useThisCharacter</code>检查的字符集。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">generateRandomString</span><span class="params">(<span class="keyword">long</span> length)</span></span>&#123;</div><div class="line">    <span class="comment">//Since there is no native CharStream, we use an IntStream instead</span></div><div class="line">    <span class="comment">//and convert it to a Stream&lt;Character&gt; using mapToObj.</span></div><div class="line">    <span class="comment">//We need to specify the boundaries for the int values to ensure they can safely be cast to char</span></div><div class="line">    Stream&lt;Character&gt; randomCharStream = rng</div><div class="line">    .ints(Character.MIN_CODE_POINT, Character.MAX_CODE_POINT)</div><div class="line">    .mapToObj(i -&gt; (<span class="keyword">char</span>)i).filter(c -&gt; <span class="keyword">this</span>::useThisCharacter)</div><div class="line">    .limit(length);</div><div class="line"></div><div class="line">    <span class="comment">//now we can use this Stream to build a String utilizing the collect method.</span></div><div class="line">    String randomString = randomCharStream</div><div class="line">    .collect(StringBuilder::<span class="keyword">new</span>, StringBuilder::append, StringBuilder::append)</div><div class="line">    .toString();</div><div class="line">    <span class="keyword">return</span> randomString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于Stream系列暂时完结</p>
<p>部分参考示图源自：<a href="http://ifeve.com/stream/" target="_blank" rel="external">http://ifeve.com/stream/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重走Java基础之Streams-四&quot;&gt;&lt;a href=&quot;#重走Java基础之Streams-四&quot; class=&quot;headerlink&quot; title=&quot;重走Java基础之Streams 四&quot;&gt;&lt;/a&gt;重走Java基础之Streams 四&lt;/h1&gt;&lt;p&gt;接上篇&lt;a href=&quot;https://muyinchen.github.io/2017/01/15/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams(%E4%B8%89&quot;&gt;重走Java基础之Streams 三&lt;/a&gt;/)&lt;/p&gt;
&lt;h3 id=&quot;使用Map-Entry的流在转换后保留初始值&quot;&gt;&lt;a href=&quot;#使用Map-Entry的流在转换后保留初始值&quot; class=&quot;headerlink&quot; title=&quot;使用Map.Entry的流在转换后保留初始值&quot;&gt;&lt;/a&gt;使用Map.Entry的流在转换后保留初始值&lt;/h3&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 8" scheme="https://muyinchen.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>重走Java基础之Streams 三</title>
    <link href="https://muyinchen.github.io/2017/01/15/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams%20%E4%B8%89/"/>
    <id>https://muyinchen.github.io/2017/01/15/重走Java基础之Streams 三/</id>
    <published>2017-01-15T10:57:44.920Z</published>
    <updated>2017-02-05T07:56:02.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重走Java基础之Streams-三"><a href="#重走Java基础之Streams-三" class="headerlink" title="重走Java基础之Streams 三"></a>重走Java基础之Streams 三</h1><p>接<a href="https://muyinchen.github.io/2017/01/14/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams(%E4%BA%8C">重走Java基础之Streams(二)</a>)</p>
<h3 id="Creating-a-Stream"><a href="#Creating-a-Stream" class="headerlink" title="Creating a Stream"></a>Creating a Stream</h3><a id="more"></a>
<p>所有java<code>Collection</code>都有<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#stream--" target="_blank" rel="external"><code>stream()</code></a> 和<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#parallelStream--" target="_blank" rel="external"><code>parallelStream()</code></a>方法可以从中构造一个<code>Stream</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Collection&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">Stream&lt;String&gt; stringStream = stringList.parallelStream();</div></pre></td></tr></table></figure>
<p>可以使用以下两种方法之一从数组创建<code>Stream</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] values = &#123; <span class="string">"aaa"</span>, <span class="string">"bbbb"</span>, <span class="string">"ddd"</span>, <span class="string">"cccc"</span> &#125;;</div><div class="line">Stream&lt;String&gt; stringStream = Arrays.stream(values);</div><div class="line">Stream&lt;String&gt; stringStreamAlternative = Stream.of(values);</div></pre></td></tr></table></figure>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#stream-T:A-" target="_blank" rel="external"><code>Arrays.stream()</code></a> 和<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#of-T...-" target="_blank" rel="external"><code>Stream .of()</code></a>不同之处在于 <code>Stream.of()</code>有一个varargs参数，因此可以像下面这样使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>还有一些primitive(原始的,原函数，看下面例子便知道什么意思了)<code>Stream</code>s，你可以使用。 例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntStream intStream = IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">DoubleStream doubleStream = DoubleStream.of(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>);</div></pre></td></tr></table></figure>
<p>这些primitive streams (原始流)也可以使用<code>Arrays.stream()</code>方法构造：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IntStream intStream = Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;);</div></pre></td></tr></table></figure>
<p>可以从具有指定范围的数组创建一个<code>Stream</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] values= <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line">IntStream intStram = Arrays.stream(values, <span class="number">1</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>注意任何primitive streams (原始流)可以使用<code>boxed</code>方法转换为boxed类型流：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; integerStream = intStream.boxed();</div></pre></td></tr></table></figure>
<p>这在某些情况下可能是有用的，如果你想收集数据，因为primitive streams (原始流)没有任何可以需要一个<code>Collector</code>来作为参数的<code>collect</code>方法。</p>
<h4 id="再多举几个例子："><a href="#再多举几个例子：" class="headerlink" title="再多举几个例子："></a>再多举几个例子：</h4><h5 id="1-计算列表中的元素数"><a href="#1-计算列表中的元素数" class="headerlink" title="1.计算列表中的元素数"></a>1.计算列表中的元素数</h5><p>注意需</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"><span class="keyword">import</span> java.util.stream.IntStream;</div><div class="line"></div><div class="line">List&lt;Integer&gt; list = IntStream.range(<span class="number">1</span>, <span class="number">100</span>).boxed().collect(Collectors.toList());</div><div class="line">System.out.println(list.stream().count());</div></pre></td></tr></table></figure>
<h5 id="2-计算列表中元素的平均数"><a href="#2-计算列表中元素的平均数" class="headerlink" title="2. 计算列表中元素的平均数"></a>2. 计算列表中元素的平均数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Double avarage = list.stream().collect(Collectors.averagingInt(item -&gt; item));</div></pre></td></tr></table></figure>
<h5 id="3-对列表元素进行统计"><a href="#3-对列表元素进行统计" class="headerlink" title="3. 对列表元素进行统计"></a>3. 对列表元素进行统计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = IntStream.range(<span class="number">1</span>, <span class="number">100</span>).boxed().collect(Collectors.toList());</div><div class="line">IntSummaryStatistics iss = list.stream().collect(Collectors.summarizingInt(value -&gt; value));</div><div class="line">System.out.println(iss);</div></pre></td></tr></table></figure>
<p>​<br>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IntSummaryStatistics&#123;count=<span class="number">99</span>, sum=<span class="number">4950</span>, min=<span class="number">1</span>, average=<span class="number">50.000000</span>, max=<span class="number">99</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="4-根据List创建Map"><a href="#4-根据List创建Map" class="headerlink" title="4. 根据List创建Map"></a>4. 根据List创建Map</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = IntStream.range(<span class="number">1</span>, <span class="number">100</span>).boxed().collect(Collectors.toList());</div><div class="line">Map&lt;Integer, Integer&gt; map = list.stream().collect(Collectors.toMap(p -&gt; p, q-&gt;q*<span class="number">3</span>));</div><div class="line">System.out.println(map);</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>=<span class="number">3</span>, <span class="number">2</span>=<span class="number">6</span>, <span class="number">3</span>=<span class="number">9</span>, <span class="number">4</span>=<span class="number">12</span>, <span class="number">5</span>=<span class="number">15</span>, <span class="number">6</span>=<span class="number">18</span>, <span class="number">7</span>=<span class="number">21</span>, <span class="number">8</span>=<span class="number">24</span>, <span class="number">9</span>=<span class="number">27</span>, <span class="number">10</span>=<span class="number">30</span>, <span class="number">11</span>=<span class="number">33</span>, <span class="number">12</span>=<span class="number">36</span>, <span class="number">13</span>=<span class="number">39</span>, <span class="number">14</span>=<span class="number">42</span>, <span class="number">15</span>=<span class="number">45</span>, <span class="number">16</span>=<span class="number">48</span>, <span class="number">17</span>=<span class="number">51</span>, <span class="number">18</span>=<span class="number">54</span>, <span class="number">19</span>=<span class="number">57</span>, <span class="number">20</span>=<span class="number">60</span>, <span class="number">21</span>=<span class="number">63</span>, <span class="number">22</span>=<span class="number">66</span>, <span class="number">23</span>=<span class="number">69</span>, <span class="number">24</span>=<span class="number">72</span>, <span class="number">25</span>=<span class="number">75</span>, <span class="number">26</span>=<span class="number">78</span>, <span class="number">27</span>=<span class="number">81</span>, <span class="number">28</span>=<span class="number">84</span>, <span class="number">29</span>=<span class="number">87</span>, <span class="number">30</span>=<span class="number">90</span>, <span class="number">31</span>=<span class="number">93</span>, <span class="number">32</span>=<span class="number">96</span>, <span class="number">33</span>=<span class="number">99</span>, <span class="number">34</span>=<span class="number">102</span>, <span class="number">35</span>=<span class="number">105</span>, <span class="number">36</span>=<span class="number">108</span>, <span class="number">37</span>=<span class="number">111</span>, <span class="number">38</span>=<span class="number">114</span>, <span class="number">39</span>=<span class="number">117</span>, <span class="number">40</span>=<span class="number">120</span>, <span class="number">41</span>=<span class="number">123</span>, <span class="number">42</span>=<span class="number">126</span>, <span class="number">43</span>=<span class="number">129</span>, <span class="number">44</span>=<span class="number">132</span>, <span class="number">45</span>=<span class="number">135</span>, <span class="number">46</span>=<span class="number">138</span>, <span class="number">47</span>=<span class="number">141</span>, <span class="number">48</span>=<span class="number">144</span>, <span class="number">49</span>=<span class="number">147</span>, <span class="number">50</span>=<span class="number">150</span>, <span class="number">51</span>=<span class="number">153</span>, <span class="number">52</span>=<span class="number">156</span>, <span class="number">53</span>=<span class="number">159</span>, <span class="number">54</span>=<span class="number">162</span>, <span class="number">55</span>=<span class="number">165</span>, <span class="number">56</span>=<span class="number">168</span>, <span class="number">57</span>=<span class="number">171</span>, <span class="number">58</span>=<span class="number">174</span>, <span class="number">59</span>=<span class="number">177</span>, <span class="number">60</span>=<span class="number">180</span>, <span class="number">61</span>=<span class="number">183</span>, <span class="number">62</span>=<span class="number">186</span>, <span class="number">63</span>=<span class="number">189</span>, <span class="number">64</span>=<span class="number">192</span>, <span class="number">65</span>=<span class="number">195</span>, <span class="number">66</span>=<span class="number">198</span>, <span class="number">67</span>=<span class="number">201</span>, <span class="number">68</span>=<span class="number">204</span>, <span class="number">69</span>=<span class="number">207</span>, <span class="number">70</span>=<span class="number">210</span>, <span class="number">71</span>=<span class="number">213</span>, <span class="number">72</span>=<span class="number">216</span>, <span class="number">73</span>=<span class="number">219</span>, <span class="number">74</span>=<span class="number">222</span>, <span class="number">75</span>=<span class="number">225</span>, <span class="number">76</span>=<span class="number">228</span>, <span class="number">77</span>=<span class="number">231</span>, <span class="number">78</span>=<span class="number">234</span>, <span class="number">79</span>=<span class="number">237</span>, <span class="number">80</span>=<span class="number">240</span>, <span class="number">81</span>=<span class="number">243</span>, <span class="number">82</span>=<span class="number">246</span>, <span class="number">83</span>=<span class="number">249</span>, <span class="number">84</span>=<span class="number">252</span>, <span class="number">85</span>=<span class="number">255</span>, <span class="number">86</span>=<span class="number">258</span>, <span class="number">87</span>=<span class="number">261</span>, <span class="number">88</span>=<span class="number">264</span>, <span class="number">89</span>=<span class="number">267</span>, <span class="number">90</span>=<span class="number">270</span>, <span class="number">91</span>=<span class="number">273</span>, <span class="number">92</span>=<span class="number">276</span>, <span class="number">93</span>=<span class="number">279</span>, <span class="number">94</span>=<span class="number">282</span>, <span class="number">95</span>=<span class="number">285</span>, <span class="number">96</span>=<span class="number">288</span>, <span class="number">97</span>=<span class="number">291</span>, <span class="number">98</span>=<span class="number">294</span>, <span class="number">99</span>=<span class="number">297</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="5-求列表元素的最大数"><a href="#5-求列表元素的最大数" class="headerlink" title="5. 求列表元素的最大数"></a>5. 求列表元素的最大数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> Random().ints(-<span class="number">100</span>,<span class="number">100</span>).limit(<span class="number">250</span>).boxed().collect(Collectors.toList());</div><div class="line">Optional&lt;Integer&gt; max = list.stream().reduce(Math::max);</div><div class="line">max.ifPresent(value -&gt; System.out.println(value));</div></pre></td></tr></table></figure>
<p>应该有些理解了吧。</p>
<p><strong>重用a stream chain(一个流链)的中间操作</strong></p>
<p>当终端操作被调用时，流被关闭。当我们的需求只有发生在终端操作的改变时，可以 重复使用中间操作流。 我们可以创建 a stream supplier(一个流供应者)来构造一个已经建立了所有中间操作的新流。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Supplier&lt;Stream&lt;String&gt;&gt; streamSupplier = () -&gt; Stream.of(<span class="string">"apple"</span>, <span class="string">"banana"</span>,<span class="string">"orange"</span>, <span class="string">"grapes"</span>, <span class="string">"melon"</span>,<span class="string">"blueberry"</span>,<span class="string">"blackberry"</span>)</div><div class="line">.map(String::toUpperCase).sorted();</div><div class="line"></div><div class="line">  streamSupplier.get().filter(s -&gt;   s.startsWith(<span class="string">"A"</span>)).forEach(System.out::println);</div><div class="line"></div><div class="line"><span class="comment">// APPLE</span></div><div class="line"></div><div class="line">  streamSupplier.get().filter(s -&gt; s.startsWith(<span class="string">"B"</span>)).forEach(System.out::println);</div><div class="line"></div><div class="line">  <span class="comment">// BANANA</span></div><div class="line">  <span class="comment">// BLACKBERRY</span></div><div class="line">  <span class="comment">// BLUEBERRY</span></div></pre></td></tr></table></figure>
<p><code>int []</code>数组可以使用流转换为<code>List</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] ints = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line">List&lt;Integer&gt; list = IntStream.of(ints).boxed().collect(Collectors.toList());</div></pre></td></tr></table></figure>
<h3 id="通过-flatMap-来扁平化处理流"><a href="#通过-flatMap-来扁平化处理流" class="headerlink" title="通过 flatMap()来扁平化处理流"></a><code>通过 flatMap()来扁平化处理流</code></h3><p>A <code>Stream</code> of items that are in turn streamable can be flattened into a single continuous <code>Stream</code>:<br>flatMap：和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中</p>
<p>map和flatMap方法示意图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/T2PQJnXOJXXXXXXXXX_%21%2190219132.jpg" alt=""></p>
<p>可以看出map只转换</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/T2mBXnXQhXXXXXXXXX_%21%2190219132.jpg" alt=""></p>
<p>可以看出flatMap不仅转换，又进一步合并了一下，将多个子Stream合并为一个Stream。</p>
<p>由下面例子可以看出，大的 <code>Stream</code>中的子 <code>Stream</code>可以被扁平化处理为单个连续的 <code>Stream</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">map.put(<span class="string">"a"</span>, Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</div><div class="line">map.put(<span class="string">"b"</span>, Arrays.asList(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</div><div class="line"></div><div class="line">List&lt;Integer&gt; allValues = map.values() <span class="comment">// Collection&lt;List&lt;Integer&gt;&gt;</span></div><div class="line">        .stream()                      <span class="comment">// Stream&lt;List&lt;Integer&gt;&gt;</span></div><div class="line">        .flatMap(List::stream)         <span class="comment">// Stream&lt;Integer&gt;</span></div><div class="line">        .collect(Collectors.toList());</div><div class="line"></div><div class="line">System.out.println(allValues);</div><div class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></div></pre></td></tr></table></figure></p>
<p>含<code>Map</code>的<code>List</code>可以被扁平化处理成一个连续的<code>Stream</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">List&lt;Map&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">Map&lt;String,String&gt; map1 = <span class="keyword">new</span> HashMap();</div><div class="line">map1.put(<span class="string">"1"</span>, <span class="string">"one"</span>);</div><div class="line">map1.put(<span class="string">"2"</span>, <span class="string">"two"</span>);</div><div class="line"></div><div class="line">Map&lt;String,String&gt; map2 = <span class="keyword">new</span> HashMap();</div><div class="line">map2.put(<span class="string">"3"</span>, <span class="string">"three"</span>);</div><div class="line">map2.put(<span class="string">"4"</span>, <span class="string">"four"</span>);</div><div class="line">list.add(map1);</div><div class="line">list.add(map2);</div><div class="line"></div><div class="line"></div><div class="line">Set&lt;String&gt; output= list.stream()  <span class="comment">//  Stream&lt;Map&lt;String, String&gt;&gt;</span></div><div class="line">    .map(Map::values)              <span class="comment">// Stream&lt;List&lt;String&gt;&gt;</span></div><div class="line">    .flatMap(Collection::stream)   <span class="comment">// Stream&lt;String&gt;</span></div><div class="line">    .collect(Collectors.toSet());  <span class="comment">//Set&lt;String&gt;</span></div><div class="line">[one, two, three,four]</div></pre></td></tr></table></figure>
<h3 id="使用Streams实现数学函数"><a href="#使用Streams实现数学函数" class="headerlink" title="使用Streams实现数学函数"></a>使用Streams实现数学函数</h3><p><code>Stream</code>s，尤其是 <code>IntStream</code>s，是一种实现求和项（Σ）的优雅方法。<code>Stream</code>可以用作求和的的范围边界。</p>
<p>E.g., Madhava的Pi近似值由公式给出(Source: <a href="https://en.wikipedia.org/wiki/Approximations_of_%CF%80" target="_blank" rel="external">wikipedia</a>): <a href="http://i.stack.imgur.com/XY9Kr.png" target="_blank" rel="external"><img src="http://i.stack.imgur.com/XY9Kr.png" alt="Madhava&#39;s approximation"></a></p>
<p>这可以以任意精度计算。 例如，101项次幂：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> pi = Math.sqrt(<span class="number">12</span>) * </div><div class="line">            IntStream.rangeClosed(<span class="number">0</span>, <span class="number">100</span>)</div><div class="line">                     .mapToDouble(k -&gt; Math.pow(-<span class="number">3</span>, -<span class="number">1</span> * k) / (<span class="number">2</span> * k + <span class="number">1</span>))</div><div class="line">                     .sum();</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> 使用<code>double</code>的精度，选择29的上限就足以获得与<code>Math.Pi</code>大概一致的结果.</p>
<h3 id="使用IntStream迭代索引"><a href="#使用IntStream迭代索引" class="headerlink" title="使用IntStream迭代索引"></a>使用IntStream迭代索引</h3><p><code>stream</code>s的元素通常不允许访问当前项的索引值。 要通过访问索引来迭代数组或<code>ArrayList</code>，使用<code>IntStream.range（start，endExclusive）</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String[] names = &#123; <span class="string">"Jon"</span>, <span class="string">"Darin"</span>, <span class="string">"Bauke"</span>, <span class="string">"Hans"</span>, <span class="string">"Marc"</span> &#125;;</div><div class="line"></div><div class="line">IntStream.range(<span class="number">0</span>, names.length)</div><div class="line">    .mapToObj(i -&gt; String.format(<span class="string">"#%d %s"</span>, i + <span class="number">1</span>, names[i]))</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#range-int-int-" target="_blank" rel="external"><code>range（start，endExclusive）</code></a> 方法返回另一个 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html" target="_blank" rel="external"><code>ÌntStream</code></a>并和 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#mapToObj-java.util.function.IntFunction-" target="_blank" rel="external"><code>mapToObj(mapper)</code></a>返回一个String。</p>
<p>Output:</p>
<p>这非常类似于使用带有计数器的正常的for循环，但是具有流水线和并行化的优点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.length; i++) &#123;</div><div class="line">    String newName = String.format(<span class="string">"#%d %s"</span>, i + <span class="number">1</span>, names[i]);</div><div class="line">    System.out.println(newName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="连接流"><a href="#连接流" class="headerlink" title="连接流"></a>连接流</h3><p>变量声明示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Collection&lt;String&gt; abc = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</div><div class="line">Collection&lt;String&gt; digits = Arrays.asList(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>);</div><div class="line">Collection&lt;String&gt; greekAbc = Arrays.asList(<span class="string">"alpha"</span>, <span class="string">"beta"</span>, <span class="string">"gamma"</span>);</div></pre></td></tr></table></figure>
<p><strong>Example 1 - 连接两个流</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Stream&lt;String&gt; concat1 = Stream.concat(abc.stream(), digits.stream());</div><div class="line"></div><div class="line">concat1.forEach(System.out::print);</div><div class="line"><span class="comment">// prints: abc123</span></div></pre></td></tr></table></figure>
<p><strong>Example 2 -连接多个流</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Stream&lt;String&gt; concat2 = Stream.concat(</div><div class="line">    Stream.concat(abc.stream(), digits.stream()),</div><div class="line">    greekAbc.stream());</div><div class="line"></div><div class="line">System.out.println(concat2.collect(Collectors.joining(<span class="string">", "</span>)));</div><div class="line"><span class="comment">// prints: a, b, c, 1, 2, 3, alpha, beta, gamma</span></div></pre></td></tr></table></figure>
<p>或者为了简化嵌套的<code>concat()</code>语法我们也可以使用<code>flatMap()</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Stream&lt;String&gt; concat3 = Stream.of(</div><div class="line">    abc.stream(), digits.stream(), greekAbc.stream())</div><div class="line">    .flatMap(s -&gt; s);</div><div class="line">    <span class="comment">// or `.flatMap(Function.identity());` (java.util.function.Function)</span></div><div class="line"></div><div class="line">System.out.println(concat3.collect(Collectors.joining(<span class="string">", "</span>)));</div><div class="line"><span class="comment">// prints: a, b, c, 1, 2, 3, alpha, beta, gamma</span></div></pre></td></tr></table></figure>
<p>在从重复连接构造<code>Stream</code>s 时要小心，因为访问深度并置的<code>Stream</code>的元素可能导致深层调用链或者甚至是<code>StackOverflowException</code>(本就是栈操作)。</p>
<h3 id="IntStream-to-String"><a href="#IntStream-to-String" class="headerlink" title="IntStream to String"></a>IntStream to String</h3><p>Java没有<em> Char Stream </em>，所以当使用<code>String</code>s并构造一个<code>Character</code>的<code>Character</code>s时，一个选项是使用<code>String.codePoints()</code>方法获取一个<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html" target="_blank" rel="external"><code>IntStream</code></a> ,所以<code>IntStream</code>可以得到如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> IntStream <span class="title">stringToIntStream</span><span class="params">(String in)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> in.codePoints();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多的涉及做其他方式的转换，即IntStreamToString。 可以这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">intStreamToString</span><span class="params">(IntStream intStream)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> intStream.collect(StringBuilder::<span class="keyword">new</span>, StringBuilder::appendCodePoint, StringBuilder::append).toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用流和方法引用来编写自己的文档化流程代码"><a href="#使用流和方法引用来编写自己的文档化流程代码" class="headerlink" title="使用流和方法引用来编写自己的文档化流程代码"></a>使用流和方法引用来编写自己的文档化流程代码</h3><p>通过方法引用来创建具有帅气风格的文档化代码，使用带有Stream的方法引用使得复杂的过程易于阅读和理解(所以才说流程)。 考虑下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Ordered</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Valued</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">Ordered</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasPropertyTwo</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">V <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Thing</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">Ordered</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasPropertyOne</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">Valued&lt;V&gt; <span class="title">getValuedProperty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> &lt;V extends Ordered&gt; <span class="function">List&lt;V&gt; <span class="title">myMethod</span><span class="params">(List&lt;Thing&lt;V&gt;&gt; things)</span> </span>&#123;</div><div class="line">    List&lt;V&gt; results = <span class="keyword">new</span> ArrayList&lt;V&gt;();</div><div class="line">    <span class="keyword">for</span> (Thing&lt;V&gt; thing : things) &#123;</div><div class="line">        <span class="keyword">if</span> (thing.hasPropertyOne()) &#123;</div><div class="line">            Valued&lt;V&gt; valued = thing.getValuedProperty();</div><div class="line">            <span class="keyword">if</span> (valued != <span class="keyword">null</span> &amp;&amp; valued.hasPropertyTwo())&#123;</div><div class="line">                V value = valued.getValue();</div><div class="line">                <span class="keyword">if</span> (value != <span class="keyword">null</span>)&#123;</div><div class="line">                    results.add(value);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    results.sort((a, b)-&gt;&#123;</div><div class="line">        <span class="keyword">return</span> Integer.compare(a.getOrder(), b.getOrder());</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后使用<code>Stream</code>s和方法引用重写的自定义的方法更易读，而且每个步骤都很容易理解 - 它不仅更短，还显示了哪些接口和类负责每个 步：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;V extends Ordered&gt; <span class="function">List&lt;V&gt; <span class="title">myMethod</span><span class="params">(List&lt;Thing&lt;V&gt;&gt; things)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> things.stream()</div><div class="line">        .filter(Thing::hasPropertyOne)</div><div class="line">        .map(Thing::getValuedProperty)</div><div class="line">        .filter(Objects::nonNull)</div><div class="line">        .filter(Valued::hasPropertyTwo)</div><div class="line">        .map(Valued::getValue)</div><div class="line">        .filter(Objects::nonNull)</div><div class="line">        .sorted(Comparator.comparing(Ordered::getOrder))</div><div class="line">        .collect(Collectors.toList());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>未完待续：</p>
<p>部分参考示图源自：<a href="http://ifeve.com/stream/" target="_blank" rel="external">http://ifeve.com/stream/</a><br>部分示例源自：<a href="http://blog.csdn.net/chszs/article/details/47038607" target="_blank" rel="external">http://blog.csdn.net/chszs/article/details/47038607</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重走Java基础之Streams-三&quot;&gt;&lt;a href=&quot;#重走Java基础之Streams-三&quot; class=&quot;headerlink&quot; title=&quot;重走Java基础之Streams 三&quot;&gt;&lt;/a&gt;重走Java基础之Streams 三&lt;/h1&gt;&lt;p&gt;接&lt;a href=&quot;https://muyinchen.github.io/2017/01/14/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams(%E4%BA%8C&quot;&gt;重走Java基础之Streams(二)&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;Creating-a-Stream&quot;&gt;&lt;a href=&quot;#Creating-a-Stream&quot; class=&quot;headerlink&quot; title=&quot;Creating a Stream&quot;&gt;&lt;/a&gt;Creating a Stream&lt;/h3&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 8" scheme="https://muyinchen.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>重走Java基础之Streams 二</title>
    <link href="https://muyinchen.github.io/2017/01/14/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams%20%E4%BA%8C/"/>
    <id>https://muyinchen.github.io/2017/01/14/重走Java基础之Streams 二/</id>
    <published>2017-01-14T12:59:28.217Z</published>
    <updated>2017-02-05T07:56:31.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重走Java基础之Streams-二"><a href="#重走Java基础之Streams-二" class="headerlink" title="重走Java基础之Streams 二"></a>重走Java基础之Streams 二</h1><p>接上篇<a href="https://muyinchen.github.io/2017/01/10/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams(%E4%B8%80">重走Java基础之Streams(一)</a>/)</p>
<h2 id="Processing-Order"><a href="#Processing-Order" class="headerlink" title="Processing Order"></a>Processing Order</h2><p>  <code>Stream</code>对象的处理可以是顺序或<a href="http://stackoverflow.com/documentation/java/88/streams/2785/parallel-stream#t=201607281158351104612" target="_blank" rel="external">并行</a>.<br>  <a id="more"></a><br>     在<strong> sequential </strong>模式中，按照“Stream”的源的顺序处理元素。 如果<code>Stream</code>是有序的（例如<a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html" target="_blank" rel="external"><code>SortedMap</code></a> 实现或<a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="external"><code>List</code> </a>），处理过程保证匹配源的排序。 然而，在其他情况下，应注意不要依赖于顺序（参见：<a href="http://stackoverflow.com/q/1882762/1667004" target="_blank" rel="external">是Java的<code>HashMap``keySet()</code>迭代顺序一致？</a>）。</p>
<p>  <strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">42</span>); </div><div class="line"></div><div class="line"><span class="comment">// sequential </span></div><div class="line"><span class="keyword">long</span> howManyOddNumbers = integerList.stream()</div><div class="line">                                    .filter(e -&gt; (e % <span class="number">2</span>) == <span class="number">1</span>).count(); </div><div class="line"></div><div class="line">System.out.println(howManyOddNumbers); <span class="comment">// Output: 2</span></div></pre></td></tr></table></figure>
<p>  <a href="https://ideone.com/FuMz1c" target="_blank" rel="external">Live on Ideone</a></p>
<p><strong>Parallel(并行)</strong>模式允许在多个核上使用多个线程，但不能保证处理元素的顺序。</p>
<p>   如果在顺序的<code>Stream</code>上调用多个方法，则不必调用每个方法。 例如，如果一个<code>Stream</code>被过滤，并且元素的数量减少到一，则不会发生对诸如<code>sort</code>的方法的后续调用。 这可以提高顺序的<code>Stream</code>的性能 - 这是一个并行的<code>Stream</code>不可能实现的优化。<br>  <strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// parallel</span></div><div class="line"><span class="keyword">long</span> howManyOddNumbersParallel = integerList.parallelStream()</div><div class="line">                                            .filter(e -&gt; (e % <span class="number">2</span>) == <span class="number">1</span>).count();</div><div class="line"></div><div class="line">System.out.println(howManyOddNumbersParallel); <span class="comment">// Output: 2</span></div></pre></td></tr></table></figure>
<p>  <a href="https://ideone.com/FuMz1c" target="_blank" rel="external">Live on Ideone</a></p>
<hr>
<h2 id="Differences-from-Containers-or-Collections"><a href="#Differences-from-Containers-or-Collections" class="headerlink" title="Differences from Containers (or Collections)"></a>Differences from Containers (or Collections)</h2><p>  虽然一些操作可以在Containers和Streams上执行，但它们最终用于不同的目的并支持不同的操作。 容器更注重元素的存储方式以及如何有效地访问这些元素。 另一方面，<code>Stream</code>不提供对其元素的直接访问和操纵; 它更专用于作为集体实体的对象组并且作为整体对该实体执行操作。 <code>Stream</code>和<code>Collection</code>是用于这些不同目的的单独的高级抽象。</p>
<p>  ​</p>
<p>  ​</p>
<h3 id="Consuming-Streams"><a href="#Consuming-Streams" class="headerlink" title="Consuming Streams"></a>Consuming Streams</h3><p>  ​</p>
<p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>将仅在有<em>终端操作</em>时被遍历，如<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#count--" target="_blank" rel="external"> <code>count()</code></a>，<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-" target="_blank" rel="external"><code>collect()</code></a> 或<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#forEach-java.util.function.Consumer-" target="_blank" rel="external"><code>forEach()</code></a>。否则，不会对<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a> 执行任何操作。</p>
<p>  在下面的示例中，没有将终端操作添加到<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>，因此<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#filter-java.util.function.Predicate-" target="_blank" rel="external"> <code>filter()</code></a> 操作不会调用，并且不会产生输出，因为<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-" target="_blank" rel="external"><code>peek()</code></a>不是<em>终端操作</em>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">10</span>).filter(a -&gt; a % <span class="number">2</span> == <span class="number">0</span>).peek(System.out::println);</div></pre></td></tr></table></figure>
<p>  <a href="https://ideone.com/YDijRj" target="_blank" rel="external">Live on Ideone</a></p>
<p>  这是一个具有有效<em>终端操作</em>的 <code>Stream</code> 序列，因此产生一个输出。</p>
<p>   你也可以使用<code>forEach</code>而不是<code>peek</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">10</span>).filter(a -&gt; a % <span class="number">2</span> == <span class="number">0</span>).forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>  <a href="https://ideone.com/LzUoM6" target="_blank" rel="external">Live on Ideone</a></p>
<p>  Output:</p>
<blockquote>
<p>2<br>4<br>6<br>8</p>
</blockquote>
<p>  在执行终端操作之后， <code>Stream</code> 被执行消耗，不能被重复使用。</p>
<hr>
<p> 一般来说，<code>Stream</code>的操作如下图所示：</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a href="http://i.stack.imgur.com/lrwjM.jpg" target="_blank" rel="external"><img src="http://i.stack.imgur.com/lrwjM.jpg" alt="Stream Operation"></a></h2><p>  <strong>NOTE</strong>: 即使没有<em>终端操作，也始终执行参数检查</em>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    IntStream.range(<span class="number">1</span>, <span class="number">10</span>).filter(<span class="keyword">null</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</div><div class="line">    System.out.println(<span class="string">"We got a NullPointerException as null was passed as an argument to filter()"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <a href="https://ideone.com/zrkoRz" target="_blank" rel="external">Live on Ideone</a></p>
<p>  Output:</p>
<blockquote>
<p>We got a NullPointerException as null was passed as an argument to filter()</p>
</blockquote>
<p>  ​</p>
<p>  ​</p>
<h3 id="Creating-a-Frequency-Map"><a href="#Creating-a-Frequency-Map" class="headerlink" title="Creating a Frequency Map"></a>Creating a Frequency Map</h3><p>  <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-" target="_blank" rel="external"><code>groupingBy（classifier，downstream）</code></a>collector允许将<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>元素集合通过对组中的每个元素进行分类到一个<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" target="_blank" rel="external"><code>Map</code></a>，并对分类在同一组中的元素执行后续操作。</p>
<p>  这个原则的一个典型例子是使用<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" target="_blank" rel="external"><code>Map</code></a> 来计算<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>。在这个例子中，分类器是简单的identity函数，它返回元素as-is。后续操作计算等于元素的数量，使用<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#counting--" target="_blank" rel="external"><code>counting()</code></a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Stream.of(<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span>)</div><div class="line">      .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))</div><div class="line">      .entrySet()</div><div class="line">      .forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>  后续操作本身是一个收集器（<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#counting--" target="_blank" rel="external"><code>Collectors.counting()</code></a> ），对String类型的元素进行操作，并生成类型为<code>Long</code>的结果。 <code>collect</code>方法调用的结果是一个<code>Map</code>。</p>
<p>  This would produce the following output:</p>
<blockquote>
<p>banana=1<br>orange=1<br>apple=2</p>
</blockquote>
<h3 id="Infinite-Streams-无限流"><a href="#Infinite-Streams-无限流" class="headerlink" title="Infinite Streams 无限流"></a>Infinite Streams <code>无限流</code></h3><p>可以生成一个不结束的<code>Stream</code>。 在无限的<code>Stream</code>上调用终端方法导致<code>Stream</code>进入无限循环。 一个<code>Stream</code>的<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#limit-long-" target="_blank" rel="external"><code>limit</code></a>方法可以用于 限制Java处理的<code>Stream</code>的术语数。</p>
<p>这个例子生成一个所有自然数的<code>Stream</code>，从数字1开始。<code>Stream</code>的每个连续项比上一个高一个。 通过调用这个<code>Stream</code>的limit方法，只有<code>Stream</code>的前5个项被考虑和打印。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Generate infinite stream - 1, 2, 3, 4, 5, 6, 7, ...</span></div><div class="line">IntStream naturalNumbers = IntStream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// Print out only the first 5 terms</span></div><div class="line">naturalNumbers.limit(<span class="number">5</span>).forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>Output:</p>
<blockquote>
<p>1<br>2<br>3<br>4<br>5</p>
</blockquote>
<h3 id="Collect-Elements-of-a-Stream-into-a-Collection-将流的元素收集到集合中"><a href="#Collect-Elements-of-a-Stream-into-a-Collection-将流的元素收集到集合中" class="headerlink" title="Collect Elements of a Stream into a Collection 将流的元素收集到集合中"></a>Collect Elements of a Stream into a Collection <code>将流的元素收集到集合中</code></h3><h4 id="Collect-with-toList-and-toSet"><a href="#Collect-with-toList-and-toSet" class="headerlink" title="Collect with toList() and toSet()"></a>Collect with <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toList--" target="_blank" rel="external"><code>toList()</code></a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toSet--" target="_blank" rel="external"><code>toSet()</code></a></h4><p>通过<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.stream.Collector-" target="_blank" rel="external"><code>Stream.collect</code></a>操作可以轻松地将<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>元素收集到容器中 ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">System.out.println(Arrays</div><div class="line">    .asList(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"pear"</span>, <span class="string">"kiwi"</span>, <span class="string">"orange"</span>)</div><div class="line">    .stream()</div><div class="line">    .filter(s -&gt; s.contains(<span class="string">"a"</span>))</div><div class="line">    .collect(Collectors.toList())</div><div class="line">);</div><div class="line"><span class="comment">// prints: [apple, banana, pear, orange]</span></div></pre></td></tr></table></figure>
<p>其他集合实例，例如<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html" target="_blank" rel="external"><code>Set</code></a>，可以通过使用其他<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html" target="_blank" rel="external"><code>Collectors</code> </a> 内置方法。 例如，<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toSet--" target="_blank" rel="external"><code>Collectors.toSet()</code></a>收集 <code>Stream</code> into到一个 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toSet--" target="_blank" rel="external"><code>Set</code></a>中。</p>
<hr>
<h4 id="Explicit-显式-control-over-the-implementation-of-List-or-Set"><a href="#Explicit-显式-control-over-the-implementation-of-List-or-Set" class="headerlink" title="Explicit(显式) control over the implementation of List or Set"></a>Explicit(显式) control over the implementation of <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="external"><code>List</code></a> or <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html" target="_blank" rel="external"><code>Set</code></a></h4><p>根据<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toList--" target="_blank" rel="external"><code>Collectors＃toList（）</code></a>和<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toSet--" target="_blank" rel="external"><code>Collectors#toSet()</code></a>文档，不能保证所返回<a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="external"><code>List</code></a>或<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html" target="_blank" rel="external"><code>Set</code></a>的类型，可变性， 序列化或线程安全。</p>
<p>为了显式控制要返回的实现，可以使用<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toCollection-java.util.function.Supplier-" target="_blank" rel="external"><code>Collectors＃toCollection（Supplier）</code></a>，从而可以返回一个指定类型的新的空集合。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// syntax with method reference</span></div><div class="line">System.out.println(strings</div><div class="line">        .stream()</div><div class="line">        .filter(s -&gt; s != <span class="keyword">null</span> &amp;&amp; s.length() &lt;= <span class="number">3</span>)</div><div class="line">        .collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>))</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// syntax with lambda</span></div><div class="line">System.out.println(strings</div><div class="line">        .stream()</div><div class="line">        .filter(s -&gt; s != <span class="keyword">null</span> &amp;&amp; s.length() &lt;= <span class="number">3</span>)</div><div class="line">        .collect(Collectors.toCollection(() -&gt; <span class="keyword">new</span> LinkedHashSet&lt;&gt;()))</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h3 id="Parallel-Stream"><a href="#Parallel-Stream" class="headerlink" title="Parallel Stream"></a>Parallel Stream</h3><p><strong>Note:</strong> 在决定使用哪个<code>Stream</code>之前，请先看看<a href="http://stackoverflow.com/a/20375622/585398" target="_blank" rel="external">ParallelStream vs Sequential Stream的对比</a>.</p>
<p>当你想同时并发执行<code>Stream</code>操作时，你可以使用这些方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; data = Arrays.asList(<span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>);</div><div class="line">Stream&lt;String&gt; aParallelStream = data.stream().parallel();</div></pre></td></tr></table></figure>
<p>Or:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; aParallelStream = data.parallelStream();</div></pre></td></tr></table></figure>
<p>要执行为并行流定义的操作，请调用终端运算符：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aParallelStream.forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>(A possible) output from the parallel <code>Stream</code>:</p>
<blockquote>
<p>Three<br>Four<br>One<br>Two<br>Five</p>
</blockquote>
<p>顺序可能会改变，因为所有的元素被并行处理（这个<em>可能</em>使它更快）。当顺序无关紧要时使用<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#parallelStream--" target="_blank" rel="external"><code>parallelStream</code></a>。</p>
<h4 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h4><p>在涉及网络的情况下，并行的 <code>Stream</code>可以降低应用的整体性能，因为所有并行的 <code>Stream</code>对于网络使用公共的fork-join线程池。</p>
<p>另一方面，在许多其他情况下，根据当前运行的CPU中可用内核的数量，并行的 <code>Stream</code>可以显着提高性能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重走Java基础之Streams-二&quot;&gt;&lt;a href=&quot;#重走Java基础之Streams-二&quot; class=&quot;headerlink&quot; title=&quot;重走Java基础之Streams 二&quot;&gt;&lt;/a&gt;重走Java基础之Streams 二&lt;/h1&gt;&lt;p&gt;接上篇&lt;a href=&quot;https://muyinchen.github.io/2017/01/10/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams(%E4%B8%80&quot;&gt;重走Java基础之Streams(一)&lt;/a&gt;/)&lt;/p&gt;
&lt;h2 id=&quot;Processing-Order&quot;&gt;&lt;a href=&quot;#Processing-Order&quot; class=&quot;headerlink&quot; title=&quot;Processing Order&quot;&gt;&lt;/a&gt;Processing Order&lt;/h2&gt;&lt;p&gt;  &lt;code&gt;Stream&lt;/code&gt;对象的处理可以是顺序或&lt;a href=&quot;http://stackoverflow.com/documentation/java/88/streams/2785/parallel-stream#t=201607281158351104612&quot;&gt;并行&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 8" scheme="https://muyinchen.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>重走Java基础之Streams 一</title>
    <link href="https://muyinchen.github.io/2017/01/10/%E9%87%8D%E8%B5%B0Java%E5%9F%BA%E7%A1%80%E4%B9%8BStreams%20%E4%B8%80/"/>
    <id>https://muyinchen.github.io/2017/01/10/重走Java基础之Streams 一/</id>
    <published>2017-01-10T09:31:05.585Z</published>
    <updated>2017-02-05T07:54:26.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重走Java基础之Streams-一"><a href="#重走Java基础之Streams-一" class="headerlink" title="重走Java基础之Streams 一"></a>重走Java基础之Streams 一</h1><p>因为经常逛<code>stackoverflow</code>,最近也在看reactive和storm以及前一阵子也用流式ORM框架<code>speedment</code>与<code>Springboot</code>整合改造了<a href="https://github.com/muyinchen/migoshop2.0" target="_blank" rel="external">migo2.0</a>中的单点登录,深深的感受到java8已经融入我们很深了，尤其是Spring5对其进行大力支持，觉得有必要再对自己的知识整理一下，顺带就把<code>stackoverflow</code>一些东西自己拿过来整理翻译一下，里面也会加入一些自己的理解 版本只关注于Java SE 8<br> <a id="more"></a></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>流表示一系列元素并支持不同类型的操作来对这些元素执行计算。在Java 8中，Collection接口有两种方法来生成Stream </p>
<ul>
<li>1）stream()和  </li>
<li>2） parallelStream()<br> 流操作包括中间或终端。 中间操作返回一个流，所以我们可以链接多个中间操作而不使用分号。 终端操作是void的或返回非流结果。</li>
</ul>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h4 id="Using-Streams"><a href="#Using-Streams" class="headerlink" title="Using Streams"></a>Using Streams</h4><p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>是可以执行顺序和并行聚合操作的一系列元素 。 任何给定的“Stream”都可能有无限量的数据流过它。 你所得到的结果是从“Stream”接收的数据在到达时被单独处理，而不是完全对数据执行批处理。 当与<a href="https://stackoverflow.com/documentation/java/91/lambda-expressions" target="_blank" rel="external">lambda表达式</a> 结合时，它们提供了使用函数方法对数据序列执行操作的简明方法。</p>
<p><strong>Example:</strong> (<a href="https://ideone.com/IUWRdv" target="_blank" rel="external">see it work on Ideone</a>)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; fruitStream = Stream.of(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"pear"</span>, <span class="string">"kiwi"</span>, <span class="string">"orange"</span>);</div><div class="line"></div><div class="line">fruitStream.filter(s -&gt; s.contains(<span class="string">"a"</span>))</div><div class="line">           .map(String::toUpperCase)</div><div class="line">           .sorted()</div><div class="line">           .forEach(System.out::println);</div></pre></td></tr></table></figure>
<p><strong>Output:</strong></p>
<blockquote>
<p>APPLE<br>BANANA<br>ORANGE<br>PEAR</p>
</blockquote>
<p>上述代码执行的操作可以总结如下：</p>
<ol>
<li><p>使用静态工厂方法<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#of-T...-" target="_blank" rel="external"><code>Stream.of(values)</code></a>创建一个包含fruit <code>String</code>的顺序排序<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a>的<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external"><code>Stream</code></a> 元素</p>
</li>
<li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#filter-java.util.function.Predicate-" target="_blank" rel="external"><code>filter()</code></a>操作仅保留与给定谓词（由谓词返回true测试时的元素）匹配的元素。 在这种情况下，它保留含有“a”的元素。 谓词作为lambda表达式给出。</p>
</li>
<li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#map-java.util.function.Function-" target="_blank" rel="external"><code>map()</code></a> 操作转换 每个元素使用给定的函数，称为映射器。 在这种情况下，每个fruit <code>String</code>使用<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html" target="_blank" rel="external">method-reference</a>映射到将string字符串转换为大写版本<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toUpperCase--" target="_blank" rel="external"><code>String::toUppercase</code></a>。</p>
<blockquote>
<p><strong>Note</strong> 如果映射函数返回与其输入参数不同的类型，那么<code>map()</code>操作将返回具有不同泛型类型的流。 例如在一个<code>Stream</code>调用<code>.map(String :: isEmpty)</code>返回一个<code>Stream&lt;Boolean&gt;</code></p>
</blockquote>
</li>
<li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted--" target="_blank" rel="external"><code>sorted()</code></a>操作对<code>Stream</code>的元素进行排序 根据它们的自然排序（根据在’String’的情况下对所在字典的顺序，其实都知道）。</p>
</li>
</ol>
<p>5.最后， <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#forEach-java.util.function.Consumer-" target="_blank" rel="external"><code>forEach(action)</code></a> 操作执行一个动作，作用于“Stream”的每个元素，将其传递给一个 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#sorted-java.util.Comparator-" target="_blank" rel="external">Consumer</a>。 在该示例中，每个元素只是被打印到控制台。 该操作是终端操作，因此不可能再次进行操作。<br>6.</p>
<blockquote>
<p><strong>Note</strong> 在<code>Stream</code>中定义的操作之所以被执行，是因为最后有终端操作。 假如没有终端操作，’Stream’将不被处理，因为’Stream’输出不被任何终端操作使用(省的浪费计算资源，所以很多书上称之为被动式foreach)。</p>
</blockquote>
<p>[<img src="http://og0sybnix.bkt.clouddn.com/6p8aM.png" alt="Chained operations"></p>
<p>操作（如上所示）链接在一起以形成可以被视为对数据的查询</p>
<hr>
<h2 id="Reusing-Streams"><a href="#Reusing-Streams" class="headerlink" title="Reusing Streams"></a>Reusing Streams</h2><p>一个<code>Stream</code>不能重复使用。 一旦调用任何中间或终端操作，“Stream”对象将变得不可用。 <code>Stream</code>代替地使用中间<code>Stream</code>对象以便将中间操作链接在一起通过一系列<code>Stream</code>操作来生成一个<code>Stream</code>对象作为中间对象，最后再调用这个生成的<code>Stream</code>对象来完成最终的操作，最后一步的操作只能进行一次，之后，此流已经没了(生命周期已结束)。</p>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; stream =</div><div class="line">    Stream.of(<span class="string">"d2"</span>, <span class="string">"a2"</span>, <span class="string">"b1"</span>, <span class="string">"b3"</span>, <span class="string">"c"</span>)</div><div class="line">        .filter(s -&gt; s.startsWith(<span class="string">"a"</span>));</div><div class="line"></div><div class="line">stream.anyMatch(s -&gt; <span class="keyword">true</span>);  <span class="comment">// The Stream has been used and is now consumed.</span></div><div class="line">stream.noneMatch(s -&gt; <span class="keyword">true</span>); <span class="comment">// IllegalStateException; stream was already used</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Closing-Streams"><a href="#Closing-Streams" class="headerlink" title="Closing Streams"></a>Closing Streams</h2><p><code>Stream</code>接口扩展了 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html" target="_blank" rel="external"><code>AutoCloseable</code></a>。Streams可以通过调用 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html#close--" target="_blank" rel="external"><code>close</code></a>方法或使用try-with -resource语句来关闭。</p>
<blockquote>
<p><strong>请注意，Stream通常不必关闭。</strong>仅需要关闭在IO通道上运行的流。 大多数<code>Stream</code> 型不对资源操作，因此不需要关闭。</p>
</blockquote>
<p><code>Stream</code> 应该关闭的示例用例是，当您从文件创建一个<code>Stream</code> 行时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(<span class="keyword">final</span> Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">"somePath"</span>)))&#123;</div><div class="line">    lines.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Stream</code>接口也声明了<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#onClose-java.lang.Runnable-" target="_blank" rel="external"><code>Stream.onClose()</code></a> 方法，它允许你注册 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html" target="_blank" rel="external"><code>Runnable</code></a>处理程序，当 流关闭。 一个示例用例是产生流的代码需要知道它何时被消耗以执行一些清理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Stream&lt;String&gt;streamAndDelete(Path path) <span class="keyword">throws</span> IOException &#123;</div><div class="line">    <span class="keyword">return</span> Files.lines(path)</div><div class="line">        .onClose(()-&gt;someClass.deletePath(path));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行处理程序只有在调用<code>close()</code> 方法时才会执行，例如通过try-with-resources：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Path myPath = Paths.get(<span class="string">"somePath"</span>);</div><div class="line"></div><div class="line"><span class="keyword">try</span>(<span class="keyword">final</span> Stream&lt;String&gt; lines = streamAndDelete(myPath))&#123;</div><div class="line">    lines.forEach(System.out::println);</div><div class="line">&#125;</div><div class="line">Files.exists(myPath); <span class="comment">// returns false</span></div></pre></td></tr></table></figure>
<p>If close() isn’t called, explicitly or implicitly, then the handler will not be called either:<br>如果没有明确或隐式地调用<code>close()</code>，那么处理程序不会被调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">streamAndDelete(myPath)</div><div class="line">    .forEach(System.out::println);</div><div class="line">Files.exists(myPath); <span class="comment">// returns true</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Processing-Order"><a href="#Processing-Order" class="headerlink" title="Processing Order"></a>Processing Order</h2><p><code>Stream</code>对象的处理可以是顺序或 <a href="http://stackoverflow.com/documentation/java/88/streams/2785/parallel-stream#t=201607281158351104612" target="_blank" rel="external">parallel(并行)</a>。</p>
<p>在<strong> sequential </strong>模式中，按照“Stream”的源的顺序处理元素。 如果<code>Stream</code>是有序的（例如 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedMap.html" target="_blank" rel="external"><code>SortedMap</code></a>实现或<a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" target="_blank" rel="external"><code>List</code></a>，处理过程保证匹配源的排序。 然而，在其他情况下，应注意不要依赖于顺序（参见：<a href="http://stackoverflow.com/q/1882762/1667004" target="_blank" rel="external">是Java的<code>HashMap`` keySet()</code>迭代顺序一致？</a>）。</p>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">42</span>); </div><div class="line"></div><div class="line"><span class="comment">// sequential </span></div><div class="line"><span class="keyword">long</span> howManyOddNumbers = integerList.stream()</div><div class="line">                                    .filter(e -&gt; (e % <span class="number">2</span>) == <span class="number">1</span>).count(); </div><div class="line"></div><div class="line">System.out.println(howManyOddNumbers); <span class="comment">// Output: 2</span></div></pre></td></tr></table></figure>
<p><a href="https://ideone.com/FuMz1c" target="_blank" rel="external">Live on Ideone</a></p>
<p><strong>并行</strong>模式允许在多个核上使用多个线程，但不能保证处理元素的顺序。</p>
<p>如果在顺序的 <code>Stream</code> 上虽然调用了多个方法，则不一定必须要调用每个方法。 例如，如果一个 <code>Stream</code> 被过滤，并且元素的数量减少到一，则不会发生对诸如<code>sort</code>的方法的后续调用。 这可以提高顺序的<code>Stream</code>的性能 - 这是一个并行的<code>Stream</code>不可能实现的优化。</p>
<p><strong>Example:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// parallel</span></div><div class="line"><span class="keyword">long</span> howManyOddNumbersParallel = integerList.parallelStream()</div><div class="line">                                            .filter(e -&gt; (e % <span class="number">2</span>) == <span class="number">1</span>).count();</div><div class="line"></div><div class="line">System.out.println(howManyOddNumbersParallel); <span class="comment">// Output: 2</span></div></pre></td></tr></table></figure>
<p><a href="https://ideone.com/FuMz1c" target="_blank" rel="external">Live on Ideone</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重走Java基础之Streams-一&quot;&gt;&lt;a href=&quot;#重走Java基础之Streams-一&quot; class=&quot;headerlink&quot; title=&quot;重走Java基础之Streams 一&quot;&gt;&lt;/a&gt;重走Java基础之Streams 一&lt;/h1&gt;&lt;p&gt;因为经常逛&lt;code&gt;stackoverflow&lt;/code&gt;,最近也在看reactive和storm以及前一阵子也用流式ORM框架&lt;code&gt;speedment&lt;/code&gt;与&lt;code&gt;Springboot&lt;/code&gt;整合改造了&lt;a href=&quot;https://github.com/muyinchen/migoshop2.0&quot;&gt;migo2.0&lt;/a&gt;中的单点登录,深深的感受到java8已经融入我们很深了，尤其是Spring5对其进行大力支持，觉得有必要再对自己的知识整理一下，顺带就把&lt;code&gt;stackoverflow&lt;/code&gt;一些东西自己拿过来整理翻译一下，里面也会加入一些自己的理解 版本只关注于Java SE 8&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 8" scheme="https://muyinchen.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>在Spring Framework 5.0中引入Kotlin支持</title>
    <link href="https://muyinchen.github.io/2017/01/09/%E5%9C%A8Spring%20Framework%205.0%E4%B8%AD%E5%BC%95%E5%85%A5Kotlin%E6%94%AF%E6%8C%81/"/>
    <id>https://muyinchen.github.io/2017/01/09/在Spring Framework 5.0中引入Kotlin支持/</id>
    <published>2017-01-09T14:48:07.633Z</published>
    <updated>2017-01-09T15:42:44.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在Spring-Framework-5-0中引入Kotlin支持"><a href="#在Spring-Framework-5-0中引入Kotlin支持" class="headerlink" title="在Spring Framework 5.0中引入Kotlin支持"></a>在Spring Framework 5.0中引入Kotlin支持</h1><p>因最近一直在业余做<a href="https://www.gitbook.com/book/muyinchen/spring-framework-5-0-0-m3/details" target="_blank" rel="external">Spring Framework 5.0 M4</a> 文档的翻译工作(也就进度稍慢了)，所以对5里面的各种比较关注，尤其是新东西，发现就拿来先翻译分享给大家了<br><a id="more"></a></p>
<p>我们几个月前有介绍关于<a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin" target="_blank" rel="external">Kotlin在start.spring.io上的支持</a>，我们有一直在进行工作，以确保Spring和<a href="https://kotlin.link/" target="_blank" rel="external">Kotlin</a>在一起玩得很好。 Kotlin的一个关键优势是它提供了一个与用Java编写的库之间非常好的<a href="https://kotlinlang.org/docs/reference/java-interop.html" target="_blank" rel="external">互操作性</a>。但是有更多的方法可以进一步，允许编写完全成熟的Kotlin代码，当开发您的下一个Spring应用程序。除了Spring Framework对Java 8的支持，Kotlin应用程序可以利用类似功能的Web或bean注册API，还有其他Kotlin专用功能，应该可以让你的生产力水平达到一个新的高度。</p>
<p>这就是为什么我们在<a href="https://spring.io/blog/2016/12/30/spring-framework-5-0-m4-released" target="_blank" rel="external">Spring Framework 5.0 M4</a>中引入了一个专门的Kotlin支持，我想在这篇博客中总结的功能，旨在使您的开发人员体验无缝的在Spring中一起使用这些技术。你可以使用<a href="https://jira.spring.io/issues/?filter=15463" target="_blank" rel="external">这个链接</a>在Spring Framework bug  tracker中查找Kotlin的相关问题。</p>
<h2 id="利用Kotlin可空信息-nullable-information"><a href="#利用Kotlin可空信息-nullable-information" class="headerlink" title="利用Kotlin可空信息(nullable information)"></a>利用Kotlin可空信息(nullable information)</h2><p>Spring最初基于来自<a href="https://github.com/rocketraman" target="_blank" rel="external">Raman Gupta</a>的社区贡献，现在利用<a href="https://kotlinlang.org/docs/reference/null-safety.html" target="_blank" rel="external">Kotlin null-safety support</a>以确定是否需要HTTP参数，而不必显式地定义<code>required</code>属性。 这意味着<code>@RequestParam name：String?</code>被视为不需要(not required)，<code>@RequestParam name：String</code>视为必需。 这也支持Spring消息<code>@Header</code>注解。</p>
<p>以类似的方式，使用<code>@Autowired</code>或<code>@Inject</code>的Spring bean注入使用此信息来知道是否需要bean。 <code>@Autowired lateinit var foo：Foo</code>意味着<code>Foo</code>类型的bean必须在应用程序上下文中注册，而<code>@Autowired lateinit var foo：Foo?</code>不会引发错误，如果这样的bean不存在。</p>
<h2 id="RestTemplate和Functional-Web-API的扩展"><a href="#RestTemplate和Functional-Web-API的扩展" class="headerlink" title="RestTemplate和Functional Web API的扩展"></a>RestTemplate和Functional Web API的扩展</h2><p><a href="https://kotlinlang.org/docs/reference/extensions.html" target="_blank" rel="external">Kotlin extensions</a> 允许以非侵入方式扩展现有的API，提供了一个更好的替代实用程序类或在Kotlin特定类层次结构中添加Kotlin专用功能到Spring中。一些类似<a href="https://github.com/MarioAriasC" target="_blank" rel="external">Mario Arias</a>的<a href="https://github.com/MarioAriasC/KotlinPrimavera/wiki" target="_blank" rel="external">KotlinPrimavera</a>已经展示了我们可以带给Spring的各种Kotlin助手API，以允许编写更多的惯用代码。使用Spring Framework 5，我们集成了Spring框架中最有用和最受欢迎的扩展，并添加了新的扩展。</p>
<p>例如，<a href="https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters" target="_blank" rel="external">Kotlin reified type parameters</a>为JVM <a href="https：// docs .oracle.com / javase / tutorial / java / generics / erasure.html">泛型类型擦除</a>提供了一个解决方法，因此我们介绍了一些扩展，以利用此功能在可能的情况下提供更好的API。</p>
<p>这允许为RestTemplate提供方便的API（感谢来自Netflix的<a href="https://github.com/jkschneider" target="_blank" rel="external">Jon Schneider</a>为此做出贡献）。例如，要在Java中检索“Foo”对象的列表，必须写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Foo&gt; result = restTemplate.exchange(url, HttpMethod.GET, <span class="keyword">null</span>, <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;Foo&gt;&gt;() &#123; &#125;).getBody();</div></pre></td></tr></table></figure></p>
<p>或者，如果你使用中间数组：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Foo&gt; result = Arrays.asList(restTemplate.getForObject(url, Foo[].class));</div></pre></td></tr></table></figure></p>
<p>而在Kotlin与Spring Framework 5扩展中，你将能够写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val result : List&lt;Foo&gt; = restTemplate.getForObject(url)</div></pre></td></tr></table></figure>
<p>请注意，Kotlin扩展名是静态解析的，你必须导入它们。 在上面的示例中，您需要添加<code>import org.springframework.web.client.RestOperationsExtension.getForObject</code>才能使用它。 Kotlin扩展通常由IDE（如IntelliJ IDEA）（如静态导入）自动建议，但对于嵌套在容器<code>object</code>中的扩展，它仍然无效（您可以投票<a href="https：//youtrack.jetbrains .com / issue / KT-15440">KT-15440</a>），所以直到它被修复，你将不得不手动添加Spring Kotlin扩展导入。</p>
<p>Spring Framework 5.0 M4中目前可用的“RestTemplate”或功能性Web API扩展包括：</p>
<ul>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtension.kt" target="_blank" rel="external">RestOperationsExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/server/ServerRequestExtension.kt" target="_blank" rel="external">ServerRequestExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/BodyInsertersExtension.kt" target="_blank" rel="external">BodyInsertersExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/BodyExtractorsExtension.kt" target="_blank" rel="external">BodyExtractorsExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web-reactive/src/main/kotlin/org/springframework/web/reactive/function/client/ClientResponseExtension.kt" target="_blank" rel="external">ClientResponseExtension</a></li>
</ul>
<p>这些扩展还提供了支持本地Kotlin<code>KClass</code>的成员函数，允许你指定<code>Foo :: class</code>参数而不是<code>Foo :: class.java</code>。</p>
<h2 id="Reactor-Kotlin-extensions"><a href="#Reactor-Kotlin-extensions" class="headerlink" title="Reactor Kotlin extensions"></a>Reactor Kotlin extensions</h2><p><a href="https://projectreactor.io/" target="_blank" rel="external">Reactor</a>是Spring Framework 5.0的反应基础，并且有很好的机会你将使用它的<a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html" target="_blank" rel="external">Mono</a>，<a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html" target="_blank" rel="external">Flux</a>和[StepVerifier] (<a href="https://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.html" target="_blank" rel="external">https://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.html</a>) 开发reactive Web应用程序时的API。</p>
<p>所以今天我们还通过新的<a href="https://github.com/reactor/reactor-kotlin" target="_blank" rel="external">reactor-kotlin</a>项目在Reactor中引入Kotlin支持！它提供了扩展，能够通过写入<code>foo.toMono()</code>从任何类实例创建<code>Mono</code>实例，许多人喜欢<code>Mono.just(foo)</code>。它还支持例如使用<code>stream.toFlux()</code>从Java 8<code>Stream</code>实例创建<code>Flux</code>。还提供了<code>Iterable</code>，<code>CompletableFuture</code>和<code>Throwable</code>扩展以及基于KClass的Reactor API变体。</p>
<p>这仍然是这个项目的早期，所以如果你想提供没有的功能，随时自由地<a href="https://github.com/reactor/reactor-kotlin/pulls" target="_blank" rel="external">贡献</a>你自己的扩展。</p>
<h2 id="Functional-bean-registration-with-Kotlin"><a href="#Functional-bean-registration-with-Kotlin" class="headerlink" title="Functional bean registration with Kotlin"></a>Functional bean registration with Kotlin</h2><p>Spring Framework 5.0引入了一种新的方式来注册bean，使用lambda作为XML或JavaConfig的替代，使用<code>@Configuration</code>和<code>@Bean</code>。 简而言之，它使得有可能注册bean与一个<code>Supplier</code> lambda，充当一个<code>FactoryBean</code>。</p>
<p>在Java中，你将会写如下的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</div><div class="line">context.registerBean(Foo.class);</div><div class="line">context.registerBean(Bar.class, () -&gt; <span class="keyword">new</span> </div><div class="line">	Bar(context.getBean(Foo.class))</div><div class="line">);</div></pre></td></tr></table></figure>
<p>而在Kotlin中，reified类型参数允许我们简单地写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">val context = AnnotationConfigApplicationContext()</div><div class="line">context.registerBean(Foo::<span class="class"><span class="keyword">class</span>)</span></div><div class="line"><span class="title">context</span>.<span class="title">registerBean</span>(<span class="title">Supplier</span> &#123;</div><div class="line">	Bar(context.getBean(Foo::<span class="class"><span class="keyword">class</span>))</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>你可以看到Spring应用程序的一个具体例子，在<a href="https://github.com/mix-it/mixit/" target="_blank" rel="external">https://github.com/mix-it/mixit /</a>使用函数<a href="https://github.com/mix-it/mixit/blob/master/src/main/kotlin/mixit/controller/UserController.kt" target="_blank" rel="external">web</a>和<a href="https://github.com/mix-it/mixit/blob/master/src/main/kotlin/mixit/Application.kt" target="_blank" rel="external"> bean注册</a>API。</p>
<p><code>ApplicationContext</code>相关Kotlin可用扩展如下：</p>
<ul>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/kotlin/org/springframework/beans/factory/BeanFactoryExtension.kt" target="_blank" rel="external">BeanFactoryExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/kotlin/org/springframework/beans/factory/ListableBeanFactoryExtension.kt" target="_blank" rel="external">ListableBeanFactoryExtension</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/kotlin/org/springframework/context/support/GenericApplicationContextExtension.kt" target="_blank" rel="external">GenericApplicationContextExtension</a></li>
</ul>
<h2 id="No-need-to-declare-your-bean-class-as-open-anymore"><a href="#No-need-to-declare-your-bean-class-as-open-anymore" class="headerlink" title="No need to declare your bean class as open anymore"></a>No need to declare your bean class as open anymore</h2><p>直到现在，使用Kotlin构建Spring Boot应用程序时遇到的几个问题之一是需要在每个类上添加一个<code>open</code>关键字，并且使用CGLIB（如<code>@Configuration</code>类）来代替Spring bean的成员函数。 这个需求的根本原因来自于在Kotlin里的<a href="https://discuss.kotlinlang.org/t/classes-final-by-default/166" target="_blank" rel="external">classes are final by default</a>这个事实。</p>
<p>幸运的是，Kotlin 1.0.6现在提供了一个<code>kotlin-spring</code>插件，在默认情况下打开类和它们的成员函数，注解或元注解使用以下注解之一：</p>
<ul>
<li><code>@Component</code></li>
<li><code>@Async</code></li>
<li><code>@Transactional</code></li>
<li><code>@Cacheable</code></li>
</ul>
<p>元注解支持意味着用<code>@Configuration</code>，<code>@Controller</code>，<code>@RestController</code>，<code>@Service</code>或<code>@Repository</code>注解的类会自动打开，因为这些注解是使用<code>@Component</code>进行的元注解。</p>
<p>我们更新了<a href="http://start.spring.io/#!language=kotlin）" target="_blank" rel="external">start.spring.io</a>默认启用它。 你可以看看<a href="https://blog.jetbrains.com/kotlin/2016/12/kotlin-1-0-6-is-here/" target="_blank" rel="external">这个Kotlin 1.0.6博客帖子</a>了解更多详情，包括 新的<code>kotlin-jpa</code>和<code>kotlin-noarg</code>插件对Spring Data实体非常有用。</p>
<h2 id="Kotlin-based-Gradle-build-configuration"><a href="#Kotlin-based-Gradle-build-configuration" class="headerlink" title="Kotlin based Gradle build configuration"></a>Kotlin based Gradle build configuration</h2><p>回到5月，Gradle <a href="https://blog.gradle.org/kotlin-meets-gradle" target="_blank" rel="external">宣布</a>，他们将支持在Groovy之外的Kotlin中编写构建和配置文件。这使得可以在IDE中具有完全自动完成和验证，因为这些文件是常规静态类型的Kotlin脚本文件。这很可能成为基于Kotlin的项目的自然选择，但这也对Java项目也很有价值。</p>
<p>自5月以来，<a href="https://github.com/gradle/gradle-script-kotlin" target="_blank" rel="external">gradle-script-kotlin</a>项目不断发展，现在可以使用2个警告：</p>
<ul>
<li>你需要Kotlin 1.1-EAP IDEA插件来获得自动完成（但如果你使用<code>kotlin-spring</code>插件，因为<code>1.1-M04</code>不能可靠地使用这个插件，等待Kotlin<code>1.1-M05</code>）</li>
<li>文档不完整，但Gradle团队对Kotlin Slack的#gradle频道非常有帮助。</li>
</ul>
<p>两个<a href="https://github.com/sdeleuze/spring-boot-kotlin-demo）和[mixit]（https://github.com/mix-it/mixit/" target="_blank" rel="external">spring-boot-kotlin-demo</a>项目使用这种基于Kotlin的Gradle构建，可以随意看看。我们)在start.spring.io<a href="https://github.com/spring-io/initializr/issues/334" target="_blank" rel="external">讨论</a>上添加了这样的支持。</p>
<h2 id="Kotlin-Script-based-templates"><a href="#Kotlin-Script-based-templates" class="headerlink" title="Kotlin Script based templates"></a>Kotlin Script based templates</h2><p>从4.3版本开始，Spring Framework提供了一个<a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html" target="_blank" rel="external">ScriptTemplateView</a>使用支持<a href="https://www.jcp.org/en/jsr/detail?id=223" target="_blank" rel="external">JSR-223</a>的脚本引擎来渲染模板。 Kotlin 1.1-M04提供了这样的支持，并允许渲染基于Kotlin的模板，有关详细信息，请参阅<a href="https://github.com/spring-projects/spring-framework/commit/badde3a479a53e1dd0777dd1bd5b55cb1021cf9e" target="_blank" rel="external">此提交</a>。</p>
<p>这使得出现了一些有趣的使用情况，如使用<a href="https://github.com/Kotlin/kotlinx.html" target="_blank" rel="external">kotlinx.html</a>DSL或简单的Kotlin multiline(多线)’String’插值，编写类型安全模板，例如此<a href="https://github.com/sdeleuze/kotlin-script-templating" target="_blank" rel="external">kotlin -script-templating</a>项目。 这可以允许您在IDE中编写具有完全自动完成功能和重构支持的这类模板：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import io.spring.demo.User</div><div class="line">import io.spring.demo.joinToLine</div><div class="line"></div><div class="line">"""</div><div class="line">$&#123;include("header", bindings)&#125;</div><div class="line">&lt;h1&gt;Title : $title&lt;/h1&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    $&#123;(users as List&lt;User&gt;).joinToLine&#123; "&lt;li&gt;User $&#123;it.firstname&#125; $&#123;it.lastname&#125;&lt;/li&gt;" &#125;&#125;</div><div class="line">&lt;/ul&gt;</div><div class="line">$&#123;include("footer")&#125;</div><div class="line">"""</div></pre></td></tr></table></figure>
<p>这个功能仍在进行中，但我正在与Kotlin团队合作，暂时使其准备好对Spring Framework 5.0 GA上的嵌套模板和i18n在MVC和Reactive两方面的支持。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我使用Kotlin编写Spring Boot应用程序越多，我觉得这两种技术有着共同的目标，允许您使用表达性，简短和可读的代码来更高效地编写应用程序，而Spring Framework 5 Kotlin支持将这些技术以更加自然，简单和强大的方式来展现给我们。</p>
<p>Kotlin可以用来编写<a href="https://github.com/sdeleuze/spring-boot-kotlin-demo" target="_blank" rel="external">基于注解的Spring Boot应用程序</a>，但作为一种新的<a href="https://github.com/mix-it/mixit/" target="_blank" rel="external">functional and reactive applications</a>也将是一种很好的尝试，Spring Framework 5.0将会启用。</p>
<p>Kotlin团队做了一个伟大的工作，修复几乎所有的bug点，我们报告，所以非常感谢他们。即将到来的Kotlin 1.1版本预计也修复<a href="https://youtrack.jetbrains.com/issue/KT-11235" target="_blank" rel="external">KT-11235</a>，以允许指定数组注解标记单个属性值，无须使用<code>arrayOf()</code>。你将面临的主要问题可能是<a href="https://youtrack.jetbrains.com/issue/KT-14984" target="_blank" rel="external">KT-14984</a>，它将需要明确指定lambda类型（如<code>Supplier {}</code>或<code>HandlerFunction {}</code>）其中只需指定<code>{}</code>应该就足够了。</p>
<p>通过转到<a href="https://start.spring.io/#!language=kotlin" target="_blank" rel="external">start.spring.io</a>并生成一个Spring Boot<code>2.0.0（SNAPSHOT）</code>项目，可以自由测试Spring Framework 5.0 Kotlin支持并在这里或者在<a href="http://slack.kotlinlang.org/" target="_blank" rel="external">Kotlin Slack</a>的“＃spring”频道向我们发送您的反馈。你也可以<a href="https://github.com/spring-projects/spring-framework/pulls" target="_blank" rel="external">贡献</a>你需要的Kotlin扩展;-)</p>
<p>翻译自：<a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" target="_blank" rel="external">https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0</a></p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在Spring-Framework-5-0中引入Kotlin支持&quot;&gt;&lt;a href=&quot;#在Spring-Framework-5-0中引入Kotlin支持&quot; class=&quot;headerlink&quot; title=&quot;在Spring Framework 5.0中引入Kotlin支持&quot;&gt;&lt;/a&gt;在Spring Framework 5.0中引入Kotlin支持&lt;/h1&gt;&lt;p&gt;因最近一直在业余做&lt;a href=&quot;https://www.gitbook.com/book/muyinchen/spring-framework-5-0-0-m3/details&quot;&gt;Spring Framework 5.0 M4&lt;/a&gt; 文档的翻译工作(也就进度稍慢了)，所以对5里面的各种比较关注，尤其是新东西，发现就拿来先翻译分享给大家了&lt;br&gt;
    
    </summary>
    
      <category term="Spring5新特性" scheme="https://muyinchen.github.io/categories/Spring5%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Spring5" scheme="https://muyinchen.github.io/tags/Spring5/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring缓存数据</title>
    <link href="https://muyinchen.github.io/2017/01/09/%E4%BD%BF%E7%94%A8Spring%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <id>https://muyinchen.github.io/2017/01/09/使用Spring缓存数据/</id>
    <published>2017-01-09T09:55:50.680Z</published>
    <updated>2017-01-09T09:55:38.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Spring缓存数据"><a href="#使用Spring缓存数据" class="headerlink" title="使用Spring缓存数据"></a>使用Spring缓存数据</h1><p>本指南将指导您完成在Spring所托管bean上启用缓存的过程。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>您将构建一个应用程序，在一个简单的book repository中启用缓存。</p>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那        里开始工作 。</li>
</ul>
<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2><p>与大多数[Spring 入门指南]一样(<a href="https://spring.io/guides)，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。" target="_blank" rel="external">https://spring.io/guides)，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。</a> 无论如何，你最终得到工作代码。</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-caching/archive/master.zip" target="_blank" rel="external">Download</a>  并解压缩本指南的源代码仓库，或使用  <a href="https://spring.io/understanding/Git" target="_blank" rel="external">Git</a>: <code>git clone https://github.com/spring-guides/gs-caching.git</code></li>
<li>cd 到 <code>gs-caching/initial</code></li>
<li>跳转到<a href="https://spring.io/guides/gs/caching/#initial" target="_blank" rel="external">Create a Redis message receiver</a>.</li>
</ul>
<p><strong>当你做完这一切</strong>,  你可以根据 <code>gs-caching/complete</code>中的代码检查结果.</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序时，但是需要使用<a href="http://gradle.org" target="_blank" rel="external">Gradle</a>和<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a> 来写你的代码。 如果你不熟悉任何一个，请参考<a href="https://spring.io/guides/gs/gradle" target="_blank" rel="external">使用Gradle构建Java项目</a>或<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>。</p>
<h3 id="Create-the-directory-structure"><a href="#Create-the-directory-structure" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<h3 id="Create-a-Gradle-build-file"><a href="#Create-a-Gradle-build-file" class="headerlink" title="Create a Gradle build file"></a>Create a Gradle build file</h3><p>下面是 <a href="https://github.com/spring-guides/gs-caching/blob/master/initial/build.gradle" target="_blank" rel="external">initial Gradle build file</a>.<br><code>build.gradle</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">'eclipse'</span></div><div class="line">apply plugin: <span class="string">'idea'</span></div><div class="line">apply plugin: <span class="string">'org.springframework.boot'</span></div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = <span class="string">'gs-caching'</span></div><div class="line">    version =  <span class="string">'0.1.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line">targetCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-cache"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-gradle-plugin" target="_blank" rel="external">Spring Boot gradle插件</a>提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和传递服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序，但是需要使用<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a>来构建你的代码。 如果你不熟悉Maven，请参考<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>.</p>
<h3 id="Create-the-directory-structure-1"><a href="#Create-the-directory-structure-1" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<p><code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-caching<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-maven-plugin" target="_blank" rel="external">Spring Boot Maven插件</a> 提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和运输服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><ul>
<li>阅读如何通过本指南直接导入<a href="https://spring.io/guides/gs/sts/" target="_blank" rel="external">Spring Tool Suite</a>。</li>
<li>阅读如何在<a href="https://spring.io/guides/gs/intellij-idea" target="_blank" rel="external">IntelliJ IDEA</a>上使用本指南。</li>
</ul>
<h2 id="Create-a-book-repository"><a href="#Create-a-book-repository" class="headerlink" title="Create a book repository"></a>Create a book repository</h2><p>首先，让我们为你的book创建一个非常简单的模型</p>
<p><code>src/main/java/hello/Book.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String isbn;</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String isbn, String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isbn = isbn;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIsbn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isbn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsbn</span><span class="params">(String isbn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isbn = isbn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> + <span class="string">"isbn='"</span> + isbn + <span class="string">'\''</span> + <span class="string">", title='"</span> + title + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和该model的存储库：</p>
<p><code>src/main/java/hello/BookRepository.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Book <span class="title">getByIsbn</span><span class="params">(String isbn)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您可以使用<a href="http://projects.spring.io/spring-data/" target="_blank" rel="external">Spring Data</a>在很多的SQL或NoSQL stores中提供repository仓库的实现，但是出于本指南的目的， 将使用模拟一些延迟（网络服务，慢延迟等）进行简单地的实现。</p>
<p><code>src/main/java/hello/SimpleBookRepository.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getByIsbn</span><span class="params">(String isbn)</span> </span>&#123;</div><div class="line">        simulateSlowService();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book(isbn, <span class="string">"Some book"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Don't do this at home</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">simulateSlowService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> time = <span class="number">3000L</span>;</div><div class="line">            Thread.sleep(time);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>simulateSlowService</code>是故意在每个<code>getByIsbn</code>调用中插入一个三秒延迟。 这是一个例子，稍后，你可以通过加入缓存来看到加速的效果。</p>
<h2 id="Using-the-repository"><a href="#Using-the-repository" class="headerlink" title="Using the repository"></a>Using the repository</h2><p>接下来，连接repository库并使用它访问一些书。</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@ SpringBootApplication是一个方便的注解，添加了以下所有内容：</p>
<ul>
<li>@ Configuration将类标记为应用程序上下文的bean定义的来源。</li>
<li>@ EnableAutoConfiguration告诉Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。</li>
<li>通常你会为Spring MVC应用程序添加@ EnableWebMvc，但是Spring Boot在类路径上看到<strong> spring-webmvc </strong>时会自动添加它。这将应用程序标记为Web应用程序，并激活关键行为，如设置一个“DispatcherServlet”。</li>
<li>@ ComponentScan告诉Spring在hello包中寻找其他组件，配置和服务，允许它找到控制器。</li>
</ul>
<p>main()方法使用Spring Boot的SpringApplication.run()方法来启动应用程序。你有注意到一行XML？没有<strong> web.xml </strong>文件。这个Web应用程序是100％纯Java，你不必处理配置任何管道或基础设施。</p>
<p>还有一个<a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-command-line-runner" target="_blank" rel="external"><code>CommandLineRunner</code></a>，注入<code>BookRepository</code>和 用不同的参数调用它几次。</p>
<p><code>src/main/java/hello/AppRunner.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AppRunner.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookRepository bookRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppRunner</span><span class="params">(BookRepository bookRepository)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bookRepository = bookRepository;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">".... Fetching books"</span>);</div><div class="line">        logger.info(<span class="string">"isbn-1234 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-1234"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-4567 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-4567"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-1234 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-1234"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-4567 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-4567"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-1234 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-1234"</span>));</div><div class="line">        logger.info(<span class="string">"isbn-1234 --&gt;"</span> + bookRepository.getByIsbn(<span class="string">"isbn-1234"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你尝试在此时运行应用程序，您会注意到它很慢，即使您几次检索完全相同的书。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2014-06-05 12:15:35.783  ... : .... Fetching books</div><div class="line">2014-06-05 12:15:40.783  ... : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2014-06-05 12:15:43.784  ... : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2014-06-05 12:15:46.786  ... : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div></pre></td></tr></table></figure>
<p>从时间戳可以看出，每本书花了大约三秒钟来检索，即使它是相同的标题被重复抓取。</p>
<h2 id="Enable-caching"><a href="#Enable-caching" class="headerlink" title="Enable caching"></a>Enable caching</h2><p>让我们在你的SimpleBookRepository上启用缓存，这样书就会被缓存在<code>books</code>缓存中。</p>
<p><code>src/main/java/hello/SimpleBookRepository.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@Cacheable</span>(<span class="string">"books"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getByIsbn</span><span class="params">(String isbn)</span> </span>&#123;</div><div class="line">        simulateSlowService();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book(isbn, <span class="string">"Some book"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Don't do this at home</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">simulateSlowService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> time = <span class="number">3000L</span>;</div><div class="line">            Thread.sleep(time);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您现在需要启用缓存注解的处理</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableCaching</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/EnableCaching.html" target="_blank" rel="external"><code>@EnableCaching</code></a>注解触发检查并处理每个Spring bean用于存在对公共方法的缓存注解。如果找到这样的注解，则自动创建代理以拦截方法调用并相应地处理缓存行为。</p>
<p>缓存处理的相应注解是<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html" target="_blank" rel="external"><code>Cacheable</code></a>，<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CachePut.html" target="_blank" rel="external"> <code>CachePut</code></a>和<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/annotation/CacheEvict.html" target="_blank" rel="external"><code>CacheEvict</code></a>.有关更多详细信息，可以参考javadocs和<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html" target="_blank" rel="external">文档</a>。</p>
<p>Spring Boot会自动配置一个合适的<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/CacheManager.html" target="_blank" rel="external"><code>CacheManager</code></a>，作为相关缓存。有关更多详细信息，请参阅<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-caching.html" target="_blank" rel="external">Spring Boot文档</a>。</p>
<p>我们的示例不使用特定的缓存库，因此我们的缓存存储是使用<code>ConcurrentHashMap</code>的简单回退。缓存抽象支持各种各样的缓存库，并完全符合JSR-107（JCache）。</p>
<h3 id="Build-an-executable-JAR"><a href="#Build-an-executable-JAR" class="headerlink" title="Build an executable JAR"></a>Build an executable JAR</h3><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，易于跨不同环境将服务作为应用程序进行发布，维护版本和部署等等。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-caching-0.1.0.jar</div></pre></td></tr></table></figure>
<p>如果您使用Maven，可以使用<code>./mvnw spring-boot:run</code>运行应用程序。 或者你可以用<code>./mvnw clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-caching-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">build a classic WAR file</a></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Test-the-application"><a href="#Test-the-application" class="headerlink" title="Test the application"></a>Test the application</h2><p>现在缓存已启用，您可以再次执行它，并通过添加或不使用相同的isbn的额外调用查看差异。 你应该可以看到其产生明显的区别。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2016-09-01 11:12:47.033  .. : .... Fetching books</div><div class="line">2016-09-01 11:12:50.039  .. : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.044  .. : isbn-4567 --&gt;Book&#123;isbn=<span class="string">'isbn-4567'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.045  .. : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.045  .. : isbn-4567 --&gt;Book&#123;isbn=<span class="string">'isbn-4567'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.045  .. : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div><div class="line">2016-09-01 11:12:53.045  .. : isbn-1234 --&gt;Book&#123;isbn=<span class="string">'isbn-1234'</span>, title=<span class="string">'Some book'</span>&#125;</div></pre></td></tr></table></figure>
<p>This excerpt from the console shows that the first time to fetch each title took three seconds, but each subsequent call was near instantaneous.<br>从控制台的这段日志显示，第一次获取每个标题花了三秒钟，但每个后续的访问接近瞬间。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜！ 你刚刚通过Springcache在托管bean上启用了缓存。</p>
<p>翻译自：<a href="https://spring.io/guides/gs/caching/" target="_blank" rel="external">https://spring.io/guides/gs/caching/</a></p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Spring缓存数据&quot;&gt;&lt;a href=&quot;#使用Spring缓存数据&quot; class=&quot;headerlink&quot; title=&quot;使用Spring缓存数据&quot;&gt;&lt;/a&gt;使用Spring缓存数据&lt;/h1&gt;&lt;p&gt;本指南将指导您完成在Spring所托管bean上启用缓存的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>关于编程路上的一些杂谈 多线程中锁的秘密(二)</title>
    <link href="https://muyinchen.github.io/2017/01/07/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E8%B0%88%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E9%94%81%E7%9A%84%E7%A7%98%E5%AF%86(%E4%BA%8C)/"/>
    <id>https://muyinchen.github.io/2017/01/07/关于编程路上的一些杂谈 多线程中锁的秘密(二)/</id>
    <published>2017-01-07T15:44:27.261Z</published>
    <updated>2017-01-07T15:56:57.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于编程路上的一些杂谈-多线程中锁的秘密-二"><a href="#关于编程路上的一些杂谈-多线程中锁的秘密-二" class="headerlink" title="关于编程路上的一些杂谈 多线程中锁的秘密(二)"></a>关于编程路上的一些杂谈 多线程中锁的秘密(二)</h1><p>接上篇<a href="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/">关于编程路上的一些杂谈 由线程的通信原理想到的(一)</a></p>
<p>其实已经讨论一些锁的实现了，这里再深入一下，把问题讲明白。<br><a id="more"></a></p>
<h2 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h2><pre><code>有volatile变量修饰的共享变量进行写操作的时候会多出第二行汇编代码，通过查IA-32架构软件开发者手册可知，Lock前缀的指令在多核处理器下会引发了两件事情。
</code></pre><ol>
<li><p><strong>将当前处理器缓存行的数据写回到系统内存。</strong></p>
</li>
<li><p><strong>这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效。</strong></p>
<p>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存（L1，L2或其他）后再进行操作，但操作完不知道何时会写到内存。如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题。所以，在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。 </p>
</li>
</ol>
<p>   同样，参照上面所说的，对于volatile来说，它的实现也不外乎需要达到以下两种实现效果：</p>
<p><strong>1）Lock前缀指令会引起处理器缓存回写到内存Lock前缀指令会引起处理器缓存回写到内存</strong></p>
<p><strong>2）一个处理器的缓存回写到内存会导致其他处理器的缓存无效</strong></p>
<h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><p>对象头：包括两部分信息。第一部分用于存储对象自身的运行时数据，如哈希码，GC分代年龄、锁状态、线程持有锁、等等。这部分数据的长度在32为或64位，官方称之为“MarkWord”。对象头的另一部分是类型指针，即对象指向它的类元素的指针，通过这个指针来确定这个对象时那个类的实例。（如果Java对象时一个数组，则对象头还必须有一块用于记录数组长度的数据。因为Java数组元数据中没有数组大小的记录）</p>
<h2 id="偏向锁的概念"><a href="#偏向锁的概念" class="headerlink" title="偏向锁的概念"></a>偏向锁的概念</h2><p>HotSpot的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁）：如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。 </p>
<h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><p>在<a href="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/">关于编程路上的一些杂谈 由线程的通信原理想到的(一)</a>其实已经有讲到volatile 的实现方式的，通过上面的深入想必已经有更细致的了解，然后也相信大家对于像i++  这种复合操作不具有原子性(i是volatile变量 )很是疑惑，这里要说一个概念： </p>
<h3 id="程序计数器PC"><a href="#程序计数器PC" class="headerlink" title="程序计数器PC"></a>程序计数器PC</h3><p>程序计数器即指令地址寄存器。在某些计算机中用来存放当前正在执行的指令地址；而在另一些计算机中则用来存放即将要执行的下一条指令地址；而在有指令预取功能的计算机中，一般还要增加一个程序计数器用来存放下一条要取出的指令地址。程序计数器用以指出下条指令在主存中的存放地址，CPU根据PC的内容去主存取得指令。因程序中指令是顺序执行的，所以PC有自增功能。</p>
<p><code>也就是说其实i++可以理解成一条指令，而i=i+1便是两条指令了包括i+1和将结果赋给i，应该不需要我再深入了，已经很明了了。</code></p>
<h3 id="锁的语义"><a href="#锁的语义" class="headerlink" title="锁的语义"></a>锁的语义</h3><p>这里在<a href="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/">关于编程路上的一些杂谈 由线程的通信原理想到的(一)</a>已经有说其底层还是依靠volatile来实现，接下来就通过<code>ReentrantLock</code>源码来具体对其进行分析：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_213212.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_215402.png" alt=""></p>
<p>对于<code>compareAndSetState</code>来说：</p>
<p>CAS, CPU指令，在大多数处理器架构，包括IA32、Space中采用的都是CAS指令，CAS的语义是“我认为V的值应该为A，如果是，那么将V的值更新为B，否则不修改并告诉V的值实际为多少”，CAS是项 <strong>乐观锁</strong> 技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。</p>
<p>CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>
<p>对于<code>compareAndSetState</code>来说：它是个原子方法,原理就是是CAS.这个是高效,而且是原子的,不用加锁. 也会因为其他值改了而产生误操作,应为会先判断当前值,符合期望才去改变,而我们所要操作的值无非就是<code>state</code>而已</p>
<p>对于上面截图的代码说的直白点就是对于一个线程如果当前没有竞争，则直接拿到或者上锁，否则，尝试获取即acquire(1)方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Sync object for non-fair locks</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Performs lock.  Try immediate barge, backing up to normal</div><div class="line">         * acquire on failure.</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">                setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">            <span class="keyword">else</span></div><div class="line">                acquire(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> nonfairTryAcquire(acquires);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_222450.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Acquires in exclusive mode, ignoring interrupts.  Implemented</div><div class="line">    * by invoking at least once &#123;<span class="doctag">@link</span> #tryAcquire&#125;,</div><div class="line">    * returning on success.  Otherwise the thread is queued, possibly</div><div class="line">    * repeatedly blocking and unblocking, invoking &#123;<span class="doctag">@link</span></div><div class="line">    * #tryAcquire&#125; until success.  This method can be used</div><div class="line">    * to implement method &#123;<span class="doctag">@link</span> Lock#lock&#125;.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> arg the acquire argument.  This value is conveyed to</div><div class="line">    *        &#123;<span class="doctag">@link</span> #tryAcquire&#125; but is otherwise uninterpreted and</div><div class="line">    *        can represent anything you like.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">           acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">           selfInterrupt();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_225458.png" alt=""></p>
<p>首先通过tryAcquire()方法尝试获取，如果不能的话，则通过AddWaiter()方法，用当前线程生成一个Node放入队尾，而acquireQueued()则是一种自旋锁的实现方式。最后把当前线程interrupt。这里可以发现，java的 AQS的实现很巧妙的一个地方就是把tryAcquire延迟到子类去实现。公平锁和非公平锁的实现方式是不一样的。非公平锁的tryAcquire()的是通过nonfairTryAcquire()。</p>
<p>然后看acquireQueued(),其实就是一个无限循环，直到获得锁为止。通过上图源码可以看到在shouldParkAfterFailedAcquire()方法中，通过前一个Node的waitStatus来判断是否应该把当前线程阻塞(所以用了双&amp;&amp;开关语义)，阻塞是通过parkAndCheckInterrupt()中的<strong>LockSupport</strong>.park()实现。</p>
<p>再看一下释放锁：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Attempts to release this lock.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;If the current thread is the holder of this lock then the hold</div><div class="line">     * count is decremented.  If the hold count is now zero then the lock</div><div class="line">     * is released.  If the current thread is not the holder of this</div><div class="line">     * lock then &#123;<span class="doctag">@link</span> IllegalMonitorStateException&#125; is thrown.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> IllegalMonitorStateException if the current thread does not</div><div class="line">     *         hold this lock</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        sync.release(<span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>release：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Releases in exclusive mode.  Implemented by unblocking one or</div><div class="line">     * more threads if &#123;<span class="doctag">@link</span> #tryRelease&#125; returns true.</div><div class="line">     * This method can be used to implement method &#123;<span class="doctag">@link</span> Lock#unlock&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> arg the release argument.  This value is conveyed to</div><div class="line">     *        &#123;<span class="doctag">@link</span> #tryRelease&#125; but is otherwise uninterpreted and</div><div class="line">     *        can represent anything you like.</div><div class="line">     * <span class="doctag">@return</span> the value returned from &#123;<span class="doctag">@link</span> #tryRelease&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">            Node h = head;</div><div class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">                unparkSuccessor(h);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">           <span class="keyword">int</span> c = getState() - releases;</div><div class="line">           <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">           <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">           <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">               free = <span class="keyword">true</span>;</div><div class="line">               setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">           setState(c);</div><div class="line">           <span class="keyword">return</span> free;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>可以看出tryRelease和tryAcquire一样，也是延迟到子类(Sync)实现的。c==0的时候，才能成功释放锁，所以多次锁定(看源码就可以知道lock一次c就+1，第一张截图的第二个判断，假如是当前线程的话就再+一次1)就需要多次释放才能解锁。<br>释放锁之后，就会唤醒队列的一个node中的线程</p>
<p>这段代码目的在于找出第一个可以unpark的线程，一般说来head.next == head，Head就是第一个线程，但Head.next可能会被置为null(参考acquireQueued()源码)，因此比较稳妥的办法是从后往前找第一个可用线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Wakes up node&apos;s successor, if one exists.</div><div class="line">    *</div><div class="line">    * @param node the node</div><div class="line">    */</div><div class="line">   private void unparkSuccessor(Node node) &#123;</div><div class="line">       /*</div><div class="line">        * If status is negative (i.e., possibly needing signal) try</div><div class="line">        * to clear in anticipation of signalling.  It is OK if this</div><div class="line">        * fails or if status is changed by waiting thread.</div><div class="line">        */</div><div class="line">       int ws = node.waitStatus;</div><div class="line">       if (ws &lt; 0)</div><div class="line">           compareAndSetWaitStatus(node, ws, 0);</div><div class="line"></div><div class="line">       /*</div><div class="line">        * Thread to unpark is held in successor, which is normally</div><div class="line">        * just the next node.  But if cancelled or apparently null,</div><div class="line">        * traverse backwards from tail to find the actual</div><div class="line">        * non-cancelled successor.</div><div class="line">        */</div><div class="line">       Node s = node.next;</div><div class="line">       if (s == null || s.waitStatus &gt; 0) &#123;</div><div class="line">           s = null;</div><div class="line">           for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</div><div class="line">               if (t.waitStatus &lt;= 0)</div><div class="line">                   s = t;</div><div class="line">       &#125;</div><div class="line">       if (s != null)</div><div class="line">           LockSupport.unpark(s.thread);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170107_231634.png" alt=""></p>
<p>其实我们在设计代码的时候也是可以通过静态内部类的方式来实现一些自己想要的功能，不过我们经常会用Spring框架，其通过动态代理已经实现了这个按需的延迟加载这些特性，也无须去头疼这些那些的</p>
<p>其实关键点也就这些，绕来绕去其实就一句话，假如有A和B两个线程，A符合期望的话，那么A就可以入主东宫了，B还老老实实的做它的嫔妃就是</p>
<p>通过以上这些解释，其实我们发现，锁的底层其实也是在反复操作一个volatile 变量，而多线程的其他操作也是基于volatile 的特性来实现的，包括计数器，barrier，各种安全工具类，理解这个其他自然都不是什么问题，包括很多并发框架的和事务等的设计，先就扯到这里吧。</p>
<p>参考文献：Java并发编程的艺术</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于编程路上的一些杂谈-多线程中锁的秘密-二&quot;&gt;&lt;a href=&quot;#关于编程路上的一些杂谈-多线程中锁的秘密-二&quot; class=&quot;headerlink&quot; title=&quot;关于编程路上的一些杂谈 多线程中锁的秘密(二)&quot;&gt;&lt;/a&gt;关于编程路上的一些杂谈 多线程中锁的秘密(二)&lt;/h1&gt;&lt;p&gt;接上篇&lt;a href=&quot;https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/&quot;&gt;关于编程路上的一些杂谈 由线程的通信原理想到的(一)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实已经讨论一些锁的实现了，这里再深入一下，把问题讲明白。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://muyinchen.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>关于编程路上的一些杂谈 由线程的通信原理想到的(一)</title>
    <link href="https://muyinchen.github.io/2017/01/06/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E8%B0%88%20%E7%94%B1%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E6%83%B3%E5%88%B0%E7%9A%84(%E4%B8%80)/"/>
    <id>https://muyinchen.github.io/2017/01/06/关于编程路上的一些杂谈 由线程的通信原理想到的(一)/</id>
    <published>2017-01-06T09:23:38.970Z</published>
    <updated>2017-01-06T09:25:48.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于编程路上的一些杂谈-由线程的通信原理想到的-一"><a href="#关于编程路上的一些杂谈-由线程的通信原理想到的-一" class="headerlink" title="关于编程路上的一些杂谈 由线程的通信原理想到的(一)"></a>关于编程路上的一些杂谈 由线程的通信原理想到的(一)</h1><p>​    写这个其实想了很多，到底该用什么方式来写，最后还是按照自己的随意来随意的拉拉家常算了。<br><a id="more"></a><br>时常听说身边和网友说自己遇到瓶颈，接下来不知道该往哪里走，我给的建议就是：<code>请回归基础</code>.</p>
<p>​    为何这样说，先拿一个大家都知道的东西来说，并发编程中 ，线程之间如何通信及线程之间如何同步 ，线程之间的通信机制有两种：共享内存和消息传递 ，如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170106_162517.png" alt=""></p>
<p>如果线程A与线程B之间要通信的话，必须要经历下面2个步骤：</p>
<ol>
<li>线程A把本地内存A中更新过的共享变量刷新到主内存中去。</li>
<li>线程B到主内存中去读取线程A之前已更新过的共享变量。 </li>
</ol>
<p>好了，就言仅于此，接下来我们跳过这里看一个让人感觉离的比较远的东西。</p>
<p>​    就拿大家觉得比较在上层的<code>zookeeper</code>来讲，<code>分布式锁</code>这个概念相信不少人都听过，Linux文件系统的组成相信大家也一定知道点，最起码的是这个<code>文件系统</code>是以<code>树</code>的形式组织起来的,知道这个其实你就已经理解了三分之一了，因为<code>zookeeper</code>的数据结构也是这么组织的，也是一棵树的形式，其实大家很自然就想到了b+树这个概念，这也是面试里为何会经常问到b+树到底是个什么东西，回到正题，当大家一谈分布式这个概念的时候，往往就会觉得头大，不想触碰，我觉得无非就是几份同样的代码给分放到不同的机器里来运行，各自有各自的web服务器，而我们可以很自然的把相应的服务器看成是一个容器，也就是上下文，其实也就是上图里A和B线程相当于是两台机器，而共享变量的副本其实就是各自机器里的上下文而已，这么看来，所谓的分布式不也就是我们在单机上操作的多线程么，又有何高大上可言。</p>
<p>​    既然搞分布式，那么我们接下来要解决的就是两台机器间的通信问题，也就是线程之间如何通信及线程之间如何同步变成了分布式环境下两台机器如何进行通信和同步，同样的，我们需要一个所谓的<code>主存</code>，这里的主存就是<code>zookeeper</code>,这里先对大致的原理说下，在以后的文章里会对细节各种说道的，使用过zookeeper的都知道，我们可以通过相应的API(个人推荐Curator)在zookeeper里创建一个临时的节点，一个<code>操作session</code>结束这个节点的生命周期也就结束销毁了,利用这个特性，我们在A机器修改某一个共享变量的时候，会先在zookeeper里获取下有没有这个节点，没有则创建，有则等待(因为是同一份代码，所以创建的节点也会相同)，这样便不会对共享变量同时进行多次操作，具体的实现细节以后再说，其实这个api的写法和Java底层的源码没多大区别，用法也没多少区别。</p>
<p>​    其实所说的就是分布式锁的原理，其实我们是可以从volatile 的语义联系到锁的语义的，拿<code>ReentrantLock</code>来说，<code>其底层也无非是维护一个节点(请看下图)</code>，用的也是volatile语义，再回头看看zookeeper的这种操作方式，难道还有疑虑么，所谓的抽象出来的高度的东西，其实还是底层的一些实现，用的代码也逃不出底层代码那些套路，包括zookeeper里的barrier，计数器等等。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170106_171258.png" alt=""></p>
<p>​    这次就暂时说到这里了，篇幅长了大家也没人看，下一篇想想，最近两个月一直在用通用mapper，不如来讲下通用mapper是如何根据mybatis生成的东西做的一系列组合封装，方便大家项目中使用相应的思想，后面依然会回到基础和上层一些架构框架之间的联系上来，不仅仅是多线程这块的东西.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于编程路上的一些杂谈-由线程的通信原理想到的-一&quot;&gt;&lt;a href=&quot;#关于编程路上的一些杂谈-由线程的通信原理想到的-一&quot; class=&quot;headerlink&quot; title=&quot;关于编程路上的一些杂谈 由线程的通信原理想到的(一)&quot;&gt;&lt;/a&gt;关于编程路上的一些杂谈 由线程的通信原理想到的(一)&lt;/h1&gt;&lt;p&gt;​    写这个其实想了很多，到底该用什么方式来写，最后还是按照自己的随意来随意的拉拉家常算了。&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://muyinchen.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://muyinchen.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>使用Redis进行消息传递</title>
    <link href="https://muyinchen.github.io/2017/01/05/Messaging%20with%20Redis/"/>
    <id>https://muyinchen.github.io/2017/01/05/Messaging with Redis/</id>
    <published>2017-01-05T06:32:49.660Z</published>
    <updated>2017-01-05T06:37:32.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Redis进行消息传递"><a href="#使用Redis进行消息传递" class="headerlink" title="使用Redis进行消息传递"></a>使用Redis进行消息传递</h1><p>本指南将指导您完成使用Spring Data Redis发布和订阅(通过Redis发送)的消息的过程。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>你将构建一个使用<code>StringRedisTemplate</code>来发布一个字符串消息的应用程序，并且有一个<a href="https://spring.io/understanding/POJO" target="_blank" rel="external">POJO</a>使用<code>MessageListenerAdapter</code>来订阅。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>使用Spring Data Redis作为发布消息的手段可能听起来很奇怪，但是你会发现，Redis不仅提供了NoSQL数据存储，还提供了一个消息系统.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那        里开始工作 。</li>
<li>Redis服务器（安装说明如下）</li>
</ul>
<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2><p>与大多数[Spring 入门指南]一样(<a href="https://spring.io/guides)，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。" target="_blank" rel="external">https://spring.io/guides)，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。</a> 无论如何，你最终得到工作代码。</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-messaging-redis/archive/master.zip" target="_blank" rel="external">Download</a>  并解压缩本指南的源代码仓库，或使用  <a href="https://spring.io/understanding/Git" target="_blank" rel="external">Git</a>: <code>git clone https://github.com/spring-guides/gs-messaging-redis.git</code></li>
<li>cd 到 <code>gs-messaging-redis/initial</code></li>
<li>跳转到<a href="https://spring.io/guides/gs/messaging-redis/#initial" target="_blank" rel="external">Create a Redis message receiver</a>.</li>
</ul>
<p><strong>当你做完这一切</strong>,  你可以根据 <code>gs-messaging-redis/complete</code>中的代码检查结果.</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序时，但是需要使用<a href="http://gradle.org" target="_blank" rel="external">Gradle</a>和<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a> 来写你的代码。 如果你不熟悉任何一个，请参考<a href="https://spring.io/guides/gs/gradle" target="_blank" rel="external">使用Gradle构建Java项目</a>或<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>。</p>
<h3 id="Create-the-directory-structure"><a href="#Create-the-directory-structure" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<h3 id="Create-a-Gradle-build-file"><a href="#Create-a-Gradle-build-file" class="headerlink" title="Create a Gradle build file"></a>Create a Gradle build file</h3><p>下面是 <a href="https://github.com/spring-guides/gs-consuming-rest/blob/master/initial/build.gradle" target="_blank" rel="external">initial Gradle build file</a>.<br><code>build.gradle</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">'eclipse'</span></div><div class="line">apply plugin: <span class="string">'idea'</span></div><div class="line">apply plugin: <span class="string">'org.springframework.boot'</span></div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = <span class="string">'gs-messaging-redis'</span></div><div class="line">    version =  <span class="string">'0.1.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line">targetCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter"</span>)</div><div class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-redis"</span>)</div><div class="line">    testCompile(<span class="string">"junit:junit"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-gradle-plugin" target="_blank" rel="external">Spring Boot gradle插件</a>提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和传递服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序，但是需要使用<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a>来构建你的代码。 如果你不熟悉Maven，请参考<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>.</p>
<h3 id="Create-the-directory-structure-1"><a href="#Create-the-directory-structure-1" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<p><code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-messaging-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/libs-release<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-maven-plugin" target="_blank" rel="external">Spring Boot Maven插件</a> 提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和运输服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><ul>
<li>阅读如何通过本指南直接导入<a href="https://spring.io/guides/gs/sts/" target="_blank" rel="external">Spring Tool Suite</a>。</li>
<li>阅读如何在<a href="https://spring.io/guides/gs/intellij-idea" target="_blank" rel="external">IntelliJ IDEA</a>上使用本指南。</li>
</ul>
<h2 id="Standing-up-a-Redis-server"><a href="#Standing-up-a-Redis-server" class="headerlink" title="Standing up a Redis server"></a>Standing up a Redis server</h2><p>在您可以构建消息传递应用程序之前，您需要设置将要处理接收和发送消息的服务器。</p>
<p>Redis是一个开源的，BSD许可的键值数据存储，它还带有一个消息系统。 服务器在<a href="http://redis.io/download" target="_blank" rel="external">http://redis.io/download</a> 上免费提供。 你可以手动下载，或者如果你使用Mac的homebrew：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install redis</div></pre></td></tr></table></figure>
<p>解压缩Redis后，您可以使用默认设置启动它。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server</div></pre></td></tr></table></figure>
<p>您应该看到这样的消息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[35142] 01 May 14:36:28.939 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></div><div class="line">[35142] 01 May 14:36:28.940 * Max number of open files <span class="built_in">set</span> to 10032</div><div class="line">                _._</div><div class="line">              _.-``__ <span class="string">''</span>-._</div><div class="line">        _.-``    `.  `_.  <span class="string">''</span>-._           Redis 2.6.12 (00000000/0) 64 bit</div><div class="line">    .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._</div><div class="line">  (    <span class="string">'      ,       .-`  | `,    )     Running in stand alone mode</span></div><div class="line">  |`-._`-...-` __...-.``-._|'` _.-<span class="string">'|     Port: 6379</span></div><div class="line">  |    `-._   `._    /     _.-'    |     PID: 35142</div><div class="line">    `-._    `-._  `-./  _.-<span class="string">'    _.-'</span></div><div class="line">  |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></div><div class="line">  |    `-._`-._        _.-'_.-<span class="string">'    |           http://redis.io</span></div><div class="line">    `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span></div><div class="line">  |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|</span></div><div class="line">  |    `-._`-._        _.-'_.-<span class="string">'    |</span></div><div class="line">    `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span></div><div class="line">        `-._    `-.__.-<span class="string">'    _.-'</span></div><div class="line">            `-._        _.-<span class="string">'</span></div><div class="line">                `-.__.-'</div><div class="line"></div><div class="line">[35142] 01 May 14:36:28.941 <span class="comment"># Server started, Redis version 2.6.12</span></div><div class="line">[35142] 01 May 14:36:28.941 * The server is now ready to accept connections on port 6379</div></pre></td></tr></table></figure>
<h2 id="Create-a-Redis-message-receiver"><a href="#Create-a-Redis-message-receiver" class="headerlink" title="Create a Redis message receiver"></a>Create a Redis message receiver</h2><p>在任何基于消息的应用程序中，有消息发布者和消息接收者。 要创建消息接收器，请使用响应消息的方法实现一个接收器：<br><code>src/main/java/hello/Receiver.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Receiver.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Receiver</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.latch = latch;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"Received &lt;"</span> + message + <span class="string">"&gt;"</span>);</div><div class="line">        latch.countDown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Receiver</code>是一个简单的POJO，它定义了一个接收消息的方法。 正如你在注册<code>Receiver</code>作为消息侦听器时所看到的，你可以将消息处理方法命名为任何你想要的。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>为了演示的目的，它由具有倒计时锁存器(CountDownLatch,这个不清楚的可以谷歌一下，并发编程经常用的东西)的构造函数自动装配。 这样，它可以在它接收到消息时发出信号.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Register-the-listener-and-send-a-message"><a href="#Register-the-listener-and-send-a-message" class="headerlink" title="Register the listener and send a message"></a>Register the listener and send a message</h2><p>Spring Data Redis提供了使用Redis发送和接收消息所需的所有组件。 具体来说，你需要配置：</p>
<ul>
<li>连接工厂(connection factory)</li>
<li>消息侦听器容器( message listener container)</li>
<li>Redis模板(Redis template)</li>
</ul>
<p>你将使用Redis模板发送消息，使用消息侦听器容器注册“Receiver”，以便它将接收消息。 连接工厂驱动模板和消息侦听器容器，使它们能够连接到Redis服务器。</p>
<p>这个例子使用Spring Boot的默认<code>RedisConnectionFactory</code>，一个<code>JedisConnectionFactory</code>的实例，它基于<a href="https://github.com/xetorthio/jedis" target="_blank" rel="external">Jedis</a> Redis库。 连接工厂被注入到消息侦听器容器和Redis模板中。</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.PatternTopic;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Application.class);</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory,</span></span></div><div class="line">			MessageListenerAdapter listenerAdapter) &#123;</div><div class="line"></div><div class="line">		RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</div><div class="line">		container.setConnectionFactory(connectionFactory);</div><div class="line">		container.addMessageListener(listenerAdapter, <span class="keyword">new</span> PatternTopic(<span class="string">"chat"</span>));</div><div class="line"></div><div class="line">		<span class="keyword">return</span> container;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiveMessage"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">Receiver <span class="title">receiver</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Receiver(latch);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">CountDownLatch <span class="title">latch</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function">StringRedisTemplate <span class="title">template</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> StringRedisTemplate(connectionFactory);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">		ApplicationContext ctx = SpringApplication.run(Application.class, args);</div><div class="line"></div><div class="line">		StringRedisTemplate template = ctx.getBean(StringRedisTemplate.class);</div><div class="line">		CountDownLatch latch = ctx.getBean(CountDownLatch.class);</div><div class="line"></div><div class="line">		LOGGER.info(<span class="string">"Sending message..."</span>);</div><div class="line">		template.convertAndSend(<span class="string">"chat"</span>, <span class="string">"Hello from Redis!"</span>);</div><div class="line"></div><div class="line">		latch.await();</div><div class="line"></div><div class="line">		System.exit(<span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>listenerAdapter</code>方法中定义的bean作为参数，并在<code>container</code>中定义的消息侦听器容器中注册为消息侦听器，并将在“chat”主题上侦听消息。因为<code>Receiver</code>类是一个POJO，它需要被包装在一个消息监听器适配器中，该适配器实现<code>addMessageListener()</code>所需的<code>MessageListener</code>接口。消息侦听器适配器还配置为在消息到达时调用<code>Receiver&#39;上的</code>receiveMessage()`方法。</p>
<p>连接工厂和消息监听器容器bean都是你用来监听消息的。要发送消息，您还需要一个Redis模板。这里，它是一个配置为<code>StringRedisTemplate</code>的bean，是RedisTemplate的一个实现，它专注于Redis的常见用法，其中键和值都是String。</p>
<p><code>main()</code>方法通过创建一个Spring应用程序上下文来处理所有事情。应用程序上下文然后启动消息侦听器容器，消息侦听器容器bean开始侦听消息。 <code>main()</code>方法然后从应用程序上下文中检索<code>StringRedisTemplate</code> bean(其实就是IOC里的DL)，并使用它在 “chat”主题下发送“Hello from Redis！”消息。最后，它关闭Spring应用程序上下文，应用程序结束。</p>
<h2 id="Build-an-executable-JAR"><a href="#Build-an-executable-JAR" class="headerlink" title="Build an executable JAR"></a>Build an executable JAR</h2><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，易于跨不同环境将服务作为应用程序进行发布，维护版本和部署等等。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-messaging-redis-0.1.0.jar</div></pre></td></tr></table></figure>
<p>如果您使用Maven，可以使用<code>./mvnw spring-boot:run</code>运行应用程序。 或者你可以用<code>./mvnw clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-messaging-redis-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">build a classic WAR file</a></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>您应该看到类似下面的输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.4.3.RELEASE)</div><div class="line"></div><div class="line">2014-04-18 08:03:34.032  INFO 47002 --- [           main] hello.Application                        : Starting Application on retina with PID 47002 (/Users/gturnquist/src/spring-guides/gs-messaging-redis/complete/target/classes started by gturnquist)</div><div class="line">2014-04-18 08:03:34.062  INFO 47002 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@7a53c84a: startup date [Fri Apr 18 08:03:34 CDT 2014]; root of context hierarchy</div><div class="line">2014-04-18 08:03:34.326  INFO 47002 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 2147483647</div><div class="line">2014-04-18 08:03:34.357  INFO 47002 --- [           main] hello.Application                        : Started Application in 0.605 seconds (JVM running for 0.899)</div><div class="line">2014-04-18 08:03:34.357  INFO 47002 --- [           main] hello.Application                        : Sending message...</div><div class="line">2014-04-18 08:03:34.370  INFO 47002 --- [    container-2] hello.Receiver                           : Received &lt;Hello from Redis!&gt;</div><div class="line">2014-04-18 08:03:34.379  INFO 47002 --- [       Thread-1] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@7a53c84a: startup date [Fri Apr 18 08:03:34 CDT 2014]; root of context hierarchy</div><div class="line">2014-04-18 08:03:34.380  INFO 47002 --- [       Thread-1] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 2147483647</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜！ 你刚刚使用Spring和Redis开发了一个简单的发布和订阅应用程序。</p>
<p>翻译自：<a href="https://spring.io/guides/gs/messaging-redis/" target="_blank" rel="external">https://spring.io/guides/gs/messaging-redis/</a></p>
<p>[ 转载请保留原文出处、译者和译文链接。]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Redis进行消息传递&quot;&gt;&lt;a href=&quot;#使用Redis进行消息传递&quot; class=&quot;headerlink&quot; title=&quot;使用Redis进行消息传递&quot;&gt;&lt;/a&gt;使用Redis进行消息传递&lt;/h1&gt;&lt;p&gt;本指南将指导您完成使用Spring Data Redis发布和订阅(通过Redis发送)的消息的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>计划任务</title>
    <link href="https://muyinchen.github.io/2017/01/01/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    <id>https://muyinchen.github.io/2017/01/01/计划任务/</id>
    <published>2017-01-01T13:12:13.355Z</published>
    <updated>2017-01-01T13:30:19.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><p>本指南将指导您完成使用Spring计划任务(即大家常说的定时任务)的步骤。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>你将构建一个应用程序，使用Spring的’@ Scheduled’注释每五秒打印一次当前时间。</p>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那        里开始工作 。</li>
</ul>
<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2><p>与大多数Spring <a href="https://spring.io/guides" target="_blank" rel="external">入门指南</a>一样，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。 无论如何，你最终得到工作代码。<br> <strong>要从头开始</strong>, 请转到<a href="https://spring.io/guides/gs/consuming-rest/#scratch" target="_blank" rel="external">使用Gradle构建</a>.</p>
<p> <strong>要跳过基本操作</strong>,请执行以下操作：</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-consuming-rest/archive/master.zip" target="_blank" rel="external">Download</a> 并解压缩本指南的源代码仓库，或使用  <a href="https://spring.io/understanding/Git" target="_blank" rel="external">Git</a>: <code>git clone https://github.com/spring-guides/gs-scheduling-tasks.git</code></li>
<li>cd 到 <code>gs-scheduling-tasks/initial</code></li>
<li>跳转到<a href="https://spring.io/guides/gs/scheduling-tasks/#initial" target="_blank" rel="external">Create a scheduled task</a>.</li>
</ul>
<p><strong>当你做完这一切</strong>,  你可以根据 <code>gs-scheduling-tasks/complete</code>中的代码检查结果.</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><p>见 <a href="https://muyinchen.github.io/2016/12/30/%E4%BD%BF%E7%94%A8RESTful%20Web%E6%9C%8D%E5%8A%A1/">使用RESTful Web服务</a></p>
<h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><p>见 <a href="https://muyinchen.github.io/2016/12/30/%E4%BD%BF%E7%94%A8RESTful%20Web%E6%9C%8D%E5%8A%A1/">使用RESTful Web服务</a></p>
<h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><ul>
<li>阅读如何通过本指南直接导入<a href="https://spring.io/guides/gs/sts/" target="_blank" rel="external">Spring Tool Suite</a>。</li>
<li>阅读如何在<a href="https://spring.io/guides/gs/intellij-idea" target="_blank" rel="external">IntelliJ IDEA</a>上使用本指南。</li>
<li>​<h2 id="创建计划任务"><a href="#创建计划任务" class="headerlink" title="创建计划任务"></a>创建计划任务</h2></li>
</ul>
<p>完成项目设置后，您可以创建一个计划任务。</p>
<p><code>src/main/java/hello/ScheduledTasks.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(ScheduledTasks.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        log.info(<span class="string">"The time is now &#123;&#125;"</span>, dateFormat.format(<span class="keyword">new</span> Date()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Scheduled</code>注解定义了一个特定方法在何时运行。 注意：此示例使用<code>fixedRate</code>，它指定从每次调用的开始时间开始测量的方法调用之间的间隔。 有<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/scheduling.html#scheduling-annotation-support-scheduled" target="_blank" rel="external">其他选项</a>，如<code>fixedDelay</code>，其中 指定从任务完成起测量的调用之间的间隔。 您还可以<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/support/CronSequenceGenerator.html" target="_blank" rel="external">使用<code>@Scheduled(cron=&quot;. . .&quot;)</code>表达式来进行更复杂的任务调度</a>.</p>
<h2 id="启用计划任务"><a href="#启用计划任务" class="headerlink" title="启用计划任务"></a>启用计划任务</h2><p>尽管计划任务可以嵌入在Web应用程序和WAR文件中，但下面演示的更简单的方法创建了一个独立的应用程序。 你把一切都包装在一个可执行的JAR文件中，由一个大家初学Java时的Java<code>main()</code>方法驱动。<br><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>@SpringBootApplication</code>是一个很方便的注解，查看其源码可以发现添加了以下所有内容：</p>
<ul>
<li><code>@Configuration</code>将类标记为应用程序上下文的bean定义的源。</li>
<li><code>@EnableAutoConfiguration</code>告诉Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。</li>
<li>通常你会为Spring MVC应用程序添加<code>@EnableWebMvc</code>，但是Spring Boot在类路径上看到<strong> spring-webmvc </strong>时会自动添加它。这将应用程序标记为Web应用程序，并激活关键行为，如设置一个“DispatcherServlet”。</li>
<li><code>@ComponentScan</code>告诉Spring在<code>hello</code>包中寻找其他组件，配置和服务，允许它找到控制器。</li>
</ul>
<p><code>main()</code>方法使用Spring Boot的<code>SpringApplication.run()</code>方法来启动应用程序。你注意到没有一行XML？没有<strong> web.xml </strong>文件。这个Web应用程序是100％纯Java，你不必处理配置任何管道或基础设施。</p>
<p><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#scheduling-enable-annotation-support" target="_blank" rel="external"><code>@EnableScheduling</code></a> 确保创建了后台任务执行器。没有它，鬼知道什么时候运行定时计划任务，更不用说执行了。</p>
<h3 id="构建可执行JAR"><a href="#构建可执行JAR" class="headerlink" title="构建可执行JAR"></a>构建可执行JAR</h3><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，易于跨不同环境将服务作为应用程序进行发布，维护版本和部署等等。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-scheduling-tasks-0.1.0.jar</div></pre></td></tr></table></figure>
<p>如果您使用Maven，可以使用 <code>./mvnw spring-boot:run</code>.运行应用程序。 或者你可以用<code>./mvnw clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-scheduling-tasks-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">build a classic WAR file</a></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>将显示日志输出，你可以从日志中看到它在后台线程上运行。 你应该会看到你的预定任务每5秒钟触发一次：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[...]</div><div class="line">2016-08-25 13:10:00.143  INFO 31565 --- [pool-1-thread-1] hello.ScheduledTasks : The time is now 13:10:00</div><div class="line">2016-08-25 13:10:05.143  INFO 31565 --- [pool-1-thread-1] hello.ScheduledTasks : The time is now 13:10:05</div><div class="line">2016-08-25 13:10:10.143  INFO 31565 --- [pool-1-thread-1] hello.ScheduledTasks : The time is now 13:10:10</div><div class="line">2016-08-25 13:10:15.143  INFO 31565 --- [pool-1-thread-1] hello.ScheduledTasks : The time is now 13:10:15</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜！ 您已使用计划任务创建应用程序。此技术适用于任何类型的应用程序。<br>翻译自：<a href="https://spring.io/guides/gs/scheduling-tasks/" target="_blank" rel="external">https://spring.io/guides/gs/scheduling-tasks/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计划任务&quot;&gt;&lt;a href=&quot;#计划任务&quot; class=&quot;headerlink&quot; title=&quot;计划任务&quot;&gt;&lt;/a&gt;计划任务&lt;/h1&gt;&lt;p&gt;本指南将指导您完成使用Spring计划任务(即大家常说的定时任务)的步骤。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>使用RESTful Web服务</title>
    <link href="https://muyinchen.github.io/2016/12/30/%E4%BD%BF%E7%94%A8RESTful%20Web%E6%9C%8D%E5%8A%A1/"/>
    <id>https://muyinchen.github.io/2016/12/30/使用RESTful Web服务/</id>
    <published>2016-12-30T09:50:47.485Z</published>
    <updated>2016-12-30T09:52:59.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用RESTful-Web服务"><a href="#使用RESTful-Web服务" class="headerlink" title="使用RESTful Web服务"></a>使用RESTful Web服务</h1><p>本指南将指导您完成创建使用REST式Web服务的应用程序的过程。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>你将构建一个使用Spring的<code>RestTemplate</code>来检索随机Spring Boot引用的应用程序 <a href="https://gturnquist-quoters.cfapps.io/api/random" target="_blank" rel="external">http://gturnquist-quoters.cfapps.io/api/random</a>.</p>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那里开始工作 。<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2></li>
</ul>
<p>与大多数Spring <a href="https://spring.io/guides" target="_blank" rel="external">入门指南</a>一样，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。 无论如何，你最终得到工作代码。<br> <strong>要从头开始</strong>, 请转到<a href="https://spring.io/guides/gs/consuming-rest/#scratch" target="_blank" rel="external">使用Gradle构建</a>.</p>
<p> <strong>要跳过基本操作</strong>,请执行以下操作：</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-consuming-rest/archive/master.zip" target="_blank" rel="external">Download</a> 并解压缩本指南的源代码仓库，或使用 <a href="https://spring.io/understanding/Git" target="_blank" rel="external">Git</a>: <code>git clone https://github.com/spring-guides/gs-consuming-rest.git</code></li>
<li>cd 到 <code>gs-consuming-rest/initial</code></li>
<li>跳转到 <a href="https://spring.io/guides/gs/consuming-rest/#initial" target="_blank" rel="external">Fetch a REST resource</a>.</li>
</ul>
<p><strong>完成</strong>, 你可以根据 <code>gs-consuming-rest/complete</code>中的代码检查结果.</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序时，但是需要使用<a href="http://gradle.org" target="_blank" rel="external">Gradle</a>和<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a> 来写你的代码。 如果你不熟悉任何一个，请参考<a href="https://spring.io/guides/gs/gradle" target="_blank" rel="external">使用Gradle构建Java项目</a>或<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>。</p>
<h3 id="Create-the-directory-structure"><a href="#Create-the-directory-structure" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<h3 id="Create-a-Gradle-build-file"><a href="#Create-a-Gradle-build-file" class="headerlink" title="Create a Gradle build file"></a>Create a Gradle build file</h3><p>下面是 <a href="https://github.com/spring-guides/gs-consuming-rest/blob/master/initial/build.gradle" target="_blank" rel="external">initial Gradle build file</a>.</p>
<p><code>build.gradle</code></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'java'</span></div><div class="line">apply plugin: <span class="string">'eclipse'</span></div><div class="line">apply plugin: <span class="string">'idea'</span></div><div class="line">apply plugin: <span class="string">'org.springframework.boot'</span></div><div class="line"></div><div class="line">jar &#123;</div><div class="line">    baseName = <span class="string">'gs-consuming-rest'</span></div><div class="line">    version =  <span class="string">'0.1.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">sourceCompatibility = <span class="number">1.8</span></div><div class="line">targetCompatibility = <span class="number">1.8</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter"</span>)</div><div class="line">    compile(<span class="string">"org.springframework:spring-web"</span>)</div><div class="line">    compile(<span class="string">"com.fasterxml.jackson.core:jackson-databind"</span>)</div><div class="line">    testCompile(<span class="string">"junit:junit"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-gradle-plugin" target="_blank" rel="external">Spring Boot gradle插件</a>提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和传递服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies]</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><p>首先你设置一个基本的构建脚本。 你可以使用任何你喜欢的一个来构建项目，当使用Spring构建应用程序，但是需要使用<a href="https://maven.apache.org" target="_blank" rel="external">Maven</a>来构建你的代码。 如果你不熟悉Maven，请参考<a href="https://spring.io/guides/gs/maven" target="_blank" rel="external">使用Maven构建Java项目</a>.</p>
<h3 id="Create-the-directory-structure-1"><a href="#Create-the-directory-structure-1" class="headerlink" title="Create the directory structure"></a>Create the directory structure</h3><p>在您选择的项目目录中，创建以下子目录结构; 例如，在<em> nix</em>系统上使用`mkdir -p src / main / java / hello’：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    └── main</div><div class="line">        └── java</div><div class="line">            └── hello</div></pre></td></tr></table></figure>
<p><code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-consuming-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-tools/spring-boot-maven-plugin" target="_blank" rel="external">Spring Boot Maven插件</a> 提供了许多方便的功能：</p>
<ul>
<li>它收集类路径上的所有jar，并构建一个单独的，可运行的“über-jar”，这使得执行和运输服务更加方便。</li>
<li>它搜索<code>public static void main()</code>方法来标记为可运行类。</li>
<li>它提供了一个内置的依赖解析器，设置版本号匹配<a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-dependencies/pom.xml" target="_blank" rel="external">Spring Boot dependencies</a>. 你可以覆盖任何你想要的版本，但它会默认为Boot的选择的版本集。</li>
</ul>
<h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><ul>
<li>阅读如何通过本指南直接导入<a href="https://spring.io/guides/gs/sts/" target="_blank" rel="external">Spring Tool Suite</a>。</li>
<li>阅读如何在<a href="https://spring.io/guides/gs/intellij-idea" target="_blank" rel="external">IntelliJ IDEA</a>上使用本指南。</li>
</ul>
<h2 id="获取REST资源"><a href="#获取REST资源" class="headerlink" title="获取REST资源"></a>获取REST资源</h2><p>完成项目设置后，您可以创建一个使用RESTful服务的简单应用程序。</p>
<p>一个RESTful服务已经在<a href="https://gturnquist-quoters.cfapps.io/api/random" target="_blank" rel="external">http://gturnquist-quoters.cfapps.io/api/random</a> 上建立了起来。 它随机获取关于Spring Boot的引用，并将它们作为JSON字符串返回。</p>
<p>如果您通过Web浏览器或curl请求该网址，您会收到一个JSON字符串，如下所示：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   type: "success",</div><div class="line">   value: &#123;</div><div class="line">      id: 10,</div><div class="line">      quote: "Really loving Spring Boot, makes stand alone Spring apps easy."</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>足够简单吧，不过通过浏览器或通过curl去获取，终究不是长久之事。</p>
<p>一种更有用的方式来测试REST Web服务是以编程方式。 为了帮助你完成这个任务，Spring提供了一个方便的模板类<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="external"><code>RestTemplate</code></a>。 <code>RestTemplate</code>使得与大多数RESTful服务进行交互是一种享受。 它甚至可以将该数据绑定到自定义域类型。</p>
<p>首先，创建一个domain类以包含所需的数据。<br><code>src/main/java/hello/Quote.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</div><div class="line"></div><div class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quote</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String type;</div><div class="line">    <span class="keyword">private</span> Value value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Quote</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Value value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Quote&#123;"</span> +</div><div class="line">                <span class="string">"type='"</span> + type + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", value="</span> + value +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如你所看到的，这是一个简单的Java类，有几个属性和相应的getter方法。 当使用来自Jackson JSON处理库的<code>@ JsonIgnoreProperties</code>进行注释，代表在此类中未绑定的任何属性都应该被忽略。</p>
<p>需要一个额外的类来嵌入内部引用本身。</p>
<p><code>src/main/java/hello/Value.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</div><div class="line"></div><div class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String quote;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Value</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQuote</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.quote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuote</span><span class="params">(String quote)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.quote = quote;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Value&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", quote='"</span> + quote + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过使用相同的注解，但可以很轻松地映射到其他数据字段。</p>
<h2 id="使应用程序可以执行"><a href="#使应用程序可以执行" class="headerlink" title="使应用程序可以执行"></a>使应用程序可以执行</h2><p>虽然可以将此服务打包为用于部署到外部应用程序服务器的传统<a href="https://spring.io/understanding/WAR" target="_blank" rel="external">WAR</a> 文件，但下面演示的创建一个独立应用程序的方法更简单。 你把一切都包装在一个可执行的JAR文件中，由一个大家初学Java时的Java<code>main()</code>方法驱动。 整个过程，你使用Spring支持嵌入的<a href="https://spring.io/understanding/Tomcat" target="_blank" rel="external">Tomcat</a>servlet容器作为HTTP运行时的容器，而不是部署到外部实例中去。</p>
<p>现在你可以写使用<code>RestTemplate</code>的<code>Application</code>类来从我们的Spring Boot引用服务并且获取数据。<br><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(Application.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</div><div class="line">        Quote quote = restTemplate.getForObject(<span class="string">"http://gturnquist-quoters.cfapps.io/api/random"</span>, Quote.class);</div><div class="line">        log.info(quote.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为Jackson JSON处理库在类路径中，<code>RestTemplate</code>将使用它（通过<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/HttpMessageConverter.html" target="_blank" rel="external">message converter</a>）将传入的JSON数据转换为一个“Quote”对象。 从那里，<code>Quote</code>对象的内容将被记录到控制台。</p>
<p>这里你只使用<code>RestTemplate</code>来做一个HTTP<code>GET</code>请求。 但是RestTemplate也支持其他HTTP动词，例如<code>POST</code>，<code>PUT</code>和<code>DELETE</code>。</p>
<h2 id="使用Spring-Boot管理应用程序生命周期"><a href="#使用Spring-Boot管理应用程序生命周期" class="headerlink" title="使用Spring Boot管理应用程序生命周期"></a>使用Spring Boot管理应用程序生命周期</h2><p>到目前为止，我们没有在我们的应用程序中使用Spring Boot，Spring Bootd 一些优点，使用起来并不难。 其中的一个优点是我们可能想让Spring Boot管理<code>RestTemplate</code>中的消息转换器，以便定制很容易声明性地添加。 为此，就像在任何Spring Boot应用程序中一样，我们在主类上使用<code>@ SpringBootApplication</code>，并转换main方法来启动它。 最后，我们将<code>RestTemplate</code>移动到<code>CommandLineRunner</code>回调，所以它在启动时由Spring Boot执行：</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(Application.class);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">		SpringApplication.run(Application.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> builder.build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">run</span><span class="params">(RestTemplate restTemplate)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> args -&gt; &#123;</div><div class="line">			Quote quote = restTemplate.getForObject(</div><div class="line">					<span class="string">"http://gturnquist-quoters.cfapps.io/api/random"</span>, Quote.class);</div><div class="line">			log.info(quote.toString());</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>RestTemplateBuilder</code>是由Spring注入的，如果你使用它来创建一个<code>RestTemplate</code>，那么你将受益于在Spring Boot中使用消息转换器和请求工厂发生的所有自动配置。 我们还将<code>RestTemplate</code>注解为<code>@ Bean</code>，以便更容易测试（它可以更容易地被测试）。</p>
<h3 id="构建可执行JAR"><a href="#构建可执行JAR" class="headerlink" title="构建可执行JAR"></a>构建可执行JAR</h3><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，易于跨不同环境将服务作为应用程序进行发布，维护版本和部署等等。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-consuming-rest-0.1.0.jar</div></pre></td></tr></table></figure>
<p>如果您使用Maven，可以使用<code>./maven spring-boot：run</code>运行应用程序。 或者你可以用<code>./mvn clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-consuming-rest-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">build a classic WAR file</a></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>您应该看到类似下面的输出，带有随机引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2015-09-23 14:22:26.415  INFO 23613 --- [main] hello.Application  : Quote&#123;type=&apos;success&apos;, value=Value&#123;id=12, quote=&apos;@springboot with @springframework is pure productivity! Who said in #java one has to write double the code than in other langs? #newFavLib&apos;&#125;&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>如果您看到错误<code>Could not extract response: no suitable HttpMessageConverter found for response type [class hello.Quote]</code>“无法提取响应：没有找到适合响应类型[类hello.Quote]的HttpMessageConverter”，可能是在一个环境中无法连接到后端服务（如果可以到达它发送JSON）。 也许你是在使用其他网络代理？ 尝试将标准系统属性<code>http.proxyHost</code>和<code>http.proxyPort</code>设置为适合您的环境的值。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>恭喜！ 你刚刚使用Spring开发了一个简单的REST客户端。</p>
<p>想要写一个新的指南或贡献现有的？ 查看我们的<a href="https://github.com/spring-guides/getting-started-guides/wiki" target="_blank" rel="external">贡献指南</a>.</p>
<p>翻译自：<a href="https://spring.io/guides/gs/consuming-rest/" target="_blank" rel="external">https://spring.io/guides/gs/consuming-rest/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用RESTful-Web服务&quot;&gt;&lt;a href=&quot;#使用RESTful-Web服务&quot; class=&quot;headerlink&quot; title=&quot;使用RESTful Web服务&quot;&gt;&lt;/a&gt;使用RESTful Web服务&lt;/h1&gt;&lt;p&gt;本指南将指导您完成创建使用REST式Web服务的应用程序的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>Messaging with RabbitMQ</title>
    <link href="https://muyinchen.github.io/2016/12/27/Messaging%20with%20RabbitMQ/"/>
    <id>https://muyinchen.github.io/2016/12/27/Messaging with RabbitMQ/</id>
    <published>2016-12-27T03:06:33.560Z</published>
    <updated>2016-12-27T03:06:00.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Messaging-with-RabbitMQ"><a href="#Messaging-with-RabbitMQ" class="headerlink" title="Messaging with RabbitMQ"></a>Messaging with RabbitMQ</h1><p>本文翻译自：<a href="https://spring.io/guides/gs/messaging-rabbitmq/" target="_blank" rel="external">https://spring.io/guides/gs/messaging-rabbitmq/</a><br>打算翻译一批Spring的各种指引文档，此为第一篇</p>
<p>本指南将引导您完成建立一个发布和订阅消息的RabbitMQ AMQP服务器的过程。<br><a id="more"></a></p>
<h2 id="What-you’ll-build"><a href="#What-you’ll-build" class="headerlink" title="What you’ll build"></a>What you’ll build</h2><p>您将使用Spring AMQP的<code>RabbitTemplate</code>构建一个发布消息的应用程序，并使用<code>MessageListenerAdapter</code>订阅<a href="https://spring.io/understanding/POJO" target="_blank" rel="external">POJO</a>上的消息。</p>
<h2 id="What-you’ll-need"><a href="#What-you’ll-need" class="headerlink" title="What you’ll need"></a>What you’ll need</h2><ul>
<li>约15分钟</li>
<li>最喜欢的文本编辑器或IDE</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">JDK 1.8</a>或更高版本</li>
<li><a href="http://www.gradle.org/downloads" target="_blank" rel="external">Gradle 2.3+</a>或<a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">Maven 3.0+</a></li>
<li>您也可以从本指南导入代码，以及直接在<a href="https://spring.io/guides/gs/sts" target="_blank" rel="external">Spring Tool Suite(STS)</a>中查看网页，并从那里开始工作 。</li>
<li>RabbitMQ服务器(安装说明如下)<h2 id="How-to-complete-this-guide"><a href="#How-to-complete-this-guide" class="headerlink" title="How to complete this guide"></a>How to complete this guide</h2></li>
</ul>
<p>与大多数Spring <a href="https://spring.io/guides" target="_blank" rel="external">入门指南</a>一样，您可以从头开始并完成每个步骤，也可以绕过已经熟悉的基本设置步骤。 无论如何，你最终得到工作代码。</p>
<p>要从头开始**，请转到<a href="https://spring.io/guides/gs/messaging-rabbitmq/#scratch" target="_blank" rel="external">使用Gradle构建</a>。</p>
<p>要跳过基本操作**，请执行以下操作：</p>
<ul>
<li><a href="https://github.com/spring-guides/gs-messaging-rabbitmq/archive/master.zip" target="_blank" rel="external">下载</a>并解压缩本指南的源代码仓库，或使用<a href="https：// spring.io/understanding/Git">Git</a>：<code>git clone https：// github.com / spring-guides / gs-messaging-rabbitmq.git</code></li>
<li>cd到<code>gs-messaging-rabbitmq / initial</code></li>
<li>跳转到<a href="https://spring.io/guides/gs/messaging-rabbitmq/#initial" target="_blank" rel="external">创建RabbitMQ消息接收器</a>。</li>
</ul>
<p><strong>完成</strong>后，您可以根据<code>gs-messaging-rabbitmq / complete</code>中的代码检查结果。</p>
<h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><h2 id="Build-with-your-IDE"><a href="#Build-with-your-IDE" class="headerlink" title="Build with your IDE"></a>Build with your IDE</h2><h2 id="Set-up-RabbitMQ-broker"><a href="#Set-up-RabbitMQ-broker" class="headerlink" title="Set up RabbitMQ broker"></a>Set up RabbitMQ broker</h2><p>在构建消息传递应用程序之前，您需要设置将处理接收和发送消息的服务器。</p>
<p>RabbitMQ是一个AMQP服务器。 服务器可以免费访问[<a href="http://www.rabbitmq.com/download.html&quot;(http://www.rabbitmq.com/download.html）。" target="_blank" rel="external">http://www.rabbitmq.com/download.html&quot;(http://www.rabbitmq.com/download.html）。</a> 你可以手动下载，或者如果你使用Mac与homebrew：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install rabbitmq</div></pre></td></tr></table></figure>
<p>解压缩服务器并使用默认设置启动它。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmq-server</div></pre></td></tr></table></figure>
<p>你应该会看到这样的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">            RabbitMQ 3.1.3. Copyright (C) 2007-2013 VMware, Inc.</div><div class="line"><span class="comment">##  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></div><div class="line"><span class="comment">##  ##</span></div><div class="line"><span class="comment">##########  Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log</span></div><div class="line"><span class="comment">######  ##        /usr/local/var/log/rabbitmq/rabbit@localhost-sasl.log</span></div><div class="line"><span class="comment">##########</span></div><div class="line">            Starting broker... completed with 6 plugins.</div></pre></td></tr></table></figure>
<p>如果Docker在本地运行，您还可以使用[Docker Compose]（<a href="https://docs.docker.com/compose/）快速启动RabbitMQ服务器。" target="_blank" rel="external">https://docs.docker.com/compose/）快速启动RabbitMQ服务器。</a> 在Github的“完整”项目的根目录中有一个<code>docker-compose.yml</code>。 很简单：</p>
<p><code>docker-compose.yml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rabbitmq:</div><div class="line">  image: rabbitmq:management</div><div class="line">  ports:</div><div class="line">    - &quot;5672:5672&quot;</div><div class="line">    - &quot;15672:15672&quot;</div></pre></td></tr></table></figure>
<p>有了这个文件在当前目录中，你可以运行<code>docker-compose up</code>来使RabbitMQ在容器中运行</p>
<h2 id="Create-a-RabbitMQ-message-receiver"><a href="#Create-a-RabbitMQ-message-receiver" class="headerlink" title="Create a RabbitMQ message receiver"></a>Create a RabbitMQ message receiver</h2><p>对于任何基于消息的应用程序，您需要创建一个接收器来响应已发布的消息。</p>
<p><code>src/main/java/hello/Receiver.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Received &lt;"</span> + message + <span class="string">"&gt;"</span>);</div><div class="line">        latch.countDown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> CountDownLatch <span class="title">getLatch</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> latch;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>`Receiver’是一个简单的POJO，它定义了一个接收消息的方法。 当您注册它以接收消息时，您可以将其命名为任何您想要的。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>为了方便起见，这个POJO也有一个<code>CountDownLatch</code>。 这允许它发信号通知接收到消息。 这是你不可能在生产应用程序中实现的东西。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Register-the-listener-and-send-a-message"><a href="#Register-the-listener-and-send-a-message" class="headerlink" title="Register the listener and send a message"></a>Register the listener and send a message</h2><p>Spring AMQP的`RabbitTemplate’提供了使用RabbitMQ发送和接收消息所需的一切。 具体来说，您需要配置：</p>
<ul>
<li>消息侦听器容器</li>
<li>声明队列，交换和它们之间的绑定</li>
<li>发送一些消息以测试侦听器的组件</li>
</ul>
<table>
<thead>
<tr>
<th>**</th>
<th>Spring Boot自动创建一个连接工厂和一个RabbitTemplate，减少了你必须编写的代码量。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>你将使用<code>RabbitTemplate</code>来发送消息，你将使用消息监听器容器注册一个<code>Receiver</code>来接收消息。 连接工厂并驱动两者，允许它们连接到RabbitMQ服务器。</p>
<p><code>src/main/java/hello/Application.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;</div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String queueName = <span class="string">"spring-boot"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(queueName, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"spring-boot-exchange"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">Binding <span class="title">binding</span><span class="params">(Queue queue, TopicExchange exchange)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(queueName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">SimpleMessageListenerContainer <span class="title">container</span><span class="params">(ConnectionFactory connectionFactory,</span></span></div><div class="line">            MessageListenerAdapter listenerAdapter) &#123;</div><div class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer();</div><div class="line">        container.setConnectionFactory(connectionFactory);</div><div class="line">        container.setQueueNames(queueName);</div><div class="line">        container.setMessageListener(listenerAdapter);</div><div class="line">        <span class="keyword">return</span> container;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function">MessageListenerAdapter <span class="title">listenerAdapter</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(receiver, <span class="string">"receiveMessage"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>@ SpringBootApplication</code>是一个方便的注解，添加了以下所有内容：</p>
<ul>
<li><code>@ Configuration</code>将类标记为应用程序上下文的bean定义的来源。</li>
<li><code>@ EnableAutoConfiguration</code>告诉Spring Boot根据类路径设置，其他bean和各种属性设置开始添加bean。</li>
<li>通常你会为Spring MVC应用程序添加<code>@ EnableWebMvc</code>，但是Spring Boot在类路径上看到<strong> spring-webmvc </strong>时会自动添加它。这将应用程序标记为Web应用程序，并激活关键行为，如设置一个“DispatcherServlet”。</li>
<li><code>@ ComponentScan</code>告诉Spring在<code>hello</code>包中寻找其他组件，配置和服务，允许它找到控制器。</li>
</ul>
<p><code>main（）</code>方法使用Spring Boot的<code>SpringApplication.run（）</code>方法来启动应用程序。你有注意到一行XML？没有<strong> web.xml </strong>文件。这个Web应用程序是100％纯Java，你不必处理配置任何管道或基础设施。</p>
<p>在<code>listenerAdapter（）</code>方法中定义的bean被注册为在<code>container（）</code>中定义的容器中的消息侦听器。它将监听“spring-boot”队列上的消息。因为<code>Receiver</code>类是一个POJO，它需要被包装在<code>MessageListenerAdapter</code>中，你可以指定它来调用<code>receiveMessage</code>。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>JMS队列和AMQP队列具有不同的语义。 例如，JMS仅向一个使用者发送排队的消息。 虽然AMQP队列做同样的事情，AMQP生产者不直接发送消息到队列。 相反，消息发送到交换，可以转到单个队列，或扇出到多个队列(1-&gt;1,1-&gt;n)，模拟JMS主题的概念。 更多，见<a href="https://spring.io/understanding/AMQP" target="_blank" rel="external">Understanding AMQP</a>.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>消息侦听器容器和receiver beans都是您侦听消息所需要的。 要发送消息，您还需要一个Rabbit模板。</p>
<p><code>queue（）</code>方法创建一个AMQP队列。 <code>exchange（）</code>方法创建一个主题交换。 <code>binding（）</code>方法将这两个绑定在一起，定义当RabbitTemplate发布到交换时发生的行为。</p>
<table>
<thead>
<tr>
<th>**</th>
<th>Spring AMQP要求将“Queue”，“TopicExchange”和“Binding”声明为顶级Spring bean，以便正确设置。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Send-a-Test-Message"><a href="#Send-a-Test-Message" class="headerlink" title="Send a Test Message"></a>Send a Test Message</h2><p>测试消息由<code>CommandLineRunner</code>发送，它也等待接收器中的锁存器(此处原文： the latch in the receiver )并关闭应用程序上下文：</p>
<p><code>src/main/java/hello/Runner.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> hello;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Receiver receiver;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigurableApplicationContext context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Runner</span><span class="params">(Receiver receiver, RabbitTemplate rabbitTemplate,</span></span></div><div class="line">            ConfigurableApplicationContext context) &#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sending message..."</span>);</div><div class="line">        rabbitTemplate.convertAndSend(Application.queueName, <span class="string">"Hello from RabbitMQ!"</span>);</div><div class="line">        receiver.getLatch().await(<span class="number">10000</span>, TimeUnit.MILLISECONDS);</div><div class="line">        context.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The runner可以在测试中模拟出来，以便接收器可以单独测试。</p>
<h2 id="Run-the-Application"><a href="#Run-the-Application" class="headerlink" title="Run the Application"></a>Run the Application</h2><p><code>main（）</code>方法通过创建一个Spring应用程序上下文来启动这个过程。 这将启动消息侦听容器，它将开始侦听消息。 有一个<code>Runner</code> bean然后自动执行：它从应用程序上下文中检索<code>RabbitTemplate</code>，并发送一个“RabbitMQ！”。 消息在“spring-boot”队列。 最后，它关闭Spring应用程序上下文，应用程序结束。</p>
<h2 id="Build-an-executable-JAR"><a href="#Build-an-executable-JAR" class="headerlink" title="Build an executable JAR"></a>Build an executable JAR</h2><p>您可以使用Gradle或Maven从命令行运行应用程序。 或者，您可以构建单个可执行文件，其中包含所有必需的依赖关系，类和资源，并运行它。 这使得在整个开发生命周期中，跨不同环境等等，易于将服务作为应用程序进行发布，版本和部署。</p>
<p>如果您使用Gradle，可以使用<code>./gradlew bootRun</code>运行应用程序。 或者你可以使用<code>./gradlew build</code>来构建JAR文件。 然后可以运行JAR文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar build/libs/gs-messaging-rabbitmq-0.1.0.jar</div></pre></td></tr></table></figure></p>
<p>如果您使用Maven，可以使用<code>./maven spring-boot：run</code>运行应用程序。 或者你可以用<code>./mvn clean package</code>构建JAR文件。 然后可以运行JAR文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar target/gs-messaging-rabbitmq-0.1.0.jar</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>**</th>
<th>上面的过程将创建一个可运行的JAR。 您也可以选择[构建传统的WAR文件]（<a href="https://spring.io/guides/gs/convert-jar-to-war/" target="_blank" rel="external">https://spring.io/guides/gs/convert-jar-to-war/</a>)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>您应该看到以下输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sending message...</div><div class="line">Received &lt;Hello from RabbitMQ!&gt;</div></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>恭喜！ 你刚刚用Spring和RabbitMQ开发了一个简单的发布和订阅应用程序。 <a href="http://docs.spring.io/spring-amqp/reference/html/_introduction.html#quick-tour" target="_blank" rel="external">more you can do with Spring and RabbitMQ</a>比这里涵盖的内容更多，但这应该提供一个好的 开始。</p>
<p>想要写一个新的指南或贡献现有的？ 查看我们的 <a href="https://github.com/spring-guides/getting-started-guides/wiki" target="_blank" rel="external">contribution guidelines</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Messaging-with-RabbitMQ&quot;&gt;&lt;a href=&quot;#Messaging-with-RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;Messaging with RabbitMQ&quot;&gt;&lt;/a&gt;Messaging with RabbitMQ&lt;/h1&gt;&lt;p&gt;本文翻译自：&lt;a href=&quot;https://spring.io/guides/gs/messaging-rabbitmq/&quot;&gt;https://spring.io/guides/gs/messaging-rabbitmq/&lt;/a&gt;&lt;br&gt;打算翻译一批Spring的各种指引文档，此为第一篇&lt;/p&gt;
&lt;p&gt;本指南将引导您完成建立一个发布和订阅消息的RabbitMQ AMQP服务器的过程。&lt;br&gt;
    
    </summary>
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/categories/Spring%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Spring指南" scheme="https://muyinchen.github.io/tags/Spring%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>谈 `AOP` 的通俗理解</title>
    <link href="https://muyinchen.github.io/2016/12/25/%E8%B0%88%20%60AOP%60%20%E7%9A%84%E9%80%9A%E4%BF%97%E7%90%86%E8%A7%A3/"/>
    <id>https://muyinchen.github.io/2016/12/25/谈 `AOP` 的通俗理解/</id>
    <published>2016-12-25T03:43:52.732Z</published>
    <updated>2016-12-25T03:43:19.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈-AOP-的通俗理解"><a href="#谈-AOP-的通俗理解" class="headerlink" title="谈 AOP 的通俗理解"></a>谈 <code>AOP</code> 的通俗理解</h1><p>最近在翻译<a href="https://www.gitbook.com/book/muyinchen/spring-framework-5-0-0-m3/details" target="_blank" rel="external">Spring Framework 5.0.0.M3中文文档</a> ,看到<code>AOP</code>时索性把自己的理解写写。<br><a id="more"></a><br>Spring的面向方面的编程（<code>AOP</code>）,国内大都说面向切面，其实我还是觉得面向方面最恰当，何解？那就扯一扯。</p>
<p><strong>1.</strong> <code>AOP</code>相关的概念</p>
<p>1） <em><code>Aspect</code></em> ：切面，切入系统的一个切面。比如事务管理是一个切面，权限管理也是一个切面；</p>
<p>2） <em><code>Join point</code></em> ：连接点，也就是可以进行横向切入的位置；</p>
<p>3） <em><code>Advice</code></em> ：通知，切面在某个连接点执行的操作(分为: <em><code>Before advice</code></em> , <em><code>After returning advice</code></em> , <em><code>After throwing advice</code></em> , <em><code>After (finally) advice</code></em> , <em><code>Around advice</code></em> )；</p>
<p>4） <em><code>Pointcut</code></em> ：切点，符合切点表达式的连接点，也就是真正被切入的地方；</p>
<p>​      这就好比一团面，都是一团白面，根据食谱的不同，我们做什么样的面食即可，厨师关心的是做法，而客人关心的是色香味，再进一步的说，我同样的做面方法，完全可以用不一样的面粉(白面，玉米面，荞麦面等等)，由此便可抽象出面团便是所谓的切点，而面团的加工，比如加水，放鸡蛋，放油，盐等的各种加工便是面的前置方法<em><code>Before advice</code></em>，将面团炸，煎，煮等做出成品来便是其后置方法<em><code>After advice</code></em> ，期间有所谓的环绕方法<em><code>Around advice</code></em> ，而客人的品评则是<em><code>finally  advice</code></em> 中间出现问题了所造成的事件 <em><code>After throwing advice</code></em>   仅供理解，里面可能有不恰当的地方，但自己写代码的时注意即可，由此，这个做面的过程便是面向方面编程即所谓的一个切面(<em><code>Aspect</code></em> )</p>
<p>​     而<code>AOP</code>的核心思想所在便是要求程序员专注于自己的逻辑业务，而非这团面，得以更好的去处理各种问题，从本质上进行解耦。</p>
<p>​    最后，再贴上一段代码来做参考对比：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span> <span class="comment">// for auto scan</span></div><div class="line"><span class="comment">//@Order(2)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInterceptor</span> </span>&#123;	</div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"execution(public * net.aazj.service..*.getUser(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line">	<span class="meta">@Before</span>(<span class="string">"myMethod()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method start"</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@After</span>(<span class="string">"myMethod()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method after"</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@AfterReturning</span>(<span class="string">"execution(public * net.aazj.mapper..*.*(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterReturning</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method AfterReturning"</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@AfterThrowing</span>(<span class="string">"execution(public * net.aazj.mapper..*.*(..))"</span>)</div><div class="line"><span class="comment">//  @Around("execution(public * net.aazj.mapper..*.*(..))")</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterThrowing</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method AfterThrowing"</span>);</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@Around</span>(<span class="string">"execution(public * net.aazj.mapper..*.*(..))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">Around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		System.out.println(<span class="string">"method Around"</span>);</div><div class="line">		SourceLocation sl = jp.getSourceLocation();</div><div class="line">		Object ret = jp.proceed();</div><div class="line">		System.out.println(jp.getTarget());</div><div class="line">		<span class="keyword">return</span> ret;</div><div class="line">	&#125; </div><div class="line">	<span class="meta">@Before</span>(<span class="string">"execution(public * net.aazj.service..*.getUser(..)) &amp;&amp; args(userId,..)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before3</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"userId-----"</span> + userId);</div><div class="line">	&#125;  </div><div class="line">	<span class="meta">@Before</span>(<span class="string">"myMethod()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before2</span><span class="params">(JoinPoint jp)</span> </span>&#123;</div><div class="line">		Object[] args = jp.getArgs();</div><div class="line">		System.out.println(<span class="string">"userId11111: "</span> + (Integer)args[<span class="number">0</span>]);</div><div class="line">		System.out.println(jp.getTarget());</div><div class="line">		System.out.println(jp.getThis());</div><div class="line">		System.out.println(jp.getSignature());</div><div class="line">		System.out.println(<span class="string">"method start"</span>);</div><div class="line">	&#125;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈-AOP-的通俗理解&quot;&gt;&lt;a href=&quot;#谈-AOP-的通俗理解&quot; class=&quot;headerlink&quot; title=&quot;谈 AOP 的通俗理解&quot;&gt;&lt;/a&gt;谈 &lt;code&gt;AOP&lt;/code&gt; 的通俗理解&lt;/h1&gt;&lt;p&gt;最近在翻译&lt;a href=&quot;https://www.gitbook.com/book/muyinchen/spring-framework-5-0-0-m3/details&quot;&gt;Spring Framework 5.0.0.M3中文文档&lt;/a&gt; ,看到&lt;code&gt;AOP&lt;/code&gt;时索性把自己的理解写写。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://muyinchen.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
