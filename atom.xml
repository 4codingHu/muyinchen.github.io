<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muyinchen.github.io/"/>
  <updated>2016-12-06T15:28:32.341Z</updated>
  <id>https://muyinchen.github.io/</id>
  
  <author>
    <name>知秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图解 HTTP 协议</title>
    <link href="https://muyinchen.github.io/2016/12/06/%E5%9B%BE%E8%A7%A3%20HTTP%20%E5%8D%8F%E8%AE%AE/"/>
    <id>https://muyinchen.github.io/2016/12/06/图解 HTTP 协议/</id>
    <published>2016-12-06T15:08:14.667Z</published>
    <updated>2016-12-06T15:28:32.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图解-HTTP-协议"><a href="#图解-HTTP-协议" class="headerlink" title="图解 HTTP 协议"></a>图解 HTTP 协议</h1><h1 id="一、技术基石及概述"><a href="#一、技术基石及概述" class="headerlink" title="一、技术基石及概述"></a>一、技术基石及概述</h1><p>问：什么是HTTP?<br>答：HTTP是一个客户端和服务器端<strong>请求</strong>和<strong>响应</strong>的<strong>标准TCP</strong>。其实建立在TCP之上的。</p>
<a id="more"></a>
<p>当我们打开百度网页时，是这样的：</p>
<blockquote>
<p><a href="https://www.baidu.com" target="_blank" rel="external">https://www.baidu.com</a></p>
</blockquote>
<p>多了个S，其实S表示TLS、SSL。在这里不做解释，因此HTTP的技术基石如图所示：</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/b557ca7c801cfa27d2743eb9cb89dfb0.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/b557ca7c801cfa27d2743eb9cb89dfb0.png" alt="1"></a></p>
<p>那HTTP协议呢？HTTP协议（HyperText Transfer Protocol）,即超文本传输协议是用于服务器传输到客户端浏览器的传输协议。Web上，服务器和客户端利用HTTP协议进行通信会话。有OOP思想的得出结论：其会话的结构是一个简单的请求/响应序列，即浏览器发出请求和服务器做出响应。</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/331e061736edef967e804db9d796a421.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/331e061736edef967e804db9d796a421.png" alt="11"></a></p>
<h1 id="二、深入理解技术基石和工作流程"><a href="#二、深入理解技术基石和工作流程" class="headerlink" title="二、深入理解技术基石和工作流程"></a>二、深入理解技术基石和工作流程</h1><p>既然HTTP是基于传输层的TCP协议，而TCP协议是<strong>面向连接</strong>的<strong>端到端</strong>的协议。因此，使用HTTP协议传输前，首先建立TCP连接，就是因此在谈的TCP链接过程的“三次握手”。如图</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/55931284a671fe8a4122ff8419e1fb5e.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/55931284a671fe8a4122ff8419e1fb5e.png" alt="1_thumb2"></a></p>
<p>在Web上，HTTP协议使用TCP协议而不是UDP协议的原因在于一个网页必须传送很多数据，而且保证其完整性。TCP协议提供传输控制，按顺序组织数据和错误纠正的一系列功能。</p>
<p>一次HTTP操作称为一个事务，其工作过程可分为四步：</p>
<blockquote>
<p>1、客户端与服务器需要建立连接。（比如某个超级链接，HTTP就开始了。）</p>
<p>2、建立连接后，发送请求。</p>
<p>3、服务器接到请求后，响应其响应信息。</p>
<p>4、客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</p>
</blockquote>
<p>建立连接，其实建立在TCP连接基础之上。图解核心工作过程（即省去连接过程）如下：</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/580cb803800d76ec3d8ffdae2ccadfa3.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/580cb803800d76ec3d8ffdae2ccadfa3.png" alt="13"></a></p>
<h1 id="三、详解工作过程的HTTP报文"><a href="#三、详解工作过程的HTTP报文" class="headerlink" title="三、详解工作过程的HTTP报文"></a>三、详解工作过程的HTTP报文</h1><p>HTTP报文由从客户机到服务器的请求和从服务器到客户机的响应构成。</p>
<p><strong>一、请求报文</strong>格式如下：</p>
<blockquote>
<p>请求行</p>
<p>通用信息头</p>
<p>请求头</p>
<p>实体头</p>
<p><strong>（空行）</strong></p>
<p>报文主体</p>
</blockquote>
<p>如图，请求我博客一篇文章时发送的报文内容：</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/d6550b0e1a4af283049b46a819c4489b.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/d6550b0e1a4af283049b46a819c4489b.png" alt="image1"></a></p>
<p>对于其中请求报文详解:</p>
<blockquote>
<p>1、请求行</p>
<p>方法字段 + URL + Http协议版本</p>
<p>2、通用信息头</p>
<p>Cache-Control头域：指定请求和响应遵循的缓存机制。</p>
<p>keep-alive 是其连接持续有效【在下面百度的例子，会得到验证】</p>
<p>3、请求头</p>
<p>Host头域，脑补吧</p>
<p>Referer头域：允许客户端指定请求URL的资源地址。</p>
<p>User-Agent头域：请求用户信息。【可以看出一些客户端浏览器的内核信息】</p>
<p>4、报文主体</p>
<p>如图中的 “ p=278 ”一般来说，请求主体少不了请求参数。</p>
</blockquote>
<p><strong>二、应答报文</strong>格式如下：</p>
<blockquote>
<p>状态行</p>
<p>通用信息头</p>
<p>响应头</p>
<p>实体头</p>
<p><strong>（空行）</strong></p>
<p>报文主体</p>
</blockquote>
<p>如图，就是这篇博客响应的内容:</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/07ee4c8d12fdfab3389b324410837a0b.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/07ee4c8d12fdfab3389b324410837a0b.png" alt="image3_thumb"></a></p>
<p>对其中响应报文详解：</p>
<blockquote>
<p>1、状态行</p>
<p>HTTP协议版本 + 状态码 + 状态代码的文本描述</p>
<p>【比如这里，200 代表请求成功】</p>
<p>2、通用信息头</p>
<p>keep-alive 是其连接持续有效【在下面百度的例子，会得到验证】</p>
<p>Date头域：时间描述</p>
<p>3、响应头</p>
<p>Server头：处理请求的原始服务器的软件信息。</p>
<p>4、实体头</p>
<p>Content-Type头：便是接收方实体的介质类型。（这也表示了你的报文主体是什么。）</p>
<p><strong>（空行）</strong></p>
<p>5、报文主体</p>
<p>这里就是HTML响应页面了，在截图tab页中的response中可查看。</p>
</blockquote>
<p>一次简单的请求/响应就完成了。</p>
<h1 id="三、HTTP协议知识补充"><a href="#三、HTTP协议知识补充" class="headerlink" title="三、HTTP协议知识补充"></a>三、HTTP协议知识补充</h1><p>请求报文相关：</p>
<p>请求行-请求方法</p>
<blockquote>
<p>GET 请求获取Request-URI所标识的资源<br>POST 在Request-URI所标识的资源后附加新的数据<br>HEAD 请求获取由Request-URI所标识的资源的响应消息报头<br>PUT 请求服务器存储一个资源，并用Request-URI作为其标识<br>DELETE 请求服务器删除Request-URI所标识的资源<br>TRACE 请求服务器回送收到的请求信息，主要用于测试或诊断<br>CONNECT 保留将来使用<br>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求</p>
</blockquote>
<p>响应报文相关：</p>
<p>响应行-状态码</p>
<blockquote>
<p>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求</p>
</blockquote>
<p>常见的状态码</p>
<blockquote>
<p>200 OK</p>
<p>请求成功（其后是对GET和POST请求的应答文档。）</p>
<p>304 Not Modified</p>
<p>未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</p>
<p>404 Not Found</p>
<p>服务器无法找到被请求的页面。</p>
<p>500 Internal Server Error</p>
<p>请求未完成。服务器遇到不可预知的情况。</p>
</blockquote>
<p>比如304，在浏览器第一次打开百度时，如图所示:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161206_225741.png" alt=""></p>
<p>刷新一下：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161206_224259.png" alt=""></p>
<p>这上面的304就证明了</p>
<blockquote>
<p>1、304状态码:有些图片和js文件在本地客户端缓存，再次请求后，缓存的文件可以使用。</p>
<p>2、以上所以HTTP请求，只靠一个TCP连接，这就是所谓的<strong>持久连接</strong>。</p>
</blockquote>
<h1 id="四、关于HTTP协议的Web应用框架或者规范"><a href="#四、关于HTTP协议的Web应用框架或者规范" class="headerlink" title="四、关于HTTP协议的Web应用框架或者规范"></a>四、关于HTTP协议的Web应用框架或者规范</h1><p>JavaEE的人会知道Servlet规范。其中Web应用容器都实现了HTTP协议中的对象，即请求和响应对象。比如 javax.servlet.http.HttpServletResponse 对象中肯定有对状态码描述，如图</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/a62c9e69927cec236295cdd1a909650b.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/a62c9e69927cec236295cdd1a909650b.png" alt="image2"></a></p>
<p>在Spring中的表现形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.http;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Java 5 enumeration of HTTP status codes.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;The HTTP status code series can be retrieved via &#123;<span class="doctag">@link</span> #series()&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Arjen Poutsma</div><div class="line"> * <span class="doctag">@author</span> Sebastien Deleuze</div><div class="line"> * <span class="doctag">@see</span> HttpStatus.Series</div><div class="line"> * <span class="doctag">@see</span> &lt;a href="http://www.iana.org/assignments/http-status-codes"&gt;HTTP Status Code Registry&lt;/a&gt;</div><div class="line"> * <span class="doctag">@see</span> &lt;a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;List of HTTP status codes - Wikipedia&lt;/a&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HttpStatus &#123;</div><div class="line"></div><div class="line">	<span class="comment">// 1xx Informational</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 100 Continue&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.2.1"&gt;HTTP/1.1: Semantics and Content, section 6.2.1&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	CONTINUE(<span class="number">100</span>, <span class="string">"Continue"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 101 Switching Protocols&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.2.2"&gt;HTTP/1.1: Semantics and Content, section 6.2.2&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	SWITCHING_PROTOCOLS(<span class="number">101</span>, <span class="string">"Switching Protocols"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 102 Processing&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc2518#section-10.1"&gt;WebDAV&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	PROCESSING(<span class="number">102</span>, <span class="string">"Processing"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 103 Checkpoint&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal"&gt;A proposal for supporting</div><div class="line">	 * resumable POST/PUT HTTP requests in HTTP/1.0&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	CHECKPOINT(<span class="number">103</span>, <span class="string">"Checkpoint"</span>),</div><div class="line"></div><div class="line">	<span class="comment">// 2xx Success</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 200 OK&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.1"&gt;HTTP/1.1: Semantics and Content, section 6.3.1&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	OK(<span class="number">200</span>, <span class="string">"OK"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 201 Created&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.2"&gt;HTTP/1.1: Semantics and Content, section 6.3.2&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	CREATED(<span class="number">201</span>, <span class="string">"Created"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 202 Accepted&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.3"&gt;HTTP/1.1: Semantics and Content, section 6.3.3&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	ACCEPTED(<span class="number">202</span>, <span class="string">"Accepted"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 203 Non-Authoritative Information&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.4"&gt;HTTP/1.1: Semantics and Content, section 6.3.4&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	NON_AUTHORITATIVE_INFORMATION(<span class="number">203</span>, <span class="string">"Non-Authoritative Information"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 204 No Content&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.5"&gt;HTTP/1.1: Semantics and Content, section 6.3.5&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	NO_CONTENT(<span class="number">204</span>, <span class="string">"No Content"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 205 Reset Content&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.6"&gt;HTTP/1.1: Semantics and Content, section 6.3.6&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	RESET_CONTENT(<span class="number">205</span>, <span class="string">"Reset Content"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 206 Partial Content&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7233#section-4.1"&gt;HTTP/1.1: Range Requests, section 4.1&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	PARTIAL_CONTENT(<span class="number">206</span>, <span class="string">"Partial Content"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 207 Multi-Status&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc4918#section-13"&gt;WebDAV&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	MULTI_STATUS(<span class="number">207</span>, <span class="string">"Multi-Status"</span>),</div></pre></td></tr></table></figure>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>回顾全文，HTTP协议其实就是我们对话一样，语言就是其中的协议。所以掌握HTTP协议明白以下几点就好：</p>
<blockquote>
<p>1、用什么通过HTTP协议通信</p>
<p>2、怎么通过HTTP协议通信</p>
</blockquote>
<p>原文出处<a href="http://www.bysocket.com/?p=282，其实主要还是最后我添加的那个Spring代码，具体涉及到的应用做migo2.0里体现的很多地方，后端的话如图：" target="_blank" rel="external">http://www.bysocket.com/?p=282，其实主要还是最后我添加的那个Spring代码，具体涉及到的应用做migo2.0里体现的很多地方，后端的话如图：</a></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161206_230156.png" alt=""></p>
<p>前端代码请参考本人migo2.0一系列博客内容</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图解-HTTP-协议&quot;&gt;&lt;a href=&quot;#图解-HTTP-协议&quot; class=&quot;headerlink&quot; title=&quot;图解 HTTP 协议&quot;&gt;&lt;/a&gt;图解 HTTP 协议&lt;/h1&gt;&lt;h1 id=&quot;一、技术基石及概述&quot;&gt;&lt;a href=&quot;#一、技术基石及概述&quot; class=&quot;headerlink&quot; title=&quot;一、技术基石及概述&quot;&gt;&lt;/a&gt;一、技术基石及概述&lt;/h1&gt;&lt;p&gt;问：什么是HTTP?&lt;br&gt;答：HTTP是一个客户端和服务器端&lt;strong&gt;请求&lt;/strong&gt;和&lt;strong&gt;响应&lt;/strong&gt;的&lt;strong&gt;标准TCP&lt;/strong&gt;。其实建立在TCP之上的。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础" scheme="https://muyinchen.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二</title>
    <link href="https://muyinchen.github.io/2016/12/05/Migo%E5%95%86%E5%9F%8E2.0%20Redis%203.2%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%20%E9%99%84%E4%BA%8C/"/>
    <id>https://muyinchen.github.io/2016/12/05/Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二/</id>
    <published>2016-12-04T17:25:16.378Z</published>
    <updated>2016-12-04T17:29:15.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-Redis-3-2安装及主从复制详细配置及应用场景-附二"><a href="#Migo商城2-0-Redis-3-2安装及主从复制详细配置及应用场景-附二" class="headerlink" title="Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二"></a>Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二</h2><p>之前存的东西，拿出来改改</p>
<h2 id="一、编译安装"><a href="#一、编译安装" class="headerlink" title="一、编译安装"></a>一、编译安装</h2><p>1、下载安装包：<code>http://download.redis.io/releases/redis-3.2.3.tar.gz</code><br>目前最新的版本，你也可以打开redis官方的下载页下载合适版本<code>http://redis.io/download</code><br>2、开始安装<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> wget http://download.redis.io/releases/redis-3.2.3.tar.gz</div><div class="line">$ tar xzf redis-3.2.3.tar.gz</div><div class="line">$ <span class="built_in">cd</span> redis-3.2.3</div><div class="line">$ make</div><div class="line">$ make <span class="built_in">test</span>  <span class="comment">#可以先执行make test，查看是否缺少依赖包</span></div><div class="line">$ yum install tcl -y  <span class="comment">#执行完发现需要安装tcl组件</span></div><div class="line">$ make install</div></pre></td></tr></table></figure></p>
<p>无报错则安装完成，程序文件被安装在了<code>/usr/local/bin</code>目录下<br>3、复制配置文件<code>redis.conf</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir /etc/redis</div><div class="line">$ cp ../redis-3.2.3/redis.conf /etc/redis/6379.conf  <span class="comment">#复制安装目录下生成的redis配置文件到etc目录</span></div></pre></td></tr></table></figure>
<p>4、启动报错处理</p>
<p>我们先不做任何配置启动测试一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ /usr/<span class="built_in">local</span>/bin/redis-server /etc/redis/6379.conf</div><div class="line">                _._                                                  </div><div class="line">           _.-``__ <span class="string">''</span>-._                                             </div><div class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 3.2.3 (00000000/0) 64 bit</div><div class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </div><div class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></div><div class="line"> |`-._`-...-` __...-.``-._|'` _.-<span class="string">'|     Port: 6379</span></div><div class="line"> |    `-._   `._    /     _.-'    |     PID: 1106</div><div class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </div><div class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></div><div class="line"> |    `-._`-._        _.-'_.-<span class="string">'    |           http://redis.io        </span></div><div class="line">  `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span>                                   </div><div class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></div><div class="line"> |    `-._`-._        _.-'_.-<span class="string">'    |                                  </span></div><div class="line">  `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span>                                   </div><div class="line">      `-._    `-.__.-<span class="string">'    _.-'</span>                                       </div><div class="line">          `-._        _.-<span class="string">'                                           </span></div><div class="line">              `-.__.-'                                               </div><div class="line">8989:S 17 Aug 15:33:05.472 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></div><div class="line">8989:S 17 Aug 15:33:05.472 <span class="comment"># Server started, Redis version 3.2.3</span></div><div class="line">8989:S 17 Aug 15:33:05.472 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span></div><div class="line">8989:S 17 Aug 15:33:05.472 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></div></pre></td></tr></table></figure>
<p><code>redis</code>默认是前台运行，我们后边再说怎么配置后台运行，这时发现有三个错误，请不要忽略这些信息，接下来我们处理一下这三个错误：<br><strong>1）</strong>第一个错误大概是说<code>somaxconn</code>的值<code>128</code>设置过小，从<code>/proc/sys/net/core/somaxconn</code>这个路径也可大概知道这个值的设置是关于网络连接中某个最大值的限定设置，此值表示网络连接的队列大小，在配置文件<code>redis.conf</code>中的“<code>tcp-backlog 511</code>”就配置在高并发环境下的最大队列大小，此值受限于系统的<code>somaxconn</code>与<code>tcp_max_syn_backlog</code>这两个值，所以应该把这两个内核参数值调大，具体解决方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/sysctl.conf</div><div class="line">$ net.core.somaxconn = 20480  <span class="comment">#最大队列长度，应付突发的大并发连接请求，默认为128</span></div><div class="line">$ net.ipv4.tcp_max_syn_backlog = 20480  <span class="comment">#半连接队列长度，此值受限于内存大小，默认为1024</span></div><div class="line">$ sysctl -p  <span class="comment">#使参数生效</span></div></pre></td></tr></table></figure>
<p><strong>2）</strong>报错里已经说明了解决方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">警告：过量使用内存设置为0！在低内存环境下，后台保存可能失败。为了修正这个问题，</div><div class="line">请在/etc/sysctl.conf 添加一项 <span class="string">'vm.overcommit_memory = 1'</span> ，</div><div class="line">然后重启（或者运行命令<span class="string">'sysctl vm.overcommit_memory=1'</span> ）使其生效。</div><div class="line"></div><div class="line">vm.overcommit_memory不同的值说明：</div><div class="line"></div><div class="line">0 表示检查是否有足够的内存可用，如果是，允许分配；如果内存不够，拒绝该请求，并返回一个错误给应用程序。</div><div class="line">1 允许分配超出物理内存加上交换内存的请求</div><div class="line">2 内核总是返回<span class="literal">true</span></div><div class="line">redis的数据回写机制分为两种</div><div class="line"></div><div class="line">同步回写即SAVE命令。redis主进程直接写数据到磁盘。当数据量大时，这个命令将阻塞，响应时间长</div><div class="line">异步回写即BGSAVE命令。redis 主进程fork一个子进程，复制主进程的内存并通过子进程回写数据到磁盘。</div><div class="line">由于RDB文件写的时候fork一个子进程。相当于复制了一个内存镜像。当时系统的内存是4G，而redis占用了</div><div class="line">近3G的内存，因此肯定会报内存无法分配。如果 「vm.overcommit_memory」设置为0，在可用内存不足的情况</div><div class="line">下，就无法分配新的内存。如果 「vm.overcommit_memory」设置为1。 那么redis将使用交换内存。</div></pre></td></tr></table></figure>
<p>解决方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/sysctl</div><div class="line">$ vm.overcommit_memory = 1  <span class="comment">#末尾追加</span></div><div class="line">$ sysctl -p  <span class="comment">#参数生效</span></div><div class="line">注：使用交换内存并不是一个完美的方案。最好的办法是扩大物理内存。</div></pre></td></tr></table></figure>
<p><strong>3）</strong>关闭THP透明内存</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">`Transparent Huge Pages (THP)`告警，这是一个关于透明内存巨页的话题。简单来说内存可管理的最小</div><div class="line">单位是page，一个page通常是4kb，那1M内存就会有256个page，CPU通过内置的内存管理单元管理page表</div><div class="line">记录。Huge Pages就是表示page的大小已超过4kb了，一般是2M到1G，它的出现主要是为了管理超大内存。</div><div class="line">个人理解上TB的内存。而THP就是管理Huge Pages的一个抽象层次，根据一些资料显示THP会导致内存锁</div><div class="line">影响性能，所以一般建议关闭此功能。</div><div class="line">   “/sys/kernel/mm/transparent_hugepage/enabled”有三个值，如下：</div><div class="line">  $ cat /sys/kernel/mm/transparent_hugepage/enabled</div><div class="line"></div><div class="line">    always [madvise] never</div><div class="line">    <span class="comment">####</span></div><div class="line">    <span class="comment"># always 尽量使用透明内存，扫描内存，有512个 4k页面可以整合，就整合成一个2M的页面</span></div><div class="line">    <span class="comment"># never 关闭，不使用透明内存</span></div><div class="line">    <span class="comment"># madvise 避免改变内存占用</span></div></pre></td></tr></table></figure>
<p>关于THP的内容就介绍到这里，现在根据警告是做些修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/rc.local</div><div class="line">$ <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled  <span class="comment">#在开机脚本里追加此命令</span></div></pre></td></tr></table></figure>
<p>至此这三个错误就处理好了，再启动就没有错误产生了！</p>
<h2 id="二、配置文件说明"><a href="#二、配置文件说明" class="headerlink" title="二、配置文件说明"></a>二、配置文件说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/redis/6379.conf</div></pre></td></tr></table></figure>
<p><strong>1、后台运行</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">daemonize yes</div></pre></td></tr></table></figure>
<p><strong>2、bind监听地址</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">bind</span> 192.168.1.10</div><div class="line">默认<span class="built_in">bind</span>的填写的127.0.0.1这样配置是只允许本地访问，如果想远程访问就改为本机网卡绑定的ip地址。</div><div class="line">我这边有个问题，就是填写为网卡ip后，本地就不能登录了，<span class="built_in">bind</span>可以填写多个ip，格式为</div><div class="line"><span class="built_in">bind</span> 192.168.1.10 127.0.0.1 中间用空格分隔，但是没有效果，还是无法本地登录，这个问题待后边再测试。</div></pre></td></tr></table></figure>
<p><strong>3、配置密码</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># requirepass foobared</span></div><div class="line">去掉前边<span class="comment">#注释，修改foobared为你想配置的任意密码</span></div></pre></td></tr></table></figure>
<p><strong>4、日志文件</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logfile <span class="string">"/var/log/redis.log"</span></div></pre></td></tr></table></figure>
<p><strong>5、其他参数</strong><br>除了上诉几个设置外，还有改端口等一些参数，有需要可以按照配置文件的说明修改。</p>
<h2 id="三、开机启动脚本"><a href="#三、开机启动脚本" class="headerlink" title="三、开机启动脚本"></a>三、开机启动脚本</h2><p><code>redis</code>安装目录自带了启动脚本，但是不支持<code>restart</code>，还有在配置了密码验证之后就就不能用了，我贴出一个修改后的启动脚本，可以解决这两个问题。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/init.d/redis</div><div class="line"></div><div class="line"><span class="comment"># chkconfig: 2345 90 10</span></div><div class="line"><span class="comment"># description: service of redis for start and stop add by tomener</span></div><div class="line"></div><div class="line">PATH=/usr/<span class="built_in">local</span>/bin:/sbin:/usr/bin:/bin</div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/usr/<span class="built_in">local</span>/bin/redis-server</div><div class="line">REDIS_CLI=/usr/<span class="built_in">local</span>/bin/redis-cli</div><div class="line"></div><div class="line">PIDFILE=/var/run/redis_6379.pid   </div><div class="line">CONF=<span class="string">"/etc/redis/6379.conf"</span></div><div class="line">AUTH=<span class="string">"Passwd"</span></div><div class="line">BIND_IP=<span class="string">'127.0.0.1'</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>   </div><div class="line">        start)   </div><div class="line">                <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]   </div><div class="line">                <span class="keyword">then</span>   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed."</span>  </div><div class="line">                <span class="keyword">else</span>  </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span>  </div><div class="line">                        <span class="variable">$EXEC</span> <span class="variable">$CONF</span>   </div><div class="line">                <span class="keyword">fi</span>   </div><div class="line">                <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ]   </div><div class="line">                <span class="keyword">then</span>   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Redis is running..."</span>  </div><div class="line">                <span class="keyword">fi</span>   </div><div class="line">                ;;   </div><div class="line">        stop)   </div><div class="line">                <span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]   </div><div class="line">                <span class="keyword">then</span>   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is not running."</span>  </div><div class="line">                <span class="keyword">else</span>  </div><div class="line">                        PID=$(cat <span class="variable">$PIDFILE</span>)   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Stopping..."</span>  </div><div class="line">                       <span class="variable">$REDIS_CLI</span> -h <span class="variable">$BIND_IP</span> <span class="_">-a</span> <span class="variable">$AUTH</span> -p <span class="variable">$REDISPORT</span>  SHUTDOWN    </div><div class="line">                        sleep 2  </div><div class="line">                       <span class="keyword">while</span> [ -x <span class="variable">$PIDFILE</span> ]   </div><div class="line">                       <span class="keyword">do</span>  </div><div class="line">                                <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown..."</span>  </div><div class="line">                               sleep 1  </div><div class="line">                        <span class="keyword">done</span>   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Redis stopped"</span>  </div><div class="line">                <span class="keyword">fi</span>   </div><div class="line">                ;;   </div><div class="line">        restart|force-reload)   </div><div class="line">                <span class="variable">$&#123;0&#125;</span> stop   </div><div class="line">                <span class="variable">$&#123;0&#125;</span> start   </div><div class="line">                ;;   </div><div class="line">        *)   </div><div class="line">               <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2  </div><div class="line">                <span class="built_in">exit</span> 1  </div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
<p>修改其中的配置文件路径、你前一步配置的密码等后保存退出。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chkconfig redis on </div><div class="line">$ service redis restart</div></pre></td></tr></table></figure>
<p>设置开机启动（根据自己需要来，redis是内存数据库，性能和持久化需要权衡。在配置了主从复制后，<br>有一种方案是停掉master的持久化功能，这时master服务器上redis需要慎重配置开机启动,后边会详细说明。）</p>
<h2 id="四、Redis持久化"><a href="#四、Redis持久化" class="headerlink" title="四、Redis持久化"></a>四、Redis持久化</h2><p>主要是两种方式，可以都用，也可以只开一种，根据自己业务需要配置。</p>
<p><strong>rdb方式</strong><br><code>rdb</code>是<code>redis</code>对数据进行持久化而保存到硬盘的数据文件。</p>
<p>工作原理</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">当redis生成dump.rdb文件时，工作过程如下：</div><div class="line">redis主进程fork一个子进程</div><div class="line">fork出来的子进程将内存的数据集dump到临时的RDB中</div><div class="line">当子进程对临时的RDB文件写入完毕，redis用新的RDB文件代替旧的RDB文件</div></pre></td></tr></table></figure>
<p>默认情况下相关配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div></pre></td></tr></table></figure>
<p>其意义为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">当1个key更新值时每900秒保存一次数据到硬盘</div><div class="line">当10个key更新值时每300秒保存一次到硬盘</div><div class="line">当10000个key更新值时每60秒保存一次到硬盘</div></pre></td></tr></table></figure>
<p>换句话说，当你重启服务器时数据是可能会丢失的，如果数据量小的时候，你会丢失5分钟以内的数据；如果数据量大的时候，你会丢失一分钟以内的数据。</p>
<p>所以<code>set name 1</code>后重启服务器，<code>get name</code>时的结果会是<code>nil</code>，如果你想避免这种情况发生，那么可以<code>sav</code>后重启服务器。</p>
<p>然而大多数情况下我们需要防止的是服务器突发情况下的重启，这时候可能没有机会save，所以还是会造成数据的丢失。所以你可以设置<code>save &quot;&quot;</code>这样的话会每次写操作到保存到硬盘，但是<code>redis</code>作为缓存却需要每次到保存到硬盘已丧失了其作为缓存的意义，因此这种方法是不可取的。</p>
<p>还有一种方式，在每次写操作时使用<code>bgsave</code>命令，可以直接返回操作结果并异步将其保存到硬盘。</p>
<p><code>rdb</code>方式的优点是保存的数据存储量小（只有数据）<code>重启速度很快</code>；缺点<code>是可能会造成数据的丢失</code>。</p>
<p><strong>aof方式</strong><br><code>aof</code>本质是<code>redis</code>操作（写操作）日志文件。aof默认是未开启的，需要在配置文件中进行设置，在配置文件中将这一行改为<code>appendonly yes</code>就可以了。</p>
<p>工作原理</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AOF ：append only file。</div><div class="line">每当Redis执行一个改变数据集的命令时，这个命令都会被追加到AOF文件的末尾。</div><div class="line">当redis重新启动时，程序可以通过AOF文件恢复数据。</div></pre></td></tr></table></figure>
<p>那么会在什么时候<code>append</code>到文件末尾呢？有三种方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">appendfsync always</div><div class="line">appendfsync everysec</div><div class="line">appendfsync no </div><div class="line"></div><div class="line">appendfsync always每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全</div><div class="line">appendfsync everysec每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。</div><div class="line">appendfsync no从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。</div><div class="line"></div><div class="line">推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</div></pre></td></tr></table></figure>
<p>aof能够保证数据的安全，但是在重启时比较耗时，而且aof文件的体积比rdb文件大。</p>
<p><strong>使用</strong><br>在同时开启rdb和aof模式时，会采用aof模式来读取数据。在正常的使用中，如果不是十分在乎短时间内的数据丢失的时候，使用rdb方式会使服务器的效率更高，更节省cpu和硬盘；如果担心数据丢失的话，aof方式无疑会是更好的选择。</p>
<h2 id="五、Redis主从复制"><a href="#五、Redis主从复制" class="headerlink" title="五、Redis主从复制"></a>五、Redis主从复制</h2><p><strong>1、概述</strong></p>
<p><code>Redis</code>的<code>replication</code>机制允许<code>slave</code>从<code>master</code>那里通过网络传输拷贝到完整的数据备份。具有以下特点：</p>
<ul>
<li><p>1.异步复制，从<code>2.8</code>版本开始，<code>slave</code>能不时地从<code>master</code>那里获取到数据。</p>
</li>
<li><p>2.允许单个<code>master</code>配置多个<code>slave</code></p>
</li>
<li><p>3.<code>slave</code>允许其它<code>slave</code>连接到自己。一个<code>slave</code>除了可以连接<code>master</code>外，它还可以连接其它的<code>slave</code>。形成一个图状的架构。</p>
</li>
<li><p>4.<code>master</code>在进行<code>replication</code>时是非阻塞的，这意味着在<code>replication</code>期间，<code>master</code>依然能够处理客户端的请求。</p>
</li>
<li><p>5.<code>slave</code>在<code>replication</code>期间也是非阻塞的，也可以接受来自客户端的请求，但是它用的是之前的旧数据。可以通过配置来决定slave是否在进行<code>replication</code>时用旧数据响应客户端的请求，如果配置为否，那么<code>slave</code>将会返回一个错误消息给客户端。不过当新的数据接收完全后，必须将新数据与旧数据替换，即删除旧数据，在替换数据的这个时间窗口内，<code>slave</code>将会拒绝客户端的请求和连接。</p>
</li>
<li><p>6.一般使用<code>replication</code>来可以实现扩展性，例如说，可以将多个<code>slave</code>配置为“只读”，或者是纯粹的数据冗余备份。</p>
</li>
<li><p>7.能够通过<code>replication</code>来避免<code>master</code>每次持久化时都将整个数据集持久化到硬盘中。只需把<code>master</code>配置为不进行持久化操作(把配置文件中持久化相关的配置项注释掉即可)，然后连接上一个<code>slave</code>，这个<code>slave</code>则被配置持久化选项。不过需要注意的是，在这个方案中，必须确保<code>master</code>不会自动启动。</p>
</li>
</ul>
<p><strong>2、Master持久化功能关闭时Replication的安全性</strong></p>
<p>当有需要使用到<code>replication</code>机制时，一般都会强烈建议把<code>master</code>的持久化开关打开。即使为了避免持久化带来的延迟影响，不把持久化开关打开，那么也应该把<code>master</code>配置为不会自动启动的。</p>
<p>为了更好地理解当一个不进行持久化的<code>master</code>如果允许自动启动所带来的危险性。可以看看下面这种失败情形：</p>
<p>假设我们有一个<code>redis</code>节点<code>A</code>，设置为<code>master</code>，并且关闭持久化功能，另外两个节点<code>B</code>和<code>C</code>是它的<code>slave</code>，并从<code>A</code>复制数据。<br>如果<code>A</code>节点崩溃了导致所有的数据都丢失了，它会有重启系统来重启进程。但是由于持久化功能被关闭了，所以即使它重启了，它的数据集是空的。<br>而<code>B</code>和<code>C</code>依然会通过<code>replication</code>机制从<code>A</code>复制数据，所以<code>B</code>和<code>C</code>会从<code>A</code>那里复制到一份空的数据集，并用这份空的数据集将自己本身的非空的数据集替换掉。于是就相当于丢失了所有的数据。</p>
<p>即使使用一些<code>HA</code>工具，比如说<code>sentinel</code>来监控<code>master-slaves</code>集群，也会发生上述的情形，因为<code>master</code>可能崩溃后迅速恢复。速度太快而导致<code>sentinel</code>无法察觉到一个<code>failure</code>的发生。</p>
<p>当数据的安全很重要、持久化开关被关闭并且有<code>replication</code>发生的时候，那么应该<code>**禁止实例的自启动**</code>。</p>
<p><strong>3、replication工作原理</strong><br>如果你为<code>master</code>配置了一个<code>slave</code>，不管这个<code>slave</code>是否是第一次连接上<code>Master</code>，它都会发送一个<code>SYNC</code>命令给<code>master</code>请求复制数据。</p>
<p><code>master</code>收到<code>SYNC</code>命令后，会在后台进行数据持久化，持久化期间，<code>master</code>会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。当持久化进行完毕以后，<code>master</code>会把这份数据集发送给<code>slave</code>，<code>slave</code>会把接收到的数据进行持久化，然后再加载到内存中。然后，<code>master</code>再将之前缓存在内存中的命令发送给<code>slave</code>。</p>
<p>当<code>master</code>与<code>slave</code>之间的连接由于某些原因而断开时，<code>slave</code>能够自动重连<code>master</code>，如果<code>master</code>收到了多个<code>slave</code>并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送给多个并发连接的<code>slave</code>。</p>
<p>当<code>master</code>和<code>slave</code>断开重连后，一般都会对整份数据进行复制。但从<code>redis2.8</code>版本开始，支持部分复制。</p>
<p><strong>4、数据部分复制</strong><br>从<code>2.8</code>版本开始，<code>slave</code>与<code>master</code>能够在网络连接断开重连后只进行部分数据复制。</p>
<p><code>master</code>会在其内存中创建一个复制流的等待队列，<code>master</code>和它所有的<code>slave</code>都维护了复制的数据下标和<code>master</code>的进程<code>id</code>，因此，当网络连接断开后，<code>slave</code>会请求<code>master</code>继续进行未完成的复制，从所记录的数据下标开始。如果进程<code>id</code>变化了，或者数据下标不可用，那么将会进行一次全部数据的复制。</p>
<p><strong>5、支持部分数据复制的命令是PSYNC</strong></p>
<p>不需硬盘参与的<code>Replication</code><br>一般情况下，一次复制需要将内存的数据写到硬盘中，再将数据从硬盘读进内存，再发送给<code>slave</code>。</p>
<p>对于速度比较慢的硬盘，这个操作会给<code>master</code>带来性能上的损失。<code>Redis2.8</code>版本开始，实验性地加上了无硬盘复制的功能。这个功能能将数据从内存中直接发送到<code>slave</code>，而不用经过硬盘的存储。</p>
<p>不过这个功能目前处于实验阶段，还未正式发布。<br><strong>6、主从配置</strong><br>与<code>replication</code>相关的配置比较简单，只需要把下面一行加到<code>slave</code>的配置文件中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slaveof 192.168.1.1 6379</div></pre></td></tr></table></figure>
<p>你只需要把<code>ip</code>地址和端口号改一下。当然，你也可以通过客户端发送<code>SLAVEOF</code>命令给<code>slave</code>。</p>
<p>如果<code>master</code>通过<code>requirepass</code>配置项设置了密码，<code>slave</code>每次同步操作都需要验证密码，可以通过在<code>slave</code>的配置文件中添加以下配置项：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">masterauth &lt;password&gt;</div></pre></td></tr></table></figure>
<p>也可以通过客户端在运行时发送以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config <span class="built_in">set</span> masterauth &lt;password&gt;</div></pre></td></tr></table></figure>
<p>部分数据复制有一些可调的配置参数，请参考<code>redis.conf</code>文件。</p>
<p>无硬盘复制功能可以通过<code>repl-diskless-sync</code>来配置，另外一个配置项<code>repl-diskless-sync-delay</code>用来配置当收到第一个请求时，等待多个<code>slave</code>一起来请求之间的间隔时间。</p>
<p><strong>7、只读的slave</strong></p>
<p>从<code>redis2.6</code>版本开始，<code>slave</code>支持只读模式，而且是<code>默认</code>的。可以通过配置项<code>slave-read-only</code>来进行配置，并且支持客户端使用<code>CONFIG SET</code>命令来动态修改配置。</p>
<p>只读的<code>slave</code>会拒绝所有的写请求，只读的<code>slave</code>并不是为了防范不可信的客户端，毕竟一些管理命令例如<code>DEBUG</code>和<code>CONFIG</code>在只读模式下还是可以使用的。如果确实要确保安全性，那么可以在配置文件中将一些命令重新命名。</p>
<p>也许你会感到很奇怪，为什么能够将一个只读模式的<code>slave</code>恢复为可写的呢，尽管可写，但是只要<code>slave</code>一同步<code>master</code>的数据，就会丢失那些写在<code>slave</code>的数据。不过还是有一些合法的应用场景需要存储瞬时数据会用到这个特性。<code>不过，之后可能会考虑废除掉这个特性。</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slave-read-only yes</div></pre></td></tr></table></figure>
<p><strong>8、至少N个slave才允许向master写数据</strong><br>从<code>redis2.8</code>版本开始，<code>master</code>可以被配置为，只有当<code>master</code>当前有至少<code>N</code>个<code>slave</code>连接着的时候才接受写数据的请求。</p>
<p>然而，由于<code>redis</code>是异步复制的，所以它并不能保证<code>slave</code>会受到一个写请求，所以总有一个数据丢失的时间窗口存在。</p>
<p>这个机制的工作原理如下所示：</p>
<ul>
<li><p>slave每秒发送ping心跳给master，询问当前复制了多少数据。</p>
</li>
<li><p>master会记录下它上次收到某个slave的ping心跳是什么时候。</p>
</li>
<li><p>使用者可以配置一个时间，来指定ping心跳的发送不应超过的一个超时时间</p>
</li>
<li><p>如果master有至少N个slave，并且ping心跳的超时不超过M秒，那么它就会接收写请求。</p>
</li>
</ul>
<p>也许你会认为这情形好似<code>CAP</code>理论中弱化版的<code>C(consistency)</code>，因为写请求并不能保证数据的一致性，但这样做，至少数据丢失被限制在了限定的时间内。即<code>M</code>秒。</p>
<p>如果<code>N</code>和<code>M</code>的条件都无法达到，那么<code>master</code>会回复一个错误信息。写请求也不会被处理。</p>
<p>有两个配置项用来配置上文中提到的<code>N</code>和<code>M</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">min-slaves-to-write &lt;number of slaves&gt;</div><div class="line">min-slaves-max-lag &lt;number of seconds&gt;</div></pre></td></tr></table></figure>
<p>如果需要了解更多，请查阅<code>redis.conf</code>配置文件。</p>
<h2 id="六、常用命令"><a href="#六、常用命令" class="headerlink" title="六、常用命令"></a>六、常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">redis-cli </div><div class="line">客户端命令工具</div><div class="line">$ /usr/<span class="built_in">local</span>/bin/redis-cli -h 192.168.1.1</div><div class="line">192.168.1.1:6379&gt; auth Passwd</div><div class="line">OK</div><div class="line">登录,密码验证</div><div class="line">192.168.1.1:6379&gt;info</div><div class="line">查看数据库状态</div><div class="line">192.168.1.1:6379&gt;info replication</div><div class="line">查看slave的复制状态</div><div class="line">192.168.1.1:6379&gt;<span class="built_in">set</span> key 123</div><div class="line">插入数据</div><div class="line">192.168.1.1:6379&gt;keys *</div><div class="line">列出数据</div><div class="line">flushdb</div><div class="line">清空当前数据</div><div class="line">flushall</div><div class="line">清除所有数据库</div></pre></td></tr></table></figure>
<p><strong>可视化客户端工具</strong></p>
<p><code>Redis Desktop Manager</code>（<code>RedisDesktopManager，RDM</code>）是一个快速、简单、支持跨平台的 <code>Redis</code> 桌面管理工具，基于 <code>Qt 5</code> 开发，支持通过 <code>SSH Tunnel</code> 连接。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">下载地址：https://redisdesktop.com/download</div></pre></td></tr></table></figure>
<h2 id="七、-应用场景"><a href="#七、-应用场景" class="headerlink" title="七、 应用场景"></a>七、 应用场景</h2><h3 id="取最新N个数据的操作"><a href="#取最新N个数据的操作" class="headerlink" title="取最新N个数据的操作"></a>取最新N个数据的操作</h3><p>比如典型的取你网站的最新文章，通过下面方式，我们可以将最新的5000条评论的ID放在<code>Redis</code>的<code>List</code>集合中，并将超出集合部分从数据库获取</p>
<p>使用<code>LPUSH latest.comments&lt;ID&gt;</code>命令，向<code>list</code>集合中插入数据</p>
<p>插入完成后再用<code>LTRIM latest.comments 0 5000</code>命令使其永远只保存最近<code>5000个ID</code> </p>
<p>然后我们在客户端获取某一页评论时可以用下面的逻辑（伪代码） </p>
<ul>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FUNCTION get_latest_comments(start,num_items):</div><div class="line">   id_list = redis.lrange(<span class="string">"latest.comments"</span>,start,start+num_items-1)</div><div class="line">   IF id_list.length &lt; num_items</div><div class="line">   id_list = SQL_DB(<span class="string">"SELECT ... ORDER BY time LIMIT ..."</span>)</div><div class="line">   END</div><div class="line">RETURN id_list</div><div class="line">END</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果你还有不同的筛选维度，比如某个分类的最新N条，那么你可以再建一个按此分类的<code>List</code>，只存<code>ID</code>的话，<code>Redis</code>是非常高效的</p>
<h3 id="排行榜应用，取TOP-N操作"><a href="#排行榜应用，取TOP-N操作" class="headerlink" title="排行榜应用，取TOP N操作"></a>排行榜应用，取<code>TOP N</code>操作</h3><p>这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，这时候就需要我们的<code>sorted set</code>出马了，将你要排序的值设置成<code>sorted set</code>的<code>score</code>，将具体的数据设置成相应的<code>value</code>，每次只需要执行一条<code>ZADD</code>命令即可。</p>
<h3 id="需要精准设定过期时间的应用"><a href="#需要精准设定过期时间的应用" class="headerlink" title="需要精准设定过期时间的应用"></a>需要精准设定过期时间的应用</h3><p>比如你可以把上面说到的<code>sorted set</code>的<code>score</code>值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除Redis中的过期数据，你完全可以把<code>Redis</code>里这个过期时间当成是对数据库中数据的索引，用<code>Redis</code>来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录。</p>
<h3 id="计数器应用"><a href="#计数器应用" class="headerlink" title="计数器应用"></a>计数器应用</h3><p><code>Redis</code>的命令都是原子性的，你可以轻松地利用<code>INCR，DECR</code>命令来构建计数器系统。 </p>
<h3 id="Uniq操作，获取某段时间所有数据排重值"><a href="#Uniq操作，获取某段时间所有数据排重值" class="headerlink" title="Uniq操作，获取某段时间所有数据排重值"></a><code>Uniq</code>操作，获取某段时间所有数据排重值</h3><p>这个使用<code>Redis</code>的set数据结构最合适了，只需要不断地将数据往<code>set</code>中扔就行了，<code>set</code>意为集合，所以会自动排重。</p>
<h3 id="Pub-Sub构建实时消息系统"><a href="#Pub-Sub构建实时消息系统" class="headerlink" title="Pub/Sub构建实时消息系统"></a><code>Pub/Sub</code>构建实时消息系统</h3><p><code>Redis</code>的<code>Pub/Sub</code>系统可以构建实时的消息系统，比如很多用<code>Pub/Sub</code>构建的实时聊天系统的例子。</p>
<h3 id="构建队列系统"><a href="#构建队列系统" class="headerlink" title="构建队列系统"></a>构建队列系统</h3><p>使用<code>list</code>可以构建队列系统，使用<code>sorted set</code>甚至可以构建有优先级的队列系统。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-Redis-3-2安装及主从复制详细配置及应用场景-附二&quot;&gt;&lt;a href=&quot;#Migo商城2-0-Redis-3-2安装及主从复制详细配置及应用场景-附二&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二&quot;&gt;&lt;/a&gt;Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二&lt;/h2&gt;&lt;p&gt;之前存的东西，拿出来改改&lt;/p&gt;
&lt;h2 id=&quot;一、编译安装&quot;&gt;&lt;a href=&quot;#一、编译安装&quot; class=&quot;headerlink&quot; title=&quot;一、编译安装&quot;&gt;&lt;/a&gt;一、编译安装&lt;/h2&gt;&lt;p&gt;1、下载安装包：&lt;code&gt;http://download.redis.io/releases/redis-3.2.3.tar.gz&lt;/code&gt;&lt;br&gt;目前最新的版本，你也可以打开redis官方的下载页下载合适版本&lt;code&gt;http://redis.io/download&lt;/code&gt;&lt;br&gt;2、开始安装&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0 redis 缓存" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0-redis-%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 门户首页大广告位显示(4) 十八</title>
    <link href="https://muyinchen.github.io/2016/12/04/Migo%E5%95%86%E5%9F%8E2.0%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%B9%BF%E5%91%8A%E4%BD%8D%E6%98%BE%E7%A4%BA(4)%20%E5%8D%81%E5%85%AB/"/>
    <id>https://muyinchen.github.io/2016/12/04/Migo商城2.0 门户首页大广告位显示(4) 十八/</id>
    <published>2016-12-04T15:42:53.081Z</published>
    <updated>2016-12-04T15:42:35.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-门户首页大广告位显示-4-十八"><a href="#Migo商城2-0-门户首页大广告位显示-4-十八" class="headerlink" title="Migo商城2.0 门户首页大广告位显示(4) 十八"></a>Migo商城2.0 门户首页大广告位显示(4) 十八</h2><p>关于<code>httpclient</code>的东西就不说了，不懂的可以百度谷歌的<br><a id="more"></a></p>
<h4 id="在common工程中导入httpclient工具类"><a href="#在common工程中导入httpclient工具类" class="headerlink" title="在common工程中导入httpclient工具类"></a>在<code>common</code>工程中导入<code>httpclient工具类</code></h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_211557.png" alt=""></p>
<h4 id="首页通过EL表达式输出到页面显示："><a href="#首页通过EL表达式输出到页面显示：" class="headerlink" title="首页通过EL表达式输出到页面显示："></a>首页通过EL表达式输出到页面显示：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_223203.png" alt=""></p>
<h4 id="前台系统service代码："><a href="#前台系统service代码：" class="headerlink" title="前台系统service代码："></a>前台系统<code>service</code>代码：</h4><p>此处代码和1版做了很大修改，之前的migoResult在做转换的时候出了点问题，索性就自己重新再写下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.migo.utils.HttpClientUtil;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/4.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;MIGO_MANAGE_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String MIGO_MANAGE_URL;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;AD1_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String AD1_URL;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAD1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//调用后台管理系统的接口服务获取数据</span></div><div class="line">            String url=MIGO_MANAGE_URL+AD1_URL;</div><div class="line">            String jsonData = HttpClientUtil.doGet(url);</div><div class="line">            <span class="keyword">if</span> (jsonData==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//解析json数据</span></div><div class="line">            JsonNode jsonNode = MAPPER.readTree(jsonData);</div><div class="line">            ArrayNode rows = (ArrayNode) jsonNode.get(<span class="string">"rows"</span>);</div><div class="line">            List&lt;Content&gt; contents = JsonUtils.jsonToList(String.valueOf(rows), Content.class);</div><div class="line">            List&lt;Map&lt;String,Object&gt;&gt; result1=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (Content content : contents) &#123;</div><div class="line">                Map&lt;String,Object&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">                map.put(<span class="string">"srcB"</span>,content.getPic());</div><div class="line">                map.put(<span class="string">"height"</span>,<span class="number">240</span>);</div><div class="line">                map.put(<span class="string">"alt"</span>,content.getTitle());</div><div class="line">                map.put(<span class="string">"width"</span>,<span class="number">670</span>);</div><div class="line">                map.put(<span class="string">"src"</span>,content.getPic2());</div><div class="line">                map.put(<span class="string">"widthB"</span>,<span class="number">550</span>);</div><div class="line">                map.put(<span class="string">"href"</span>,content.getUrl());</div><div class="line">                map.put(<span class="string">"heightB"</span>,<span class="number">240</span>);</div><div class="line">                result1.add(map);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> JsonUtils.objectToJson(result1);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller代码"><a href="#controller代码" class="headerlink" title="controller代码"></a><code>controller</code>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.service.IndexService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/16.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> IndexService indexService;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首页</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"index"</span>,method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</div><div class="line"></div><div class="line">        String ad1 = <span class="keyword">this</span>.indexService.queryAD1();</div><div class="line">        <span class="comment">//传递给页面</span></div><div class="line">        model.addAttribute(<span class="string">"indexAd1"</span>,ad1);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行测试：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_233410.png" alt=""></p>
<p>其他的广告位就暂时不写了，都一个套路，后台写个服务，前台系统查下，然后写到<code>model</code>里面，最后也没调用<code>el</code>表达式完成，至此，大广告位显示完成</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-门户首页大广告位显示-4-十八&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页大广告位显示-4-十八&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 门户首页大广告位显示(4) 十八&quot;&gt;&lt;/a&gt;Migo商城2.0 门户首页大广告位显示(4) 十八&lt;/h2&gt;&lt;p&gt;关于&lt;code&gt;httpclient&lt;/code&gt;的东西就不说了，不懂的可以百度谷歌的&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 门户首页大广告位显示(3) 十七</title>
    <link href="https://muyinchen.github.io/2016/12/04/Migo%E5%95%86%E5%9F%8E2.0%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%B9%BF%E5%91%8A%E4%BD%8D%E6%98%BE%E7%A4%BA(3)%20%E5%8D%81%E4%B8%83/"/>
    <id>https://muyinchen.github.io/2016/12/04/Migo商城2.0 门户首页大广告位显示(3) 十七/</id>
    <published>2016-12-03T17:39:10.160Z</published>
    <updated>2016-12-03T17:38:29.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-门户首页大广告位显示-3-十七"><a href="#Migo商城2-0-门户首页大广告位显示-3-十七" class="headerlink" title="Migo商城2.0 门户首页大广告位显示(3) 十七"></a>Migo商城2.0 门户首页大广告位显示(3) 十七</h2><p>接上篇：</p>
<h3 id="内容管理的实现"><a href="#内容管理的实现" class="headerlink" title="内容管理的实现"></a>内容管理的实现</h3><a id="more"></a>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161203_231552.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'center'"</span> <span class="attr">style</span>=<span class="string">"padding:5px"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"easyui-datagrid"</span> <span class="attr">id</span>=<span class="string">"contentList"</span> <span class="attr">data-options</span>=<span class="string">"toolbar:contentListToolbar,singleSelect:false,collapsible:true,pagination:true,method:'get',pageSize:20,url:'/rest/content',queryParams:&#123;categoryId:0&#125;"</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">		        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'id',width:30"</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'title',width:120"</span>&gt;</span>内容标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'subTitle',width:100"</span>&gt;</span>内容子标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'titleDesc',width:120"</span>&gt;</span>内容描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'url',width:60,align:'center',formatter:migo.formatUrl"</span>&gt;</span>内容连接<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'pic',width:50,align:'center',formatter:migo.formatUrl"</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'pic2',width:50,align:'center',formatter:migo.formatUrl"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'created',width:130,align:'center',formatter:migo.formatDateTime"</span>&gt;</span>创建日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'updated',width:130,align:'center',formatter:migo.formatDateTime"</span>&gt;</span>更新日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="查询显示内容列表"><a href="#查询显示内容列表" class="headerlink" title="查询显示内容列表:"></a>查询显示内容列表:</h4><h5 id="mapper"><a href="#mapper" class="headerlink" title="mapper:"></a><code>mapper</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.Content;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/3.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ContentMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Content</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="service"><a href="#service" class="headerlink" title="service:"></a><code>service</code>:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/3.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Content</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> EasyUIDataGridResult <span class="title">queryListByCategoryId</span><span class="params">(Long categoryId, Integer page, Integer rows)</span> </span>&#123;</div><div class="line">        PageHelper.startPage(page,rows);</div><div class="line">        Content expample=<span class="keyword">new</span> Content();</div><div class="line">        expample.setCategoryId(categoryId);</div><div class="line">        List&lt;Content&gt; contents = <span class="keyword">super</span>.queryListByWhere(expample);</div><div class="line">        PageInfo&lt;Content&gt; pageInfo=<span class="keyword">new</span> PageInfo&lt;&gt;(contents);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EasyUIDataGridResult(pageInfo.getList(),pageInfo.getTotal());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller"><a href="#controller" class="headerlink" title="controller:"></a><code>controller</code>:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> com.migo.service.ContentService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/3.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"content"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(ContentController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentService contentService;</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;EasyUIDataGridResult&gt; <span class="title">queryListByCategoryId</span><span class="params">(</span></span></div><div class="line">            @RequestParam(<span class="string">"categoryId"</span>) Long categoryId,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"page"</span>,defaultValue = <span class="string">"1"</span>)</span> Integer page,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"rows"</span>,defaultValue = <span class="string">"20"</span>)</span> Integer rows</div><div class="line"></div><div class="line">    )&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据categoryId查询内容列表 categoryId = &#123;&#125;"</span>,categoryId);</div><div class="line">            &#125;</div><div class="line">            EasyUIDataGridResult result=<span class="keyword">this</span>.contentService.queryListByCategoryId(categoryId,page,rows);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(result);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          logger.error(<span class="string">"根据categoryId查询内容列表 服务器傲娇了 categoryId = &#123;&#125;"</span>,categoryId);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="运行测试结果："><a href="#运行测试结果：" class="headerlink" title="运行测试结果："></a>运行测试结果：</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_000814.png" alt=""></p>
<h4 id="新增内容"><a href="#新增内容" class="headerlink" title="新增内容"></a>新增内容</h4><p>先进行校验，通过后访问<code>/rest/page/content-add</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">text</span>:<span class="string">'新增'</span>,</div><div class="line">    <span class="attr">iconCls</span>:<span class="string">'icon-add'</span>,</div><div class="line">    <span class="attr">handler</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    	<span class="keyword">var</span> node = $(<span class="string">"#contentCategoryTree"</span>).tree(<span class="string">"getSelected"</span>);</div><div class="line">    	<span class="keyword">if</span>(!node || !$(<span class="string">"#contentCategoryTree"</span>).tree(<span class="string">"isLeaf"</span>,node.target))&#123;</div><div class="line">    		$.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容必须选择一个内容分类!'</span>);</div><div class="line">    		<span class="keyword">return</span> ;</div><div class="line">    	&#125;</div><div class="line">    	TT.createWindow(&#123;</div><div class="line">			<span class="attr">url</span> : <span class="string">"/rest/page/content-add"</span></div><div class="line">		&#125;); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>content-add.jsp</code>为了更加适应restful，进行迭代，原代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提交到后台的RESTful</span></div><div class="line">			$.ajax(&#123;</div><div class="line">			   <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">			   <span class="attr">url</span>: <span class="string">"/rest/content"</span>,</div><div class="line">			   <span class="attr">data</span>: $(<span class="string">"#contentAddForm"</span>).serialize(),</div><div class="line">			   <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容成功!'</span>);</div><div class="line">  						$(<span class="string">"#contentList"</span>).datagrid(<span class="string">"reload"</span>);</div><div class="line">  						TT.closeCurrentWindow();</div><div class="line">			   &#125;,</div><div class="line">			   <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容失败!'</span>);</div><div class="line">			   &#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;,</div></pre></td></tr></table></figure>
<h5 id="修改后："><a href="#修改后：" class="headerlink" title="修改后："></a>修改后：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">				   <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">				   <span class="attr">url</span>: <span class="string">"/rest/content"</span>,</div><div class="line">				   <span class="attr">data</span>: $(<span class="string">"#contentAddForm"</span>).serialize(),</div><div class="line">				   <span class="attr">statusCode</span> : &#123;</div><div class="line">					   <span class="number">201</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						$.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容成功!'</span>);</div><div class="line">   						$(<span class="string">"#contentList"</span>).datagrid(<span class="string">"reload"</span>);</div><div class="line">   						TT.closeCurrentWindow();</div><div class="line">					   &#125;,</div><div class="line">					   <span class="number">500</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						    $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容失败!'</span>);</div><div class="line">					   &#125;</div><div class="line">				   &#125;</div><div class="line">				  </div><div class="line">				&#125;);</div></pre></td></tr></table></figure>
<h4 id="controller："><a href="#controller：" class="headerlink" title="controller："></a>controller：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 新增内容</div><div class="line">    * <span class="doctag">@param</span> content</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line"></div><div class="line">   <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">add</span><span class="params">(Content content)</span></span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">               logger.info(<span class="string">"新增内容 contentTitle = &#123;&#125;"</span>,content.getTitle());</div><div class="line">           &#125;</div><div class="line">           content.setId(<span class="keyword">null</span>);</div><div class="line">           <span class="keyword">this</span>.contentService.save(content);</div><div class="line">           <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"新增内容 contentTitle = &#123;&#125;"</span>,content.getTitle(),e);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_005223.png" alt=""></p>
<h5 id="发现查询内容列表没有按修改时间排序，故重写代码如下："><a href="#发现查询内容列表没有按修改时间排序，故重写代码如下：" class="headerlink" title="发现查询内容列表没有按修改时间排序，故重写代码如下："></a>发现查询内容列表没有按修改时间排序，故重写代码如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</div><div class="line"><span class="keyword">import</span> com.migo.mapper.ContentMapper;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> javafx.scene.input.KeyCode.O;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/3.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Content</span>&gt; </span>&#123;</div><div class="line">   <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentMapper contentMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> EasyUIDataGridResult <span class="title">queryListByCategoryId</span><span class="params">(Long categoryId, Integer page, Integer rows)</span> </span>&#123;</div><div class="line">        PageHelper.startPage(page,rows);</div><div class="line"></div><div class="line"></div><div class="line">        Example expample=<span class="keyword">new</span> Example(Content.class);</div><div class="line">        expample.createCriteria().andCondition(<span class="string">"category_id"</span>).andEqualTo(categoryId);</div><div class="line">        expample.orderBy(<span class="string">"updated"</span>).desc();</div><div class="line">        List&lt;Content&gt; contents = contentMapper.selectByExample(expample);</div><div class="line">        PageInfo&lt;Content&gt; pageInfo=<span class="keyword">new</span> PageInfo&lt;&gt;(contents);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EasyUIDataGridResult(pageInfo.getList(),pageInfo.getTotal());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="运行显示效果："><a href="#运行显示效果：" class="headerlink" title="运行显示效果："></a>运行显示效果：</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_011020.png" alt=""></p>
<p>因进度问题，修改和删除暂时就不实现了，之前有类似代码，很简单，读者可自行解决</p>
<h3 id="对外提供接口服务："><a href="#对外提供接口服务：" class="headerlink" title="对外提供接口服务："></a>对外提供接口服务：</h3><p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller.webs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> com.migo.service.ContentService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/4.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"webs/content"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsContenController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(WebsContenController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentService contentService;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据categoryId查询内容列表</div><div class="line">     * <span class="doctag">@param</span> categoryId</div><div class="line">     * <span class="doctag">@param</span> page</div><div class="line">     * <span class="doctag">@param</span> rows</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;EasyUIDataGridResult&gt; <span class="title">queryListByCategoryId</span><span class="params">(</span></span></div><div class="line">            @RequestParam(<span class="string">"categoryId"</span>) Long categoryId,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"page"</span>,defaultValue = <span class="string">"1"</span>)</span> Integer page,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"rows"</span>,defaultValue = <span class="string">"20"</span>)</span> Integer rows</div><div class="line"></div><div class="line">    )&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据categoryId查询内容列表 categoryId = &#123;&#125;"</span>,categoryId);</div><div class="line">            &#125;</div><div class="line">            EasyUIDataGridResult result=<span class="keyword">this</span>.contentService.queryListByCategoryId(categoryId,page,rows);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(result);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"根据categoryId查询内容列表 服务器傲娇了 categoryId = &#123;&#125;"</span>,categoryId,e);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行与测试：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_013436.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-门户首页大广告位显示-3-十七&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页大广告位显示-3-十七&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 门户首页大广告位显示(3) 十七&quot;&gt;&lt;/a&gt;Migo商城2.0 门户首页大广告位显示(3) 十七&lt;/h2&gt;&lt;p&gt;接上篇：&lt;/p&gt;
&lt;h3 id=&quot;内容管理的实现&quot;&gt;&lt;a href=&quot;#内容管理的实现&quot; class=&quot;headerlink&quot; title=&quot;内容管理的实现&quot;&gt;&lt;/a&gt;内容管理的实现&lt;/h3&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 门户首页大广告位显示(2) 十 六</title>
    <link href="https://muyinchen.github.io/2016/12/03/Migo%E5%95%86%E5%9F%8E2.0%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%B9%BF%E5%91%8A%E4%BD%8D%E6%98%BE%E7%A4%BA(2)%20%E5%8D%81%20%E5%85%AD/"/>
    <id>https://muyinchen.github.io/2016/12/03/Migo商城2.0 门户首页大广告位显示(2) 十 六/</id>
    <published>2016-12-03T14:48:08.535Z</published>
    <updated>2016-12-03T14:47:46.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Migo商城2-0-门户首页大广告位显示-2-十-六"><a href="#Migo商城2-0-门户首页大广告位显示-2-十-六" class="headerlink" title="Migo商城2.0 门户首页大广告位显示(2) 十 六"></a>Migo商城2.0 门户首页大广告位显示(2) 十 六</h1><p>接上篇，<br><a id="more"></a><br>完成后，对每个节点右键点击，触发事件</p>
<p>触发菜单显示：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161130_001834.png" alt=""></p>
<p>具体事件定义：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161130_002506.png" alt=""></p>
<p>新增和修改事件，查<code>api</code>  对比上图代码位置，一看便知：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161130_003919.png" alt=""></p>
<p>此处处理接着看代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">onAfterEdit : <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> _tree = $(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">if</span>(node.id == <span class="number">0</span>)&#123;</div><div class="line">		<span class="comment">// 新增节点</span></div><div class="line">		$.post(<span class="string">"/rest/content/category"</span>,&#123;<span class="attr">parentId</span>:node.parentId,<span class="attr">name</span>:node.text&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			_tree.tree(<span class="string">"update"</span>,&#123;</div><div class="line">				<span class="attr">target</span> : node.target,</div><div class="line">				<span class="attr">id</span> : data.id</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">			   <span class="attr">type</span>: <span class="string">"PUT"</span>,</div><div class="line">			   <span class="attr">url</span>: <span class="string">"/rest/content/category"</span>,</div><div class="line">			   <span class="attr">data</span>: &#123;<span class="attr">id</span>:node.id,<span class="attr">name</span>:node.text&#125;,</div><div class="line">			   <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">				   <span class="comment">//$.messager.alert('提示','新增商品成功!');</span></div><div class="line">			   &#125;,</div><div class="line">			   <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'重命名失败!'</span>);</div><div class="line">			   &#125;</div><div class="line">			&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新增节点代码实现："><a href="#新增节点代码实现：" class="headerlink" title="新增节点代码实现："></a>新增节点代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 新增节点</div><div class="line">   * <span class="doctag">@param</span> contentCategory</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line">  <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ContentCategory&gt; <span class="title">addContentCategery</span><span class="params">(ContentCategory contentCategory)</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">              logger.info(<span class="string">"新增节点 contentCategory = &#123;&#125;"</span>,contentCategory);</div><div class="line">          &#125;</div><div class="line">          <span class="comment">//补全字段</span></div><div class="line">          contentCategory.setId(<span class="keyword">null</span>);</div><div class="line">          contentCategory.setIsParent(<span class="keyword">false</span>);</div><div class="line">          contentCategory.setSortOrder(<span class="number">1</span>);</div><div class="line">          contentCategory.setStatus(<span class="number">1</span>);</div><div class="line">          <span class="keyword">this</span>.contentCategoryService.save(contentCategory);</div><div class="line"></div><div class="line">          <span class="comment">//新增节点后可能会改变父节点的状态isParent</span></div><div class="line">          ContentCategory parent = <span class="keyword">this</span>.contentCategoryService.queryById(contentCategory.getParentId());</div><div class="line">          <span class="keyword">if</span> (!parent.getIsParent()) &#123;</div><div class="line"></div><div class="line">              parent.setIsParent(<span class="keyword">true</span>);</div><div class="line">              <span class="keyword">this</span>.contentCategoryService.updateSelective(parent);</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(contentCategory);</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">         logger.error(<span class="string">"新增节点 服务器傲娇了 contentCategory = &#123;&#125;"</span>,contentCategory,e);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="运行测试结果："><a href="#运行测试结果：" class="headerlink" title="运行测试结果："></a>运行测试结果：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161203_212652.png" alt=""></p>
<h4 id="重命名后台代码："><a href="#重命名后台代码：" class="headerlink" title="重命名后台代码："></a>重命名后台代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 修改节点</div><div class="line">     * <span class="doctag">@param</span> contentCategory</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateContentCategery</span><span class="params">(ContentCategory contentCategory)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"修改节点 contentCategory = &#123;&#125;"</span>,contentCategory);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.contentCategoryService.updateSelective(contentCategory);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"修改节点 服务器傲娇了 contentCategory = &#123;&#125;"</span>,contentCategory,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="运行测试结果：-1"><a href="#运行测试结果：-1" class="headerlink" title="运行测试结果："></a>运行测试结果：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161203_214659.png" alt=""></p>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><h5 id="js代码："><a href="#js代码：" class="headerlink" title="js代码："></a><code>js</code>代码：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(item.name === <span class="string">"delete"</span>)&#123;</div><div class="line">		$.messager.confirm(<span class="string">'确认'</span>,<span class="string">'确定删除名为 '</span>+node.text+<span class="string">' 的分类吗？'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(r)&#123;</div><div class="line">				$.ajax(&#123;</div><div class="line">     			   <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">     			   <span class="attr">url</span>: <span class="string">"/rest/content/category"</span>,</div><div class="line">                  <span class="comment">//注意此处的写法，不懂可谷歌 一下</span></div><div class="line">     			   data : &#123;<span class="attr">parentId</span>:node.parentId,<span class="attr">id</span>:node.id,<span class="string">"_method"</span>:<span class="string">"DELETE"</span>&#125;,</div><div class="line">     			   <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">     				   <span class="comment">//$.messager.alert('提示','新增商品成功!');</span></div><div class="line">     				  tree.tree(<span class="string">"remove"</span>,node.target);</div><div class="line">     			   &#125;,</div><div class="line">     			   <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'删除失败!'</span>);</div><div class="line">     			   &#125;</div><div class="line">     			&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>相对应的<code>web.xml</code>的处理</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 将POST请求转化为DELETE或者是PUT 要用_method指定真正的请求参数 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="后台代码实现："><a href="#后台代码实现：" class="headerlink" title="后台代码实现："></a>后台代码实现：</h4><p><code>删除节点所涉及的逻辑还是比较多的</code></p>
<h5 id="controller代码"><a href="#controller代码" class="headerlink" title="controller代码"></a>controller代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除节点</div><div class="line"> * <span class="doctag">@param</span> contentCategory</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.DELETE)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">delete</span><span class="params">(ContentCategory contentCategory)</span></span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">            logger.info(<span class="string">"删除节点 contentCategory = &#123;&#125;"</span>,contentCategory);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.contentCategoryService.deleteDuDu(contentCategory);</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        logger.error(<span class="string">"删除节点 服务器傲娇了 contentCategory = &#123;&#125;"</span>,contentCategory,e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="service代码"><a href="#service代码" class="headerlink" title="service代码"></a>service代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ContentCategory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/20.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCategoryService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ContentCategory</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDuDu</span><span class="params">(ContentCategory contentCategory)</span> </span>&#123;</div><div class="line">        List ids=<span class="keyword">new</span> ArrayList();</div><div class="line">        ids.add(contentCategory.getId());</div><div class="line"></div><div class="line">        <span class="comment">//调用递归方法添加旗下所有子节点id</span></div><div class="line">        <span class="keyword">this</span>.addAllChildrenNode(ids,contentCategory.getId());</div><div class="line">        <span class="keyword">super</span>.deleteByIds(ContentCategory.class,<span class="string">"id"</span>,ids);</div><div class="line">        <span class="comment">//判断该节点是否还有兄弟节点，如果没有，修改父节点的isParent为false</span></div><div class="line">        ContentCategory example=<span class="keyword">new</span> ContentCategory();</div><div class="line">        example.setParentId(contentCategory.getParentId());</div><div class="line">        List&lt;ContentCategory&gt; list = <span class="keyword">super</span>.queryListByWhere(example);</div><div class="line">        <span class="keyword">if</span> (list==<span class="keyword">null</span>||list.isEmpty())&#123;</div><div class="line">            ContentCategory parent=<span class="keyword">new</span> ContentCategory();</div><div class="line">            parent.setId(contentCategory.getParentId());</div><div class="line">            parent.setIsParent(<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">super</span>.updateSelective(parent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAllChildrenNode</span><span class="params">(List ids,Long pid)</span></span>&#123;</div><div class="line">        ContentCategory example=<span class="keyword">new</span> ContentCategory();</div><div class="line">        example.setParentId(pid);</div><div class="line">        List&lt;ContentCategory&gt; contentCategories = <span class="keyword">super</span>.queryListByWhere(example);</div><div class="line">        <span class="keyword">for</span> (ContentCategory contentCategory : contentCategories) &#123;</div><div class="line">            ids.add(contentCategory.getId());</div><div class="line">            <span class="comment">//判断该节点是否为父节点，如果是，继续调用该方法查找子节点</span></div><div class="line">            <span class="keyword">if</span> (contentCategory.getIsParent()) &#123;</div><div class="line">                <span class="comment">//递归调用此方法</span></div><div class="line">                addAllChildrenNode(ids,contentCategory.getId());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="运行操作结果："><a href="#运行操作结果：" class="headerlink" title="运行操作结果："></a>运行操作结果：</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp161203_224126.png" alt=""></p>
<p>内容分类管理完事</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Migo商城2-0-门户首页大广告位显示-2-十-六&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页大广告位显示-2-十-六&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 门户首页大广告位显示(2) 十 六&quot;&gt;&lt;/a&gt;Migo商城2.0 门户首页大广告位显示(2) 十 六&lt;/h1&gt;&lt;p&gt;接上篇，&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 Cookie 和 session详解 附一</title>
    <link href="https://muyinchen.github.io/2016/11/23/Migo%E5%95%86%E5%9F%8E2.0%20Cookie-%E5%92%8C-session%E8%AF%A6%E8%A7%A3-%E9%99%84%E4%B8%80/"/>
    <id>https://muyinchen.github.io/2016/11/23/Migo商城2.0 Cookie-和-session详解-附一/</id>
    <published>2016-11-23T13:37:50.081Z</published>
    <updated>2016-11-23T13:37:28.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie-和-session详解"><a href="#Cookie-和-session详解" class="headerlink" title="Cookie 和 session详解"></a>Cookie 和 session详解</h1><p>因为要写单点登录系统，有些基本的东西想想还是说下的</p>
<p>在将cookie 和 session 之前需要先理解什么是会话<br>会话：<br>用户打开一个浏览器，点击多个超链接，访问多个web资源，然后关闭浏览器，整个过程称为一个会话。<br>http协议是无状态的，一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换建立新的连接，也就是说，服务器无法跟踪会话。而cookie 和 session 就是用与解决这种问题。<br><a id="more"></a></p>
<h3 id="1-什么是cookie"><a href="#1-什么是cookie" class="headerlink" title="1.什么是cookie"></a>1.什么是cookie</h3><p>cookie是客户端的技术，程序把每个用户数据以cookie的形式写给用户各自的浏览器，当客户端再次访问服务器的时候，会带着各自的Cookie过来，这样服务器就能处理各自用户的数据了</p>
<h4 id="1-1-如何使用cookie"><a href="#1-1-如何使用cookie" class="headerlink" title="1.1 如何使用cookie"></a>1.1 如何使用cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>,<span class="string">"value"</span>); <span class="comment">//创建一个cookie</span></div><div class="line">cookie.setPath(<span class="string">"/"</span>); <span class="comment">//cookie记得一定要设定路径，默认是当前的类的路径，设置/代表是整个web应用。</span></div><div class="line">cookie.setMaxAge(<span class="string">""</span>); <span class="comment">//设置有效期限，默认是浏览器的进程，也就是浏览器关了，就没了。如果是设置为负数，那么cookie不会被存储，并且会被删除。如果设置为0，那么cookie会被删除。（这些内容在API上描述得非常清楚）</span></div><div class="line">response.addCookie(cookie);<span class="comment">//添加cookie,这样才能回写给客户端</span></div></pre></td></tr></table></figure>
<p>以上的内容就是关于如何去使用一个cookie了。</p>
<h4 id="1-2-cookie的细节"><a href="#1-2-cookie的细节" class="headerlink" title="1.2. cookie的细节"></a>1.2. cookie的细节</h4><p>根据API的描述，一个cookie最大为4KB.浏览器一般只允许存放300个cookie，每个站点最多存放20个Cookie。Cookie被创建的时候默认使用Verssion 0 ,也就是http 1.0</p>
<h5 id="1-2-1-cookie的删除"><a href="#1-2-1-cookie的删除" class="headerlink" title="1.2.1 cookie的删除"></a>1.2.1 cookie的删除</h5><p>在cookie的API中没有删除cookie的具体方法，但是我们可以通过设置cookie的生命周期，来讲cookie删除，设置为0代表删除（详解自行查看setMaxAge()方法）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cookie.setMaxAge(<span class="number">0</span>);  </div><div class="line">如果说不想从request域中获取cookie，然后将该cookie的生命周期设置为<span class="number">0</span>，可以采用以下这个方法</div><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"想删除的cooki名字"</span>,<span class="string">"value"</span>);</div><div class="line">cookie.setPath(<span class="string">""</span>);<span class="comment">//此处路径必须与想删除的cookie一致</span></div><div class="line">cookie.setMaxAge(<span class="number">0</span>); </div><div class="line">response.addCookie(cookie);</div></pre></td></tr></table></figure>
<h4 id="1-3-cookie的获取"><a href="#1-3-cookie的获取" class="headerlink" title="1.3 cookie的获取"></a>1.3 cookie的获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.getCookies(); <span class="comment">//返回的是cookie的数组</span></div></pre></td></tr></table></figure>
<p>以上就是cookie的常用方法。</p>
<h4 id="1-4-cookie设置注释"><a href="#1-4-cookie设置注释" class="headerlink" title="1.4 cookie设置注释"></a>1.4 cookie设置注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie.setComment(<span class="string">"comment"</span>)</div></pre></td></tr></table></figure>
<h4 id="1-5-cookie-设置安全传输协议-例如-https-ssl"><a href="#1-5-cookie-设置安全传输协议-例如-https-ssl" class="headerlink" title="1.5 cookie 设置安全传输协议(例如 https ,ssl)"></a>1.5 cookie 设置安全传输协议(例如 https ,ssl)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie.setSecure(<span class="keyword">true</span>|<span class="keyword">false</span>) 默认为<span class="keyword">false</span></div></pre></td></tr></table></figure>
<h3 id="2-什么是session"><a href="#2-什么是session" class="headerlink" title="2.什么是session"></a>2.什么是session</h3><p>session是服务端的技术，当浏览器第1次访问web资源的时候，服务器会自动为其创建一个session，并保存在服务器，当需要保存用户数据的时候，可以将数据写入session中。当用户访问其他程序的时候，就可以直接从session中取值。值得一提的是sesion是建立在cookie的基础上创建的。</p>
<h4 id="2-1-session实现原理"><a href="#2-1-session实现原理" class="headerlink" title="2.1 session实现原理"></a>2.1 session实现原理</h4><p>session的实现原理是建立在给浏览器回写cookie，并且是以JSESSIONID为键，但是这个cookie是没有时间的，也就是说，当你关闭浏览器时，代表一个会话结束了，也就是说你的session会被删除，当你再次访问服务器的时候，服务器会为你重新创建一个session。</p>
<h4 id="2-2-session的使用"><a href="#2-2-session的使用" class="headerlink" title="2.2 session的使用"></a>2.2 session的使用</h4><h5 id="2-2-1-客户端不禁用cookie的情况"><a href="#2-2-1-客户端不禁用cookie的情况" class="headerlink" title="2.2.1 客户端不禁用cookie的情况"></a>2.2.1 客户端不禁用cookie的情况</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HttpSession session = request.getSession();<span class="comment">//客户端访问服务器的时候，服务器会自动创建一个session,如果客户端没有禁用cookie的话。</span></div><div class="line">String sessionId = session.getId();</div><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,sessionId);</div><div class="line">cookie.setPaht(<span class="string">"/"</span>);</div><div class="line">cookie.setMaxAge(<span class="number">30</span>*<span class="number">60</span>);<span class="comment">//注意在tomcat的web.xml文件中，设置了session的生命周期最长为30分钟。</span></div><div class="line">response.addCookie(cookie);</div><div class="line">session.setAttribute(<span class="string">"key"</span>,<span class="string">"value"</span>);</div></pre></td></tr></table></figure>
<h5 id="2-2-2-客户端禁用cookie的情况"><a href="#2-2-2-客户端禁用cookie的情况" class="headerlink" title="2.2.2 客户端禁用cookie的情况"></a>2.2.2 客户端禁用cookie的情况</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如果客户端禁用cookie，那么需要调用response的encodeURL(<span class="string">"转发的地址"</span>)</div><div class="line">HttpSession session = request.getSession();</div><div class="line">String url1 = response.encodeURL(<span class="string">"xxxx"</span>);<span class="comment">//注意，调用这个方法之前，必须要先获取session,（在该方法的API描述得很清楚）</span></div><div class="line">PrintWriter pw = response.getWriter();</div><div class="line">pw.write(url1);</div></pre></td></tr></table></figure>
<h4 id="2-3-session的一些细节"><a href="#2-3-session的一些细节" class="headerlink" title="2.3 session的一些细节"></a>2.3 session的一些细节</h4><p>设置session的生命周期</p>
<p>可以通过设置配置文件的形式，设置session的生命周期；在web.xml文件中添加如下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span>//备注这里是以分钟为单位</div><div class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>参考以下2篇博文:<br><a href="https://my.oschina.net/kevinair/blog/192829" target="_blank" rel="external">https://my.oschina.net/kevina…</a> 深入源码剖析了session和cookie<br><a href="http://blog.csdn.net/fangaoxin/article/details/6952954/" target="_blank" rel="external">http://blog.csdn.net/fangaoxi…</a> 介绍了一些基本的知识</p>
<p>本来想自己写下基本知识，发现有现成的，就拿来主义了，自己保存的一篇文章，源于何处未知</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie-和-session详解&quot;&gt;&lt;a href=&quot;#Cookie-和-session详解&quot; class=&quot;headerlink&quot; title=&quot;Cookie 和 session详解&quot;&gt;&lt;/a&gt;Cookie 和 session详解&lt;/h1&gt;&lt;p&gt;因为要写单点登录系统，有些基本的东西想想还是说下的&lt;/p&gt;
&lt;p&gt;在将cookie 和 session 之前需要先理解什么是会话&lt;br&gt;会话：&lt;br&gt;用户打开一个浏览器，点击多个超链接，访问多个web资源，然后关闭浏览器，整个过程称为一个会话。&lt;br&gt;http协议是无状态的，一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换建立新的连接，也就是说，服务器无法跟踪会话。而cookie 和 session 就是用与解决这种问题。&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 门户首页大广告位显示(1) 十五</title>
    <link href="https://muyinchen.github.io/2016/11/20/Migo%E5%95%86%E5%9F%8E2.0%20%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%B9%BF%E5%91%8A%E4%BD%8D%E6%98%BE%E7%A4%BA(1)%20%E5%8D%81%E4%BA%94/"/>
    <id>https://muyinchen.github.io/2016/11/20/Migo商城2.0  门户首页大广告位显示(1) 十五/</id>
    <published>2016-11-20T15:52:22.470Z</published>
    <updated>2016-11-29T16:04:54.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-门户首页大广告位显示-1-十五"><a href="#Migo商城2-0-门户首页大广告位显示-1-十五" class="headerlink" title="Migo商城2.0  门户首页大广告位显示(1) 十五"></a>Migo商城2.0  门户首页大广告位显示(1) 十五</h2><p>操作失误，将之前的稿子搞没了，又得重新敲，坑。。。</p>
<p>来一张效果图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/dgg.png" alt=""></p>
<h3 id="轮播图的实现"><a href="#轮播图的实现" class="headerlink" title="轮播图的实现"></a>轮播图的实现</h3><blockquote>
<p>1、  将首页显示的广告都抽象的看作是内容</p>
<p>2、  在后台系统中创建一张内容表<br><a id="more"></a><br>3、  创建一个内容分类表用于区分内容的分类</p>
<p>4、  后台系统对内容表以及分类表进行CRUD</p>
<p>5、  对外提供接口服务</p>
<p>6、  前端系统通过接口获取数据，进行封装，即可实现</p>
</blockquote>
<h4 id="首页动态展示分析"><a href="#首页动态展示分析" class="headerlink" title="首页动态展示分析"></a>首页动态展示分析</h4><blockquote>
<p>1、网页内容可以进行分组</p>
<p>2、组中的每个项目包含一张图片</p>
<p>3、项目包含一个url</p>
<p>4、项目包含一个title</p>
<p>5、项目可能包含价格</p>
<p>6、大组下还可以有小组，小组下还可以再分组。</p>
</blockquote>
<p>内容归类：</p>
<blockquote>
<ol>
<li>需要有内容分组，需要是一个树形结构。</li>
<li>组下有项目</li>
</ol>
<ul>
<li>a)        包含图片</li>
<li>b)       Url</li>
<li>c)        Title</li>
<li>d)       价格</li>
</ul>
</blockquote>
<p>可以使用两个表来保存，</p>
<p>一个是内容分组表：<code>tb_content_category</code></p>
<p>一个内容项目表。<code>tb_content</code></p>
<p>于是引出一个概念 <code>内容管理系统（CMS）</code> 具体可以谷歌一下</p>
<h4 id="内容分类管理分析"><a href="#内容分类管理分析" class="headerlink" title="内容分类管理分析"></a>内容分类管理分析</h4><h5 id="功能分析："><a href="#功能分析：" class="headerlink" title="功能分析："></a>功能分析：</h5><blockquote>
<p>操作的数据库是tb_content_category，向表中插入数据。</p>
<p>页面：</p>
<ol>
<li>初始化树形控件。</li>
<li>添加节点</li>
<li>重命名节点</li>
<li>删除节点</li>
</ol>
</blockquote>
<h4 id="初始化树形控件"><a href="#初始化树形控件" class="headerlink" title="初始化树形控件"></a>初始化树形控件</h4><p>如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161129_235719.png" alt=""></p>
<p>请求的url：/rest/content/category</p>
<p>参数：id，当前节点的id，根据id查询子节点。</p>
<p>返回值：json数据</p>
<p>格式：(api查询所得)</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[&#123;    </div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,    </div><div class="line">    <span class="attr">"text"</span>: <span class="string">"Node 1"</span>,    </div><div class="line">    <span class="attr">"state"</span>: <span class="string">"closed"</span>,    </div><div class="line">    <span class="attr">"children"</span>: [&#123;    </div><div class="line">        <span class="attr">"id"</span>: <span class="number">11</span>,    </div><div class="line">        <span class="attr">"text"</span>: <span class="string">"Node 11"</span>   </div><div class="line">    &#125;,&#123;    </div><div class="line">        <span class="attr">"id"</span>: <span class="number">12</span>,    </div><div class="line">        <span class="attr">"text"</span>: <span class="string">"Node 12"</span>   </div><div class="line">    &#125;]    </div><div class="line">&#125;,&#123;    </div><div class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,    </div><div class="line">    <span class="attr">"text"</span>: <span class="string">"Node 2"</span>,    </div><div class="line">    <span class="attr">"state"</span>: <span class="string">"closed"</span>   </div><div class="line">&#125;]</div></pre></td></tr></table></figure>
<p>可以使用<code>EUTreeNode</code>(第一版)  2.0版本是<code>ContentCategory</code> 主要是为省查到结果后重新遍历转换为<code>EUTreeNode</code>，造成性能浪费 具体不同的地方请自行对比</p>
<p><code>ContentCategory</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_content_category"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCategory</span> <span class="keyword">extends</span> <span class="title">BasePojo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"parent_id"</span>)</div><div class="line">    <span class="keyword">private</span> Long parentId;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer status;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"sort_order"</span>)</div><div class="line">    <span class="keyword">private</span> Integer sortOrder;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"is_parent"</span>)</div><div class="line">    <span class="keyword">private</span> Boolean isParent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> parentId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Long parentId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parentId = parentId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSortOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sortOrder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSortOrder</span><span class="params">(Integer sortOrder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sortOrder = sortOrder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getIsParent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isParent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsParent</span><span class="params">(Boolean isParent)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isParent = isParent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 扩展字段，支持EasyUItree的显示,这样就可以避免再写一个第一版中的EasyuiTreeNode类，同时也省了第一版中</span></div><div class="line">    <span class="comment">//在service中的一系列对easyuiTreeNode的处理</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getIsParent() ? <span class="string">"closed"</span> : <span class="string">"open"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>操作的数据库是<code>tb_content_category</code>，属于单表操作，可以使用<code>通用mapper</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ContentCategory;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/20.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ContentCategoryMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">ContentCategory</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ContentCategory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/20.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCategoryService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ContentCategory</span>&gt;</span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ContentCategory;</div><div class="line"><span class="keyword">import</span> com.migo.service.ContentCategoryService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/20.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"content/category"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCategoryController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(ContentCategoryController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentCategoryService contentCategoryService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据父节点id查询节点列表</div><div class="line">     * <span class="doctag">@param</span> parentId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;ContentCategory&gt;&gt; getContentCatList(</div><div class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"id"</span>, defaultValue = <span class="string">"0"</span>) Long parentId) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据父节点id查询节点列表 parentId = &#123;&#125;"</span>,parentId);</div><div class="line">            &#125;</div><div class="line">            ContentCategory example=<span class="keyword">new</span> ContentCategory();</div><div class="line">            example.setParentId(parentId);</div><div class="line">            List&lt;ContentCategory&gt; categoryList = <span class="keyword">this</span>.contentCategoryService.queryListByWhere(example);</div><div class="line">            <span class="keyword">if</span> (categoryList==<span class="keyword">null</span>||categoryList.isEmpty())&#123;</div><div class="line">                <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                    logger.info(<span class="string">"根据父节点id查询节点列表 未找到 parentId = &#123;&#125;"</span>,parentId);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span>  ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>  ResponseEntity.ok(categoryList);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"根据父节点id查询节点列表 服务器傲娇了 parentId = &#123;&#125;"</span>,parentId,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行项目，显示效果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/catgery.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-门户首页大广告位显示-1-十五&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页大广告位显示-1-十五&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  门户首页大广告位显示(1) 十五&quot;&gt;&lt;/a&gt;Migo商城2.0  门户首页大广告位显示(1) 十五&lt;/h2&gt;&lt;p&gt;操作失误，将之前的稿子搞没了，又得重新敲，坑。。。&lt;/p&gt;
&lt;p&gt;来一张效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/dgg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;轮播图的实现&quot;&gt;&lt;a href=&quot;#轮播图的实现&quot; class=&quot;headerlink&quot; title=&quot;轮播图的实现&quot;&gt;&lt;/a&gt;轮播图的实现&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1、  将首页显示的广告都抽象的看作是内容&lt;/p&gt;
&lt;p&gt;2、  在后台系统中创建一张内容表&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>缓存浅析 一  常用的缓存技术</title>
    <link href="https://muyinchen.github.io/2016/11/18/%E7%BC%93%E5%AD%98%E6%B5%85%E6%9E%90%20%E4%B8%80%20%20%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%20/"/>
    <id>https://muyinchen.github.io/2016/11/18/缓存浅析 一  常用的缓存技术 /</id>
    <published>2016-11-18T11:40:48.216Z</published>
    <updated>2016-11-18T11:40:35.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存浅析-一-常用的缓存技术"><a href="#缓存浅析-一-常用的缓存技术" class="headerlink" title="缓存浅析 一  常用的缓存技术"></a>缓存浅析 一  常用的缓存技术</h2><h3 id="1、常见的两种缓存"><a href="#1、常见的两种缓存" class="headerlink" title="1、常见的两种缓存"></a>1、常见的两种缓存</h3><ul>
<li><code>本地缓存</code>：不需要序列化，速度快，缓存的数量与大小受限于本机内存</li>
<li><p><code>分布式缓存</code>：需要序列化，速度相较于本地缓存较慢，但是理论上缓存的数量与大小无限（因为缓存机器可以不断扩展）</p>
<a id="more"></a>
<h3 id="2、本地缓存"><a href="#2、本地缓存" class="headerlink" title="2、本地缓存"></a>2、本地缓存</h3></li>
<li><p><code>Google guava cache</code>：当下最好用的本地缓存</p>
</li>
<li><code>Ehcache</code>：<code>spring</code>默认集成的一个缓存，以spring cache的底层缓存实现类形式去操作缓存的话，非常方便，但是欠缺灵活，如果想要灵活使用，还是要单独使用<code>Ehcache</code></li>
<li><code>Oscache</code>：最经典简单的页面缓存</li>
</ul>
<h3 id="3、分布式缓存"><a href="#3、分布式缓存" class="headerlink" title="3、分布式缓存"></a>3、分布式缓存</h3><ol>
<li><code>memcached</code>：分布式缓存的标配</li>
<li><code>Redis</code>：新一代的分布式缓存，有替代memcached的趋势</li>
</ol>
<h4 id="3-1、memcached"><a href="#3-1、memcached" class="headerlink" title="3.1、memcached"></a>3.1、memcached</h4><ul>
<li><code>经典的一致性hash算法</code></li>
<li><code>基于slab的内存模型有效防止内存碎片的产生</code>（但同时也需要估计好启动参数，否则会浪费很多的内存）</li>
<li><code>集群中机器之间互不通信</code>（相较于Jboss cache等集群中机器之间的相互通信的缓存，速度更快&lt;–因为少了同步更新缓存的开销，且更适合于大型分布式系统中使用）</li>
<li><code>使用方便</code>（这一点是相较于Redis在构建客户端的时候而言的，尽管redis的使用也不困难）</li>
<li><code>很专一</code>（专做缓存，这一点也是相较于Redis而言的）</li>
</ul>
<h4 id="3-2、Redis"><a href="#3-2、Redis" class="headerlink" title="3.2、Redis"></a>3.2、Redis</h4><blockquote>
<p><code>可以存储复杂的数据结构（5种）</code><br>strings–&gt;即简单的key-value，就是memcached可以存储的唯一的一种形式，接下来的四种是memcached不能直接存储的四种格式（当然理论上可以先将下面的一些数据结构中的东西封装成对象，然后存入memcached，但是不推荐将大对象存入memcached，因memcached的单一value的最大存储为1M，可能即使采用了压缩算法也不够，即使够，可能存取的效率也不高，而redis的value最大为1G）<br>hashs–&gt;看做hashTable<br>lists–&gt;看做LinkedList<br>sets–&gt;看做hashSet，事实上底层是一个hashTable<br>sorted sets–&gt;底层是一个skipList<br><code>有两种方式可以对缓存数据进行持久化</code><br>RDB<br>AOF<br><code>事件调度</code><br><code>发布订阅等</code></p>
</blockquote>
<h4 id="4、集成缓存"><a href="#4、集成缓存" class="headerlink" title="4、集成缓存"></a>4、集成缓存</h4><p>专指spring cache，spring cache自己继承了ehcache作为了缓存的实现类，我们也可以使用guava cache、memcached、redis<br>自己来实现spring cache的底层。当然，spring cache可以根据实现类来将缓存存在本地还是存在远程机器上。</p>
<h4 id="5、页面缓存"><a href="#5、页面缓存" class="headerlink" title="5、页面缓存"></a>5、页面缓存</h4><p>在使用jsp的时候，我们会将一些复杂的页面使用O scache进行页面缓存，使用非常简单，就是几个标签的事儿；但是，现在一般的企业，<br>前台都会使用velocity、freemaker这两种模板引擎，本身速度就已经很快了，页面缓存使用的也就很少了。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>在实际生产中，我们通常会使用guava cache做本地缓存+redis做分布式缓存+spring cache就集成缓存（底层使用redis来实现）的形式<br>guava cache使用在更快的获取缓存数据，同时缓存的数据量并不大的情况<br>spring cache集成缓存是为了简单便捷的去使用缓存（以注解的方式即可），使用redis做其实现类是为了可以存更多的数据在机器上<br>redis缓存单独使用是为了弥补spring cache集成缓存的不灵活<br>就我个人而言，如果需要使用分布式缓存，那么首先redis是必选的，因为在实际开发中，我们会缓存各种各样的数据类型，在使用了redis的同时，memcached就完全可以舍弃了，但是现在还有很多公司在同时使用memcached和redis两种缓存。<br>接下来的介绍中，会介绍在分布式情况下guava cache、memcached、redis、spring cache的使用与原理。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存浅析-一-常用的缓存技术&quot;&gt;&lt;a href=&quot;#缓存浅析-一-常用的缓存技术&quot; class=&quot;headerlink&quot; title=&quot;缓存浅析 一  常用的缓存技术&quot;&gt;&lt;/a&gt;缓存浅析 一  常用的缓存技术&lt;/h2&gt;&lt;h3 id=&quot;1、常见的两种缓存&quot;&gt;&lt;a href=&quot;#1、常见的两种缓存&quot; class=&quot;headerlink&quot; title=&quot;1、常见的两种缓存&quot;&gt;&lt;/a&gt;1、常见的两种缓存&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;本地缓存&lt;/code&gt;：不需要序列化，速度快，缓存的数量与大小受限于本机内存&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;分布式缓存&lt;/code&gt;：需要序列化，速度相较于本地缓存较慢，但是理论上缓存的数量与大小无限（因为缓存机器可以不断扩展）&lt;/p&gt;
    
    </summary>
    
      <category term="缓存" scheme="https://muyinchen.github.io/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="缓存 redis" scheme="https://muyinchen.github.io/tags/%E7%BC%93%E5%AD%98-redis/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0  门户首页左侧商品类目显示 十四</title>
    <link href="https://muyinchen.github.io/2016/11/17/Migo%E5%95%86%E5%9F%8E2.0%20%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%B7%A6%E4%BE%A7%E5%95%86%E5%93%81%E7%B1%BB%E7%9B%AE%E6%98%BE%E7%A4%BA%20%E5%8D%81%E5%9B%9B/"/>
    <id>https://muyinchen.github.io/2016/11/17/Migo商城2.0  门户首页左侧商品类目显示 十四/</id>
    <published>2016-11-17T15:50:14.316Z</published>
    <updated>2016-11-18T11:01:41.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-门户首页左侧商品类目显示-十四"><a href="#Migo商城2-0-门户首页左侧商品类目显示-十四" class="headerlink" title="Migo商城2.0  门户首页左侧商品类目显示 十四"></a>Migo商城2.0  门户首页左侧商品类目显示 十四</h2><p>新建后台提供系统服务，这里就不再新建专门提供服务的项目了(也是因为访问的网址里有rest这个字眼了)</p>
<p>先看下jd的商品类目返回的数据格式：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/jdsplmfx.png" alt=""></p>
<a id="more"></a>
<p>因为扒的页面是jd之前的，没有添加这么多，缺少了1 3 4部分，其实也就添加了几个键值对，不影响数据结构的设计</p>
<h4 id="本项目要实现的数据结构-部分数据-："><a href="#本项目要实现的数据结构-部分数据-：" class="headerlink" title="本项目要实现的数据结构(部分数据)："></a>本项目要实现的数据结构(部分数据)：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"u"</span>: <span class="string">"/products/1.html"</span>,</div><div class="line">            <span class="attr">"n"</span>: <span class="string">"&lt;a href='/products/1.html'&gt;图书、音像、电子书刊&lt;/a&gt;"</span>,</div><div class="line">            <span class="attr">"i"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"u"</span>: <span class="string">"/products/2.html"</span>,</div><div class="line">                    <span class="attr">"n"</span>: <span class="string">"电子书刊"</span>,</div><div class="line">                    <span class="attr">"i"</span>: [</div><div class="line">                        <span class="string">"/products/3.html|电子书"</span>,</div><div class="line">                        <span class="string">"/products/4.html|网络原创"</span>,</div><div class="line">                        <span class="string">"/products/5.html|数字杂志"</span>,</div><div class="line">                        <span class="string">"/products/6.html|多媒体图书"</span></div><div class="line">                    ]</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"u"</span>: <span class="string">"/products/7.html"</span>,</div><div class="line">                    <span class="attr">"n"</span>: <span class="string">"音像"</span>,</div><div class="line">                    <span class="attr">"i"</span>: [</div><div class="line">                        <span class="string">"/products/8.html|音乐"</span>,</div><div class="line">                        <span class="string">"/products/9.html|影视"</span>,</div><div class="line">                        <span class="string">"/products/10.html|教育音像"</span></div><div class="line">                    ]</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"u"</span>: <span class="string">"/products/11.html"</span>,</div><div class="line">                    <span class="attr">"n"</span>: <span class="string">"英文原版"</span>,</div><div class="line">                    <span class="attr">"i"</span>: [</div><div class="line">                        <span class="string">"/products/12.html|少儿"</span>,</div><div class="line">                        <span class="string">"/products/13.html|商务投资"</span>,</div><div class="line">                        <span class="string">"/products/14.html|英语学习与考试"</span>,</div><div class="line">                        <span class="string">"/products/15.html|小说"</span>,</div><div class="line">                        <span class="string">"/products/16.html|传记"</span>,</div><div class="line">                        <span class="string">"/products/17.html|励志"</span></div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">              &#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/lmfx.png" alt=""></p>
<p>因为没有设计专门的<code>rest</code>服务工程，这里将结构pojo放在<code>common</code>工程中以供通用，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatNode</span> </span>&#123;</div><div class="line">  <span class="comment">// 序列化成json数据时为 u ,不明白请谷歌</span></div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"u"</span>)</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"n"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"i"</span>)</div><div class="line">    <span class="keyword">private</span> List items;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getItems</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List items)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.items = items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCatResult</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为更好的符合类的名字的含义，和更好的理解性，对<code>ItemCatResult</code> 稍做改造</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCatResult</span> </span>&#123;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"data"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;CatNode&gt; catNodes=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;CatNode&gt; <span class="title">getCatNodes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> catNodes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCatNodes</span><span class="params">(List&lt;CatNode&gt; catNodes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.catNodes = catNodes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前台访问的<code>URL</code> :  <code>URL_Serv: &quot;http://tomcat.migo.com/rest/webs/item/cat?callback=category.getDataService&quot;</code>   <code>lib-v1.js 1173行</code></p>
<h3 id="后台代码："><a href="#后台代码：" class="headerlink" title="后台代码："></a>后台代码：</h3><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>从<code>tb_item_cat</code>表中取数据，单表查询，可以使用<code>通用mapper</code></p>
<p>返回结果：<code>ItemCatResult</code></p>
<p>参数：没有</p>
<p>业务逻辑：根据<code>parentid</code>查询子节点列表，并递归调用</p>
<p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 查询，并生成jd页面类似的树状结构</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ItemCatResult <span class="title">getItemCatList</span><span class="params">()</span></span>&#123;</div><div class="line">        ItemCatResult itemCatResult=<span class="keyword">new</span> ItemCatResult();</div><div class="line"></div><div class="line">        <span class="comment">//调用递归方法查询商品分类列表</span></div><div class="line">        List catList=getItemCatList(<span class="number">0L</span>);</div><div class="line">        <span class="comment">//返回结果</span></div><div class="line">        itemCatResult.setCatNodes(catList);</div><div class="line">        <span class="keyword">return</span> itemCatResult;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List <span class="title">getItemCatList</span><span class="params">(<span class="keyword">long</span> parentId)</span> </span>&#123;</div><div class="line">        <span class="comment">//根据parentId查询列表</span></div><div class="line"></div><div class="line"></div><div class="line">        ItemCat example=<span class="keyword">new</span> ItemCat();</div><div class="line">        example.setParentId(parentId);</div><div class="line">        List&lt;ItemCat&gt; catList = <span class="keyword">super</span>.queryListByWhere(example);</div><div class="line">        List resultList=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (ItemCat itemCat : catList) &#123;</div><div class="line">            <span class="comment">//如果是父节点</span></div><div class="line">            <span class="keyword">if</span> (itemCat.getIsParent()) &#123;</div><div class="line">                CatNode node=<span class="keyword">new</span> CatNode();</div><div class="line">                node.setUrl(<span class="string">"/products/"</span>+itemCat.getId()+<span class="string">".html"</span>);</div><div class="line">                <span class="comment">//如果当前节点为第一级节点</span></div><div class="line">                <span class="keyword">if</span> (itemCat.getParentId()==<span class="number">0</span>) &#123;</div><div class="line">                    node.setName(<span class="string">"&lt;a href='/products/"</span>+itemCat.getId()+<span class="string">".html'&gt;"</span>+itemCat.getName()+<span class="string">"&lt;/a&gt;"</span>);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    node.setName(itemCat.getName());</div><div class="line">                &#125;</div><div class="line">                node.setItems(getItemCatList(itemCat.getId()));</div><div class="line">                <span class="comment">//将node添加到列表</span></div><div class="line">                resultList.add(node);</div><div class="line">                count++;</div><div class="line">                <span class="comment">//第一层只取14条记录</span></div><div class="line">                <span class="keyword">if</span> (parentId==<span class="number">0</span>&amp;&amp;count&gt;=<span class="number">14</span>)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//如果是最底层叶子节点</span></div><div class="line">                String item = <span class="string">"/products/"</span>+itemCat.getId()+<span class="string">".html|"</span> + itemCat.getName();</div><div class="line">                resultList.add(item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> resultList;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a><code>controller</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller.webs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemCatResult;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemCatService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"webs/item/cat"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsItemCatController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(WebsItemCatController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemCatService itemCatService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemCatResult&gt; <span class="title">getItemCatList</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info(<span class="string">"查询商品类目数据服务"</span>);</div><div class="line">            &#125;</div><div class="line">            ItemCatResult itemCatList = <span class="keyword">this</span>.itemCatService.getItemCatList();</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemCatList);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"查询商品类目数据服务 失败"</span>, e);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sxwb.png" alt=""></p>
<p>因为前端门户系统访问后台服务系统相当于跨域请求，这里，得使用<code>jsonp</code>，不了解的可以谷歌一下，回头有时间我会安利一下这个东西的原理，其实很简单，无非就是访问个js片段，具体看下面三点</p>
<blockquote>
<p>1、  jsonp通过script标签的src可以跨域请求的特性，加载资源</p>
<p>2、  将加载的资源（通过一个方法名将数据进行包裹）当做是js脚本解析</p>
<p>3、  定义一个回调函数，获取传入的数据</p>
</blockquote>
<p>添加<code>callback</code>参数</p>
<p>修改<code>controller</code>代码</p>
<p><code>MappingJacksonValue</code>要求<code>springmvc</code>必须是<code>4.1</code>以上版本。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.migo.controller.webs;</div><div class="line"></div><div class="line">import com.migo.pojo.ItemCatResult;</div><div class="line">import com.migo.service.ItemCatService;</div><div class="line">import com.migo.utils.JsonUtils;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.http.HttpStatus;</div><div class="line">import org.springframework.http.ResponseEntity;</div><div class="line">import org.springframework.http.converter.json.MappingJacksonValue;</div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.util.StringUtils;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/17.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">@RequestMapping("webs/item/cat")</div><div class="line">public class WebsItemCatController &#123;</div><div class="line">    private static final Logger logger= LoggerFactory.getLogger(WebsItemCatController.class);</div><div class="line">    @Autowired</div><div class="line">    private ItemCatService itemCatService;</div><div class="line"></div><div class="line">    @RequestMapping(method = RequestMethod.GET)</div><div class="line">    public ResponseEntity&lt;Object&gt; getItemCatList(String callback)&#123;</div><div class="line">        try &#123;</div><div class="line">            if (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info("查询商品类目数据服务");</div><div class="line">            &#125;</div><div class="line">            ItemCatResult itemCatList = this.itemCatService.getItemCatList();</div><div class="line">            if (StringUtils.isEmpty(callback)) &#123;</div><div class="line">                String json = JsonUtils.objectToJson(itemCatList);</div><div class="line"></div><div class="line">                return ResponseEntity.ok((Object) json);</div><div class="line">            &#125;</div><div class="line">            //如果字符串不为空，需要支持jsonp调用</div><div class="line">            MappingJacksonValue mappingJacksonValue=new MappingJacksonValue(itemCatList);</div><div class="line">            mappingJacksonValue.setJsonpFunction(callback);</div><div class="line">            return ResponseEntity.ok((Object) mappingJacksonValue);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">           logger.error("查询商品类目数据服务 失败", e);</div><div class="line">            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/cgsx.png" alt=""></p>
<h3 id="进一步改造jsonp的支持"><a href="#进一步改造jsonp的支持" class="headerlink" title="进一步改造jsonp的支持"></a>进一步改造<code>jsonp</code>的支持</h3><p>这是之前写的一个关于消息转换器的Demo，拿出一个类来足以说明了，看代码注释即可(可以处理输入和输出)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhiqiu.messageconverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.zhiqiu.domain.DemoObj;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.AbstractHttpMessageConverter;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotReadableException;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">DemoObj</span>&gt;</span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 表明只处理DemoObj这个类</div><div class="line">     * Class类的isAssignableFrom(Class cls)方法，</div><div class="line">     * 如果调用这个方法的class或接口 与 参数cls表示的类或接口相同，</div><div class="line">     * 或者是参数cls表示的类或接口的父类，则返回true。</div><div class="line">     * 形象地：自身类.class.isAssignableFrom(自身类或子类.class) 返回true</div><div class="line">     * <span class="doctag">@param</span> clazz</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DemoObj.class.isAssignableFrom(clazz) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     *处理请求数据</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> DemoObj <span class="title">readInternal</span><span class="params">(Class&lt;? extends DemoObj&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</div><div class="line">        String temp= StreamUtils.copyToString(inputMessage.getBody(),</div><div class="line">                Charset.forName(<span class="string">"utf-8"</span>));</div><div class="line">        String[] tempArr=temp.split(<span class="string">"-"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoObj(<span class="keyword">new</span> Long(tempArr[<span class="number">0</span>]),tempArr[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * <span class="doctag">@author</span> kauw 2016/10/1</div><div class="line">    * <span class="doctag">@time</span> 23:45</div><div class="line">    * 处理如何输出数据到response</div><div class="line">    */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(DemoObj obj, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</div><div class="line"></div><div class="line">        String out=<span class="string">"hello:"</span>+obj.getId()+<span class="string">"-"</span>+obj.getName();</div><div class="line">        outputMessage.getBody().write(out.getBytes());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为<code>StringHttpMessageConverter</code>默认字符集为<code>ISO-8859-1</code> 如下部分源码码所示，修改<code>springmvc</code>配置文件的 <code>mvc:annotation-driven</code>，在自定义的转换器里去做就可以了，这里重写上面的 <code>writeInternal</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"ISO-8859-1"</span>);</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Charset defaultCharset;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> List&lt;Charset&gt; availableCharsets;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> writeAcceptCharset = <span class="keyword">true</span>;</div></pre></td></tr></table></figure>
<h4 id="在common工程中添加自定义消息转换器"><a href="#在common工程中添加自定义消息转换器" class="headerlink" title="在common工程中添加自定义消息转换器"></a>在<code>common</code>工程中添加自定义消息转换器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.messageconverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonEncoding;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</div><div class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackMappingJackson2HttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">MappingJackson2HttpMessageConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 做jsonp的支持的标识，在请求参数中加该参数</span></div><div class="line">    <span class="keyword">private</span> String callbackName;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Object object, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException,</span></div><div class="line">            HttpMessageNotWritableException &#123;</div><div class="line">        <span class="comment">// 从threadLocal中获取当前的Request对象</span></div><div class="line">        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder</div><div class="line">                .currentRequestAttributes()).getRequest();</div><div class="line">        String callbackParam = request.getParameter(callbackName);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(callbackParam)) &#123;</div><div class="line">            <span class="comment">// 没有找到callback参数，直接返回json数据</span></div><div class="line">            <span class="keyword">super</span>.writeInternal(object, outputMessage);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            JsonEncoding encoding = getJsonEncoding(outputMessage.getHeaders().getContentType());</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String result = callbackParam + <span class="string">"("</span> + <span class="keyword">super</span>.getObjectMapper().writeValueAsString(object)</div><div class="line">                        + <span class="string">");"</span>;</div><div class="line">                IOUtils.write(result, outputMessage.getBody(), encoding.getJavaName());</div><div class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotWritableException(<span class="string">"Could not write JSON: "</span> + ex.getMessage(), ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCallbackName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> callbackName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallbackName</span><span class="params">(String callbackName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.callbackName = callbackName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在manage工程中配置springmvc-xml"><a href="#在manage工程中配置springmvc-xml" class="headerlink" title="在manage工程中配置springmvc.xml"></a>在<code>manage</code>工程中配置<code>springmvc.xml</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo.controller"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:properties/*.properties"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.messageconverter.CallbackMappingJackson2HttpMessageConverter"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"callbackName"</span> <span class="attr">value</span>=<span class="string">"callback"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置多媒体解析器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 设定默认编码 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 设定文件上传的最大值5MB，5*1024*1024 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="controller修改如下"><a href="#controller修改如下" class="headerlink" title="controller修改如下"></a><code>controller</code>修改如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller.webs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemCatResult;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemCatService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"webs/item/cat"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsItemCatController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(WebsItemCatController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemCatService itemCatService;</div><div class="line"></div><div class="line">   <span class="comment">/* @RequestMapping(method = RequestMethod.GET)</span></div><div class="line">    public ResponseEntity&lt;Object&gt; getItemCatList(String callback)&#123;</div><div class="line">        try &#123;</div><div class="line">            if (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info("查询商品类目数据服务");</div><div class="line">            &#125;</div><div class="line">            ItemCatResult itemCatList = this.itemCatService.getItemCatList();</div><div class="line">            if (StringUtils.isEmpty(callback)) &#123;</div><div class="line">                String json = JsonUtils.objectToJson(itemCatList);</div><div class="line"></div><div class="line">                return ResponseEntity.ok((Object) json);</div><div class="line">            &#125;</div><div class="line">            //如果字符串不为空，需要支持jsonp调用</div><div class="line">            MappingJacksonValue mappingJacksonValue=new MappingJacksonValue(itemCatList);</div><div class="line">            mappingJacksonValue.setJsonpFunction(callback);</div><div class="line">            return ResponseEntity.ok((Object) mappingJacksonValue);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">           logger.error("查询商品类目数据服务 失败", e);</div><div class="line">            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;*/</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemCatResult&gt; <span class="title">getItemCatList</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info(<span class="string">"查询商品类目数据服务"</span>);</div><div class="line">            &#125;</div><div class="line">            ItemCatResult itemCatList = <span class="keyword">this</span>.itemCatService.getItemCatList();</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemCatList);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"查询商品类目数据服务 失败"</span>, e);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="重启项目进行测试：结果如下图："><a href="#重启项目进行测试：结果如下图：" class="headerlink" title="重启项目进行测试：结果如下图："></a>重启项目进行测试：结果如下图：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/ecdd.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-门户首页左侧商品类目显示-十四&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页左侧商品类目显示-十四&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  门户首页左侧商品类目显示 十四&quot;&gt;&lt;/a&gt;Migo商城2.0  门户首页左侧商品类目显示 十四&lt;/h2&gt;&lt;p&gt;新建后台提供系统服务，这里就不再新建专门提供服务的项目了(也是因为访问的网址里有rest这个字眼了)&lt;/p&gt;
&lt;p&gt;先看下jd的商品类目返回的数据格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/jdsplmfx.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0  搭建前台系统 十三</title>
    <link href="https://muyinchen.github.io/2016/11/16/Migo%E5%95%86%E5%9F%8E2.0%20%E6%90%AD%E5%BB%BA%E5%89%8D%E5%8F%B0%E7%B3%BB%E7%BB%9F%20%E5%8D%81%E4%B8%89/"/>
    <id>https://muyinchen.github.io/2016/11/16/Migo商城2.0 搭建前台系统 十三/</id>
    <published>2016-11-16T13:57:05.562Z</published>
    <updated>2016-11-16T13:58:23.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-搭建前台系统-十三"><a href="#Migo商城2-0-搭建前台系统-十三" class="headerlink" title="Migo商城2.0 搭建前台系统 十三"></a>Migo商城2.0 搭建前台系统 十三</h2><p>先来张本系统的系统架构：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/abc.bmp" alt=""></p>
<p>搭建商城门户系统，也就是前台系统</p>
<p>所使用的技术</p>
<a id="more"></a>
<p>后台技术： <code>Spring</code> <code>SpringMVC</code></p>
<p>前台技术：<code>html</code>、<code>CSS</code>、<code>JS</code></p>
<blockquote>
<p>如果不使用Mybatis，商品的数据从何而来？ – 来源于<code>Mysql</code>数据库</p>
<p>获取数据的途径：</p>
<p>1、  从JDBC获取</p>
<p>a)        优点</p>
<pre><code>i.             直接，获取的途径较短，简单
</code></pre><p>b)        缺点</p>
<pre><code>   i.             对后台系统团队而言，数据不安全（只要开放的账户是只读的账户即可）

 ii.             前端系统团队需要有学习的成本，才能使用数据库

iii.             依赖、耦合度太高，后端团队将数据库结构修改，那么其他团队必须跟着修改逻辑，才能使用

iv.             直接走数据库查询，无法添加缓存逻辑
</code></pre><p>2、  通过后台系统接口获取</p>
<p>a)        优点</p>
<pre><code>   i.             耦合度降低，后端团队只要保证接口的返回数据格式不变化，其他团队就无需升级

 ii.             数据安全

iii.             前端团队无需了解学习后端团队的底层数据库结构

iv.             后端团队可以在接口处添加缓存逻辑
</code></pre><p>b)        缺点</p>
<p>获取的路径较长（不是真正的缺点）</p>
</blockquote>
<h3 id="创建migo-portal"><a href="#创建migo-portal" class="headerlink" title="创建migo-portal"></a>创建migo-portal</h3><p>就是个maven工程，过程就不多说了</p>
<p>导入依赖，<code>pom.xml</code>内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.migo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>migo-portal<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.migo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Jackson Json处理工具包 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- JSP相关 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Apache工具组件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8082<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="工程结构如下："><a href="#工程结构如下：" class="headerlink" title="工程结构如下："></a>工程结构如下：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/qianduanxt.png" alt=""></p>
<h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a><code>applicationContext.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 加载配置文件--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:evn/*.properties"</span>/&gt;</span></div><div class="line"></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 扫描包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a><code>springmvc.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></div><div class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 注解驱动 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- Controller的扫描包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo.portal.controller"</span>/&gt;</span></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a><code>web.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></div><div class="line">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>migo-portal<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--Spring的ApplicationContext 载入 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 编码过滤器，以UTF8编码 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置SpringMVC框架入口 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>migo-portal<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>migo-portal<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">                       伪静态有利于SEO（搜索引擎优化）</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="最后，导入静态页面，见源码"><a href="#最后，导入静态页面，见源码" class="headerlink" title="最后，导入静态页面，见源码"></a>最后，导入静态页面，见源码</h5><h4 id="写一个controller展示首页"><a href="#写一个controller展示首页" class="headerlink" title="写一个controller展示首页"></a>写一个<code>controller</code>展示首页</h4><p><code>IndexController</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/16.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首页</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"index"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置<code>nginx</code></h5><p><img src="http://og0sybnix.bkt.clouddn.com/nginxpz1.png" alt=""></p>
<h5 id="配置本地host"><a href="#配置本地host" class="headerlink" title="配置本地host"></a>配置本地host</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">192.168</span>.42.128 www.migo.com</div></pre></td></tr></table></figure>
<p>测试：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/syzs.png" alt=""></p>
<p>搭建完毕，本篇到此为止</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-搭建前台系统-十三&quot;&gt;&lt;a href=&quot;#Migo商城2-0-搭建前台系统-十三&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 搭建前台系统 十三&quot;&gt;&lt;/a&gt;Migo商城2.0 搭建前台系统 十三&lt;/h2&gt;&lt;p&gt;先来张本系统的系统架构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/abc.bmp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;搭建商城门户系统，也就是前台系统&lt;/p&gt;
&lt;p&gt;所使用的技术&lt;/p&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 新增商品添加规格参数的实现  十二</title>
    <link href="https://muyinchen.github.io/2016/11/15/Migo%E5%95%86%E5%9F%8E2.0%20%20%E6%96%B0%E5%A2%9E%E5%95%86%E5%93%81%E6%B7%BB%E5%8A%A0%E8%A7%84%E6%A0%BC%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%20%20%E5%8D%81%E4%BA%8C/"/>
    <id>https://muyinchen.github.io/2016/11/15/Migo商城2.0  新增商品添加规格参数的实现  十二/</id>
    <published>2016-11-15T15:00:15.122Z</published>
    <updated>2016-11-15T15:01:28.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-新增商品添加规格参数的实现-十二"><a href="#Migo商城2-0-新增商品添加规格参数的实现-十二" class="headerlink" title="Migo商城2.0  新增商品添加规格参数的实现  十二"></a>Migo商城2.0  新增商品添加规格参数的实现  十二</h2><h3 id="页面展示规格参数模板"><a href="#页面展示规格参数模板" class="headerlink" title="页面展示规格参数模板"></a>页面展示规格参数模板</h3><p>在商品添加或者商品修改时，根据商品的分类id查询此商品分类对应的规格参数模板。根据规格参数模板，生成一个表单供用户使用</p>
<a id="more"></a>
<p><img src="http://og0sybnix.bkt.clouddn.com/xzspmb.png" alt=""></p>
<h4 id="迭代相应js代码"><a href="#迭代相应js代码" class="headerlink" title="迭代相应js代码"></a>迭代相应js代码</h4><p>为实现restful风格 修改为ajax格式的，同时和其他功能公用同一个方法，改造访问<code>URL</code> <code>url: &quot;/rest/item/param/&quot; + node.id</code>：</p>
<p>和上面对比应该发现，restful风格代码更加直观，逻辑处理更加清晰可见！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">changeItemParam : <span class="function"><span class="keyword">function</span>(<span class="params">node,formId</span>)</span>&#123;</div><div class="line">    	$.ajax(&#123;</div><div class="line">			   <span class="attr">type</span>: <span class="string">"GET"</span>,</div><div class="line">			   <span class="attr">url</span>: <span class="string">"/rest/item/param/"</span> + node.id,</div><div class="line">			   <span class="attr">statusCode</span> : &#123;</div><div class="line">				   <span class="number">200</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">					   $(<span class="string">"#"</span>+formId+<span class="string">" .params"</span>).show();</div><div class="line">						 <span class="keyword">var</span> paramData = <span class="built_in">JSON</span>.parse(data.paramData);</div><div class="line">						 <span class="keyword">var</span> html = <span class="string">"&lt;ul&gt;"</span>;</div><div class="line">						 <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> paramData)&#123;</div><div class="line">							 <span class="keyword">var</span> pd = paramData[i];</div><div class="line">							 html+=<span class="string">"&lt;li&gt;&lt;table&gt;"</span>;</div><div class="line">							 html+=<span class="string">"&lt;tr&gt;&lt;td colspan=\"2\" class=\"group\"&gt;"</span>+pd.group+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">							 </div><div class="line">							 <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> pd.params)&#123;</div><div class="line">								 <span class="keyword">var</span> ps = pd.params[j];</div><div class="line">								 html+=<span class="string">"&lt;tr&gt;&lt;td class=\"param\"&gt;&lt;span&gt;"</span>+ps+<span class="string">"&lt;/span&gt;: &lt;/td&gt;&lt;td&gt;&lt;input autocomplete=\"off\" type=\"text\"/&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">							 &#125;</div><div class="line">							 </div><div class="line">							 html+=<span class="string">"&lt;/li&gt;&lt;/table&gt;"</span>;</div><div class="line">						 &#125;</div><div class="line">						 html+= <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">						 $(<span class="string">"#"</span>+formId+<span class="string">" .params td"</span>).eq(<span class="number">1</span>).html(html);</div><div class="line">				   &#125;,</div><div class="line">				   <span class="number">404</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					   $(<span class="string">"#"</span>+formId+<span class="string">" .params"</span>).hide();</div><div class="line">					   $(<span class="string">"#"</span>+formId+<span class="string">" .params td"</span>).eq(<span class="number">1</span>).empty();</div><div class="line">				   &#125;,</div><div class="line">				   <span class="number">500</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					   alert(<span class="string">"error"</span>);</div><div class="line">				   &#125;</div><div class="line">			   &#125;</div><div class="line">			&#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h4><p><img src="http://og0sybnix.bkt.clouddn.com/spmbzs.png" alt=""></p>
<h4 id="通过js代码把用户提交的数据生成json数据格式"><a href="#通过js代码把用户提交的数据生成json数据格式" class="headerlink" title="通过js代码把用户提交的数据生成json数据格式"></a>通过js代码把用户提交的数据生成json数据格式</h4><p>上章有讲，可以对比下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输入的规格参数数据保存为json</span></div><div class="line">		<span class="keyword">var</span> paramJson = [];</div><div class="line">		$(<span class="string">"#itemAddForm .params li"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,e</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> trs = $(e).find(<span class="string">"tr"</span>);</div><div class="line">			<span class="keyword">var</span> group = trs.eq(<span class="number">0</span>).text();</div><div class="line">			<span class="keyword">var</span> ps = [];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;trs.length;i++)&#123;</div><div class="line">				<span class="keyword">var</span> tr = trs.eq(i);</div><div class="line">				ps.push(&#123;</div><div class="line">					<span class="string">"k"</span> : $.trim(tr.find(<span class="string">"td"</span>).eq(<span class="number">0</span>).find(<span class="string">"span"</span>).text()),</div><div class="line">					<span class="string">"v"</span> : $.trim(tr.find(<span class="string">"input"</span>).val())</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			paramJson.push(&#123;</div><div class="line">				<span class="string">"group"</span> : group,</div><div class="line">				<span class="string">"params"</span>: ps</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">		paramJson = <span class="built_in">JSON</span>.stringify(paramJson);</div><div class="line">		</div><div class="line">		$(<span class="string">"#itemAddForm [name=itemParams]"</span>).val(paramJson);</div></pre></td></tr></table></figure>
<h4 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h4><blockquote>
<p>只需要在Controller中添加一个参数，接收商品的规格参数即可。</p>
<p>Service中也需要添加一个参数，增加插入规格参数表的处理。</p>
</blockquote>
<h5 id="改造ItemService-saveItem中-方法-如下："><a href="#改造ItemService-saveItem中-方法-如下：" class="headerlink" title="改造ItemService  saveItem中 方法 如下："></a>改造<code>ItemService</code>  <code>saveItem</code>中 方法 如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//desc参考前端页面传过来的数据是序列化成字符串的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">saveItem</span><span class="params">(Item item,String desc,String itemParams)</span></span>&#123;</div><div class="line">        <span class="comment">// 1、生成商品id</span></div><div class="line">        <span class="keyword">long</span> itemId = IDUtils.genItemId();</div><div class="line">        <span class="comment">// 2、对TbItem对象补全属性。</span></div><div class="line">        item.setId(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//'商品状态，1-正常，2-下架，3-删除'</span></div><div class="line">        item.setStatus(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//保存商品数据</span></div><div class="line">        Integer save = <span class="keyword">super</span>.save(item);</div><div class="line"></div><div class="line">        ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">        itemDesc.setItemDesc(desc);</div><div class="line">        itemDesc.setItemId(item.getId());</div><div class="line"></div><div class="line">        <span class="comment">//保存商品描述数据</span></div><div class="line">        Integer save1 = <span class="keyword">this</span>.itemDescService.save(itemDesc);</div><div class="line"></div><div class="line">        <span class="comment">//保存商品规格参数数据</span></div><div class="line">        ItemParamItem itemParamItem=<span class="keyword">new</span> ItemParamItem();</div><div class="line">        itemParamItem.setItemId(item.getId());</div><div class="line">        itemParamItem.setParamData(itemParams);</div><div class="line">        Integer save2 = <span class="keyword">this</span>.itemParamItemService.save(itemParamItem);</div><div class="line">        <span class="keyword">return</span> save.intValue()==<span class="number">1</span>&amp;&amp;save1.intValue()==<span class="number">1</span>&amp;&amp;save2==<span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="改造controller"><a href="#改造controller" class="headerlink" title="改造controller"></a>改造<code>controller</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 新增商品</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">addItem</span><span class="params">(Item item, @RequestParam(<span class="string">"desc"</span>)</span> String desc,</span></div><div class="line">                                        @<span class="title">RequestParam</span><span class="params">(<span class="string">"itemParams"</span>)</span> String itemParams) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">            LOGGER.info(<span class="string">"新增商品，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * TODO 校验以后完善</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (item.getPrice() == <span class="keyword">null</span> || item.getPrice().intValue() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                LOGGER.info(<span class="string">"新增商品时用户输入的参数不合法，item = &#123;&#125;, desc = &#123;&#125;,itemParams"</span>, item, desc);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 参数有误，返回400</span></div><div class="line">            <span class="comment">//ResponseEntity&lt;Void&gt; build();</span></div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Boolean saveItem = <span class="keyword">this</span>.itemService.saveItem(item, desc,itemParams);</div><div class="line">            <span class="keyword">if</span> (saveItem) &#123;</div><div class="line">                <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                    LOGGER.info(<span class="string">"新增商品成功! id = &#123;&#125;"</span>, item.getId());</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//CREATED(201, "Created"),</span></div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"新增商品失败! item = "</span> + item + <span class="string">", desc = "</span> + desc, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>运行项目，添加商品</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/addsp1.png" alt=""></p>
<p>数据库存储数据格式：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"主体"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"品牌"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"OPPO"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"型号"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"R9s"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"颜色"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"黑色"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"上市年份"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"2016年"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"网络"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"4G网络制式"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"4G：移动（TD-LTE)；4G：联通(FDD-LTE)；4G：电信(FDD-LTE)"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"3G网络制式"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"3G：移动(TD-SCDMA)；3G：联通(WCDMA)；3G：电信(CDMA2000)；2G：移动（GSM）+联通(GSM)；2G：电信(CDMA)"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"2G网络制式"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"2G：GSM 850/900/1800/1900；2G：CDMA 800；3G：TD-SCDMA 1900/2000；3G：CDMA2000；3G：WCDMA：850/900/1700/1900/2100MHz"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"存储"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"机身内存"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"4GB"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"储存卡类型"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"支持MicroSD（TF）"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="编辑商品"><a href="#编辑商品" class="headerlink" title="编辑商品"></a>编辑商品</h3><h4 id="规格参数的回显"><a href="#规格参数的回显" class="headerlink" title="规格参数的回显"></a>规格参数的回显</h4><p>编辑商品时通过商品id查询规格参数数据</p>
<p>前台js代码(<code>item-list.jsp</code>)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载商品规格</span></div><div class="line">        			$.getJSON(<span class="string">'/rest/item/param/item/'</span>+data.id,<span class="function"><span class="keyword">function</span>(<span class="params">_data</span>)</span>&#123;</div><div class="line">        				<span class="keyword">if</span>(_data &amp;&amp; _data.status == <span class="number">200</span> &amp;&amp; _data.data &amp;&amp; _data.data.paramData)&#123;</div><div class="line">        					$(<span class="string">"#itemeEditForm .params"</span>).show();</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParams]"</span>).val(_data.data.paramData);</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParamId]"</span>).val(_data.data.id);</div><div class="line">        					</div><div class="line">        					<span class="comment">//回显商品规格</span></div><div class="line">        					 <span class="keyword">var</span> paramData = <span class="built_in">JSON</span>.parse(_data.data.paramData);</div><div class="line">        					</div><div class="line">        					 <span class="keyword">var</span> html = <span class="string">"&lt;ul&gt;"</span>;</div><div class="line">        					 <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> paramData)&#123;</div><div class="line">        						 <span class="keyword">var</span> pd = paramData[i];</div><div class="line">        						 html+=<span class="string">"&lt;li&gt;&lt;table&gt;"</span>;</div><div class="line">        						 html+=<span class="string">"&lt;tr&gt;&lt;td colspan=\"2\" class=\"group\"&gt;"</span>+pd.group+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 </div><div class="line">        						 <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> pd.params)&#123;</div><div class="line">        							 <span class="keyword">var</span> ps = pd.params[j];</div><div class="line">        							 html+=<span class="string">"&lt;tr&gt;&lt;td class=\"param\"&gt;&lt;span&gt;"</span>+ps.k+<span class="string">"&lt;/span&gt;: &lt;/td&gt;&lt;td&gt;&lt;input autocomplete=\"off\" type=\"text\" value='"</span>+ps.v+<span class="string">"'/&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 &#125;</div><div class="line">        						 </div><div class="line">        						 html+=<span class="string">"&lt;/li&gt;&lt;/table&gt;"</span>;</div><div class="line">        					 &#125;</div><div class="line">        					 html+= <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">        					 $(<span class="string">"#itemeEditForm .params td"</span>).eq(<span class="number">1</span>).html(html);</div><div class="line">        				&#125;</div><div class="line">        			&#125;);</div></pre></td></tr></table></figure>
<h5 id="后台实现："><a href="#后台实现：" class="headerlink" title="后台实现："></a>后台实现：</h5><p>访问<code>URL</code>: <code>/rest/item/param/item/{itemId}</code></p>
<p><code>controller</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemParamItem;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemParamItemService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item/param/item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParamItemController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(ItemParamItemController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemParamItemService itemParamItemService;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据商品Id查询商品规格参数数据</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemParamItem&gt; <span class="title">showItemParam</span><span class="params">(@PathVariable(<span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据商品Id查询商品规格参数数据 itemId = &#123;&#125;"</span>,itemId);</div><div class="line">            &#125;</div><div class="line">            ItemParamItem example=<span class="keyword">new</span> ItemParamItem();</div><div class="line">            example.setItemId(itemId);</div><div class="line">            ItemParamItem itemParamItem = <span class="keyword">this</span>.itemParamItemService.queryOne(example);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span>==itemParamItem)&#123;</div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemParamItem);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          logger.error(<span class="string">"根据商品Id查询商品规格参数数据 失败 itemId = &#123;&#125;"</span>,itemId,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行项目：发现无法回显商品描述，还有商品参数回显404 后台日志信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">2016-11-15 21:55:59,022 [http-bio-8080-exec-10] [com.migo.controller.ItemParamItemController]-[INFO] 根据商品Id查询商品规格参数数据 itemId = 147921564322726  //开始！！！！！！！！！！！</div><div class="line">2016-11-15 21:55:59,022 [http-bio-8080-exec-10] [org.springframework.jdbc.datasource.DataSourceTransactionManager]-[DEBUG] Creating new transaction with name [com.migo.service.ItemParamItemService.queryOne]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</div><div class="line">2016-11-15 21:55:59,026 [http-bio-8080-exec-10] [org.springframework.jdbc.datasource.DataSourceTransactionManager]-[DEBUG] Acquired Connection [com.mysql.jdbc.JDBC4Connection@5f46a96d] for JDBC transaction</div><div class="line">2016-11-15 21:55:59,026 [http-bio-8080-exec-10] [org.springframework.jdbc.datasource.DataSourceUtils]-[DEBUG] Setting JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f46a96d] read-only</div><div class="line">2016-11-15 21:55:59,026 [http-bio-8080-exec-10] [org.springframework.jdbc.datasource.DataSourceTransactionManager]-[DEBUG] Switching JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f46a96d] to manual commit</div><div class="line">2016-11-15 21:55:59,027 [http-bio-8080-exec-10] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Creating a new SqlSession</div><div class="line">2016-11-15 21:55:59,027 [http-bio-8080-exec-10] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3fd7b476]</div><div class="line">2016-11-15 21:55:59,027 [http-bio-8080-exec-10] [org.mybatis.spring.transaction.SpringManagedTransaction]-[DEBUG] JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f46a96d] will be managed by Spring</div><div class="line">2016-11-15 21:55:59,028 [http-bio-8080-exec-10] [com.migo.mapper.ItemParamItemMapper.selectOne]-[DEBUG] ==&gt;  Preparing: SELECT created,updated,id,item_id,param_data FROM tb_item_param_item WHERE item_id = ?   //发送sql语句！！！！！！</div><div class="line">2016-11-15 21:55:59,028 [http-bio-8080-exec-10] [com.migo.mapper.ItemParamItemMapper.selectOne]-[DEBUG] ==&gt; Parameters: 147921564322726(Long)  //传递参数 ！！！！！</div><div class="line">2016-11-15 21:55:59,028 [http-bio-8080-exec-10] [com.migo.mapper.ItemParamItemMapper.selectOne]-[DEBUG] &lt;==      Total: 0 //查询结果！！！！！！！</div></pre></td></tr></table></figure>
<p>查后台数据库，发现新增加商品id正常，但是desc 和商品规格参数所对应的商品id为0，遂修改新增商品service代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//desc参考前端页面传过来的数据是序列化成字符串的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">saveItem</span><span class="params">(Item item,String desc,String itemParams)</span></span>&#123;</div><div class="line">        <span class="comment">// 1、生成商品id</span></div><div class="line">        <span class="keyword">long</span> itemId = IDUtils.genItemId();</div><div class="line">        <span class="comment">// 2、对TbItem对象补全属性。</span></div><div class="line">        item.setId(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//'商品状态，1-正常，2-下架，3-删除'</span></div><div class="line">        item.setStatus(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//保存商品数据</span></div><div class="line">        Integer save = <span class="keyword">super</span>.save(item);</div><div class="line"></div><div class="line">        ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">        itemDesc.setItemDesc(desc);</div><div class="line">        itemDesc.setItemId(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//保存商品描述数据</span></div><div class="line">        Integer save1 = <span class="keyword">this</span>.itemDescService.save(itemDesc);</div><div class="line"></div><div class="line">        <span class="comment">//保存商品规格参数数据</span></div><div class="line">        ItemParamItem itemParamItem=<span class="keyword">new</span> ItemParamItem();</div><div class="line">        itemParamItem.setItemId(itemId);</div><div class="line">        itemParamItem.setParamData(itemParams);</div><div class="line">        Integer save2 = <span class="keyword">this</span>.itemParamItemService.save(itemParamItem);</div><div class="line">        <span class="keyword">return</span> save.intValue()==<span class="number">1</span>&amp;&amp;save1.intValue()==<span class="number">1</span>&amp;&amp;save2==<span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接着查询，返回数据显示正常，但是页面显示不正确：</p>
<p>查看前端js代码发现，为迭代完全，真坑，遂修改：</p>
<p>因为restful风格之后，完全可以直接拿到参数了，无须中间多那一层，以前是做了一层封装，请参考 <code>migo商城第一版</code> 源码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载商品规格</span></div><div class="line">        			$.getJSON(<span class="string">'/rest/item/param/item/'</span>+data.id,<span class="function"><span class="keyword">function</span>(<span class="params">_data</span>)</span>&#123;</div><div class="line">        				</div><div class="line">        					$(<span class="string">"#itemeEditForm .params"</span>).show();</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParams]"</span>).val(_data.paramData);</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParamId]"</span>).val(_data.id);</div><div class="line">        					</div><div class="line">        					<span class="comment">//回显商品规格</span></div><div class="line">        					 <span class="keyword">var</span> paramData = <span class="built_in">JSON</span>.parse(_data.paramData);</div><div class="line">        					</div><div class="line">        					 <span class="keyword">var</span> html = <span class="string">"&lt;ul&gt;"</span>;</div><div class="line">        					 <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> paramData)&#123;</div><div class="line">        						 <span class="keyword">var</span> pd = paramData[i];</div><div class="line">        						 html+=<span class="string">"&lt;li&gt;&lt;table&gt;"</span>;</div><div class="line">        						 html+=<span class="string">"&lt;tr&gt;&lt;td colspan=\"2\" class=\"group\"&gt;"</span>+pd.group+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 </div><div class="line">        						 <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> pd.params)&#123;</div><div class="line">        							 <span class="keyword">var</span> ps = pd.params[j];</div><div class="line">        							 html+=<span class="string">"&lt;tr&gt;&lt;td class=\"param\"&gt;&lt;span&gt;"</span>+ps.k+<span class="string">"&lt;/span&gt;: &lt;/td&gt;&lt;td&gt;&lt;input autocomplete=\"off\" type=\"text\" value='"</span>+ps.v+<span class="string">"'/&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 &#125;</div><div class="line">        						 </div><div class="line">        						 html+=<span class="string">"&lt;/li&gt;&lt;/table&gt;"</span>;</div><div class="line">        					 &#125;</div><div class="line">        					 html+= <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">        					 $(<span class="string">"#itemeEditForm .params td"</span>).eq(<span class="number">1</span>).html(html);</div><div class="line">        				</div><div class="line">        			&#125;);</div><div class="line">        			</div><div class="line">        			migo.init(&#123;</div><div class="line">        				<span class="string">"pics"</span> : data.image,</div><div class="line">        				<span class="string">"cid"</span> : data.cid,</div><div class="line">        				<span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">        					migo.changeItemParam(node, <span class="string">"itemeEditForm"</span>);</div><div class="line">        				&#125;</div><div class="line">        			&#125;);</div><div class="line">        		&#125;</div><div class="line">        	&#125;).window(<span class="string">"open"</span>);</div></pre></td></tr></table></figure>
<p>最终结果展示：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/hxzs.png" alt=""></p>
<h4 id="最后，更新规格参数数据"><a href="#最后，更新规格参数数据" class="headerlink" title="最后，更新规格参数数据"></a>最后，更新规格参数数据</h4><p>后台实现：</p>
<p>  <code>ItemParamItemService</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.mapper.ItemParamItemMapper;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemParamItem;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParamItemService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemParamItem</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemParamItemMapper itemParamItemMapper;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新商品规格参数数据</div><div class="line">     * <span class="doctag">@param</span> itemId</div><div class="line">     * <span class="doctag">@param</span> itemParams</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">updateItemParamItem</span><span class="params">(Long itemId, String itemParams)</span> </span>&#123;</div><div class="line">        ItemParamItem itemParamItem=<span class="keyword">new</span> ItemParamItem();</div><div class="line">        itemParamItem.setParamData(itemParams);</div><div class="line">        itemParamItem.setUpdated(<span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">        <span class="comment">//更新</span></div><div class="line">        Example example=<span class="keyword">new</span> Example(ItemParamItem.class);</div><div class="line">        example.createCriteria().andEqualTo(<span class="string">"itemId"</span>,itemId);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.itemParamItemMapper.updateByExampleSelective(itemParamItem,example);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ItemService</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 商品修改</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> Boolean <span class="title">updateItem</span><span class="params">(Item item,String desc,String itemParams)</span></span>&#123;</div><div class="line">       <span class="comment">//强制设置不能更新的字段为空,防止恶意修改</span></div><div class="line">       item.setStatus(<span class="keyword">null</span>);</div><div class="line">       item.setCreated(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">       Integer change1 = <span class="keyword">super</span>.updateSelective(item);</div><div class="line"></div><div class="line">       <span class="comment">//更新商品描述</span></div><div class="line">       ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">       itemDesc.setItemId(item.getId());</div><div class="line">       itemDesc.setItemDesc(desc);</div><div class="line">       Integer change2 = <span class="keyword">this</span>.itemDescService.updateSelective(itemDesc);</div><div class="line"></div><div class="line">       Integer change3 = <span class="keyword">this</span>.itemParamItemService.updateItemParamItem(item.getId(), itemParams);</div><div class="line"></div><div class="line">       <span class="keyword">return</span> change1.intValue()==<span class="number">1</span>&amp;&amp;change2.intValue()==<span class="number">1</span>&amp;&amp;change3.intValue()==<span class="number">1</span>;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>ItemController</code> 修改实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 更新商品数据</div><div class="line">    */</div><div class="line">   <span class="meta">@RequestMapping</span>(method = RequestMethod.PUT)</div><div class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateItem</span><span class="params">(Item item, @RequestParam(<span class="string">"desc"</span>)</span> String desc,</span></div><div class="line">                                          @<span class="title">RequestParam</span><span class="params">(<span class="string">"itemParams"</span>)</span> String itemParams)&#123;</div><div class="line">       <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">           LOGGER.info(<span class="string">"修改商品，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * TODO 校验以后完善</div><div class="line">        */</div><div class="line">       <span class="keyword">if</span> (item.getPrice() == <span class="keyword">null</span> || item.getPrice().intValue() == <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">               LOGGER.info(<span class="string">"修改商品时用户输入的参数不合法，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 参数有误，返回400</span></div><div class="line">           <span class="comment">//ResponseEntity&lt;Void&gt; build();</span></div><div class="line">           <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Boolean updateItem = <span class="keyword">this</span>.itemService.updateItem(item, desc,itemParams);</div><div class="line">           <span class="keyword">if</span> (updateItem) &#123;</div><div class="line">               <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                   LOGGER.info(<span class="string">"修改商品成功! id = &#123;&#125;"</span>, item.getId());</div><div class="line">               &#125;</div><div class="line">               <span class="comment">//CREATED(201, "Created"),</span></div><div class="line">               <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           LOGGER.error(<span class="string">"修改商品失败! item = "</span> + item + <span class="string">", desc = "</span> + desc, e);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>启动项目测试，后台日志分析：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/zzxgsp.png" alt=""></p>
<p>通过日志，能看到很多东西，可见添加日志代码的重要性和查看日志的重要性，很多bug都是通过日志发现解决的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-新增商品添加规格参数的实现-十二&quot;&gt;&lt;a href=&quot;#Migo商城2-0-新增商品添加规格参数的实现-十二&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  新增商品添加规格参数的实现  十二&quot;&gt;&lt;/a&gt;Migo商城2.0  新增商品添加规格参数的实现  十二&lt;/h2&gt;&lt;h3 id=&quot;页面展示规格参数模板&quot;&gt;&lt;a href=&quot;#页面展示规格参数模板&quot; class=&quot;headerlink&quot; title=&quot;页面展示规格参数模板&quot;&gt;&lt;/a&gt;页面展示规格参数模板&lt;/h3&gt;&lt;p&gt;在商品添加或者商品修改时，根据商品的分类id查询此商品分类对应的规格参数模板。根据规格参数模板，生成一个表单供用户使用&lt;/p&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 商品规格参数的实现(2)  十一</title>
    <link href="https://muyinchen.github.io/2016/11/15/Migo%E5%95%86%E5%9F%8E2.0%20%20%E5%95%86%E5%93%81%E8%A7%84%E6%A0%BC%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0(2)%20%20%E5%8D%81%E4%B8%80/"/>
    <id>https://muyinchen.github.io/2016/11/15/Migo商城2.0  商品规格参数的实现(2)  十一/</id>
    <published>2016-11-15T11:43:56.931Z</published>
    <updated>2016-11-15T11:50:51.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-商品规格参数的实现-2-十一"><a href="#Migo商城2-0-商品规格参数的实现-2-十一" class="headerlink" title="Migo商城2.0  商品规格参数的实现(2)  十一"></a>Migo商城2.0  商品规格参数的实现(2)  十一</h2><p>   接上篇</p>
<h4 id="初始化类目选择组件里的回调函数的执行："><a href="#初始化类目选择组件里的回调函数的执行：" class="headerlink" title="初始化类目选择组件里的回调函数的执行："></a>初始化类目选择组件里的回调函数的执行：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/mubanhuidiao.png" alt=""></p>
<a id="more"></a>
<h4 id="点击提交的js代码："><a href="#点击提交的js代码：" class="headerlink" title="点击提交的js代码："></a>点击提交的js代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#itemParamAddTable .submit"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//这里就是拼接出下面的数据格式的代码，然后stringfy序列化json字符串</span></div><div class="line">			<span class="keyword">var</span> params = [];</div><div class="line">			<span class="keyword">var</span> groups = $(<span class="string">"#itemParamAddTable [name=group]"</span>);</div><div class="line">			groups.each(<span class="function"><span class="keyword">function</span>(<span class="params">i,e</span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> p = $(e).parentsUntil(<span class="string">"ul"</span>).parent().find(<span class="string">"[name=param]"</span>);</div><div class="line">				<span class="keyword">var</span> _ps = [];</div><div class="line">				p.each(<span class="function"><span class="keyword">function</span>(<span class="params">_i,_e</span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> _val = $(_e).siblings(<span class="string">"input"</span>).val();</div><div class="line">					<span class="keyword">if</span>($.trim(_val).length&gt;<span class="number">0</span>)&#123;</div><div class="line">						_ps.push(_val);						</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">				<span class="keyword">var</span> _val = $(e).siblings(<span class="string">"input"</span>).val();</div><div class="line">				<span class="keyword">if</span>($.trim(_val).length&gt;<span class="number">0</span> &amp;&amp; _ps.length &gt; <span class="number">0</span>)&#123;</div><div class="line">					params.push(&#123;</div><div class="line">						<span class="string">"group"</span>:_val,</div><div class="line">						<span class="string">"params"</span>:_ps</div><div class="line">					&#125;);					</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="keyword">var</span> url = <span class="string">"/rest/item/param/"</span>+$(<span class="string">"#itemParamAddTable [name=cid]"</span>).val();</div><div class="line">         <span class="comment">//JSON.stringify将js的对象序列化为json字符串，之前有人见有人犯过这样的小错误</span></div><div class="line">			$.post(url,&#123;<span class="string">"paramData"</span>:<span class="built_in">JSON</span>.stringify(params)&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">				$.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增商品规格成功!'</span>,<span class="literal">undefined</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					$(<span class="string">".panel-tool-close"</span>).click();</div><div class="line">   					$(<span class="string">"#itemParamList"</span>).datagrid(<span class="string">"reload"</span>);</div><div class="line">   				&#125;);</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="提交的数据格式为："><a href="#提交的数据格式为：" class="headerlink" title="提交的数据格式为："></a>提交的数据格式为：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"主体"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            <span class="string">"品牌\t"</span>,</div><div class="line">            <span class="string">"类型"</span>,</div><div class="line">            <span class="string">"适用型号"</span></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"规格"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            <span class="string">"容量"</span>,</div><div class="line">            <span class="string">"速度级别"</span>,</div><div class="line">            <span class="string">"读写速度\t"</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="后台实现："><a href="#后台实现：" class="headerlink" title="后台实现："></a>后台实现：</h4><p>提交的URL：<code>/rest/item/param/{cid}</code></p>
<p>请求参数：<code>Long cid</code> <code>String paramData</code></p>
<p>代码实现：</p>
<h5 id="controller："><a href="#controller：" class="headerlink" title="controller："></a><code>controller</code>：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 新增规格参数模板</div><div class="line">    */</div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemCatId&#125;"</span>,method = RequestMethod.POST)</div><div class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">addItemParamByItemCatId</span><span class="params">(</span></span></div><div class="line">           @PathVariable(<span class="string">"itemCatId"</span>) Long itemCatId,@<span class="title">RequestParam</span><span class="params">(<span class="string">"paramData"</span>)</span> String paramData</div><div class="line">   )&#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">               logger.info(<span class="string">"新增某商品规格模板参数模板 itemCatId= &#123;&#125;，paramData = &#123;&#125;"</span>,itemCatId,paramData);</div><div class="line">           &#125;</div><div class="line">           ItemParam itemparam=<span class="keyword">new</span> ItemParam();</div><div class="line">           itemparam.setId(<span class="keyword">null</span>);   <span class="comment">//置空，防止恶意修改 `id` bigint(20) NOT NULL AUTO_INCREMENT</span></div><div class="line">           itemparam.setItemCatId(itemCatId);</div><div class="line">           itemparam.setParamData(paramData);</div><div class="line">           <span class="keyword">this</span>.itemParmService.save(itemparam);</div><div class="line">           <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"新增某商品规格模板参数模板 失败 itemCatId= &#123;&#125;，"</span>+itemCatId+<span class="string">"paramData = &#123;&#125;"</span>+paramData,e);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>打算添加个对讲机的，谁知道jd太水，没有这个规格参数</p>
<p>添加个遥控车的参数</p>
<h4 id="运行项目，测试结果如图："><a href="#运行项目，测试结果如图：" class="headerlink" title="运行项目，测试结果如图："></a>运行项目，测试结果如图：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/xinzengggcs.png" alt=""></p>
<h4 id="添加的数据在数据库里的格式："><a href="#添加的数据在数据库里的格式：" class="headerlink" title="添加的数据在数据库里的格式："></a>添加的数据在数据库里的格式：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"主体"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            <span class="string">"品牌"</span>,</div><div class="line">            <span class="string">"车型"</span>,</div><div class="line">            <span class="string">"包装\t"</span></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"电源"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            <span class="string">"充电\t"</span>,</div><div class="line">            <span class="string">"无线遥控"</span>,</div><div class="line">            <span class="string">"有线遥控\t"</span></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"尺寸"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            <span class="string">"产品净尺寸（长*宽*高"</span>,</div><div class="line">            <span class="string">"带包装尺寸（长*宽*高"</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="查询规格参数模板列表"><a href="#查询规格参数模板列表" class="headerlink" title="查询规格参数模板列表"></a>查询规格参数模板列表</h3><p>请求URL：<code>/rest/item/param/list</code></p>
<p>因返回的数据格式涉及到两张表 <code>tb_item_param</code> <code>tb_item_cat</code>  所以不能使用<code>通用mapper</code></p>
<h4 id="新建pojo-ItemParamexd"><a href="#新建pojo-ItemParamexd" class="headerlink" title="新建pojo ItemParamexd"></a>新建<code>pojo</code> <code>ItemParamexd</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/6.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParamexd</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long itemCatId;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Date created;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Date updated;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String paramData;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String itemCatName;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> created;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreated</span><span class="params">(Date created)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.created = created;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getItemCatId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itemCatId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemCatId</span><span class="params">(Long itemCatId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.itemCatId = itemCatId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemCatName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itemCatName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemCatName</span><span class="params">(String itemCatName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.itemCatName = itemCatName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParamData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> paramData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParamData</span><span class="params">(String paramData)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.paramData = paramData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdated</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> updated;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdated</span><span class="params">(Date updated)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.updated = updated;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新建mapper-ItemparamexdMapper"><a href="#新建mapper-ItemparamexdMapper" class="headerlink" title="新建mapper  ItemparamexdMapper"></a>新建<code>mapper</code>  <code>ItemparamexdMapper</code></h4><p> 这里就直接使用注解查询了(参照第一版的<code>xml</code>配置，可做对比)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemParamexd;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/6.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemparamexdMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">" select\n"</span> +</div><div class="line">            <span class="string">"         a.id id ,a.item_cat_id itemCatId,a.created created,a.updated updated,a.param_data paramData,b.`name` itemCatName\n"</span> +</div><div class="line">            <span class="string">"        FROM\n"</span> +</div><div class="line">            <span class="string">"        tb_item_param AS a LEFT JOIN  tb_item_cat  as b\n"</span> +</div><div class="line">            <span class="string">"        ON\n"</span> +</div><div class="line">            <span class="string">"        a.item_cat_id=b.id "</span>)</div><div class="line">    <span class="function">List&lt;ItemParamexd&gt; <span class="title">selectList</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="service功能实现："><a href="#service功能实现：" class="headerlink" title="service功能实现："></a>service功能实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</div><div class="line"><span class="keyword">import</span> com.migo.mapper.ItemparamexdMapper;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemParam;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line">*/</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParmService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemParam</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemparamexdMapper itemparamexdMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> EasyUIDataGridResult <span class="title">getItemParamList</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> rows)</span> </span>&#123;</div><div class="line">        <span class="comment">//分页处理</span></div><div class="line">        PageHelper.startPage(page, rows);</div><div class="line">        <span class="comment">//执行查询</span></div><div class="line"></div><div class="line">        List list = itemparamexdMapper.selectList();</div><div class="line">        <span class="comment">//取分页信息</span></div><div class="line">        PageInfo pageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</div><div class="line">        <span class="comment">//返回处理结果</span></div><div class="line">        EasyUIDataGridResult result = <span class="keyword">new</span> EasyUIDataGridResult();</div><div class="line">        result.setTotal(pageInfo.getTotal());</div><div class="line">        result.setRows(pageInfo.getList());</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller实现："><a href="#controller实现：" class="headerlink" title="controller实现："></a>controller实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 查询规格参数模板列表</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;EasyUIDataGridResult&gt; <span class="title">getItemparmList</span><span class="params">(Integer page,Integer rows)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info(<span class="string">"查询商品规格模板参数模板 page= &#123;&#125;，rows = &#123;&#125;"</span>,page,rows);</div><div class="line">            &#125;</div><div class="line">            EasyUIDataGridResult result=<span class="keyword">this</span>.itemParmService.getItemParamList(page,rows);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(result);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"查询商品规格参数模板列表出错：page="</span>+page+<span class="string">",rows="</span>+rows,e);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="启动项目，运行查看："><a href="#启动项目，运行查看：" class="headerlink" title="启动项目，运行查看："></a>启动项目，运行查看：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/ggcslb.png" alt=""></p>
<p>因删除比较简单，这里就不做了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-商品规格参数的实现-2-十一&quot;&gt;&lt;a href=&quot;#Migo商城2-0-商品规格参数的实现-2-十一&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  商品规格参数的实现(2)  十一&quot;&gt;&lt;/a&gt;Migo商城2.0  商品规格参数的实现(2)  十一&lt;/h2&gt;&lt;p&gt;   接上篇&lt;/p&gt;
&lt;h4 id=&quot;初始化类目选择组件里的回调函数的执行：&quot;&gt;&lt;a href=&quot;#初始化类目选择组件里的回调函数的执行：&quot; class=&quot;headerlink&quot; title=&quot;初始化类目选择组件里的回调函数的执行：&quot;&gt;&lt;/a&gt;初始化类目选择组件里的回调函数的执行：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/mubanhuidiao.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 商品规格参数的实现(1) 十</title>
    <link href="https://muyinchen.github.io/2016/11/14/Migo%E5%95%86%E5%9F%8E2.0%20%20%E5%95%86%E5%93%81%E8%A7%84%E6%A0%BC%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0(1)%20%E5%8D%81/"/>
    <id>https://muyinchen.github.io/2016/11/14/Migo商城2.0  商品规格参数的实现(1) 十/</id>
    <published>2016-11-14T15:30:46.983Z</published>
    <updated>2016-11-14T15:36:46.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-商品规格参数的实现-1-十"><a href="#Migo商城2-0-商品规格参数的实现-1-十" class="headerlink" title="Migo商城2.0  商品规格参数的实现(1) 十"></a>Migo商城2.0  商品规格参数的实现(1) 十</h2><p>先看看一张jd的商品规格的截图吧</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/guigecanshu.png" alt=""></p>
<p>分析：</p>
<a id="more"></a>
<p>规格参数：</p>
<p>1、同一类商品的规格分类相同</p>
<p>2、同一类商品的规格项一致</p>
<p>3、不同商品的规格参数不同</p>
<p>思路：</p>
<p>第一种方式：</p>
<blockquote>
<p>可以把数据保存到表中</p>
<p>表就不画了，单单这个功能所涉及的表：<code>商品分类表</code> <code>规格参数-分类表</code> <code>商品表</code>  <code>规格参数-商品规格参数</code>  <code>规格参数-规格项表</code></p>
<p>想想就觉得 查询的sql语句比较复杂，需要关联的表很多，会给数据库造成很大压力。不推荐使用此方法</p>
</blockquote>
<p>第二种方法：</p>
<blockquote>
<p>1、可以把规格分组和规格项使用json数据表示，保存到一个字段中。规格参数模板。</p>
<p>2、添加商品时读取规格参数的模板，根据模板生成表单，供客户输入规格参数。</p>
<p>3、把动态表单中的内容读取出来生成json数据保存到数据库中。</p>
<p>4、展示规格参数时，根据商品id读取规格参数json数据生成html展示到jsp页面</p>
</blockquote>
<p><img src="http://og0sybnix.bkt.clouddn.com/mubanliucheng.png" alt=""></p>
<p>具体实现：</p>
<p>1、  模板如何存储？</p>
<p>a)        存储到数据库</p>
<p>b)        字段不能固定</p>
<ol>
<li>Map</li>
<li>Json   这里选择这种</li>
</ol>
<p>2、  存储的json结构 以后添加(TODO) 不想打开上个项目单独拿数据了，请原谅我的懒惰！</p>
<h3 id="模板结构"><a href="#模板结构" class="headerlink" title="模板结构"></a>模板结构</h3><h3 id="数据库表结构"><a href="#数据库表结构" class="headerlink" title="数据库表结构"></a>数据库表结构</h3><p><img src="http://og0sybnix.bkt.clouddn.com/guigembb.png" alt=""></p>
<p>后台实现</p>
<p>添加mapper：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/addmapper.png" alt=""></p>
<p>创建service：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line">*/</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParmService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemParam</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParamItemService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemParamItem</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>选择类目</p>
<p>根据选择的类目进行判断，如果该类目所对应的模板存在，提醒用户已经存在，如果模板不存在，可以创建模板</p>
<p>根据商品的分类id查询tb_item_param表，如果查询到结果说明此模板已经添加</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/lm1.png" alt=""></p>
<p>这里js代码改造下，使其更加适合restful格式化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">				   type: <span class="string">"GET"</span>,</div><div class="line">				   url: <span class="string">"/rest/item/param/"</span> + node.id,</div><div class="line">				   statusCode : &#123;</div><div class="line">					   <span class="number">200</span> : function()&#123;</div><div class="line">						   <span class="comment">//模板存在</span></div><div class="line">						   $.messager.alert(<span class="string">"提示"</span>, <span class="string">"该类目已经添加，请选择其他类目。"</span>, undefined, function()&#123;</div><div class="line">								 $(<span class="string">"#itemParamAddTable .selectItemCat"</span>).click();</div><div class="line">							  &#125;);</div><div class="line">					   &#125;,</div><div class="line">					   <span class="number">404</span> : function()&#123;</div><div class="line">						   <span class="comment">//模板不存在</span></div><div class="line">						   $(<span class="string">".addGroupTr"</span>).show();</div><div class="line">					   &#125;,</div><div class="line">					   <span class="number">500</span> : function()&#123;</div><div class="line">						   alert(<span class="string">"error"</span>);</div><div class="line">					   &#125;</div><div class="line">				   &#125;</div><div class="line">				&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>请求的url：<code>/item/param/{cid}</code></p>
<p>参数：<code>cid</code></p>
</blockquote>
<p>controller:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemParam;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemParmService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item/param"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParamController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(ItemParamController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemParmService itemParmService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemCatId&#125;"</span> ,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemParam&gt; <span class="title">getItemParamByCid</span><span class="params">(@PathVariable(<span class="string">"itemCatId"</span>)</span> Long itemCatId)</span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info(<span class="string">"查询某商品规格模板参数模板 itemCatId= &#123;&#125;"</span>,itemCatId);</div><div class="line">            &#125;</div><div class="line">            ItemParam example=<span class="keyword">new</span> ItemParam();</div><div class="line">            example.setItemCatId(itemCatId);</div><div class="line">            ItemParam itemParam = <span class="keyword">this</span>.itemParmService.queryOne(example);</div><div class="line">            <span class="keyword">if</span> (itemParam==<span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                    logger.info(<span class="string">"所查询商品规格模板参数模板 不存在 itemCatId= &#123;&#125;"</span>,itemCatId);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemParam);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"查询某商品规格模板参数模板 失败 itemCatId= &#123;&#125;"</span>,itemCatId,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行测试结果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/spleimucx.png" alt=""></p>
<p>今天晚上有点事，耽搁了，就到这里吧，明天继续</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-商品规格参数的实现-1-十&quot;&gt;&lt;a href=&quot;#Migo商城2-0-商品规格参数的实现-1-十&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  商品规格参数的实现(1) 十&quot;&gt;&lt;/a&gt;Migo商城2.0  商品规格参数的实现(1) 十&lt;/h2&gt;&lt;p&gt;先看看一张jd的商品规格的截图吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/guigecanshu.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;分析：&lt;/p&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 商品的编辑 九</title>
    <link href="https://muyinchen.github.io/2016/11/14/Migo%E5%95%86%E5%9F%8E2.0%20%20%E5%95%86%E5%93%81%E7%9A%84%E7%BC%96%E8%BE%91%20%E4%B9%9D/"/>
    <id>https://muyinchen.github.io/2016/11/14/Migo商城2.0  商品的编辑 九/</id>
    <published>2016-11-14T10:32:07.487Z</published>
    <updated>2016-11-14T10:40:15.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-商品的编辑-九"><a href="#Migo商城2-0-商品的编辑-九" class="headerlink" title="Migo商城2.0  商品的编辑 九"></a>Migo商城2.0  商品的编辑 九</h2><p>商品的添加查询做完，接着就是修改和删除了</p>
<p>先做修改，也就是编辑</p>
<h3 id="商品编辑："><a href="#商品编辑：" class="headerlink" title="商品编辑："></a>商品编辑：</h3><p>需求的核心应该是<code>数据的回显</code><br><a id="more"></a></p>
<p>看前端js代码，没有截图的看注释，已经很清楚了！</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%95%86%E5%93%81%E9%80%89%E6%8B%A9.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E9%80%89%E6%8B%A9%E5%99%A8%E4%BD%8D%E7%BD%AEDemo.png" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        <span class="attr">text</span>:<span class="string">'编辑'</span>,</div><div class="line">        <span class="attr">iconCls</span>:<span class="string">'icon-edit'</span>,</div><div class="line">        <span class="attr">handler</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        	<span class="keyword">var</span> ids = getSelectionsIds();</div><div class="line">          <span class="comment">//1、	判断选中的行数</span></div><div class="line">        	<span class="keyword">if</span>(ids.length == <span class="number">0</span>)&#123;</div><div class="line">        		$.messager.alert(<span class="string">'提示'</span>,<span class="string">'必须选择一个商品才能编辑!'</span>);</div><div class="line">        		<span class="keyword">return</span> ;</div><div class="line">        	&#125;</div><div class="line">        	<span class="keyword">if</span>(ids.indexOf(<span class="string">','</span>) &gt; <span class="number">0</span>)&#123;</div><div class="line">        		$.messager.alert(<span class="string">'提示'</span>,<span class="string">'只能选择一个商品!'</span>);</div><div class="line">        		<span class="keyword">return</span> ;</div><div class="line">        	&#125;</div><div class="line"> &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"itemEditWindow"</span> <span class="attr">class</span>=<span class="string">"easyui-window"</span> <span class="attr">title</span>=<span class="string">"编辑商品"</span> <span class="attr">data-</span>		  <span class="attr">options</span>=<span class="string">"modal:true,closed:true,iconCls:'icon-save',href:'/rest/page/item-edit'"</span> <span class="attr">style</span>=<span class="string">"width:80%;height:80%;padding:10px;"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> --&gt;</div><div class="line">        	$(<span class="string">"#itemEditWindow"</span>).window(&#123;</div><div class="line">              <span class="comment">//页面加载完执行，加载页面看上面的div代码块里的href</span></div><div class="line">        		onLoad :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        			<span class="comment">//回显数据</span></div><div class="line">        			<span class="keyword">var</span> data = $(<span class="string">"#itemList"</span>).datagrid(<span class="string">"getSelections"</span>)[<span class="number">0</span>];</div><div class="line">        			data.priceView = migo.formatPrice(data.price);</div><div class="line">        			$(<span class="string">"#itemeEditForm"</span>).form(<span class="string">"load"</span>,data);</div><div class="line">        			</div><div class="line">        			<span class="comment">// 加载商品描述</span></div><div class="line">        			$.getJSON(<span class="string">'/rest/item/desc/'</span>+data.id,<span class="function"><span class="keyword">function</span>(<span class="params">_data</span>)</span>&#123;</div><div class="line">        				itemEditEditor.html(_data.itemDesc);</div><div class="line">        			&#125;);</div><div class="line">        			</div><div class="line">        			<span class="comment">//加载商品规格</span></div><div class="line">        			$.getJSON(<span class="string">'/rest/item/param/item/query/'</span>+data.id,<span class="function"><span class="keyword">function</span>(<span class="params">_data</span>)</span>&#123;</div><div class="line">        				<span class="keyword">if</span>(_data &amp;&amp; _data.status == <span class="number">200</span> &amp;&amp; _data.data &amp;&amp; _data.data.paramData)&#123;</div><div class="line">        					$(<span class="string">"#itemeEditForm .params"</span>).show();</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParams]"</span>).val(_data.data.paramData);</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParamId]"</span>).val(_data.data.id);</div><div class="line">        					</div><div class="line">        					<span class="comment">//回显商品规格</span></div><div class="line">        					 <span class="keyword">var</span> paramData = <span class="built_in">JSON</span>.parse(_data.data.paramData);</div><div class="line">        					</div><div class="line">        					 <span class="keyword">var</span> html = <span class="string">"&lt;ul&gt;"</span>;</div><div class="line">        					 <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> paramData)&#123;</div><div class="line">        						 <span class="keyword">var</span> pd = paramData[i];</div><div class="line">        						 html+=<span class="string">"&lt;li&gt;&lt;table&gt;"</span>;</div><div class="line">        						 html+=<span class="string">"&lt;tr&gt;&lt;td colspan=\"2\" class=\"group\"&gt;"</span>+pd.group+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 </div><div class="line">        						 <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> pd.params)&#123;</div><div class="line">        							 <span class="keyword">var</span> ps = pd.params[j];</div><div class="line">        							 html+=<span class="string">"&lt;tr&gt;&lt;td class=\"param\"&gt;&lt;span&gt;"</span>+ps.k+<span class="string">"&lt;/span&gt;: &lt;/td&gt;&lt;td&gt;&lt;input autocomplete=\"off\" type=\"text\" value='"</span>+ps.v+<span class="string">"'/&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 &#125;</div><div class="line">        						 </div><div class="line">        						 html+=<span class="string">"&lt;/li&gt;&lt;/table&gt;"</span>;</div><div class="line">        					 &#125;</div><div class="line">        					 html+= <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">        					 $(<span class="string">"#itemeEditForm .params td"</span>).eq(<span class="number">1</span>).html(html);</div><div class="line">        				&#125;</div><div class="line">        			&#125;);</div><div class="line">        			</div><div class="line">        			migo.init(&#123;</div><div class="line">                      <span class="comment">//这里已经看过很多次了，修改类目想要显示类目名称可自行这里添加修改的</span></div><div class="line">                      <span class="comment">//图片的回显就不说了，init方便会自动调用</span></div><div class="line">        				<span class="string">"pics"</span> : data.image,</div><div class="line">        				<span class="string">"cid"</span> : data.cid,</div><div class="line">        				<span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">        					migo.changeItemParam(node, <span class="string">"itemeEditForm"</span>);</div><div class="line">        				&#125;</div><div class="line">        			&#125;);</div><div class="line">        		&#125;</div><div class="line">        	&#125;).window(<span class="string">"open"</span>); <span class="comment">//将close变为true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化选择类目组件</span></div><div class="line">    initItemCat : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    	$(<span class="string">".selectItemCat"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,e</span>)</span>&#123;</div><div class="line">    		<span class="keyword">var</span> _ele = $(e);</div><div class="line">    		<span class="keyword">if</span>(data &amp;&amp; data.cid)&#123;</div><div class="line">    			_ele.after(<span class="string">"&lt;span style='margin-left:10px;'&gt;"</span>+data.cid+<span class="string">"&lt;/span&gt;"</span>);</div><div class="line">    		&#125;<span class="keyword">else</span>&#123;</div><div class="line">    			_ele.after(<span class="string">"&lt;span style='margin-left:10px;'&gt;&lt;/span&gt;"</span>);</div><div class="line">    		&#125;</div><div class="line">    		_ele.unbind(<span class="string">'click'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    			$(<span class="string">"&lt;div&gt;"</span>).css(&#123;<span class="attr">padding</span>:<span class="string">"5px"</span>&#125;).html(<span class="string">"&lt;ul&gt;"</span>)</div><div class="line">    			.window(&#123;</div><div class="line">    				<span class="attr">width</span>:<span class="string">'500'</span>,</div><div class="line">    			    <span class="attr">height</span>:<span class="string">"450"</span>,</div><div class="line">    			    <span class="attr">modal</span>:<span class="literal">true</span>,</div><div class="line">    			    <span class="attr">closed</span>:<span class="literal">true</span>,</div><div class="line">    			    <span class="attr">iconCls</span>:<span class="string">'icon-save'</span>,</div><div class="line">    			    <span class="attr">title</span>:<span class="string">'选择类目'</span>,</div><div class="line">    			    <span class="attr">onOpen</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    			    	<span class="keyword">var</span> _win = <span class="keyword">this</span>;</div><div class="line">    			    	$(<span class="string">"ul"</span>,_win).tree(&#123;</div><div class="line">    			    		<span class="attr">url</span>:<span class="string">'/rest/item/cat/'</span>,</div><div class="line">							<span class="attr">method</span>:<span class="string">"GET"</span>,</div><div class="line">    			    		<span class="attr">animate</span>:<span class="literal">true</span>,</div><div class="line">    			    		<span class="attr">onClick</span> : <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">    			    			<span class="keyword">if</span>($(<span class="keyword">this</span>).tree(<span class="string">"isLeaf"</span>,node.target))&#123;</div><div class="line">    			    				<span class="comment">// 填写到cid中</span></div><div class="line">    			    				_ele.parent().find(<span class="string">"[name=cid]"</span>).val(node.id);</div><div class="line">    			    				_ele.next().text(node.text).attr(<span class="string">"cid"</span>,node.id);</div><div class="line">    			    				$(_win).window(<span class="string">'close'</span>);</div><div class="line">    			    				<span class="keyword">if</span>(data &amp;&amp; data.fun)&#123;</div><div class="line">    			    					data.fun.call(<span class="keyword">this</span>,node);</div><div class="line">    			    				&#125;</div><div class="line">    			    			&#125;</div><div class="line">    			    		&#125;</div><div class="line">    			    	&#125;);</div><div class="line">    			    &#125;,</div><div class="line">    			    <span class="attr">onClose</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    			    	$(<span class="keyword">this</span>).window(<span class="string">"destroy"</span>);</div><div class="line">    			    &#125;</div><div class="line">    			&#125;).window(<span class="string">'open'</span>);</div><div class="line">    		&#125;);</div><div class="line">    	&#125;);</div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
<p>请求的URL：<code>&#39;/rest/item/desc/&#39;+data.id</code> 即<code>item/desc/{itemId}</code></p>
<h4 id="后台代码："><a href="#后台代码：" class="headerlink" title="后台代码："></a>后台代码：</h4><p>controller：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemDescService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item/desc"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDescController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(ItemDescController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemDescService itemDescService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据商品id查询商品描述信息</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemDesc&gt; <span class="title">queryItemDescByItemId</span><span class="params">(</span></span></div><div class="line">            @PathVariable(<span class="string">"itemId"</span>) Long itemId</div><div class="line">    )&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">            logger.info(<span class="string">"商品描述信息查询 id = &#123;&#125;"</span>,itemId);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ItemDesc itemDesc = <span class="keyword">this</span>.itemDescService.queryById(itemId);</div><div class="line">            <span class="keyword">if</span> (itemDesc==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemDesc);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"商品描述查询失败id = &#123;&#125;"</span>,itemId,e);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行项目，操作结果如图："><a href="#运行项目，操作结果如图：" class="headerlink" title="运行项目，操作结果如图："></a>运行项目，操作结果如图：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/%E7%BC%96%E8%BE%91%E5%9B%9E%E6%98%BE%E6%88%90%E5%8A%9F.png" alt=""></p>
<h4 id="最后，就是商品修改的提交"><a href="#最后，就是商品修改的提交" class="headerlink" title="最后，就是商品修改的提交"></a>最后，就是商品修改的提交</h4><p>先看前台js代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	<span class="keyword">var</span> itemEditEditor ;</div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">//实例化编辑器</span></div><div class="line">		itemEditEditor = migo.createEditor(<span class="string">"#itemeEditForm [name=desc]"</span>);</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">submitForm</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(!$(<span class="string">'#itemeEditForm'</span>).form(<span class="string">'validate'</span>))&#123;</div><div class="line">			$.messager.alert(<span class="string">'提示'</span>,<span class="string">'表单还未填写完成!'</span>);</div><div class="line">			<span class="keyword">return</span> ;</div><div class="line">		&#125;</div><div class="line">		$(<span class="string">"#itemeEditForm [name=price]"</span>).val(<span class="built_in">eval</span>($(<span class="string">"#itemeEditForm [name=priceView]"</span>).val()) * <span class="number">100</span>);</div><div class="line">		itemEditEditor.sync();</div><div class="line">		</div><div class="line">		<span class="keyword">var</span> paramJson = [];</div><div class="line">		$(<span class="string">"#itemeEditForm .params li"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,e</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> trs = $(e).find(<span class="string">"tr"</span>);</div><div class="line">			<span class="keyword">var</span> group = trs.eq(<span class="number">0</span>).text();</div><div class="line">			<span class="keyword">var</span> ps = [];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;trs.length;i++)&#123;</div><div class="line">				<span class="keyword">var</span> tr = trs.eq(i);</div><div class="line">				ps.push(&#123;</div><div class="line">					<span class="string">"k"</span> : $.trim(tr.find(<span class="string">"td"</span>).eq(<span class="number">0</span>).find(<span class="string">"span"</span>).text()),</div><div class="line">					<span class="string">"v"</span> : $.trim(tr.find(<span class="string">"input"</span>).val())</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			paramJson.push(&#123;</div><div class="line">				<span class="string">"group"</span> : group,</div><div class="line">				<span class="string">"params"</span>: ps</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">		paramJson = <span class="built_in">JSON</span>.stringify(paramJson);</div><div class="line">		</div><div class="line">		$(<span class="string">"#itemeEditForm [name=itemParams]"</span>).val(paramJson);</div><div class="line">		</div><div class="line">		<span class="comment">//提交到后台的RESTful</span></div><div class="line">		$.ajax(&#123;</div><div class="line">		   <span class="attr">type</span>: <span class="string">"PUT"</span>,</div><div class="line">		   <span class="attr">url</span>: <span class="string">"/rest/item"</span>,</div><div class="line">		   <span class="attr">data</span>: $(<span class="string">"#itemeEditForm"</span>).serialize(),</div><div class="line">		   <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">			   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'修改商品成功!'</span>,<span class="string">'info'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					$(<span class="string">"#itemEditWindow"</span>).window(<span class="string">'close'</span>);</div><div class="line">					$(<span class="string">"#itemList"</span>).datagrid(<span class="string">"reload"</span>);</div><div class="line">				&#125;);</div><div class="line">		   &#125;,</div><div class="line">		   <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'修改商品失败!'</span>);</div><div class="line">		   &#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>和商品添加页面提交一样，这里同样未来做到更加明了的restful化，具体请参考 商品添加 那篇博文</p>
<p>js修改如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提交到后台的RESTful</span></div><div class="line">		$.ajax(&#123;</div><div class="line">		   <span class="attr">type</span>: <span class="string">"PUT"</span>,</div><div class="line">		   <span class="attr">url</span>: <span class="string">"/rest/item"</span>,</div><div class="line">		   <span class="attr">data</span>: $(<span class="string">"#itemeEditForm"</span>).serialize(),</div><div class="line">		   <span class="attr">statusCode</span> : &#123;</div><div class="line">			   <span class="number">204</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'修改商品成功!'</span>,<span class="string">'info'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						$(<span class="string">"#itemEditWindow"</span>).window(<span class="string">'close'</span>);</div><div class="line">						$(<span class="string">"#itemList"</span>).datagrid(<span class="string">"reload"</span>);</div><div class="line">					&#125;);</div><div class="line">			   &#125;,</div><div class="line">			   <span class="number">400</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'请求参数不合法!'</span>);</div><div class="line">			   &#125;,</div><div class="line">			   <span class="number">500</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'修改商品失败!'</span>);</div><div class="line">			   &#125;</div><div class="line">		   &#125;</div><div class="line">		&#125;);</div></pre></td></tr></table></figure>
<h3 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h3><h4 id="service："><a href="#service：" class="headerlink" title="service："></a>service：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 商品修改</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> Boolean <span class="title">updateItem</span><span class="params">(Item item,String desc)</span></span>&#123;</div><div class="line">     <span class="comment">//强制设置不能更新的字段为空,防止恶意修改</span></div><div class="line">     item.setStatus(<span class="keyword">null</span>);</div><div class="line">     item.setCreated(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">     Integer change1 = <span class="keyword">super</span>.updateSelective(item);</div><div class="line"></div><div class="line">     <span class="comment">//更新商品描述</span></div><div class="line">     ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">     itemDesc.setItemId(item.getId());</div><div class="line">     itemDesc.setItemDesc(desc);</div><div class="line">     Integer change2 = <span class="keyword">this</span>.itemDescService.updateSelective(itemDesc);</div><div class="line"></div><div class="line">     <span class="keyword">return</span> change1.intValue()==<span class="number">1</span>&amp;&amp;change2.intValue()==<span class="number">1</span>;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="controller实现："><a href="#controller实现：" class="headerlink" title="controller实现："></a>controller实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 更新商品数据</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateItem</span><span class="params">(Item item, @RequestParam(<span class="string">"desc"</span>)</span> String desc)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">            LOGGER.info(<span class="string">"修改商品，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * TODO 校验以后完善</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (item.getPrice() == <span class="keyword">null</span> || item.getPrice().intValue() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                LOGGER.info(<span class="string">"修改商品时用户输入的参数不合法，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 参数有误，返回400</span></div><div class="line">            <span class="comment">//ResponseEntity&lt;Void&gt; build();</span></div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Boolean updateItem = <span class="keyword">this</span>.itemService.updateItem(item, desc);</div><div class="line">            <span class="keyword">if</span> (updateItem) &#123;</div><div class="line">                <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                    LOGGER.info(<span class="string">"修改商品成功! id = &#123;&#125;"</span>, item.getId());</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//CREATED(201, "Created"),</span></div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"修改商品失败! item = "</span> + item + <span class="string">", desc = "</span> + desc, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="启动项目，测试"><a href="#启动项目，测试" class="headerlink" title="启动项目，测试"></a>启动项目，测试</h4><p>结果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%95%86%E5%93%81%E4%BF%AE%E6%94%B9%E6%88%90%E5%8A%9F.png" alt=""></p>
<p>商品的删除很简单，这里就不去说了，边写博客边迭代进程实在太慢，先实现主要的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-商品的编辑-九&quot;&gt;&lt;a href=&quot;#Migo商城2-0-商品的编辑-九&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  商品的编辑 九&quot;&gt;&lt;/a&gt;Migo商城2.0  商品的编辑 九&lt;/h2&gt;&lt;p&gt;商品的添加查询做完，接着就是修改和删除了&lt;/p&gt;
&lt;p&gt;先做修改，也就是编辑&lt;/p&gt;
&lt;h3 id=&quot;商品编辑：&quot;&gt;&lt;a href=&quot;#商品编辑：&quot; class=&quot;headerlink&quot; title=&quot;商品编辑：&quot;&gt;&lt;/a&gt;商品编辑：&lt;/h3&gt;&lt;p&gt;需求的核心应该是&lt;code&gt;数据的回显&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 查询商品列表的实现 八</title>
    <link href="https://muyinchen.github.io/2016/11/13/Migo%E5%95%86%E5%9F%8E2.0%20%E6%9F%A5%E8%AF%A2%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%20%E5%85%AB%20/"/>
    <id>https://muyinchen.github.io/2016/11/13/Migo商城2.0 查询商品列表的实现 八 /</id>
    <published>2016-11-13T12:35:41.356Z</published>
    <updated>2016-11-13T12:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-查询商品列表的实现-八"><a href="#Migo商城2-0-查询商品列表的实现-八" class="headerlink" title="Migo商城2.0 查询商品列表的实现 八"></a>Migo商城2.0 查询商品列表的实现 八</h2><h3 id="展示商品列表："><a href="#展示商品列表：" class="headerlink" title="展示商品列表："></a>展示商品列表：</h3><h4 id="请求的URL："><a href="#请求的URL：" class="headerlink" title="请求的URL："></a>请求的URL：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/itemlist.png" alt=""></p>
<p>在商品数据处理这里，默认情况下，会直接显示返回的数据，但是有些情况下不能直接显示，如：价格、日期，需要自己指定formatter函数</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'status',width:60,align:'center',formatter:migo.formatItemStatus"</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'created',width:130,align:'center',formatter:migo.formatDateTime"</span>&gt;</span>创建日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'updated',width:130,align:'center',formatter:migo.formatDateTime"</span>&gt;</span>更新日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 格式化时间</span></div><div class="line">	formatDateTime : <span class="function"><span class="keyword">function</span>(<span class="params">val,row</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(val);</div><div class="line">    	<span class="keyword">return</span> now.format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">// 格式化连接</span></div><div class="line">	formatUrl : <span class="function"><span class="keyword">function</span>(<span class="params">val,row</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span>(val)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="string">"&lt;a href='"</span>+val+<span class="string">"' target='_blank'&gt;查看&lt;/a&gt;"</span>;			</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">// 格式化价格</span></div><div class="line">	formatPrice : <span class="function"><span class="keyword">function</span>(<span class="params">val,row</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (val/<span class="number">100</span>).toFixed(<span class="number">2</span>);</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">// 格式化商品的状态</span></div><div class="line">	formatItemStatus : <span class="function"><span class="keyword">function</span> <span class="title">formatStatus</span>(<span class="params">val,row</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (val == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'正常'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val == <span class="number">2</span>)&#123;</div><div class="line">        	<span class="keyword">return</span> <span class="string">'&lt;span style="color:red;"&gt;下架&lt;/span&gt;'</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        	<span class="keyword">return</span> <span class="string">'未知'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
<p>而上面的日期格式化，这里通过在Date对象的原型上进行扩展format,其实就是个类似Java里的继承，这也是js松散编程的自由性的体现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">format</span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> o =  &#123; </div><div class="line">    <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth()+<span class="number">1</span>, <span class="comment">//month </span></div><div class="line">    <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(), <span class="comment">//day </span></div><div class="line">    <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours(), <span class="comment">//hour </span></div><div class="line">    <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">//minute </span></div><div class="line">    <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">//second </span></div><div class="line">    <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth()+<span class="number">3</span>)/<span class="number">3</span>), <span class="comment">//quarter </span></div><div class="line">    <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds() <span class="comment">//millisecond </span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(format))&#123; </div><div class="line">    	format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length)); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)  &#123; </div><div class="line">	    <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(format))&#123; </div><div class="line">	    	format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, <span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span> ? o[k] : (<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length)); </div><div class="line">	    &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> format; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Service的实现："><a href="#Service的实现：" class="headerlink" title="Service的实现："></a>Service的实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 查询商品列表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> EasyUIDataGridResult <span class="title">getItemList</span><span class="params">(Integer page,Integer rows)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//执行查询</span></div><div class="line">        Example example=<span class="keyword">new</span> Example(Item.class);</div><div class="line">        example.orderBy(<span class="string">"updated"</span>).desc();</div><div class="line"></div><div class="line">       <span class="comment">// example.setOrderByClause("updated DESC");</span></div><div class="line">        PageHelper.startPage(page,rows);</div><div class="line"></div><div class="line">        List&lt;Item&gt; itemList = <span class="keyword">this</span>.itemMapper.selectByExample(example);</div><div class="line"></div><div class="line">        PageInfo&lt;Item&gt; pageInfo=<span class="keyword">new</span> PageInfo&lt;&gt;(itemList);</div><div class="line">        <span class="comment">//返回处理结果</span></div><div class="line">        EasyUIDataGridResult result=<span class="keyword">new</span> EasyUIDataGridResult();</div><div class="line">        result.setTotal(pageInfo.getTotal());</div><div class="line">        result.setRows(pageInfo.getList());</div><div class="line">        <span class="comment">//return new EasyUIDataGridResult(pageInfo.getList(), pageInfo.getTotal());</span></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="controller实现"><a href="#controller实现" class="headerlink" title="controller实现"></a>controller实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;EasyUIDataGridResult&gt; <span class="title">getItemList</span><span class="params">(</span></span></div><div class="line">            @RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"0"</span>) Integer page,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"rows"</span>, defaultValue = <span class="string">"30"</span>)</span> Integer rows) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            EasyUIDataGridResult itemList = <span class="keyword">this</span>.itemService.getItemList(page, rows);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemList);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">            LOGGER.error(<span class="string">"查询商品出错：page="</span>+page+<span class="string">",rows="</span>+rows,e);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里测试下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@org</span>.junit.<span class="function">Test</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span>&#123;</div><div class="line">       PageHelper.startPage(<span class="number">1</span>, <span class="number">20</span>); <span class="comment">// 核心分页代码</span></div><div class="line">       List&lt;Item&gt; cls =  itemMapper.selectAll();</div><div class="line">       <span class="keyword">for</span> (Item item : cls) &#123;</div><div class="line">           System.out.println(item.getTitle());</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="开发出现bug："><a href="#开发出现bug：" class="headerlink" title="开发出现bug："></a>开发出现bug：</h3><p>运行项目后发现没有分页，debug发现分页插件不好使，最后通过查pagehelper和通用mapper的文档发现自己配置有错误，修改如下：</p>
<p>Mybatis配置文件修改如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration</span></div><div class="line">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</div><div class="line">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Globally enables or disables any caches configured in any mapper under this configuration --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Sets the number of seconds the driver will wait for a response from the database --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Enables automatic mapping from classic database column names A_COLUMN to camel case classic Java property names aColumn --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Allows JDBC support for generated keys. A compatible driver is required.</span></div><div class="line">        This setting forces generated keys to be used if set to true,</div><div class="line">         as some drivers deny compatibility but still work --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Continue going here --&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;plugins&gt;</span></div><div class="line">        &amp;lt;!&amp;ndash; 配置分页助手 &amp;ndash;&amp;gt;</div><div class="line">        &lt;plugin interceptor="com.github.pagehelper.PageHelper"&gt;</div><div class="line">            &lt;property name="dialect" value="mysql" /&gt;</div><div class="line"></div><div class="line">            &amp;lt;!&amp;ndash; 该参数默认为false &amp;ndash;&amp;gt;</div><div class="line">            &amp;lt;!&amp;ndash; 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 &amp;ndash;&amp;gt;</div><div class="line">            &amp;lt;!&amp;ndash; 和startPage中的pageNum效果一样&amp;ndash;&amp;gt;</div><div class="line">            &lt;property name="offsetAsPageNum" value="true"/&gt;</div><div class="line">            &amp;lt;!&amp;ndash; 该参数默认为false &amp;ndash;&amp;gt;</div><div class="line">            &amp;lt;!&amp;ndash; 设置为true时，使用RowBounds分页会进行count查询 &amp;ndash;&amp;gt;</div><div class="line">            &lt;property name="rowBoundsWithCount" value="true"/&gt;</div><div class="line">            &amp;lt;!&amp;ndash; 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 &amp;ndash;&amp;gt;</div><div class="line">            &amp;lt;!&amp;ndash; （相当于没有执行分页查询，但是返回结果仍然是Page类型）&amp;ndash;&amp;gt;</div><div class="line">            &lt;property name="pageSizeZero" value="true"/&gt;</div><div class="line">            &amp;lt;!&amp;ndash; 3.3.0版本可用 - 分页参数合理化，默认false禁用 &amp;ndash;&amp;gt;</div><div class="line">            &amp;lt;!&amp;ndash; 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页 &amp;ndash;&amp;gt;</div><div class="line">            &amp;lt;!&amp;ndash; 禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据 &amp;ndash;&amp;gt;</div><div class="line">            &lt;property name="reasonable" value="false"/&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line"></div><div class="line">    &lt;/plugins&gt;--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>applicationContext-dao.xml</code>配置如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:properties/*.properties"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></div><div class="line">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置mybatis的SessionFactory --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- &lt;property name="mapperLocations" value="classpath:/mybatis/mappers/**/*.xml"/&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.migo.pojo"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 --&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">                            dialect=mysql</div><div class="line">                            <span class="comment">&lt;!--! 3.3.0版本可用 - 分页参数合理化，默认false禁用--&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页 --&gt;</span></div><div class="line">                            <span class="comment">&lt;!-- 禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据 --&gt;</span></div><div class="line">                            reasonable=true</div><div class="line">                            supportMethodsArguments=true</div><div class="line">                            params=count=countSql</div><div class="line">                            autoRuntimeDialect=true</div><div class="line">                        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 自动扫描注册Mybatis mapper --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"tk.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.migo.mapper"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--下面这个配置可以不写，默认就是这个--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">                mappers=tk.mybatis.mapper.common.Mapper</div><div class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="运行后测试效果如图："><a href="#运行后测试效果如图：" class="headerlink" title="运行后测试效果如图："></a>运行后测试效果如图：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/%E6%9F%A5%E8%AF%A2%E5%B9%B6%E5%88%86%E9%A1%B5.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-查询商品列表的实现-八&quot;&gt;&lt;a href=&quot;#Migo商城2-0-查询商品列表的实现-八&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 查询商品列表的实现 八&quot;&gt;&lt;/a&gt;Migo商城2.0 查询商品列表的实现 八&lt;/h2&gt;&lt;h3 id=&quot;展示商品列表：&quot;&gt;&lt;a href=&quot;#展示商品列表：&quot; class=&quot;headerlink&quot; title=&quot;展示商品列表：&quot;&gt;&lt;/a&gt;展示商品列表：&lt;/h3&gt;&lt;h4 id=&quot;请求的URL：&quot;&gt;&lt;a href=&quot;#请求的URL：&quot; class=&quot;headerlink&quot; title=&quot;请求的URL：&quot;&gt;&lt;/a&gt;请求的URL：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/itemlist.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在商品数据处理这里，默认情况下，会直接显示返回的数据，但是有些情况下不能直接显示，如：价格、日期，需要自己指定formatter函数&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-options&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;field:&#39;status&#39;,width:60,align:&#39;center&#39;,formatter:migo.formatItemStatus&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;状态&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-options&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;field:&#39;created&#39;,width:130,align:&#39;center&#39;,formatter:migo.formatDateTime&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;创建日期&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-options&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;field:&#39;updated&#39;,width:130,align:&#39;center&#39;,formatter:migo.formatDateTime&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;更新日期&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 商品的添加功能实现 七</title>
    <link href="https://muyinchen.github.io/2016/11/12/Migo%E5%95%86%E5%9F%8E2.0%20%E5%95%86%E5%93%81%E7%9A%84%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%20%E4%B8%83/"/>
    <id>https://muyinchen.github.io/2016/11/12/Migo商城2.0 商品的添加功能实现 七/</id>
    <published>2016-11-12T06:27:03.750Z</published>
    <updated>2016-11-13T03:44:55.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Migo商城2-0-商品的添加功能实现-七"><a href="#Migo商城2-0-商品的添加功能实现-七" class="headerlink" title="Migo商城2.0 商品的添加功能实现 七"></a>Migo商城2.0 商品的添加功能实现 七</h1><p>接着看商品的添加功能</p>
<p>向商品表添加一条记录。</p>
<p>商品的基本信息保存到：tb_item</p>
<p>商品的描述：tb_item_desc</p>
<p>下图数据库表分析 可以看出，为保证商品id不能重复，考虑到并发的需求，将自动增长删除</p>
<p>看下图jd商品id的设计是一个数值类型</p>
<p>这里用一个工具类IDUtils生成id</p>
<blockquote>
<p>这里将商品描述和商品的基本数据分离：</p>
<p> 商品描述的数据量大，会导致数据文件变大，影响查询速度。</p>
<p>后期会对商品描述数据的存储做改造，所以需要将描述数据分离</p>
</blockquote>
<a id="more"></a>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%95%86%E5%93%81%E8%A1%A8%E7%BC%BA%E9%99%B7.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E6%9B%B4%E6%94%B9%E5%90%8E%E7%9A%84%E5%95%86%E5%93%81%E8%A1%A8.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/jd%E5%95%86%E5%93%81id.png" alt=""></p>
<h4 id="点击商品类目的叶子节点产生的事件"><a href="#点击商品类目的叶子节点产生的事件" class="headerlink" title="点击商品类目的叶子节点产生的事件"></a>点击商品类目的叶子节点产生的事件</h4><p>如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%9B%9E%E8%B0%83.png" alt=""></p>
<p>不再解释过多了</p>
<h4 id="接着看新增页面的中的价格有个注意点："><a href="#接着看新增页面的中的价格有个注意点：" class="headerlink" title="接着看新增页面的中的价格有个注意点："></a>接着看新增页面的中的价格有个注意点：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/%E4%BB%B7%E6%A0%BC%E6%8F%90%E4%BA%A4.png" alt=""></p>
<h4 id="再往下，商品描述，就是kindEditor的使用"><a href="#再往下，商品描述，就是kindEditor的使用" class="headerlink" title="再往下，商品描述，就是kindEditor的使用"></a>再往下，商品描述，就是kindEditor的使用</h4><p>1 导入js文件</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%AF%BC%E5%85%A5js.png" alt=""></p>
<p>2 商品描述</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%95%86%E5%93%81%E6%8F%8F%E8%BF%B0.png" alt=""></p>
<p>3 通过JS创建出富文本编辑器</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/kindeditor.png" alt=""></p>
<h4 id="最后，提交商品数据"><a href="#最后，提交商品数据" class="headerlink" title="最后，提交商品数据"></a>最后，提交商品数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"javascript:void(0)"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"easyui-linkbutton"</span> onclick=<span class="string">"submitForm()"</span>&gt;提交&lt;<span class="regexp">/a&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitForm</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(!$(<span class="string">'#itemAddForm'</span>).form(<span class="string">'validate'</span>))&#123;</div><div class="line">		$.messager.alert(<span class="string">'提示'</span>,<span class="string">'表单还未填写完成!'</span>);</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//处理商品的价格的单位，将元转化为分</span></div><div class="line">	$(<span class="string">"#itemAddForm [name=price]"</span>).val(<span class="built_in">eval</span>($(<span class="string">"#itemAddForm [name=priceView]"</span>).val()) * <span class="number">100</span>);</div><div class="line">	<span class="comment">//将编辑器中的内容同步到隐藏多行文本中</span></div><div class="line">	itemAddEditor.sync();</div><div class="line">	</div><div class="line">	<span class="comment">//输入的规格参数数据保存为json</span></div><div class="line">	<span class="keyword">var</span> paramJson = [];</div><div class="line">	$(<span class="string">"#itemAddForm .params li"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,e</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> trs = $(e).find(<span class="string">"tr"</span>);</div><div class="line">		<span class="keyword">var</span> group = trs.eq(<span class="number">0</span>).text();</div><div class="line">		<span class="keyword">var</span> ps = [];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;trs.length;i++)&#123;</div><div class="line">			<span class="keyword">var</span> tr = trs.eq(i);</div><div class="line">			ps.push(&#123;</div><div class="line">				<span class="string">"k"</span> : $.trim(tr.find(<span class="string">"td"</span>).eq(<span class="number">0</span>).find(<span class="string">"span"</span>).text()),</div><div class="line">				<span class="string">"v"</span> : $.trim(tr.find(<span class="string">"input"</span>).val())</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">		paramJson.push(&#123;</div><div class="line">			<span class="string">"group"</span> : group,</div><div class="line">			<span class="string">"params"</span>: ps</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">	paramJson = <span class="built_in">JSON</span>.stringify(paramJson);</div><div class="line">	</div><div class="line">	$(<span class="string">"#itemAddForm [name=itemParams]"</span>).val(paramJson);</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	$.post("/rest/item/save",$("#itemAddForm").serialize(), function(data)&#123;</div><div class="line">		if(data.status == 200)&#123;</div><div class="line">			$.messager.alert('提示','新增商品成功!');</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	*/</div><div class="line">	</div><div class="line">	<span class="comment">//提交到后台的RESTful</span></div><div class="line">	$.ajax(&#123;</div><div class="line">	   <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">	   <span class="attr">url</span>: <span class="string">"/rest/item"</span>,</div><div class="line">	   <span class="attr">data</span>: $(<span class="string">"#itemAddForm"</span>).serialize(),</div><div class="line">	   <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">		   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增商品成功!'</span>);</div><div class="line">	   &#125;,</div><div class="line">	   <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增商品失败!'</span>);</div><div class="line">	   &#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何做到更加明了的restful化，查jquery api 发现：</p>
<ul>
<li><ul>
<li><blockquote>
<p><strong>statusCode</strong> (默认值：<code>{}</code>)</p>
<p>类型：<a href="Types.htm#PlainObject">PlainObject</a></p>
<p>数字HTTP代码，以及当响应具有对应的代码时执行的函数，所构成的对象。举个例子，以下代码将提醒响应状态是404：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; $.ajax(&#123;</div><div class="line">&gt;   statusCode: &#123;</div><div class="line">&gt;     <span class="number">404</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&gt;       alert( <span class="string">"page not found"</span> );</div><div class="line">&gt;     &#125;</div><div class="line">&gt;   &#125;</div><div class="line">&gt; &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p>&gt;</p>
<blockquote>
<p>如果请求成功了，状态代码函数会取用和success回调函数同样的参数；如果以失败告终（包括3xx重定向），状态代码函数会取用和error回调函数同样的参数。</p>
<p>1.5</p>
</blockquote>
</li>
</ul>
<p>所以上述代码ajax提交这里可以更改为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提交到后台的RESTful</span></div><div class="line">$.ajax(&#123;</div><div class="line">	   <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">	   <span class="attr">url</span>: <span class="string">"/rest/item"</span>,</div><div class="line">	   <span class="attr">data</span>: $(<span class="string">"#itemAddForm"</span>).serialize(),<span class="comment">//表单序列化,不明白查api</span></div><div class="line">	   statusCode : &#123;</div><div class="line">			   <span class="number">201</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增商品成功!'</span>);</div><div class="line">			   &#125;,</div><div class="line">				<span class="number">400</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'提交的参数不合法!'</span>);</div><div class="line">			   &#125;,</div><div class="line">			   <span class="number">500</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增商品失败!'</span>);</div><div class="line">			   &#125;</div><div class="line">		   &#125;</div><div class="line"></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h4 id="商品描述后台处理"><a href="#商品描述后台处理" class="headerlink" title="商品描述后台处理"></a>商品描述后台处理</h4><p>因为使用了通用mapper，那就按照通用mapper的方法来</p>
<p>看@id 这样就可以认为是对应表的主键id了，一下子方便了不少，省去了，第一个版本中的添加属性条件的判断</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_item_desc"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDesc</span> <span class="keyword">extends</span> <span class="title">BasePojo</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Id</span><span class="comment">//对应tb_item中的id</span></div><div class="line">    <span class="keyword">private</span> Long itemId;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String itemDesc;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getItemId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itemId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.itemId = itemId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemDesc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itemDesc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemDesc</span><span class="params">(String itemDesc)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.itemDesc = itemDesc;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>service代码实现：</p>
<p>因要保证事务一致性，所以保存商品和商品描述要在一个方法内实现，具体代码如下：</p>
<p><code>ItemDescService</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDescService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemDesc</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ItemService</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemDescService itemDescService;</div><div class="line">    <span class="comment">//desc参考前端页面传过来的数据是序列化成字符串的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">saveItem</span><span class="params">(Item item,String desc)</span></span>&#123;</div><div class="line">        item.setId(<span class="keyword">null</span>);<span class="comment">//强制设置id为null，避免产生安全漏洞</span></div><div class="line">        <span class="comment">//'商品状态，1-正常，2-下架，3-删除'</span></div><div class="line">        item.setStatus(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">//保存商品数据</span></div><div class="line">        Integer save = <span class="keyword">super</span>.save(item);</div><div class="line"></div><div class="line">        ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">        itemDesc.setItemDesc(desc);</div><div class="line">        itemDesc.setItemId(item.getId());</div><div class="line"></div><div class="line">        <span class="comment">//保存商品描述数据</span></div><div class="line">        Integer save1 = <span class="keyword">this</span>.itemDescService.save(itemDesc);</div><div class="line">        <span class="keyword">return</span> save.intValue()==<span class="number">1</span>&amp;&amp;save1.intValue()==<span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>controller实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER= LoggerFactory.getLogger(ItemController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 新增商品</div><div class="line">     */</div><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">addItem</span><span class="params">(Item item, @RequestParam(<span class="string">"desc"</span>)</span> String desc)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">        LOGGER.info(<span class="string">"新增商品，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * TODO 校验以后完善</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (item.getPrice()==<span class="keyword">null</span>||item.getPrice().intValue()==<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (LOGGER.isInfoEnabled())&#123;</div><div class="line">            LOGGER.info(<span class="string">"新增商品时用户输入的参数不合法，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 参数有误，返回400</span></div><div class="line">        <span class="comment">//ResponseEntity&lt;Void&gt; build();</span></div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Boolean saveItem = <span class="keyword">this</span>.itemService.saveItem(item, desc);</div><div class="line">        <span class="keyword">if</span> (saveItem) &#123;</div><div class="line">            <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                LOGGER.info(<span class="string">"新增商品成功! id = &#123;&#125;"</span>, item.getId());</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//CREATED(201, "Created"),</span></div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        LOGGER.error(<span class="string">"新增商品失败! item = "</span> + item + <span class="string">", desc = "</span> + desc, e);</div><div class="line">        e.printStackTrace();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行项目</p>
<p>出错：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%BC%82%E5%B8%B81.png" alt=""></p>
<p>解决：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.Item;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemDescMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">ItemDesc</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重启运行，添加图片的时候出错：</p>
<p>本来还以为是父子容器的关系，改了一下，发现原来是自己写属性配置文件是搞错了，真坑。。。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.png" alt=""></p>
<p>图片上传功能完成</p>
<p>插入图片描述，出错：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%87%BA%E9%94%992.png" alt=""></p>
<p>解决：</p>
<p><code>PicService</code>代码修改为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemDescService itemDescService;</div><div class="line">    <span class="comment">//desc参考前端页面传过来的数据是序列化成字符串的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">saveItem</span><span class="params">(Item item,String desc)</span></span>&#123;</div><div class="line">        <span class="comment">// 1、生成商品id</span></div><div class="line">        <span class="keyword">long</span> itemId = IDUtils.genItemId();</div><div class="line">        <span class="comment">// 2、对TbItem对象补全属性。</span></div><div class="line">        item.setId(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//'商品状态，1-正常，2-下架，3-删除'</span></div><div class="line">        item.setStatus(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">//保存商品数据</span></div><div class="line">        Integer save = <span class="keyword">super</span>.save(item);</div><div class="line"></div><div class="line">        ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">        itemDesc.setItemDesc(desc);</div><div class="line">        itemDesc.setItemId(item.getId());</div><div class="line"></div><div class="line">        <span class="comment">//保存商品描述数据</span></div><div class="line">        Integer save1 = <span class="keyword">this</span>.itemDescService.save(itemDesc);</div><div class="line">        <span class="keyword">return</span> save.intValue()==<span class="number">1</span>&amp;&amp;save1.intValue()==<span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>商品增加成功，如图所示：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E5%95%86%E5%93%81%E5%A2%9E%E5%8A%A0%E6%88%90%E5%8A%9F.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Migo商城2-0-商品的添加功能实现-七&quot;&gt;&lt;a href=&quot;#Migo商城2-0-商品的添加功能实现-七&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 商品的添加功能实现 七&quot;&gt;&lt;/a&gt;Migo商城2.0 商品的添加功能实现 七&lt;/h1&gt;&lt;p&gt;接着看商品的添加功能&lt;/p&gt;
&lt;p&gt;向商品表添加一条记录。&lt;/p&gt;
&lt;p&gt;商品的基本信息保存到：tb_item&lt;/p&gt;
&lt;p&gt;商品的描述：tb_item_desc&lt;/p&gt;
&lt;p&gt;下图数据库表分析 可以看出，为保证商品id不能重复，考虑到并发的需求，将自动增长删除&lt;/p&gt;
&lt;p&gt;看下图jd商品id的设计是一个数值类型&lt;/p&gt;
&lt;p&gt;这里用一个工具类IDUtils生成id&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里将商品描述和商品的基本数据分离：&lt;/p&gt;
&lt;p&gt; 商品描述的数据量大，会导致数据文件变大，影响查询速度。&lt;/p&gt;
&lt;p&gt;后期会对商品描述数据的存储做改造，所以需要将描述数据分离&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 图片上传代码实现 六</title>
    <link href="https://muyinchen.github.io/2016/11/11/Migo%E5%95%86%E5%9F%8E%20%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%20%E5%85%AD/"/>
    <id>https://muyinchen.github.io/2016/11/11/Migo商城 图片上传代码实现 六/</id>
    <published>2016-11-11T13:19:09.192Z</published>
    <updated>2016-11-13T03:50:25.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城-图片上传代码实现-六"><a href="#Migo商城-图片上传代码实现-六" class="headerlink" title="Migo商城 图片上传代码实现 六"></a>Migo商城 图片上传代码实现 六</h2><p>图片服务器搭建完成后，开始回到商品的图片上传功能的实现</p>
<h4 id="先来分析页面代码："><a href="#先来分析页面代码：" class="headerlink" title="先来分析页面代码："></a>先来分析页面代码：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E7%BB%84%E4%BB%B6.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/up_pic_click.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/pic_up_params.png" alt="图片上传参数"><br><a id="more"></a></p>
<blockquote>
<p>请求的url：/rest/pic/upload</p>
<p>参数：MultiPartFileuploadFile</p>
<p>上传文件返回的数据是：文本类型的json数据</p>
</blockquote>
<p>查文档<a href="http://kindeditor.net/docs/upload.html" target="_blank" rel="external">http://kindeditor.net/docs/upload.html</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">返回格式(JSON)</div><div class="line"></div><div class="line">//成功时</div><div class="line">&#123;</div><div class="line">        "error" : 0,</div><div class="line">        "url" : "http://www.example.com/path/to/file.ext"</div><div class="line">&#125;</div><div class="line">//失败时</div><div class="line">&#123;</div><div class="line">        "error" : 1,</div><div class="line">        "message" : "错误信息"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里使用使用<code>Map</code>设置返回值(请对比<code>migo</code>第一版实现，用的是<code>POJO</code>来做封装，这里换一种方法)</p>
<p>接收的参数：<code>MulitPartFileuploadFile</code></p>
<p>业务逻辑：把图片流上传到图片服务器，使用<code>FastDFSClient</code>工具类上传，返回图片的<code>url</code>。需要把图片服务器的域名或者ip拼接返回的url做为完整的<code>url</code>返回。把<code>url</code>和<code>error</code> 对象封装到<code>map</code>中返回。 </p>
<p>返回值：<code>map</code></p>
</blockquote>
<h4 id="添加依赖："><a href="#添加依赖：" class="headerlink" title="添加依赖："></a>添加依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>fastdfs_client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs_client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="在common工程中加入工具类-FastDFSClient-java"><a href="#在common工程中加入工具类-FastDFSClient-java" class="headerlink" title="在common工程中加入工具类 FastDFSClient.java"></a>在common工程中加入工具类 <code>FastDFSClient.java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.csource.common.NameValuePair;</div><div class="line"><span class="keyword">import</span> org.csource.fastdfs.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSClient</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> TrackerClient trackerClient = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">private</span> TrackerServer trackerServer = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">private</span> StorageServer storageServer = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">private</span> StorageClient1 storageClient = <span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FastDFSClient</span><span class="params">(String conf)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">if</span> (conf.contains(<span class="string">"classpath:"</span>)) &#123;</div><div class="line">			conf = conf.replace(<span class="string">"classpath:"</span>, <span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath());</div><div class="line">		&#125;</div><div class="line">		ClientGlobal.init(conf);</div><div class="line">		trackerClient = <span class="keyword">new</span> TrackerClient();</div><div class="line">		trackerServer = trackerClient.getConnection();</div><div class="line">		storageServer = <span class="keyword">null</span>;</div><div class="line">		storageClient = <span class="keyword">new</span> StorageClient1(trackerServer, storageServer);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 上传文件方法</div><div class="line">	 * &lt;p&gt;Title: uploadFile&lt;/p&gt;</div><div class="line">	 * &lt;p&gt;Description: &lt;/p&gt;</div><div class="line">	 * <span class="doctag">@param</span> fileName 文件全路径</div><div class="line">	 * <span class="doctag">@param</span> extName 文件扩展名，不包含（.）</div><div class="line">	 * <span class="doctag">@param</span> metas 文件扩展信息</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(String fileName, String extName, NameValuePair[] metas)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		String result = storageClient.upload_file1(fileName, extName, metas);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> uploadFile(fileName, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(String fileName, String extName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> uploadFile(fileName, extName, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 上传文件方法</div><div class="line">	 * &lt;p&gt;Title: uploadFile&lt;/p&gt;</div><div class="line">	 * &lt;p&gt;Description: &lt;/p&gt;</div><div class="line">	 * <span class="doctag">@param</span> fileContent 文件的内容，字节数组</div><div class="line">	 * <span class="doctag">@param</span> extName 文件扩展名</div><div class="line">	 * <span class="doctag">@param</span> metas 文件扩展信息</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(<span class="keyword">byte</span>[] fileContent, String extName, NameValuePair[] metas)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		</div><div class="line">		String result = storageClient.upload_file1(fileContent, extName, metas);</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(<span class="keyword">byte</span>[] fileContent)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> uploadFile(fileContent, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(<span class="keyword">byte</span>[] fileContent, String extName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> uploadFile(fileContent, extName, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="service实现"><a href="#service实现" class="headerlink" title="service实现:"></a>service实现:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.utils.FastDFSClient;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片上传</div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/11.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicService</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;IMAGE_SERVER_BASE_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String IMAGE_SERVER_BASE_URL;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">uploadFile</span><span class="params">(MultipartFile uploadFile)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FastDFSClient client=<span class="keyword">new</span> FastDFSClient(<span class="string">"classpath:properties/env.properties"</span>);</div><div class="line">            <span class="comment">//获取图片原始名称</span></div><div class="line">            String filename = uploadFile.getOriginalFilename();</div><div class="line">            <span class="comment">//取扩展名</span></div><div class="line">            String extendName = filename.substring(filename.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</div><div class="line">            String url=client.uploadFile(uploadFile.getBytes(),extendName);</div><div class="line">            <span class="comment">//拼接URL</span></div><div class="line">            url=IMAGE_SERVER_BASE_URL+url;</div><div class="line">            <span class="comment">//返回map数据</span></div><div class="line">            Map result=<span class="keyword">new</span> HashMap();</div><div class="line">            result.put(<span class="string">"error"</span>,<span class="number">0</span>);</div><div class="line">            result.put(<span class="string">"url"</span>,url);</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="comment">//返回Map数据</span></div><div class="line">            Map result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            result.put(<span class="string">"error"</span>, <span class="number">1</span>);</div><div class="line">            result.put(<span class="string">"message"</span>, <span class="string">"上传失败"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Controller实现："><a href="#Controller实现：" class="headerlink" title="Controller实现："></a>Controller实现：</h4><blockquote>
<p>在springmvc中上传图片，需要在springmvc.xml中配置多媒体解析器</p>
<p>上传文件返回的数据是：文本类型的json数据   所以在controller里要将map数据转换为字符串返回</p>
<p><code>jsonutils</code>是封装的工具类，很简单，就是封装Jackson的实现方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.service.PicService;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 图片上传controller</div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/11.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PicController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PicService picService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rest/pic/upload"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadFile</span><span class="params">(MultipartFile uploadFile)</span></span>&#123;</div><div class="line">        Map result = picService.uploadFile(uploadFile);</div><div class="line"></div><div class="line">        <span class="comment">//把Java对象手工转换成json数据</span></div><div class="line">        String json = JsonUtils.objectToJson(result);</div><div class="line">        <span class="keyword">return</span> json;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此，图片上传功能完成，具体效果图后面再展示</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城-图片上传代码实现-六&quot;&gt;&lt;a href=&quot;#Migo商城-图片上传代码实现-六&quot; class=&quot;headerlink&quot; title=&quot;Migo商城 图片上传代码实现 六&quot;&gt;&lt;/a&gt;Migo商城 图片上传代码实现 六&lt;/h2&gt;&lt;p&gt;图片服务器搭建完成后，开始回到商品的图片上传功能的实现&lt;/p&gt;
&lt;h4 id=&quot;先来分析页面代码：&quot;&gt;&lt;a href=&quot;#先来分析页面代码：&quot; class=&quot;headerlink&quot; title=&quot;先来分析页面代码：&quot;&gt;&lt;/a&gt;先来分析页面代码：&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E7%BB%84%E4%BB%B6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/up_pic_click.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/pic_up_params.png&quot; alt=&quot;图片上传参数&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 图片服务器的搭建与使用 五</title>
    <link href="https://muyinchen.github.io/2016/11/11/Migo%E5%95%86%E5%9F%8E%20%20%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8%20%20%E4%BA%94/"/>
    <id>https://muyinchen.github.io/2016/11/11/Migo商城  图片服务器的搭建与使用  五/</id>
    <published>2016-11-11T10:32:02.166Z</published>
    <updated>2016-11-13T03:50:07.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城-图片服务器的搭建与使用-五"><a href="#Migo商城-图片服务器的搭建与使用-五" class="headerlink" title="Migo商城  图片服务器的搭建与使用 五"></a>Migo商城  图片服务器的搭建与使用 五</h2><p>这里简单说下<code>fastdfs</code>的说明搭建使用，回头专门出附章来讲这块的<code>api</code>和各种配置，这里就来过简易版的，能进行开发就可。</p>
<h3 id="什么是FastDFS"><a href="#什么是FastDFS" class="headerlink" title="什么是FastDFS"></a>什么是FastDFS</h3><p>​      <code>FastDFS</code>是一个开源的轻量级分布式文件系统。它解决了大数据量存储和负载均衡等问题。特别适合以中小文件（建议范围：<code>4KB&lt; file_size &lt;500MB）</code>为载体的在线服务，如相册网站、视频网站等等。</p>
<p>​      <code>FastDFS</code>是用c语言编写的一款开源的分布式文件系统。<code>FastDFS</code>为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用<code>FastDFS</code>很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<h3 id="FastDFS的设计理念"><a href="#FastDFS的设计理念" class="headerlink" title="FastDFS的设计理念"></a>FastDFS的设计理念</h3><p>和现有的类<code>Google FS</code>分布式文件系统相比，<code>FastDFS</code>的架构和设计理念有其独到之处，主要体现在<code>轻量级</code>、<code>分组方式</code>和<code>对等结构</code>三个方面。<br><a id="more"></a></p>
<h5 id="轻量级"><a href="#轻量级" class="headerlink" title="轻量级"></a>轻量级</h5><p><code>FastDFS</code>只有两个角色：<code>Tracker server</code>和<code>Storage server</code>。<code>Tracker server</code>作为中心结点，其主要作用是负载均衡和调度。<br>​     <code>Tracker server</code>在内存中记录<code>分组</code>和<code>Storage server</code>的状态等信息，不记录文件索引信息，占用的内存量很少。另外，客户端（应用）和<code>Storage server</code>访问<code>Tracker server</code>时，<code>Tracker server</code>扫描内存中的分组和<code>Storage server</code>信息，然后给出应答。由此可以看出<code>Tracker server</code>非常轻量化，不会成为系统瓶颈。<br>​       <code>FastDFS</code>中的<code>Storage server</code>在其他文件系统中通常称作<code>Trunk server</code>或<code>Dataserver</code>。<code>Storage server</code>直接利用<code>OS</code>的文件系统存储文件。<code>FastDFS</code>不会对文件进行分块存储，客户端上传的文件和<code>Storage server</code>上的文件一一对应。<br>​         众所周知，大多数网站都需要存储用户上传的文件，如图片、视频、电子文档等。出于降低带宽和存储成本的考虑，网站通常都会限制用户上传的文件大小，例如图片文件不能超过5MB、视频文件不能超过100MB等。我认为，对于互联网应用，文件分块存储没有多大的必要。它既没有带来多大的好处，又增加了系统的复杂性。<code>FastDFS</code>不对文件进行分块存储，与支持文件分块存储的<code>DFS</code>相比，更加简洁高效，并且完全能满足绝大多数互联网应用的实际需要。<br>​      在<code>FastDFS</code>中，客户端上传文件时，文件<code>ID</code>不是由客户端指定，而是由S<code>torage server</code>生成后返回给客户端的。文件<code>ID</code>中包含了<code>组名</code>、<code>文件相对路径</code>和<code>文件名</code>，<code>Storage server</code>可以根据文件<code>ID</code>直接定位到文件。因此<code>FastDFS</code>集群中根本不需要存储文件索引信息，这是<code>FastDFS</code>比较轻量级的一个例证。而其他文件系统则需要存储文件索引信息，这样的角色通常称作<code>NameServer</code>。其中<code>mogileFS</code>采用<code>MySQL</code>数据库来存储文件索引以及系统相关的信息，其局限性显而易见，<code>MySQL</code>将成为整个系统的瓶颈。<br>​       <code>FastDFS</code>轻量级的另外一个体现是代码量较小。最新的<code>V2.0</code>包括了<code>C</code>客户端<code>API</code>、<code>FastDHT</code>客户端<code>API</code>和<code>PHP extension</code>等，代码行数不到<code>5.2</code>万行。</p>
<h5 id="分组方式"><a href="#分组方式" class="headerlink" title="分组方式"></a>分组方式</h5><p>​       类<code>Google FS</code>都支持文件冗余备份，例如<code>Google FS</code>、<code>TFS</code>的备份数是3。一个文件存储到哪几个存储结点，通常采用动态分配的方式。采用这种方式，一个文件存储到的结点是不确定的。举例说明，文件备份数是3，集群中有A、B、C、D四个存储结点。文件1可能存储在A、B、C三个结点，文件2可能存储在B、C、D三个结点，文件3可能存储在A、B、D三个结点。<br>​       <code>FastDFS</code>采用了<code>分组存储</code>方式。集群由一个或多个组构成，集群存储总容量为集群中所有组的存储容量之和。一个组由一台或多台存储服务器组成，同组内的多台<code>Storage server</code>之间是互备关系，同组存储服务器上的文件是完全一致的。文件上传、下载、删除等操作可以在组内任意一台<code>Storage server</code>上进行。类似木桶短板效应，一个组的存储容量为该组内存储服务器容量最小的那个，由此可见组内存储服务器的软硬件配置最好是一致的。<code>采用分组存储方式的好处是灵活、可控性较强</code>。比如上传文件时，可以由客户端直接指定上传到的组。一个分组的存储服务器访问压力较大时，可以在该组增加存储服务器来扩充服务能力（纵向扩容）。当系统容量不足时，可以增加组来扩充存储容量（横向扩容）。采用这样的分组存储方式，可以使用<code>FastDFS</code>对文件进行管理，使用主流的<code>Web server</code>如<code>Apache、nginx</code>等进行文件下载。</p>
<h5 id="对等结构"><a href="#对等结构" class="headerlink" title="对等结构"></a>对等结构</h5><p>​       <code>FastDFS</code>集群中的<code>Tracker server</code>也可以有多台，<code>Tracker server</code>和<code>Storage server</code>均不存在单点问题。<code>Tracker server</code>之间是对等关系，组内的<code>Storage server</code>之间也是对等关系。传统的<code>Master-Slave</code>结构中的<code>Master</code>是单点，写操作仅针对<code>Master</code>。如果<code>Master</code>失效，需要将<code>Slave</code>提升为<code>Master</code>，实现逻辑会比较复杂。和<code>Master-Slave</code>结构相比，<code>对等结构中所有结点的地位是相同的，每个结点都是Master，不存在单点问题</code>。 </p>
<h3 id="FastDFS的架构"><a href="#FastDFS的架构" class="headerlink" title="FastDFS的架构"></a>FastDFS的架构</h3><h5 id="FastDFS的系统架构-如图："><a href="#FastDFS的系统架构-如图：" class="headerlink" title="FastDFS的系统架构 如图："></a>FastDFS的系统架构 如图：</h5><p><img src="http://og0sybnix.bkt.clouddn.com/fastdfs2.png" alt=""></p>
<p>从图中可以看出，Tracker server之间相互独立，不存在直接联系。 </p>
<p>​     客户端和<code>Storage server</code>主动连接<code>Tracker server</code>。<code>Storage server</code>主动向<code>Tracker server</code>报告其状态信息，包括磁盘剩余空间、文件同步状况、文件上传下载次数等统计信息。<code>Storage server</code>会连接集群中所有的<code>Tracker server</code>，向他们报告自己的状态。<code>Storage server</code>启动一个单独的线程来完成对一台<code>Tracker server</code>的连接和定时报告。需要说明的是，一个组包含的<code>Storage server</code>不是通过配置文件设定的，而是通过<code>Tracker server</code>获取到的。<br>​      不同组的<code>Storage server</code>之间不会相互通信，同组内的<code>Storage server</code>之间会相互连接进行文件同步。<code>Storage server</code>采用<code>binlog</code>文件记录文件上传、删除等更新操作。<code>binlog</code>中只记录文件名，不记录文件内容。<br>​      文件同步只在<code>同组内的Storage server</code>之间进行，采用<code>push</code>方式，即源头服务器同步给目标服务器。只有源头数据才需要同步，备份数据并不需要再次同步，否则就构成环路了。有个例外，就是新增加一台<code>Storage server</code>时，由已有的一台<code>Storage server</code>将已有的所有数据（包括源头数据和备份数据）同步给该新增服务器。<br>​      <code>Storage server</code>中由专门的线程根据<code>binlog</code>进行文件同步。为了最大程度地避免相互影响以及出于系统简洁性考<br>虑，<code>Storage server</code>对组内除自己以外的每台服务器都会启动一个线程来进行文件同步。</p>
<p>​     文件同步采用增量同步方式，系统记录已同步的位置（<code>binlog</code>文件偏移量）到标识文件中。标识文件名格式：<br><code>{dest storage IP}_{port}.mark</code>，例如：192.168.1.14_23000.mark。</p>
<h5 id="文件上传和下载的交互过程"><a href="#文件上传和下载的交互过程" class="headerlink" title="文件上传和下载的交互过程"></a>文件上传和下载的交互过程</h5><h6 id="文件上传流程"><a href="#文件上传流程" class="headerlink" title="文件上传流程"></a>文件上传流程</h6><p>接下来我们一起看一下文件上传和下载的交互过程。文件上传流程的步骤如下 </p>
<p><img src="http://og0sybnix.bkt.clouddn.com/upload_file.jpg" alt=""></p>
<blockquote>
<ol>
<li><code>Client</code>询问<code>Tracker server</code>上传到的<code>Storage server</code>；</li>
<li><code>Tracker server</code>返回一台可用的<code>Storage server</code>，返回的数据为该<code>Storage server</code>的IP地址和端口；</li>
<li>Client直接和该<code>Storage server</code>建立连接，进行文件上传，<code>Storage server</code>返回新生成的文件<code>ID</code>，文件上传结束。 </li>
</ol>
</blockquote>
<p>再啰嗦点细节：</p>
<p>选择<code>tracker server</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当集群中不止一个tracker server时，由于tracker之间是完全对等的关系，客户端在upload文件时可以任意选择一个trakcer。</div></pre></td></tr></table></figure>
<p>选择存储的<code>group</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当tracker接收到upload file的请求时，会为该文件分配一个可以存储该文件的group，支持如下选择group的规则： 1. Round robin，所有的group间轮询 2. Specified group，指定某一个确定的group 3. Load balance，剩余存储空间多多group优先</div></pre></td></tr></table></figure>
<p>选择<code>storage server</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当选定group后，tracker会在group内选择一个storage server给客户端，支持如下选择storage的规则： 1. Round robin，在group内的所有storage间轮询 2. First server ordered by ip，按ip排序 3. First server ordered by priority，按优先级排序（优先级在storage上配置）</div></pre></td></tr></table></figure>
<p>选择<code>storage path</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当分配好storage server后，客户端将向storage发送写文件请求，storage将会为文件分配一个数据存储目录，支持如下规则： 1. Round robin，多个存储目录间轮询 2. 剩余存储空间最多的优先</div></pre></td></tr></table></figure>
<p>生成<code>Fileid</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选定存储目录之后，storage会为文件生一个Fileid，由storage server ip、文件创建时间、文件大小、文件crc32和一个随机数拼接而成，然后将这个二进制串进行base64编码，转换为可打印的字符串。</div></pre></td></tr></table></figure>
<p>选择两级目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当选定存储目录之后，storage会为文件分配一个fileid，每个存储目录下有两级256*256的子目录，storage会按文件fileid进行两次hash（猜测），路由到其中一个子目录，然后将文件以fileid为文件名存储到该子目录下。</div></pre></td></tr></table></figure>
<p>生成文件名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当文件存储到某个子目录后，即认为该文件存储成功，接下来会为该文件生成一个文件名，文件名由group、存储目录、两级子目录、fileid、文件后缀名（由客户端指定，主要用于区分文件类型）拼接而成。</div></pre></td></tr></table></figure>
<blockquote>
<p>客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。</p>
</blockquote>
<p><img src="http://og0sybnix.bkt.clouddn.com/fastdfs_name.jpg" alt=""></p>
<h5 id="文件同步"><a href="#文件同步" class="headerlink" title="文件同步"></a>文件同步</h5><p>写文件时，客户端将文件写至<code>group</code>内一个<code>storage server</code>即认为写文件成功，<code>storage server</code>写完文件后，会由后台线程将文件同步至同<code>group</code>内其他的<code>storage server</code>。</p>
<p>每个<code>storage</code>写文件后，同时会写一份<code>binlog</code>，<code>binlog</code>里不包含文件数据，只包含文件名等元信息，这份<code>binlog</code>用于后台同步，<code>storage</code>会记录向<code>group</code>内其他<code>storage</code>同步的进度，以便重启后能接上次的进度继续同步；进度以时间戳的方式进行记录，所以最好能保证集群内所有<code>server</code>的时钟保持同步。</p>
<p><code>storage</code>的同步进度会作为元数据的一部分汇报到<code>tracker</code>上，<code>tracker</code>在选择读<code>storage</code>的时候会以同步进度作为参考。</p>
<p>​      比如一个group内有A、B、C三个<code>storage server</code>，A向C同步到进度为T1 (T1以前写的文件都已经同步到B上了），B向C同步到时间戳为T2（T2 &gt; T1)，<code>tracker</code>接收到这些同步进度信息时，就会进行整理，将最小的那个做为C的同步时间戳，本例中T1即为C的同步时间戳为T1（即所有T1以前写的数据都已经同步到C上了）；同理，根据上述规则，tracker会为A、B生成一个同步时间戳。</p>
<h5 id="文件下载流程"><a href="#文件下载流程" class="headerlink" title="文件下载流程"></a>文件下载流程</h5><p><img src="http://og0sybnix.bkt.clouddn.com/download_file.jpg" alt=""></p>
<blockquote>
<ol>
<li>Client询问Tracker server可以下载指定文件的Storage server，参数为文件ID（包含组名和文件名）；</li>
<li>Tracker server返回一台可用的Storage server；</li>
<li>Client直接和该Storage server建立连接，完成文件下载 </li>
</ol>
</blockquote>
<h5 id="文件同步延迟问题的提出"><a href="#文件同步延迟问题的提出" class="headerlink" title="文件同步延迟问题的提出"></a>文件同步延迟问题的提出</h5><p>客户端将一个文件上传到一台Storage server后，文件上传工作就结束了。由该Storage server根据binlog中的上传记录将这个文件同步到同组的其他Storage server。这样的文件同步方式是异步方式，异步方式带来了文件同步延迟的问题。新上传文件后，在尚未被同步过去的Storage server上访问该文件，会出现找不到文件的现象。</p>
<h6 id="FastDFS是如何解决文件同步延迟这个问题的呢？"><a href="#FastDFS是如何解决文件同步延迟这个问题的呢？" class="headerlink" title="FastDFS是如何解决文件同步延迟这个问题的呢？"></a>FastDFS是如何解决文件同步延迟这个问题的呢？</h6><p>文件的访问分为两种情况：文件更新和文件下载。文件更新包括设置文件附加属性和删除文件。文件的附加属性包括文件大小、图片宽度、图片高度等。FastDFS中，文件更新操作都会优先选择源Storage server，也就是该文件被上传到的那台<br>Storage server。这样的做法不仅避免了文件同步延迟的问题，而且有效地避免了在多台Storage server上更新同一文件可能引起的时序错乱的问题。</p>
<h6 id="那么文件下载是如何解决文件同步延迟这个问题的呢？"><a href="#那么文件下载是如何解决文件同步延迟这个问题的呢？" class="headerlink" title="那么文件下载是如何解决文件同步延迟这个问题的呢？"></a>那么文件下载是如何解决文件同步延迟这个问题的呢？</h6><p>要回答这个问题，需要先了解文件名中包含了什么样的信息。Storage server生成的文件名中，包含了源Storage server的IP地址和文件创建时间等字段。文件创建时间为UNIX时间戳，后面称为文件时间戳。从文件名或文件ID中，可以反解出这两个字段。然后我们再来看一下，Tracker server是如何准确地知道一个文件已被同步到一台Storage server上的。前面已经讲过，文件同步采用主动推送的方式。另外，每台storage server都会定时向tracker server报告它向同组的其他storage server同步到的文件时间戳。当tracker server收到一台storage server的文件同步报告后，它会依次找出该组内各个storage server（后称作为S）被同步到的文件时间戳最小值，作为S的一个属性记录到内存中。<br>FastDFS对文件同步延迟问题的解决方案<br>下面我们来看一下FastDFS采取的解决方法。<br>一个最简单的解决办法，和文件更新一样，优先选择源Storage server下载文件即可。这可以在Tracker server的配置文件中设置，对应的参数名为download_server。<br>另外一种选择Storage server的方法是轮流选择（round-robin）。当Client询问Tracker server有哪些Storage server可以<br>下载指定文件时，Tracker server返回满足如下四个条件之一的Storage server：</p>
<blockquote>
<ol>
<li><p>该文件上传到的源Storage server，文件直接上传到该服务器上的；</p>
</li>
<li><p>文件创建时间戳 &lt; Storage server被同步到的文件时间戳，这意味着当前文件已经被同步过来了；</p>
</li>
<li><p>文件创建时间戳=Storage server被同步到的文件时间戳，且（当前时间—文件创建时间戳） &gt; 一个文件同步完成需要的最大时间（如5分钟）；</p>
<p>（当前时间—文件创建时间戳） &gt; 文件同步延迟阈值，比如我们把阈值设置为1天，表示文件同步在一天内肯定可以完成。 </p>
</li>
</ol>
</blockquote>
<h3 id="图片服务器的搭建"><a href="#图片服务器的搭建" class="headerlink" title="图片服务器的搭建"></a>图片服务器的搭建</h3><p>因为开发所用，这里就搭建个单机版</p>
<p>安装环境 CentOS6.8 64位</p>
<p>需要gcc的编译环境</p>
<p>需要libevent的包。</p>
<p><code>yum install -y zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip</code></p>
<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="Tracker的安装"><a href="#Tracker的安装" class="headerlink" title="Tracker的安装"></a>Tracker的安装</h5><p>第一步：把源码包上传到linux系统。</p>
<p>第二步：解压缩libfastcommonV1.0.7.tar.gz包。</p>
<p>第三步：进入/root/libfastcommon-1.0.7文件夹执行./make.sh、./make.sh install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">安装libfastcommon</div><div class="line"></div><div class="line">下载最新版本： libfastcommon</div><div class="line">wget https://github.com/happyfish100/libfastcommon/archive/master.zip</div><div class="line">unzip master.zip</div><div class="line"><span class="built_in">cd</span> libfastcommon-master/</div><div class="line">./make.sh</div><div class="line">./make.sh install</div></pre></td></tr></table></figure>
<p>第四步：把/usr/lib64/libfastcommon.so文件向/usr/lib文件夹下复制一份。(32位系统可这么做，64位不需要)</p>
<p>第五步：把FastDFS_v5.05.tar.gz解压缩。</p>
<p>第六步：进入/root/FastDFS目录执行：./make.sh、./make.sh install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">wget http://sourceforge.net/projects/fastdfs/files/FastDFS%20Server%20Source%20Code/FastDFS%20Server%20with%20PHP%20Extension%20Source%20Code%20V5.05/FastDFS_v5.05.tar.gz</div><div class="line">tar zxf FastDFS_v5.05.tar.gz &amp;&amp; <span class="built_in">cd</span> FastDFS</div><div class="line">./make.sh</div><div class="line">./make.sh install</div><div class="line">\cp -pa conf/*.conf /etc/fdfs/</div><div class="line"><span class="built_in">cd</span> /etc/fdfs/</div><div class="line">rm -rf *.sample</div></pre></td></tr></table></figure>
<p>第七步：配置trackerServer。</p>
<p>1、 把<code>/root/FastDFS/conf</code>目录下的所以的文件复制到<code>/etc/fdfs</code>目录下。</p>
<p>2、 编辑/etc/fdfs/tracker.conf</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E9%85%8D%E7%BD%AEtracker.png" alt=""></p>
<p>第八步：启动tracker服务</p>
<p><code>/usr/bin/fdfs_trackerd/etc/fdfs/tracker.conf restart</code></p>
<h5 id="Storage服务的安装"><a href="#Storage服务的安装" class="headerlink" title="Storage服务的安装"></a>Storage服务的安装</h5><blockquote>
<p>如果storage和tracker不在同一台服务上需要重复执行Tracker的安装的第一步到第六步</p>
</blockquote>
<p>配置Storage服务：</p>
<p>需要修改<code>/etc/fdfs/storage.conf</code>文件</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/storage.conf1.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/storage.conf2.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/storage.conf3.png" alt=""></p>
<p>启动服务：</p>
<p><code>[root@localhost fdfs]#/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</code></p>
<h5 id="测试上传服务"><a href="#测试上传服务" class="headerlink" title="测试上传服务"></a>测试上传服务</h5><p>修改客户端的配置文件<code>/etc/fdfs/client.conf</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/fastdfsclient.conf.png" alt=""></p>
<p>上传文件：</p>
<p><code>/usr/bin/fdfs_testclient.conf upload xxx.jpg</code></p>
<h5 id="访问图片"><a href="#访问图片" class="headerlink" title="访问图片"></a>访问图片</h5><p>使用FastDFS的Nginx插件和Nginx配合，实现图片的访问。Nginx需要安装到storage服务所在的服务器</p>
<p>安装步骤：</p>
<p>第一步：把插件包解压缩。fastdfs-nginx-module_v1.16.tar.gz</p>
<p>第二步：编辑/root/fastdfs-nginx-module/src/config文件。删除其中的local字样</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">wget http://nginx.org/download/nginx-1.8.0.tar.gz</div><div class="line">http://sourceforge.net/projects/fastdfs/files/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz/download</div><div class="line"></div><div class="line">tar zxf fastdfs-nginx-module_v1.16.tar.gz &amp;&amp; tar zxf nginx-1.8.0.tar.gz </div><div class="line"></div><div class="line"><span class="comment">#修改模块中对应的路径，要不然模块不能正确安装加载</span></div><div class="line"><span class="built_in">cd</span> fastdfs-nginx-module/src</div><div class="line">vi conf   <span class="comment">#更改如下， 去掉local，并指定lib64（64系统）</span></div><div class="line">CORE_INCS=<span class="string">"<span class="variable">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon/"</span></div><div class="line">CORE_LIBS=<span class="string">"<span class="variable">$CORE_LIBS</span> -L/usr/lib64 -lfastcommon -lfdfsclient"</span></div></pre></td></tr></table></figure>
<p>第三步：把<code>/root/fastdfs-nginx-module/src/mod_fastdfs.conf</code>文件复制到<code>/etc/fdfs</code>目录下。</p>
<p>第四步：把<code>/usr/lib64/libfdfsclient.so</code>文件复制到<code>/usr/lib</code>目录下(32位系统，64位系统不需要)</p>
<p>第五步：编译Nginx</p>
<p>对Nginx进行config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">./configure \</div><div class="line">--prefix=/usr/<span class="built_in">local</span>/nginx \</div><div class="line">--pid-path=/var/run/nginx/nginx.pid \</div><div class="line">--lock-path=/var/lock/nginx.lock \</div><div class="line">--error-log-path=/var/<span class="built_in">log</span>/nginx/error.log \</div><div class="line">--http-log-path=/var/<span class="built_in">log</span>/nginx/access.log \</div><div class="line">--with-http_gzip_static_module \</div><div class="line">--http-client-body-temp-path=/var/temp/nginx/client \</div><div class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</div><div class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</div><div class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</div><div class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</div><div class="line">--add-module=/root/fastdfs-nginx-module/src</div></pre></td></tr></table></figure>
<p>第六步：配置<code>Nginx</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/fastdfs_nginx.png" alt=""></p>
<p>第七步：编辑<code>Nginx</code>插件的配置文件：</p>
<p>修改<code>/etc/fdfs/mod_fastdfs.conf</code>文件</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/mod_fastdfs1.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/mod_fastdfs2.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/mod_fastdfs3.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/mod_fastdfs4.png" alt=""></p>
<p>第八步：启动<code>Nginx</code></p>
<p>最後，再多说一点 这是之前自己 笔记的一点心得，贴出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">nginx通过插件fastdfs-nginx-module_v1.16.tar管理访问/group1/M00/过来的路径</div><div class="line">这是插件的日志路径</div><div class="line"># the base path to store log files</div><div class="line">base_path=/tmp</div><div class="line">这里接收管理storage存放路径</div><div class="line"># store_path#, based 0, if store_path0 not exists, it&apos;s value is base_path</div><div class="line"># the paths must be exist</div><div class="line"># must same as storage.conf 注意看这些注释，然后就知道怎么配了</div><div class="line">store_path0=/home/fastdfs/storage</div><div class="line">通过下面来和索引器联系起来</div><div class="line"># valid only when load_fdfs_parameters_from_tracker is true</div><div class="line">tracker_server=192.168.42.129:22122</div></pre></td></tr></table></figure>
<p>忘说了：<br>启动测试前，开放端口号端口给浏览器访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 22122 -j ACCEPT</div><div class="line">#然后保存：</div><div class="line">/etc/rc.d/init.d/iptables save</div><div class="line">#重启防火墙以便改动生效:(或者直接重启系统)</div><div class="line">/etc/init.d/iptables restart</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城-图片服务器的搭建与使用-五&quot;&gt;&lt;a href=&quot;#Migo商城-图片服务器的搭建与使用-五&quot; class=&quot;headerlink&quot; title=&quot;Migo商城  图片服务器的搭建与使用 五&quot;&gt;&lt;/a&gt;Migo商城  图片服务器的搭建与使用 五&lt;/h2&gt;&lt;p&gt;这里简单说下&lt;code&gt;fastdfs&lt;/code&gt;的说明搭建使用，回头专门出附章来讲这块的&lt;code&gt;api&lt;/code&gt;和各种配置，这里就来过简易版的，能进行开发就可。&lt;/p&gt;
&lt;h3 id=&quot;什么是FastDFS&quot;&gt;&lt;a href=&quot;#什么是FastDFS&quot; class=&quot;headerlink&quot; title=&quot;什么是FastDFS&quot;&gt;&lt;/a&gt;什么是FastDFS&lt;/h3&gt;&lt;p&gt;​      &lt;code&gt;FastDFS&lt;/code&gt;是一个开源的轻量级分布式文件系统。它解决了大数据量存储和负载均衡等问题。特别适合以中小文件（建议范围：&lt;code&gt;4KB&amp;lt; file_size &amp;lt;500MB）&lt;/code&gt;为载体的在线服务，如相册网站、视频网站等等。&lt;/p&gt;
&lt;p&gt;​      &lt;code&gt;FastDFS&lt;/code&gt;是用c语言编写的一款开源的分布式文件系统。&lt;code&gt;FastDFS&lt;/code&gt;为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用&lt;code&gt;FastDFS&lt;/code&gt;很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。&lt;/p&gt;
&lt;h3 id=&quot;FastDFS的设计理念&quot;&gt;&lt;a href=&quot;#FastDFS的设计理念&quot; class=&quot;headerlink&quot; title=&quot;FastDFS的设计理念&quot;&gt;&lt;/a&gt;FastDFS的设计理念&lt;/h3&gt;&lt;p&gt;和现有的类&lt;code&gt;Google FS&lt;/code&gt;分布式文件系统相比，&lt;code&gt;FastDFS&lt;/code&gt;的架构和设计理念有其独到之处，主要体现在&lt;code&gt;轻量级&lt;/code&gt;、&lt;code&gt;分组方式&lt;/code&gt;和&lt;code&gt;对等结构&lt;/code&gt;三个方面。&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 参考通用mapper思想对service代码的二次优化封装  四</title>
    <link href="https://muyinchen.github.io/2016/11/10/Migo%E5%95%86%E5%9F%8E%20%20%E5%AF%B9%E4%BB%A3%E7%A0%81%E7%9A%84%E4%BA%8C%E6%AC%A1%E4%BC%98%E5%8C%96%E5%B0%81%E8%A3%85%20%20%E5%9B%9B/"/>
    <id>https://muyinchen.github.io/2016/11/10/Migo商城  对代码的二次优化封装  四/</id>
    <published>2016-11-10T13:13:25.997Z</published>
    <updated>2016-11-13T03:49:52.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城-参考通用mapper思想对service代码的二次优化封装-四"><a href="#Migo商城-参考通用mapper思想对service代码的二次优化封装-四" class="headerlink" title="Migo商城  参考通用mapper思想对service代码的二次优化封装  四"></a>Migo商城  参考通用mapper思想对service代码的二次优化封装  四</h2><p>上一篇通过域名访问，nginx反向代理的效果图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/nginx%E6%95%88%E6%9E%9C.png" alt=""></p>
<p>然后步入正题：</p>
<p>对比第一版的代码，这里再贴段的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCatService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemCatMapper itemCatMapper;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ItemCat&gt; <span class="title">getItemCatList</span><span class="params">(Long parentId)</span> </span>&#123;</div><div class="line">        ItemCat example = <span class="keyword">new</span> ItemCat();</div><div class="line">        example.setParentId(parentId);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.itemCatMapper.select(example);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>其实很多service都会用到这些增删改查，既然通用mapper可以做封装，我们何不学通用mapper做过通用service？自己造个适合自己的小轮子</p>
<p>要添加的通用方法：</p>
<p>1、  <code>queryById</code></p>
<p>2、  <code>queryAll</code></p>
<p>3、  <code>queryOne</code></p>
<p>4、  <code>queryListByWhere</code></p>
<p>5、  <code>queryPageListByWhere</code></p>
<p>6、  <code>save</code></p>
<p>7、  <code>update</code></p>
<p>8、  <code>deleteById</code></p>
<p>9、  <code>deleteByIds</code></p>
<p>10、 <code>deleteByWhere</code><br><a id="more"></a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.BasePojo;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/10.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseService</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePojo</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//这里利用了Spring4才支持的泛型注入</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Mapper&lt;T&gt; mapper;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据id查询</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">queryById</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.selectByPrimaryKey(id);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据条件查询一条数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">queryOne</span><span class="params">(T example)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.selectOne(example);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询所有数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryAll</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.select(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据条件查询数据列表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">queryListByWhere</span><span class="params">(T example)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.select(example);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页查询数据列表</div><div class="line">     * <span class="doctag">@param</span> example 查询条件</div><div class="line">     * <span class="doctag">@param</span> page 页数</div><div class="line">     * <span class="doctag">@param</span> rows 页面大小</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> PageInfo&lt;T&gt; <span class="title">queryPageListByWhere</span><span class="params">(T example,Integer page,Integer rows)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//设置分页参数</span></div><div class="line">        PageHelper.startPage(page,rows);</div><div class="line">        <span class="comment">//执行查询</span></div><div class="line">        List&lt;T&gt; list = <span class="keyword">this</span>.mapper.select(example);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;T&gt;(list);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 新增数据，注意设置数据的创建和更新时间</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">save</span><span class="params">(T t)</span></span>&#123;</div><div class="line">        Date date=<span class="keyword">new</span> Date();</div><div class="line">        t.setCreated(date);</div><div class="line">        t.setUpdated(date);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.insertSelective(t);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新数据，设置数据的更新时间</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">update</span><span class="params">(T t)</span></span>&#123;</div><div class="line">        t.setUpdated(<span class="keyword">new</span> Date());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.updateByPrimaryKey(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新数据，设置数据的更新时间（更新部分数据）</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">updateSelective</span><span class="params">(T t)</span></span>&#123;</div><div class="line">        t.setUpdated(<span class="keyword">new</span> Date());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.updateByPrimaryKeySelective(t);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据id删除数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">deleteById</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.deleteByPrimaryKey(id);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 批量删除数据</div><div class="line">     * <span class="doctag">@param</span> clazz</div><div class="line">     * <span class="doctag">@param</span> property</div><div class="line">     * <span class="doctag">@param</span> list</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">deleteByIds</span><span class="params">(Class&lt;T&gt; clazz,String property,List&lt;Object&gt; list)</span></span>&#123;</div><div class="line">        Example example=<span class="keyword">new</span> Example(clazz);</div><div class="line">        example.createCriteria().andIn(property,list);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.deleteByExample(example);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据条件删除数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">deleteByWhere</span><span class="params">(T example)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mapper.delete(example);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，之前的service就可以各种省事了</p>
<p>首先改造<code>ItemCatService</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/8.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCatService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemCat</span>&gt; </span>&#123;</div><div class="line">   <span class="comment">/* @Autowired</span></div><div class="line">    private ItemCatMapper itemCatMapper;</div><div class="line"></div><div class="line"></div><div class="line">    public List&lt;ItemCat&gt; getItemCatList(Long parentId) &#123;</div><div class="line">        ItemCat example = new ItemCat();</div><div class="line">        example.setParentId(parentId);</div><div class="line">        return this.itemCatMapper.select(example);</div><div class="line">    &#125;*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着改造<code>ItemCatController</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item/cat"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCatController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemCatService itemCatService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据父节点id查询商品类目表</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;ItemCat&gt;&gt; getItemCatList(</div><div class="line">        <span class="meta">@RequestParam</span>(value = <span class="string">"id"</span>,defaultValue = <span class="string">"0"</span>) Long parentId</div><div class="line">)&#123;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//List&lt;ItemCat&gt; itemcats=itemCatService.getItemCatList(parentId);</span></div><div class="line">        ItemCat example=<span class="keyword">new</span> ItemCat();</div><div class="line">        example.setParentId(parentId);</div><div class="line">        List&lt;ItemCat&gt; itemCats = itemCatService.queryListByWhere(example);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span>==itemCats&amp;&amp;itemCats.isEmpty())&#123;</div><div class="line">            <span class="comment">//资源不存在，响应404</span></div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  ResponseEntity.ok(itemCats);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="comment">// 出错，响应500</span></div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>顺带改造下写的那个测试类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/8.</div><div class="line"> */</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class) <span class="comment">//表示继承了SpringJUnit4ClassRunner类</span></div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath*:spring/*.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger=Logger.getLogger(Test.class);</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> ItemCatService itemCatService;</div><div class="line">    <span class="meta">@org</span>.junit.<span class="function">Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span>&#123;</div><div class="line">       <span class="comment">// List&lt;ItemCat&gt; itemCatList = itemCatService.getItemCatList(0L);</span></div><div class="line">        ItemCat example=<span class="keyword">new</span> ItemCat();</div><div class="line">        example.setParentId(<span class="number">0L</span>);</div><div class="line">        List&lt;ItemCat&gt; itemCatList = itemCatService.queryListByWhere(example);</div><div class="line">        logger.info(JSON.toJSONString(itemCatList));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行项目，完美，就不截图了，改造成功</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城-参考通用mapper思想对service代码的二次优化封装-四&quot;&gt;&lt;a href=&quot;#Migo商城-参考通用mapper思想对service代码的二次优化封装-四&quot; class=&quot;headerlink&quot; title=&quot;Migo商城  参考通用mapper思想对service代码的二次优化封装  四&quot;&gt;&lt;/a&gt;Migo商城  参考通用mapper思想对service代码的二次优化封装  四&lt;/h2&gt;&lt;p&gt;上一篇通过域名访问，nginx反向代理的效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/nginx%E6%95%88%E6%9E%9C.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后步入正题：&lt;/p&gt;
&lt;p&gt;对比第一版的代码，这里再贴段的&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ItemCatService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ItemCatMapper itemCatMapper;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;ItemCat&amp;gt; &lt;span class=&quot;title&quot;&gt;getItemCatList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Long parentId)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ItemCat example = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ItemCat();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        example.setParentId(parentId);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.itemCatMapper.select(example);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;其实很多service都会用到这些增删改查，既然通用mapper可以做封装，我们何不学通用mapper做过通用service？自己造个适合自己的小轮子&lt;/p&gt;
&lt;p&gt;要添加的通用方法：&lt;/p&gt;
&lt;p&gt;1、  &lt;code&gt;queryById&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、  &lt;code&gt;queryAll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、  &lt;code&gt;queryOne&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4、  &lt;code&gt;queryListByWhere&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5、  &lt;code&gt;queryPageListByWhere&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;6、  &lt;code&gt;save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;7、  &lt;code&gt;update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;8、  &lt;code&gt;deleteById&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;9、  &lt;code&gt;deleteByIds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;10、 &lt;code&gt;deleteByWhere&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 Nginx的安装与使用 三</title>
    <link href="https://muyinchen.github.io/2016/11/10/Migo%E5%95%86%E5%9F%8E2.0%C2%A0Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%20%E4%B8%89/"/>
    <id>https://muyinchen.github.io/2016/11/10/Migo商城2.0 Nginx的安装与使用 三/</id>
    <published>2016-11-10T10:10:30.743Z</published>
    <updated>2016-11-13T03:51:05.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Migo商城2-0-Nginx的安装与使用-三"><a href="#Migo商城2-0-Nginx的安装与使用-三" class="headerlink" title="Migo商城2.0 Nginx的安装与使用 三"></a>Migo商城2.0 Nginx的安装与使用 三</h1><p>因这方面的网上的文档很多，在此就不过多仔细说明了,因操作过程一致，这里拿nginx-1.9.12来做示例</p>
<h4 id="Nginx的特点"><a href="#Nginx的特点" class="headerlink" title="Nginx的特点"></a>Nginx的特点</h4><blockquote>
<p>1、Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 。它支<br>持内核 Poll 模型，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数</p>
<p> 2、Nginx 具有很高的稳定性，Nginx 采取了分阶段资源分配技术，使得它的 CPU 与<br>内存占用率非常低。</p>
<p> 3、Nginx 代码质量非常高，代码很规范，手法成熟，模块扩展也很容易。</p>
<p> 4、Nginx 还可以实现无缓存的反向代理加速，简单的负载均衡和容错。<br><a id="more"></a></p>
</blockquote>
<h4 id="Nginx的应用场景"><a href="#Nginx的应用场景" class="headerlink" title="Nginx的应用场景"></a>Nginx的应用场景</h4><blockquote>
<p>1、http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。</p>
<p>2、虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</p>
<p>3、反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用</p>
<p>nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况</p>
</blockquote>
<p>在下载源码包并编译之前，先安装好开发环境：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@code ~]<span class="comment"># yum install pcre-devel openssl-devel -y 使nginx支持正则表达式及https加密</span></div><div class="line"></div><div class="line">[root@code ~]<span class="comment"># yum groupinstall “Desktop Platform Development” “Development tools” -y 开发包</span></div></pre></td></tr></table></figure>
<p>具体的nginx支持的库还是专门说下算了：</p>
<blockquote>
<p>nginx是C语言开发，建议在linux上运行</p>
<p>  <strong>gcc</strong></p>
<pre><code>安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc：yum install gcc-c++ 
</code></pre><p>  <strong>PCRE</strong></p>
<pre><code>PCRE(PerlCompatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。
</code></pre><p><code>yuminstall -y pcre pcre-devel</code></p>
<p>注：pcre-devel是使用pcre开发的一个二次开发库。nginx也需要此库。</p>
<p> <strong>zlib</strong></p>
<pre><code>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。
</code></pre><p><code>yuminstall -y zlib zlib-devel</code></p>
<p> <strong>openssl</strong></p>
<pre><code>OpenSSL是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。

nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。
</code></pre><p><code>yuminstall -y openssl openssl-devel</code></p>
</blockquote>
<h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[root@code ~]<span class="comment"># groupadd -r nginx 创建系统组nginx</span></div><div class="line"></div><div class="line">[root@code ~]<span class="comment"># useradd -g nginx -s /sbin/nologin -r nginx 创建用户nginx并添加进nginx组</span></div><div class="line"></div><div class="line">[root@code ~]<span class="comment"># yum install wget -y 安装wget工具</span></div><div class="line"></div><div class="line">[root@code ~]<span class="comment"># wget http://nginx.org/download/nginx-1.9.12.tar.gz 下载源码包到本地</span></div><div class="line"></div><div class="line">[root@code ~]<span class="comment"># tar xf nginx-1.9.12.tar.gz 解压源码包</span></div><div class="line"></div><div class="line">[root@code ~]<span class="comment"># cd nginx-1.9.12</span></div><div class="line"></div><div class="line">[root@code nginx-1.9.12]<span class="comment"># mkdir -pv /data/logs/nginx 创建ngnix日志目录</span></div><div class="line"></div><div class="line">[root@code nginx-1.9.12]<span class="comment"># ./configure \</span></div><div class="line">--prefix=/usr/<span class="built_in">local</span>/nginx \ </div><div class="line">--user=nginx --group=nginx \</div><div class="line">--pid-path=/var/run/nginx/nginx.pid \</div><div class="line">--lock-path=/var/lock/nginx.lock \</div><div class="line">--with-http_ssl_module \ </div><div class="line">--with-http_image_filter_module \ </div><div class="line">--with-http_gzip_static_module \</div><div class="line">--http-client-body-temp-path=/var/temp/nginx/client \</div><div class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</div><div class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</div><div class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</div><div class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</div><div class="line">--with-http_gunzip_module \ </div><div class="line">--with-http_stub_status_module \ </div><div class="line">--http-log-path=/data/logs/nginx/access.log \ </div><div class="line">--error-log-path=/data/logs/nginx/error.log 配置出编译文件，其中的编译选项我会在文章后面列出</div><div class="line"></div><div class="line">[root@code nginx-1.9.12]<span class="comment"># make &amp; make install 编译并安装</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：上边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录</strong></p>
</blockquote>
<p>下面是编译后生成的所有文件： </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/nginx/</div><div class="line">├── conf</div><div class="line">│ ├── fastcgi.conf</div><div class="line">│ ├── fastcgi.conf.default</div><div class="line">│ ├── fastcgi_params</div><div class="line">│ ├── fastcgi_params.default</div><div class="line">│ ├── koi-utf</div><div class="line">│ ├── koi-win</div><div class="line">│ ├── mime.types</div><div class="line">│ ├── mime.types.default</div><div class="line">│ ├── nginx.conf 主配置文件</div><div class="line">│ ├── nginx.conf.default</div><div class="line">│ ├── scgi_params</div><div class="line">│ ├── scgi_params.default</div><div class="line">│ ├── uwsgi_params</div><div class="line">│ ├── uwsgi_params.default</div><div class="line">│ └── win-utf</div><div class="line">├── html 网站根目录</div><div class="line">│ ├── 50x.html</div><div class="line">│ └── index.html</div><div class="line">├── logs</div><div class="line">└── sbin</div><div class="line">　　 └── nginx nginx主程序</div></pre></td></tr></table></figure>
<p>修改Nginx的主页文件(为了测试)： <code>vim /usr/local/nginx/html/index.html</code> </p>
<p>修改内容保存：</p>
<p><code>&lt;h1&gt;Welcome!&lt;/h1&gt;</code><br><code>&lt;h2&gt;This is Nginx site&lt;/h2&gt;</code> </p>
<h4 id="启动nginx服务"><a href="#启动nginx服务" class="headerlink" title="启动nginx服务"></a>启动nginx服务</h4><p><code>[root@code ~]# /usr/local/nginx/sbin/nginx 没有报错就是启动正常</code><br><code>[root@code ~]# ss -tnl | grep “80” 查看80端口是否已经启动</code><br><code>LISTEN　　　0　　　128　　　:80　　　:*　　##80端口已经启动</code> </p>
<h4 id="测试页面是否能正常访问"><a href="#测试页面是否能正常访问" class="headerlink" title="测试页面是否能正常访问"></a>测试页面是否能正常访问</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@code ~]<span class="comment"># curl http://192.168.10.1</span></div><div class="line"></div><div class="line">&lt;h1&gt;Welcome!&lt;/h1&gt; </div><div class="line"></div><div class="line">&lt;h2&gt;This is Nginx site&lt;/h2&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>输出以上信息表示能够正常访问 </p>
</blockquote>
<h4 id="Nginx的配置"><a href="#Nginx的配置" class="headerlink" title="Nginx的配置"></a>Nginx的配置</h4><ol>
<li><p>配置http服务器，配置虚拟机</p>
<p>a)        通过端口区分，一个nginx可以同时监听多个端口</p>
<p>b)       通过ip区分，可以在一台服务器上绑定多个ip来根据ip区分。（很少使用）</p>
<p>c)        通过域名区分，最常见的方式。</p>
</li>
<li><p>配置反向代理、负载均衡</p>
<blockquote>
<p>需要修改的配置文件：nginx.conf</p>
<p>http节点下一个server节点就是一个虚拟机</p>
</blockquote>
<p>​</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/nginx.png" alt=""></p>
<p>​</p>
<p>关于域名这个东西这里就不解释了，不懂可以谷歌百度的</p>
<p>这里把图中的反向代理，负载均衡再多说两句的，其实图里都讲到了</p>
<blockquote>
<p>作为反向代理服务器时，nginx只是转发请求。</p>
<p>可以配置多个tomcat，每个tomcat对应不同的域名</p>
</blockquote>
<p>负载均衡用图来表示下</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt=""></p>
<p>​</p>
<p>另附平常用的比较多的命令</p>
<blockquote>
<p>进入<code>sbin</code>目录 命令 <code>cd /usr/local/nginx/sbin</code> </p>
<p><code>Nginx</code>的关闭：</p>
<p><code>[root@localhost sbin]# ./nginx -s stop</code></p>
<p><code>Nginx</code>重新加载配置文件：</p>
<p><code>[root@localhost sbin]# ./nginx -s reload</code></p>
<p>验证配置文件是否正确的命令：<br>a、方法一<br><code>/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</code><br>b、进入<code>sbin</code>目录 命令 <code>cd /usr/local/nginx/sbin</code><br>验证命令为 <code>./nginx -t</code><br>出现 <code>XXXXXX is ok</code> 表示配置文件没问题 </p>
<p>​</p>
<p>​</p>
</blockquote>
<p>到此，<code>nginx</code>结束，不过，平时可以用<code>windows</code>下的<code>nginx</code>做开发的，简单易用</p>
<p>具体要用的东西，解压文件到一个全英文的路径下比如<code>d:/aaa/</code></p>
<p>三个命令：(在 CMD 中执行)</p>
<p>启动：<code>start nginx.exe</code></p>
<p>停止：<code>nginx.exe -s stop</code></p>
<p>重新加载：<code>nginx.exe -s reload</code></p>
<p>​</p>
<p>只有2个进程nginx才算是真正的启动成功：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/nginx%E8%BF%9B%E7%A8%8B.png" alt=""></p>
<p>​</p>
<p>​</p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Migo商城2-0-Nginx的安装与使用-三&quot;&gt;&lt;a href=&quot;#Migo商城2-0-Nginx的安装与使用-三&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 Nginx的安装与使用 三&quot;&gt;&lt;/a&gt;Migo商城2.0 Nginx的安装与使用 三&lt;/h1&gt;&lt;p&gt;因这方面的网上的文档很多，在此就不过多仔细说明了,因操作过程一致，这里拿nginx-1.9.12来做示例&lt;/p&gt;
&lt;h4 id=&quot;Nginx的特点&quot;&gt;&lt;a href=&quot;#Nginx的特点&quot; class=&quot;headerlink&quot; title=&quot;Nginx的特点&quot;&gt;&lt;/a&gt;Nginx的特点&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;1、Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 。它支&lt;br&gt;持内核 Poll 模型，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数&lt;/p&gt;
&lt;p&gt; 2、Nginx 具有很高的稳定性，Nginx 采取了分阶段资源分配技术，使得它的 CPU 与&lt;br&gt;内存占用率非常低。&lt;/p&gt;
&lt;p&gt; 3、Nginx 代码质量非常高，代码很规范，手法成熟，模块扩展也很容易。&lt;/p&gt;
&lt;p&gt; 4、Nginx 还可以实现无缓存的反向代理加速，简单的负载均衡和容错。&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
</feed>
