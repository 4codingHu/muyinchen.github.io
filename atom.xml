<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muyinchen.github.io/"/>
  <updated>2017-09-04T09:17:08.684Z</updated>
  <id>https://muyinchen.github.io/</id>
  
  <author>
    <name>知秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring中Bean的作用域</title>
    <link href="https://muyinchen.github.io/2017/08/25/Spring%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://muyinchen.github.io/2017/08/25/Spring中的作用域/</id>
    <published>2017-08-25T08:39:08.482Z</published>
    <updated>2017-09-04T09:17:08.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring中Bean的作用域"><a href="#Spring中Bean的作用域" class="headerlink" title="Spring中Bean的作用域"></a>Spring中Bean的作用域</h1><blockquote>
<p>Spring Bean，就像JavaBeans中一样，有其使用的作用域。前面的文章中我们已经看到其中的两个:singleton 和prototype。这次来讲讲另外2个作用域(总共六个，参考本人<a href="https://github.com/muyinchen/Spring-Framework-5.0.0.M3-CN/blob/master/3.5-bean.md" target="_blank" rel="external">Spring5文档翻译</a>)。</p>
</blockquote>
<p>本文将分为两部分。每个部分描述一个bean作用域。所以，在第一个，我们将探讨下<code>request请求</code>作用域。第二个描述的是<code>session</code>和<code>全局session</code>(此在Spring5文档中已经消失)的作用域。每一部分将由理论和实践组成。需要注意的是:这些概念仅在Web Spring应用程序上下文中有效。</p>
<h2 id="Spring中request请求作用域是什么？"><a href="#Spring中request请求作用域是什么？" class="headerlink" title="Spring中request请求作用域是什么？"></a>Spring中request请求作用域是什么？</h2><p>每个请求初始化具有此作用域的Bean注解。这听起来像是原型作用域的描述，但它们有一些差异。第一个区别是原型作用域在Spring的上下文中可用。而请求作用域仅适用于Web应用程序。第二个是原型bean根据需求进行初始化，而请求bean是在每个请求下构建的。需要说的是，request作用域bean在其作用域内有且仅有一个实例。而你可以拥有一个或多个原型作用域bean实例。</p>
<p>在以下代码中，你可以看到请求作用域bean的示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCartRequest"</span> <span class="attr">class</span>=<span class="string">"com.waitingforcode.scope.ShoppingCartRequest"</span> <span class="attr">scope</span>=<span class="string">"request"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当使用注解驱动组件或Java Config时，<code>@RequestScope</code>注解可以用于将一个组件分配给<code>request</code>作用域。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestScope</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCartRequest</span> </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// request bean</span></div><div class="line"> </div><div class="line"><span class="comment">// injection sample</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ShoppingCartRequest shoppingCartRequest;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"shoppingCartRequest is :"</span>+shoppingCartRequest);</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意<strong><bean>定义内</bean></strong>存在的<strong><aop: scoped-proxy=""></aop:></strong>标签。这代表着使用代理对象。所以实际上，TestController持有的是代理对象的引用。我们所有的调用该对象都会转发到真正的<code>ShoppingCartRequest</code>对象。</p>
<p>有时我们需要使用<code>DispatcherServlet</code>的另一个<code>servlet</code>来处理请求。在这种情况下，我们必须确保Spring中所有请求都可用(否则可以抛出与下面类似的异常)。为此，我们需要在<code>web.xml</code>中定义一个监听器:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<p>调用/测试URL后，你应该能在日志中的发现以下信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shoppingCartRequest is :com.waitingforcode.scope.ShoppingCartRequest@<span class="number">2586</span>b11c</div><div class="line">shoppingCartRequest is :com.waitingforcode.scope.ShoppingCartRequest@<span class="number">3</span>bd5b945</div></pre></td></tr></table></figure>
<p>如果我们尝试在单例bean中使用request作用域的bean，则会在应用程序上下文加载阶段抛出一个<code>BeanCreationException</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'testController'</span>: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: <span class="keyword">private</span> com.waitingforcode.scope.ShoppingCartRequest com.waitingforcode.controller.TestController.shoppingCartRequest; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:<span class="number">292</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1185</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">537</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">475</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory$<span class="number">1</span>.getObject(AbstractBeanFactory.java:<span class="number">304</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">228</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">300</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">195</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class="number">700</span>)</div><div class="line">	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class="number">760</span>)</div><div class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">482</span>)</div><div class="line">	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:<span class="number">381</span>)</div><div class="line">	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:<span class="number">293</span>)</div><div class="line">	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:<span class="number">106</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:<span class="number">4701</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5204</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5199</span>)</div><div class="line">	at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)</div><div class="line">	at java.util.concurrent.FutureTask.run(Unknown Source)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</div><div class="line">	at java.lang.Thread.run(Unknown Source)</div><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: <span class="keyword">private</span> com.waitingforcode.scope.ShoppingCartRequest com.waitingforcode.controller.TestController.shoppingCartRequest; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:<span class="number">508</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:<span class="number">87</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:<span class="number">289</span>)</div><div class="line">	... <span class="number">21</span> more</div><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">353</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">195</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:<span class="number">1014</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:<span class="number">957</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:<span class="number">855</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:<span class="number">480</span>)</div><div class="line">	... <span class="number">23</span> more</div><div class="line">Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:<span class="number">131</span>)</div><div class="line">	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:<span class="number">41</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">338</span>)</div><div class="line">	... <span class="number">28</span> more</div></pre></td></tr></table></figure>
<h2 id="什么是Spring的Session作用域？"><a href="#什么是Spring的Session作用域？" class="headerlink" title="什么是Spring的Session作用域？"></a>什么是Spring的Session作用域？</h2><p>Session作用域的bean与request 作用域的bean没有太大的不同。它们也与纯Web应用程序上下文相关联。注解为Session作用域的Bean对于每个用户的会话仅创建一次。他们在会话结束时被破坏销毁掉。</p>
<p>由Session作用域限制的Bean可以被认为是面向Web的单例，因为给定环境(用户会话)仅存在一个实例。但请记住，你无法在Web应用程序上下文中使用它们(说个好理解点的，就是一个函数内部自定义变量所在的作用域，函数执行完就销毁了，没有什么逃逸，关于此处更深入的理解请看我的博文<a href="https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/">由域联系到的逃逸分析</a>)。</p>
<p>想知道Session作用域bean在Spring中的操作，我们需要在配置文件中定义一个bean:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCartRequest"</span> <span class="attr">class</span>=<span class="string">"com.waitingforcode.scope.ShoppingCartSession"</span> <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过<code>@Autowired</code>注解，查找这个bean的方式与request 作用域的bean相同。可以看到以下结果:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shoppingCartSession is :com.waitingforcode.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.waitingforcode.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.waitingforcode.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.waitingforcode.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.waitingforcode.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.waitingforcode.scope.ShoppingCartSession@<span class="number">2f</span>87fafc</div></pre></td></tr></table></figure>
<p>你可以看到，前5个打印输出代表相同的对象。最后一个是不同的。这是什么意思 ?简单来说，这代表 着一个新的用户使用自动注入的Session作用域访问该页面。我们可以通过打开两个浏览器的测试页(/test)来观察它。每个都将初始化一个新的会话Session，因此也就创建新的<code>ShoppingCartSession bean</code>实例。</p>
<p>关于全局会话作用域(Global session scope)属于4.3x的范畴了，Spring5已经没有了，Spring5文档是去掉了因为4的存在所以还是说两句，它保留给portlet应用程序。 是不是一脸懵逼，so，来解释一下portlet是什么。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与servlet不同，每个portlet都有不同的会话。在这种情况下，Spring提供了一个名为<code>global-session</code>的作用域。通过它，一个bean可以通过应用程序中的多个portlet共享。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userPreferences"</span> <span class="attr">class</span>=<span class="string">"com.foo.UserPreferences"</span> <span class="attr">scope</span>=<span class="string">"globalSession"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>至此，我们解释了请求和面向会话的作用域。第一个的作用是在每个request请求上创建新的bean。第二个在Session会话开始的时候初始化bean。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring中Bean的作用域&quot;&gt;&lt;a href=&quot;#Spring中Bean的作用域&quot; class=&quot;headerlink&quot; title=&quot;Spring中Bean的作用域&quot;&gt;&lt;/a&gt;Spring中Bean的作用域&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Sprin
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-@Autowired</title>
    <link href="https://muyinchen.github.io/2017/08/23/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@Autowired/"/>
    <id>https://muyinchen.github.io/2017/08/23/Spring5源码解析-@Autowired/</id>
    <published>2017-08-23T04:17:11.417Z</published>
    <updated>2017-08-24T04:31:38.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Autowired"><a href="#Spring5源码解析-Autowired" class="headerlink" title="Spring5源码解析-@Autowired"></a>Spring5源码解析-@Autowired</h1><blockquote>
<p>你有没有思考过Spring中的@Autowired注解？通常用于方便依赖注入，而隐藏在这个过程之后的机制到底是怎样，将在本篇中进行讲述。</p>
</blockquote>
<a id="more"></a>
<h2 id="Autowired所具有的功能"><a href="#Autowired所具有的功能" class="headerlink" title="@Autowired所具有的功能"></a>@Autowired所具有的功能</h2><p><code>@Autowired</code>是一个用来执行依赖注入的注解。每当一个<code>Spring</code>管理的<code>bean</code>发现有这个注解时候，它会直接注入相应的另一个<code>Spring</code>管理的<code>bean</code>。</p>
<p><strong>该注解可以在不同的层次上应用:</strong> </p>
<ul>
<li><strong>类字段:</strong>Spring将通过扫描自定义的<code>packages</code>(例如在我们所注解的<code>controllers</code>)或通过在配置文件中直接查找bean。 </li>
<li><strong>方法:</strong>使用<code>@Autowired</code>注解的每个方法都要用到依赖注入。但要注意的是，方法签名中呈现的所有对象都必须是Spring所管理的bean。如果你有一个方法，比如<code>setTest(Article article, NoSpringArticle noSpringArt)</code> ，其中只有一个参数 (<em><code>Article article</code></em>)是由Spring管理的，那么就将抛出一个<strong>org.springframework.beans.factory.BeanCreationException</strong>异常。这是由于Spring容器里并没有指定的一个或多个参数所指向的bean，所以也就无法解析它们。完整的异常跟踪如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'testController'</span>: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: <span class="keyword">public</span> <span class="keyword">void</span> org.krams.tutorial.controller.TestController.ix(com.mysite.controller.IndexController,com.mysite.nospring.data.Article); nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.mysite.nospring.data.Article] found <span class="keyword">for</span> dependency: expected at least <span class="number">1</span> bean which qualifies as autowire candidate <span class="keyword">for</span> <span class="keyword">this</span> dependency. Dependency annotations: &#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>构造函数:</strong><code>@Autowired</code>的工作方式和方法相同。</li>
</ul>
<p><strong>对象注入需要遵循一些规则。一个bean可以按照下面的方式注入: </strong></p>
<ul>
<li><strong>名称:</strong>bean解析是通过bean名称(看后面的例子)。 </li>
<li><strong>类型:</strong>解析过程基于bean的类型。</li>
</ul>
<p>在某些情况下，<code>@Autowired</code>应该通过<code>@Qualifier</code>注解协作注入。例如下面几个是相同类型的bean:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment1"</span> <span class="attr">class</span>=<span class="string">"com.waitingforcode.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"Content of the 1st comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment2"</span> <span class="attr">class</span>=<span class="string">"com.waitingforcode.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"Content of the 2nd comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面这种情况，假如只是一个简单的<code>@Autowired</code>，<code>Spring</code>根本不知道你要注入哪个<code>bean</code>。这就是为什么我们要使用<code>@Qualifier(value =“beanName”)</code>这个注解。在我们的例子中，要从 <code>com.waitingforcode.Comment</code>这个类型的bean中区分<code>comment1</code>,<code>comment2</code>，我们可以写下面的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span>(value=<span class="string">"comment1"</span>)</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Comment firstComment;</div><div class="line"> </div><div class="line"><span class="meta">@Qualifier</span>(value=<span class="string">"comment2"</span>)</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Comment secondComment;</div></pre></td></tr></table></figure>
<h2 id="在Spring中如何使用-Autowired"><a href="#在Spring中如何使用-Autowired" class="headerlink" title="在Spring中如何使用@Autowired"></a>在Spring中如何使用@Autowired</h2><p>正如前面部分所看到的，我们知道了在Spring中实现<code>@Autowired</code>的不同方法。在这一部分中，我们将使用<code>XML</code>配置的方式激活<code>@Autowired</code>注解来自动注入。然后，我们将编写一个简单的类并配置一些bean。最后，我们将分别在另外两个类中使用它们:由@Controller注解的控件和不由Spring所管理的类。(为什么用<code>XML</code>配置来做例子，我觉得这样更直观，其实XML和使用注解没多少区别，都是往容器里添加一些bean和组织下彼此之间的依赖而已，不必要非要拘泥于一种形式，哪种顺手用哪种，不过<code>Springboot</code>自定义的这些还是推荐使用注解了)</p>
<p>我们从启动注解的自动注入开始:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>你必须将上面这个放在应用程序上下文配置中。它可以使在遇到<code>@Autowired注解</code>时启用依赖注入。</p>
<p>现在，我们来编写和配置我们的bean:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// beans first</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> String content;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// sample controller</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">     </div><div class="line">    <span class="meta">@Qualifier</span>(value=<span class="string">"comment1"</span>)</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment firstComment;</div><div class="line">     </div><div class="line">    <span class="meta">@Qualifier</span>(value=<span class="string">"comment2"</span>)</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment secondComment;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"1st comment text: "</span>+firstComment.getText());</div><div class="line">        System.out.println(<span class="string">"2nd comment text: "</span>+secondComment.getText());</div><div class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// no-Spring managed class</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNoSpring</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment comment;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComment</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (comment == <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"Comment's instance wasn't autowired because this class is not Spring-managed bean"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            comment.setContent(content);</div><div class="line">            System.out.println(<span class="string">"Comment's content: "</span>+comment.getContent());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>XML配置(在前面部分已经看到过):</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment1"</span> <span class="attr">class</span>=<span class="string">"com.specimen.exchanger.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"Content of the 1st comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment2"</span> <span class="attr">class</span>=<span class="string">"com.specimen.exchanger.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"Content of the 2nd comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在，我们打开<code>http://localhost:8080/test</code>来运行<code>TestController</code>。如预期的那样，<code>TestController</code>的注解字段正确地自动注入，而<code>TestNoSpring</code>的注解字段并没有注入进去:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>st comment text: Content of the <span class="number">1</span>st comment</div><div class="line"><span class="number">2</span>nd comment text: Content of the <span class="number">2</span>nd comment</div><div class="line">Comment<span class="string">'s instance wasn'</span>t autowired because <span class="keyword">this</span> <span class="class"><span class="keyword">class</span> <span class="title">is</span> <span class="title">not</span> <span class="title">Spring</span>-<span class="title">managed</span> <span class="title">bean</span></span></div></pre></td></tr></table></figure>
<p>哪里不对 ？TestNoSpring类不由Spring所管理。这就是为什么Spring不能注入Comment实例的依赖。我们将在下一部分中解释这个概念。</p>
<h2 id="Autowired注解背后的工作原理？"><a href="#Autowired注解背后的工作原理？" class="headerlink" title="@Autowired注解背后的工作原理？"></a>@Autowired注解背后的工作原理？</h2><p>在讨论代码细节之前，我们再来了解下基础知识。Spring管理可用于整个应用程序的Java对象bean。他们所在的Spring容器，被称为应用程序上下文。这意味着我们不需要处理他们的生命周期(初始化，销毁)。该任务由此容器来完成。另外，该上下文具有入口点，在Web应用程序中，是dispatcher servlet。容器(也就是该上下文)会在它那里被启动并且所有的bean都会被注入。</p>
<p>说的再清楚点，请看<code>&lt;context:annotation-config /&gt;</code>的定义:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"annotation-config"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span>&lt;![CDATA[</div><div class="line">	Activates various annotations to be detected in bean classes: Spring's @Required and</div><div class="line">	@Autowired, as well as JSR 250's @PostConstruct, @PreDestroy and @Resource (if available),</div><div class="line">	JAX-WS's @WebServiceRef (if available), EJB 3's @EJB (if available), and JPA's</div><div class="line">	@PersistenceContext and @PersistenceUnit (if available). Alternatively, you may</div><div class="line">	choose to activate the individual BeanPostProcessors for those annotations.</div><div class="line"></div><div class="line">	Note: This tag does not activate processing of Spring's @Transactional or EJB 3's</div><div class="line">	@TransactionAttribute annotation. Consider the use of the &lt;tx:annotation-driven&gt;</div><div class="line">	tag for that purpose.</div><div class="line"></div><div class="line">	See javadoc for org.springframework.context.annotation.AnnotationConfigApplicationContext</div><div class="line">	for information on code-based alternatives to bootstrapping annotation-driven support.</div><div class="line">			]]&gt;<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>可以看出 :</strong>  类内部的注解，如：<code>@Autowired</code>、<code>@Value</code>、<code>@Required</code>、<code>@Resource</code>以及<code>EJB</code>和<code>WebSerivce</code>相关的注解，是容器对Bean对象实例化和依赖注入时，通过容器中注册的Bean后置处理器处理这些注解的。</p>
<p>所以配置了上面这个配置(<code>&lt;context:component-scan&gt;</code>假如有配置这个，那么就可以省略<code>&lt;context:annotation-config /&gt;</code>)后，将隐式地向Spring容器注册<code>AutowiredAnnotationBeanPostProcessor</code>、<code>CommonAnnotationBeanPostProcessor</code>、<code>RequiredAnnotationBeanPostProcessor</code>、<code>PersistenceAnnotationBeanPostProcessor</code>以及这4个专门用于处理注解的Bean后置处理器。</p>
<p>当 Spring 容器<strong>启动</strong>时，<code>AutowiredAnnotationBeanPostProcessor</code> 将<strong>扫描 Spring 容器中所有 Bean，当发现 Bean 中拥有@Autowired 注解时就找到和其匹配（默认按类型匹配）的 Bean</strong>，<strong>并注入</strong>到对应的地方中去。 源码分析如下:</p>
<p>通过<strong>org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor</strong>可以<strong>实现依赖自动注入</strong>。通过这个类来处理<code>@Autowired</code>和<code>@Value</code>这俩<code>Spring注解</code>。它也可以管理<code>JSR-303</code>的<code>@Inject</code>注解(如果可用的话)。在<code>AutowiredAnnotationBeanPostProcessor</code>构造函数中定义要处理的注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">InstantiationAwareBeanPostProcessorAdapter</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">MergedBeanDefinitionPostProcessor</span>, <span class="title">PriorityOrdered</span>, <span class="title">BeanFactoryAware</span> &#123;</div><div class="line">		...</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new AutowiredAnnotationBeanPostProcessor</div><div class="line">	 * for Spring's standard &#123;<span class="doctag">@link</span> Autowired&#125; annotation.</div><div class="line">	 * &lt;p&gt;Also supports JSR-330's &#123;<span class="doctag">@link</span> javax.inject.Inject&#125; annotation, if available.</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Autowired.class);</div><div class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Value.class);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</div><div class="line">					ClassUtils.forName(<span class="string">"javax.inject.Inject"</span>, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</div><div class="line">			logger.info(<span class="string">"JSR-330 'javax.inject.Inject' annotation found and supported for autowiring"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">			<span class="comment">// JSR-330 API not available - simply skip.</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>之后，有几种方法来对<code>@Autowired注解</code>进行处理。</p>
<p>第一个，<code>private InjectionMetadata buildAutowiringMetadata(final Class&lt;?&gt; clazz)</code>解析等待<strong>自动注入</strong>类的所有属性。它通过分析所有字段和方法并初始化<strong>org.springframework.beans.factory.annotation.InjectionMetadata</strong>类的实例来实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> InjectionMetadata <span class="title">buildAutowiringMetadata</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">		LinkedList&lt;InjectionMetadata.InjectedElement&gt; elements = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">		Class&lt;?&gt; targetClass = clazz;</div><div class="line"></div><div class="line">		<span class="keyword">do</span> &#123;</div><div class="line">			<span class="keyword">final</span> LinkedList&lt;InjectionMetadata.InjectedElement&gt; currElements = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">			<span class="comment">//分析所有字段</span></div><div class="line">			ReflectionUtils.doWithLocalFields(targetClass, field -&gt; &#123;</div><div class="line">              <span class="comment">//findAutowiredAnnotation(field)此方法后面会解释</span></div><div class="line">				AnnotationAttributes ann = findAutowiredAnnotation(field);</div><div class="line">				<span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">if</span> (Modifier.isStatic(field.getModifiers())) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation is not supported on static fields: "</span> + field);</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">boolean</span> required = determineRequiredStatus(ann);</div><div class="line">					currElements.add(<span class="keyword">new</span> AutowiredFieldElement(field, required));</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">//分析所有方法</span></div><div class="line">			ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</div><div class="line">				Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);</div><div class="line">				<span class="keyword">if</span> (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);</div><div class="line">				<span class="keyword">if</span> (ann != <span class="keyword">null</span> &amp;&amp; method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</div><div class="line">					<span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation is not supported on static methods: "</span> + method);</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (method.getParameterCount() == <span class="number">0</span>) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation should only be used on methods with parameters: "</span> +</div><div class="line">									method);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">boolean</span> required = determineRequiredStatus(ann);</div><div class="line">					PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</div><div class="line">					currElements.add(<span class="keyword">new</span> AutowiredMethodElement(method, required, pd));</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			elements.addAll(<span class="number">0</span>, currElements);</div><div class="line">			targetClass = targetClass.getSuperclass();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (targetClass != <span class="keyword">null</span> &amp;&amp; targetClass != Object.class);</div><div class="line">		<span class="comment">//返回一个InjectionMetadata初始化的对象实例</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> InjectionMetadata(clazz, elements);</div><div class="line">	&#125;</div><div class="line">...</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * 'Native' processing method for direct calls with an arbitrary target instance,</div><div class="line">	 * resolving all of its fields and methods which are annotated with &#123;<span class="doctag">@code</span> <span class="doctag">@Autowired</span>&#125;.</div><div class="line">	 * <span class="doctag">@param</span> bean the target instance to process</div><div class="line">	 * <span class="doctag">@throws</span> BeanCreationException if autowiring failed</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processInjection</span><span class="params">(Object bean)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</div><div class="line">		Class&lt;?&gt; clazz = bean.getClass();</div><div class="line">		InjectionMetadata metadata = findAutowiringMetadata(clazz.getName(), clazz, <span class="keyword">null</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			metadata.inject(bean, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (BeanCreationException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">					<span class="string">"Injection of autowired dependencies failed for class ["</span> + clazz + <span class="string">"]"</span>, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>InjectionMetadata</code>类包含要注入的元素的列表。注入是通过Java的API <code>Reflection (Field set(Object obj, Object value)</code> 或<code>Method invoke(Object obj，Object ... args)</code>方法完成的。此过程直接在<code>AutowiredAnnotationBeanPostProcessor</code>的方法中调用<code>public void processInjection(Object bean) throws BeanCreationException</code>。它将所有可注入的bean检索为<code>InjectionMetadata</code>实例，并调用它们的<code>inject()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectionMetadata</span> </span>&#123;</div><div class="line">  ...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, @Nullable String beanName, @Nullable PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		Collection&lt;InjectedElement&gt; checkedElements = <span class="keyword">this</span>.checkedElements;</div><div class="line">		Collection&lt;InjectedElement&gt; elementsToIterate =</div><div class="line">				(checkedElements != <span class="keyword">null</span> ? checkedElements : <span class="keyword">this</span>.injectedElements);</div><div class="line">		<span class="keyword">if</span> (!elementsToIterate.isEmpty()) &#123;</div><div class="line">			<span class="keyword">boolean</span> debug = logger.isDebugEnabled();</div><div class="line">			<span class="keyword">for</span> (InjectedElement element : elementsToIterate) &#123;</div><div class="line">				<span class="keyword">if</span> (debug) &#123;</div><div class="line">					logger.debug(<span class="string">"Processing injected element of bean '"</span> + beanName + <span class="string">"': "</span> + element);</div><div class="line">				&#125;</div><div class="line">              	<span class="comment">//看下面静态内部类的方法</span></div><div class="line">				element.inject(target, beanName, pvs);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  ...</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectedElement</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">protected</span> <span class="keyword">final</span> Member member;</div><div class="line"></div><div class="line">		<span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isField;</div><div class="line">      ...</div><div class="line">        <span class="comment">/**</span></div><div class="line">		 * Either this or &#123;<span class="doctag">@link</span> #getResourceToInject&#125; needs to be overridden.</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, @Nullable String requestingBeanName, @Nullable PropertyValues pvs)</span></span></div><div class="line">				<span class="keyword">throws</span> Throwable &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.isField) &#123;</div><div class="line">				Field field = (Field) <span class="keyword">this</span>.member;</div><div class="line">				ReflectionUtils.makeAccessible(field);</div><div class="line">				field.set(target, getResourceToInject(target, requestingBeanName));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (checkPropertySkipping(pvs)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">                  	<span class="comment">//具体的注入看此处咯</span></div><div class="line">					Method method = (Method) <span class="keyword">this</span>.member;</div><div class="line">					ReflectionUtils.makeAccessible(method);</div><div class="line">					method.invoke(target, getResourceToInject(target, requestingBeanName));</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (InvocationTargetException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> ex.getTargetException();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AutowiredAnnotationBeanPostProcessor</code>类中的另一个重要方法是<strong>private AnnotationAttributes findAutowiredAnnotation(AccessibleObject ao)</strong>。它通过分析属于一个字段或一个方法的所有注解来查找<code>@Autowired</code>注解。如果未找到<code>@Autowired</code>注解，则返回<code>null</code>，字段或方法也就视为不可注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">private</span> AnnotationAttributes <span class="title">findAutowiredAnnotation</span><span class="params">(AccessibleObject ao)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ao.getAnnotations().length &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Class&lt;? extends Annotation&gt; type : <span class="keyword">this</span>.autowiredAnnotationTypes) &#123;</div><div class="line">				AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);</div><div class="line">				<span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">return</span> attributes;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在上面的文章中，我们看到了Spring中自动注入过程。通过整篇文章可以看到，这种依赖注入是一种便捷易操作方式(可以在字段以及方法上完成)，也促使我们逐渐在抛弃XML配置文件。还增强了代码的可读性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Autowired&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Autowired&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-@Autowired&quot;&gt;&lt;/a&gt;Spring5源码解析-@Autowired&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;你有没有思考过Spring中的@Autowired注解？通常用于方便依赖注入，而隐藏在这个过程之后的机制到底是怎样，将在本篇中进行讲述。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-@ModelAttribute</title>
    <link href="https://muyinchen.github.io/2017/08/17/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@ModelAttribute/"/>
    <id>https://muyinchen.github.io/2017/08/17/Spring5源码解析-@ModelAttribute/</id>
    <published>2017-08-17T02:26:31.107Z</published>
    <updated>2017-08-24T04:28:21.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-ModelAttribute"><a href="#Spring5源码解析-ModelAttribute" class="headerlink" title="Spring5源码解析-@ModelAttribute"></a>Spring5源码解析-@ModelAttribute</h1><blockquote>
<p>之前我们讨论了Spring中如何通过验证器来达到校验目的。其中有几行我们提到了@ModelAttribute注解。但是，单单理解这个概念还不够，总感觉飘如浮萍。</p>
</blockquote>
<p>本文将对<code>@ModelAttribute</code>进行解析。将分为两部分。首先将介绍此注解的用法。第二部分将通过具体的代码来分析这个注解和其相应的解析器的细节。<br><a id="more"></a></p>
<h2 id="什么是-ModelAttribute注解？"><a href="#什么是-ModelAttribute注解？" class="headerlink" title="什么是@ModelAttribute注解？"></a>什么是@ModelAttribute注解？</h2><p><code>@ModelAttribute</code>注解主要用来将请求转换为使用此注解指定的对象。例如，如果在<code>@ModelAttribute</code>旁边指定了一个<code>Article</code>实例，则与<code>Article</code>的字段对应的所有请求参数将被用作<code>Article</code>的字段值。什么意思呢，例如，<code>POST提交</code>后参数<code>title</code>的值将被设置为<code>Article</code>的<code>title</code> 字段。这里推荐一篇文章解释的很清晰:<a href="http://blog.csdn.net/hejingyuan6/article/details/49995987" target="_blank" rel="external">http://blog.csdn.net/hejingyuan6/article/details/49995987</a></p>
<p>因此，此注解允许开发人员通过请求来持久化一个对象。没有它，Spring认为必须创建一个新对象。另外，它直接显示一个对象模型来查看。你不需要在方法中再调用model.setAttribute()。在视图部分，可以通过注解中的指定值查找指定对象(例如，@ModelAttribute(“articleView”)可以在jsp中通过<code>${articleView}</code>获取相应的值)或对象的类名称(例如<code>@ModelAttribute()Article article</code>将在视图层获取方式就是<code>${article}</code>)。</p>
<h2 id="ModelAttribute注解相关代码详解"><a href="#ModelAttribute注解相关代码详解" class="headerlink" title="@ModelAttribute注解相关代码详解"></a>@ModelAttribute注解相关代码详解</h2><p>还是分两波来说吧，也参考了不少其他解析的文章，看了很多相关评论，大都觉得各种迷迷糊糊所以就旧版新版都说说咯，反正都是源码学习，4.3版本之前和之后(4.2之后机制已经改了，下面讲新版本的时候会看到源码相关注释)，4.3版本之后被废弃掉了，先谈老版本的。</p>
<h3 id="老版本"><a href="#老版本" class="headerlink" title="老版本"></a>老版本</h3><p>总体来看，有三个关键类协助<code>@ModelAttribute</code>来转换得到我们所需要的预期对象。第一个是<strong>org.springframework.web.bind.annotation.support.HandlerMethodResolver</strong>。它包含一个Set类型的私有字段，称为<code>modelAttributeMethods</code>。此字段包含被<code>@ModelAttribute</code>注解了的方法。在init()方法中，解析器将所有相关方法放在此集合中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Method&gt; modelAttributeMethods = <span class="keyword">new</span> LinkedHashSet&lt;Method&gt;();</div><div class="line">...</div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Initialize a new HandlerMethodResolver for the specified handler type.</div><div class="line">	 * <span class="doctag">@param</span> handlerType the handler class to introspect</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; handlerType)</span> </span>&#123;</div><div class="line">		Set&lt;Class&lt;?&gt;&gt; handlerTypes = <span class="keyword">new</span> LinkedHashSet&lt;Class&lt;?&gt;&gt;();</div><div class="line">		Class&lt;?&gt; specificHandlerType = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span> (!Proxy.isProxyClass(handlerType)) &#123;</div><div class="line">			handlerTypes.add(handlerType);</div><div class="line">			specificHandlerType = handlerType;</div><div class="line">		&#125;</div><div class="line">		handlerTypes.addAll(Arrays.asList(handlerType.getInterfaces()));</div><div class="line">		<span class="keyword">for</span> (Class&lt;?&gt; currentHandlerType : handlerTypes) &#123;</div><div class="line">			<span class="keyword">final</span> Class&lt;?&gt; targetClass = (specificHandlerType != <span class="keyword">null</span> ? specificHandlerType : currentHandlerType);</div><div class="line">			ReflectionUtils.doWithMethods(currentHandlerType, <span class="keyword">new</span> ReflectionUtils.MethodCallback() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWith</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">					Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);</div><div class="line">					Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);</div><div class="line">					<span class="keyword">if</span> (isHandlerMethod(specificMethod) &amp;&amp;</div><div class="line">							(bridgedMethod == specificMethod || !isHandlerMethod(bridgedMethod))) &#123;</div><div class="line">						handlerMethods.add(specificMethod);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (isInitBinderMethod(specificMethod) &amp;&amp;</div><div class="line">							(bridgedMethod == specificMethod || !isInitBinderMethod(bridgedMethod))) &#123;</div><div class="line">						initBinderMethods.add(specificMethod);</div><div class="line">					&#125;</div><div class="line">                  <span class="comment">//此处代码可知</span></div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (isModelAttributeMethod(specificMethod) &amp;&amp;</div><div class="line">							(bridgedMethod == specificMethod || !isModelAttributeMethod(bridgedMethod))) &#123;</div><div class="line">						modelAttributeMethods.add(specificMethod);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;, ReflectionUtils.USER_DECLARED_METHODS);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.typeLevelMapping = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);</div><div class="line">		SessionAttributes sessionAttributes = AnnotationUtils.findAnnotation(handlerType, SessionAttributes.class);</div><div class="line">		<span class="keyword">this</span>.sessionAttributesFound = (sessionAttributes != <span class="keyword">null</span>);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.sessionAttributesFound) &#123;</div><div class="line">			<span class="keyword">this</span>.sessionAttributeNames.addAll(Arrays.asList(sessionAttributes.names()));</div><div class="line">			<span class="keyword">this</span>.sessionAttributeTypes.addAll(Arrays.asList(sessionAttributes.types()));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>之后，<strong>org.springframework.web.bind.annotation.support.HandlerMethodInvoker</strong>就可以开始干活了。在其方法<code>invokeHandlerMethod()</code>中，它从<code>modelAttributeMethods Set</code>遍历所有方法。如果之前model属性没有解析，它将通过创建对象来将请求参数绑定到对象的相应字段。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Method attributeMethod : <span class="keyword">this</span>.methodResolver.getModelAttributeMethods()) &#123;</div><div class="line">				Method attributeMethodToInvoke = BridgeMethodResolver.findBridgedMethod(attributeMethod);</div><div class="line">				Object[] args = resolveHandlerArguments(attributeMethodToInvoke, handler, webRequest, implicitModel);</div><div class="line">				<span class="keyword">if</span> (debug) &#123;</div><div class="line">					logger.debug(<span class="string">"Invoking model attribute method: "</span> + attributeMethodToInvoke);</div><div class="line">				&#125;</div><div class="line">				String attrName = AnnotationUtils.findAnnotation(attributeMethod, ModelAttribute.class).value();</div><div class="line">				<span class="keyword">if</span> (!<span class="string">""</span>.equals(attrName) &amp;&amp; implicitModel.containsAttribute(attrName)) &#123;</div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				&#125;</div><div class="line">				ReflectionUtils.makeAccessible(attributeMethodToInvoke);</div><div class="line">				Object attrValue = attributeMethodToInvoke.invoke(handler, args);</div><div class="line">				<span class="keyword">if</span> (<span class="string">""</span>.equals(attrName)) &#123;</div><div class="line">					Class&lt;?&gt; resolvedType = GenericTypeResolver.resolveReturnType(attributeMethodToInvoke, handler.getClass());</div><div class="line">					attrName = Conventions.getVariableNameForReturnType(attributeMethodToInvoke, resolvedType, attrValue);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (!implicitModel.containsAttribute(attrName)) &#123;</div><div class="line">					implicitModel.addAttribute(attrName, attrValue);</div><div class="line">				&#125;</div><div class="line">			&#125;</div></pre></td></tr></table></figure>
<p>通过<strong>org.springframework.web.method.annotation.ModelAttributeMethodProcessor</strong>来做绑定。更确切地说，它是通过方法<strong>protected void bindRequestParameters(WebDataBinder binder，NativeWebRequest request)</strong>来将请求绑定到目标对象。而更准确地说，它使用<code>WebRequestDataBinder</code>的<code>bind()</code>方法来做到这一点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Extension point to bind the request to the target object.</div><div class="line">	 * <span class="doctag">@param</span> binder the data binder instance to use for the binding</div><div class="line">	 * <span class="doctag">@param</span> request the current request</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bindRequestParameters</span><span class="params">(WebDataBinder binder, NativeWebRequest request)</span> </span>&#123;</div><div class="line">		((WebRequestDataBinder) binder).bind(request);</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 此处会在新版本的最后提到，到时可从此开始看的</div><div class="line">	 * Resolve the argument from the model or if not found instantiate it with</div><div class="line">	 * its default if it is available. The model attribute is then populated</div><div class="line">	 * with request values via data binding and optionally validated</div><div class="line">	 * if &#123;<span class="doctag">@code</span> <span class="doctag">@java</span>.validation.Valid&#125; is present on the argument.</div><div class="line">	 * <span class="doctag">@throws</span> BindException if data binding and validation result in an error</div><div class="line">	 * and the next method parameter is not of type &#123;<span class="doctag">@link</span> Errors&#125;.</div><div class="line">	 * <span class="doctag">@throws</span> Exception if WebDataBinder initialization fails.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span></div><div class="line">			NativeWebRequest webRequest, WebDataBinderFactory binderFactory) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		String name = ModelFactory.getNameForParameter(parameter);</div><div class="line">		Object attribute = (mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) :</div><div class="line">				createAttribute(name, parameter, binderFactory, webRequest));</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</div><div class="line">			ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);</div><div class="line">			<span class="keyword">if</span> (ann != <span class="keyword">null</span> &amp;&amp; !ann.binding()) &#123;</div><div class="line">				mavContainer.setBindingDisabled(name);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//此处来做绑定</span></div><div class="line">		WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</div><div class="line">		<span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</div><div class="line">				bindRequestParameters(binder, webRequest);</div><div class="line">			&#125;</div><div class="line">			validateIfApplicable(binder, parameter);</div><div class="line">			<span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Add resolved attribute and BindingResult at the end of the model</span></div><div class="line">		Map&lt;String, Object&gt; bindingResultModel = binder.getBindingResult().getModel();</div><div class="line">		mavContainer.removeAttributes(bindingResultModel);</div><div class="line">		mavContainer.addAllAttributes(bindingResultModel);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>WebRequestDataBinder</code>的<code>bind()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Bind the parameters of the given request to this binder's target,</div><div class="line">	 * also binding multipart files in case of a multipart request.</div><div class="line">	 * &lt;p&gt;This call can create field errors, representing basic binding</div><div class="line">	 * errors like a required field (code "required"), or type mismatch</div><div class="line">	 * between value and bean property (code "typeMismatch").</div><div class="line">	 * &lt;p&gt;Multipart files are bound via their parameter name, just like normal</div><div class="line">	 * HTTP parameters: i.e. "uploadedFile" to an "uploadedFile" bean property,</div><div class="line">	 * invoking a "setUploadedFile" setter method.</div><div class="line">	 * &lt;p&gt;The type of the target property for a multipart file can be Part, MultipartFile,</div><div class="line">	 * byte[], or String. The latter two receive the contents of the uploaded file;</div><div class="line">	 * all metadata like original file name, content type, etc are lost in those cases.</div><div class="line">	 * <span class="doctag">@param</span> request request with parameters to bind (can be multipart)</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.web.multipart.MultipartRequest</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.web.multipart.MultipartFile</div><div class="line">	 * <span class="doctag">@see</span> javax.servlet.http.Part</div><div class="line">	 * <span class="doctag">@see</span> #bind(org.springframework.beans.PropertyValues)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(WebRequest request)</span> </span>&#123;</div><div class="line">		MutablePropertyValues mpvs = <span class="keyword">new</span> MutablePropertyValues(request.getParameterMap());</div><div class="line">		<span class="keyword">if</span> (isMultipartRequest(request) &amp;&amp; request <span class="keyword">instanceof</span> NativeWebRequest) &#123;</div><div class="line">			MultipartRequest multipartRequest = ((NativeWebRequest) request).getNativeRequest(MultipartRequest.class);</div><div class="line">			<span class="keyword">if</span> (multipartRequest != <span class="keyword">null</span>) &#123;</div><div class="line">				bindMultipart(multipartRequest.getMultiFileMap(), mpvs);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (servlet3Parts) &#123;</div><div class="line">				HttpServletRequest serlvetRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class);</div><div class="line">				<span class="keyword">new</span> Servlet3MultipartHelper(isBindEmptyMultipartFiles()).bindParts(serlvetRequest, mpvs);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		doBind(mpvs);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>跟着源码 再追下去的话，会发现在其父类<code>DataBinder</code>中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Actual implementation of the binding process, working with the</div><div class="line">	 * passed-in MutablePropertyValues instance.</div><div class="line">	 * <span class="doctag">@param</span> mpvs the property values to bind,</div><div class="line">	 * as MutablePropertyValues instance</div><div class="line">	 * <span class="doctag">@see</span> #checkAllowedFields</div><div class="line">	 * <span class="doctag">@see</span> #checkRequiredFields</div><div class="line">	 * <span class="doctag">@see</span> #applyPropertyValues</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBind</span><span class="params">(MutablePropertyValues mpvs)</span> </span>&#123;</div><div class="line">		checkAllowedFields(mpvs);</div><div class="line">		checkRequiredFields(mpvs);</div><div class="line">		applyPropertyValues(mpvs);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>DataBinder</code>的<code>applyPropertyValues</code>方法中来对字段值进行设置:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyPropertyValues</span><span class="params">(MutablePropertyValues mpvs)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// Bind request parameters onto target object.</span></div><div class="line">        getPropertyAccessor().setPropertyValues(mpvs, isIgnoreUnknownFields(), isIgnoreInvalidFields());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (PropertyBatchUpdateException ex) &#123;</div><div class="line">        <span class="comment">// Use bind error processor to create FieldErrors.</span></div><div class="line">        <span class="keyword">for</span> (PropertyAccessException pae : ex.getPropertyAccessExceptions()) &#123;</div><div class="line">            getBindingErrorProcessor().processPropertyAccessException(pae, getInternalBindingResult());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，它得到一个<strong>org.springframework.beans.AbstractPropertyAccessor</strong>类(<code>getPropertyAccessor</code>)的实现。之后，通过具体实现这个抽象方法<strong>public void setPropertyValue(String propertyName，Object value)</strong>将<code>HTTP</code>请求中找到的值放入解析对象中。此方法由<strong>org.springframework.beans</strong>包中的<code>BeanWrapperImpl</code>和<code>DirectFieldAccessor</code>类<em>实现</em>。默认情况下，<code>ModelAttributeMethodProcessor</code>使用的类是<strong>org.springframework.beans.BeanWrapperImpl，</strong>这是<code>BeanWrapper</code>的默认实现。此默认实现可以设置和获取<code>bean</code>的属性(类字段)。它以这种方式实现一个<code>setPropertyValue</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNestablePropertyAccessor</span> <span class="keyword">extends</span> <span class="title">AbstractPropertyAccessor</span> </span>&#123;</div><div class="line">  ...</div><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(String propertyName, Object value)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		AbstractNestablePropertyAccessor nestedPa; <span class="comment">//此处看下一段代码一眼便知</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			nestedPa = getPropertyAccessorForPropertyPath(propertyName);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (NotReadablePropertyException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NotWritablePropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</div><div class="line">					<span class="string">"Nested property in path '"</span> + propertyName + <span class="string">"' does not exist"</span>, ex);</div><div class="line">		&#125;</div><div class="line">		PropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedPa, propertyName));</div><div class="line">		nestedPa.setPropertyValue(tokens, <span class="keyword">new</span> PropertyValue(propertyName, value));</div><div class="line">	&#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Default &#123;<span class="doctag">@link</span> BeanWrapper&#125; implementation that should be sufficient</div><div class="line"> * for all typical use cases. Caches introspection results for efficiency.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Note: Auto-registers default property editors from the</div><div class="line"> * &#123;<span class="doctag">@code</span> org.springframework.beans.propertyeditors&#125; package, which apply</div><div class="line"> * in addition to the JDK's standard PropertyEditors. Applications can call</div><div class="line"> * the &#123;<span class="doctag">@link</span> #registerCustomEditor(Class, java.beans.PropertyEditor)&#125; method</div><div class="line"> * to register an editor for a particular instance (i.e. they are not shared</div><div class="line"> * across the application). See the base class</div><div class="line"> * &#123;<span class="doctag">@link</span> PropertyEditorRegistrySupport&#125; for details.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span> As of Spring 2.5, this is - for almost all purposes - an</div><div class="line"> * internal class.&lt;/b&gt; It is just public in order to allow for access from</div><div class="line"> * other framework packages. For standard application access purposes, use the</div><div class="line"> * &#123;<span class="doctag">@link</span> PropertyAccessorFactory#forBeanPropertyAccess&#125; factory method instead.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rod Johnson</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@author</span> Rob Harrop</div><div class="line"> * <span class="doctag">@author</span> Stephane Nicoll</div><div class="line"> * <span class="doctag">@since</span> 15 April 2001</div><div class="line"> * <span class="doctag">@see</span> #registerCustomEditor</div><div class="line"> * <span class="doctag">@see</span> #setPropertyValues</div><div class="line"> * <span class="doctag">@see</span> #setPropertyValue</div><div class="line"> * <span class="doctag">@see</span> #getPropertyValue</div><div class="line"> * <span class="doctag">@see</span> #getPropertyType</div><div class="line"> * <span class="doctag">@see</span> BeanWrapper</div><div class="line"> * <span class="doctag">@see</span> PropertyEditorRegistrySupport</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWrapperImpl</span> <span class="keyword">extends</span> <span class="title">AbstractNestablePropertyAccessor</span> <span class="keyword">implements</span> <span class="title">BeanWrapper</span> </span>&#123;</div></pre></td></tr></table></figure>
<p>结果被转移到<strong>private void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv)</strong>，这里就不详细介绍了。你只需要知道它是一个设置一个字段的值的方法。set字段可以是一个简单的类型(String，int等)，也可以是一个集合(List，Map)。</p>
<p>以上介绍了在老版本中关于@ModelAttribute如何在Spring Web应用程序解析的。如上所看到的，代码执行的基本流程以<code>HandlerMethodResolver</code>对象开头，并以<code>ModelAttributeMethodProcessor</code>实例解析的可选对象结束。整个过程基于数据绑定，在DataBinder子类中实现。他们通过属性访问器(默认BeanWrapperImpl)从请求中获取键值对并将其放在目标对象中。</p>
<h3 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h3><p>通过上面可以看出，老版本的代码其实穿梭的蛮复杂的，这里就通过新版的代码再来梳理下:</p>
<p><code>@ModelAttribute</code>注解的方法是作用于整个<code>Controller</code>的，实际上在执行<code>Controller</code>的每个请求时都会执行<code>@ModelAttribute</code>注解的方法。</p>
<p>执行过程在<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</code>中查看，每次执行Controller时都会执行<code>@ModelAttribute</code>注解的方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Invoke the &#123;<span class="doctag">@link</span> RequestMapping&#125; handler method preparing a &#123;<span class="doctag">@link</span> ModelAndView&#125;</div><div class="line">	 * if view resolution is required.</div><div class="line">	 * <span class="doctag">@since</span> 4.2 可以看到4.2开始启用了</div><div class="line">	 * <span class="doctag">@see</span> #createInvocableHandlerMethod(HandlerMethod)</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</div><div class="line">			ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</div><div class="line"></div><div class="line">			ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</div><div class="line">				invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</div><div class="line">				invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</div><div class="line">			&#125;</div><div class="line">			invocableMethod.setDataBinderFactory(binderFactory);</div><div class="line">			invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line"></div><div class="line">			ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</div><div class="line">			mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</div><div class="line">           <span class="comment">//执行@ModelAttribute注解的方法  </span></div><div class="line">			modelFactory.initModel(webRequest, mavContainer, invocableMethod);</div><div class="line">			mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</div><div class="line"></div><div class="line">			AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</div><div class="line">			asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</div><div class="line"></div><div class="line">			WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">			asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</div><div class="line">			asyncManager.setAsyncWebRequest(asyncWebRequest);</div><div class="line">			asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</div><div class="line">			asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</div><div class="line">				Object result = asyncManager.getConcurrentResult();</div><div class="line">				mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</div><div class="line">				asyncManager.clearConcurrentResult();</div><div class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">					logger.debug(<span class="string">"Found concurrent result value ["</span> + result + <span class="string">"]"</span>);</div><div class="line">				&#125;</div><div class="line">				invocableMethod = invocableMethod.wrapConcurrentResult(result);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">//执行Controller中的方法  </span></div><div class="line">			invocableMethod.invokeAndHandle(webRequest, mavContainer);</div><div class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			webRequest.requestCompleted();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>modelFactory.initModel(webRequest, mavContainer, invocableMethod)</code>中会执行<code>@ModelAttribute</code>注解的方法(<strong>org.springframework.web.method.annotation.ModelFactory</strong>中可查看):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Populate the model in the following order:</div><div class="line">	 * &lt;ol&gt;</div><div class="line">	 * &lt;li&gt;Retrieve "known" session attributes listed as &#123;<span class="doctag">@code</span> <span class="doctag">@SessionAttributes</span>&#125;.</div><div class="line">	 * &lt;li&gt;Invoke &#123;<span class="doctag">@code</span> <span class="doctag">@ModelAttribute</span>&#125; methods</div><div class="line">	 * &lt;li&gt;Find &#123;<span class="doctag">@code</span> <span class="doctag">@ModelAttribute</span>&#125; method arguments also listed as</div><div class="line">	 * &#123;<span class="doctag">@code</span> <span class="doctag">@SessionAttributes</span>&#125; and ensure they're present in the model raising</div><div class="line">	 * an exception if necessary.</div><div class="line">	 * &lt;/ol&gt;</div><div class="line">	 * <span class="doctag">@param</span> request the current request</div><div class="line">	 * <span class="doctag">@param</span> container a container with the model to be initialized</div><div class="line">	 * <span class="doctag">@param</span> handlerMethod the method for which the model is initialized</div><div class="line">	 * <span class="doctag">@throws</span> Exception may arise from &#123;<span class="doctag">@code</span> <span class="doctag">@ModelAttribute</span>&#125; methods</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initModel</span><span class="params">(NativeWebRequest request, ModelAndViewContainer container,</span></span></div><div class="line">			HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		Map&lt;String, ?&gt; sessionAttributes = <span class="keyword">this</span>.sessionAttributesHandler.retrieveAttributes(request);</div><div class="line">		container.mergeAttributes(sessionAttributes);</div><div class="line">      <span class="comment">//执行@ModelAttribute注解的方法  </span></div><div class="line">		invokeModelAttributeMethods(request, container);</div><div class="line">		<span class="comment">////方法执行结果的值放到container  </span></div><div class="line">		<span class="keyword">for</span> (String name : findSessionAttributeArguments(handlerMethod)) &#123;</div><div class="line">			<span class="keyword">if</span> (!container.containsAttribute(name)) &#123;</div><div class="line">				Object value = <span class="keyword">this</span>.sessionAttributesHandler.retrieveAttribute(request, name);</div><div class="line">				<span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> HttpSessionRequiredException(<span class="string">"Expected session attribute '"</span> + name + <span class="string">"'"</span>, name);</div><div class="line">				&#125;</div><div class="line">				container.addAttribute(name, value);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在<code>private void invokeModelAttributeMethods(NativeWebRequest request, ModelAndViewContainer container)</code>中会判断方法上是否被<code>@ModelAttribute</code>注解，如果是则会执行这个方法，并将返回值放到<code>container</code>中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Invoke model attribute methods to populate the model.</div><div class="line"> * Attributes are added only if not already present in the model.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeModelAttributeMethods</span><span class="params">(NativeWebRequest request, ModelAndViewContainer container)</span></span></div><div class="line">		<span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (!<span class="keyword">this</span>.modelMethods.isEmpty()) &#123;</div><div class="line">		InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod();</div><div class="line">         <span class="comment">//判断方法是否被@ModelAttribute注解  </span></div><div class="line">		ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute.class);</div><div class="line">		Assert.state(ann != <span class="keyword">null</span>, <span class="string">"No ModelAttribute annotation"</span>);</div><div class="line">		<span class="keyword">if</span> (container.containsAttribute(ann.name())) &#123;</div><div class="line">			<span class="keyword">if</span> (!ann.binding()) &#123;</div><div class="line">				container.setBindingDisabled(ann.name());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">	 <span class="comment">//执行被@ModelAttribute注解的方法  </span></div><div class="line">		Object returnValue = modelMethod.invokeForRequest(request, container);</div><div class="line">		<span class="keyword">if</span> (!modelMethod.isVoid())&#123;</div><div class="line">			String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType());</div><div class="line">			<span class="keyword">if</span> (!ann.binding()) &#123;</div><div class="line">				container.setBindingDisabled(returnValueName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!container.containsAttribute(returnValueName)) &#123;</div><div class="line">				container.addAttribute(returnValueName, returnValue);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们进入<strong>org.springframework.web.method.support.InvocableHandlerMethod</strong> 的<code>invokeForRequest</code>方法，在给定<code>request</code>请求的上下文中解析其参数值后调用该方法，参数值通常通过 <code>HandlerMethodArgumentResolver</code>来解析。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Invoke the method after resolving its argument values in the context of the given request.</div><div class="line"> * &lt;p&gt;Argument values are commonly resolved through &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125;s.</div><div class="line"> * The &#123;<span class="doctag">@code</span> providedArgs&#125; parameter however may supply argument values to be used directly,</div><div class="line"> * i.e. without argument resolution. Examples of provided argument values include a</div><div class="line"> * &#123;<span class="doctag">@link</span> WebDataBinder&#125;, a &#123;<span class="doctag">@link</span> SessionStatus&#125;, or a thrown exception instance.</div><div class="line"> * Provided argument values are checked before argument resolvers.</div><div class="line"> * <span class="doctag">@param</span> request the current request</div><div class="line"> * <span class="doctag">@param</span> mavContainer the ModelAndViewContainer for this request</div><div class="line"> * <span class="doctag">@param</span> providedArgs "given" arguments matched by type, not resolved</div><div class="line"> * <span class="doctag">@return</span> the raw value returned by the invoked method</div><div class="line"> * <span class="doctag">@exception</span> Exception raised if no suitable argument resolver can be found,</div><div class="line"> * or if the method raised an exception</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></div><div class="line">		Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line">	<span class="comment">//看下面的方法</span></div><div class="line">	Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</div><div class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">		logger.trace(<span class="string">"Invoking '"</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</div><div class="line">				<span class="string">"' with arguments "</span> + Arrays.toString(args));</div><div class="line">	&#125;</div><div class="line">	Object returnValue = doInvoke(args);</div><div class="line">	<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">		logger.trace(<span class="string">"Method ["</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</div><div class="line">				<span class="string">"] returned ["</span> + returnValue + <span class="string">"]"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> returnValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Get the method argument values for the current request.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</div><div class="line">		Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">	MethodParameter[] parameters = getMethodParameters();</div><div class="line">	Object[] args = <span class="keyword">new</span> Object[parameters.length];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</div><div class="line">		MethodParameter parameter = parameters[i];</div><div class="line">		parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line">		args[i] = resolveProvidedArgument(parameter, providedArgs);</div><div class="line">		<span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers.supportsParameter(parameter)) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">                 <span class="comment">//又回归到解析参数的老路上了，就不多解析了</span></div><div class="line">				args[i] = <span class="keyword">this</span>.argumentResolvers.resolveArgument(</div><div class="line">						parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">					logger.debug(getArgumentResolutionErrorMessage(<span class="string">"Failed to resolve"</span>, i), ex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (args[i] == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not resolve method parameter at index "</span> +</div><div class="line">					parameter.getParameterIndex() + <span class="string">" in "</span> + parameter.getExecutable().toGenericString() +</div><div class="line">					<span class="string">": "</span> + getArgumentResolutionErrorMessage(<span class="string">"No suitable resolver for"</span>, i));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> args;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.web.method.support.HandlerMethodArgumentResolverComposite</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Iterate over registered &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125;s and invoke the one that supports it.</div><div class="line"> * <span class="doctag">@throws</span> IllegalStateException if no suitable &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125; is found.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></div><div class="line">		NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">	HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);</div><div class="line">	<span class="keyword">if</span> (resolver == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown parameter type ["</span> + parameter.getParameterType().getName() + <span class="string">"]"</span>);</div><div class="line">	&#125;</div><div class="line">     <span class="comment">//又回到老版本的resolveArgument路上了</span></div><div class="line">	<span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Find a registered &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125; that supports the given method parameter.</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</div><div class="line">	HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</div><div class="line">	<span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (HandlerMethodArgumentResolver methodArgumentResolver : <span class="keyword">this</span>.argumentResolvers) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">				logger.trace(<span class="string">"Testing if argument resolver ["</span> + methodArgumentResolver + <span class="string">"] supports ["</span> +</div><div class="line">						parameter.getGenericParameterType() + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (methodArgumentResolver.supportsParameter(parameter)) &#123;</div><div class="line">				result = methodArgumentResolver;</div><div class="line">				<span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回到<strong>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</strong>,可以看到:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> &#123;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; customArgumentResolvers;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> HandlerMethodArgumentResolverComposite argumentResolvers;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> HandlerMethodArgumentResolverComposite initBinderArgumentResolvers;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; customReturnValueHandlers;</div></pre></td></tr></table></figure>
<p>又回到老版本的<code>resolveArgument</code>这里了,就不往下解释了</p>
<p>关于<code>@ModelAttribute</code>的例子请看这篇博客文章的，自己就不整例子了<a href="http://blog.csdn.net/hejingyuan6/article/details/49995987" target="_blank" rel="external">http://blog.csdn.net/hejingyuan6/article/details/49995987</a></p>
<p>总之,通过源码可以看出,当<code>@ModelAttribute</code>注解方法时,这个方法在每次访问<code>Controller</code>时都会被执行,其执行到的原理就是在每次执行<code>Controller</code>时都会判断一次,并执行<code>@ModelAttribute</code>的方法,将执行后的结果值放到<code>container</code>中,其实我们只需要知道这么多就成了，背后的机制无论新老版本都是解析绑定这4个字。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-ModelAttribute&quot;&gt;&lt;a href=&quot;#Spring5源码解析-ModelAttribute&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-@ModelAttribute&quot;&gt;&lt;/a&gt;Spring5源码解析-@ModelAttribute&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前我们讨论了Spring中如何通过验证器来达到校验目的。其中有几行我们提到了@ModelAttribute注解。但是，单单理解这个概念还不够，总感觉飘如浮萍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文将对&lt;code&gt;@ModelAttribute&lt;/code&gt;进行解析。将分为两部分。首先将介绍此注解的用法。第二部分将通过具体的代码来分析这个注解和其相应的解析器的细节。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-使用@Valid进行Spring验证</title>
    <link href="https://muyinchen.github.io/2017/08/11/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%BD%BF%E7%94%A8@Valid%E8%BF%9B%E8%A1%8CSpring%E9%AA%8C%E8%AF%81/"/>
    <id>https://muyinchen.github.io/2017/08/11/Spring5源码解析-使用@Valid进行Spring验证/</id>
    <published>2017-08-11T01:39:35.570Z</published>
    <updated>2017-08-16T14:03:11.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-使用-Valid进行Spring验证"><a href="#Spring5源码解析-使用-Valid进行Spring验证" class="headerlink" title="Spring5源码解析-使用@Valid进行Spring验证"></a>Spring5源码解析-使用@Valid进行Spring验证</h1><blockquote>
<p>验证功能在Spring中是很常用的。你可以使用注解或自己的验证器并将其绑定到请求中。本文将重点介绍第一种解决方案。</p>
</blockquote>
<p>第一部分将介绍注解验证流程。在第二部分中，将介绍基本实现的组件。最后一部分将包含Spring初学者开发人员常见错误的解释:是否有必要直接在验证对象之后放置<code>BindingResult</code>。<br><a id="more"></a></p>
<h2 id="使用-Valid注解在Spring中进行验证流程"><a href="#使用-Valid注解在Spring中进行验证流程" class="headerlink" title="使用@Valid注解在Spring中进行验证流程"></a>使用@Valid注解在Spring中进行验证流程</h2><p>要了解使用<code>标准Java @Valid</code>或<code>特定Spring @Validated</code>注解的验证过程，我们首先需要了解Spring如何解析使用了<code>@ModelAttribute</code>注解的对象。它们在controller的方法签名进行注解。@ModelAttribute注解用于将动态请求参数<code>转换</code>为Java注解中指定的对象。例如，观察代码<strong>@ModelAttribute(“article”)Article article </strong>,Spring会尝试将所有请求参数匹配到Article类的字段中。现在，假设这个类有两个字段:<code>title</code>和<code>content</code>。如果请求包含<code>title</code>和<code>content</code>参数，它们将被用作<code>Article</code>的<code>title</code>和<code>content</code>的值(后面会对<code>@ModelAttribute</code>方面的源码做进一步的分析)。</p>
<p>当我们有对象需要进行验证时，<code>@ModelAttribute</code>注解的处理器(<strong>org.springframework.web.method.annotation.ModelAttributeMethodProcessor</strong>)会检查是否必须应用验证注解。注解验证必须以“Valid”这个字眼开头。接下来，对象通过<strong>org.springframework.validation.DataBinder</strong>类中的<strong>public void validate(Object … validationHints)</strong>进行<strong>验证</strong>。该方法遍历所有可用的验证器，并调用每个验证器的<code>validate</code>方法。验证器取自带有<code>validator</code>ID的bean。这样，它可以与<code>annotation-driven</code>的xml配置相关联:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"validator"</span> &gt;</span></div></pre></td></tr></table></figure>
<p>如果未指定验证器bean，则将使用默认验证器:<strong>org.springframework.validation.beanvalidation.LocalValidatorFactoryBean</strong>。</p>
<h2 id="如何在Spring中处理验证？"><a href="#如何在Spring中处理验证？" class="headerlink" title="如何在Spring中处理验证？"></a>如何在Spring中处理验证？</h2><p>我们已经了解了验证流程。现在，我们可以专注于验证过程本身，即验证器是如何知道一个字段不正确的。<code>LocalValidatorFactoryBean</code>继承自同一个包下的<code>SpringValidatorAdapter</code>，但不会覆盖其的validate()方法。这些方法用于检查验证字段是否正确。更准确地说，<code>SpringValidatorAdapter</code>包含一个目标验证器字段(<code>Validator</code>类型的<code>targetValidator</code>)。它将在<code>validate()</code>方法中使用来验证已验证对象的所有字段。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringValidatorAdapter</span> <span class="keyword">implements</span> <span class="title">SmartValidator</span>, <span class="title">javax</span>.<span class="title">validation</span>.<span class="title">Validator</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; internalAnnotationAttributes = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">3</span>);</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		internalAnnotationAttributes.add(<span class="string">"message"</span>);</div><div class="line">		internalAnnotationAttributes.add(<span class="string">"groups"</span>);</div><div class="line">		internalAnnotationAttributes.add(<span class="string">"payload"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> javax.validation.Validator targetValidator;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new SpringValidatorAdapter for the given JSR-303 Validator.</div><div class="line">	 * <span class="doctag">@param</span> targetValidator the JSR-303 Validator to wrap</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SpringValidatorAdapter</span><span class="params">(javax.validation.Validator targetValidator)</span> </span>&#123;</div><div class="line">		Assert.notNull(targetValidator, <span class="string">"Target Validator must not be null"</span>);</div><div class="line">		<span class="keyword">this</span>.targetValidator = targetValidator;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	SpringValidatorAdapter() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setTargetValidator</span><span class="params">(javax.validation.Validator targetValidator)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.targetValidator = targetValidator;</div><div class="line">	&#125;</div><div class="line">...</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(@Nullable Object target, Errors errors)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.targetValidator != <span class="keyword">null</span>) &#123;</div><div class="line">			processConstraintViolations(<span class="keyword">this</span>.targetValidator.validate(target), errors);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(@Nullable Object target, Errors errors, @Nullable Object... validationHints)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.targetValidator != <span class="keyword">null</span>) &#123;</div><div class="line">			Set&lt;Class&lt;?&gt;&gt; groups = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">			<span class="keyword">if</span> (validationHints != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">for</span> (Object hint : validationHints) &#123;</div><div class="line">					<span class="keyword">if</span> (hint <span class="keyword">instanceof</span> Class) &#123;</div><div class="line">						groups.add((Class&lt;?&gt;) hint);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			processConstraintViolations(</div><div class="line">					<span class="keyword">this</span>.targetValidator.validate(target, groups.toArray(<span class="keyword">new</span> Class&lt;?&gt;[groups.size()])), errors);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>此验证的结果是由在<code>SpringValidatorAdapter</code>内的<code>protected void processConstraintViolations(Set&lt;ConstraintViolation&lt;Object&gt;&gt; violations, Errors errors)</code>方法处理得到。它将错误从JSR-303验证器附加到给定的Spring的错误对象(觉得别扭请看下面方法上的英文注释)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Process the given JSR-303 ConstraintViolations, adding corresponding errors to</div><div class="line">	 * the provided Spring &#123;<span class="doctag">@link</span> Errors&#125; object.</div><div class="line">	 * <span class="doctag">@param</span> violations the JSR-303 ConstraintViolation results</div><div class="line">	 * <span class="doctag">@param</span> errors the Spring errors object to register to</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processConstraintViolations</span><span class="params">(Set&lt;ConstraintViolation&lt;Object&gt;&gt; violations, Errors errors)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (ConstraintViolation&lt;Object&gt; violation : violations) &#123;</div><div class="line">			String field = determineField(violation);</div><div class="line">			FieldError fieldError = errors.getFieldError(field);</div><div class="line">			<span class="keyword">if</span> (fieldError == <span class="keyword">null</span> || !fieldError.isBindingFailure()) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					ConstraintDescriptor&lt;?&gt; cd = violation.getConstraintDescriptor();</div><div class="line">					String errorCode = determineErrorCode(cd);</div><div class="line">					Object[] errorArgs = getArgumentsForConstraint(errors.getObjectName(), field, cd);</div><div class="line">					<span class="keyword">if</span> (errors <span class="keyword">instanceof</span> BindingResult) &#123;</div><div class="line">						<span class="comment">// Can do custom FieldError registration with invalid value from ConstraintViolation,</span></div><div class="line">						<span class="comment">// as necessary for Hibernate Validator compatibility (non-indexed set path in field)</span></div><div class="line">						BindingResult bindingResult = (BindingResult) errors;</div><div class="line">						String nestedField = bindingResult.getNestedPath() + field;</div><div class="line">						<span class="keyword">if</span> (<span class="string">""</span>.equals(nestedField)) &#123;</div><div class="line">							String[] errorCodes = bindingResult.resolveMessageCodes(errorCode);</div><div class="line">							bindingResult.addError(<span class="keyword">new</span> ObjectError(</div><div class="line">									errors.getObjectName(), errorCodes, errorArgs, violation.getMessage()));</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">else</span> &#123;</div><div class="line">							Object rejectedValue = getRejectedValue(field, violation, bindingResult);</div><div class="line">							String[] errorCodes = bindingResult.resolveMessageCodes(errorCode, field);</div><div class="line">							bindingResult.addError(<span class="keyword">new</span> FieldError(</div><div class="line">									errors.getObjectName(), nestedField, rejectedValue, <span class="keyword">false</span>,</div><div class="line">									errorCodes, errorArgs, violation.getMessage()));</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						<span class="comment">// got no BindingResult - can only do standard rejectValue call</span></div><div class="line">						<span class="comment">// with automatic extraction of the current field value</span></div><div class="line">						errors.rejectValue(field, errorCode, errorArgs, violation.getMessage());</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (NotReadablePropertyException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"JSR-303 validated property '"</span> + field +</div><div class="line">							<span class="string">"' does not have a corresponding accessor for Spring data binding - "</span> +</div><div class="line">							<span class="string">"check your DataBinder's configuration (bean property versus direct field access)"</span>, ex);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>验证错误直接附加到<code>DataBinder</code>的<strong>private AbstractPropertyBindingResult bindingResult</strong>字段。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBinder</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistry</span>, <span class="title">TypeConverter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/** Default object name used for binding: "target" */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_OBJECT_NAME = <span class="string">"target"</span>;</div><div class="line"></div><div class="line">	<span class="comment">/** Default limit for array and collection growing: 256 */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_AUTO_GROW_COLLECTION_LIMIT = <span class="number">256</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * We'll create a lot of DataBinder instances: Let's use a static logger.</div><div class="line">	 */</div><div class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(DataBinder.class);</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object target;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String objectName;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> AbstractPropertyBindingResult bindingResult;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> SimpleTypeConverter typeConverter;</div></pre></td></tr></table></figure>
<p>此时它的值会在<code>ModelAttributeMethodProcessor</code>中检索:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (binder.getBindingResult().hasErrors()) &#123;</div><div class="line">    <span class="keyword">if</span> (isBindExceptionRequired(binder, parameter)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="controller方法内获取BindingResult"><a href="#controller方法内获取BindingResult" class="headerlink" title="controller方法内获取BindingResult"></a>controller方法内获取BindingResult</h2><p>需要注意的是，要在控制器的方法中检索<code>BindingResult</code>，必须将<code>BindingResult</code>实例直接放在经过验证的对象之后。具体请看<strong>public String addArticle(@ModelAttribute(“article”) @Valid Article article, BindingResult result)</strong>，<code>BindingResult</code>的实例将包含所有的验证错误。这时，如果你在<code>Article</code>和<code>BindingResult</code>实例之间放置另一个对象(例如:<code>HttpServletRequest request</code>)，将抛出如下异常:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">An Errors/BindingResult argument is expected to be declared immediately after the  model attribute, the @RequestBody or the @RequestPart arguments to which they apply.</div></pre></td></tr></table></figure>
<p>此错误消息的内容可以在<strong>org.springframework.web.method.annotation.ErrorsMethodArgumentResolver</strong>类中找到。此类用于从方法签名中解析错误实例。如果问为什么用<code>ErrorsMethodArgumentResolver</code>来解析<code>BindingResults</code>？简单来说，这是由于<code>BindingResult</code>接口扩展了<code>Errors</code>接口的缘故。所以，两者都可以用相同的参数解析器解决。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Resolves &#123;<span class="doctag">@link</span> Errors&#125; method arguments.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;An &#123;<span class="doctag">@code</span> Errors&#125; method argument is expected to appear immediately after</div><div class="line"> * the model attribute in the method signature. It is resolved by expecting the</div><div class="line"> * last two attributes added to the model to be the model attribute and its</div><div class="line"> * &#123;<span class="doctag">@link</span> BindingResult&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rossen Stoyanchev</div><div class="line"> * <span class="doctag">@since</span> 3.1</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorsMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</div><div class="line">		Class&lt;?&gt; paramType = parameter.getParameterType();</div><div class="line">		<span class="keyword">return</span> Errors.class.isAssignableFrom(paramType);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></div><div class="line">			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">"Errors/BindingResult argument only supported on regular handler methods"</span>);</div><div class="line"></div><div class="line">		ModelMap model = mavContainer.getModel();</div><div class="line">		<span class="keyword">if</span> (model.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> lastIndex = model.size()-<span class="number">1</span>;</div><div class="line">			String lastKey = <span class="keyword">new</span> ArrayList&lt;&gt;(model.keySet()).get(lastIndex);</div><div class="line">			<span class="keyword">if</span> (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) &#123;</div><div class="line">				<span class="keyword">return</span> model.get(lastKey);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">				<span class="string">"An Errors/BindingResult argument is expected to be declared immediately after the model attribute, "</span> +</div><div class="line">				<span class="string">"the @RequestBody or the @RequestPart arguments to which they apply: "</span> + parameter.getMethod());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面代码可以看出，由于BindingResult的放置的位置 不正确，而导致验证过程失败的方法其实很简单:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ModelMap model = mavContainer.getModel();</div><div class="line"><span class="keyword">if</span> (model.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">int</span> lastIndex = model.size()-<span class="number">1</span>;</div><div class="line">    String lastKey = <span class="keyword">new</span> ArrayList&lt;String&gt;(model.keySet()).get(lastIndex);</div><div class="line">    <span class="keyword">if</span> (lastKey.startsWith(BindingResult.MODEL_KEY_PREFIX)) &#123;</div><div class="line">        <span class="keyword">return</span> model.get(lastKey);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，它获得用于构建视图部分的模型数据的ModelMap。所要验证对象和<code>BindingResult</code>如果放置正确，那么所要打印的日志应该如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">model equals to &#123;article=Article &#123;text = &#125;, org.springframework.validation.BindingResult.article=org.springframework.validation.BeanPropertyBindingResult: <span class="number">1</span> errors</div><div class="line">Field error in object <span class="string">'article'</span> on field <span class="string">'text'</span>: rejected value []; codes [NotEmpty.article.text,NotEmpty.text,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [article.text,text]; arguments []; <span class="keyword">default</span> message [text]]; <span class="keyword">default</span> message [Text can<span class="string">'t be empty]&#125;</span></div></pre></td></tr></table></figure>
<p>之后，将值放在<code>ArrayList</code>中，并获取最后一个 entry key。然后，检查此键是否以<code>org.springframework.validation.BindingResult</code>开头(BindingResult 接口的常量值)。如果是，该方法返回发现的Errors实例。否则，将抛出一个IllegalStateException异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BindingResult</span> <span class="keyword">extends</span> <span class="title">Errors</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Prefix for the name of the BindingResult instance in a model,</div><div class="line">	 * followed by the object name.</div><div class="line">	 */</div><div class="line">	String MODEL_KEY_PREFIX = BindingResult.class.getName() + <span class="string">"."</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return the wrapped target object, which may be a bean, an object with</div><div class="line">	 * public fields, a Map - depending on the concrete binding strategy.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function">Object <span class="title">getTarget</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>这篇文章讲了Spring 验证的一些过程细节。它的第一部分介绍了验证流程，从@ModelAttribute开始，并以验证器集合结束。第二部分看了看基本的Spring验证器。在最后，我们看到一个非常常见的bug，基于直接在验证对象之后放置BindingResult实例，并解释了其中的原理所在。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-使用-Valid进行Spring验证&quot;&gt;&lt;a href=&quot;#Spring5源码解析-使用-Valid进行Spring验证&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-使用@Valid进行Spring验证&quot;&gt;&lt;/a&gt;Spring5源码解析-使用@Valid进行Spring验证&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;验证功能在Spring中是很常用的。你可以使用注解或自己的验证器并将其绑定到请求中。本文将重点介绍第一种解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一部分将介绍注解验证流程。在第二部分中，将介绍基本实现的组件。最后一部分将包含Spring初学者开发人员常见错误的解释:是否有必要直接在验证对象之后放置&lt;code&gt;BindingResult&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的处理拦截器</title>
    <link href="https://muyinchen.github.io/2017/08/07/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://muyinchen.github.io/2017/08/07/Spring5源码解析-Spring中的处理拦截器/</id>
    <published>2017-08-07T09:18:26.872Z</published>
    <updated>2017-08-10T05:00:54.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的处理拦截器"><a href="#Spring5源码解析-Spring中的处理拦截器" class="headerlink" title="Spring5源码解析-Spring中的处理拦截器"></a>Spring5源码解析-Spring中的处理拦截器</h1><p>在Java的Web应用程序中通常使用过滤器(即filter)来捕获HTTP请求。但它们仅为webapps保留。Spring引入了一种新的方法来实现，更通用，称为处理程序拦截器。</p>
<p>本文将分3部分。第一部分来讲Spring处理程序拦截器的理论概念。第二部分，说一说默认的Spring拦截器。最后一部分老规矩，应用实战，我们将写我们自己的处理程序拦截器。<br><a id="more"></a></p>
<h2 id="什么是Spring中的处理程序拦截器？"><a href="#什么是Spring中的处理程序拦截器？" class="headerlink" title="什么是Spring中的处理程序拦截器？"></a>什么是Spring中的处理程序拦截器？</h2><p>要了解Spring拦截器的作用，我们需要先解释一下HTTP请求的执行链。DispatcherServlet捕获每个请求。调度员做的第一件事就是将接收到的URL和相应的controller进行映射(controller必须恰到好处地处理当前的请求)。但是，在到达对应的controller之前，请求可以被拦截器处理。这些拦截器就像过滤器。只有当URL找到对应于它们的映射时才调用它们。在通过拦截器(拦截器预处理，其实也可以说前置处理)进行前置处理后，请求最终到达controller。之后，发送请求生成视图。但是在这之前，拦截器还是有可能来再次处理它(拦截器后置处理)。只有在最后一次操作之后，视图解析器才能捕获数据并输出视图。</p>
<p>处理程序映射拦截器基于<strong>org.springframework.web.servlet.HandlerInterceptor</strong>接口。和之前简要描述的那样，它们可以在将其发送到控制器(方法前使用<strong>preHandle</strong>)之前或之后(方法后使用<strong>postHandle</strong>)拦截请求。<code>preHandle</code>方法返回一个<code>布尔值</code>，如果返回<code>false</code>，则可以在执行链中<code>执行中断请求处理</code>。此接口中还有一个方法<strong>afterCompletion</strong>，只有在<code>preHandler</code>方法发送为true时才会在渲染视图后调用它(完成请求处理后的回调，即渲染视图后)。</p>
<p>拦截器也可以在新线程中启动。在这种情况下，拦截器必须实现<strong>org.springframework.web.servlet.AsyncHandlerInterceptor</strong>接口。它继承<code>HandlerInterceptor</code>并提供一个方法<strong>afterConcurrentHandlingStarted</strong>。每次处理程序得到正确执行时，都会调用此方法而不是调用<code>postHandler()</code>和<code>afterCompletion()</code>。它也可以对发送请求进行异步处理。通过Spring源码此方法注释可以知道，这个方法的典型的应用是可以用来清理本地线程变量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Extends &#123;<span class="doctag">@code</span> HandlerInterceptor&#125; with a callback method invoked after the</div><div class="line"> * start of asynchronous request handling.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;When a handler starts an asynchronous request, the &#123;<span class="doctag">@link</span> DispatcherServlet&#125;</div><div class="line"> * exits without invoking &#123;<span class="doctag">@code</span> postHandle&#125; and &#123;<span class="doctag">@code</span> afterCompletion&#125; as it</div><div class="line"> * normally does for a synchronous request, since the result of request handling</div><div class="line"> * (e.g. ModelAndView) is likely not yet ready and will be produced concurrently</div><div class="line"> * from another thread. In such scenarios, &#123;<span class="doctag">@link</span> #afterConcurrentHandlingStarted&#125;</div><div class="line"> * is invoked instead, allowing implementations to perform tasks such as cleaning</div><div class="line"> * up thread-bound attributes before releasing the thread to the Servlet container.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;When asynchronous handling completes, the request is dispatched to the</div><div class="line"> * container for further processing. At this stage the &#123;<span class="doctag">@code</span> DispatcherServlet&#125;</div><div class="line"> * invokes &#123;<span class="doctag">@code</span> preHandle&#125;, &#123;<span class="doctag">@code</span> postHandle&#125;, and &#123;<span class="doctag">@code</span> afterCompletion&#125;.</div><div class="line"> * To distinguish between the initial request and the subsequent dispatch</div><div class="line"> * after asynchronous handling completes, interceptors can check whether the</div><div class="line"> * &#123;<span class="doctag">@code</span> javax.servlet.DispatcherType&#125; of &#123;<span class="doctag">@link</span> javax.servlet.ServletRequest&#125;</div><div class="line"> * is &#123;<span class="doctag">@code</span> "REQUEST"&#125; or &#123;<span class="doctag">@code</span> "ASYNC"&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Note that &#123;<span class="doctag">@code</span> HandlerInterceptor&#125; implementations may need to do work</div><div class="line"> * when an async request times out or completes with a network error. For such</div><div class="line"> * cases the Servlet container does not dispatch and therefore the</div><div class="line"> * &#123;<span class="doctag">@code</span> postHandle&#125; and &#123;<span class="doctag">@code</span> afterCompletion&#125; methods will not be invoked.</div><div class="line"> * Instead, interceptors can register to track an asynchronous request through</div><div class="line"> * the &#123;<span class="doctag">@code</span> registerCallbackInterceptor&#125; and &#123;<span class="doctag">@code</span> registerDeferredResultInterceptor&#125;</div><div class="line"> * methods on &#123;<span class="doctag">@link</span> org.springframework.web.context.request.async.WebAsyncManager</div><div class="line"> * WebAsyncManager&#125;. This can be done proactively on every request from</div><div class="line"> * &#123;<span class="doctag">@code</span> preHandle&#125; regardless of whether async request processing will start.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rossen Stoyanchev</div><div class="line"> * <span class="doctag">@since</span> 3.2</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.context.request.async.WebAsyncManager</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.context.request.async.CallableProcessingInterceptor</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.context.request.async.DeferredResultProcessingInterceptor</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncHandlerInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called instead of &#123;<span class="doctag">@code</span> postHandle&#125; and &#123;<span class="doctag">@code</span> afterCompletion&#125;, when</div><div class="line">	 * the a handler is being executed concurrently.</div><div class="line">	 * &lt;p&gt;Implementations may use the provided request and response but should</div><div class="line">	 * avoid modifying them in ways that would conflict with the concurrent</div><div class="line">	 * execution of the handler. A typical use of this method would be to</div><div class="line">	 * clean up thread-local variables.</div><div class="line">	 * <span class="doctag">@param</span> request the current request</div><div class="line">	 * <span class="doctag">@param</span> response the current response</div><div class="line">	 * <span class="doctag">@param</span> handler the handler (or &#123;<span class="doctag">@link</span> HandlerMethod&#125;) that started async</div><div class="line">	 * execution, for type and/or instance examination</div><div class="line">	 * <span class="doctag">@throws</span> Exception in case of errors</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">afterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="拦截器和过滤器之间的区别"><a href="#拦截器和过滤器之间的区别" class="headerlink" title="拦截器和过滤器之间的区别"></a>拦截器和过滤器之间的区别</h2><p>拦截器看起来很像servlet过滤器，为什么Spring不采用默认的Java解决方案？这其中主要区别就是<code>两者的作用域</code>的问题。过滤器只能在servlet容器下使用。而我们的Spring容器不一定运行在web环境中，在这种情况下过滤器就不好使了，而拦截器依然可以在Spring容器中调用。</p>
<p>Spring通过拦截器为请求提供了一个更细粒度的控制。就像我们之前看到的那样，它们可以在controller对请求处理之前或之后被调用，也可以在将渲染视图呈现给用户之后被调用。如果是过滤器的话，只能在将响应返回给最终用户之前使用它们。</p>
<p>下一个不同之处在于中断链执行的难易程度。拦截器可以通过在<code>preHandler()</code>方法内返回<code>false</code>来简单实现。而在过滤器的情况下，它就变得复杂了，因为它必须处理请求和响应对象来引发中断，需要一些额外的动作，比如如将用户重定向到错误页面。</p>
<h2 id="什么是默认的Spring拦截器？"><a href="#什么是默认的Spring拦截器？" class="headerlink" title="什么是默认的Spring拦截器？"></a>什么是默认的Spring拦截器？</h2><p>Spring主要将拦截器用于切换操作。比如我们最常用的功能之一是区域设置更改(也就是本地化更改)。请查看<strong>org.springframework.web.servlet.i18n.LocaleChangeInterceptor</strong>类中源码，可以通过我们所定义的语言环境解析器来对HTTP请求进行分析来实现。所有区域设置解析器都会分析请求元素(headers，Cookie)，以确定向用户提供哪种本地化语言设置。</p>
<p>另一个本地拦截器是<strong>org.springframework.web.servlet.theme.ThemeChangeInterceptor</strong>，它允许更改视图的主题(见此类的注释)。它还使用主题解析器更精确地来知道要使用的主题(参照下面<strong>preHandle</strong>方法)。它的解析器也基于请求分析(cookie，会话或参数)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interceptor that allows for changing the current theme on every request,</div><div class="line"> * via a configurable request parameter (default parameter name: "theme").</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 20.06.2003</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.servlet.ThemeResolver</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeChangeInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Default name of the theme specification parameter: "theme".</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PARAM_NAME = <span class="string">"theme"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String paramName = DEFAULT_PARAM_NAME;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the name of the parameter that contains a theme specification</div><div class="line">	 * in a theme change request. Default is "theme".</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParamName</span><span class="params">(String paramName)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.paramName = paramName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return the name of the parameter that contains a theme specification</div><div class="line">	 * in a theme change request.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getParamName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.paramName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException &#123;</div><div class="line"></div><div class="line">		String newTheme = request.getParameter(<span class="keyword">this</span>.paramName);</div><div class="line">		<span class="keyword">if</span> (newTheme != <span class="keyword">null</span>) &#123;</div><div class="line">			ThemeResolver themeResolver = RequestContextUtils.getThemeResolver(request);</div><div class="line">			<span class="keyword">if</span> (themeResolver == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No ThemeResolver found: not in a DispatcherServlet request?"</span>);</div><div class="line">			&#125;</div><div class="line">			themeResolver.setThemeName(request, response, newTheme);</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// Proceed in any case.</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在Spring中自定义处理程序拦截器"><a href="#在Spring中自定义处理程序拦截器" class="headerlink" title="在Spring中自定义处理程序拦截器"></a>在Spring中自定义处理程序拦截器</h2><p>我们写一个例子来简单实现HandlerInterceptor。一个乐透彩票的场景，这个自定义的拦截器将分析每个请求，并决定是否是彩票的“lottery winner”。为了简化代码逻辑，只有用于生成一个随机数并通过取模判断是否返回0的请求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LotteryInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ATTR_NAME = <span class="string">"lottery_winner"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LotteryInterceptor.class);</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[LotteryInterceptor] afterCompletion"</span>);</div><div class="line">         </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView view)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[LotteryInterceptor] postHandle"</span>);</div><div class="line">         </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[LotteryInterceptor] preHandle"</span>);</div><div class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(ATTR_NAME) == <span class="keyword">null</span>) &#123;</div><div class="line">            Random random = <span class="keyword">new</span> Random();</div><div class="line">            <span class="keyword">int</span> i = random.nextInt(<span class="number">10</span>);</div><div class="line">            request.getSession().setAttribute(ATTR_NAME, i%<span class="number">2</span> == <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于相应controller中要展示的信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TestController.class);</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"Controller asks, are you a lottery winner ? "</span>+request.getSession().getAttribute(LotteryInterceptor.ATTR_NAME));</div><div class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们尝试访问<code>/test</code>，我们将看不到拦截器的日志，因为它没有在配置中定义。如果我们是使用注解来配置的webapp。我们需要将下面这个配置添加到应用程序的上下文文件中(Springboot配置个相应的bean就可):</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.waitingforcode.interceptors.LotteryInterceptor"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在我们可以访问/ test页面并检查日志:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[LotteryInterceptor] preHandle</div><div class="line">Controller asks, are you a lottery winner ? <span class="keyword">false</span></div><div class="line">[LotteryInterceptor] postHandle</div><div class="line">[LotteryInterceptor] afterCompletion</div></pre></td></tr></table></figure>
<p>总结一下，拦截器是一种可以应用到整个Spring生态系统中的servlet过滤器。它们可以在请求之前或之后启动，也可以在视图呈现之后启动。它们也可以通过AsyncHandlerInterceptor接口的实现达到异步处理的效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的处理拦截器&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的处理拦截器&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的处理拦截器&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的处理拦截器&lt;/h1&gt;&lt;p&gt;在Java的Web应用程序中通常使用过滤器(即filter)来捕获HTTP请求。但它们仅为webapps保留。Spring引入了一种新的方法来实现，更通用，称为处理程序拦截器。&lt;/p&gt;
&lt;p&gt;本文将分3部分。第一部分来讲Spring处理程序拦截器的理论概念。第二部分，说一说默认的Spring拦截器。最后一部分老规矩，应用实战，我们将写我们自己的处理程序拦截器。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的处理器handlers</title>
    <link href="https://muyinchen.github.io/2017/08/05/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8handlers/"/>
    <id>https://muyinchen.github.io/2017/08/05/Spring5源码解析-Spring中的处理器handlers/</id>
    <published>2017-08-05T15:50:00.223Z</published>
    <updated>2017-08-10T04:45:53.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring5源码解析-Spring中的处理器handlers"><a href="#Spring5源码解析-Spring中的处理器handlers" class="headerlink" title="Spring5源码解析-Spring中的处理器handlers"></a>Spring5源码解析-Spring中的处理器handlers</h2><blockquote>
<p>Spring Web应用程序的中心站是<code>DispatcherServlet</code>(具体请查看<a href="https://muyinchen.github.io/2017/08/02/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AE%BASpring%20DispatcherServlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Spring5源码解析-论Spring DispatcherServlet的生命周期</a>)。这是所有传入请求的中心入口。但如果没有但如果没有众多的handlers，我们依然不能做任何事情。</p>
</blockquote>
<p>首先，在本文中，我们先解读<code>handler</code>到底是个啥。之后，我们将介绍一些<code>Spring</code>框架中<code>handlers</code>的两种处理类型。最后我们加点<code>salt</code>来让我们学的东西进行落地，我们将编写我们自己的handler。<br><a id="more"></a></p>
<h2 id="Spring中的两种handler类型"><a href="#Spring中的两种handler类型" class="headerlink" title="Spring中的两种handler类型"></a>Spring中的两种handler类型</h2><p>首先，在Spring的世界中，这些<code>handler</code>到底做了些什么。简单的讲，这个就和我们听到一句话或者看到某个场景，然后有相关的反应是一样的，由很多处理最后转换到我们大脑皮层所能理解的东西。从机器语言的角度就是词法分析，语法分析，好咯，大家知道编译语言的重要性也就是基础的重要性了吧，回到框架中来，对于Spring来讲，这些处理程序就是一种将用户操作转换为Spring可以理解的元素。说到<code>用户操作</code>，我们可以考虑像<code>http://xxx.com/login</code>这样的URL类型。而我们的<code>handler</code>，在这里作为翻译处理，将尝试找到为此地址应该调用哪个控制器来处理。通常我们写<code>Spring controller</code>代码都知道，处理程序可以查找<code>@RequestMapping</code>的注解，并检查哪些映射与<code>/login</code> 这个URL匹配。由上一篇文章我们可以知道，这个处理程序将在<code>DispatcherServlet</code>的内被调用。</p>
<p>更准确地说，Spring中存在两种类型的handlers。第一种是<strong>handler mappings(处理程序映射)</strong>。它们的角色定位与前面所描述的功能完全相同。它们尝试将当前请求与相应的<code>controller</code>以及其中的方法相匹配。第二种是<strong>handler adapter(处理器适配器)</strong>。<code>handler adapter</code>从<code>handler mappings</code>中获取映射的<code>controllers</code> 和方法并调用它们。这种类型的适配器必须实现<strong>org.springframework.web.servlet.HandlerAdapter</strong>接口，它只有3种方法： </p>
<ul>
<li><strong>boolean supports(Object handler)</strong>:检查传入参数的对象是否可以由此适配器处理 </li>
<li><strong>ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) </strong>: 将请求翻译成视图。</li>
<li><strong>long getLastModified(HttpServletRequest request, Object handler)</strong>:返回给定<code>HttpServletRequest</code>的最后修改日期，以毫秒为单位。</li>
</ul>
<p>但这里要注意的是，在Spring版本中有一些重要变化。作为<code>DefaultAnnotationHandlerMapping</code>，<code>AnnotationMethodHandlerAdapter</code>或<code>AnnotationMethodHandlerExceptionResolver</code>的处理程序适配器自Spring 3.2版本以来已经废弃，在<code>Spring4.x</code>里还可以看到，在<code>Spring5</code>内已经删除掉了，替代品为<code>RequestMappingHandlerMapping</code>，<code>RequestMappingHandlerAdapter</code>和<code>ExceptionHandlerExceptionResolver</code>。通过这些新类以便于自定义映射。另外，通过在<code>since 3.1</code> 版本中<strong>org.springframework.web.method.HandlerMethod</strong>类中引入，来将所处理的对象转换为其方法表示。我们可以通过这个方法来判断对象返回的类型或者哪些参数是我们所期望的(看着拗口的话请打开源码查看此类注释)。</p>
<h2 id="Spring框架中的handler"><a href="#Spring框架中的handler" class="headerlink" title="Spring框架中的handler"></a>Spring框架中的handler</h2><p>除了已经提供的处理程序适配器之外，Spring也有本地处理程序映射，最基本的处理程序映射器是<strong>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping</strong>类。它将<code>URL</code>与相应的bean进行匹配。例如，请看下面的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/friends"</span> <span class="attr">class</span>=<span class="string">"com.waitingforcode.controller.FriendsController"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>正如你所看到的，这种配置在很多URL的情况下是很不实用的。一些更灵活的处理映射器是<strong>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping</strong>。而不是为每个请求创建<code>bean</code>，我们可以创建一个映射文件，其中包含URL作为键和<code>controller</code>作为值，看下面的配置:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleUrlMapping"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/friends.html"</span>&gt;</span>FriendsController<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是，在<code>SimpleUrlHandlerMapping</code>中，处理稍微复杂URL也是一个头疼的问题。这也是为什么我们要用<code>DefaultAnnotationHandlerMapping</code>或者在最新的<code>Spring</code>版本中使用</p>
<p><code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code>的</p>
<p>原因。它们的映射检测是基于注解。这样，所有的逻辑都保留在Java代码这块，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FriendsController</span> </span>&#123;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/friends.html"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showFriendsList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"friendsListView"</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/friends/potential-friends.html"</span> method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showPotentialFriends</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"potentialFriendsView"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与以前的处理程序不同的是，基于注解允许更灵活的配置。不仅不需要在<code>XML</code>进行各种繁琐的配置，一旦<code>URL</code>很多的情况下，想象一下<code>XML</code>,各种头大，现在通过注解，我们可以把一条路上不同岔口的<code>URL</code>在一个<code>controller</code>里进行接收处理就好。当配置文件中定义<code>&lt;mvc:annotation-driven/&gt;</code>时，此处理程序将被激活。另外，为了更细粒度的处理<code>controller</code>注解，我们可以通过添加<code>&lt;context:annotation-config /&gt;</code>(有后面这个之后此处也可以省略，后者本身 就具有此功能)和<code>&lt;context:component-scan base-package =“path.with.my.services.and.controllers”/&gt;</code>来启用它们。</p>
<h2 id="编写自定义的Spring-handler程序"><a href="#编写自定义的Spring-handler程序" class="headerlink" title="编写自定义的Spring handler程序"></a>编写自定义的Spring handler程序</h2><p>现在我们更深入了解一下Spring mapping handlers。我们来实现个我们自己的URL处理程序。其实很简单(因为只需要达到最基本的处理目的就可以了) ，我们将替换<code>RequestMappingHandlerMapping</code>，并使一个简单的映射器来处理URL地址。我们的映射器将只处理静态URL，如:<code>/home.html</code>。它无须也无法从方法签名中获取动态参数以及也无须知道<code>@PathVariable</code>元素。主要目标是让大家从中发现Spring处理一个请求所进行的步骤。</p>
<p>我们这个<code>handler</code>将扩展<code>RequestMappingHandlerMapping</code>并覆盖其方法(有些方法可以从<code>RequestMappingInfoHandlerMapping</code>找到，其实就是重写或实现<code>AbstractHandlerMethodMapping</code>里的几个抽象方法)： </p>
<ul>
<li><strong>protected void registerHandlerMethod(Object handler，Method method，RequestMappingInfo mapping)</strong>: </li>
<li><p><strong>protected boolean isHandler(Class beanType)</strong>: 检查bean是否符合给定处理程序的条件。 </p>
</li>
<li><p><strong>protected RequestMappingInfo getMappingForMethod(Method method，Class handlerType)</strong>: 为给定的Method实例提供映射的方法，该方法表示处理的方法（例如，使用<code>@RequestMapping</code>注解的<code>controller</code>的方法上所对应的<code>URL</code>）。</p>
</li>
</ul>
<ul>
<li><strong>protected HandlerMethod handleNoMatch(Set requestMappingInfos, String lookupPath, HttpServletRequest request)</strong> : 在给定的<code>HttpServletRequest</code>对象找不到匹配的处理方法时被调用。  </li>
<li><strong>protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request)</strong> : 当为给定的<code>HttpServletRequest</code>对象找到匹配的处理方法时调用。</li>
</ul>
<p>在写这个<code>handler</code>之前，让我们写个自定义的<code>@RequestMapping</code>的注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DumberRequestMapping &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>唯一的属性是代表<code>URL路径</code>的值，与<code>@RequestMapping</code>注解中的<code>value属性</code>完全相同。现在我们可以传入我们的处理程序映射类。该课程在内部进行评论。这就是为什么它不会在通常的“文本模式”中包含任何补充评论。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DumberRequestHandlerMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingHandlerMapping</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(DumberRequestHandlerMapping.class);</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Checks if handler should be applied to given bean's class. The check is made through looking for DumberRequestMapping annotation.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</div><div class="line">        Method[] methods = ReflectionUtils.getAllDeclaredMethods(beanType);</div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">            <span class="keyword">if</span> (AnnotationUtils.findAnnotation(method, DumberRequestMapping.class) != <span class="keyword">null</span>) &#123;</div><div class="line">                LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] Method "</span>+method+<span class="string">" supports @DumberRequestMapping "</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Make some operations directly before returning HttpServletRequest instance into mapped controller's method. For example, if you add here some attributes to this object, those attributes will be reachable from controller's method which handles the request. </div><div class="line">     * RequestMappingInfoHandlerMapping does some of more complicated stuff here like exposing URI template variables or extracting </div><div class="line">     * "matrix variable".</div><div class="line">     * NOTE : "matrix variables" are name-value pairs within path segments, separated with a semicolon (;). For example in this URL </div><div class="line">     * /clubs;country=France;division=Ligue 1, Ligue 2) we can find 2 matrix variables: country (France) and division (list composed by </div><div class="line">     * Ligue 1 and Ligue 2)</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleMatch</span><span class="params">(RequestMappingInfo info, String lookupPath, HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] handleMatch info "</span>+info+  <span class="string">", lookupPath ="</span>+ lookupPath + <span class="string">", request ="</span>+request);</div><div class="line">        request.setAttribute(<span class="string">"isDumber"</span>, <span class="keyword">true</span>);</div><div class="line">        request.setAttribute(<span class="string">"handledTime"</span>, System.nanoTime());</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Method invoked when given lookupPath doesn't match with this handler mapping.</div><div class="line">     * Native RequestMappingInfoHandlerMapping uses this method to launch two exceptions : </div><div class="line">     * - HttpRequestMethodNotSupportedException - if some URLs match, but no theirs HTTP methods.</div><div class="line">     * - HttpMediaTypeNotAcceptableException - if some URLs match, but no theirs content types. For example, a handler can match an URL </div><div class="line">     * like /my-page/test, but can expect that the request should be send as application/json. Or, the handler can match the URL but </div><div class="line">     * returns an inappropriate response type, for example: text/html instead of application/json.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">handleNoMatch</span><span class="params">(Set&lt;RequestMappingInfo&gt; requestMappingInfos, String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] handleNoMatch info "</span>+requestMappingInfos+  <span class="string">", lookupPath ="</span>+ lookupPath + <span class="string">", request ="</span>+request);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Here we constructs RequestMappingInfo instance for given method.</div><div class="line">     * RequestMappingInfo - this object is used to encapsulate mapping conditions. For example, it contains an instance of </div><div class="line">     * PatternsRequestCondition which  is used in native Spring's RequestMappingInfoHandlerMapping  handleMatch() method to put URI </div><div class="line">     * variables into <span class="doctag">@RequestMapping</span> pattern. </div><div class="line">     * Ie, it will take the following URL /test/1 and match it for URI template /test/&#123;id&#125;. In occurrence, it will found that 1 </div><div class="line">     * corresponding to <span class="doctag">@PathVariable</span> represented  by id variable (&#123;id&#125;) and will set its value to 1.</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">getMappingForMethod</span><span class="params">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] getMappingForMethod method "</span>+method+  <span class="string">", handlerType ="</span>+handlerType);</div><div class="line">        RequestMappingInfo info = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// look for @DumberRequestMapping annotation for the Method method from signature</span></div><div class="line">        DumberRequestMapping methodAnnotation = AnnotationUtils.findAnnotation(method, DumberRequestMapping.class);</div><div class="line">        <span class="keyword">if</span> (methodAnnotation != <span class="keyword">null</span>) &#123;</div><div class="line">            RequestCondition&lt;?&gt; methodCondition = getCustomMethodCondition(method);</div><div class="line">            info = createRequestMappingInfo(methodAnnotation, methodCondition);</div><div class="line">        &#125;</div><div class="line">        LOGGER.debug(<span class="string">"[DumberRequestHandlerMapping] getMappingForMethod method; returns info mapping "</span>+info);</div><div class="line">        <span class="keyword">return</span> info;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates RequestMappingInfo object which encapsulates:</div><div class="line">     * - PatternsRequestCondition: represents URI template to resolve. Resolving is helped by UrlPathHelper utility class from</div><div class="line">     * package org.springframework.web.util.</div><div class="line">     * - RequestMethodsRequestCondition: methods accepted by this handler. You can make a test and replace RequestMethod.GET by </div><div class="line">     * RequestMethod.POST. You will able to observe that our test won't work.</div><div class="line">     * - ParamsRequestCondition: </div><div class="line">     * - HeadersRequestCondition: headers which should be send in request to given handler should handle this request. You can,</div><div class="line">     * for exemple, put there an header value like "my-header:test" and observe the program behavior.</div><div class="line">     * - ConsumesRequestCondition: this condition allows to specify the content-type of request. We can use it for, for example,</div><div class="line">     * specify that a method can be handled only for application/json request.</div><div class="line">     * - ProducesRequestCondition: this condition allows to specify the content-type of response. We can use it for, for example,</div><div class="line">     * specify that a method can be applied only for text/plain response. </div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">createRequestMappingInfo</span><span class="params">(DumberRequestMapping annotation, RequestCondition&lt;?&gt; customCondition)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RequestMappingInfo(</div><div class="line">                <span class="keyword">new</span> PatternsRequestCondition(<span class="keyword">new</span> String[] &#123;annotation.value()&#125;),</div><div class="line">                <span class="keyword">new</span> RequestMethodsRequestCondition(<span class="keyword">new</span> RequestMethod[]&#123;RequestMethod.GET&#125;),</div><div class="line">                <span class="keyword">new</span> ParamsRequestCondition(<span class="keyword">new</span> String[]&#123;&#125;),</div><div class="line">                <span class="keyword">new</span> HeadersRequestCondition(<span class="keyword">new</span> String[] &#123;&#125;),</div><div class="line">                <span class="keyword">new</span> ConsumesRequestCondition(<span class="keyword">new</span> String[]&#123;&#125;, <span class="keyword">new</span> String[]&#123;&#125;),</div><div class="line">                <span class="keyword">new</span> ProducesRequestCondition(<span class="keyword">new</span> String[]&#123;&#125;, <span class="keyword">new</span> String[]&#123;&#125;, getContentNegotiationManager()),</div><div class="line">                customCondition);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们需要向我们的应用程序上下文添加新的<code>HandlerMapping</code>。请看下面这个基于XML的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.mypackage.handler.DumberRequestHandlerMapping"</span>&gt;</span>//此处根据自己的包进行配置</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>请注意，order属性的存在确定了按顺序将请求由<code>HandlerMapping</code>处理。在这里，如果<code>DumberRequestHandlerMapping</code>可以应用于一个请求，Spring将立即使用它，而不需要寻找另一个可用的处理程序。</p>
<p>最后一件事是使用<code>@DumberRequestMapping</code>在方法上添加注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(TestController.class);</div><div class="line">    <span class="meta">@DumberRequestMapping</span>(value = <span class="string">"/test"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSession</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"Is dumber request ?"</span>+request.getAttribute(<span class="string">"isDumber"</span>));</div><div class="line">        LOGGER.debug(<span class="string">"Handled time ?"</span>+request.getAttribute(<span class="string">"handledTime"</span>));</div><div class="line">        <span class="keyword">return</span> <span class="string">"testTemplate"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过执行<code>http://localhost:8084/test</code>，您将看到在<code>DumberRequestHandlerMapping</code>的<code>handleMatch</code>方法中设置的请求的属性存在。如果您部署有应用程序的日志，您将看到有关controller执行流程的一些信息：</p>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">027</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [org<span class="variable">.springframework</span><span class="variable">.web</span><span class="variable">.servlet</span><span class="variable">.mvc</span><span class="variable">.method</span><span class="variable">.annotation</span><span class="variable">.RequestMappingHandlerMapping</span>]-[DEBUG] Looking up handler method <span class="keyword">for</span> path /test   <span class="comment">//先在RequestMappingHandlerMapping找的，也就是先找有@RequestMapping注解相应处理逻辑的方法来处理</span></div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">028</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [org<span class="variable">.springframework</span><span class="variable">.web</span><span class="variable">.servlet</span><span class="variable">.mvc</span><span class="variable">.method</span><span class="variable">.annotation</span><span class="variable">.RequestMappingHandlerMapping</span>]-[DEBUG] Did <span class="keyword">not</span> find handler method <span class="keyword">for</span> [/test]   <span class="comment">//在RequestMappingHandlerMapping中没找到相应的处理逻辑</span></div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">028</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.DumberRequestHandlerMapping</span>]-[DEBUG] Looking up handler method <span class="keyword">for</span> path /test</div><div class="line">  <span class="comment">//从DumberRequestHandlerMapping里找，发现@DumberRequestMapping所注解的方法可以处理，那就处理咯</span></div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">029</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.DumberRequestHandlerMapping</span>]-[DEBUG] [DumberRequestHandlerMapping] handleMatch info &#123;[/test],methods=[GET],params=[],headers=[],consumes=[],produces=[],custom=[]&#125;, lookupPath =/test, request =org<span class="variable">.apache</span><span class="variable">.catalina</span><span class="variable">.connector</span><span class="variable">.RequestFacade</span>@<span class="number">24</span>a7274b</div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">030</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.DumberRequestHandlerMapping</span>]-[DEBUG] Returning handler method [public java<span class="variable">.lang</span><span class="variable">.String</span> com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.controller</span><span class="variable">.TestController</span><span class="variable">.testSession</span>(javax<span class="variable">.servlet</span><span class="variable">.http</span><span class="variable">.HttpServletRequest</span>)]</div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">030</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [org<span class="variable">.springframework</span><span class="variable">.beans</span><span class="variable">.factory</span><span class="variable">.support</span><span class="variable">.DefaultListableBeanFactory</span>]-[DEBUG] Returning cached <span class="keyword">instance</span> of singleton bean 'testController'</div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">030</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [org<span class="variable">.springframework</span><span class="variable">.web</span><span class="variable">.servlet</span><span class="variable">.DispatcherServlet</span>]-[DEBUG] Last-Modified value <span class="keyword">for</span> [/test] is: -<span class="number">1</span></div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">040</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.controller</span><span class="variable">.TestController</span>]-[DEBUG] Is dumber request ?true</div><div class="line"><span class="number">2017</span>-<span class="number">08</span>-<span class="number">05</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">00</span>,<span class="number">040</span> [http-bio-<span class="number">8084</span>-exec-<span class="number">1</span>] [com<span class="variable">.migo</span><span class="variable">.sso</span><span class="variable">.controller</span><span class="variable">.TestController</span>]-[DEBUG] Handled <span class="keyword">time</span> ?<span class="number">21230126522470</span></div><div class="line">Handled <span class="keyword">time</span> ?<span class="number">17452005683775</span></div></pre></td></tr></table></figure>
<p>我们可以看到， handler mapping是Spring生态系统中的一个关键概念。所有的URL都由对应的处理程序处理，由此，Spring可以匹配传入的HTTP请求和所加注解配置的controller的方法。我们也看到了如何根据不同规则来过滤请求，例如：Content-Type，Accept或其他headers 或HTTP方法。我们还编写了一个poor版本的Spring的<code>RequestMappingInfoHandlerMapping</code>，它拦截一些URL处理并将结果通过视图输出给用户。</p>
<p>总结起来就是，通过一定的方式确定相应请求的处理位置(我们通常通过注解来确定)，仅此而已，啰嗦了太多的东西，最后也就是如此的直白</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring5源码解析-Spring中的处理器handlers&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的处理器handlers&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的处理器handlers&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的处理器handlers&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Web应用程序的中心站是&lt;code&gt;DispatcherServlet&lt;/code&gt;(具体请查看&lt;a href=&quot;https://muyinchen.github.io/2017/08/02/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AE%BASpring%20DispatcherServlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/&quot;&gt;Spring5源码解析-论Spring DispatcherServlet的生命周期&lt;/a&gt;)。这是所有传入请求的中心入口。但如果没有但如果没有众多的handlers，我们依然不能做任何事情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，在本文中，我们先解读&lt;code&gt;handler&lt;/code&gt;到底是个啥。之后，我们将介绍一些&lt;code&gt;Spring&lt;/code&gt;框架中&lt;code&gt;handlers&lt;/code&gt;的两种处理类型。最后我们加点&lt;code&gt;salt&lt;/code&gt;来让我们学的东西进行落地，我们将编写我们自己的handler。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-论Spring DispatcherServlet的生命周期</title>
    <link href="https://muyinchen.github.io/2017/08/02/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AE%BASpring%20DispatcherServlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://muyinchen.github.io/2017/08/02/Spring5源码解析-论Spring DispatcherServlet的生命周期/</id>
    <published>2017-08-02T15:25:58.734Z</published>
    <updated>2017-08-02T17:07:42.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-论Spring-DispatcherServlet的生命周期"><a href="#Spring5源码解析-论Spring-DispatcherServlet的生命周期" class="headerlink" title="Spring5源码解析-论Spring DispatcherServlet的生命周期"></a>Spring5源码解析-论Spring DispatcherServlet的生命周期</h1><p>Spring Web框架架构的主要部分是<code>DispatcherServlet</code>。也就是本文中重点介绍的对象。<br><a id="more"></a><br>在本文的第一部分中，我们将看到基于<code>Spring的DispatcherServlet</code>的主要概念：前端控制器模式。第二部分将专门介绍Spring应用程序中的执行链。接下来是<code>DispatcherServlet类</code>的解释。在最后一部分，我们将尝试开发一个自定义的<code>dispatcher servlet</code>。</p>
<p>请注意，本文分析的DispatcherServlet来自Spring的5.0.0.RC3版本。如果使用不同的版本，则可能需要进行几个调整，其实因为分析的都是比较固定的东西，很少有改的。</p>
<h2 id="什么是前端控制器模式？"><a href="#什么是前端控制器模式？" class="headerlink" title="什么是前端控制器模式？"></a>什么是前端控制器模式？</h2><p>在进入<code>DispatcherServlet</code>之前，我们需要了解一些关于它的概念基础。<code>DispatcherServlet</code>所隐含的关键概念其实就是<strong>前端控制器模式</strong>。</p>
<p>此模式为Web应用程序提供了一个中心入口点。该集中入口点将系统组件的共同特征进行重新组合。我们可以在那里找到安全资源，语言切换，会话管理，缓存或输入过滤的处理程序。这样做的一个很大的好处是:这个共同的入口点有助于避免代码重复。</p>
<p>因此，从技术上讲，前端控制器模式由一个捕获所有传入请求的类组成。之后，分析每个请求以知道哪个控制器以及哪个方法应该来处理该请求。</p>
<p>前端控制器模式有助于对以下询问做出最佳响应: </p>
<ul>
<li>如何集中授权和认证？ </li>
<li>如何处理正确的视图渲染？ </li>
<li>如何使用URL重写映射将请求发送到适当的控制器？</li>
</ul>
<p>这个前台控制器模式包含5名参与者： </p>
<ul>
<li>客户端：发送请求。 </li>
<li>控制器：应用程序的中心点，捕获所有请求。 </li>
<li>调度员：管理视图的选择，以呈现给客户端。 </li>
<li>视图：表示呈现给客户端的内容。 </li>
<li>帮助：帮助查看和/或控制器完成请求处理。</li>
</ul>
<h2 id="什么是DispatcherServlet的执行链？"><a href="#什么是DispatcherServlet的执行链？" class="headerlink" title="什么是DispatcherServlet的执行链？"></a>什么是DispatcherServlet的执行链？</h2><p>由标题可以看到，前端控制器模式有自己的执行链。这意味着它有自己的逻辑来处理请求并将视图返回给客户端：</p>
<ol>
<li><p>请求由客户端发送。它到达作为Spring的默认前端控制器的<code>DispatcherServlet</code>类。</p>
</li>
<li><p><code>DispatcherServlet</code>使用请求处理程序映射来发现将分析请求的控制器(controller</p>
<p>)。接口<strong>org.springframework.web.servlet.HandlerMapping</strong>的实现返回一个包含<strong>org.springframework.web.servlet.HandlerExecutionChain</strong>类的实例。此实例包含可在控制器调用之前或之后调用的处理程序拦截器数组。你可以在Spring中有关于拦截器的文章中了解更多的信息。如果在所有定义的处理程序映射中找不到<code>HandlerExecutionChain</code>，这意味着Spring无法将URL与对应的控制器进行匹配。这样的话会抛出一个错误。</p>
</li>
<li><p>现在系统进行拦截器预处理并调用由映射处理器找到的相应的controller(其实就是在找到的controller之前进行一波拦截处理)。在controller处理请求后，<code>DispatcherServlet</code>开始拦截器的后置处理。在此步骤结束时，它从controller接收ModelAndView实例(整个过程其实就是 <code>request请求</code>-&gt;<code>进入interceptors</code>-&gt;<code>controller</code>-&gt;<code>从interceptors出来</code>-&gt;<code>ModelAndView接收</code>)。</p>
</li>
<li><p>DispatcherServlet现在将使用的该视图的名称发送到视图解析器。这个解析器将决定前台的展现内容。接着，它将此视图返回给DispatcherServlet，其实也就是一个“视图生成后可调用”的拦截器。</p>
</li>
<li><p>最后一个操作是视图的渲染并作为对客户端request请求的响应。</p>
</li>
</ol>
<h2 id="什么是DispatcherServlet？"><a href="#什么是DispatcherServlet？" class="headerlink" title="什么是DispatcherServlet？"></a>什么是DispatcherServlet？</h2><p>通过上面讲到的前端控制器模式，我们可以很轻易的知道<code>DispatcherServlet</code>是基于<code>Spring</code>的<code>Web</code>应用程序的中心点。它需要传入请求，并在处理程序映射，拦截器，控制器和视图解析器的帮助下，生成对客户端的响应。所以，我们可以分析这个类的细节，并总结出一些核心要点。</p>
<p>下面是处理一个请求时<code>DispatcherServlet</code>执行的步骤：</p>
<h4 id="1-策略初始化"><a href="#1-策略初始化" class="headerlink" title="1. 策略初始化"></a>1. 策略初始化</h4><p><code>DispatcherServlet</code>是一个位于<strong>org.springframework.web.servlet</strong>包中的类，并扩展了同一个包中的抽象类<code>FrameworkServlet</code>。它包含一些解析器的私有静态字段(用于本地化，视图，异常或上传文件)，<code>映射处理器:handlerMapping</code>和<code>处理适配器:handlerAdapter</code>(进入这个类的第一眼就能看到的)。<code>DispatcherServlet</code>非常重要的一个核心点就是是初始化策略的方法(<strong>protected void initStrategies（ApplicationContext context）</strong>)。在调用<code>onRefresh</code>方法时调用此方法。最后一次调用是在<code>FrameworkServlet</code>中通过<code>initServletBean</code>和<code>initWebApplicationContext</code>方法进行的(<code>initServletBean</code>方法中调用<code>initWebApplicationContext</code>，后者调用<code>onRefresh(wac)</code>)。<code>initServletBean</code>通过所提供的这些策略生成我们所需要的应用程序上下文。其中每个策略都会产生一类在<code>DispatcherServlet</code>中用来处理传入请求的对象。</p>
<p>基于篇幅，有些代码就不给贴示了，请在相应版本的源码中自行对照查找，此处只给一部分源码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This implementation calls &#123;<span class="doctag">@link</span> #initStrategies&#125;.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">	initStrategies(context);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize the strategy objects that this servlet uses.</div><div class="line"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">	initMultipartResolver(context);</div><div class="line">	initLocaleResolver(context);</div><div class="line">	initThemeResolver(context);</div><div class="line">	initHandlerMappings(context);</div><div class="line">	initHandlerAdapters(context);</div><div class="line">	initHandlerExceptionResolvers(context);</div><div class="line">	initRequestToViewNameTranslator(context);</div><div class="line">	initViewResolvers(context);</div><div class="line">	initFlashMapManager(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，如果找的结果不存在，则捕获异常<code>NoSuchBeanDefinitionException</code>(下面两段代码的第一段)，并采用默认策略。如果在DispatcherServlet.properties文件中初始定义的默认策略不存在，则抛出BeanInitializationException异常(下面两段代码的第二段)。默认策略如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Initialize the LocaleResolver used by this class.</div><div class="line">	 * &lt;p&gt;If no bean is defined with the given name in the BeanFactory for this namespace,</div><div class="line">	 * we default to AcceptHeaderLocaleResolver.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocaleResolver</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.localeResolver = context.getBean(LOCALE_RESOLVER_BEAN_NAME, LocaleResolver.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Using LocaleResolver ["</span> + <span class="keyword">this</span>.localeResolver + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">			<span class="comment">// We need to use the default.</span></div><div class="line">			<span class="keyword">this</span>.localeResolver = getDefaultStrategy(context, LocaleResolver.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Unable to locate LocaleResolver with name '"</span> + LOCALE_RESOLVER_BEAN_NAME +<span class="string">"': using default ["</span> + <span class="keyword">this</span>.localeResolver + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>抛出异常后调用<code>getDefaultStrategy</code>(因为容器里都是单例的存在，所以只需要判断基于这个接口的默认实现实例size为1即可，两个以上还能叫默认么，都有选择了):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return the default strategy object for the given strategy interface.</div><div class="line"> * The default implementation delegates to &#123;<span class="doctag">@link</span> #getDefaultStrategies&#125;,</div><div class="line"> * expecting a single object in the list.</div><div class="line"> * <span class="doctag">@param</span> context the current WebApplicationContext</div><div class="line"> * <span class="doctag">@param</span> strategyInterface the strategy interface</div><div class="line"> * <span class="doctag">@return</span> the corresponding strategy object</div><div class="line"> * <span class="doctag">@see</span> #getDefaultStrategies</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">getDefaultStrategy</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">    List&lt;T&gt; strategies = getDefaultStrategies(context, strategyInterface);</div><div class="line">    <span class="keyword">if</span> (strategies.size() != <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">                <span class="string">"DispatcherServlet needs exactly 1 strategy for interface ["</span> + strategyInterface.getName() + <span class="string">"]"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> strategies.get(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a List of default strategy objects for the given strategy interface.</div><div class="line">	 * The default implementation uses the "DispatcherServlet.properties" file (in the same</div><div class="line">	 * package as the DispatcherServlet class) to determine the class names. It instantiates</div><div class="line">	 * the strategy objects through the context's BeanFactory.</div><div class="line">	 * <span class="doctag">@param</span> context the current WebApplicationContext</div><div class="line">	 * <span class="doctag">@param</span> strategyInterface the strategy interface</div><div class="line">	 * <span class="doctag">@return</span> the List of corresponding strategy objects</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="keyword">protected</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getDefaultStrategies</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">		String key = strategyInterface.getName();</div><div class="line">		String value = defaultStrategies.getProperty(key);</div><div class="line">		<span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">			String[] classNames = StringUtils.commaDelimitedListToStringArray(value);</div><div class="line">			List&lt;T&gt; strategies = <span class="keyword">new</span> ArrayList&lt;&gt;(classNames.length);</div><div class="line">			<span class="keyword">for</span> (String className : classNames) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Class&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</div><div class="line">					Object strategy = createDefaultStrategy(context, clazz);</div><div class="line">					strategies.add((T) strategy);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not find DispatcherServlet's default strategy class ["</span> + className +<span class="string">"] for interface ["</span> + key + <span class="string">"]"</span>, ex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (LinkageError err) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">							<span class="string">"Error loading DispatcherServlet's default strategy class ["</span> + className +<span class="string">"] for interface ["</span> + key + <span class="string">"]: problem with class file or dependent class"</span>, err);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> strategies;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="2-请求预处理"><a href="#2-请求预处理" class="headerlink" title="2.请求预处理"></a>2.请求预处理</h4><p><code>FrameworkServlet</code>抽象类扩展了同一个包下的<code>HttpServletBean</code>，<code>HttpServletBean</code>扩展了<strong>javax.servlet.http.HttpServlet</strong>。点开这个类源码可以看到，<code>HttpServlet</code>是一个抽象类，其方法定义主要用来处理每种类型的<code>HTTP</code>请求：<code>doGet（GET请求）</code>，<code>doPost（POST）</code>，<code>doPut（PUT）</code>，<code>doDelete（DELETE）</code>，<code>doTrace（TRACE）</code>，<code>doHead（HEAD）</code> ，<code>doOptions（OPTIONS）</code>。<code>FrameworkServlet</code>通过将每个传入的请求调度到<strong>processRequest(HttpServletRequest  request，HttpServletResponse response)</strong>来覆盖它们。<code>processRequest</code>是一个<code>protected</code>和<code>final</code>的方法，它构造出<code>LocaleContext</code>和<code>ServletRequestAttributes</code>对象，两者都可以在<code>initContextHolders(request, localeContext, requestAttributes)</code>之后访问。所有这些操作的关键代码 请看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">    processRequest(request, response);</div><div class="line">&#125;</div><div class="line"> ...</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Process this request, publishing an event regardless of the outcome.</div><div class="line"> * The actual event handling is performed by the abstract</div><div class="line"> * &#123;<span class="doctag">@link</span> #doService&#125; template method.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">    Throwable failureCause = <span class="keyword">null</span>;</div><div class="line"> </div><div class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</div><div class="line">    LocaleContext localeContext = buildLocaleContext(request);</div><div class="line"> </div><div class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</div><div class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</div><div class="line"> </div><div class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</div><div class="line"> </div><div class="line">    initContextHolders(request, localeContext, requestAttributes);</div><div class="line"> </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        doService(request, response);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">        failureCause = ex;</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">        failureCause = ex;</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">        failureCause = ex;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</div><div class="line">        <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</div><div class="line">            requestAttributes.requestCompleted();</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            <span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Could not complete request"</span>, failureCause);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">                    logger.debug(<span class="string">"Leaving response open for concurrent processing"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.logger.debug(<span class="string">"Successfully completed request"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        publishRequestHandledEvent(request, startTime, failureCause);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initContextHolders</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">			@Nullable LocaleContext localeContext, @Nullable RequestAttributes requestAttributes) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (localeContext != <span class="keyword">null</span>) &#123;</div><div class="line">			LocaleContextHolder.setLocaleContext(localeContext, <span class="keyword">this</span>.threadContextInheritable);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</div><div class="line">			RequestContextHolder.setRequestAttributes(requestAttributes, <span class="keyword">this</span>.threadContextInheritable);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">			logger.trace(<span class="string">"Bound request context to thread: "</span> + request);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="3-请求处理"><a href="#3-请求处理" class="headerlink" title="3.请求处理"></a>3.请求处理</h4><p>由上面所看到的，在<code>processRequest</code>的代码中，调用<strong>initContextHolders</strong>方法后，调用<strong>protected void doService(HttpServletRequest request，HttpServletResponse  response)</strong>。doService将一些附加参数放入request（如Flash映射:<code>request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap())</code>，上下文信息:<code>request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext())</code>等）中，并调用<strong>protected void doDispatch(HttpServletRequest request，HttpServletResponse response)</strong>。</p>
<p><code>doDispatch</code>方法最重要的部分是处理(<code>handler</code>)的检索。<code>doDispatch</code>调用<code>getHandler()</code>方法来分析处理后的请求并返回<code>HandlerExecutionChain</code>实例。此实例包含<code>handler mapping</code> 和<code>`interceptors(拦截器)</code>。<code>DispatcherServlet</code>做的另一件事是应用预处理程序拦截器（<em>applyPreHandle()</em>）。如果至少有一个返回<code>false</code>，则请求处理停止。否则，<code>servlet</code>使用与 <code>handler adapter</code>适配(其实理解成这也是个<code>handler</code>就对了)相应的<code>handler mapping</code>来生成视图对象。</p>
<p><code>doDispatch</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Process the actual dispatching to the handler.</div><div class="line"> * The handler will be obtained by applying the servlet's HandlerMappings in order.</div><div class="line"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</div><div class="line"> * to find the first that supports the handler class.</div><div class="line"> * All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</div><div class="line"> * themselves to decide which methods are acceptable.</div><div class="line"> * <span class="doctag">@param</span> request current HTTP request</div><div class="line"> * <span class="doctag">@param</span> response current HTTP response</div><div class="line"> * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		HttpServletRequest processedRequest = request;</div><div class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">			Exception dispatchException = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				processedRequest = checkMultipart(request);</div><div class="line">				multipartRequestParsed = (processedRequest != request);</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler for the current request.</span></div><div class="line">				mappedHandler = getHandler(processedRequest);</div><div class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</div><div class="line">					noHandlerFound(processedRequest, response);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler adapter for the current request.获取可处理request的Handler，适配器其实还				//是调用的相应的Handler,一样的功能，具体请参考本人的Spring设计模式中的适配器模式</span></div><div class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></div><div class="line">				String method = request.getMethod();</div><div class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</div><div class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</div><div class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</div><div class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">						logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Actually invoke the handler.此处就会调用我们写的controller来执行咯</span></div><div class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//视图解析</span></div><div class="line">				applyDefaultViewName(processedRequest, mv);</div><div class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				dispatchException = ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">				<span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></div><div class="line">				<span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></div><div class="line">				dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</div><div class="line">			&#125;</div><div class="line">          	<span class="comment">//此处进行最后一步的视图渲染</span></div><div class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler,</div><div class="line">					<span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></div><div class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></div><div class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</div><div class="line">					cleanupMultipart(processedRequest);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="4-视图解析"><a href="#4-视图解析" class="headerlink" title="4.视图解析"></a>4.视图解析</h4><p>获取<code>ModelAndView</code>实例以查看呈现后，<code>doDispatch</code>方法调用<strong>private void applyDefaultViewName(HttpServletRequest request，ModelAndView mv)</strong>。默认视图名称根据定义的bean名称，即<code>viewNameTranslator</code>。默认情况下，它的实现是<strong>org.springframework.web.servlet.RequestToViewNameTranslator</strong>。这个默认实现只是简单的将URL转换为视图名称，例如(直接从<code>RequestToViewNameTranslator</code>获取):http:// localhost:8080/admin/index.html将生成视图admin / index。</p>
<p>代码如下:</p>
<p>下一步是调用后置拦截器(其实就是出拦截器)做的一些处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** RequestToViewNameTranslator used by this servlet */</span></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</div><div class="line">...</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		initMultipartResolver(context);</div><div class="line">		initLocaleResolver(context);</div><div class="line">		initThemeResolver(context);</div><div class="line">		initHandlerMappings(context);</div><div class="line">		initHandlerAdapters(context);</div><div class="line">		initHandlerExceptionResolvers(context);</div><div class="line">		initRequestToViewNameTranslator(context); <span class="comment">//看下面注释</span></div><div class="line">		initViewResolvers(context);</div><div class="line">		initFlashMapManager(context);</div><div class="line">	&#125;</div><div class="line">...</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Initialize the RequestToViewNameTranslator used by this servlet instance.</div><div class="line">	 * &lt;p&gt;If no implementation is configured then we default to DefaultRequestToViewNameTranslator.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRequestToViewNameTranslator</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.viewNameTranslator =</div><div class="line">					context.getBean(REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME, RequestToViewNameTranslator.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Using RequestToViewNameTranslator ["</span> + <span class="keyword">this</span>.viewNameTranslator + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">			<span class="comment">// We need to use the default.</span></div><div class="line">			<span class="keyword">this</span>.viewNameTranslator = getDefaultStrategy(context, RequestToViewNameTranslator.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Unable to locate RequestToViewNameTranslator with name '"</span> +</div><div class="line">						REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME + <span class="string">"': using default ["</span> + <span class="keyword">this</span>.viewNameTranslator +<span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">....</div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Translate the supplied request into a default view name.</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP servlet request</div><div class="line">	 * <span class="doctag">@return</span> the view name (or &#123;<span class="doctag">@code</span> null&#125; if no default found)</div><div class="line">	 * <span class="doctag">@throws</span> Exception if view name translation failed</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">getDefaultViewName</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.viewNameTranslator != <span class="keyword">null</span> ? <span class="keyword">this</span>.viewNameTranslator.getViewName(request) : <span class="keyword">null</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</code>实现的<code>org.springframework.web.servlet.RequestToViewNameTranslator</code>接口，其内对上段代码中<code>getDefaultViewName</code>的实现为:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultRequestToViewNameTranslator</span> <span class="keyword">implements</span> <span class="title">RequestToViewNameTranslator</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SLASH = <span class="string">"/"</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">private</span> String prefix = <span class="string">""</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String suffix = <span class="string">""</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String separator = SLASH;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> stripLeadingSlash = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> stripTrailingSlash = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> stripExtension = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the prefix to prepend to generated view names.</div><div class="line">	 * <span class="doctag">@param</span> prefix the prefix to prepend to generated view names</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.prefix = (prefix != <span class="keyword">null</span> ? prefix : <span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the suffix to append to generated view names.</div><div class="line">	 * <span class="doctag">@param</span> suffix the suffix to append to generated view names</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.suffix = (suffix != <span class="keyword">null</span> ? suffix : <span class="string">""</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the value that will replace '&#123;<span class="doctag">@code</span> /&#125;' as the separator</div><div class="line">	 * in the view name. The default behavior simply leaves '&#123;<span class="doctag">@code</span> /&#125;'</div><div class="line">	 * as the separator.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSeparator</span><span class="params">(String separator)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.separator = separator;</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Translates the request URI of the incoming &#123;<span class="doctag">@link</span> HttpServletRequest&#125;</div><div class="line">	 * into the view name based on the configured parameters.</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.web.util.UrlPathHelper#getLookupPathForRequest</div><div class="line">	 * <span class="doctag">@see</span> #transformPath</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getViewName</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">		String lookupPath = <span class="keyword">this</span>.urlPathHelper.getLookupPathForRequest(request);</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.prefix + transformPath(lookupPath) + <span class="keyword">this</span>.suffix);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Transform the request URI (in the context of the webapp) stripping</div><div class="line">	 * slashes and extensions, and replacing the separator as required.</div><div class="line">	 * <span class="doctag">@param</span> lookupPath the lookup path for the current request,</div><div class="line">	 * as determined by the UrlPathHelper</div><div class="line">	 * <span class="doctag">@return</span> the transformed path, with slashes and extensions stripped</div><div class="line">	 * if desired</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">transformPath</span><span class="params">(String lookupPath)</span> </span>&#123;</div><div class="line">		String path = lookupPath;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.stripLeadingSlash &amp;&amp; path.startsWith(SLASH)) &#123;</div><div class="line">			path = path.substring(<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.stripTrailingSlash &amp;&amp; path.endsWith(SLASH)) &#123;</div><div class="line">			path = path.substring(<span class="number">0</span>, path.length() - <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.stripExtension) &#123;</div><div class="line">			path = StringUtils.stripFilenameExtension(path);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!SLASH.equals(<span class="keyword">this</span>.separator)) &#123;</div><div class="line">			path = StringUtils.replace(path, SLASH, <span class="keyword">this</span>.separator);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> path;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-处理调度请求-视图渲染"><a href="#5-处理调度请求-视图渲染" class="headerlink" title="5.处理调度请求 - 视图渲染"></a>5.处理调度请求 - 视图渲染</h4><p>现在，<code>servlet</code>知道应该是哪个视图被渲染。它通过<strong>private void processDispatchResult(HttpServletRequest request，HttpServletResponse response，@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,@Nullable Exception exception)</strong>方法来进行最后一步操作 - 视图渲染。</p>
<p>首先，<code>processDispatchResult</code>检查它们是否有参数传递异常。有一些异常的话，它定义了一个新的视图，专门用来定位错误页面。如果没有任何异常，该方法将检查<code>ModelAndView实例</code>，如果它不为<code>null</code>，则调用<code>render</code>方法。</p>
<p>渲染方法<code>protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception</code>。跳进此方法内部，根据定义的视图策略，它会查找得到一个<code>View类</code>实例。它将负责显示响应。如果没有找到<code>View</code>，则会抛出一个<code>ServletException异常</code>。有的话，<code>DispatcherServlet</code>会调用其<code>render</code>方法来显示结果。</p>
<p>其实可以说成是后置拦截器(进入拦截器前置拦截处理-&gt;controller处理-&gt;出拦截器之前的此拦截器的后置处理)，也就是在请求处理的最后一个步骤中被调用。</p>
<p>下面是<code>processDispatchResult</code>和<code>render(渲染)</code>的相关代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Handle the result of handler selection and handler invocation, which is</div><div class="line">	 * either a ModelAndView or an Exception to be resolved to a ModelAndView.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">			@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,</div><div class="line">			@Nullable Exception exception) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		<span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</div><div class="line">				logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</div><div class="line">				mv = ((ModelAndViewDefiningException) exception).getModelAndView();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">				mv = processHandlerException(request, response, handler, exception);</div><div class="line">				errorView = (mv != <span class="keyword">null</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Did the handler return a view to render?</span></div><div class="line">		<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</div><div class="line">          <span class="comment">//开始渲染</span></div><div class="line">			render(mv, request, response);</div><div class="line">			<span class="keyword">if</span> (errorView) &#123;</div><div class="line">				WebUtils.clearErrorRequestAttributes(request);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</div><div class="line">						<span class="string">"': assuming HandlerAdapter completed request handling"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">			<span class="comment">// Concurrent handling started during a forward</span></div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">			mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Render the given ModelAndView.</div><div class="line">	 * &lt;p&gt;This is the last stage in handling a request. It may involve resolving the view by name.</div><div class="line">	 * <span class="doctag">@param</span> mv the ModelAndView to render</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP servlet request</div><div class="line">	 * <span class="doctag">@param</span> response current HTTP servlet response</div><div class="line">	 * <span class="doctag">@throws</span> ServletException if view is missing or cannot be resolved</div><div class="line">	 * <span class="doctag">@throws</span> Exception if there's a problem rendering the view</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// Determine locale for request and apply it to the response.</span></div><div class="line">		Locale locale =</div><div class="line">				(<span class="keyword">this</span>.localeResolver != <span class="keyword">null</span> ? <span class="keyword">this</span>.localeResolver.resolveLocale(request) : request.getLocale());</div><div class="line">		response.setLocale(locale);</div><div class="line"></div><div class="line">		View view;</div><div class="line">		String viewName = mv.getViewName();</div><div class="line">		<span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// We need to resolve the view name.</span></div><div class="line">			view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</div><div class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() +</div><div class="line">						<span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></div><div class="line">			view = mv.getView();</div><div class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> +<span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Delegate to the View object for rendering.</span></div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(<span class="string">"Rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</div><div class="line">				response.setStatus(mv.getStatus().value());</div><div class="line">			&#125;</div><div class="line">			view.render(mv.getModelInternal(), request, response);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> +</div><div class="line">						getServletName() + <span class="string">"'"</span>, ex);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Handle the result of handler selection and handler invocation, which is</div><div class="line"> * either a ModelAndView or an Exception to be resolved to a ModelAndView.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">        HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) <span class="keyword">throws</span> Exception &#123;</div><div class="line"> </div><div class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</div><div class="line">            logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</div><div class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">            mv = processHandlerException(request, response, handler, exception);</div><div class="line">            errorView = (mv != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// Did the handler return a view to render?</span></div><div class="line">    <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</div><div class="line">        render(mv, request, response);</div><div class="line">        <span class="keyword">if</span> (errorView) &#123;</div><div class="line">            WebUtils.clearErrorRequestAttributes(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</div><div class="line">                    <span class="string">"': assuming HandlerAdapter completed request handling"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">        <span class="comment">// Concurrent handling started during a forward</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * Render the given ModelAndView.</div><div class="line"> * This is the last stage in handling a request. It may involve resolving the view by name.</div><div class="line"> * <span class="doctag">@param</span> mv the ModelAndView to render</div><div class="line"> * <span class="doctag">@param</span> request current HTTP servlet request</div><div class="line"> * <span class="doctag">@param</span> response current HTTP servlet response</div><div class="line"> * <span class="doctag">@throws</span> ServletException if view is missing or cannot be resolved</div><div class="line"> * <span class="doctag">@throws</span> Exception if there's a problem rendering the view</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// Determine locale for request and apply it to the response.</span></div><div class="line">    Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</div><div class="line">    response.setLocale(locale);</div><div class="line"> </div><div class="line">    View view;</div><div class="line">    <span class="keyword">if</span> (mv.isReference()) &#123;</div><div class="line">        <span class="comment">// We need to resolve the view name.</span></div><div class="line">        view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(</div><div class="line">                    <span class="string">"Could not resolve view with name '"</span> + mv.getViewName() + <span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></div><div class="line">        view = mv.getView();</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> + <span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// Delegate to the View object for rendering.</span></div><div class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">        logger.debug(<span class="string">"Rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        view.render(mv.getModelInternal(), request, response);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这部分中，你需要记住的是我们定义了两个上下文：一个用于应用程序，另一个用于Web应用程序。他们有什么区别？应用程序上下文包含所有通用配置，比如service定义，数据库配置。Web应用程序上下文定义所有与Web相关的组件，比如<code>controllers</code>或视图解析器。</p>
<h2 id="Custom-DispatcherServlet"><a href="#Custom-DispatcherServlet" class="headerlink" title="Custom DispatcherServlet"></a>Custom DispatcherServlet</h2><p>我们已经了解了<code>DispatcherServlet</code>的理论知识。通过文中的这些实用要点，我们可以编写自己的servlet来分派处理请求。同样的，我们也将按步进行，从捕获请求开始，以视图渲染结束。</p>
<p>通过上面的描述，为了捕获请求，我们需要覆盖<code>doService</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CustomDispatcherServlet.class);</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"[CustomDispatcherServlet] I got the request !"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，在我们的日志文件中，我们应该可以找到一条“[CustomDispatcherServlet]I got the request！”。接着，我们继续添加在<code>DispatcherServlet</code>中<code>doDispatch方法</code>所应该做的一些工作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"[CustomDispatcherServlet] I got the request !"</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        LOGGER.debug(<span class="string">"[CustomDispatcherServlet] doService"</span>);</div><div class="line">        LocaleContext localeContext = buildLocaleContext(request);</div><div class="line"> </div><div class="line">        RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</div><div class="line">        ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</div><div class="line"> </div><div class="line">        initContextHolders(request, localeContext, requestAttributes);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法是做什么的？首先，它为构建一个<code>Locale实例</code>用来接收请求。第二步是初始化<strong>org.springframework.web.context.request.ServletRequestAttributes</strong>实例。它是<code>RequestAttributes</code>接口的实现，和本地化在同一级别。通过这个，我们可以访问<code>servlet</code>请求的对象和会话对象，而不必区分会话和全局会话。最后，我们调用<strong>初始化context holders</strong>的<code>initContextHolders()</code>方法，即从应用程序通过<code>LocaleContextHolder</code>和<code>RequestContextHolder</code>静态方法(分别为:<code>getLocaleContext和getRequestAttributes</code>)访问请求属性和区域设置的对象。</p>
<p>当请求被拦截，一些基本的设置就绪的时候。我们发现我们还没有执行链和处理器适配器。我们可以通过以下代码进行:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> HandlerExecutionChain <span class="title">getHandlerExecutionChain</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">for</span> (HandlerMapping mapper : <span class="keyword">this</span>.handlerMappings) &#123;</div><div class="line">        HandlerExecutionChain executionChain = mapper.getHandler(request);</div><div class="line">        <span class="keyword">if</span> (executionChain != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> executionChain;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Execution chain wasn't be found in provided handler mappings: "</span>+<span class="keyword">this</span>.handlerMappings);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过执行链，我们可以通过 handler adapter将处理当前请求。看以下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object executionChain)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">    <span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</div><div class="line">        LOGGER.debug(<span class="string">"[CustomDispatcherServlet] "</span>+adapter + <span class="string">" is instanceof HandlerMethod ? "</span>+(adapter <span class="keyword">instanceof</span> HandlerMethod));</div><div class="line">        <span class="keyword">if</span> (adapter.supports(executionChain)) &#123;</div><div class="line">            <span class="keyword">return</span> adapter;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span>  ServletException(<span class="string">"Handler adapter was not found from adapters list :"</span>+<span class="keyword">this</span>.handlerAdapters);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有应用程序上下文中定义的适配器（<code>this.handlerAdapter</code>）支持适配所生成的执行链（<code>adapter.supports</code>）才可以返回我们想要的适配器。最后，我们可以返回到我们的<code>doService</code>方法并操作它们来渲染视图：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ModelAndView modelView = adapter.handle(request, response, executionChain.getHandler());</div><div class="line">Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</div><div class="line">response.setLocale(locale);</div><div class="line"> </div><div class="line">View view = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (!modelView.isReference()) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Only view models defined as references can be used in this servlet"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</div><div class="line">    view = viewResolver.resolveViewName(modelView.getViewName(), locale);</div><div class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + modelView.getViewName() + <span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">&#125;</div><div class="line">view.render(modelView.getModelMap(), request, response);</div></pre></td></tr></table></figure>
<p>我们的servlet中简化了渲染。实际上，我们仅处理<code>ModelAndView</code>的引用对象。这意味着<code>ModelAndView</code>是一个<code>String</code>的实例，用来表示要解析的视图模型，例如：我们定义好几个模板解析器(比如<code>freemaker</code>，<code>Thymeleaf</code>)，然后查看其配置。在这个检查之后，我们迭代当前视图解析器。能够生成View实例的第一个解析器被视为处理过的请求中使用的解析器。最后，我们检查视图是否正确生成。拿到view实例后，我们调用其render()方法来在屏幕中显示请求处理结果。</p>
<p>在这部分中，我们将描述和代码部分限制在最低限度。只是为了把Spring的整个过程给集中呈现以下，达到更好的理解，其实就是在Servlet中的service方法内做些对request和response的文章而已了。</p>
<blockquote>
<p>本文介绍了Spring Web应用程序的中心点，一个调度器servlet。请记住，它是一个处理所有传入请求并将视图呈现给用户的类。在重写之前，你应该熟悉执行链，handler mapping 或handler adapter等概念。请记住，第一步要做的是定义在调度过程中我们要调用的所有元素。handler mapping 是将传入请求(也就是它的URL)映射到适当的controller。最后提到的元素，一个handler适配器，就是一个对象，它将通过其内包装的handler mapping将请求发送到controller。此调度产生的结果是ModelAndView类的一个实例，后面被用于生成和渲染视图。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-论Spring-DispatcherServlet的生命周期&quot;&gt;&lt;a href=&quot;#Spring5源码解析-论Spring-DispatcherServlet的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-论Spring DispatcherServlet的生命周期&quot;&gt;&lt;/a&gt;Spring5源码解析-论Spring DispatcherServlet的生命周期&lt;/h1&gt;&lt;p&gt;Spring Web框架架构的主要部分是&lt;code&gt;DispatcherServlet&lt;/code&gt;。也就是本文中重点介绍的对象。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(五)</title>
    <link href="https://muyinchen.github.io/2017/08/01/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%94)/"/>
    <id>https://muyinchen.github.io/2017/08/01/Spring框架中的设计模式(五)/</id>
    <published>2017-07-31T16:07:31.895Z</published>
    <updated>2017-07-31T16:08:57.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring框架中的设计模式-五"><a href="#Spring框架中的设计模式-五" class="headerlink" title="Spring框架中的设计模式 (五)"></a>Spring框架中的设计模式 (五)</h2><p>通过以前的4篇文章，我们看到Spring采用了大量的关于创建和结构方面的设计模式。</p>
<p>本文将描述属于行为方面的两种设计模式：命令和访问者。<br><a id="more"></a></p>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>这篇文章描述的第一个行为设计模式是<strong>命令</strong>。它允许将请求封装在一个对象内并附加一个回调动作(每次遇到所所谓的回调大家就只需要理解为一个函数方法就好，省的去浪费那么多脑子)。请求被封装在命令对象之下，而请求的结果被发送到接收者。命令本身不是由调用者执行。为了直白了解其中的主要思想，想象一下管理服务器的情况(远程通过<code>ssh</code>操作<code>Linux</code>服务器)。管理员（<code>invoker</code>）在命令行（<code>commands</code>）中启动一些操作，将结果发送到服务器（接收器）。在这里,所有这一切都是由客户端的终端(也就是我们用的<code>xshell</code>)来完成的。搞个<code>Demo</code>来说明一下(对于命令，它的动作就是执行，对于管理员来讲，我们的动作其实就是一个回车，执不执行当然是管理员说的算了，执行交给命令对象了，服务器最后就是一个展示结果)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="comment">// This test method is a client</span></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Administrator admin = <span class="keyword">new</span> Administrator();</div><div class="line">    Server server = <span class="keyword">new</span> Server();</div><div class="line">     </div><div class="line">    <span class="comment">// start Apache</span></div><div class="line">    admin.setCommand(<span class="keyword">new</span> StartApache(server));</div><div class="line">    admin.typeEnter();</div><div class="line">     </div><div class="line">    <span class="comment">// start Tomcat</span></div><div class="line">    admin.setCommand(<span class="keyword">new</span> StartTomcat(server));</div><div class="line">    admin.typeEnter();</div><div class="line">     </div><div class="line">    <span class="comment">// check executed commands</span></div><div class="line">    <span class="keyword">int</span> executed = server.getExecutedCommands().size();</div><div class="line">    assertTrue(<span class="string">"Two commands should be executed but only "</span>+</div><div class="line">      executed+ <span class="string">" were"</span>, executed == <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// commands</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerCommand</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">protected</span> Server server;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ServerCommand</span><span class="params">(Server server)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.server = server;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StartTomcat</span> <span class="keyword">extends</span> <span class="title">ServerCommand</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StartTomcat</span><span class="params">(Server server)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(server);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">    server.launchCommand(<span class="string">"sudo service tomcat7 start"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StartApache</span> <span class="keyword">extends</span> <span class="title">ServerCommand</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StartApache</span><span class="params">(Server server)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(server);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">    server.launchCommand(<span class="string">"sudo service apache2 start"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// invoker</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Administrator</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> ServerCommand command;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(ServerCommand command)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.command = command;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">typeEnter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.command.execute();</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// receiver</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="comment">// as in common terminals, we store executed commands in history</span></div><div class="line">  <span class="keyword">private</span> List&lt;String&gt; executedCommands = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">launchCommand</span><span class="params">(String command)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Executing: "</span>+command+<span class="string">" on server"</span>);</div><div class="line">    <span class="keyword">this</span>.executedCommands.add(command);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getExecutedCommands</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.executedCommands;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试应通过并打印两个命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Executing: sudo service apache2 start on server</div><div class="line">Executing: sudo service tomcat7 start on server</div></pre></td></tr></table></figure>
<p>命令模式不仅允许封装请求（ServerCommand）并将其传输到接收器（Server），而且还可以更好地处理给定的请求。在这里，这种更好的处理是通过存储命令的执行历史。在Spring中，我们在beanFactory后置处理器的特性中来找到指令设计模式的原理。要通过快速对它们进行定义，应用程序上下文会启动后置处理器，并可以用来对创建的bean进行一些操作（这里不打算细说了，具体的我后面会专门写一篇这方面的文章，来分析其中的源码细节）。</p>
<p>当我们将先前Demo里呈现的命令逻辑转换并对比到<code>Spring bean工厂后处理器</code>时，我们可以区分以下<code>actors</code>：<strong>后置处理器bean</strong>(是指实现<code>BeanFactoryPostProcessor</code>接口)是命令，<strong>org.springframework.context.support.PostProcessorRegistrationDelegate</strong>是调用者(它执行<code>postProcessBeanFactory</code>方法注册所有的后置处理器bean，此处看下面第二段代码)和接收器<strong>org.springframework.beans.factory.config.ConfigurableListableBeanFactory</strong>可以在元素（bean）构造初始化之前修改它们（例如：在初始化bean之前可以更改属性）。</p>
<p>另外，回顾下上面的那个Demo，和我们的Demo中的命令历史管理一样。<code>PostProcessorRegistrationDelegate</code>包含一个内部类<code>BeanPostProcessorChecker</code>，它可以记录当一个bean不符合处理条件的情况。</p>
<p>可以观察<code>PostProcessorRegistrationDelegate</code>中的两段代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * BeanPostProcessor that logs an info message when a bean is created during</div><div class="line">	 * BeanPostProcessor instantiation, i.e. when a bean is not eligible for</div><div class="line">	 * getting processed by all BeanPostProcessors.</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorChecker</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(BeanPostProcessorChecker.class);</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> ConfigurableListableBeanFactory beanFactory;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> beanPostProcessorTargetCount;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">BeanPostProcessorChecker</span><span class="params">(ConfigurableListableBeanFactory beanFactory, <span class="keyword">int</span> beanPostProcessorTargetCount)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.beanFactory = beanFactory;</div><div class="line">			<span class="keyword">this</span>.beanPostProcessorTargetCount = beanPostProcessorTargetCount;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> bean;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (bean != <span class="keyword">null</span> &amp;&amp; !(bean <span class="keyword">instanceof</span> BeanPostProcessor) &amp;&amp; !isInfrastructureBean(beanName) &amp;&amp;</div><div class="line">					<span class="keyword">this</span>.beanFactory.getBeanPostProcessorCount() &lt; <span class="keyword">this</span>.beanPostProcessorTargetCount) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">					logger.info(<span class="string">"Bean '"</span> + beanName + <span class="string">"' of type ["</span> + bean.getClass() +</div><div class="line">							<span class="string">"] is not eligible for getting processed by all BeanPostProcessors "</span> +</div><div class="line">							<span class="string">"(for example: not eligible for auto-proxying)"</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> bean;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInfrastructureBean</span><span class="params">(String beanName)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (beanName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.beanFactory.containsBeanDefinition(beanName)) &#123;</div><div class="line">				BeanDefinition bd = <span class="keyword">this</span>.beanFactory.getBeanDefinition(beanName);</div><div class="line">				<span class="keyword">return</span> RootBeanDefinition.ROLE_INFRASTRUCTURE == bd.getRole();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>定义后的调用,用的就是<code>ConfigurableListableBeanFactory</code>的实例(看<code>BeanPostProcessorChecker</code>注释):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></div><div class="line">			ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) &#123;</div><div class="line"></div><div class="line">		String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Register BeanPostProcessorChecker that logs an info message when</span></div><div class="line">		<span class="comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span></div><div class="line">		<span class="comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span></div><div class="line">		<span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</div><div class="line">  <span class="comment">//BeanPostProcessorChecker</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</div><div class="line"></div><div class="line">		<span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></div><div class="line">		<span class="comment">// Ordered, and the rest.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</div><div class="line">			<span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</div><div class="line">				BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">				priorityOrderedPostProcessors.add(pp);</div><div class="line">				<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">					internalPostProcessors.add(pp);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</div><div class="line">				orderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				nonOrderedPostProcessorNames.add(ppName);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></div><div class="line">		sortPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			orderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		sortPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, orderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Now, register all regular BeanPostProcessors.</span></div><div class="line">		List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		<span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</div><div class="line">			BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</div><div class="line">			nonOrderedPostProcessors.add(pp);</div><div class="line">			<span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</div><div class="line">				internalPostProcessors.add(pp);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></div><div class="line">		sortPostProcessors(beanFactory, internalPostProcessors);</div><div class="line">		registerBeanPostProcessors(beanFactory, internalPostProcessors);</div><div class="line"></div><div class="line">		<span class="comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span></div><div class="line">		<span class="comment">// moving it to the end of the processor chain (for picking up proxies etc).</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>总结一个过程就是，我要BeanFactory里面得到对象(也就是为了得到一个命令的执行结果)，那么，想要在得到对象的时候就已经实现了一些对其修改的想法，那么就通过后置处理器，也是就实现了后置处理器接口的beans(命令里可以通过传入不同的参数来得到不同结果，或者对命令的脚本进行修改)，然后还需要一个执行者(我们在做自动化运维的时候，不止操作一个脚本，这里的<code>PostProcessorRegistrationDelegate</code>就是集中来管理这些的)，最后得到的结果就由<code>BeanFactory</code>来展示咯。</p>
</blockquote>
<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>接下来要介绍的一个行为设计模式是<strong>Visitor</strong>:抽象一点就是通过另一种类型的对象来使一个对象访问。在这个简短定义中，使用这个设计模式中的对象将被视为访问者或对象可被访问。第一个访问者要有可访问支持。这个模式的一个现实的例子可以是一个汽车质检员，他们检查一些汽车零件，比如轮子，制动器和发动机，以判断汽车质量是否合格。我们来做个JUnit测试用例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    CarComponent car = <span class="keyword">new</span> Car();</div><div class="line">    Mechanic mechanic = <span class="keyword">new</span> QualifiedMechanic();</div><div class="line">    car.accept(mechanic);</div><div class="line">    assertTrue(<span class="string">"After qualified mechanics visit, the car should be broken"</span>,</div><div class="line">      car.isBroken());</div><div class="line">    Mechanic nonqualifiedMechanic = <span class="keyword">new</span> NonQualifiedMechanic();</div><div class="line">    car.accept(nonqualifiedMechanic);</div><div class="line">    assertFalse(<span class="string">"Car shouldn't be broken becase non qualified mechanic "</span> +</div><div class="line">      <span class="string">" can't see breakdowns"</span>, car.isBroken());</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// visitor</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mechanic</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CarComponent element)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QualifiedMechanic</span> <span class="keyword">implements</span> <span class="title">Mechanic</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CarComponent element)</span> </span>&#123;</div><div class="line">    element.setBroken(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"qualified"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonQualifiedMechanic</span> <span class="keyword">implements</span> <span class="title">Mechanic</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(CarComponent element)</span> </span>&#123;</div><div class="line">    element.setBroken(<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"unqualified"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// visitable</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> broken;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span></span>;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBroken</span><span class="params">(<span class="keyword">boolean</span> broken)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.broken = broken;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBroken</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.broken;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> broken = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">private</span> CarComponent[] components;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</div><div class="line">    components = <span class="keyword">new</span> CarComponent[] &#123;</div><div class="line">      <span class="keyword">new</span> Wheels(), <span class="keyword">new</span> Engine(), <span class="keyword">new</span> Brake()</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.broken = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (mechanic.getName().equals(<span class="string">"qualified"</span>)) &#123;</div><div class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">      <span class="keyword">while</span> (i &lt; components.length &amp;&amp; <span class="keyword">this</span>.broken == <span class="keyword">false</span>) &#123;</div><div class="line">        CarComponent component = components[i];</div><div class="line">        mechanic.visit(component);</div><div class="line">        <span class="keyword">this</span>.broken = component.isBroken();</div><div class="line">        i++;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// if mechanic isn't qualified, we suppose that </span></div><div class="line">    <span class="comment">// he isn't able to see breakdowns and so </span></div><div class="line">    <span class="comment">// he considers the car as no broken </span></div><div class="line">    <span class="comment">// (even if the car is broken)</span></div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBroken</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.broken;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheels</span> <span class="keyword">extends</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span> </span>&#123;</div><div class="line">    mechanic.visit(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> <span class="keyword">extends</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span> </span>&#123;</div><div class="line">    mechanic.visit(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Brake</span> <span class="keyword">extends</span> <span class="title">CarComponent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Mechanic mechanic)</span> </span>&#123;</div><div class="line">    mechanic.visit(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个例子中，我们可以看到他们有两个机制(访问者,其实就是免检和不免检)：合格和不合格。暴露于他们的可见对象是汽车。通过其接受方式，决定哪个角色应该适用于被访问者(通过代码<code>mechanic.getName().equals(&quot;qualified&quot;)</code>来判断)。当访问者合格时，Car让他分析所有组件。如果访问者不合格，Car认为其干预是无用的，并且在方法<code>isBroken()</code>中直接返回<code>false</code>(其实就是为了达到一个免检的效果)。<code>Spring在beans配置中实现了访问者设计模式</code>。为了观察，我们可以看看<strong>org.springframework.beans.factory.config.BeanDefinitionVisitor</strong>对象，该对象用于<code>解析bean元数据</code>并将其解析为<code>String</code>（例如：具有作用域或工厂方法名称的XML属性）或<code>Object</code>（例如：构造函数定义中的参数）。已解析的值在与分析的bean关联的<code>BeanDefinition</code>实例中进行判断设置。具体的源码请看<code>BeanDefinitionVisitor</code>的代码片段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Traverse the given BeanDefinition object and the MutablePropertyValues</div><div class="line"> * and ConstructorArgumentValues contained in them.</div><div class="line"> * <span class="doctag">@param</span> beanDefinition the BeanDefinition object to traverse</div><div class="line"> * <span class="doctag">@see</span> #resolveStringValue(String)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitBeanDefinition</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</div><div class="line">  visitParentName(beanDefinition);</div><div class="line">  visitBeanClassName(beanDefinition);</div><div class="line">  visitFactoryBeanName(beanDefinition);</div><div class="line">  visitFactoryMethodName(beanDefinition);</div><div class="line">  visitScope(beanDefinition);</div><div class="line">  visitPropertyValues(beanDefinition.getPropertyValues());</div><div class="line">  ConstructorArgumentValues cas = beanDefinition.</div><div class="line">    getConstructorArgumentValues();</div><div class="line">  visitIndexedArgumentValues(cas.</div><div class="line">    getIndexedArgumentValues());</div><div class="line">  visitGenericArgumentValues(cas.</div><div class="line">    getGenericArgumentValues());</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">visitParentName</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</div><div class="line">  String parentName = beanDefinition.getParentName();</div><div class="line">  <span class="keyword">if</span> (parentName != <span class="keyword">null</span>) &#123;</div><div class="line">    String resolvedName = resolveStringValue(parentName);</div><div class="line">    <span class="keyword">if</span> (!parentName.equals(resolvedName)) &#123;</div><div class="line">      beanDefinition.setParentName(resolvedName);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，他们只是访问方式，没有对访问者做任何补充的控制(在Demo里对car的质检员做了控制)。这里访问包括分析给定<code>BeanDefinition</code>的参数，并将其替换为已解析对象。</p>
<p>在最后一篇关于Spring中设计模式的文章中，我们发现了2种行为模式：<code>用于处理bean工厂的后置处理的命令模式</code>和<code>用于将定义的bean参数转换为面向对象（String或Object的实例）参数的访问者模式</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring框架中的设计模式-五&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-五&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式 (五)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式 (五)&lt;/h2&gt;&lt;p&gt;通过以前的4篇文章，我们看到Spring采用了大量的关于创建和结构方面的设计模式。&lt;/p&gt;
&lt;p&gt;本文将描述属于行为方面的两种设计模式：命令和访问者。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(四)</title>
    <link href="https://muyinchen.github.io/2017/07/28/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20(%E5%9B%9B)/"/>
    <id>https://muyinchen.github.io/2017/07/28/Spring框架中的设计模式 (四)/</id>
    <published>2017-07-28T03:34:36.564Z</published>
    <updated>2017-07-28T18:43:50.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的设计模式-四"><a href="#Spring框架中的设计模式-四" class="headerlink" title="Spring框架中的设计模式 (四)"></a>Spring框架中的设计模式 (四)</h1><p>本文是Spring框架中使用的设计模式第四篇。本文将在此呈现出新的3种模式。</p>
<p>一开始，我们会讨论2种结构模式：适配器和装饰器。在第三部分和最后一部分，我们将讨论单例模式。<br> <a id="more"></a></p>
<h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><p>当我们需要在给定场景下(也就是给定接口)想要不改变自身行为而又想做到一些事情的情况下(就是我给电也就是接口了，你来做事也就是各种电器)，使用<strong>适配器设计模式</strong>(这里再说一点，就相当于我们再一个规章制度的环境下，如何去适应并达到我们期待的效果，放在架构设计这里，可以拿一个php系统和一个Java系统来说，假如两者要互相调用对方的功能，我们可以设计一套对外的api来适配)。这意味着在调用此对象之前，我们将更改使用对象而不改变机制。拿一个现实中的例子进行说明，想象一下你想要用电钻来钻一个洞。要钻一个小洞，你会使用小钻头，钻一个大的需要用大钻头。可以看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    HoleMaker maker = <span class="keyword">new</span> HoleMakerImpl();</div><div class="line">    maker.makeHole(<span class="number">1</span>);</div><div class="line">    maker.makeHole(<span class="number">2</span>);</div><div class="line">    maker.makeHole(<span class="number">30</span>);</div><div class="line">    maker.makeHole(<span class="number">40</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">HoleMaker</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHole</span><span class="params">(<span class="keyword">int</span> diameter)</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DrillBit</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSmallHole</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeBigHole</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Two adaptee objects</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigDrillBit</span> <span class="keyword">implements</span> <span class="title">DrillBit</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSmallHole</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// do nothing</span></div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeBigHole</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Big hole is made byt WallBigHoleMaker"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallDrillBit</span> <span class="keyword">implements</span> <span class="title">DrillBit</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSmallHole</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Small hole is made byt WallSmallHoleMaker"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeBigHole</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// do nothing</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Adapter class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drill</span> <span class="keyword">implements</span> <span class="title">HoleMaker</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> DrillBit drillBit;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Drill</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    drillBit = getMakerByDiameter(diameter);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHole</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isSmallDiameter(diameter)) &#123;</div><div class="line">            drillBit.makeSmallHole();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drillBit.makeBigHole();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">private</span> DrillBit <span class="title">getMakerByDiameter</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isSmallDiameter(diameter)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmallDrillBit();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BigDrillBit();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSmallDiameter</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> diameter &lt; <span class="number">10</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Client class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoleMakerImpl</span> <span class="keyword">implements</span> <span class="title">HoleMaker</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHole</span><span class="params">(<span class="keyword">int</span> diameter)</span> </span>&#123;</div><div class="line">    HoleMaker maker = <span class="keyword">new</span> Drill(diameter);</div><div class="line">    maker.makeHole(diameter);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码的结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Small hole is made byt SmallDrillBit</div><div class="line">Small hole is made byt SmallDrillBit</div><div class="line">Big hole is made byt BigDrillBit</div><div class="line">Big hole is made byt BigDrillBit</div></pre></td></tr></table></figure>
<p>可以看到，hole 是由所匹配的DrillBit对象制成的。如果孔的直径小于10，则使用SmallDrillBit。如果它更大，我们使用BigDrillBit。</p>
<p>思路就是，要打洞，那就要有打洞的工具，这里提供一个电钻接口和钻头。电钻就是用来打洞的，所以，它就一个接口方法即可，接下来定义钻头的接口，无非就是钻头的尺寸标准，然后搞出两个钻头实现类出来，接下来就是把钻头和电钻主机组装起来咯，也就是<code>Drill</code>类，里面有电钻接口+钻头(根据要钻的孔大小来确定用哪个钻头)，其实也就是把几个单一的东西组合起来拥有丰富的功能，最后我们进行封装下:<code>HoleMakerImpl</code>，这样只需要根据尺寸就可以打相应的孔了，对外暴露的接口极为简单，无须管内部逻辑是多么复杂</p>
<p>Spring使用适配器设计模式来处理不同servlet容器中的<strong>加载时编织</strong>(<strong>load-time-weaving</strong>)。在面向切面编程（AOP）中使用<strong>load-time-weaving</strong>，一种方式是在类加载期间将AspectJ的方面注入字节码。另一种方式是对类进行编译时注入或对已编译的类进行静态注入。</p>
<p>我们可以从关于Spring和JBoss的处理接口这里找到一个很好的例子，它包含在<strong>org.springframework.instrument.classloading.jboss</strong>包中。我们检索<code>JBossLoadTimeWeaver类</code>负责<code>JBoss容器</code>的编织管理。然而，类加载器对于<code>JBoss 6</code>（使用<code>JBossMCAdapter</code>实例）和<code>JBoss 7/8</code>（使用<code>JBossModulesAdapter</code>实例）是不同的。根据<code>JBoss</code>版本，我们在<code>JBossLoadTimeWeaver</code>构造函数中初始化相应的适配器（与我们示例中的<code>Drill</code>的构造函数完全相同）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">JBossLoadTimeWeaver</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> JBossClassLoaderAdapter adapter;</div><div class="line"> </div><div class="line">  Assert.notNull(classLoader, <span class="string">"ClassLoader must not be null"</span>);</div><div class="line">  <span class="keyword">if</span> (classLoader.getClass().getName().startsWith(<span class="string">"org.jboss.modules"</span>)) &#123;</div><div class="line">    <span class="comment">// JBoss AS 7 or WildFly 8</span></div><div class="line">    <span class="keyword">this</span>.adapter = <span class="keyword">new</span> JBossModulesAdapter(classLoader);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// JBoss AS 6</span></div><div class="line">    <span class="keyword">this</span>.adapter = <span class="keyword">new</span> JBossMCAdapter(classLoader);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而且，此适配器所创建的实例用于根据运行的servlet容器版本进行编织操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.adapter.addTransformer(transformer);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getInstrumentableClassLoader</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.adapter.getInstrumentableClassLoader();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>总结：适配器模式，其实就是我们用第一人称的视角去看世界，我想拓展我自己的技能的时候，就实行拿来主义，就好比这里的我是电钻的视角，那么我想拥有钻大孔或者小孔的功能，那就把钻头拿到手组合起来就好。</p>
<p>和装饰模式的区别：装饰模式属于第三人称的视角，也就是上帝视角！我只需要把几个功能性的组件给拿到手，进行组合一下，实现一个更加<code>niubility</code>的功能这里提前说下，这样看下面的内容能好理解些。下面解释装饰模式</p>
</blockquote>
<h2 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h2><p>这里描述的第二种设计模式看起来类似于适配器。它是<strong>装饰模式</strong>。这种设计模式的主要作用是为给定的对象添加补充角色。举个现实的例子，就拿咖啡来讲。通常越黑越苦，你可以添加（<code>装饰</code>）糖和牛奶，使咖啡不那么苦。咖啡在这里被装饰的对象，糖与牛奶是用来装饰的。可以参考下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorSample</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Coffee sugarMilkCoffee=<span class="keyword">new</span> MilkDecorator(<span class="keyword">new</span> SugarDecorator(<span class="keyword">new</span> BlackCoffee()));</div><div class="line">    assertEquals(sugarMilkCoffee.getPrice(), <span class="number">6</span>d, <span class="number">0</span>d);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// decorated</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span></span>&#123;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> candied=<span class="number">0</span>;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">double</span> price=<span class="number">2</span>d;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.price;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.price+=price;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackCoffee</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.price;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// abstract decorator</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeDecorator</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</div><div class="line">  <span class="keyword">protected</span> Coffee coffee;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CoffeeDecorator</span><span class="params">(Coffee coffee)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.coffee=coffee;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.coffee.getPrice();</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.coffee.makeMoreCandied();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// concrete decorators</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MilkDecorator</span> <span class="keyword">extends</span> <span class="title">CoffeeDecorator</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MilkDecorator</span><span class="params">(Coffee coffee)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(coffee);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()+<span class="number">1</span>d;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.makeMoreCandied()+<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SugarDecorator</span> <span class="keyword">extends</span> <span class="title">CoffeeDecorator</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SugarDecorator</span><span class="params">(Coffee coffee)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(coffee);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getPrice()+<span class="number">3</span>d;</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeMoreCandied</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.makeMoreCandied()+<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个简单的装饰器的小例子是基于对父方法的调用，从而改变最后的属性（我们这里是指价格和加糖多少）。在Spring中，我们在处理与Spring管理缓存同步事务的相关类中可以 发现装饰器设计模式的例子。这个类是<strong>org.springframework.cache.transaction.TransactionAwareCacheDecorator</strong>。</p>
<p>这个类的哪些特性证明它是<strong>org.springframework.cache.Cache</strong>对象的装饰器？首先，与我们的咖啡示例一样，<code>TransactionAwareCacheDecorator</code>的构造函数接收参数装饰对象（Cache）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Cache targetCache;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Create a new TransactionAwareCache for the given target Cache.</div><div class="line"> * <span class="doctag">@param</span> targetCache the target Cache to decorate</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TransactionAwareCacheDecorator</span><span class="params">(Cache targetCache)</span> </span>&#123;</div><div class="line">  Assert.notNull(targetCache, <span class="string">"Target Cache must not be null"</span>);</div><div class="line">  <span class="keyword">this</span>.targetCache = targetCache;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，通过这个对象，我们可以得到一个新的行为:为给定的目标缓存创建一个新的TransactionAwareCache。这个我们可以在<code>TransactionAwareCacheDecorator</code>的注释中可以阅读到，其主要目的是提供缓存和Spring事务之间的同步级别。这是通过<strong>org.springframework.transaction.support.TransactionSynchronizationManager</strong>中的两种缓存方法实现的：<code>put</code> 和 <code>evict</code>(其实最终不还是通过<code>targetCache</code>来实现的么)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">final</span> Object key, <span class="keyword">final</span> Object value)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</div><div class="line">    TransactionSynchronizationManager.registerSynchronization(</div><div class="line">      <span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</div><div class="line">          targetCache.put(key, value);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.targetCache.put(key, value);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evict</span><span class="params">(<span class="keyword">final</span> Object key)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</div><div class="line">          TransactionSynchronizationManager.registerSynchronization(</div><div class="line">            <span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</div><div class="line">              <span class="meta">@Override</span></div><div class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</div><div class="line">                targetCache.evict(key);</div><div class="line">              &#125;</div><div class="line">          &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">this</span>.targetCache.evict(key);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种模式看起来类似于适配器，对吧？但是，它们还是有区别的。我们可以看到，适配器将对象适配到运行时环境，即。如果我们在JBoss 6中运行，我们使用与JBoss 7不同的类加载器。Decorator每次使用相同的主对象（Cache）工作，并且仅向其添加新行为（与本例中的Spring事务同步），另外，可以通过我在解读这个设计模式之前的说法来区分二者。</p>
<p>我们再以springboot的初始化来举个例子的，这块后面会进行仔细的源码分析的，这里就仅仅用设计模式来说下的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Event published as early as conceivably possible as soon as a &#123;<span class="doctag">@link</span> SpringApplication&#125;</div><div class="line"> * has been started - before the &#123;<span class="doctag">@link</span> Environment&#125; or &#123;<span class="doctag">@link</span> ApplicationContext&#125; is</div><div class="line"> * available, but after the &#123;<span class="doctag">@link</span> ApplicationListener&#125;s have been registered. The source</div><div class="line"> * of the event is the &#123;<span class="doctag">@link</span> SpringApplication&#125; itself, but beware of using its internal</div><div class="line"> * state too much at this early stage since it might be modified later in the lifecycle.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Dave Syer</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationStartedEvent</span> <span class="keyword">extends</span> <span class="title">SpringApplicationEvent</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new &#123;<span class="doctag">@link</span> ApplicationStartedEvent&#125; instance.</div><div class="line">	 * <span class="doctag">@param</span> application the current application</div><div class="line">	 * <span class="doctag">@param</span> args the arguments the application is running with</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ApplicationStartedEvent</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(application, args);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从注释可以看出 <code>ApplicationListener</code>要先行到位的，然后就是started的时候<code>Event published</code>走起，接着就是<code>Environment</code>配置好，<code>ApplicationContext</code>进行初始化完毕，那我们去看<code>ApplicationListener</code>的源码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Listener for the &#123;<span class="doctag">@link</span> SpringApplication&#125; &#123;<span class="doctag">@code</span> run&#125; method.</div><div class="line"> * &#123;<span class="doctag">@link</span> SpringApplicationRunListener&#125;s are loaded via the &#123;<span class="doctag">@link</span> SpringFactoriesLoader&#125;</div><div class="line"> * and should declare a public constructor that accepts a &#123;<span class="doctag">@link</span> SpringApplication&#125;</div><div class="line"> * instance and a &#123;<span class="doctag">@code</span> String[]&#125; of arguments. A new</div><div class="line"> * &#123;<span class="doctag">@link</span> SpringApplicationRunListener&#125; instance will be created for each run.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Phillip Webb</div><div class="line"> * <span class="doctag">@author</span> Dave Syer</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called immediately when the run method has first started. Can be used for very</div><div class="line">	 * early initialization.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called once the environment has been prepared, but before the</div><div class="line">	 * &#123;<span class="doctag">@link</span> ApplicationContext&#125; has been created.</div><div class="line">	 * <span class="doctag">@param</span> environment the environment</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called once the &#123;<span class="doctag">@link</span> ApplicationContext&#125; has been created and prepared, but</div><div class="line">	 * before sources have been loaded.</div><div class="line">	 * <span class="doctag">@param</span> context the application context</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called once the application context has been loaded but before it has been</div><div class="line">	 * refreshed.</div><div class="line">	 * <span class="doctag">@param</span> context the application context</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called immediately before the run method finishes.</div><div class="line">	 * <span class="doctag">@param</span> context the application context or null if a failure occurred before the</div><div class="line">	 * context was created</div><div class="line">	 * <span class="doctag">@param</span> exception any run exception or null if run completed successfully.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看类注释我们可以知道，需要实现此接口内所定义的这几个方法，ok，来看个实现类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@link</span> SpringApplicationRunListener&#125; to publish &#123;<span class="doctag">@link</span> SpringApplicationEvent&#125;s.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * Uses an internal &#123;<span class="doctag">@link</span> ApplicationEventMulticaster&#125; for the events that are fired</div><div class="line"> * before the context is actually refreshed.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Phillip Webb</div><div class="line"> * <span class="doctag">@author</span> Stephane Nicoll</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventPublishingRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span>, <span class="title">Ordered</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> SpringApplication application;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String[] args;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ApplicationEventMulticaster initialMulticaster;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EventPublishingRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.application = application;</div><div class="line">		<span class="keyword">this</span>.args = args;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</div><div class="line">		<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : application.getListeners()) &#123;</div><div class="line">			<span class="keyword">this</span>.initialMulticaster.addApplicationListener(listener);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster</div><div class="line">				.multicastEvent(<span class="keyword">new</span> ApplicationStartedEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster.multicastEvent(<span class="keyword">new</span> ApplicationEnvironmentPreparedEvent(</div><div class="line">				<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, environment));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : <span class="keyword">this</span>.application.getListeners()) &#123;</div><div class="line">			<span class="keyword">if</span> (listener <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</div><div class="line">				((ApplicationContextAware) listener).setApplicationContext(context);</div><div class="line">			&#125;</div><div class="line">			context.addApplicationListener(listener);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster.multicastEvent(</div><div class="line">				<span class="keyword">new</span> ApplicationPreparedEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, context));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finished</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</div><div class="line">		<span class="comment">// Listeners have been registered to the application context so we should</span></div><div class="line">		<span class="comment">// use it at this point</span></div><div class="line">		context.publishEvent(getFinishedEvent(context, exception));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> SpringApplicationEvent <span class="title">getFinishedEvent</span><span class="params">(</span></span></div><div class="line">			ConfigurableApplicationContext context, Throwable exception) &#123;</div><div class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ApplicationFailedEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, context,</div><div class="line">					exception);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApplicationReadyEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args, context);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上可以看出，<code>EventPublishingRunListener</code>里对接口功能的实现，主要是通过<code>SpringApplication</code> <code>ApplicationEventMulticaster</code> 来实现的，自己不干活，挂个虚名，从上帝模式的角度来看，这不就是应用了装饰模式来实现的么。</p>
<p>更多源码解析请关注后续的本人对Spring框架全面的重点部分解析系列博文</p>
<h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p><strong>单例</strong>，我们最常用的设计模式。正如我们在很多Spring Framework中关于单例和原型bean的文章(网上太多了)中已经看到过的，单例是几个bean作用域中的中的一个。此作用域在每个应用程序上下文中仅创建一个给定bean的实例。与signleton设计模式有所区别的是，Spring将实例的数量限制的作用域在整个应用程序的上下文。而Singleton设计模式在Java应用程序中是将这些实例的数量限制在给定类加载器管理的整个空间中。这意味着我们可以为两个Spring的上下文(同一份配置文件起两个容器，也就是不同端口的容器实例)使用相同的类加载器，并检索两个单例作用域的bean。</p>
<p>在看Spring单例应用之前，让我们来看一个Java的单例例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    President president1 = (President) SingletonsHolder.PRESIDENT.getHoldedObject();</div><div class="line">    President president2 = (President) SingletonsHolder.PRESIDENT.getHoldedObject();</div><div class="line">    assertTrue(<span class="string">"Both references of President should point to the same object"</span>, president1 == president2);</div><div class="line">    System.out.println(<span class="string">"president1 = "</span>+president1+<span class="string">" and president2 = "</span>+president2);</div><div class="line">    <span class="comment">// sample output</span></div><div class="line">    <span class="comment">// president1 = com.waitingforcode.test.President@17414c8 and president2 = com.waitingforcode.test.President@17414c8</span></div><div class="line"> </div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">enum</span> SingletonsHolder &#123;</div><div class="line">   </div><div class="line">  PRESIDENT(<span class="keyword">new</span> President());</div><div class="line">   </div><div class="line">  <span class="keyword">private</span> Object holdedObject;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">SingletonsHolder</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">          <span class="keyword">this</span>.holdedObject = o;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getHoldedObject</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.holdedObject;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">President</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试例子证明，只有一个由SingletonsHolder所持有的President实例。在Spring中，我们可以在bean工厂中找到单例应用的影子（例如在<strong>org.springframework.beans.factory.config.AbstractFactoryBean中</strong>）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Expose the singleton instance or create a new prototype instance.</div><div class="line"> * <span class="doctag">@see</span> #createInstance()</div><div class="line"> * <span class="doctag">@see</span> #getEarlySingletonInterfaces()</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isSingleton()) &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.initialized ? <span class="keyword">this</span>.singletonInstance : getEarlySingletonInstance());</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> createInstance();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看到，当需求对象被视为单例时，它只被初始化一次，并且在每次使用同一个bean类的实例后返回。我们可以在给定的例子中看到，类似于我们以前看到的President情况。将测试bean定义为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.waitingforcode.data.ShoppingCart"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>测试用例如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonSpringTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// retreive two different contexts</span></div><div class="line">    ApplicationContext firstContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"applicationContext-test.xml"</span>);</div><div class="line">    ApplicationContext secondContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"applicationContext-test.xml"</span>);</div><div class="line">     </div><div class="line">    <span class="comment">// prove that both contexts are loaded by the same class loader</span></div><div class="line">    assertTrue(<span class="string">"Class loaders for both contexts should be the same"</span>, </div><div class="line">      firstContext.getClassLoader() == secondContext.getClassLoader());</div><div class="line">    <span class="comment">// compare the objects from different contexts</span></div><div class="line">    ShoppingCart firstShoppingCart = (ShoppingCart) firstContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    ShoppingCart secondShoppingCart = (ShoppingCart) secondContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertFalse(<span class="string">"ShoppingCart instances got from different application context shouldn't be the same"</span>, </div><div class="line">      firstShoppingCart == secondShoppingCart);</div><div class="line">     </div><div class="line">    <span class="comment">// compare the objects from the same context</span></div><div class="line">    ShoppingCart firstShoppingCartBis = (ShoppingCart) firstContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertTrue(<span class="string">"ShoppingCart instances got from the same application context should be the same"</span>, </div><div class="line">      firstShoppingCart == firstShoppingCartBis);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试案例显示了Spring单例模式与纯粹的单例设计模式的主要区别。尽管使用相同的类加载器来加载两个应用程序上下文，但是ShoppingCart的实例是不一样的。但是，当我们比较两次创建并属于相同上下文的实例时，我们认为它们是相等的。</p>
<p>也正因为有了单例，Spring可以控制在每个应用程序上下文中只有一个这样指定的bean的实例可用。因为适配器，Spring可以决定使用由谁来处理<code>JBoss servlet</code>容器中的加载时编织,也可以实现<code>ConfigurableListableBeanFactory</code>的相应实例。第三种设计模式，装饰器，用于向Cache对象添加同步功能，还有Springboot的容器初始化。</p>
<p>其实对于适配器和装饰者确实有太多的相似的地方，一个是运行时选择，一个是加料组合产生新的化学效应，还有从看待事物的角度不同得到不同的行为，适配适配，更注重面向接口的实现，而内部又根据不同情况调用面向一套接口的多套实现的实例的相应方法来实现所要实现的具体功能，装饰者更注重添油加醋，通过组合一些其他对象实例来让自己的功能实现的更加华丽一些(达到1+1&gt;2的这种效果)。一家之言，有更好的理解可以联系我。</p>
<p>有更多疑问请加qq群523409180 讨论的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring框架中的设计模式-四&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-四&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式 (四)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式 (四)&lt;/h1&gt;&lt;p&gt;本文是Spring框架中使用的设计模式第四篇。本文将在此呈现出新的3种模式。&lt;/p&gt;
&lt;p&gt;一开始，我们会讨论2种结构模式：适配器和装饰器。在第三部分和最后一部分，我们将讨论单例模式。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(三)</title>
    <link href="https://muyinchen.github.io/2017/07/28/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%89)/"/>
    <id>https://muyinchen.github.io/2017/07/28/Spring框架中的设计模式(三)/</id>
    <published>2017-07-27T17:48:40.528Z</published>
    <updated>2017-07-27T17:48:07.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的设计模式-三"><a href="#Spring框架中的设计模式-三" class="headerlink" title="Spring框架中的设计模式(三)"></a>Spring框架中的设计模式(三)</h1><blockquote>
<p>在之前的两篇文章中，我们看到了一些在Spring框架中实现的设计模式。这一次我们会发现这个流行框架使用的3种新模式。<br><a id="more"></a><br>本文将从描述两个创意设计模式开始：原型和对象池。最后我们将重点关注行为模式—&gt;观察者。</p>
</blockquote>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>这篇文章的第一个设计模式是<strong>原型</strong>。可以通过官方文档查找有关Spring作用域中的bean作用域的文章中介绍了类似的概念(<strong>prototype</strong>)。原型设计模式与有用相同名称的(<strong>prototype</strong>)作用域有点相似。此设计模式允许通过复制已存在的对象来创建一个对象的实例。副本应该是<strong>真正的副本</strong>。这意味着新对象的所有属性应与复制对象的属性相同。如果不清楚，比一个简单的<code>JUnit</code>案例更好的说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Robot firstRobot = <span class="keyword">new</span> Robot(<span class="string">"Droid#1"</span>);</div><div class="line">    Robot secondRobot = (Robot) firstRobot.clone();</div><div class="line">    assertTrue(<span class="string">"Cloned robot's instance can't be the same as the"</span></div><div class="line">      +<span class="string">" source robot instance"</span>, </div><div class="line">      firstRobot != secondRobot);</div><div class="line">    assertTrue(<span class="string">"Cloned robot's name should be '"</span>+firstRobot.getName()+<span class="string">"'"</span></div><div class="line">      +<span class="string">" but was '"</span>+secondRobot.getName()+<span class="string">"'"</span>, </div><div class="line">      secondRobot.getName().equals(firstRobot.getName()));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Robot</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.clone();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>Spring</code>中，在<strong>org.springframework.beans.factory.support.AbstractBeanFactory</strong>中使用一种特定的原型设计模式，它将初始化<code>bean原型作用域</code>。新对象基于配置文件中的bean定义。我们可以看到，在给定的例子中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.waitingforcode.data.ShoppingCart"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"applicationContext-test.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringPrototypeTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> BeanFactory beanFactory;</div><div class="line">   </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    ShoppingCart cart1 = (ShoppingCart) beanFactory.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertTrue(<span class="string">"Id of cart1 should be 9 but was "</span>+cart1.getId(), </div><div class="line">      cart1.getId() == <span class="number">9</span>);</div><div class="line">    cart1.setId(<span class="number">100</span>);</div><div class="line">    ShoppingCart cart2 = (ShoppingCart) beanFactory.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertTrue(<span class="string">"Id of cart2 should be 9 but was "</span>+cart2.getId(), </div><div class="line">      cart2.getId() == <span class="number">9</span>);</div><div class="line">    assertTrue(<span class="string">"Id of second cart ("</span>+cart2.getId()+<span class="string">") shouldn't be the same as the first one: "</span>+cart1.getId(), </div><div class="line">      cart1.getId() != cart2.getId());</div><div class="line">    cart2.setId(cart1.getId());</div><div class="line">    assertTrue(<span class="string">"Now (after cart2.setId(cart1.getId())), the id of second cart ("</span>+cart2.getId()+<span class="string">") should be the same as the first one: "</span></div><div class="line">      +cart1.getId(), cart1.getId() == cart2.getId());</div><div class="line">    assertTrue(<span class="string">"Both instance shouldn't be the same"</span>, cart1 != cart2);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从前面的例子可以看出，<code>ShoppingCart</code>实例是直接从bean定义创建的。最初，<code>cart1</code>和<code>cart2</code>对象的<code>id</code>值为<code>9</code>.它在测试结束时被修改，以证明两个引用都属于两个不同的对象。</p>
<h2 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h2><p><code>Spring</code>中使用的另一个模型是<strong>对象池设计模式</strong>。其主要目的在于在一个池中保存特定数量的对象，并根据需要重新使用。通过它，我们可以改善我们想要使用<code>巨型对象</code>的响应时间。<code>巨型</code>意味着这些对象的构造需要很多时间（例如：持有数据库连接的对象），最好重用已经存在的和未获取的对象，而不是创建新对象。</p>
<p>Spring还使用线程池来管理其调度部分。一些示例位于<strong>org.springframework.scheduling.concurrent中</strong>。我们检索数据库（<code>Spring JDBC</code>）项目中的对象池的想法。数据库连接池不是由<code>Spring</code>直接实现的，而是适用于<code>Spring</code>工作方式的项目，如<code>C3P0</code>或<code>Jakarta Commons DBCP</code>连接池。</p>
<h2 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h2><p>这里呈现的最后一个设计模式是<strong>观察者</strong>。当一个或几个课程正在等待具体事件时可以使用它。观察者模式由一个科目和观察员名单组成。一个很好的例子就是<code>GUI界面</code>，其中点击按钮（按钮是主题）会引起听众（观察者）启动的一些操作(再说的直白点就是电影院一场电影这个<code>subject</code>,需要<code>观众</code>(也就是观察者咯),电影产生的一些画面产生的事件，比如恐怖 电影给男人女人带来的不同的感官的感受，传播到观察者也就是观众的眼里所带来的不一样的反应，这个中间一般会添加一个<code>事件传播者</code>，在后面解释<code>Spring</code>的例子的时候会说到)，例如：打开一个新页面这个动作。可以参考下面的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Observer pageOpener = <span class="keyword">new</span> PageOpener();</div><div class="line">    Observer register = <span class="keyword">new</span> Register();</div><div class="line">    Button btn = <span class="keyword">new</span> Button();</div><div class="line">    btn.addListener(pageOpener);</div><div class="line">    btn.addListener(register);</div><div class="line">    btn.clickOn();</div><div class="line">    assertTrue(<span class="string">"Button should be clicked but it wasn't"</span>, </div><div class="line">      btn.wasClicked());</div><div class="line">    assertTrue(<span class="string">"Page opener should be informed about click but it wasn't"</span>, </div><div class="line">      pageOpener.wasInformed());</div><div class="line">    assertTrue(<span class="string">"Register should be informed about click but it wasn't"</span>, </div><div class="line">      register.wasInformed());</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> clicked;</div><div class="line">  <span class="keyword">private</span> List&lt;observer&gt; listeners;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;observer&gt; <span class="title">getListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.listeners == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.listeners = <span class="keyword">new</span> ArrayList&lt;observer&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listeners;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">    getListeners().add(observer);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wasClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.clicked;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clickOn</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.clicked = <span class="keyword">true</span>;</div><div class="line">    informAll();</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">informAll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Observer observer : getListeners()) &#123;</div><div class="line">      observer.informAboutEvent();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> informed;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">informAboutEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.informed = <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wasInformed</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.informed;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageOpener</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">informAboutEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Preparing download of new page"</span>);</div><div class="line">    <span class="keyword">super</span>.informAboutEvent();</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">informAboutEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Adding the action to register"</span>);</div><div class="line">    <span class="keyword">super</span>.informAboutEvent();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，关于我们的<code>Button</code>实例点击的事件被发送到所有的观察者对象。从这些对象开始下载页面内容，第二个将在事件的信息保存在注册表中。在<code>Spring</code>中，观察者设计模式用于将与应用程序上下文相关的事件传输到<strong>org.springframework.context.ApplicationListener的实现</strong>。要了解它们的实现方法，我们来看一下<code>AbstractApplicationContext</code>类(老版本的代码，新版本的请自行对照)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></div><div class="line">  <span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span>, <span class="title">DisposableBean</span> &#123;</div><div class="line">  <span class="comment">/** Statically specified listeners */</span></div><div class="line">  <span class="keyword">private</span> Set&lt;applicationlistener&lt;?&gt;&gt; applicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;applicationlistener&lt;?&gt;&gt;();</div><div class="line">   </div><div class="line">  <span class="comment">// some other fields and methods</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; listener)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.applicationEventMulticaster != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.applicationEventMulticaster.addApplicationListener(listener);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;<span class="comment">//新版本这里直接咔嚓掉，上面的applicationEventMulticaster一旦为空，就会报错的</span></div><div class="line">      <span class="keyword">this</span>.applicationListeners.add(listener);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Return the list of statically specified ApplicationListeners.</div><div class="line">    */</div><div class="line">  <span class="keyword">public</span> Collection&lt;applicationlistener&lt;?&gt;&gt; getApplicationListeners() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.applicationListeners;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add beans that implement ApplicationListener as listeners.</div><div class="line">    * Doesn't affect other listeners, which can be added without being beans.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Register statically specified listeners first.</span></div><div class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</div><div class="line">      getApplicationEventMulticaster().addApplicationListener(listener);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></div><div class="line">    <span class="comment">// uninitialized to let post-processors apply to them!</span></div><div class="line">    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">for</span> (String lisName : listenerBeanNames) &#123;</div><div class="line">      getApplicationEventMulticaster().addApplicationListenerBean(lisName);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在提供的代码中，监听器在内部添加到应用程序上下文类中，并且在<code>registerListeners()</code>方法之后，它们被注册到由接口<strong>org.springframework.context.event.ApplicationEventMulticaster</strong>表示的适当的事件多路广播器(因为有很多listeners)。<code>EventMulticaster</code>负责管理不同的<code>listener</code>和向他们发布事件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleApplicationEventMulticaster</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationEventMulticaster</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Executor taskExecutor;</div><div class="line">    <span class="keyword">private</span> ErrorHandler errorHandler;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleApplicationEventMulticaster</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleApplicationEventMulticaster</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setBeanFactory(beanFactory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskExecutor</span><span class="params">(Executor taskExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskExecutor = taskExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Executor <span class="title">getTaskExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.taskExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorHandler</span><span class="params">(ErrorHandler errorHandler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.errorHandler = errorHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> ErrorHandler <span class="title">getErrorHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.errorHandler;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.multicastEvent(event, <span class="keyword">this</span>.resolveDefaultEventType(event));</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//发布事件:通过池执行任务的方式来做并发处理，这样就把之前的对象池模式给利用上了</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, ResolvableType eventType)</span> </span>&#123;</div><div class="line">        ResolvableType type = eventType != <span class="keyword">null</span>?eventType:<span class="keyword">this</span>.resolveDefaultEventType(event);</div><div class="line">        Iterator var4 = <span class="keyword">this</span>.getApplicationListeners(event, type).iterator();</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</div><div class="line">            <span class="keyword">final</span> ApplicationListener&lt;?&gt; listener = (ApplicationListener)var4.next();</div><div class="line">            Executor executor = <span class="keyword">this</span>.getTaskExecutor();</div><div class="line">            <span class="keyword">if</span>(executor != <span class="keyword">null</span>) &#123;</div><div class="line">                executor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        SimpleApplicationEventMulticaster.<span class="keyword">this</span>.invokeListener(listener, event);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.invokeListener(listener, event);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这次我们讲3种设计模式:用于在同一个调用作用域内创建<code>bean的原型</code>，避免重新创建巨型对象的对象池，以及将应用程序的上下文事件分派给适当的监听器的观察者。</p>
<p>有更多疑问请加qq群523409180 讨论的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring框架中的设计模式-三&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-三&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式(三)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式(三)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在之前的两篇文章中，我们看到了一些在Spring框架中实现的设计模式。这一次我们会发现这个流行框架使用的3种新模式。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(二)</title>
    <link href="https://muyinchen.github.io/2017/07/21/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BA%8C)/"/>
    <id>https://muyinchen.github.io/2017/07/21/Spring框架中的设计模式(二)/</id>
    <published>2017-07-21T09:12:33.397Z</published>
    <updated>2017-07-27T09:23:43.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的设计模式-二"><a href="#Spring框架中的设计模式-二" class="headerlink" title="Spring框架中的设计模式(二)"></a>Spring框架中的设计模式(二)</h1><p>在上一篇中我们在Spring中所谈到的设计模式涉及到了创建模式三剑客和1个行为模式(解释器模式)。这次我们会将眼光更多地关注在具有结构性和行为性的设计模式上。</p>
<p>在这篇文章中，我们将看到每个类型的两种模式。首先将关注类型是的结构设计模式。它将包含代理和复合。下一个将介绍行为模式：策略和模板方法。<br> <a id="more"></a></p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>面向对象编程（OOP）可能是编程中最流行的概念。然而，Spring引入了另一种编码规范，<strong>面向切面编程</strong>（AOP）。为了简化定义，AOP是面向系统特定点的一种编程，如：异常抛出，特定类别方法的执行等.AOP允许在执行这些特定点之前或之后执行补充动作。如何实现这种操作？它可以通过监听器(listeners)进行。但在这种情况下，我们应该在只要可能存在调用的地方都需要定义监听器来进行监听（比如在一个方法的开始的地方）。这就是为什么Spring不采用这个idea。相反，Spring实现了一种能够通过额外的方法调用完成任务的设计模式 - <strong>代理设计模式</strong>。</p>
<p>代理就像对象的镜像一样。也正因为如此，代理对象不仅可以覆盖真实对象，还可以扩展其功能。因此，对于只能在屏幕上打印一些文本的对象，我们可以添加另一个对象来过滤显示单词。可以通过代理来定义第二个对象的调用。代理是封装真实对象的对象。例如，如果您尝试调用Waiter bean，那么您将调用该Bean的代理，其行为方式完全相同。</p>
<p>代理设计模式的一个很好的例子是<strong>org.springframework.aop.framework.ProxyFactoryBean</strong>。该工厂根据Spring bean构建AOP代理。该类实现了定义<strong>getObject()</strong>方法的<code>FactoryBean</code>接口。此方法用于将需求<code>Bean</code>的实例返回给<code>bean factory</code>。在这种情况下，它不是返回的实例，而是<code>AOP代理</code>。在执行代理对象的方法之前，可以通过调用补充方法来进一步“修饰”代理对象(其实所谓的静态代理不过是在装饰模式上加了个要不要你来干动作行为而已，而不是装饰模式什么也不做就加了件衣服，其他还得由你来全权完成)。</p>
<p><code>ProxyFactory</code>的一个例子是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxyAop</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    ProxyFactory factory = <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> House());</div><div class="line">    factory.addInterface(Construction.class);</div><div class="line">    factory.addAdvice(<span class="keyword">new</span> BeforeConstructAdvice());</div><div class="line">    factory.setExposeProxy(<span class="keyword">true</span>);</div><div class="line"> </div><div class="line">    Construction construction = (Construction) factory.getProxy();</div><div class="line">    construction.construct();</div><div class="line">    assertTrue(<span class="string">"Construction is illegal. "</span></div><div class="line">      + <span class="string">"Supervisor didn't give a permission to build "</span></div><div class="line">      + <span class="string">"the house"</span>, construction.isPermitted());</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Construction</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givePermission</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPermitted</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> <span class="keyword">implements</span> <span class="title">Construction</span></span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> permitted = <span class="keyword">false</span>;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPermitted</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.permitted;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"I'm constructing a house"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givePermission</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Permission is given to construct a simple house"</span>);</div><div class="line">    <span class="keyword">this</span>.permitted = <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeforeConstructAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] arguments, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">    <span class="keyword">if</span> (method.getName().equals(<span class="string">"construct"</span>)) &#123;</div><div class="line">      ((Construction) target).givePermission();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试应该通过，因为我们不直接在House实例上操作，而是代理它。代理调用第一个<code>BeforeConstructAdvice</code>的<code>before</code>方法（指向在执行目标方法之前执行，在我们的例子中为<code>construct()</code>）通过它，给出了一个“权限”来构造对象的字段（house）。代理层提供了一个额外新功能，因为它可以简单地分配给另一个对象。要做到这一点，我们只能在before方法之前修改过滤器。</p>
<h2 id="复合模式"><a href="#复合模式" class="headerlink" title="复合模式"></a>复合模式</h2><p>另一种结构模式是<strong>复合模式</strong>。在关于<a href="https://muyinchen.github.io/2017/07/20/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80">Spring中设计模式</a>)的第一篇文章中，我们使用构建器来构造复杂对象。另一种实现方法是使用复合模式。这种模式是基于具有共同行为的多个对象的存在，用于构建更大的对象。较大的对象仍然具有与最小对象相同的特征。那么用它来定义相同的行为。</p>
<p>复合对象的非Spring示例可以是一个写入HTML的文本对象，由包含span或em标签的段落组成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    TextTagComposite composite = <span class="keyword">new</span> PTag();</div><div class="line">    composite.addTag(<span class="keyword">new</span> SpanTag());</div><div class="line">    composite.addTag(<span class="keyword">new</span> EmTag());</div><div class="line">     </div><div class="line">    <span class="comment">// sample client code</span></div><div class="line">    composite.startWrite();</div><div class="line">    <span class="keyword">for</span> (TextTag leaf : composite.getTags()) &#123;</div><div class="line">      leaf.startWrite();</div><div class="line">      leaf.endWrite();</div><div class="line">    &#125;</div><div class="line">    composite.endWrite();</div><div class="line">    assertTrue(<span class="string">"Composite should contain 2 tags but it contains "</span>+composite.getTags().size(), composite.getTags().size() == <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TextTag</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWrite</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endWrite</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TextTagComposite</span> <span class="keyword">extends</span> <span class="title">TextTag</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;TextTag&gt; <span class="title">getTags</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTag</span><span class="params">(TextTag tag)</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PTag</span> <span class="keyword">implements</span> <span class="title">TextTagComposite</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> List&lt;TextTag&gt; tags = <span class="keyword">new</span> ArrayList&lt;TextTag&gt;();</div><div class="line">         </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;p&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;/p&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;TextTag&gt; <span class="title">getTags</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> tags;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTag</span><span class="params">(TextTag tag)</span> </span>&#123;</div><div class="line">    tags.add(tag);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpanTag</span> <span class="keyword">implements</span> <span class="title">TextTag</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;span&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;/span&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmTag</span> <span class="keyword">implements</span> <span class="title">TextTag</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;em&gt;"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endWrite</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;/em&gt;"</span>);</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，可以看到一个复合对象。我们可以区分复合与非复合对象，因为第一个可以容纳一个或多个非复合对象（<code>PTag</code>类中的<code>private List tags</code>字段）。非复合对象称为叶子。<code>TextTag</code>接口被称为组件，因为它为两个对象类型提供了共同的行为规范(有点像<code>Linux</code>文件管理系统的有共同点的文件放在一个文件夹下进行管理，其实就是节点管理)。</p>
<p>在<code>Spring</code>世界中，我们检索复合对象的概念是<strong>org.springframework.beans.BeanMetadataElement</strong>接口，用于配置<code>bean</code>对象。它是所有继承对象的基本界面。现在，在一方面，我们有一个叶子，由<strong>org.springframework.beans.factory.parsing.BeanComponentDefinition</strong>表示，另一边是复合<strong>org.springframework.beans.factory.parsing.CompositeComponentDefinition</strong>。<code>CompositeComponentDefinition</code>类似于组件，因为它包含<strong>addNestedComponent（ComponentDefinition component）</strong>方法，它允许将叶添加到私有final列表中<code>nestedComponents</code>。您可以看到，由于此列表，<code>BeanComponentDefinition</code>和<code>CompositeComponentDefinition</code>的组件是<strong>org.springframework.beans.factory.parsing.ComponentDefinition</strong>。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170721_175052.png" alt=""></p>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>本文描述的第三个概念是<strong>策略设计模式</strong>。策略定义了通过不同方式完成相同事情的几个对象。完成任务的方式取决于采用的策略。举个例子说明，我们可以去一个国家。我们可以乘公共汽车，飞机，船甚至汽车去那里。所有这些方法将把我们运送到目的地国家。但是，我们将通过检查我们的银行帐户来选择最适应的方式。如果我们有很多钱，我们将采取最快的方式（可能是私人飞行）。如果我们没有足够的话，我们会采取最慢的（公车，汽车）。该银行账户作为确定适应策略的因素。</p>
<p>Spring在<strong>org.springframework.web.servlet.mvc.multiaction.MethodNameResolver</strong>类(过时，但不影响拿来研究)中使用策略设计模式。它是<code>MultiActionController</code>(同样过时)的参数化实现。在开始解释策略之前，我们需要了解MultiActionController的实用性。这个类允许同一个类处理几种类型的请求。作为Spring中的每个控制器，MultiActionController执行方法来响应提供的请求。策略用于检测应使用哪种方法。解析过程在MethodNameResolver实现中实现，例如在同一个包中的<strong>ParameterMethodNameResolver中</strong>。方法可以通过多个条件解决：属性映射，HTTP请求参数或URL路径。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHandlerMethodName</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> NoSuchRequestHandlingMethodException </span>&#123;</div><div class="line">  String methodName = <span class="keyword">null</span>;</div><div class="line"> </div><div class="line">  <span class="comment">// Check parameter names where the very existence of each parameter</span></div><div class="line">  <span class="comment">// means that a method of the same name should be invoked, if any.</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.methodParamNames != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (String candidate : <span class="keyword">this</span>.methodParamNames) &#123;</div><div class="line">      <span class="keyword">if</span> (WebUtils.hasSubmitParameter(request, candidate)) &#123;</div><div class="line">        methodName = candidate;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">          logger.debug(<span class="string">"Determined handler method '"</span> + methodName +</div><div class="line">            <span class="string">"' based on existence of explicit request parameter of same name"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// Check parameter whose value identifies the method to invoke, if any.</span></div><div class="line">  <span class="keyword">if</span> (methodName == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.paramName != <span class="keyword">null</span>) &#123;</div><div class="line">    methodName = request.getParameter(<span class="keyword">this</span>.paramName);</div><div class="line">    <span class="keyword">if</span> (methodName != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">        logger.debug(<span class="string">"Determined handler method '"</span> + methodName +</div><div class="line">          <span class="string">"' based on value of request parameter '"</span> + <span class="keyword">this</span>.paramName + <span class="string">"'"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (methodName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.logicalMappings != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// Resolve logical name into real method name, if appropriate.</span></div><div class="line">    String originalName = methodName;</div><div class="line">    methodName = <span class="keyword">this</span>.logicalMappings.getProperty(methodName, methodName);</div><div class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">      logger.debug(<span class="string">"Resolved method name '"</span> + originalName + <span class="string">"' to handler method '"</span> + methodName + <span class="string">"'"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (methodName != <span class="keyword">null</span> &amp;&amp; !StringUtils.hasText(methodName)) &#123;</div><div class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">      logger.debug(<span class="string">"Method name '"</span> + methodName + <span class="string">"' is empty: treating it as no method name found"</span>);</div><div class="line">    &#125;</div><div class="line">    methodName = <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (methodName == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.defaultMethodName != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// No specific method resolved: use default method.</span></div><div class="line">      methodName = <span class="keyword">this</span>.defaultMethodName;</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">        logger.debug(<span class="string">"Falling back to default handler method '"</span> + <span class="keyword">this</span>.defaultMethodName + <span class="string">"'"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// If resolution failed completely, throw an exception.</span></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchRequestHandlingMethodException(request);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> methodName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如我们在前面的代码中可以看到的，方法的名称通过提供的参数映射，URL中的预定义属性或参数存在来解决（默认情况下，该参数的名称是action）。</p>
<h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>本文提出的最后一个设计模式是<strong>模板方法</strong>。此模式定义了类行为的骨架，并将子步骤的某些步骤的延迟执行(具体就是下面例子中一个方法放在另一个方法中，只有调用另一方方法的时候这个方法才会执行,而且还可能会在其他行为方法之后按顺序执行)。其中写了一种方法(下面例子中的construct())，注意定义为final，起着同步器的角色。它以给定的顺序执行由子类定义的方法。在现实世界中，我们可以将模板方法与房屋建设进行比较。独立于建造房屋的公司，我们需要从建立基础开始，只有在我们完成之后才能做其他的工作。这个执行逻辑将被保存在一个我们不能改变的方法中。例如基础建设或刷墙会被作为一个模板方法中的方法，具体到建筑房屋的公司。我们可以在给定的例子中看到它：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethod</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    HouseAbstract house = <span class="keyword">new</span> SeaHouse();</div><div class="line">    house.construct();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseAbstract</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">constructFoundations</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">constructWall</span><span class="params">()</span></span>;</div><div class="line">   </div><div class="line">  <span class="comment">// template method</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</div><div class="line">    constructFoundations();</div><div class="line">    constructWall();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EcologicalHouse</span> <span class="keyword">extends</span> <span class="title">HouseAbstract</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">constructFoundations</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Making foundations with wood"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">constructWall</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Making wall with wood"</span>);</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeaHouse</span> <span class="keyword">extends</span> <span class="title">HouseAbstract</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">constructFoundations</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Constructing very strong foundations"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">constructWall</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Constructing very strong wall"</span>);</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该代码应该输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Constructing very strong foundations</div><div class="line">Constructing very strong wall</div></pre></td></tr></table></figure>
<p>Spring在<strong>org.springframework.context.support.AbstractApplicationContext</strong>类中使用模板方法。他们不是一个模板方法（在我们的例子中是construct ），而是多个。例如，<strong>getsFreshBeanFactory</strong>返回内部<code>bean工厂</code>的新版本，调用两个抽象方法：<code>refreshBeanFactory</code>（刷新工厂bean）和<code>getBeanFactory</code>（以获取更新的工厂bean）。这个方法和其他一些方法一样，用在<strong>public void refresh()</strong>中，抛出<strong>构造应用程序上下文的BeansException，IllegalStateException</strong>方法(这里会在后面Spring中与应用程序上下文分析中再次提到)。</p>
<p>我们可以从同一个包中的GenericApplicationContext找到一些通过模板方法所实现的抽象方法的实现的例子(说的有点拗口，多读几遍就好):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Do nothing: We hold a single internal BeanFactory and rely on callers</div><div class="line">  * to register beans through our public methods (or the BeanFactory's).</div><div class="line">  * <span class="doctag">@see</span> #registerBeanDefinition</div><div class="line">  */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.refreshed) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">      <span class="string">"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.beanFactory.setSerializationId(getId());</div><div class="line">  <span class="keyword">this</span>.refreshed = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cancelRefresh</span><span class="params">(BeansException ex)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.beanFactory.setSerializationId(<span class="keyword">null</span>);</div><div class="line">  <span class="keyword">super</span>.cancelRefresh(ex);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">  * Not much to do: We hold a single internal BeanFactory that will never</div><div class="line">  * get released.</div><div class="line">  */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">closeBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.beanFactory.setSerializationId(<span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return the single internal BeanFactory held by this context</div><div class="line">  * (as ConfigurableListableBeanFactory).</div><div class="line">  */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return the underlying bean factory of this context,</div><div class="line">  * available for registering bean definitions.</div><div class="line">  * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; You need to call &#123;<span class="doctag">@link</span> #refresh()&#125; to initialize the</div><div class="line">  * bean factory and its contained beans with application context semantics</div><div class="line">  * (autodetecting BeanFactoryPostProcessors, etc).</div><div class="line">  * <span class="doctag">@return</span> the internal bean factory (as DefaultListableBeanFactory)</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> DefaultListableBeanFactory <span class="title">getDefaultListableBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过上面这些可以让我们发现Spring如何通过使用行为和结构设计模式来更好地组织上下文（<strong>模板方法</strong>），并通过相应<strong>策略</strong>来解决执行方法。它使用两种结构设计模式，通过<strong>代理模式</strong>来简化AOP部分并通过<strong>复合模式</strong>来构造复杂对象。</p>
<p>有问题可以加qq群523409180 讨论的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring框架中的设计模式-二&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-二&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式(二)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式(二)&lt;/h1&gt;&lt;p&gt;在上一篇中我们在Spring中所谈到的设计模式涉及到了创建模式三剑客和1个行为模式(解释器模式)。这次我们会将眼光更多地关注在具有结构性和行为性的设计模式上。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将看到每个类型的两种模式。首先将关注类型是的结构设计模式。它将包含代理和复合。下一个将介绍行为模式：策略和模板方法。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架中的设计模式(一)</title>
    <link href="https://muyinchen.github.io/2017/07/20/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%B8%80)/"/>
    <id>https://muyinchen.github.io/2017/07/20/Spring框架中的设计模式(一)/</id>
    <published>2017-07-20T15:21:39.964Z</published>
    <updated>2017-07-20T15:49:04.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架中的设计模式-一"><a href="#Spring框架中的设计模式-一" class="headerlink" title="Spring框架中的设计模式(一)"></a>Spring框架中的设计模式(一)</h1><p>设计模式有助于遵循良好的编程实践。作为最流行的Web框架之一的Spring框架也使用其中的一些。</p>
<p>本文将介绍Spring Framework中使用的设计模式。这是5篇专题文章的第一部分。这次我们将发现Spring框架中使用的4种设计模式：解释器，构建器，工厂方法和抽象工厂。每部分将首先解释给定模式的原理。紧接着，将会使用Spring的一个例子来加深理解。<br> <a id="more"></a></p>
<h2 id="解释器设计模式"><a href="#解释器设计模式" class="headerlink" title="解释器设计模式"></a>解释器设计模式</h2><p>在现实世界中，我们人类需要解释手势。他们可以对文化有不同的含义。这是我们的解释，给他们一个意义。在编程中，我们还需要分析一件事情，并决定它是什么意思。我们可以用<strong>解释设计模式</strong>来做。</p>
<p>此模式基于表达式和评估器部分。第一个代表一个要分析的事情。这个分析是由评价者来做出的，它们知道构成表达的人物的意义。不必要的操作是在一个上下文中进行的。</p>
<p>Spring主要以<em>Spring Expression Language</em>（Spel）为例。这里快速提个醒，SpEL是一种由Spring的<strong>org.springframework.expression.ExpressionParser</strong>实现分析和执行的语言。这些实现使用作为字符串给出的Spel表达式，并将它们转换为<strong>org.springframework.expression.Expression的</strong>实例。上下文组件由<strong>org.springframework.expression.EvaluationContext</strong>实现表示，例如：StandardEvaluationContext。</p>
<p>举个Spel的一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Writer writer = <span class="keyword">new</span> Writer();</div><div class="line">writer.setName(<span class="string">"Writer's name"</span>);</div><div class="line">StandardEvaluationContext modifierContext = <span class="keyword">new</span> StandardEvaluationContext(subscriberContext);</div><div class="line">modifierContext.setVariable(<span class="string">"name"</span>, <span class="string">"Overriden writer's name"</span>);</div><div class="line">parser.parseExpression(<span class="string">"name = #name"</span>).getValue(modifierContext);</div><div class="line">System.out.println(<span class="string">"writer's name is : "</span> + writer.getName());</div></pre></td></tr></table></figure>
<p>输出应打印“Overriden writer’s name”。如你所见，一个对象的属性是通过一个表达式<code>name = #name</code>进行修改的，这个表达式只有在<code>ExpressionParser</code>才能理解，因为提供了<code>context</code>（前面的样例中的<code>modifierContext</code>实例）。</p>
<h2 id="建设者模式"><a href="#建设者模式" class="headerlink" title="建设者模式"></a>建设者模式</h2><p><strong>建设者设计模式</strong>是属于创建对象模式三剑客的第一种模式。该模式用于简化复杂对象的构造。要理解这个概念，想象一个说明程序员简历的对象。在这个对象中，我们想存储个人信息（名字，地址等）以及技术信息（知识语言，已实现的项目等）。该对象的构造可能如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// with constructor</span></div><div class="line">Programmer programmer = <span class="keyword">new</span> Programmer(<span class="string">"first name"</span>, <span class="string">"last name"</span>, <span class="string">"address Street 39"</span>, <span class="string">"ZIP code"</span>, <span class="string">"City"</span>, <span class="string">"Country"</span>, birthDateObject, <span class="keyword">new</span> String[] &#123;<span class="string">"Java"</span>, <span class="string">"PHP"</span>, <span class="string">"Perl"</span>, <span class="string">"SQL"</span>&#125;, <span class="keyword">new</span> String[] &#123;<span class="string">"CRM system"</span>, <span class="string">"CMS system for government"</span>&#125;);</div><div class="line"><span class="comment">// or with setters</span></div><div class="line">Programmer programmer = <span class="keyword">new</span> Programmer();</div><div class="line">programmer.setName(<span class="string">"first name"</span>);</div><div class="line">programmer.setLastName(<span class="string">"last name"</span>);</div><div class="line"><span class="comment">// ... multiple lines after</span></div><div class="line">programmer.setProjects(<span class="keyword">new</span> String[] &#123;<span class="string">"CRM system"</span>, <span class="string">"CMS system for government"</span>&#125;);</div></pre></td></tr></table></figure>
<p>Builder允许我们通过使用将值传递给父类的内部构建器对象来清楚地分解对象构造。所以对于我们这个程序员简历的对象的创建，构建器可以看起来像：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Programmer programmer = <span class="keyword">new</span> Programmer.ProgrammerBuilder().setFirstName(<span class="string">"F"</span>).setLastName(<span class="string">"L"</span>)</div><div class="line">            .setCity(<span class="string">"City"</span>).setZipCode(<span class="string">"0000A"</span>).setAddress(<span class="string">"Street 39"</span>)</div><div class="line">            .setLanguages(<span class="keyword">new</span> String[] &#123;<span class="string">"bash"</span>, <span class="string">"Perl"</span>&#125;).setProjects(<span class="keyword">new</span> String[] &#123;<span class="string">"Linux kernel"</span>&#125;).build();</div><div class="line">    assertTrue(<span class="string">"Programmer should be 'F L' but was '"</span>+ programmer+<span class="string">"'"</span>, programmer.toString().equals(<span class="string">"F L"</span>));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String firstName;</div><div class="line">  <span class="keyword">private</span> String lastName;</div><div class="line">  <span class="keyword">private</span> String address;</div><div class="line">  <span class="keyword">private</span> String zipCode;</div><div class="line">  <span class="keyword">private</span> String city;</div><div class="line">  <span class="keyword">private</span> String[] languages;</div><div class="line">  <span class="keyword">private</span> String[] projects;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Programmer</span><span class="params">(String fName, String lName, String addr, String zip, String city, String[] langs, String[] projects)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.firstName = fName;</div><div class="line">    <span class="keyword">this</span>.lastName = lName;</div><div class="line">    <span class="keyword">this</span>.address = addr;</div><div class="line">    <span class="keyword">this</span>.zipCode = zip;</div><div class="line">    <span class="keyword">this</span>.city = city;</div><div class="line">    <span class="keyword">this</span>.languages = langs;</div><div class="line">    <span class="keyword">this</span>.projects = projects;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgrammerBuilder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">    <span class="keyword">private</span> String zipCode;</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line">    <span class="keyword">private</span> String[] languages;</div><div class="line">    <span class="keyword">private</span> String[] projects;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.firstName = firstName;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.lastName = lastName;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.address = address;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setZipCode</span><span class="params">(String zipCode)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.zipCode = zipCode;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.city = city;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setLanguages</span><span class="params">(String[] languages)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.languages = languages;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> ProgrammerBuilder <span class="title">setProjects</span><span class="params">(String[] projects)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.projects = projects;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> Programmer <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Programmer(firstName, lastName, address, zipCode, city, languages, projects);</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span>+<span class="keyword">this</span>.lastName;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，构建器后面隐藏了对象构造的复杂性，内部静态类接受链接方法的调用。在Spring中，我们可以在<strong>org.springframework.beans.factory.support.BeanDefinitionBuilder</strong>类中检索这个逻辑。这是一个允许我们以编程方式定义bean的类。我们可以在关于<a href="http://www.waitingforcode.com/spring-framework/bean-factory-post-processor-beans-in-spring/read" target="_blank" rel="external">bean工厂后处理器的</a>文章中看到它，<code>BeanDefinitionBuilder</code>包含几个方法，它们为<strong>AbstractBeanDefinition</strong>抽象类的相关实现设置值，比如作用域，工厂方法，属性等。想看看它是如何工作的，请查看以下这些方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanDefinitionBuilder</span> </span>&#123;</div><div class="line">       <span class="comment">/**</span></div><div class="line">    * The &#123;<span class="doctag">@code</span> BeanDefinition&#125; instance we are creating.</div><div class="line">    */</div><div class="line">  <span class="keyword">private</span> AbstractBeanDefinition beanDefinition;</div><div class="line"> </div><div class="line">  <span class="comment">// ... some not important methods for this article</span></div><div class="line"> </div><div class="line">  <span class="comment">// Some of building methods</span></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Set the name of the parent definition of this bean definition.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">setParentName</span><span class="params">(String parentName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.setParentName(parentName);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Set the name of the factory method to use for this definition.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">setFactoryMethod</span><span class="params">(String factoryMethod)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.setFactoryMethodName(factoryMethod);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add an indexed constructor arg value. The current index is tracked internally</div><div class="line">    * and all additions are at the present point.</div><div class="line">    * <span class="doctag">@deprecated</span> since Spring 2.5, in favor of &#123;<span class="doctag">@link</span> #addConstructorArgValue&#125;</div><div class="line">    */</div><div class="line">  <span class="meta">@Deprecated</span></div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addConstructorArg</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> addConstructorArgValue(value);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add an indexed constructor arg value. The current index is tracked internally</div><div class="line">    * and all additions are at the present point.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addConstructorArgValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(</div><div class="line">                    <span class="keyword">this</span>.constructorArgIndex++, value);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add a reference to a named bean as a constructor arg.</div><div class="line">    * <span class="doctag">@see</span> #addConstructorArgValue(Object)</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addConstructorArgReference</span><span class="params">(String beanName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(</div><div class="line">                    <span class="keyword">this</span>.constructorArgIndex++, <span class="keyword">new</span> RuntimeBeanReference(beanName));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add the supplied property value under the given name.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addPropertyValue</span><span class="params">(String name, Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.getPropertyValues().add(name, value);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Add a reference to the specified bean name under the property specified.</div><div class="line">    * <span class="doctag">@param</span> name the name of the property to add the reference to</div><div class="line">    * <span class="doctag">@param</span> beanName the name of the bean being referenced</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">addPropertyReference</span><span class="params">(String name, String beanName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.getPropertyValues().add(name, <span class="keyword">new</span> RuntimeBeanReference(beanName));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Set the init method for this definition.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> BeanDefinitionBuilder <span class="title">setInitMethodName</span><span class="params">(String methodName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.setInitMethodName(methodName);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// Methods that can be used to construct BeanDefinition</span></div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Return the current BeanDefinition object in its raw (unvalidated) form.</div><div class="line">    * <span class="doctag">@see</span> #getBeanDefinition()</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">getRawBeanDefinition</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.beanDefinition;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line">    * Validate and return the created BeanDefinition object.</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">getBeanDefinition</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.beanDefinition.validate();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.beanDefinition;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>创建对象模式三剑客的第二个成员是<strong>工厂方法设计模式</strong>。它完全适于使用动态环境作为Spring框架。实际上，这种模式允许通过公共静态方法对象进行初始化，称为工厂方法。在这个概念中，我们需要定义一个接口来创建对象。但是创建是由使用相关对象的类创建的。</p>
<p>但是在跳到Spring世界之前，让我们用Java代码做一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Meal fruit = Meal.valueOf(<span class="string">"banana"</span>);</div><div class="line">    Meal vegetable = Meal.valueOf(<span class="string">"carrot"</span>);</div><div class="line">    assertTrue(<span class="string">"Banana should be a fruit but is "</span>+fruit.getType(), fruit.getType().equals(<span class="string">"fruit"</span>));</div><div class="line">    assertTrue(<span class="string">"Carrot should be a vegetable but is "</span>+vegetable.getType(), vegetable.getType().equals(<span class="string">"vegetable"</span>));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> String type;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Meal</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.type = type;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.type;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// Example of factory method - different object is created depending on current context</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Meal <span class="title">valueOf</span><span class="params">(String ingredient)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ingredient.equals(<span class="string">"banana"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Meal(<span class="string">"fruit"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Meal(<span class="string">"vegetable"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Spring中，我们可以通过指定的工厂方法创建bean。该方法与以前代码示例中看到的valueOf方法完全相同。它是静态的，可以采取没有或多个参数。为了更好地了解案例，让我们来看一下实例。首先搞定下配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"welcomerBean"</span> <span class="attr">class</span>=<span class="string">"com.mysite.Welcomer"</span> <span class="attr">factory-method</span>=<span class="string">"createWelcomer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"messagesLocator"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messagesLocator"</span> <span class="attr">class</span>=<span class="string">"com.mysite.MessageLocator"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messages"</span> <span class="attr">value</span>=<span class="string">"messages_file.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在请关注这个bean的初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcomer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String message;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Welcomer</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Welcomer <span class="title">createWelcomer</span><span class="params">(MessageLocator messagesLocator)</span> </span>&#123;</div><div class="line">    Calendar cal = Calendar.getInstance();</div><div class="line">    String msgKey = <span class="string">"welcome.pm"</span>;</div><div class="line">    <span class="keyword">if</span> (cal.get(Calendar.AM_PM) == Calendar.AM) &#123;</div><div class="line">      msgKey = <span class="string">"welcome.am"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Welcomer(messagesLocator.getMessageByKey(msgKey));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当Spring将构造welcomerBean时，它不会通过传统的构造函数，而是通过定义的静态工厂方法createWelcomer来实现。还要注意，这个方法接受一些参数（MessageLocator bean的实例包含所有可用的消息） 标签，通常保留给传统的构造函数。</p>
<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>最后一个，<strong>抽象的工厂设计模式</strong>，看起来类似于工厂方法。不同之处在于，我们可以将抽象工厂视为这个词的工业意义上的工厂，即。作为提供所需对象的东西。工厂部件有：抽象工厂，抽象产品，产品和客户。更准确地说，抽象工厂定义了构建对象的方法。抽象产品是这种结构的结果。产品是具有同样结构的具体结果。客户是要求创造产品来抽象工厂的人。</p>
<p>同样的，在进入Spring的细节之前，我们将首先通过示例Java代码说明这个概念：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="comment">// Test method which is the client</span></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Kitchen factory = <span class="keyword">new</span> KitchenFactory();</div><div class="line">    KitchenMeal meal = factory.getMeal(<span class="string">"P.1"</span>);</div><div class="line">    KitchenMeal dessert = factory.getDessert(<span class="string">"I.1"</span>);</div><div class="line">    assertTrue(<span class="string">"Meal's name should be 'protein meal' and was '"</span>+meal.getName()+<span class="string">"'"</span>, meal.getName().equals(<span class="string">"protein meal"</span>));</div><div class="line">    assertTrue(<span class="string">"Dessert's name should be 'ice-cream' and was '"</span>+dessert.getName()+<span class="string">"'"</span>, dessert.getName().equals(<span class="string">"ice-cream"</span>));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// abstract factory</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Kitchen</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> KitchenMeal <span class="title">getMeal</span><span class="params">(String preferency)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> KitchenMeal <span class="title">getDessert</span><span class="params">(String preferency)</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// concrete factory</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">KitchenFactory</span> <span class="keyword">extends</span> <span class="title">Kitchen</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> KitchenMeal <span class="title">getMeal</span><span class="params">(String preferency)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (preferency.equals(<span class="string">"F.1"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> FastFoodMeal();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (preferency.equals(<span class="string">"P.1"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ProteinMeal();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VegetarianMeal();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> KitchenMeal <span class="title">getDessert</span><span class="params">(String preferency)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (preferency.equals(<span class="string">"I.1"</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IceCreamMeal();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// abstract product</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// concrete products</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProteinMeal</span> <span class="keyword">extends</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"protein meal"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">VegetarianMeal</span> <span class="keyword">extends</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"vegetarian meal"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FastFoodMeal</span> <span class="keyword">extends</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"fast-food meal"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IceCreamMeal</span> <span class="keyword">extends</span> <span class="title">KitchenMeal</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"ice-cream"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以在这个例子中看到，抽象工厂封装了对象的创建。对象创建可以使用与经典构造函数一样使用的工厂方法模式。在Spring中，工厂的例子是<strong>org.springframework.beans.factory.BeanFactory</strong>。通过它的实现，我们可以从Spring的容器访问bean。根据采用的策略，<strong>getBean</strong>方法可以返回已创建的对象（共享实例，单例作用域）或初始化新的对象（原型作用域）。在<code>BeanFactory</code>的实现中，我们可以区分：<code>ClassPathXmlApplicationContext</code>，<code>XmlWebApplicationContext</code>，<code>StaticWebApplicationContext</code>，<code>StaticPortletApplicationContext</code>，<code>GenericApplicationContext</code>，<code>StaticApplicationContext</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"file:test-context.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProduct</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> BeanFactory factory;</div><div class="line">   </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Concrete factory is: "</span>+factory.getClass());</div><div class="line">    assertTrue(<span class="string">"Factory can't be null"</span>, factory != <span class="keyword">null</span>);</div><div class="line">    ShoppingCart cart = (ShoppingCart) factory.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    assertTrue(<span class="string">"Shopping cart object can't be null"</span>, cart != <span class="keyword">null</span>);</div><div class="line">    System.out.println(<span class="string">"Found shopping cart bean:"</span>+cart.getClass());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，抽象工厂由BeanFactory接口表示。具体工厂是在第一个System.out中打印的，是<strong>org.springframework.beans.factory.support.DefaultListableBeanFactory</strong>的实例。它的抽象产物是一个对象。在我们的例子中，具体的产品就是被强转为ShoppingCart实例的抽象产品（Object）。</p>
<p>第一篇文章介绍了通过设计模式来正确组织的我们实现良好的编程风格。在这里，我们可以看到在Spring框架中使用解释器，构建器，工厂方法和工厂。第一个是帮助解释以SpEL表达的文本。三个最后的模式属于创建设计模式的三剑客，它们在Spring中的主要目的是简化对象的创建。他们通过分解复杂对象（构建器）的初始化或通过集中在公共点的初始化来做到对象的创建(要不然怎么叫工厂呢，必须有通用点的)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring框架中的设计模式-一&quot;&gt;&lt;a href=&quot;#Spring框架中的设计模式-一&quot; class=&quot;headerlink&quot; title=&quot;Spring框架中的设计模式(一)&quot;&gt;&lt;/a&gt;Spring框架中的设计模式(一)&lt;/h1&gt;&lt;p&gt;设计模式有助于遵循良好的编程实践。作为最流行的Web框架之一的Spring框架也使用其中的一些。&lt;/p&gt;
&lt;p&gt;本文将介绍Spring Framework中使用的设计模式。这是5篇专题文章的第一部分。这次我们将发现Spring框架中使用的4种设计模式：解释器，构建器，工厂方法和抽象工厂。每部分将首先解释给定模式的原理。紧接着，将会使用Spring的一个例子来加深理解。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>如何在Maven项目中设置Java 9</title>
    <link href="https://muyinchen.github.io/2017/07/19/%E5%A6%82%E4%BD%95%E5%9C%A8Maven%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%AE%BE%E7%BD%AEJava%209/"/>
    <id>https://muyinchen.github.io/2017/07/19/如何在Maven项目中设置Java 9/</id>
    <published>2017-07-19T15:05:38.162Z</published>
    <updated>2017-07-19T15:24:39.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在Maven项目中设置Java-9"><a href="#如何在Maven项目中设置Java-9" class="headerlink" title="如何在Maven项目中设置Java 9"></a>如何在Maven项目中设置Java 9</h1><p>在这个简短的教程中，我想向你展示如何配置新的Java 9启用的Maven项目。</p>
 <a id="more"></a>
<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h2><p>您可以在这里找到一个示例项目：<a href="https://github.com/springuni/springuni-java9" target="_blank" rel="external">https//github.com/springuni/springuni-java9</a>。</p>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><strong>模块</strong></h2><p>我们以前也可以在Maven（也有Gradle，Ant等）中创建了多个模块项目，但是它们并不是严格的模块。他们似乎是独立的代码库，没有一个标准的方法来定义这些模块提供和需要的功能。使用构建系统，您可以声明依赖关系，但是模块本身并不负责管理自己的依赖关系并提供服务。</p>
<p>在大型项目中，当多个版本的同一个库被拉入作为传递依赖关系的副作用时，开发人员很快就会遇到<a href="https://dzone.com/articles/what-is-jar-hell" target="_blank" rel="external">jar-hell</a>。</p>
<p>Java 9的变化如何减轻这一点，您现在可以正式声明<a href="http://openjdk.java.net/projects/jigsaw/quick-start" target="_blank" rel="external"><strong>module-info.java</strong></a>封装以下信息的模块。</p>
<ul>
<li><em>模块名称</em></li>
<li><em>该模块依赖的其他模块</em></li>
<li><em>该模块提供了其他模块</em></li>
</ul>
<p>许多知名的库(<strong>library </strong>)预计将迁移到Java 9的模块系统，因此他们可以共享其公共API并使用此机制来隐藏其内部。</p>
<p>但有一点值得注意的是，<strong>如果您将来需要使用这样的库(library)</strong>，<strong>那么您将要做什么呢？</strong>这是一个合理的问题，这里就是模块类型。</p>
<h2 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a><strong>模块类型</strong></h2><p>模块只是以前的简单的旧JAR文件，但是从Java 9开始，它们将包含一个我上面提到的一个特殊的<em>module-info.java</em>。还有一个称为<em>模块路径</em>的新概念，它是众所周知的<em>类路径</em>的兄弟。</p>
<p>说到<strong>这里有四种模块类型</strong>：</p>
<ul>
<li><em>命名的模块</em>（也称为应用程序模块）包含上述<em>module-info.java</em></li>
<li><em>平台模块</em>（类似于前者，但这些都是随JDK一起发货）</li>
<li><em>自动模块</em>是在模块路径上提供的那些旧JAR</li>
<li><em>未命名的模块</em>是标准类路径上列出的所有内容</li>
</ul>
<h2 id="对Maven用户的影响"><a href="#对Maven用户的影响" class="headerlink" title="对Maven用户的影响"></a><strong>对Maven用户的影响</strong></h2><p>像Maven这样的构建工具必须要处理JDK的新结构，也就是<code>module-info.java</code>模块路径。他们有一个<a href="https://cwiki.apache.org/confluence/display/MAVEN/Java+9+-+Jigsaw" target="_blank" rel="external">Wiki页面</a>，其中列出了Java 9的所有插件要求。</p>
<h3 id="编译器插件"><a href="#编译器插件" class="headerlink" title="编译器插件"></a><strong>编译器插件</strong></h3><p>为了能够使用JDK 9的模块系统<strong>maven-compiler-plugin</strong>版本<strong>3.6.1</strong>或更高版本是必需的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">showDeprecation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showDeprecation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="工具链插件"><a href="#工具链插件" class="headerlink" title="工具链插件"></a><strong>工具链插件</strong></h3><p>这或多或少是可选的，但是我强烈建议您使用它。Java 9尚未发布，我们仍在使用Java 8（或Java 7）进行生产项目，并且不舒服地更改所有的环境变量，并将其指向JDK 9的主目录，我们一直想要实验它。 <strong>maven-toolchains-plugin</strong>使您能够轻松地使用各种环境。</p>
<p>创建<strong>$HOME/.m2/toolchains.xml</strong>（或  <code>%USERPROFILE%\.m2\toolchains.xml</code>在Windows上），如果你还没有的话。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">toolchains</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">toolchain</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jdk<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">provides</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">vendor</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">provides</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Change path to JDK9 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">jdkHome</span>&gt;</span>/opt/oracle/jdk-9<span class="tag">&lt;/<span class="name">jdkHome</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">toolchain</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">toolchain</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jdk<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">provides</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">vendor</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">provides</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">jdkHome</span>&gt;</span>/opt/oracle/jdk-1.8.0.65<span class="tag">&lt;/<span class="name">jdkHome</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">toolchain</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">toolchains</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将路径更改为实际的JDK安装。之后，工具链插件可以添加到您的项目中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-toolchains-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">toolchains</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">jdk</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">vendor</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">toolchains</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">	  <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>toolchain<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="启用Java-9语言支持"><a href="#启用Java-9语言支持" class="headerlink" title="启用Java 9语言支持"></a><strong>启用Java 9语言支持</strong></h3><p>从JDK 9 b72开始，有个新功能将成为可用:<a href="http://mail.openjdk.java.net/pipermail/jdk9-dev/2015-July/002414.html" target="_blank" rel="external"><strong>javac –release</strong></a>命令行选项。简而言之，要使用<code>javac</code>交叉编译到较旧版本的平台，将设置<code>-source</code>和<code>-target</code>选项设置为较旧的值是不够的; 在<code>bootclasspath</code>也必须设置对应于旧版本了。设置<code>bootclasspath</code>经常被遗忘并获取所需的信息可能不方便。</p>
<p>该<code>--release</code>标志着<code>javac</code>解决了这两个缺点。在交叉编译时仅需要设置单个标志，相比以前需要设置三个标志（<code>source</code>，<code>-target</code>，<code>-bootclasspath</code>）和这样所需要的信息都被包括在JDK。接受的参数值为<code>--release</code>6,7,8和9。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">maven.compiler.release</span>&gt;</span>9<span class="tag">&lt;/<span class="name">maven.compiler.release</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<p>属性  <strong>maven.compiler.release</strong>直接映射到该<code>--release</code>标志<code>javac</code>，而另外两个属性只对<em>IntelliJ</em>有必要 ，用来了解源码兼容性。</p>
<h2 id="已知的问题"><a href="#已知的问题" class="headerlink" title="已知的问题"></a>已知的问题</h2><p>不幸的是，在写作时有测试编译失败。这是由于<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8178012" target="_blank" rel="external">JDK-8178012</a>引入的一个突破性的改变  ，它<strong>删除了-Xmodule编译器标志</strong>。希望  <a href="https://issues.apache.org/jira/browse/MCOMPILER-294" target="_blank" rel="external">MCOMPILER-294</a>可以很快得到修复，但同时也可以禁用编译测试源。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Fix breaking change introduced by JDK-8178012: Finish removal of -Xmodule</div><div class="line">    Reference:  http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8178012</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-testCompile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test-compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">showDeprecation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showDeprecation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何在Maven项目中设置Java-9&quot;&gt;&lt;a href=&quot;#如何在Maven项目中设置Java-9&quot; class=&quot;headerlink&quot; title=&quot;如何在Maven项目中设置Java 9&quot;&gt;&lt;/a&gt;如何在Maven项目中设置Java 9&lt;/h1&gt;&lt;p&gt;在这个简短的教程中，我想向你展示如何配置新的Java 9启用的Maven项目。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 9" scheme="https://muyinchen.github.io/tags/Java-9/"/>
    
  </entry>
  
  <entry>
    <title>构建用户管理微服务</title>
    <link href="https://muyinchen.github.io/2017/07/15/%E6%9E%84%E5%BB%BA%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://muyinchen.github.io/2017/07/15/构建用户管理微服务/</id>
    <published>2017-07-15T04:15:38.401Z</published>
    <updated>2017-07-15T04:15:28.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建用户管理微服务"><a href="#构建用户管理微服务" class="headerlink" title="构建用户管理微服务"></a>构建用户管理微服务</h1><p>翻译自:<a href="https://springuni.com/user-management-microservice-part-1/" target="_blank" rel="external">https://springuni.com/user-management-microservice-part-1/</a></p>
  <a id="more"></a>
<h2 id="构建用户管理微服务（一）：定义领域模型和-REST-API"><a href="#构建用户管理微服务（一）：定义领域模型和-REST-API" class="headerlink" title="构建用户管理微服务（一）：定义领域模型和 REST API"></a>构建用户管理微服务（一）：定义领域模型和 REST API</h2><p>在《构建用户管理微服务》的第一部分中，我们会定义应用的需求，初始的领域模型和供前端使用的 REST API。 我们首先定义<strong>用户注册</strong>和<strong>管理用户</strong>的故事。</p>
<h3 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h3><p>在设计新系统时，值得考虑的是用户希望实现的结果。 下面您可以找到用户注册系统应具有的基本功能的列表。</p>
<ul>
<li>作为<strong>用户</strong>，我想注册，以便我可以访问需要注册的内容</li>
<li>作为<strong>用户</strong>，我想在注册后确认我的电子邮件地址</li>
<li>作为<strong>用户</strong>，我想登录并注销</li>
<li>作为<strong>用户</strong>，我想更改我的密码</li>
<li>作为<strong>用户</strong>，我想更改我的电子邮件地址</li>
<li>作为<strong>用户</strong>，我想要重置我的密码，以便我忘记密码后可以登录</li>
<li>作为<strong>用户</strong>，我想更新我的个人资料，以便我可以提供我正确的联络资料</li>
<li>作为<strong>用户</strong>，我想关闭我的帐户，以便我可以关闭我与我注册的服务的关系</li>
<li>作为<strong>管理员</strong>，我想手动管理（创建/删除/更新）用户，以便工作人员不必重新进行注册过程</li>
<li>作为<strong>管理员</strong>，我想手动创建用户，这样工作人员就不用再过注册过程了</li>
<li>作为<strong>管理员</strong>，我想列出所有用户，即使是那些曾经关闭帐户的用户</li>
<li>作为<strong>管理员</strong>，我希望能够看到用户的活动（登录，注销，密码重置，确认，个人资料更新），以便我可以遵守外部审计要求</li>
</ul>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>我们来看看系统将要支持什么样的工作流程。首先，人们应该能够注册和登录，这些是相当明显的功能。</p>
<p><a href="http://blog.daocloud.io/wp-content/uploads/2017/06/1.jpg" target="_blank" rel="external"><img src="http://og0sybnix.bkt.clouddn.com/User_registration_workflow_861x571_final%20%281%29.png" alt="1"></a></p>
<p>但是，处理确认令牌时需要谨慎。 由于它们可用于执行特权操作，因此我们使用一次性随机令牌来处理密码重置和电子邮件确认。</p>
<p>当一个新的令牌由用户生成，无论什么原因，所有以前的都是无效的。 当有人记住他们的密码时，以前发出的和有效的密码重置令牌必须过期。</p>
<h3 id="非功能性需求"><a href="#非功能性需求" class="headerlink" title="非功能性需求"></a>非功能性需求</h3><p>用户故事通常不会定义非功能性要求，例如安全性，开发原理，技术栈等。所以我们在这里单独列出。</p>
<ul>
<li>领域模型是使用域驱动的设计原则在纯 Java 中实现的，并且独立于要使用的底层技术栈</li>
<li>当用户登录时，将为他们生成一个 JWT 令牌，有效期是 24 小时。在后续请求中包含此令牌，用户可以执行需要身份验证的操作</li>
<li>密码重置令牌有效期为 10 分钟，电子邮件地址确认令牌为一天</li>
<li>密码用加密算法（Bcrypt）加密，并且每用户加盐</li>
<li>提供了 RESTful API，用于与用户注册服务进行交互</li>
<li>应用程序将具有模块化设计，以便能够为各种场景提供单独的部署工件（例如，针对 Google App Engine 的 2.5 servlet 兼容 WAR 和其他用例的基于 Spring Boot 的自包含可执行 JAR）</li>
<li>实体标识符以数据库无关的方式生成，也就是说，不会使用数据库特定机制（AUTO_INCREMENT 或序列）来获取下一个 ID 值。解决方案将类似于 Instagram genetes ID。</li>
</ul>
<h3 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h3><p>对于第一轮实现中，我们只关注三个实体，即用户，确认令牌和用户事件。</p>
<p><a href="http://blog.daocloud.io/wp-content/uploads/2017/06/0.png" target="_blank" rel="external"><img src="http://og0sybnix.bkt.clouddn.com/unnamed.png" alt="0"></a></p>
<h3 id="rest-api"><a href="#rest-api" class="headerlink" title="rest api"></a>rest api</h3><p>访问下面的大多数 API 都需要认证，否则返回一个<strong> UNAUTHORIZED</strong> 状态码。 如果用户尝试查询属于某个其他用户的实体，则他们还会返回客户端错误（FORBIDDEN），除非他具有管理权限。 如果指定的实体不存在，则调用的端点返回 NOT_FOUND。</p>
<p>创建会话（POST /sessions）和注册新用户（POST / users）是公开的，它们不需要身份验证。</p>
<h4 id="Session-management"><a href="#Session-management" class="headerlink" title="Session management"></a>Session management</h4><p><code>1    GET /session/{session_id}</code>                                </p>
<p>如果没有给定 ID 的会话或者会话已经过期，则返回给定会话的详细信息或 NOT_FOUND。</p>
<p><code>1    POST /session</code>                   </p>
<p>创建新会话，前提是指定的电子邮件和密码对属于一个有效的用户。</p>
<p><code>1    DELETE /session/{session_id}</code>                                  </p>
<p>删除给定的会话（注销）。</p>
<h4 id="User-management"><a href="#User-management" class="headerlink" title="User management"></a>User management</h4><p><code>1    GET /users/{user_id}</code>                          </p>
<p>根据一个指定的 ID 查找用户。</p>
<p><code>1    GET /users</code>               </p>
<p>列举系统中所有的用户。</p>
<p><code>1    POST /users</code>               </p>
<p>注册一个新的用户。</p>
<p><code>1    DELETE /users/{user_id}</code>                         </p>
<p>删除指定的用户。</p>
<p><code>1    PUT /users/{user_id}</code>                      </p>
<p>更新指定用户的个人信息。</p>
<p><code>1    PUT /users/{user_id}/tokens/{token_id}</code></p>
<p>使用给定用户的令牌执行与令牌类型相关的操作。</p>
<h2 id="构建用户管理微服务（二）：实现领域模型"><a href="#构建用户管理微服务（二）：实现领域模型" class="headerlink" title="构建用户管理微服务（二）：实现领域模型"></a>构建用户管理微服务（二）：实现领域模型</h2><p>在第二部分，将详细介绍如何实现领域模型，在代码之外做了哪些决定。</p>
<h3 id="使用领域驱动设计"><a href="#使用领域驱动设计" class="headerlink" title="使用领域驱动设计"></a>使用领域驱动设计</h3><p>在第一部分中，作者提到了将使用领域驱动设计原则，这意味着，该模型可以不依赖于任何框架或基础设施类。在多次应用实现过程中，作者把领域模型和框架的具体注释（如 JPA 或 Hibernate ）混在一起，就如同和 Java POJO 一起工作（贫血模型）。在设计领域模型中，唯一使用的库是Lombok，用于减少定义的 getter 和 setter 方法以避免冗余。</p>
<p>当设计 DDD 的模型，第一步是对类进行分类。在埃里克·埃文斯书中的第二部分专注于模型驱动设计的构建模块。考虑到这一点，我们的模型分为以下几类。</p>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>实体有明确的标识和生命周期需要被管理。从这个角度来看，用户肯定是一个实体。</p>
<p>ConfirmationToken 就是一个边缘的例子，因为在没有用户上下文的情况下，逻辑上它就不存在，而另一方面，它可以通过令牌的值来标识并且它有自己的生命周期。</p>
<p>同样的方法也适用于 Session ，这也可能是一个值对象，由于其不可改变的性质，但它仍然有一个 ID 和一个生命周期（会话过期）。</p>
<h3 id="值对象"><a href="#值对象" class="headerlink" title="值对象"></a>值对象</h3><p>相对于实体类，值对象没有一个明确的 ID ，那就是，他们只是将一系列属性组合，并且，如果这些属性和另外一个相同类型的值对象的属性相同，那么我们就可以认为这两个值对象是相同的。</p>
<p>当设计领域模型，值对象提供了一种方便的方式来描述携带有一定的信息片段属性的集合。 AddressData，AuditData，ContactData 和 Password 因此可以认为是值对象。</p>
<p>虽然将所有这些属性实现为不可改变的是不切实际的，他们的某些属性可以单独被修改， Password 是一个很好的例子。当我们创建 Password 的实例，它的盐和哈希创建只有一次。在改变密码时，一个全新的实例与新的盐和散列将会被创建。</p>
<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合代表一组结合在一起，并通过访问所谓的聚合根的对象。</p>
<p>这儿有两个聚合对象：用户和会话。前者包含了所有与用户相关的实体和值对象，而后者只包含一个单一的实体 Session 。</p>
<p>显然，用户聚合根是用户实体。通过一个实例用户实体，我们可以管理确认令牌，用户事件和用户的密码。</p>
<p>聚合 Session 成为一个独立的实体——尽管被捆绑到一个用户的上下文——部分原因是由于其一次性性质，部分是因为当我们查找一个会话时我们不知道用户是谁。 Session 被创建之后，要么过期，要么按需删除。</p>
<h3 id="领域事件"><a href="#领域事件" class="headerlink" title="领域事件"></a>领域事件</h3><p>当需要由系统的另外组件处理的事件发生时，领域事件就会被触发。</p>
<p>用户管理应用程序有一个领域事件，这是 UserEvent ，它有以下类型：</p>
<ul>
<li>DELETED</li>
<li>EMAIL_CHANGED</li>
<li>EMAIL_CHANGE_REQUESTED</li>
<li>EMAIL_CONFIRMED</li>
<li>PASSWORD_CHANGED</li>
<li>PASSWORD_RESET_CONFIRMED</li>
<li>PASSWORD_RESET_REQUESTED</li>
<li>SCREEN_NAME_CHANGED</li>
<li>SIGNIN_SUCCEEDED</li>
<li>SIGNIN_FAILED</li>
<li>SIGNUP_REQUESTED</li>
</ul>
<p>### </p>
<h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>服务包含了能够操作一组领域模型的类的业务逻辑。在本应用中， UserService 管理用户的生命周期，并发出合适的 UserEvent 。SessionService 是用于创建和销毁用户会话。</p>
<p>### </p>
<h3 id="存储库"><a href="#存储库" class="headerlink" title="存储库"></a>存储库</h3><p>存储库旨在代表一个实体对象的概念集合，但是有时他们只是作为数据访问对象。有两种实现方法，一种方法是列出所有的抽象存储库类或超接口可能的数据访问方法，例如 Spring Data ，或者创建专门存储库接口。</p>
<p>对于用户管理应用程序，作者选择了第二种方法。UserRepository  和 SessionRepository  只列出那些绝对必要的处理他们实体的方法。</p>
<p>### </p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>你可能已经注意到，这里有一个 GitHub 上的库： springuni ，它包含用户管理应用程序的一部分，但它不包含应用程序本身的可执行版本。</p>
<p>究其原因，我为什么不提供单一只包含 Spring Boot 少量 @Enable* 注解的库，是为了可重用性。大多数我碰到的项目第一眼看起来是可以模块化的，但实际上他们只是没有良好分解职责的巨大单体应用。当你试图重用这样一个项目的模块，你很快意识到，它依赖于许多其他模块和/或过多的外部库。</p>
<p>springuni-particles （它可能已被也称为 springuni 模块）提供了多个模块的可重复使用的只为某些明确定义的功能。用户和会话管理是很好的例子。</p>
<p>### </p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>springuni-auth-model 包含了所有的领域模型类和用于管理用户生命周期的业务逻辑，它是完全与框架无关的。它的存储库，并且可以使用任何数据存储机制，对于手头的实际任务最符合。还有，PasswordChecker 和 PasswordEncryptor 可基于任何强大的密码散列技术实现。</p>
<p>springuni-commons 包含了通用的工具库。有很多著名的第三方库（如 Apache Commons Lang，Guava 等），这外延了 JDK 的标准库。在另一方面，我发现自己很多时候仅仅只用这些非常可扩展库的少量类。我特别喜欢的 Apache Commons Lang 中的 StringUtils 的和 Apache 共同集合的 CollectionUtils 类，但是，我宁愿为当前项目提供一个高度定制化的 StringUtils 和 CollectionUtils，这样就不需要添加外部依赖。</p>
<p>sprinuni-crm-model 定义了通用的值对象，用于处理联系人数据，如地址，国家等。虽然微服务架构的倡导者将投票反对使用共享库，但我认为这个特定点可能需要不时修订手头的任务。我最近参与了一些 CRM 集成项目，不得不重新实现了几乎同样的领域模型在不同的限界上下文（即用户，客户，联系人），这样一遍又一遍的操作是乏味的。也就是说，我认为使用联系人数据领域模型的小型通用库是值得尝试的。</p>
<h2 id="构建用户管理微服务（三）：实现和测试存储库"><a href="#构建用户管理微服务（三）：实现和测试存储库" class="headerlink" title="构建用户管理微服务（三）：实现和测试存储库"></a>构建用户管理微服务（三）：实现和测试存储库</h2><p>详细介绍一个完整的基于 JPA 的用户存储库实现，一个 JPA 的支撑模型和一些测试用例。</p>
<h3 id="使用-XML-来映射简单的-JAVA-对象"><a href="#使用-XML-来映射简单的-JAVA-对象" class="headerlink" title="使用 XML 来映射简单的 JAVA 对象"></a>使用 XML 来映射简单的 JAVA 对象</h3><p>仅看到用户存储库，也许你就能想到在对它添加基于 JPA 的实现时会遇到什么困难。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long userId)</span> <span class="keyword">throws</span> NoSuchUserException</span>;  </div><div class="line"><span class="function">Optional&lt;User&gt; <span class="title">findById</span><span class="params">(Long id)</span></span>;  </div><div class="line"><span class="function">Optional&lt;User&gt; <span class="title">findByEmail</span><span class="params">(String email)</span></span>;  </div><div class="line"><span class="function">Optional&lt;User&gt; <span class="title">findByScreenName</span><span class="params">(String screenName)</span></span>;  </div><div class="line"><span class="function">User <span class="title">save</span><span class="params">(User user)</span></span>; </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是, 正如我在第一部分提到的, 我们将使用 DDD (域驱动设计), 因此, 在模型中就不能使用特定框架的依赖关系云 (包括 JPA 的注解) ，剩下的唯一可行性方法是用 XML 进行映射。如果我没有记错的话，自2010年以来，我再也没有接触过任何一个 orm.xml 的文件 , 这也就是我为什么开始怀念它的原因。</p>
<p>接下来我们看看XML文件中User的映射情况，以下是 user-orm.xml 的部分摘录。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">entity</span> <span class="attr">class</span>=<span class="string">"com.springuni.auth.domain.model.user.User"</span> <span class="attr">cacheable</span>=<span class="string">"true"</span> <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"user_"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">named-query</span> <span class="attr">name</span>=<span class="string">"findByIdQuery"</span>&gt;</span>  <span class="tag">&lt;<span class="name">query</span>&gt;</span>    </div><div class="line">&lt;![CDATA[</div><div class="line">     select u from User u      </div><div class="line">     where u.id = :userId      </div><div class="line">     and u.deleted = false    </div><div class="line">   ]]&gt;  <span class="tag">&lt;/<span class="name">query</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">named-query</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">named-query</span> <span class="attr">name</span>=<span class="string">"findByEmailQuery"</span>&gt;</span>  <span class="tag">&lt;<span class="name">query</span>&gt;</span>    </div><div class="line">&lt;![CDATA[      </div><div class="line">     select u from User u      </div><div class="line">     where u.contactData.email = :email      </div><div class="line">     and u.deleted = false    </div><div class="line">   ]]&gt;  <span class="tag">&lt;/<span class="name">query</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">named-query</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">named-query</span> <span class="attr">name</span>=<span class="string">"findByScreenNameQuery"</span>&gt;</span>  <span class="tag">&lt;<span class="name">query</span>&gt;</span>    </div><div class="line">&lt;![CDATA[      </div><div class="line">     select u from User u      </div><div class="line">     where u.screenName = :screenName      </div><div class="line">     and u.deleted = false    </div><div class="line">   ]]&gt;  <span class="tag">&lt;/<span class="name">query</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">named-query</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">entity-listeners</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">entity-listener</span> <span class="attr">class</span>=<span class="string">"com.springuni.commons.jpa.IdentityGeneratorListener"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">entity-listeners</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">attributes</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"timezone"</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">enumerated</span>&gt;</span>STRING<span class="tag">&lt;/<span class="name">enumerated</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">basic</span>&gt;</span>  <span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"locale"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"confirmed"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"locked"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">basic</span> <span class="attr">name</span>=<span class="string">"deleted"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">name</span>=<span class="string">"confirmationTokens"</span> <span class="attr">fetch</span>=<span class="string">"LAZY"</span> <span class="attr">mapped-by</span>=<span class="string">"owner"</span> <span class="attr">orphan-removal</span>=<span class="string">"true"</span>&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">cascade</span>&gt;</span>      </div><div class="line"> <span class="tag">&lt;<span class="name">cascade-persist</span>/&gt;</span>      </div><div class="line">  <span class="tag">&lt;<span class="name">cascade-merge</span>/&gt;</span>    </div><div class="line"> <span class="tag">&lt;/<span class="name">cascade</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">element-collection</span> <span class="attr">name</span>=<span class="string">"authorities"</span>&gt;</span>    </div><div class="line">   <span class="tag">&lt;<span class="name">collection-table</span> <span class="attr">name</span>=<span class="string">"authority"</span>&gt;</span>      </div><div class="line">   <span class="tag">&lt;<span class="name">join-column</span> <span class="attr">name</span>=<span class="string">"user_id"</span>/&gt;</span>    </div><div class="line"> <span class="tag">&lt;/<span class="name">collection-table</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">element-collection</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">embedded</span> <span class="attr">name</span>=<span class="string">"auditData"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">embedded</span> <span class="attr">name</span>=<span class="string">"contactData"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">embedded</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- Do not map email directly through its getter/setter --&gt;</span>  <span class="tag">&lt;<span class="name">transient</span> <span class="attr">name</span>=<span class="string">"email"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">attributes</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">entity</span>&gt;</span></div></pre></td></tr></table></figure>
<p>域驱动设计是一种持久化无关的方法，因此坚持设计一个没有具体目标数据结构的模型可能很有挑战性。当然, 它也存在优势, 即可对现实世界中的问题直接进行建模, 而不存在只能以某种方式使用某种技术栈之类的副作用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Entity</span>&lt;<span class="title">Long</span>, <span class="title">User</span>&gt; </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> Long id;  </div><div class="line"><span class="keyword">private</span> String screenName;  ...  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> Set&lt;String&gt; authorities = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般来说，一组简单的字符串或枚举值就能对用户的权限（或特权）进行建模了。</p>
<p>使用像 MongoDB 这样的文档数据库能够轻松自然地维护这个模型，如下所示。(顺便一提, 我还计划在本系列的后续内容中添加一个基于 Mongo 的存储库实现)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;   "id":123456789,   </div><div class="line">"screenName":"test",   ...   </div><div class="line">"authorities":[      </div><div class="line">             "USER",      </div><div class="line">             "ADMIN"   </div><div class="line">] </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而, 在关系模型中, 权限的概念必须作为用户的子关系进行处理。但是在现实世界中, 这仅仅只是一套权限规则。我们需要如何弥合这样的差距呢？</p>
<p>在 JPA 2.0 中可以引入 ElementCollection 来进行操作，它的用法类似于 OneToMany。在这种情况下, 已经配置好的 JPA 提供的程序 (Hibernate) 将自动生成必要的子关系。</p>
<p>alter table authority  add constraint FKoia3663r5o44m6knaplucgsxn  foreign key (user<em>id) references user</em></p>
<p>## </p>
<h3 id="项目中的新模块"><a href="#项目中的新模块" class="headerlink" title="项目中的新模块"></a>项目中的新模块</h3><p>我一直在讨论的 springuni-auth-user-jpa 包含了一个完整的基于 JPA 的 UserRepository 实现。其目标是, 每个模块都应该只拥有那些对它们的操作来说绝对必要的依赖关系，而这些关系只需要依赖 JPA API 便可以实现。</p>
<p>springuni-commons-jpa 是一个支撑模块, 它能够使用预先配置好的 HikariCP 和 Hibernate 的组合作为实体管理器, 而不必关心其他细节。 它的特色是 AbstractJpaConfiguration, 类似于 Spring Boot 的 HibernateJpaAutoConfiguration。</p>
<p>然而我没有使用后者的原因是 Spring Boot 的自动配置需要一定的初始化。因为谷歌应用引擎标准环境是我的目标平台之一，因此能否快速地启动是至关重要的。</p>
<h3 id="单元测试存储库"><a href="#单元测试存储库" class="headerlink" title="单元测试存储库"></a>单元测试存储库</h3><p>虽然有人可能会说, 对于存储库没必要进行过多的测试, 尤其是在使用 Spring Data 的 存储库接口的时候。但是我认为测试代码可以避免运行时存在的一些问题，例如错误的实体映射或错误的 JPQL 查询。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner)</div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = [UserJpaTestConfiguration])</div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Rollbackclass</span> UserJpaRepositoryTest &#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  UserRepository userRepository</div><div class="line"> </div><div class="line">  User user</div><div class="line"> </div><div class="line">  <span class="meta">@Before</span>  <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">    user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"test"</span>, <span class="string">"test@springuni.com"</span>)</div><div class="line">    user.addConfirmationToken(ConfirmationTokenType.EMAIL, <span class="number">10</span>)</div><div class="line">    userRepository.save(user)</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  ...</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span>  <span class="function"><span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> </span>&#123;</div><div class="line">    Optional&lt;User&gt; userOptional = userRepository.findById(user.id)</div><div class="line">    assertTrue(userOptional.isPresent())</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  ...</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个测试用例启动了一个具有嵌入式 H2 数据库的实体管理器。H2 非常适合于测试, 因为它支持许多众所周知的数据库 (如 MySQL) 的兼容模式，可以模拟你的真实数据库。</p>
<h2 id="构建用户管理微服务（四）：实现-REST-控制器"><a href="#构建用户管理微服务（四）：实现-REST-控制器" class="headerlink" title="构建用户管理微服务（四）：实现 REST 控制器"></a>构建用户管理微服务（四）：实现 REST 控制器</h2><p>将 REST 控制器添加到领域控制模型的顶端</p>
<h3 id="有关-REST"><a href="#有关-REST" class="headerlink" title="有关 REST"></a>有关 REST</h3><p>REST, 全称是 Resource Representational State Transfer（Resource 被省略掉了）。通俗来讲就是：资源在网络中以某种表现形式进行状态转移。在 web 平台上，REST 就是选择通过使用 http 协议和 uri，利用 client/server model 对资源进行 CRUD (Create/Read/Update/Delete) 增删改查操作。</p>
<p>使用 REST 结构风格是因为，随着时代的发展，传统前后端融为一体的网页模式无法满足需求，而 RESTful 可以通过一套统一的接口为 Web，iOS 和 Android 提供服务。另外对于广大平台来说，比如 Facebook platform，微博开放平台，微信公共平台等，他们需要一套提供服务的接口，于是 RESTful 更是它们最好的选择。</p>
<h3 id="REST-端点的支撑模块"><a href="#REST-端点的支撑模块" class="headerlink" title="REST 端点的支撑模块"></a>REST 端点的支撑模块</h3><p>我经手的大多数项目，都需要对控制器层面正确地进行 Spring MVC 的配置。随着近几年单页应用程序的广泛应用，越来越不需要在 Spring mvc 应用程序中配置和开发视图层 (使用 jsp 或模板引擎)。</p>
<p>现在，创建完整的 REST 后端的消耗并生成了 JSON 是相当典型的, 然后通过 SPA 或移动应用程序直接使用。基于以上所讲, 我收集了 Spring MVC 常见配置，这能实现对后端的开发。</p>
<ul>
<li>Jackson 用于生成和消解 JSON</li>
<li>application/json 是默认的内容类型</li>
<li>ObjectMapper 知道如何处理 Joda 和 JSR-310 日期/时间 api, 它在 iso 格式中对日期进行序列化, 并且不将缺省的值序列化 (NON_ABSENT)</li>
<li>ModelMapper 用于转换为 DTO 和模型类</li>
<li>存在一个自定义异常处理程序, 用于处理 EntityNotFoundException 和其他常见应用程序级别的异常</li>
<li>捕获未映射的请求并使用以前定义的错误响应来处理它们</li>
</ul>
<p>#### </p>
<h4 id="能被重新使用的常见-REST-配置项目"><a href="#能被重新使用的常见-REST-配置项目" class="headerlink" title="能被重新使用的常见 REST 配置项目"></a>能被重新使用的常见 REST 配置项目</h4><p>该代码在 github, 有一个新的模块 springuni-commons-rest , 它包含实现 REST 控制器所需的所有常用的实用程序。 专有的 RestConfiguration 可以通过模块进行扩展, 它们可以进一步细化默认配置。</p>
<p>#### </p>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>正常的 web 应用程序向最终用户提供易于使用的错误页。但是，对于一个纯粹的 JSON-based REST 后端, 这不是一个需求, 因为它的客户是 SPA 或移动应用。</p>
<p>因此, 最好的方法是用一个明确定义的 JSON 结构 (RestErrorResponse) 前端可以很容易地响应错误, 这是非常可取的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestErrorResponse</span> </span>&#123;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> statusCode;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String reasonPhrase;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> String detailMessage; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">RestErrorResponse</span><span class="params">(HttpStatus status, String detailMessage)</span> </span>&#123;    </div><div class="line">statusCode = status.value();    </div><div class="line">reasonPhrase = status.getReasonPhrase();    </div><div class="line"><span class="keyword">this</span>.detailMessage = detailMessage;  &#125;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestErrorResponse <span class="title">of</span><span class="params">(HttpStatus status)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> of(status, <span class="keyword">null</span>);  &#125;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestErrorResponse <span class="title">of</span><span class="params">(HttpStatus status, Exception ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestErrorResponse(status, ex.getMessage());  &#125; &#125;</div></pre></td></tr></table></figure>
<p>以上代码将返回 HTTP 错误代码，包括 HTTP 错误的文本表示和对客户端的详细信息，RestErrorHandler 负责生成针对应用程序特定异常的正确响应。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestErrorHandler</span> <span class="keyword">extends</span> <span class="title">ResponseEntityExceptionHandler</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(ApplicationException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleApplicationException</span><span class="params">(<span class="keyword">final</span> ApplicationException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, BAD_REQUEST);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(EntityAlreadyExistsException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleEntityExistsException</span><span class="params">(<span class="keyword">final</span> EntityAlreadyExistsException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, BAD_REQUEST);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(EntityConflictsException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleEntityConflictsException</span><span class="params">(<span class="keyword">final</span> EntityConflictsException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, CONFLICT);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(EntityNotFoundException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleEntityNotFoundException</span><span class="params">(<span class="keyword">final</span> EntityNotFoundException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, NOT_FOUND);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@ExceptionHandler</span>(RuntimeException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleRuntimeException</span><span class="params">(<span class="keyword">final</span> RuntimeException ex)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, INTERNAL_SERVER_ERROR);  &#125; </div><div class="line"> </div><div class="line"> <span class="meta">@ExceptionHandler</span>(UnsupportedOperationException.class)  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Object&gt; <span class="title">handleUnsupportedOperationException</span><span class="params">(      </span></span></div><div class="line"><span class="keyword">final</span> UnsupportedOperationException ex) &#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, NOT_IMPLEMENTED);  &#125;  </div><div class="line"> </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title">handleExceptionInternal</span><span class="params">(      </span></span></div><div class="line">Exception ex, Object body, HttpHeaders headers, HttpStatus status, WebRequest request) &#123;    </div><div class="line">RestErrorResponse restErrorResponse = RestErrorResponse.of(status, ex);    </div><div class="line"><span class="keyword">return</span> <span class="keyword">super</span>.handleExceptionInternal(ex, restErrorResponse, headers, status, request);  &#125;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">private</span> ResponseEntity&lt;Object&gt; <span class="title">handleExceptionInternal</span><span class="params">(Exception ex, HttpStatus status)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> handleExceptionInternal(ex, <span class="keyword">null</span>, <span class="keyword">null</span>, status, <span class="keyword">null</span>);  &#125; &#125;</div></pre></td></tr></table></figure>
<h4 id="处理未响应请求"><a href="#处理未响应请求" class="headerlink" title="处理未响应请求"></a>处理未响应请求</h4><p>为了处理未映射的请求, 首先我们需要定义一个默认处理程序, 然后用 RequestMappingHandlerMapping 来设置它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultController</span> </span>&#123; </div><div class="line"> </div><div class="line"><span class="meta">@RequestMapping</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;RestErrorResponse&gt; <span class="title">handleUnmappedRequest</span><span class="params">(<span class="keyword">final</span> HttpServletRequest request)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> ResponseEntity.status(NOT_FOUND).body(RestErrorResponse.of(NOT_FOUND));  </div><div class="line">   &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过这样的设置，RestConfiguration 在一定程度上扩展了 WebMvcConfigurationSupport, 这提供了用于调用 MVC 基础结构的自定义钩子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableWebMvc</span> </div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;  </div><div class="line">...  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createDefaultHandler</span><span class="params">()</span> </span>&#123;   </div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> DefaultController();  &#125;    </div><div class="line">... </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> RequestMappingHandlerMapping <span class="title">createRequestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;    </div><div class="line">RequestMappingHandlerMapping handlerMapping = <span class="keyword">super</span>.createRequestMappingHandlerMapping();    </div><div class="line">Object defaultHandler = createDefaultHandler();    </div><div class="line">handlerMapping.setDefaultHandler(defaultHandler);    </div><div class="line">   <span class="keyword">return</span> handlerMapping;  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="用于管理用户的-REST-端点"><a href="#用于管理用户的-REST-端点" class="headerlink" title="用于管理用户的 REST 端点"></a>用于管理用户的 REST 端点</h4><p>在第一部分中，我定义了一堆用于和用户管理服务进行交互的 REST 风格的端点。而实际上, 他们与用 Spring MVC 创建 REST 风格的端点相比，并没有什么特别的。但是,我有一些最近意识到的小细节想要补充。</p>
<ul>
<li>正如 Spring 4.3 有一堆用于定义请求处理程序的速记注解，@GetMapping 是一个组合的注解, 它为 @RequestMapping (method = RequestMethod. GET) 作为其对应的 @PostMapping、@PutMapping 等的快捷方式。</li>
<li>我找到了一个用于处理从/到模型类转换的 DTO 的模块映射库 。在此之前，我用的是 Apache Commons Beanutils。</li>
<li>手动注册控制器来加快应用程序初始化的速度。正如我在第三部分中提到的, 这个应用程序将托管在谷歌应用引擎标准环境中，而开启一个新的实例是至关重要的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span> <span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;  </div><div class="line"> </div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;  </div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> ModelMapper modelMapper;  </div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(ModelMapper modelMapper, UserService userService)</span> </span>&#123;    </div><div class="line"> <span class="keyword">this</span>.modelMapper = modelMapper;    </div><div class="line"> <span class="keyword">this</span>.userService = userService; </div><div class="line"> &#125; </div><div class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/&#123;userId&#125;"</span>)  </div><div class="line"> <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">long</span> userId)</span> <span class="keyword">throws</span> ApplicationException </span>&#123; </div><div class="line">   	User user = userService.getUser(userId);    </div><div class="line"> 	<span class="keyword">return</span> modelMapper.map(user, UserDto.class); </div><div class="line"> &#125;  </div><div class="line"> </div><div class="line"> ... </div><div class="line"> </div><div class="line"><span class="meta">@PostMapping</span>  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(@RequestBody @Validated UserDto userDto)</span> <span class="keyword">throws</span> ApplicationException </span>&#123;   </div><div class="line">	User user = modelMapper.map(userDto, User.class);   </div><div class="line">	userService.signup(user, userDto.getPassword()); </div><div class="line"> &#125;  </div><div class="line">... </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="将-DTO-映射到模型类"><a href="#将-DTO-映射到模型类" class="headerlink" title="将 DTO 映射到模型类"></a>将 DTO 映射到模型类</h4><p>虽然 ModelMapper 在查找匹配属性时是相当自动的, 但在某些情况下需要进行手动调整。比如说，用户的密码。这是我们绝对不想暴露的内容。</p>
<p>通过定义自定义属性的映射, 可以很容易地避免这一点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.modelmapper.PropertyMap;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMap</span> <span class="keyword">extends</span> <span class="title">PropertyMap</span>&lt;<span class="title">User</span>, <span class="title">UserDto</span>&gt; </span>&#123;</div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">skip().setPassword(<span class="keyword">null</span>);  </div><div class="line"> </div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当 ModelMapper 的实例被创建时, 我们可以自定义属性映射、转换器、目标值提供程序和一些其他的内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span> </div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRestConfiguration</span> <span class="keyword">extends</span> <span class="title">RestConfiguration</span> </span>&#123;    </div><div class="line">...  </div><div class="line"> <span class="meta">@Bean</span>  </div><div class="line"> <span class="function"><span class="keyword">public</span> ModelMapper <span class="title">modelMapper</span><span class="params">()</span> </span>&#123;    </div><div class="line"> ModelMapper modelMapper = <span class="keyword">new</span> ModelMapper();    </div><div class="line"> customizeModelMapper(modelMapper);    </div><div class="line"> modelMapper.validate();    </div><div class="line">   <span class="keyword">return</span> modelMapper;  &#125;  </div><div class="line"> <span class="meta">@Override</span>  </div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeModelMapper</span><span class="params">(ModelMapper modelMapper)</span> </span>&#123;    </div><div class="line"> modelMapper.addMappings(<span class="keyword">new</span> UserMap());    </div><div class="line"> modelMapper.addMappings(<span class="keyword">new</span> UserDtoMap());  &#125;  </div><div class="line"> ... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试-REST-控制器"><a href="#测试-REST-控制器" class="headerlink" title="测试 REST 控制器"></a>测试 REST 控制器</h4><p>自 MockMvc 在 Spring 3.2 上推出以来, 使用 Spring mvc 测试 REST 控制器变得非常容易。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner) </div><div class="line"><span class="meta">@ContextConfiguration</span>(classes = [AuthRestTestConfiguration]) </div><div class="line"><span class="meta">@WebAppConfigurationclass</span> UserControllerTest &#123;  </div><div class="line"><span class="meta">@Autowired</span>  WebApplicationContext context    </div><div class="line"><span class="meta">@Autowired</span>  UserService userService  MockMvc mockMvc  </div><div class="line"><span class="meta">@Before</span>  </div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;    </div><div class="line"> mockMvc = MockMvcBuilders.webAppContextSetup(context).build()    </div><div class="line"> reset(userService)    </div><div class="line"> when(userService.getUser(<span class="number">0L</span>)).thenThrow(NoSuchUserException)    </div><div class="line"> when(userService.getUser(<span class="number">1L</span>))        </div><div class="line"> .thenReturn(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"test"</span>, <span class="string">"test@springuni.com"</span>))  &#125;  </div><div class="line"><span class="meta">@Test</span>  </div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">testGetUser</span><span class="params">()</span> </span>&#123;    </div><div class="line"> mockMvc.perform(get(<span class="string">"/users/1"</span>).contentType(APPLICATION_JSON))        </div><div class="line"> .andExpect(status().isOk())        </div><div class="line"> .andExpect(jsonPath(<span class="string">"id"</span>, is(<span class="number">1</span>)))        </div><div class="line"> .andExpect(jsonPath(<span class="string">"screenName"</span>, is(<span class="string">"test"</span>)))        </div><div class="line"> .andExpect(jsonPath(<span class="string">"contactData.email"</span>, is(<span class="string">"test@springuni.com"</span>)))        </div><div class="line"> .andDo(print())    </div><div class="line"> verify(userService).getUser(<span class="number">1L</span>)    </div><div class="line"> verifyNoMoreInteractions(userService)  </div><div class="line">&#125;  </div><div class="line">... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有两种方式能让 MockMvc 与 MockMvcBuilders 一起被搭建。 一个是通过 web 应用程序上下文 (如本例中) 来完成, 另一种方法是向 standaloneSetup () 提供具体的控制器实例。我使用的是前者,当 Spring Security得到配置的时候，测试控制器显得更为合适。</p>
<h2 id="构建用户管理微服务（五）：使用-JWT-令牌和-Spring-Security-来实现身份验证"><a href="#构建用户管理微服务（五）：使用-JWT-令牌和-Spring-Security-来实现身份验证" class="headerlink" title="构建用户管理微服务（五）：使用 JWT 令牌和 Spring Security 来实现身份验证"></a>构建用户管理微服务（五）：使用 JWT 令牌和 Spring Security 来实现身份验证</h2><p>我们已经建立了业务逻辑、数据访问层和前端控制器, 但是忽略了对身份进行验证。随着 Spring Security 成为实际意义上的标准, 将会在在构建 Java web 应用程序的身份验证和授权时使用到它。在构建用户管理微服务系列的第五部分中, 将带您探索 Spring Security 是如何同 JWT 令牌一起使用的。</p>
<h3 id="有关-Token"><a href="#有关-Token" class="headerlink" title="有关 Token"></a>有关 Token</h3><p>诸如 Facebook，Github，Twitter 等大型网站都在使用基于 Token 的身份验证。相比传统的身份验证方法，Token 的扩展性更强，也更安全，非常适合用在 Web 应用或者移动应用上。我们将 Token 翻译成令牌，也就意味着，你能依靠这个令牌去通过一些关卡，来实现验证。实施 Token 验证的方法很多，JWT 就是相关标准方法中的一种。</p>
<h3 id="关于-JWT-令牌"><a href="#关于-JWT-令牌" class="headerlink" title="关于 JWT 令牌"></a>关于 JWT 令牌</h3><p>JSON Web TOKEN（JWT）是一个开放的标准 （RFC 7519）, 它定义了一种简洁且独立的方式, 让在各方之间的 JSON 对象安全地传输信息。而经过数字签名的信息也可以被验证和信任。</p>
<p>JWT 的应用越来越广泛, 而因为它是轻量级的，你也不需要有一个用来验证令牌的认证服务器。与 OAuth 相比, 这有利有弊。如果 JWT 令牌被截获，它可以用来模拟用户, 也无法防范使用这个被截获的令牌继续进行身份验证。</p>
<p>真正的 JWT 令牌看起来像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</div><div class="line">eyJzdWIiOiJsYXN6bG9fQVRfc3ByaW5ndW5pX0RPVF9jb20iLCJuYW1lIjoiTMOhc3psw7MgQ3NvbnRvcyIsImFkbWluIjp0cnVlfQ.</div><div class="line">XEfFHwFGK0daC80EFZBB5ki2CwrOb7clGRGlzchAD84</div></pre></td></tr></table></figure>
<p>JWT 令牌的第一部分是令牌的 header , 用于标识令牌的类型和对令牌进行签名的算法。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line"> <span class="attr">"alg"</span>: <span class="string">"HS256"</span>, <span class="attr">"typ"</span>: <span class="string">"JWT"</span></div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二部分是 JWT 令牌的 payload 或它的声明。这两者是有区别的。Payload 可以是任意一组数据, 它甚至可以是明文或其他 （嵌入 JWT）的数据。而声明则是一组标准的字段。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line"> <span class="attr">"sub"</span>: <span class="string">"laszlo_AT_springuni_DOT_com"</span>, <span class="attr">"name"</span>: <span class="string">"László Csontos"</span>, <span class="attr">"admin"</span>: <span class="literal">true</span></div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三部分是由算法产生的、由 JWT 的 header 表示的签名。</p>
<h4 id="创建和验证-JWT-令牌"><a href="#创建和验证-JWT-令牌" class="headerlink" title="创建和验证 JWT 令牌"></a>创建和验证 JWT 令牌</h4><p>有相当多的第三方库可用于操作 JWT 令牌。而在本文中, 我使用了 JJWT。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>采用 JwtTokenService 使 JWT 令牌从身份验证实例中创建, 并将 JWTs 解析回身份验证实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenServiceImpl</span> <span class="keyword">implements</span> <span class="title">JwtTokenService</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITIES = <span class="string">"authorities"</span>;  </div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">"ThisIsASecret"</span>;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createJwtToken</span><span class="params">(Authentication authentication, <span class="keyword">int</span> minutes)</span> </span>&#123;</div><div class="line">    Claims claims = Jwts.claims()</div><div class="line">        .setId(String.valueOf(IdentityGenerator.generate()))</div><div class="line">        .setSubject(authentication.getName())</div><div class="line">        .setExpiration(<span class="keyword">new</span> Date(currentTimeMillis() + minutes * <span class="number">60</span> * <span class="number">1000</span>))</div><div class="line">        .setIssuedAt(<span class="keyword">new</span> Date());</div><div class="line"> </div><div class="line">    String authorities = authentication.getAuthorities()</div><div class="line">        .stream()</div><div class="line">        .map(GrantedAuthority::getAuthority)</div><div class="line">        .map(String::toUpperCase)</div><div class="line">        .collect(Collectors.joining(<span class="string">","</span>));</div><div class="line"> </div><div class="line">    claims.put(AUTHORITIES, authorities);    </div><div class="line"> </div><div class="line"><span class="keyword">return</span> Jwts.builder()</div><div class="line">        .setClaims(claims)</div><div class="line">        .signWith(HS512, SECRET)</div><div class="line">        .compact();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">parseJwtToken</span><span class="params">(String jwtToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;    </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      Claims claims = Jwts.parser()</div><div class="line">            .setSigningKey(SECRET)</div><div class="line">            .parseClaimsJws(jwtToken)</div><div class="line">            .getBody();      </div><div class="line"><span class="keyword">return</span> JwtAuthenticationToken.of(claims);</div><div class="line">    &#125; <span class="keyword">catch</span> (ExpiredJwtException | SignatureException e) &#123;      </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(e.getMessage(), e);</div><div class="line">    &#125; <span class="keyword">catch</span> (UnsupportedJwtException | MalformedJwtException e) &#123;      </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(e.getMessage(), e);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;      </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(e.getMessage(), e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据实际的验证，parseClaimsJws () 会引发各种异常。在 parseJwtToken () 中, 引发的异常被转换回 AuthenticationExceptions。虽然 JwtAuthenticationEntryPoint 能将这些异常转换为各种 HTTP 的响应代码, 但它也只是重复 DefaultAuthenticationFailureHandler 来以 http 401 (未经授权) 响应。</p>
<h3 id="登录和身份验证过程"><a href="#登录和身份验证过程" class="headerlink" title="登录和身份验证过程"></a>登录和身份验证过程</h3><p>基本上, 认证过程有两个短语, 让后端将服务用于单页面 web 应用程序。</p>
<h4 id="登录时创建-JWT-令牌"><a href="#登录时创建-JWT-令牌" class="headerlink" title="登录时创建 JWT 令牌"></a>登录时创建 JWT 令牌</h4><p>第一次登录变完成启动, 且在这一过程中, 将创建一个 JWT 令牌并将其发送回客户端。这些是通过以下请求完成的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">POST /session</div><div class="line">&#123;   </div><div class="line">  "username": "laszlo_AT_sprimguni_DOT_com",</div><div class="line">   "password": "secret"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>成功登录后, 客户端会像往常一样向其他端点发送后续请求, 并在授权的 header 中提供本地缓存的 JWT 令牌。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Authorization: Bearer &lt;JWT token&gt;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/login_process_962x741_final.png" alt="img"></p>
<p>正如上面的步骤所讲, LoginFilter 开始进行登录过程。而Spring Security 的内置 UsernamePasswordAuthenticationFilter 被延长, 来让这种情况发生。这两者之间的唯一的区别是, UsernamePasswordAuthenticationFilter 使用表单参数来捕获用户名和密码, 相比之下, LoginFilter 将它们视做 JSON 对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.security.authentication.*;</div><div class="line"><span class="keyword">import</span> org.springframework.security.core.*;</div><div class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.*;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGIN_REQUEST_ATTRIBUTE = <span class="string">"login_request"</span>;</div><div class="line"> </div><div class="line">  ...</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(</span></span></div><div class="line">      HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> AuthenticationException &#123;    </div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      LoginRequest loginRequest =</div><div class="line">          objectMapper.readValue(request.getInputStream(), LoginRequest.class);</div><div class="line"> </div><div class="line">      request.setAttribute(LOGIN_REQUEST_ATTRIBUTE, loginRequest);      </div><div class="line"><span class="keyword">return</span> <span class="keyword">super</span>.attemptAuthentication(request, response);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;      </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(ioe.getMessage(), ioe);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      request.removeAttribute(LOGIN_REQUEST_ATTRIBUTE);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">obtainUsername</span><span class="params">(HttpServletRequest request)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> toLoginRequest(request).getUsername();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">obtainPassword</span><span class="params">(HttpServletRequest request)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> toLoginRequest(request).getPassword();</div><div class="line">  &#125;  </div><div class="line"><span class="function"><span class="keyword">private</span> LoginRequest <span class="title">toLoginRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;    <span class="keyword">return</span> (LoginRequest)request.getAttribute(LOGIN_REQUEST_ATTRIBUTE);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>处理登陆过程的结果将在之后分派给一个 AuthenticationSuccessHandler 和 AuthenticationFailureHandler。</p>
<p>两者都相当简单。DefaultAuthenticationSuccessHandler 调用 JwtTokenService 发出一个新的令牌, 然后将其发送回客户端。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_DAY_MINUTES = <span class="number">24</span> * <span class="number">60</span>;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> JwtTokenService jwtTokenService;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultAuthenticationSuccessHandler</span><span class="params">(</span></span></div><div class="line">      JwtTokenService jwtTokenService, ObjectMapper objectMapper) &#123;    </div><div class="line"><span class="keyword">this</span>.jwtTokenService = jwtTokenService;    </div><div class="line"><span class="keyword">this</span>.objectMapper = objectMapper;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(</span></span></div><div class="line">      HttpServletRequest request, HttpServletResponse response, Authentication authentication)      </div><div class="line"><span class="keyword">throws</span> IOException &#123;</div><div class="line"> </div><div class="line">    response.setContentType(APPLICATION_JSON_VALUE);</div><div class="line"> </div><div class="line">    String jwtToken = jwtTokenService.createJwtToken(authentication, ONE_DAY_MINUTES);</div><div class="line">    objectMapper.writeValue(response.getWriter(), jwtToken);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以下是它的对应, DefaultAuthenticationFailureHandler, 只是发送回一个 http 401 错误消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(DefaultAuthenticationFailureHandler.class);  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultAuthenticationFailureHandler</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;    </div><div class="line"><span class="keyword">this</span>.objectMapper = objectMapper;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(</span></span></div><div class="line">      HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)      </div><div class="line"><span class="keyword">throws</span> IOException &#123;</div><div class="line"> </div><div class="line">    LOGGER.warn(exception.getMessage());</div><div class="line"> </div><div class="line">    HttpStatus httpStatus = translateAuthenticationException(exception);</div><div class="line"> </div><div class="line">    response.setStatus(httpStatus.value());</div><div class="line">    response.setContentType(APPLICATION_JSON_VALUE);</div><div class="line"> </div><div class="line">    writeResponse(response.getWriter(), httpStatus, exception);</div><div class="line">  &#125;  </div><div class="line"><span class="function"><span class="keyword">protected</span> HttpStatus <span class="title">translateAuthenticationException</span><span class="params">(AuthenticationException exception)</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> UNAUTHORIZED;</div><div class="line">  &#125;  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeResponse</span><span class="params">(</span></span></div><div class="line">      Writer writer, HttpStatus httpStatus, AuthenticationException exception) <span class="keyword">throws</span> IOException &#123;</div><div class="line"> </div><div class="line">    RestErrorResponse restErrorResponse = RestErrorResponse.of(httpStatus, exception);</div><div class="line">    objectMapper.writeValue(writer, restErrorResponse);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="处理后续请求"><a href="#处理后续请求" class="headerlink" title="处理后续请求"></a>处理后续请求</h4><p>在客户端登陆后, 它将在本地缓存 JWT 令牌, 并在前面讨论的后续请求中发送反回。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/auth_process_792x741_final.png" alt="img"></p>
<p>对于每个请求, JwtAuthenticationFilter 通过 JwtTokenService 验证接收到的 JWT令牌。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(JwtAuthenticationFilter.class);  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORIZATION_HEADER = <span class="string">"Authorization"</span>;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN_PREFIX = <span class="string">"Bearer"</span>;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> JwtTokenService jwtTokenService;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">JwtAuthenticationFilter</span><span class="params">(JwtTokenService jwtTokenService)</span> </span>&#123;    </div><div class="line"><span class="keyword">this</span>.jwtTokenService = jwtTokenService;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">      FilterChain filterChain) <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"> </div><div class="line">    Authentication authentication = getAuthentication(request);    </div><div class="line"><span class="keyword">if</span> (authentication == <span class="keyword">null</span>) &#123;</div><div class="line">      SecurityContextHolder.clearContext();</div><div class="line">      filterChain.doFilter(request, response);     </div><div class="line"> <span class="keyword">return</span>;</div><div class="line">    &#125;    </div><div class="line"> </div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">      SecurityContextHolder.getContext().setAuthentication(authentication);</div><div class="line">      filterChain.doFilter(request, response);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      SecurityContextHolder.clearContext();</div><div class="line">    &#125;</div><div class="line">  &#125;  <span class="function"><span class="keyword">private</span> Authentication <span class="title">getAuthentication</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    String authorizationHeader = request.getHeader(AUTHORIZATION_HEADER);    <span class="keyword">if</span> (StringUtils.isEmpty(authorizationHeader)) &#123;</div><div class="line">      LOGGER.debug(<span class="string">"Authorization header is empty."</span>);      </div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;    <span class="keyword">if</span> (StringUtils.substringMatch(authorizationHeader, <span class="number">0</span>, TOKEN_PREFIX)) &#123;</div><div class="line">      LOGGER.debug(<span class="string">"Token prefix &#123;&#125; in Authorization header was not found."</span>, TOKEN_PREFIX);      </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    String jwtToken = authorizationHeader.substring(TOKEN_PREFIX.length() + <span class="number">1</span>);    <span class="keyword">try</span> &#123;      </div><div class="line">      <span class="keyword">return</span> jwtTokenService.parseJwtToken(jwtToken);</div><div class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line">      LOGGER.warn(e.getMessage());      </div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果令牌是有效的, 则会实例化 JwtAuthenticationToken, 并执行线程的 SecurityContext。而由于恢复的 JWT 令牌包含唯一的 ID 和经过身份验证的用户的权限, 因此无需与数据库联系以再次获取此信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITIES = <span class="string">"authorities"</span>; </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> userId;  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">JwtAuthenticationToken</span><span class="params">(<span class="keyword">long</span> userId, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;    </div><div class="line"><span class="keyword">super</span>(authorities);    </div><div class="line"><span class="keyword">this</span>.userId = userId;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;    </div><div class="line"><span class="keyword">return</span> userId;</div><div class="line">  &#125;  <span class="comment">/**   * Factory method for creating a new &#123;<span class="doctag">@code</span> &#123;<span class="doctag">@link</span> JwtAuthenticationToken&#125;&#125;.   * <span class="doctag">@param</span> claims JWT claims   * <span class="doctag">@return</span> a JwtAuthenticationToken   */</span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JwtAuthenticationToken <span class="title">of</span><span class="params">(Claims claims)</span> </span>&#123;    </div><div class="line"><span class="keyword">long</span> userId = Long.valueOf(claims.getSubject());</div><div class="line"> </div><div class="line">    Collection&lt;GrantedAuthority&gt; authorities =</div><div class="line">        Arrays.stream(String.valueOf(claims.get(AUTHORITIES)).split(<span class="string">","</span>))</div><div class="line">            .map(String::trim)</div><div class="line">            .map(String::toUpperCase)</div><div class="line">            .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</div><div class="line">            .collect(Collectors.toSet());</div><div class="line"> </div><div class="line">    JwtAuthenticationToken jwtAuthenticationToken = <span class="keyword">new</span> JwtAuthenticationToken(userId, authorities);</div><div class="line"> </div><div class="line">    Date now = <span class="keyword">new</span> Date();</div><div class="line">    Date expiration = claims.getExpiration();</div><div class="line">    Date notBefore = claims.getNotBefore();</div><div class="line">    jwtAuthenticationToken.setAuthenticated(now.after(notBefore) &amp;&amp; now.before(expiration));    <span class="keyword">return</span> jwtAuthenticationToken;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这之后, 它由安全框架决定是否允许或拒绝请求。</p>
<h3 id="Spring-Security-在-Java-EE-世界中有竞争者吗？"><a href="#Spring-Security-在-Java-EE-世界中有竞争者吗？" class="headerlink" title="Spring Security 在 Java EE 世界中有竞争者吗？"></a>Spring Security 在 Java EE 世界中有竞争者吗？</h3><p>虽然这不是这篇文章的主题, 但我想花一分钟的时间来谈谈。如果我不得不在一个 JAVA EE 应用程序中完成所有这些？Spring Security 真的是在 JAVA 中实现身份验证和授权的黄金标准吗？</p>
<h4 id="让我们做个小小的研究！"><a href="#让我们做个小小的研究！" class="headerlink" title="让我们做个小小的研究！"></a>让我们做个小小的研究！</h4><p>JAVA EE 8 指日可待，他将在 2017 年年底发布，我想看看它是否会是 Spring Security 一个强大的竞争者。我发现 JAVA EE 8 将提供 JSR-375 , 这应该会缓解 JAVA EE 应用程序的安全措施的发展。它的参考实施被称为 Soteira, 是一个相对新的 github 项目。那就是说, 现在的答案是真的没有这样的一个竞争者。</p>
<p>但这项研究是不完整的，并没有提到 Apache Shiro。虽然我从未使用过，但我听说这算是更为简单的 Spring Security。让它更 JWT 令牌 一起使用也不是不可能。从这个角度来看，Apache Shiro 是算 Spring Security 的一个的有可比性的替代品</p>
<h2 id="构建用户管理微服务（六）：添加并记住我使用持久JWT令牌的身份验证"><a href="#构建用户管理微服务（六）：添加并记住我使用持久JWT令牌的身份验证" class="headerlink" title="构建用户管理微服务（六）：添加并记住我使用持久JWT令牌的身份验证"></a>构建用户管理微服务（六）：添加并记住我使用持久JWT令牌的身份验证</h2><p>于用户名和密码的身份验证。如果你错过了这一点，我在这里注意到，JWT令牌是在成功登录后发出的，并验证后续请求。创造长寿的<a href="https://jwt.io/" target="_blank" rel="external">JWT</a>是不实际的，因为它们是独立的，没有办法撤销它们。如果令牌被盗，所有赌注都会关闭。因此，我想添加经典的<a href="http://docs.spring.io/spring-security/site/docs/current/reference/html/ns-config.html#ns-remember-me" target="_blank" rel="external">remember-me</a>风格认证与持久令牌。记住，我的令牌存储在Cookie中作为  <a href="https://jwt.io/" target="_blank" rel="external">JWT</a>作为第一道防线，但是它们也保留在数据库中，并且跟踪其生命周期。</p>
<p>这次我想从演示运行中的用户管理应用程序的工作原理开始，然后再深入细节。</p>
<h3 id="验证流程"><a href="#验证流程" class="headerlink" title="验证流程"></a><strong>验证流程</strong></h3><p>基本上，用户使用用户名/密码对进行身份验证会发生什么，他们可能会表示他们希望应用程序记住他们（持续会话）的意图。大多数时候，UI上还有一个复选框来实现。由于应用程序还没有开发UI，我们用<a href="https://curl.haxx.se/" target="_blank" rel="external">cURL</a>做一切  。</p>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a><strong>登录</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -D- -c cookies.txt -b cookies.txt \</div><div class="line">-XPOST http://localhost:5000/auth/login \</div><div class="line"><span class="_">-d</span> <span class="string">'&#123; "username":"test", "password": "test", "rememberMe": true &#125;'</span></div><div class="line"></div><div class="line">HTTP/1.1 200</div><div class="line">...</div><div class="line">Set-Cookie: remember-me=eyJhbGciOiJIUzUxMiJ9...;Max-Age=1209600;path=/;HttpOnly</div><div class="line">X-Set-Authorization-Bearer: eyJhbGciOiJIUzUxMiJ9...</div></pre></td></tr></table></figure>
<p>成功认证后，  <a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-rest/src/main/java/com/springuni/auth/security/PersistentJwtTokenBasedRememberMeServices.java" target="_blank" rel="external">PersistentJwtTokenBasedRememberMeServices</a>创建一个永久<a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/model/session/Session.java" target="_blank" rel="external">会话</a>，将其保存到数据库并将其转换为JWT令牌。它负责将此持久<em>会话</em>存储在客户端的一个cookie（<em>Set-Cookie</em>）上，并且还发送新创建的瞬时令牌。后者旨在在单页前端的使用寿命内使用，并使用非标准HTTP头（<em>X-Set-Authorization-Bearer</em>）发送。</p>
<p>当<em>rememberMe</em>标志为<em>false时</em>，只创建一个无状态的JWT令牌，并且完全绕过了remember-me基础架构。</p>
<h4 id="在应用程序运行时仅使用瞬态令牌"><a href="#在应用程序运行时仅使用瞬态令牌" class="headerlink" title="在应用程序运行时仅使用瞬态令牌"></a><strong>在应用程序运行时仅使用瞬态令牌</strong></h4><p>当应用程序在浏览器中打开时，它会在每个XHR请求的<em>授权</em>头文件中发送暂时的JWT令牌。然而，当应用程序重新加载时，暂时令牌将丢失。</p>
<p>为了简单起见，这里使用<em>GET / users / {id}</em>来演示正常的请求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">curl -D- -H <span class="string">'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9...'</span> \</div><div class="line">  -XGET http://localhost:5000/users/524201457797040</div><div class="line"></div><div class="line">HTTP/1.1 200</div><div class="line">...</div><div class="line">&#123;</div><div class="line">  <span class="string">"id"</span> : 524201457797040,</div><div class="line">  <span class="string">"screenName"</span> : <span class="string">"test"</span>,</div><div class="line">  <span class="string">"contactData"</span> : &#123;</div><div class="line">  <span class="string">"email"</span> : <span class="string">"test@springuni.com"</span>,</div><div class="line">  <span class="string">"addresses"</span> : [ ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"timezone"</span> : <span class="string">"AMERICA_LOS_ANGELES"</span>,</div><div class="line">  <span class="string">"locale"</span> : <span class="string">"en_US"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用瞬态令牌与持久性令牌结合使用"><a href="#使用瞬态令牌与持久性令牌结合使用" class="headerlink" title="使用瞬态令牌与持久性令牌结合使用"></a><strong>使用瞬态令牌与持久性令牌结合使用</strong></h4><p>当用户在第一种情况下选择了remember-me认证时，会发生这种情况。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">curl -D- -c cookies.txt -b cookies.txt \</div><div class="line">  -H <span class="string">'Authorization: Bearer  eyJhbGciOiJIUzUxMiJ9...'</span> \</div><div class="line">  -XGET http://localhost:5000/users/524201457797040</div><div class="line"></div><div class="line">HTTP/1.1 200</div><div class="line">...</div><div class="line">&#123;</div><div class="line">  <span class="string">"id"</span> : 524201457797040,</div><div class="line">  <span class="string">"screenName"</span> : <span class="string">"test"</span>,</div><div class="line">  <span class="string">"contactData"</span> : &#123;</div><div class="line">    <span class="string">"email"</span> : <span class="string">"test@springuni.com"</span>,</div><div class="line">    <span class="string">"addresses"</span> : [ ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"timezone"</span> : <span class="string">"AMERICA_LOS_ANGELES"</span>,</div><div class="line">  <span class="string">"locale"</span> : <span class="string">"en_US"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，暂时的JWT令牌和一个有效的remember-me cookie都是同时发送的。只要单页应用程序正在运行，就使用暂时令牌。</p>
<h4 id="初始化时使用持久令牌"><a href="#初始化时使用持久令牌" class="headerlink" title="初始化时使用持久令牌"></a>初始化时使用持久令牌</h4><p>当前端在浏览器中加载时，它不知道是否存在任何暂时的JWT令牌。所有它可以做的是测试持久的remember-me cookie尝试执行一个正常的请求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">curl -D- -c cookies.txt -b cookies.txt \</div><div class="line">  -XGET http://localhost:5000/users/524201457797040</div><div class="line"></div><div class="line">HTTP/1.1 200</div><div class="line">...</div><div class="line">Set-Cookie: remember-me=eyJhbGciOiJIUzUxMiJ9...;Max-Age=1209600;path=/;HttpOnly</div><div class="line">X-Set-Authorization-Bearer: eyJhbGciOiJIUzUxMiJ9...</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="string">"id"</span> : 524201457797040,</div><div class="line">  <span class="string">"screenName"</span> : <span class="string">"test"</span>,</div><div class="line">  <span class="string">"contactData"</span> : &#123;</div><div class="line">    <span class="string">"email"</span> : <span class="string">"test@springuni.com"</span>,</div><div class="line">    <span class="string">"addresses"</span> : [ ]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"timezone"</span> : <span class="string">"AMERICA_LOS_ANGELES"</span>,</div><div class="line">  <span class="string">"locale"</span> : <span class="string">"en_US"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果持久性令牌（cookie）仍然有效，则会在上次使用数据库时在数据库中进行更新，并在浏览器中更新。还执行另一个重要步骤，用户将自动重新进行身份验证，而无需提供用户名/密码对，并创建新的临时令牌。从现在开始，只要运行该应用程序，该应用程序将使用暂时令牌。</p>
<h4 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h4><p>尽管注销看起来很简单，有一些细节我们需要注意。前端仍然发送无状态的JWT令牌，只要用户进行身份验证，否则UI上的注销按钮甚至不会被提供，后台也不会知道如何注销。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -D- -c cookies.txt -b cookies.txt \</div><div class="line">  -H <span class="string">'Authorization: Bearer eyJhbGciOiJIUzUxMiJ9...'</span> \</div><div class="line">  -XPOST http://localhost:5000/auth/<span class="built_in">logout</span></div><div class="line"></div><div class="line">HTTP/1.1 302 </div><div class="line">Set-Cookie: remember-me=;Max-Age=0;path=/</div><div class="line">Location: http://localhost:5000/login?<span class="built_in">logout</span></div></pre></td></tr></table></figure>
<p>在此请求之后，记住我的cookie被重置，并且数据库中的持久会话被标记为已删除。</p>
<h3 id="实现记住我的身份验证"><a href="#实现记住我的身份验证" class="headerlink" title="实现记住我的身份验证"></a>实现记住我的身份验证</h3><p>正如我在摘要中提到的，我们将使用持久性令牌来增加安全性，以便能够在任何时候撤销它们。有三个步骤，我们需要执行，以使适当的记住我处理与Spring Security。</p>
<h4 id="实现-UserDetailsService"><a href="#实现-UserDetailsService" class="headerlink" title="实现  UserDetailsService"></a>实现  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/core/userdetails/UserDetailsService.html" target="_blank" rel="external">UserDetailsService</a></h4><p>在第一篇文章中，我决定使用DDD开发模型，因此它不能依赖于任何框架特定的类。实际上，它甚至不依赖于任何第三方框架或图书馆。大多数教程通常直接实现<em>UserDetailsService</em>，并且业务逻辑和用于构建应用程序的框架之间没有额外的层。</p>
<p><a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/service/UserService.java" target="_blank" rel="external">UserServices</a>在第二部分很久以前被添加到该项目中，因此我们的任务非常简单，因为现在我们需要的是一个框架特定的组件，它将<em>UserDetailsService</em>的职责委托给现有的逻辑。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingUserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DelegatingUserService</span><span class="params">(UserService userService)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.userService = userService;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</div><div class="line">    Long userId = Long.valueOf(username);</div><div class="line">    UsernameNotFoundException usernameNotFoundException = <span class="keyword">new</span> UsernameNotFoundException(username);</div><div class="line">    <span class="keyword">return</span> userService.findUser(userId)</div><div class="line">        .map(DelegatingUser::<span class="keyword">new</span>)</div><div class="line">        .orElseThrow(() -&gt; usernameNotFoundException);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只是围绕<em>UserService的</em>一个简单的包装器，最终将返回的<a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/model/user/User.java" target="_blank" rel="external">User</a>模型对象转换为框架特定的<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/core/userdetails/UserDetails.html" target="_blank" rel="external">UserDetails</a>实例。除此之外，在这个项目中，我们不直接使用用户的登录名（电子邮件地址或屏幕名称）。相反，他们的用户的身份证遍及各地。</p>
<h4 id="实现-PersistentTokenRepository"><a href="#实现-PersistentTokenRepository" class="headerlink" title="实现  PersistentTokenRepository"></a>实现  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/PersistentTokenRepository.html" target="_blank" rel="external">PersistentTokenRepository</a></h4><p>幸运的是，我们在添加适当的<em>PersistentTokenRepository</em>实现方面同样容易，因为域模型已经包含<a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/service/SessionService.java" target="_blank" rel="external">SessionService</a>和<a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-model/src/main/java/com/springuni/auth/domain/model/session/Session.java" target="_blank" rel="external">Session</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingPersistentTokenRepository</span> <span class="keyword">implements</span> <span class="title">PersistentTokenRepository</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(DelegatingPersistentTokenRepository.class);</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SessionService sessionService;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DelegatingPersistentTokenRepository</span><span class="params">(SessionService sessionService)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sessionService = sessionService;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNewToken</span><span class="params">(PersistentRememberMeToken token)</span> </span>&#123;</div><div class="line">    Long sessionId = Long.valueOf(token.getSeries());</div><div class="line">    Long userId = Long.valueOf(token.getUsername());</div><div class="line">    sessionService.createSession(sessionId, userId, token.getTokenValue());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateToken</span><span class="params">(String series, String tokenValue, Date lastUsed)</span> </span>&#123;</div><div class="line">    Long sessionId = Long.valueOf(series);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      sessionService.useSession(sessionId, tokenValue, toLocalDateTime(lastUsed));</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchSessionException e) &#123;</div><div class="line">      LOGGER.warn(<span class="string">"Session &#123;&#125; doesn't exists."</span>, sessionId);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> PersistentRememberMeToken <span class="title">getTokenForSeries</span><span class="params">(String seriesId)</span> </span>&#123;</div><div class="line">    Long sessionId = Long.valueOf(seriesId);</div><div class="line">    <span class="keyword">return</span> sessionService</div><div class="line">        .findSession(sessionId)</div><div class="line">        .map(<span class="keyword">this</span>::toPersistentRememberMeToken)</div><div class="line">        .orElse(<span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUserTokens</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">    Long userId = Long.valueOf(username);</div><div class="line">    sessionService.logoutUser(userId);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> PersistentRememberMeToken <span class="title">toPersistentRememberMeToken</span><span class="params">(Session session)</span> </span>&#123;</div><div class="line">    String username = String.valueOf(session.getUserId());</div><div class="line">    String series = String.valueOf(session.getId());</div><div class="line">    LocalDateTime lastUsedAt =</div><div class="line">        Optional.ofNullable(session.getLastUsedAt()).orElseGet(session::getIssuedAt);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersistentRememberMeToken(</div><div class="line">        username, series, session.getToken(), toDate(lastUsedAt));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>情况与<em>UserDetailsService</em>大致相同，包装器会在<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/PersistentRememberMeToken.html" target="_blank" rel="external">PersistentRememberMeToken</a>和<em>Session</em>之间进行转换  。唯一需要特别注意的是<em>PersistentRememberMeToken中</em>的日期字段。在会话中，我分离了两个日期字段（<em>即已发布的</em>和<em>lastUsedAt</em>），后者在用户首次使用remember-me令牌的帮助下登录时获取第一个值。因此有可能它是空的，而且是什么时候使用<em>publishedAt</em>的值。</p>
<h4 id="实现-RememberMeServices"><a href="#实现-RememberMeServices" class="headerlink" title="实现  RememberMeServices"></a>实现  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/RememberMeServices.html" target="_blank" rel="external">RememberMeServices</a></h4><p>在这一点上，我们重新使用<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/PersistentTokenBasedRememberMeServices.html" target="_blank" rel="external">PersistentTokenBasedRememberMeServices</a>并为手头的任务进行自定义，它取决于<em>UserDetailsService</em>和<em>PersistentTokenRepository，</em>而这些已经被考虑到了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentJwtTokenBasedRememberMeServices</span> <span class="keyword">extends</span></span></div><div class="line">    <span class="title">PersistentTokenBasedRememberMeServices</span> &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(PersistentJwtTokenBasedRememberMeServices.class);</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_TOKEN_LENGTH = <span class="number">16</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PersistentJwtTokenBasedRememberMeServices</span><span class="params">(</span></span></div><div class="line">      String key, UserDetailsService userDetailsService,</div><div class="line">      PersistentTokenRepository tokenRepository) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>(key, userDetailsService, tokenRepository);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="keyword">protected</span> String[] decodeCookie(String cookieValue) <span class="keyword">throws</span> InvalidCookieException &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Claims claims = Jwts.parser()</div><div class="line">          .setSigningKey(getKey())</div><div class="line">          .parseClaimsJws(cookieValue)</div><div class="line">          .getBody();</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; claims.getId(), claims.getSubject() &#125;;</div><div class="line">    &#125; <span class="keyword">catch</span> (JwtException e) &#123;</div><div class="line">      LOGGER.warn(e.getMessage());</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidCookieException(e.getMessage());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">encodeCookie</span><span class="params">(String[] cookieTokens)</span> </span>&#123;</div><div class="line">    Claims claims = Jwts.claims()</div><div class="line">        .setId(cookieTokens[<span class="number">0</span>])</div><div class="line">        .setSubject(cookieTokens[<span class="number">1</span>])</div><div class="line">        .setExpiration(<span class="keyword">new</span> Date(currentTimeMillis() + getTokenValiditySeconds() * <span class="number">1000L</span>))</div><div class="line">        .setIssuedAt(<span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Jwts.builder()</div><div class="line">        .setClaims(claims)</div><div class="line">        .signWith(HS512, getKey())</div><div class="line">        .compact();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">generateSeriesData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> seriesId = IdentityGenerator.generate();</div><div class="line">    <span class="keyword">return</span> String.valueOf(seriesId);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">generateTokenData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> RandomUtil.ints(DEFAULT_TOKEN_LENGTH)</div><div class="line">        .mapToObj(i -&gt; String.format(<span class="string">"%04x"</span>, i))</div><div class="line">        .collect(Collectors.joining());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">rememberMeRequested</span><span class="params">(HttpServletRequest request, String parameter)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Optional.ofNullable((Boolean)request.getAttribute(REMEMBER_ME_ATTRIBUTE)).orElse(<span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个特定的实现使用JWT令牌作为在cookies中存储记住我的令牌的物化形式。Spring Security的默认格式也可以很好，但JWT增加了一个额外的安全层。默认实现没有签名，每个请求最终都是数据库中的一个查询，用于检查remember-me令牌。</p>
<p>JWT防止这种情况，尽管解析它并验证其签名需要更多的CPU周期。</p>
<h4 id="将所有这些组合在一起"><a href="#将所有这些组合在一起" class="headerlink" title="将所有这些组合在一起"></a>将所有这些组合在一起</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthSecurityConfiguration</span> <span class="keyword">extends</span> <span class="title">SecurityConfigurationSupport</span> </span>&#123;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">(UserService userService)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DelegatingUserService(userService);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">(SessionService sessionService)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DelegatingPersistentTokenRepository(sessionService);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> RememberMeAuthenticationFilter <span class="title">rememberMeAuthenticationFilter</span><span class="params">(</span></span></div><div class="line">      AuthenticationManager authenticationManager, RememberMeServices rememberMeServices,</div><div class="line">      AuthenticationSuccessHandler authenticationSuccessHandler) &#123;</div><div class="line"></div><div class="line">    RememberMeAuthenticationFilter rememberMeAuthenticationFilter =</div><div class="line">        <span class="keyword">new</span> ProceedingRememberMeAuthenticationFilter(authenticationManager, rememberMeServices);</div><div class="line"></div><div class="line">    rememberMeAuthenticationFilter.setAuthenticationSuccessHandler(authenticationSuccessHandler);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> rememberMeAuthenticationFilter;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> RememberMeServices <span class="title">rememberMeServices</span><span class="params">(</span></span></div><div class="line">      UserDetailsService userDetailsService, PersistentTokenRepository persistentTokenRepository) &#123;</div><div class="line"></div><div class="line">    String secretKey = getRememberMeTokenSecretKey().orElseThrow(IllegalStateException::<span class="keyword">new</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersistentJwtTokenBasedRememberMeServices(</div><div class="line">        secretKey, userDetailsService, persistentTokenRepository);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRememberMe</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    UserDetailsService userDetailsService = lookup(<span class="string">"userDetailsService"</span>);</div><div class="line">    PersistentTokenRepository persistentTokenRepository = lookup(<span class="string">"persistentTokenRepository"</span>);</div><div class="line">    AbstractRememberMeServices rememberMeServices = lookup(<span class="string">"rememberMeServices"</span>);</div><div class="line">    RememberMeAuthenticationFilter rememberMeAuthenticationFilter =</div><div class="line">        lookup(<span class="string">"rememberMeAuthenticationFilter"</span>);</div><div class="line"></div><div class="line">    http.rememberMe()</div><div class="line">        .userDetailsService(userDetailsService)</div><div class="line">        .tokenRepository(persistentTokenRepository)</div><div class="line">        .rememberMeServices(rememberMeServices)</div><div class="line">        .key(rememberMeServices.getKey())</div><div class="line">        .and()</div><div class="line">        .logout()</div><div class="line">        .logoutUrl(LOGOUT_ENDPOINT)</div><div class="line">        .and()</div><div class="line">        .addFilterAt(rememberMeAuthenticationFilter, RememberMeAuthenticationFilter.class);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>令人感到神奇的结果在最后部分是显而易见的。基本上，这是关于使用Spring Security注册组件，并启用记住我的服务。有趣的是，我们需要一个在<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/AbstractRememberMeServices.html" target="_blank" rel="external">AbstractRememberMeServices</a>  内部使用的键（一个字符串）。 <em>AbstractRememberMeServices</em>  也是此设置中的默认注销处理程序，并在注销时将数据库中的令牌标记为已删除。</p>
<h3 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h3><h4 id="在POST请求的正文中接收用户凭据和remember-me标志作为JSON数据"><a href="#在POST请求的正文中接收用户凭据和remember-me标志作为JSON数据" class="headerlink" title="在POST请求的正文中接收用户凭据和remember-me标志作为JSON数据"></a>在POST请求的正文中接收用户凭据和remember-me标志作为JSON数据</h4><p>默认情况下，  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.html" target="_blank" rel="external">UsernamePasswordAuthenticationFilter</a>会将凭据作为POST请求的HTTP请求参数，但是我们希望发送JSON文档。进一步下去，  <a href="http://docs.spring.io/autorepo/docs/spring-security/current/apidocs/org/springframework/security/web/authentication/rememberme/AbstractRememberMeServices.html" target="_blank" rel="external">AbstractRememberMeServices</a>还会将remember-me标志的存在检查为请求参数。为了解决这个问题，  <a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-rest/src/main/java/com/springuni/auth/security/LoginFilter.java" target="_blank" rel="external">LoginFilter</a>  将remember-me标志设置为请求属性，并将决定委托给  <a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/PersistentTokenBasedRememberMeServices.html" target="_blank" rel="external">PersistentTokenBasedRememberMeServices，</a>  如果记住我的身份验证需要启动或不启动。</p>
<h4 id="使用RememberMeServices处理登录成功"><a href="#使用RememberMeServices处理登录成功" class="headerlink" title="使用RememberMeServices处理登录成功"></a>使用<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/RememberMeServices.html" target="_blank" rel="external">RememberMeServices</a>处理登录成功</h4><p><a href="https://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/rememberme/RememberMeAuthenticationFilter.html" target="_blank" rel="external">RememberMeAuthenticationFilter</a>不会继续进入过滤器链中的下一个过滤器，但如果设置了<a href="http://docs.spring.io/spring-security/site/docs/current/apidocs/org/springframework/security/web/authentication/AuthenticationSuccessHandler.html" target="_blank" rel="external">AuthenticationSuccessHandler</a>，它将停止其执行  。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProceedingRememberMeAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">RememberMeAuthenticationFilter</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</div><div class="line">      LoggerFactory.getLogger(ProceedingRememberMeAuthenticationFilter.class);</div><div class="line"></div><div class="line">  <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProceedingRememberMeAuthenticationFilter</span><span class="params">(</span></span></div><div class="line">      AuthenticationManager authenticationManager, RememberMeServices rememberMeServices) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">super</span>(authenticationManager, rememberMeServices);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationSuccessHandler</span><span class="params">(AuthenticationSuccessHandler successHandler)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.successHandler = successHandler;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSuccessfulAuthentication</span><span class="params">(</span></span></div><div class="line">      HttpServletRequest request, HttpServletResponse response, Authentication authResult) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (successHandler == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      successHandler.onAuthenticationSuccess(request, response, authResult);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      LOGGER.error(e.getMessage(), e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/springuni/springuni-particles/blob/master/springuni-auth-rest/src/main/java/com/springuni/auth/security/ProceedingRememberMeAuthenticationFilter.java" target="_blank" rel="external">ProceedingRememberMeAuthenticationFilter</a>  是原始过滤器的自定义版本，当认证成功时，该过滤器不会停止。</p>
<h2 id="构建用户管理微服务器（七）：将以上组合在一起"><a href="#构建用户管理微服务器（七）：将以上组合在一起" class="headerlink" title="构建用户管理微服务器（七）：将以上组合在一起"></a>构建用户管理微服务器（七）：将以上组合在一起</h2><p>从绝对零开始，用户管理应用程序的构建块已被开发出来。在最后一篇中，我想向您展示如何组装这些部分，以使应用程序正常工作。一些功能仍然缺少，我仍然在第一个版本上工作，使其功能完整，但现在基本上是可以使用的。</p>
<h3 id="创建一个独立的可执行模块"><a href="#创建一个独立的可执行模块" class="headerlink" title="创建一个独立的可执行模块"></a>创建一个独立的可执行模块</h3><p>今天建立基于Spring的应用程序最简单的方法是去Spring Boot。毫无疑问。由于一个原因，它正在获得大量采用，这就是使您的生活比使用裸弹更容易。之前我曾在各种情况下与Spring合作过，并在Servlet容器和完全成熟的Java EE应用服务器之上构建了应用程序，但能够将可执行软件包中的所有内容都打包成开发成本。</p>
<p>总而言之，第一步是为应用程序创建一个新的模块，它是<a href="https://github.com/springuni/springuni-particles/tree/master/springuni-auth-boot" target="_blank" rel="external">springuni-auth-boot</a>。</p>
<h4 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springuni-particles<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springuni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springuni-auth-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringUni Auth User Boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Example module for assembling user authentication modules<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springuni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springuni-auth-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.springuni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springuni-auth-user-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://github.com/spring-projects/spring-boot/issues/6254#issuecomment-229600830 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>模块<a href="https://github.com/springuni/springuni-particles/tree/master/springuni-auth-rest" target="_blank" rel="external">springuni-auth-rest</a>提供用于用户管理的REST端点，它还将<a href="https://github.com/springuni/springuni-particles/tree/master/springuni-auth-model" target="_blank" rel="external">springuni-auth模型</a>作为传递依赖。<a href="https://github.com/springuni/springuni-particles/tree/master/springuni-auth-user-jpa" target="_blank" rel="external">springuni-auth-user-jpa</a>负责持久化的用户数据，并且将来可以替换其他持久性机制。</p>
<p>第三个依赖是MySQL连接器，也可以根据需要进行替换。</p>
<p>从<a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>的角度来说，以下两个依赖关系是重要的：<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web" target="_blank" rel="external">spring-boot-starter-web</a>和<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat" target="_blank" rel="external">spring-boot-starter-tomcat</a>。为了能够创建一个Web应用程序，我们需要它们。</p>
<h3 id="应用程序的入口点"><a href="#应用程序的入口点" class="headerlink" title="应用程序的入口点"></a>应用程序的入口点</h3><p>在没有Spring Boot的情况下执行此步骤将会非常费力（必须在web.xml中注册上下文监听器并为应用程序设置容器）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.springuni.auth.domain.model.AuthJpaRepositoryConfiguration;</div><div class="line"><span class="keyword">import</span> com.springuni.auth.domain.service.AuthServiceConfiguration;</div><div class="line"><span class="keyword">import</span> com.springuni.auth.rest.AuthRestConfiguration;</div><div class="line"><span class="keyword">import</span> com.springuni.auth.security.AuthSecurityConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Import</span>(&#123;</div><div class="line">    AuthJpaRepositoryConfiguration.class,</div><div class="line">    AuthServiceConfiguration.class,</div><div class="line">    AuthRestConfiguration.class,</div><div class="line">    AuthSecurityConfiguration.class</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    SpringApplication.run(Application.class, args);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这几乎是一个虚拟模块，所有重要的举措都归结为不得不导入一些基于Java的Spring配置类。</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>Spring Boot附带了一个非常有用的Maven插件，可以将整个项目重新打包成一个可执行的überJAR。它也能够在本地启动项目。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn -pl springuni-auth-boot spring-boot:run</div></pre></td></tr></table></figure>
<h3 id="测试驱动用户管理应用程序"><a href="#测试驱动用户管理应用程序" class="headerlink" title="测试驱动用户管理应用程序"></a>测试驱动用户管理应用程序</h3><p>第一部分定义了所有可用的REST端点，现在已经有一些现实世界的用例来测试它们。</p>
<h4 id="注册新用户"><a href="#注册新用户" class="headerlink" title="注册新用户"></a>注册新用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -XPOST http://localhost:5000/users <span class="_">-d</span> \</div><div class="line"><span class="string">'&#123;</span></div><div class="line"> "screenName":"test2",</div><div class="line"> "contactData": &#123;</div><div class="line">   "email": "test2@springuni.com"</div><div class="line"> &#125;,</div><div class="line"> "password": "test"</div><div class="line">&#125;'</div><div class="line">HTTP/1.1 200</div></pre></td></tr></table></figure>
<h3 id="首次登录尝试"><a href="#首次登录尝试" class="headerlink" title="首次登录尝试"></a>首次登录尝试</h3><p>此时首次登录尝试不可避免地会失败，因为用户帐号尚未确认</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -D- -XPOST http://localhost:5000/auth/login <span class="_">-d</span> <span class="string">'&#123; "username":"test5", "password": "test" &#125;'</span> </div><div class="line">HTTP/1.1 401 </div><div class="line">&#123;</div><div class="line"> <span class="string">"statusCode"</span> : 401,</div><div class="line"> <span class="string">"reasonPhrase"</span> : <span class="string">"Unauthorized"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="确认帐号"><a href="#确认帐号" class="headerlink" title="确认帐号"></a>确认帐号</h3><p>一般情况下，最终用户将收到一封电子邮件中的确认链接，点击该链接会启动以下请求。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -D- -XPUT http://localhost:5000/users/620366184447377/77<span class="built_in">fc</span>990b-210c-4132-ac93-ec50522ba06f</div><div class="line">HTTP/1.1 200</div></pre></td></tr></table></figure>
<h3 id="第二次登录尝试"><a href="#第二次登录尝试" class="headerlink" title="第二次登录尝试"></a>第二次登录尝试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -D- -XPOST http://localhost:5000/auth/login <span class="_">-d</span> <span class="string">'&#123; "username":"test5", "password": "test" &#125;'</span></div><div class="line">HTTP/1.1 200</div><div class="line">X-Set-Authorization-Bearer: eyJhbGciOiJIUzUxMiJ9.eyJqdGkiOiI2MjA1OTkwNjIwMTQ4ODEiLCJzdWIiOiI2MjAzNjYxODQ0NDczNzciLCJleHAiOjE0OTcxMDQ3OTAsImlhdCI6MTQ5NzAxODM5MCwiYXV0aG9yaXRpZXMiOiI<span class="keyword">if</span>Q.U-GfabsdYidg-Y9eSp2lyyh7DxxaI-zaTOZISlCf3RjKQUTmu0-vm6DH80xYWE69SmoGgm07qiYM32JBd9d5oQ</div></pre></td></tr></table></figure>
<p>用户的电子邮件地址确认后，即可登录。</p>
<h2 id="下一步是什么？"><a href="#下一步是什么？" class="headerlink" title="下一步是什么？"></a>下一步是什么？</h2><p>正如我之前提到的，这个应用程序有很多工作要做。其中还有一些基本功能，也没有UI。您可以按照以下步骤进行：  <a href="https://github.com/springuni/springuni-particles/projects/1" target="_blank" rel="external">https://github.com/springuni/springuni-particles/projects/1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;构建用户管理微服务&quot;&gt;&lt;a href=&quot;#构建用户管理微服务&quot; class=&quot;headerlink&quot; title=&quot;构建用户管理微服务&quot;&gt;&lt;/a&gt;构建用户管理微服务&lt;/h1&gt;&lt;p&gt;翻译自:&lt;a href=&quot;https://springuni.com/user-management-microservice-part-1/&quot;&gt;https://springuni.com/user-management-microservice-part-1/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="https://muyinchen.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="https://muyinchen.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>谷歌开发工具文档</title>
    <link href="https://muyinchen.github.io/2017/06/14/%E8%B0%B7%E6%AD%8C%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/"/>
    <id>https://muyinchen.github.io/2017/06/14/谷歌开发工具文档/</id>
    <published>2017-06-14T08:50:19.257Z</published>
    <updated>2017-06-14T08:49:35.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谷歌开发工具文档"><a href="#谷歌开发工具文档" class="headerlink" title="谷歌开发工具文档"></a>谷歌开发工具文档</h1><a id="more"></a>
<h1 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h1><p>让您的工作区包含适用于多设备网页的优秀编辑器、调试功能和构建工具。</p>
<p>时间是保持高效的重要因素。您在开发环境中花费的时间最多。通过包含强大、可扩展的编辑器以及强有力的调试与开发工具，让自己为成功做好准备。</p>
<ul>
<li><a href="https://developers.google.com/web/tools/setup/setup-editor" target="_blank" rel="external">设置您的编辑器</a></li>
<li><a href="https://developers.google.com/web/tools/setup/setup-workflow" target="_blank" rel="external">使用 DevTools 的工作区设置持久化</a></li>
<li><a href="https://developers.google.com/web/tools/setup/setup-preprocessors" target="_blank" rel="external">设置 CSS 与 JS 预处理器</a></li>
<li><a href="https://developers.google.com/web/tools/setup/setup-shortcuts" target="_blank" rel="external">设置命令行快捷键</a></li>
<li><a href="https://developers.google.com/web/tools/setup/setup-extensions" target="_blank" rel="external">设置浏览器扩展程序</a></li>
<li><a href="https://developers.google.com/web/tools/setup/setup-buildtools" target="_blank" rel="external">设置构建工具</a></li>
</ul>
<p>完成后，继续详细了解 <a href="https://developers.google.com/web/tools/chrome-devtools" target="_blank" rel="external">Chrome 开发者工具 (DevTools)</a>，它是 Chrome 内置的工具，可以帮助您开发、测试和调试页面。</p>
<h1 id="设置您的编辑器"><a href="#设置您的编辑器" class="headerlink" title="设置您的编辑器"></a>设置您的编辑器</h1><p>代码编辑器是您的主要开发工具；可以使用代码编辑器编写和保存代码行。了解代码编辑器的快捷键并安装主要插件可以更快地编写出更好的代码。</p>
<h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>选择一个能够让您自定义快捷键并拥有许多插件的编辑器，以便帮助您编写更好的代码。</li>
<li>使用软件包管理器，更轻松地发现、安装和更新插件。</li>
<li>安装可以让您在开发期间提高效率的插件；请从此指南中的推荐开始。</li>
</ul>
<h2 id="安装-Sublime-文本编辑器"><a href="#安装-Sublime-文本编辑器" class="headerlink" title="安装 Sublime 文本编辑器"></a>安装 Sublime 文本编辑器</h2><p><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime</a> 是一款非常优秀的编辑器，具有强大的功能，让编写代码充满乐趣。 您可以安装软件包管理器，轻松地安装插件和添加新功能。</p>
<p>Sublime Text 当前有两种下载选项，<a href="http://www.sublimetext.com/2" target="_blank" rel="external">版本 2</a> 或<a href="http://www.sublimetext.com/3" target="_blank" rel="external">版本 3</a>。版本 3 非常稳定，让您可以访问 Sublime Text 2 不支持的软件包，不过您可能会发现版本 2 更加可靠。</p>
<p>注：Rob Dodson 有关如何了解和爱上 Sublime 的<a href="http://robdodson.me/blog/2012/06/23/sublime-text-2-tips-and-shortcuts/" target="_blank" rel="external">博文</a>是充分利用编辑器一个非常好的参考。这些概念与所有文本编辑器相关，而不仅仅与 Sublime 相关。</p>
<h2 id="为什么要使用软件包管理器？"><a href="#为什么要使用软件包管理器？" class="headerlink" title="为什么要使用软件包管理器？"></a>为什么要使用软件包管理器？</h2><p>使用软件包管理器，您可以轻松地查找、安装和更新软件包与插件。</p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/package_control.png" alt="Sublime Text 编辑器的 Package Control 屏幕截图"></p>
<p>您可以按照这些说明为 Sublime 安装 Package Manager <a href="https://packagecontrol.io/installation" target="_blank" rel="external">https://packagecontrol.io/installation</a>。</p>
<p>您只需执行一次操作，之后请参见下方我们推荐的插件列表。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>插件可以帮助您提高效率。您必须退回去使用其他工具执行的任务是什么？</p>
<p>Linting（检查代码潜在问题）- 有一个插件可以执行这项任务。显示一些更改未被提交 - 有一些插件可以解决这个问题。与其他工具集成（如 GitHub），许多插件都可以实现这个目标。</p>
<p>利用软件包管理器，您可以轻松地查找、安装和更新插件：</p>
<ol>
<li>在 Sublime Text 编辑器中，打开您的软件包管理器 (ctrl+shift+p)。</li>
<li>输入“Install Package”。</li>
<li>输入您正在查找的插件名称（或者浏览所有插件）。</li>
</ol>
<p>查看 <a href="https://packagecontrol.io/browse" target="_blank" rel="external">Sublime Text 插件趋势列表</a>。 这里是一些我们喜爱并推荐您安装的一些插件，它们能够帮助您加快开发速度：</p>
<h3 id="Autoprefixer"><a href="#Autoprefixer" class="headerlink" title="Autoprefixer"></a>Autoprefixer</h3><p>如果想要快速地将供应商前缀添加到 CSS，您可以使用这款方便的插件。</p>
<p>编写 CSS，忽略供应商前缀，当您想要添加它们时，按 <code>ctrl+shift+p</code>，然后键入 <code>Autoprefix CSS</code>。</p>
<p><a href="https://developers.google.com/web/tools/setup/setup-buildtools" target="_blank" rel="external">我们会介绍如何在构建流程中实现这项操作的自动化</a>，这样，您的 CSS 就会始终保持简洁，您无需记得要按 <code>ctrl+shift+p</code>。</p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/sublime-autoprefixer.gif" alt="Sublime Autoprefixer 插件示例"></p>
<h3 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h3><p>从调色板中选取颜色，然后通过按 <code>ctrl+shift+c</code> 将其添加至您的 CSS。</p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/sublime-color-picker.png" alt="Sublime ColorPicker 插件"></p>
<h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><p>为您的文本编辑器添加一些有用的键盘快捷键和代码段。您可以在 <a href="http://emmet.io/" target="_blank" rel="external">Emmet.io</a> 上观看视频，了解它的用途（个人比较喜欢的是“Toggle Comment”命令）。</p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/emmet-io-example.gif" alt="Emmet.io 插件的演示"></p>
<h3 id="HTML-CSS-JS-修饰"><a href="#HTML-CSS-JS-修饰" class="headerlink" title="HTML-CSS-JS 修饰"></a>HTML-CSS-JS 修饰</h3><p>此扩展程序为您提供了可以设置 HTML、CSS 和 JS 格式的命令。无论何时保存文件，您都可以修饰文件。</p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/sublime-prettify.gif" alt="Sublime Prettify 插件的 GIF"></p>
<h3 id="Git-Gutter"><a href="#Git-Gutter" class="headerlink" title="Git Gutter"></a>Git Gutter</h3><p>文件有更改时，可以在 gutter 中添加标记。</p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/sublime-git-gutter.png" alt="Sublime Git Gutter 插件的屏幕截图"></p>
<h3 id="Gutter-Color"><a href="#Gutter-Color" class="headerlink" title="Gutter Color"></a>Gutter Color</h3><p>注：仅适用于 Sublime Text 3</p>
<p>Gutter Color 可以在 CSS 旁为您显示小色样。</p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/sublime-gutter-color.png" alt="Sublime Gutter Color 的屏幕截图"></p>
<p>此插件需要 ImageMagick。如果使用 Mac OS X，我们建议您尝试 <a href="http://cactuslab.com/imagemagick/" target="_blank" rel="external">CactusLabs</a> 的安装程序（您可能需要重启计算机才能使其工作）。</p>
<h1 id="使用-DevTools-的工作区设置持久化"><a href="#使用-DevTools-的工作区设置持久化" class="headerlink" title="使用 DevTools 的工作区设置持久化"></a>使用 DevTools 的工作区设置持久化</h1><p>在 Chrome DevTools 中设置永久制作，以便立即查看更改和将这些更改保存到磁盘中。</p>
<p>利用 Chrome DevTools，您可以更改网页上的元素和样式并立即查看更改。默认情况下，刷新浏览器后更改消失，除非您将其手动复制并粘贴到外部编辑器中。</p>
<p>通过工作区，您可以将这些更改保存到磁盘中，而不用离开 Chrome DevTools。将本地网络服务器提供的资源映射到磁盘上的文件中，并实时查看对这些文件的更改。</p>
<h3 id="TL-DR-1"><a href="#TL-DR-1" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>请勿将这些更改手动复制到本地文件中。使用工作区将在 DevTools 中进行的更改保存到您的本地资源中。</li>
<li>将您的本地文件暂存到浏览器中。将文件映射到网址。</li>
<li>设置好永久工作区后，在 Elements 面板中进行的样式更改将自动保留；DOM 更改则不会。在 Sources 元素面板中保留元素更改。</li>
</ul>
<h2 id="将本地源文件添加到工作区"><a href="#将本地源文件添加到工作区" class="headerlink" title="将本地源文件添加到工作区"></a>将本地源文件添加到工作区</h2><p>要将本地文件夹的源文件设置为可以在 Sources 面板中修改，请执行以下操作：</p>
<ol>
<li>右键点击左侧面板。</li>
<li>选择 <strong>Add Folder to Workspace</strong>。</li>
<li>选择您想要映射的本地文件夹的位置。</li>
<li>点击 <strong>Allow</strong>，授予 Chrome 访问该文件夹的权限。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/setup/imgs/addfolder.png" alt="将文件夹添加到工作区"></p>
<p>通常，本地文件夹包含网站的原始源文件，用于在服务器上填充网站。如果您不希望通过工作区更改这些原始文件，请复制文件夹并将其指定为工作区文件夹。</p>
<h2 id="暂存保留的更改"><a href="#暂存保留的更改" class="headerlink" title="暂存保留的更改"></a>暂存保留的更改</h2><p>您已将本地文件夹映射到工作区中，但浏览器仍在提供网络文件夹内容。要将永久更改自动暂存到浏览器中，请将文件夹中的本地文件映射到网址：</p>
<ol>
<li>右键点击或者在按住 Ctrl 的同时点击 Sources 左侧面板中的文件。</li>
<li>选择 <strong>Map to File System Resource</strong>。</li>
<li>选择永久工作区中的本地文件。</li>
<li>在 Chrome 中重新加载页面。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/setup/imgs/maptoresource.png" alt="将文件映射到网址"></p>
<p>之后，Chrome 会加载映射的网址，同时显示工作区内容，而不是网络内容。这样，您可以直接在本地文件中操作，而不必在 Chrome 与外部编辑器之间重复切换。</p>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>尽管工作区功能强大，您仍应当注意一些限制。</p>
<ul>
<li>只有 Elements 面板中的样式更改会保留；对 DOM 的更改不会保留。</li>
<li>仅可以保存在外部 CSS 文件中定义的样式。对 <code>element.style</code> 或内嵌样式的更改不会保留。（如果您有内嵌样式，可以在 Sources 面板中对它们进行更改。）</li>
<li>如果您有映射到本地文件的 CSS 资源，在 Elements 面板中进行的样式更改无需显式保存即会立即保留 - Ctrl + S 或者 Cmd + S (Mac)。</li>
<li>如果您正在从远程服务器（而不是本地服务器）映射文件，Chrome 会从远程服务器重新加载页面。您的更改仍将保存到磁盘，并且如果您在工作区中继续编辑，这些更改将被重新应用。</li>
<li>您必须在浏览器中使用映射文件的完整路径。要查看暂存版本，您的索引文件在网址中必须包含 .html。</li>
</ul>
<h2 id="本地文件管理"><a href="#本地文件管理" class="headerlink" title="本地文件管理"></a>本地文件管理</h2><p>除了修改现有文件外，您还可以在为工作区使用的本地映射目录中添加和删除文件。</p>
<h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><p>要添加文件，请执行以下操作：</p>
<ol>
<li>右键点击 Sources 左侧窗格中的文件夹。</li>
<li>选择 <strong>New File</strong>。</li>
<li>为新文件键入一个包含扩展名的名称（例如 <code>newscripts.js</code>）并按 <strong>Enter</strong>；文件将添加到本地文件夹中。</li>
</ol>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>要删除文件，请执行以下操作：</p>
<ol>
<li>右键点击 Sources 左侧窗格中的文件。</li>
<li>选择 <strong>Delete</strong> 并点击 <strong>Yes</strong> 确认。</li>
</ol>
<h3 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h3><p>对文件进行重大更改前，复制原始文件进行备份非常有用。</p>
<p>要复制文件，请进行以下操作：</p>
<ol>
<li>右键点击 Sources 左侧窗格中的文件。</li>
<li>选择 <strong>Make a Copy…</strong>。</li>
<li>为文件键入一个包含扩展名的名称（例如 <code>mystyles-org.css</code>）并按 <strong>Enter</strong>。</li>
</ol>
<h3 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h3><p>直接在工作区中创建或删除文件时，Sources 目录将自动刷新以显示文件更改。要随时强制刷新，请右键点击文件夹并选择 <strong>Refresh</strong>。</p>
<p>如果您在外部编辑器中更改当前正在打开的文件，并且希望更改显示在 DevTools 中，刷新操作也非常有用。DevTools 通常可以自动捕捉此类更改，但是如果您希望确保万无一失，只需按上文所述刷新文件夹。</p>
<h3 id="搜索文件或文本"><a href="#搜索文件或文本" class="headerlink" title="搜索文件或文本"></a>搜索文件或文本</h3><p>要在 DevTools 中搜索已加载的文件，请按 Ctrl + O 或者 Cmd + O (Mac) 打开搜索对话框。您仍然可以在工作区中进行此操作，不过，搜索范围将扩展到 Workspace 文件夹中的远程已加载文件和本地文件。</p>
<p>要在多个文件中搜索某个字符串，请执行以下操作：</p>
<ol>
<li>打开搜索窗口：点击 <strong>Show Drawer</strong> 按钮 <img src="https://developers.google.com/web/tools/setup/imgs/show_drawer_button.png" alt="Show Drawer"> ，然后点击 <strong>Search</strong>；或者按 Ctrl + Shift + F 或 Cmd + Opt + F (Mac)。</li>
<li>将字符串键入搜索字段并按 <strong>Enter</strong>。</li>
<li>如果字符串是一个正则表达式或者需要不区分大小写，请点击相应的框。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/setup/imgs/searchacross.png" alt="跨文件搜索字符串"></p>
<p>搜索结果将显示在 Console 抽屉中并按文件名列示，同时指示匹配数量。使用<strong>展开</strong> <img src="https://developers.google.com/web/tools/setup/imgs/expand_button.png" alt="展开">和<strong>折叠</strong> <img src="https://developers.google.com/web/tools/setup/imgs/collapse_button.png" alt="折叠">箭头可以展开或折叠给定文件的结果。</p>
<h1 id="设置-CSS-与-JS-预处理器"><a href="#设置-CSS-与-JS-预处理器" class="headerlink" title="设置 CSS 与 JS 预处理器"></a>设置 CSS 与 JS 预处理器</h1><p>正确使用 CSS 预处理器（如 Sass、JS 预处理器和转译器）可以极大地提高您的开发速度。了解如何设置。</p>
<h3 id="TL-DR-2"><a href="#TL-DR-2" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>预处理器让您可以使用浏览器原生不支持的 CSS 和 JavaScript 中的功能，如 CSS 变量。</li>
<li>如果您使用预处理器，可以使用 Source Maps 将原始源文件映射到渲染的输出。</li>
<li>确保您的网络服务器能够提供 Source Maps。</li>
<li>使用支持的预处理器自动生成 Source Maps。</li>
</ul>
<h2 id="什么是预处理器？"><a href="#什么是预处理器？" class="headerlink" title="什么是预处理器？"></a>什么是预处理器？</h2><p>预处理器可以获取任意的源文件，并将其转换成浏览器可以识别的内容。</p>
<p>输出为 CSS 时，可以使用预处理器添加以下功能（如果不使用预处理器，则不会存在这些功能）：CSS 变量、嵌套，等等。这个类别中显著的例子是 <a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a>、<a href="http://lesscss.org/" target="_blank" rel="external">Less</a> 和 <a href="https://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a>。</p>
<p>输出为 JavaScript 时，它们可以从完全不同的语言转换（编译），或者将超集或新语言标准转换（转译）为当前的标准。这个类别中显著的例子是 <a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript</a> 和 ES6（通过 <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>）。</p>
<h2 id="调试和修改预处理的内容"><a href="#调试和修改预处理的内容" class="headerlink" title="调试和修改预处理的内容"></a>调试和修改预处理的内容</h2><p>只要您在浏览器中且使用 DevTools <a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-styles" target="_blank" rel="external">修改您的 CSS</a> 或调试 JavaScript，就会出现一个非常明显的问题：您正在浏览的内容没有反映源，而且不会真的帮助您解决问题。</p>
<p>为了解决问题，最现代的预处理器支持一种名称为 <strong>Source Maps</strong> 的功能。</p>
<h3 id="什么是-Source-Maps？"><a href="#什么是-Source-Maps？" class="headerlink" title="什么是 Source Maps？"></a>什么是 Source Maps？</h3><p>源映射是一种基于 JSON 的映射格式，可以在缩小的文件与其源之间建立关系。如果您为生产而构建，缩小和合并 JavaScript 文件时，还会生成包含原始文件相关信息的源映射。</p>
<h3 id="Source-Maps-的工作方式"><a href="#Source-Maps-的工作方式" class="headerlink" title="Source Maps 的工作方式"></a>Source Maps 的工作方式</h3><p>对于生成的每个 CSS 文件，除了编译的 CSS，CSS 预处理器还会生成源映射文件 (.map)。源映射文件是 JSON 文件，会在每个生成的 CSS 声明与源文件相应行之间定义映射。</p>
<p>每个 CSS 文件均包含指定源映射文件网址的注解，嵌入文件最后一行上的特殊注释中：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*# sourceMappingURL=&lt;url&gt; */</span></div></pre></td></tr></table></figure>
<p>例如，假设存在一个名为 <strong>styles.scss</strong> 的 Sass 源文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">%$textSize: 26px;</div><div class="line">$fontColor: red;</div><div class="line">$bgColor: whitesmoke;</div><div class="line">h2 &#123;</div><div class="line">    font-size: $textSize;</div><div class="line">    color: $fontColor;</div><div class="line">    background: $bgColor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Sass 会生成 CSS 文件 <strong>styles.css</strong>，包含 sourceMappingURL 注解：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h2</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">26px</span>;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">background-color</span>: whitesmoke;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*# sourceMappingURL=styles.css.map */</span></div></pre></td></tr></table></figure>
<p>下方为一个源映射文件示例：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"3"</span>,</div><div class="line">  <span class="attr">"mappings"</span>:<span class="string">"AAKA,EAAG;EACC,SAAS,EANF,IAAI;EAOX,KAAK"</span></div><div class="line">  <span class="string">"sources"</span>: [<span class="string">"sass/styles.scss"</span>],</div><div class="line">  <span class="attr">"file"</span>: <span class="string">"styles.css"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="验证网络服务器可以提供-Source-Maps"><a href="#验证网络服务器可以提供-Source-Maps" class="headerlink" title="验证网络服务器可以提供 Source Maps"></a>验证网络服务器可以提供 Source Maps</h2><p>一些网络服务器（如 Google App 引擎）需要适用于提供的每个文件类型的显式配置。这种情况下，需要为您的 Source Maps 提供 MIME 类型的 <code>application/json</code>，但实际上 Chrome 可以<a href="https://stackoverflow.com/questions/19911929/what-mime-type-should-i-use-for-source-map-files" target="_blank" rel="external">接受任何内容类型</a>，例如 <code>application/octet-stream</code>。</p>
<h3 id="奖励：通过自定义标题进行源映射"><a href="#奖励：通过自定义标题进行源映射" class="headerlink" title="奖励：通过自定义标题进行源映射"></a>奖励：通过自定义标题进行源映射</h3><p>如果您不希望文件中存在其他注释，请使用缩小的 JavaScript 文件上的 HTTP 标题字段告知 DevTools 在哪里可以找到源映射。这需要配置或自定义您的网络服务器，不在本文档的介绍范围内。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">X-SourceMap: <span class="regexp">/path/</span>to/file.js.map</div></pre></td></tr></table></figure>
<p>像注释一样，它也可以告知 DevTools 和其他工具在哪里可以查找与 JavaScript 文件关联的源映射。此标题也可以解决以不支持单行注释的语言引用 Source Maps 的问题。</p>
<h2 id="支持的预处理器"><a href="#支持的预处理器" class="headerlink" title="支持的预处理器"></a>支持的预处理器</h2><p>几乎任何编译到 JavaScript 的语言都可以立即生成 Source Maps，包括 Coffeescript、TypeScript、JSX 等。您也可以在 Node 内的服务器侧、通过 Sass、Less 等的 CSS 中使用 Source Maps，使用可以为您提供节点式需求的 browserify 以及会提高整洁效果的缩小工具（如 uglify-js）生成多级别 Source Maps。</p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><table>
<thead>
<tr>
<th>编译器</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://coffeescript.org/#source-maps" target="_blank" rel="external">CoffeeScript</a></td>
<td><code>$ coffee -c square.coffee -m</code></td>
<td>编译器只需要 -m (–map) 标记即可输出源映射，也会为输出文件添加 sourceMapURL 注释指令。</td>
</tr>
<tr>
<td><a href="http://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a></td>
<td><code>$ tsc -sourcemap square.ts</code></td>
<td>-sourcemap 标记会生成映射并添加注释指令。</td>
</tr>
<tr>
<td><a href="https://github.com/google/traceur-compiler/wiki/SourceMaps" target="_blank" rel="external">Traceur</a></td>
<td>`$ traceur –source-maps=[file</td>
<td>inline]`</td>
<td>对于 <code>--source-maps=file</code>，每个以 <code>.js</code> 结尾的输出文件都会有一个以 <code>.map</code> 结尾的源映射文件；对于<code>source-maps=&#39;inline&#39;</code>，每个以 <code>.js</code> 结尾的输出文件结尾的注释都会包含编码在 <code>data:</code> 网址中的源映射。</td>
</tr>
<tr>
<td><a href="https://babeljs.io/docs/usage/cli/#compile-with-source-maps" target="_blank" rel="external">Babel</a></td>
<td><code>$ babel script.js --out-file script-compiled.js --source-maps</code></td>
<td>使用 –source-maps 或 -s 生成 Source Maps。使用 <code>--source-maps inline</code> 生成内嵌 Source Maps。</td>
</tr>
<tr>
<td><a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">UglifyJS</a></td>
<td><code>$ uglifyjs file.js -o file.min.js --source-map file.min.js.map</code></td>
<td>这是生成“file.js”源映射所需的非常基本的命令。这也会为输出文件添加注释指令。</td>
</tr>
</tbody>
</table>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><table>
<thead>
<tr>
<th>编译器</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a></td>
<td><code>$ scss --sourcemap styles.scss styles.css</code></td>
<td>支持 Sass 3.3 及以上的 Sass 形式的 Source Maps。</td>
</tr>
<tr>
<td><a href="http://lesscss.org/" target="_blank" rel="external">Less</a></td>
<td><code>$ lessc styles.less &gt; styles.css --source-map styles.css.map</code></td>
<td>在 1.5.0 中实现。请参阅<a href="https://github.com/less/less.js/issues/1050#issuecomment-25566463" target="_blank" rel="external">问题 #1050</a> 了解详细信息和使用模式。</td>
</tr>
<tr>
<td><a href="https://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a></td>
<td><code>$ stylus --sourcemaps styles.style styles.css</code></td>
<td>这会将源映射作为 base64 编码的字符串直接嵌入到输出文件中。</td>
</tr>
<tr>
<td><a href="http://compass-style.org/" target="_blank" rel="external">Compass</a></td>
<td><code>$ sass --compass --sourcemap --watch scss:css</code></td>
<td>或者，您也可以将 <code>sourcemap: true</code> 添加到 config.rb 文件中。</td>
</tr>
<tr>
<td><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">Autoprefixer</a></td>
<td>``</td>
<td>请点击链接查看如何使用此编译器以及兼用输入源映射。</td>
</tr>
</tbody>
</table>
<h2 id="Source-Maps-与-DevTools"><a href="#Source-Maps-与-DevTools" class="headerlink" title="Source Maps 与 DevTools"></a>Source Maps 与 DevTools</h2><p>现在，您已经正确地设置了 Source Maps，DevTools 已内置对基于 CSS 和 JS 的 Source Maps 的支持，这一点可能会让您很高兴。</p>
<h3 id="修改预处理的-CSS"><a href="#修改预处理的-CSS" class="headerlink" title="修改预处理的 CSS"></a>修改预处理的 CSS</h3><p>请转至<a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-styles" target="_blank" rel="external">修改 Sass、Less 或 Stylus</a>，详细了解如何在 DevTools 内直接修改和刷新链接至源映射的样式。</p>
<h3 id="修改和调试预处理的-JavaScript"><a href="#修改和调试预处理的-JavaScript" class="headerlink" title="修改和调试预处理的 JavaScript"></a>修改和调试预处理的 JavaScript</h3><p>请在<a href="https://developers.google.com/web/tools/chrome-devtools/debug/readability/source-maps" target="_blank" rel="external">将预处理代码映射到源代码</a>中详细了解如何在 Sources 面板中调试放大、编译或转译的 JavaScript。</p>
<h1 id="设置命令行快捷方式"><a href="#设置命令行快捷方式" class="headerlink" title="设置命令行快捷方式"></a>设置命令行快捷方式</h1><p>为您反复使用的命令行任务设置快捷方式。如果您发现自己在命令行中反复键入相同的内容，这将为您带来很大方便。</p>
<h3 id="TL-DR-3"><a href="#TL-DR-3" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>掌控命令行；创建易于记住和可快速键入的别名。</li>
<li>尝试保存、分享 Github 点文件，并同步您的命令行快捷方式。</li>
</ul>
<h2 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a>如何设置</h2><p>创建命令行快捷方式最简单的方法就是将常见命令的别名添加至 bashrc 文件。 在 Mac 或 Linux 上：</p>
<ol>
<li><p>从命令行任意位置，键入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open <span class="_">-a</span> <span class="string">'Sublime Text'</span> ~/.bashrc</div></pre></td></tr></table></figure>
</li>
<li><p>添加新别名，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> master=<span class="string">'git checkout master'</span></div></pre></td></tr></table></figure>
</li>
<li><p>任何时候当您位于带 git repo 的目录时，都可以运行命令 <code>master</code>，它将为您检查主分支。</p>
</li>
</ol>
<p>注：请参阅<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682057(v=vs.85" target="_blank" rel="external">设置 Windows 别名</a>.aspx)的说明。</p>
<h2 id="我们推荐的快捷方式"><a href="#我们推荐的快捷方式" class="headerlink" title="我们推荐的快捷方式"></a>我们推荐的快捷方式</h2><p>您可能会发现以下几个快捷方式比较有用。</p>
<table>
<thead>
<tr>
<th>命令和别名</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>打开您的编辑器</td>
<td><code>alias st=&#39;open -a &quot;Sublime Text&quot;&#39;</code></td>
</tr>
<tr>
<td>启动服务器</td>
<td><code>alias server=&quot;python -m SimpleHTTPServer&quot;</code></td>
</tr>
<tr>
<td>转到您通常在其中工作的目录</td>
<td><code>alias p=&quot;cd ~/projects&quot;</code></td>
</tr>
</tbody>
</table>
<h2 id="保存、分享和同步您的快捷方式"><a href="#保存、分享和同步您的快捷方式" class="headerlink" title="保存、分享和同步您的快捷方式"></a>保存、分享和同步您的快捷方式</h2><p>在 Github 上保存您的快捷方式和点文件。主要好处是可以在各个设备之间分享快捷方式，而且始终可以备份快捷方式。</p>
<p>Github 还创建了一个<a href="https://dotfiles.github.io/" target="_blank" rel="external">点文件专用页面</a>，Chrome 团队的许多人都复制了 <a href="https://github.com/mathiasbynens/dotfiles" target="_blank" rel="external">Mathias Bynens 的点文件</a>。</p>
<h1 id="设置浏览器扩展程序"><a href="#设置浏览器扩展程序" class="headerlink" title="设置浏览器扩展程序"></a>设置浏览器扩展程序</h1><p>每个桌面浏览器都自带一套开发者工具，能够直接使用，您可以将浏览器的扩展程序或插件扩展和添加至这些工具。</p>
<p>下面是两个 Chrome 扩展程序，它们具有一些有用的功能，可以帮助您调试设计。</p>
<h2 id="Emmet-Re-View"><a href="#Emmet-Re-View" class="headerlink" title="Emmet Re:View"></a>Emmet Re:View</h2><p>Emmet Re:View 可以让您轻松查看网站在您每次进行媒体查询时的外观，以及同步所有页面的滚动。 您可以<a href="http://re-view.emmet.io/" target="_blank" rel="external">在它们的网站上</a>观看演示。</p>
<p><a href="https://chrome.google.com/webstore/detail/emmet-review/epejoicbhllgiimigokgjdoijnpaphdp" target="_blank" rel="external">在 Chrome 网上应用店下载</a></p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/emmet-review-extension.png" alt="Emmet Review 扩展程序的屏幕截图"></p>
<h2 id="What-Font"><a href="#What-Font" class="headerlink" title="What Font?"></a>What Font?</h2><p>我们经常使用的最后一个扩展程序是 <em>What Font?</em>。此 Chrome 扩展程序会向您说明页面当前使用的字体名称。 这真的会给调试任何网络字体问题带来极大的便利。</p>
<p><a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm" target="_blank" rel="external">在 Chrome 网上应用店下载</a></p>
<p><img src="https://developers.google.com/web/tools/setup/imgs/what-font-extension.png" alt="What Font Chrome 扩展程序的屏幕截图"></p>
<h1 id="设置构建工具"><a href="#设置构建工具" class="headerlink" title="设置构建工具"></a>设置构建工具</h1><p>从头开始构建您的多设备网站。了解如何使用一套构建流程工具加快开发速度和创建快速加载的网站。每个网站均应有一个开发版本和一个生产版本。</p>
<p>开发版本具有构成网站的所有 HTML、CSS、JS 和图像文件，且格式清爽，便于您处理。</p>
<p>生产版本将提取并缩小这些文件，然后对这些文件（如图像）加以串连/合并和优化。</p>
<p>网络开发者必须同时考虑很多事情，构建步骤就是一开始要处理的最重要也是最棘手的事情之一。 您必须弄清楚所有需要自动化的任务，例如： 图像压缩、CSS 缩小、JavaScript 串连、响应测试、单元测试，不一而足。</p>
<p>按照本指南了解构建工作流的最佳方法，从而确保您创建的网站从开始构建之时即遵循了所有最佳做法。</p>
<h3 id="TL-DR-4"><a href="#TL-DR-4" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>您的构建流程工具必须针对性能进行优化；它们应能够自动缩小和串连 JavaScript、CSS、HTML 和图像。</li>
<li>使用 LiveReload 等工具，以使开发流程更顺畅。</li>
</ul>
<p>开始编码之前，需要考虑如何优化和构建网站的生产版本。 从头开始设置此工作流可以避免项目结束时出现任何糟糕的意外，而且您可以将工具添加到工作流中为您执行单调枯燥的任务，从而加快开发速度。</p>
<h2 id="什么是构建流程？"><a href="#什么是构建流程？" class="headerlink" title="什么是构建流程？"></a>什么是构建流程？</h2><p>构建流程是一组针对项目文件运行的任务，主要是在开发期间编译和测试代码，以及用于创建网站开发版本。构建流程不应是一组在开发工作流结束时运行的任务。</p>
<p>实现构建流程最热门的工具是 <a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a> 和 <a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>，二者都是命令行工具。</p>
<p>如果您对这两款工具都没有使用经验，请使用 Gulp，我们在 <a href="https://developers.google.com/web/tools/starter-kit/" target="_blank" rel="external">Web Starter Kit</a> 中就是使用它，因此建议您也使用它。</p>
<p>很多工具都具有 GUI，而且可能更容易掌握，但不是很灵活。</p>
<table>
<thead>
<tr>
<th>支持的平台和工具名称</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>OS X / Windows</td>
<td><a href="http://alphapixels.com/prepros/" target="_blank" rel="external">Prepros</a></td>
</tr>
<tr>
<td>OS X</td>
<td><a href="https://incident57.com/codekit/" target="_blank" rel="external">CodeKit</a></td>
</tr>
<tr>
<td>OS X</td>
<td><a href="http://hammerformac.com/" target="_blank" rel="external">HammerForMac</a></td>
</tr>
</tbody>
</table>
<h2 id="构建流程中应执行哪些任务？"><a href="#构建流程中应执行哪些任务？" class="headerlink" title="构建流程中应执行哪些任务？"></a>构建流程中应执行哪些任务？</h2><p>在下文中，我们将介绍在构建流程中应执行的最常见任务，以及在使用 Grunt 和 Gulp 时我们建议执行的任务。</p>
<p>这需要执行大量试错工作，以按照您希望的方式完成一切设置，如果您不熟悉构建流程，这可能会令您感到气馁。</p>
<p>要获取一个好的构建流程示例，请查阅<a href="https://developers.google.com/web/fundamentals/getting-started/web-starter-kit/" target="_blank" rel="external">Web Starter Kit 入门指南</a>，该指南详细介绍了如何使用 Web Starter Kit，并解释了 Gulp 文件中每个命令的作用。您可以将此示例作为快速设置方式，然后根据需要加以更改。</p>
<p>如果您想要创建自己的构建流程，但又不熟悉 Gulp 和 Grunt，此快速入门指南将是您了解如何安装和运行您的首个构建流程的最佳途径：</p>
<ul>
<li><a href="http://gruntjs.com/getting-started" target="_blank" rel="external">Grunt 入门指南</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md#getting-started" target="_blank" rel="external">Gulp 入门指南</a></li>
</ul>
<h3 id="使用串连和缩小功能以构建更快速的网站"><a href="#使用串连和缩小功能以构建更快速的网站" class="headerlink" title="使用串连和缩小功能以构建更快速的网站"></a>使用串连和缩小功能以构建更快速的网站</h3><p>对于不熟悉串连和缩小这两个术语的开发者，串连就是指将多个文件合并在一起，例如将多个文件复制粘贴到一个文件中。我们这样做的原因是它更为有效，因为浏览器只需获取一个文件，而不是很多小文件。</p>
<p>缩小是指提取文件并减少总字符数、但不更改代码工作方式的过程。 删除注释或提取一个长变量名称并缩小该名称就是一个很好的例子。 这样可以减小文件大小，从而加快下载速度。</p>
<p>对于缩小，使用以下插件：</p>
<table>
<thead>
<tr>
<th>文件类型</th>
<th>Gulp</th>
<th>Grunt</th>
</tr>
</thead>
<tbody>
<tr>
<td>CSS</td>
<td><a href="https://github.com/ben-eb/gulp-csso" target="_blank" rel="external">gulp-csso</a></td>
<td><a href="https://github.com/gruntjs/grunt-contrib-cssmin" target="_blank" rel="external">grunt-contrib-cssmin</a></td>
</tr>
<tr>
<td>JS</td>
<td><a href="https://github.com/terinjokes/gulp-uglify/" target="_blank" rel="external">gulp-uglify</a></td>
<td><a href="https://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="external">grunt-contrib-uglify</a></td>
</tr>
<tr>
<td>HTML</td>
<td><a href="https://www.npmjs.com/package/gulp-minify-html" target="_blank" rel="external">gulp-minify-html</a></td>
<td><a href="https://github.com/gruntjs/grunt-contrib-htmlmin" target="_blank" rel="external">grunt-contrib-htmlmin</a></td>
</tr>
</tbody>
</table>
<p>对于串连，使用以下插件：</p>
<table>
<thead>
<tr>
<th>文件类型</th>
<th>Gulp</th>
<th>Grunt</th>
</tr>
</thead>
<tbody>
<tr>
<td>CSS (Sass)</td>
<td><a href="https://github.com/dlmanning/gulp-sass" target="_blank" rel="external">gulp-sass</a> 或 <a href="https://github.com/jonkemp/gulp-useref" target="_blank" rel="external">gulp-useref</a></td>
<td><a href="https://github.com/gruntjs/grunt-contrib-sass" target="_blank" rel="external">grunt-contrib-sass</a> 或 <a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a></td>
</tr>
<tr>
<td>JS</td>
<td><a href="https://github.com/jonkemp/gulp-useref" target="_blank" rel="external">gulp-useref</a></td>
<td><a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a> 或 <a href="https://github.com/fatso83/grunt-codekit" target="_blank" rel="external">grunt-codekit</a></td>
</tr>
</tbody>
</table>
<p><strong>注</strong>：您可以通过利用“导入”功能来使用 Sass（<a href="https://github.com/google/web-starter-kit/blob/master/app/styles/main.scss" target="_blank" rel="external">请参见 Web Starter Kit 中的示例</a>）。</p>
<h3 id="优化图像"><a href="#优化图像" class="headerlink" title="优化图像"></a>优化图像</h3><p>图像优化是帮助加快网站速度的一个重要步骤；在不损害图像质量的情况下缩小图片的幅度会让您大吃一惊． 元数据会从图像中删除，因为浏览器不需要元数据即可显示图像，例如有关拍摄照片所用相机的信息。</p>
<p>对于图像优化，您可以使用以下模块。</p>
<table>
<thead>
<tr>
<th>Gulp 和 Grunt</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a></td>
<td><a href="https://github.com/gruntjs/grunt-contrib-imagemin" target="_blank" rel="external">grunt-contrib-imagemin</a></td>
</tr>
</tbody>
</table>
<h3 id="别因供应商前缀而出纰漏"><a href="#别因供应商前缀而出纰漏" class="headerlink" title="别因供应商前缀而出纰漏"></a>别因供应商前缀而出纰漏</h3><p>为您使用的 CSS 包含所有供应商前缀通常是有点单调的任务。 使用前缀自动补全工具自动添加需要包含的前缀：</p>
<table>
<thead>
<tr>
<th>Gulp 和 Grunt</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/sindresorhus/gulp-autoprefixer" target="_blank" rel="external">gulp-autoprefixer</a></td>
<td><a href="https://github.com/nDmitry/grunt-autoprefixer" target="_blank" rel="external">grunt-autoprefixer</a></td>
</tr>
</tbody>
</table>
<p><strong>注</strong><br>如果您喜欢，您可以添加 <a href="https://developers.google.com/web/tools/setup/setup-editor#autoprefixer" target="_blank" rel="external">Sublime 软件包来执行前缀自动补全工作</a>。</p>
<h3 id="切勿使文本编辑器处于实时重新加载状态"><a href="#切勿使文本编辑器处于实时重新加载状态" class="headerlink" title="切勿使文本编辑器处于实时重新加载状态"></a>切勿使文本编辑器处于实时重新加载状态</h3><p>实时重新加载会在您每次做出更改后在浏览器中更新您的网站。只要使用一次，就再也离不开它了。</p>
<p>Web Starter Kit 使用 browser-sync 提供实时重新加载支持。</p>
<table>
<thead>
<tr>
<th>Gulp 和 Grunt</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.browsersync.io/docs/gulp/" target="_blank" rel="external">browser-sync</a></td>
<td><a href="https://github.com/gruntjs/grunt-contrib-connect" target="_blank" rel="external">grunt-contrib-connect</a> 和 <a href="https://github.com/gruntjs/grunt-contrib-watch" target="_blank" rel="external">grunt-contrib-watch</a></td>
</tr>
</tbody>
</table>
<p>注：如果您喜欢实时重新加载这一想法，但不想有构建流程，请参阅 <a href="http://www.html5rocks.com/en/tutorials/tooling/synchronized-cross-device-testing/" target="_blank" rel="external">Addy Osmani 撰写的有关 HTML5Rocks 的文章</a>，其中介绍了各种替代方案（有些是免费的，有些是商业的）。</p>
<h1 id="Chrome-开发者工具"><a href="#Chrome-开发者工具" class="headerlink" title="Chrome 开发者工具"></a>Chrome 开发者工具</h1><p>Chrome 开发者工具是一套内置于Google Chrome中的Web开发和调试工具，可用来对网站进行迭代、调试和分析。</p>
<p><strong>Dogfood:</strong> 寻找最新版本的Chrome 开发者工具, <a href="https://www.google.com/intl/en/chrome/browser/canary.html" target="_blank" rel="external">Chrome Canary</a> 总是有最新的DevTools.</p>
<h2 id="打开Chrome-开发者工具"><a href="#打开Chrome-开发者工具" class="headerlink" title="打开Chrome 开发者工具"></a>打开Chrome 开发者工具</h2><ul>
<li>在Chrome菜单中选择 <strong>更多工具</strong> &gt; <strong>开发者工具</strong></li>
<li>在页面元素上右键点击，选择 “检查”</li>
<li>使用 <a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/shortcuts" target="_blank" rel="external">快捷键 </a>Ctrl+Shift+I (Windows) 或 Cmd+Opt+I (Mac)</li>
</ul>
<h2 id="了解面板"><a href="#了解面板" class="headerlink" title="了解面板"></a>了解面板</h2><h3 id="设备模式"><a href="#设备模式" class="headerlink" title="设备模式"></a>设备模式</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/device-mode.png" alt="Device Mode"></p>
<p>使用设备模式构建完全响应式，移动优先的网络体验。</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/" target="_blank" rel="external">Device Mode</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/emulate-mobile-viewports" target="_blank" rel="external">Test Responsive and Device-specific Viewports</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/device-input-and-sensors" target="_blank" rel="external">Emulate Sensors: Geolocation &amp; Accelerometer</a></li>
</ul>
<h3 id="元素面板"><a href="#元素面板" class="headerlink" title="元素面板"></a>元素面板</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/panels/elements.png" alt="Elements Panel">使用元素面板可以自由的操作DOM和CSS来迭代布局和设计页面.</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/" target="_blank" rel="external">检查和调整页面</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-styles" target="_blank" rel="external">编辑样式</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-dom" target="_blank" rel="external">编辑DOM</a></li>
</ul>
<h3 id="控制台面板"><a href="#控制台面板" class="headerlink" title="控制台面板"></a>控制台面板</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/panels/console.png" alt="Console Panel"></p>
<p>在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为 shell在页面上与JavaScript交互。</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/console/" target="_blank" rel="external">使用控制台面板</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/console/" target="_blank" rel="external">命令行交互</a></li>
</ul>
<h3 id="源代码面板"><a href="#源代码面板" class="headerlink" title="源代码面板"></a>源代码面板</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/panels/sources.png" alt="Sources Panel"></p>
<p>在源代码面板中设置断点来调试 JavaScript ，或者通过Workspaces（工作区）连接本地文件来使用开发者工具的实时编辑器。</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints" target="_blank" rel="external">断点调试</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints" target="_blank" rel="external">调试混淆的代码</a></li>
<li><a href="https://developers.google.com/web/tools/setup/setup-workflow" target="_blank" rel="external">使用开发者工具的Workspaces（工作区）进行持久化保存</a></li>
</ul>
<h3 id="网络面板"><a href="#网络面板" class="headerlink" title="网络面板"></a>网络面板</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/panels/network.png" alt="Network Panel"></p>
<p>使用网络面板了解请求和下载的资源文件并优化网页加载性能。</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/resource-loading" target="_blank" rel="external">网络面板基础</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing" target="_blank" rel="external">了解资源时间轴</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions" target="_blank" rel="external">网络带宽限制</a></li>
</ul>
<h3 id="性能面板"><a href="#性能面板" class="headerlink" title="性能面板"></a>性能面板</h3><p>注意: 在 Chrome 57 之后时间线面板更名为性能面板.<img src="https://developers.google.com/web/tools/chrome-devtools/images/panels/performance.png" alt="Timeline Panel"></p>
<p>使用时间轴面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能。</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool" target="_blank" rel="external">如何查看性能</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/" target="_blank" rel="external">分析运行时性能</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/forced-synchronous-layouts" target="_blank" rel="external">诊断强制的同步布局</a></li>
</ul>
<h3 id="内存面板"><a href="#内存面板" class="headerlink" title="内存面板"></a>内存面板</h3><p>注意: 在 Chrome 57 之后分析面板更名为内存面板.<img src="https://developers.google.com/web/tools/chrome-devtools/images/panels/memory.png" alt="Profiles Panel"></p>
<p>如果需要比时间轴面板提供的更多信息，可以使用“配置”面板，例如跟踪内存泄漏。 Use the Profiles panel if you need more information than the Timeline provide, for instance to track down memory leaks.</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution" target="_blank" rel="external">JavaScript CPU 分析器</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/memory-problems/" target="_blank" rel="external">内存堆区分析器</a></li>
</ul>
<h3 id="应用面板"><a href="#应用面板" class="headerlink" title="应用面板"></a>应用面板</h3><p>注意: 在 Chrome 52 之后资源面板更名为应用面板.<img src="https://developers.google.com/web/tools/chrome-devtools/images/panels/application.png" alt="Application Panel"></p>
<p>使用资源面板检查加载的所有资源，包括IndexedDB与Web SQL数据库，本地和会话存储，cookie，应用程序缓存，图像，字体和样式表。</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage" target="_blank" rel="external">管理数据</a></li>
</ul>
<h3 id="安全面板"><a href="#安全面板" class="headerlink" title="安全面板"></a>安全面板</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/images/panels/security.png" alt="Security Panel"></p>
<p>使用安全面板调试混合内容问题，证书问题等等。</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/security" target="_blank" rel="external">安全</a></li>
</ul>
<h2 id="参与互动"><a href="#参与互动" class="headerlink" title="参与互动"></a>参与互动</h2><p><a href="https://twitter.com/ChromeDevTools" target="_blank" rel="external">TWITTER</a> <a href="https://stackoverflow.com/questions/tagged/google-chrome-devtools" target="_blank" rel="external">STACK OVERFLOW</a> <a href="https://chromiumdev.slack.com/messages/devtools/" target="_blank" rel="external">SLACK</a></p>
<h1 id="调试-Progressive-Web-App"><a href="#调试-Progressive-Web-App" class="headerlink" title="调试 Progressive Web App"></a>调试 Progressive Web App</h1><p>使用 <strong>Application</strong> 面板检查、修改和调试网络应用清单、服务工作线程和服务工作线程缓存。</p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/progressive-web-apps" target="_blank" rel="external">Progressive Web App</a></li>
</ul>
<p>本指南仅讨论 <strong>Application</strong> 面板的 Progressive Web App 功能。 如果您希望获得其他窗格的帮助，请参阅本指南的最后一部分，即<a href="https://developers.google.com/web/tools/chrome-devtools/progressive-web-apps#other" target="_blank" rel="external">其他 Application 面板指南</a>。</p>
<h3 id="TL-DR-5"><a href="#TL-DR-5" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 <strong>App Manifest</strong> 窗格检查您的网络应用清单和触发 Add to Homescreen 事件。</li>
<li>使用 <strong>Service Worker</strong> 窗格执行与服务工作线程相关的全部任务，例如注销或更新服务、模拟推送事件、切换为离线状态，或者停止服务工作线程。</li>
<li>从 <strong>Cache Storage</strong> 窗格查看您的服务工作线程缓存。</li>
<li>从 <strong>Clear Storage</strong> 窗格中点击一次按钮，注销服务工作线程并清除所有存储与缓存。</li>
</ul>
<h2 id="网络应用清单"><a href="#网络应用清单" class="headerlink" title="网络应用清单"></a>网络应用清单</h2><p>如果您希望用户能够将您的应用添加到他们移动设备的主屏幕上，那么您需要一个网络应用清单。 清单定义应用在主屏幕上的外观、从主屏幕启动时将用户定向到何处，以及应用在启动时的外观。</p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest" target="_blank" rel="external">通过网络应用清单改进用户体验</a></li>
<li><a href="https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners" target="_blank" rel="external">使用应用安装横幅</a></li>
</ul>
<p>设置好清单后，您可以使用 <strong>Application</strong> 面板的 <strong>Manifest</strong> 窗格对其进行检查。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/manifest.png" alt="Manifest 窗格"></p>
<ul>
<li>要查看清单来源，请点击 <strong>App Manifest</strong> 标签下方的链接（上方屏幕截图中的 <code>https://airhorner.com/manifest.json</code>）。</li>
<li>按 <strong>Add to homescreen</strong> 按钮模拟 Add to Homescreen 事件。 如需了解详细信息，请参阅下一部分。</li>
<li><strong>Identity</strong> 和 <strong>Presentation</strong> 部分以一种对用户更加友好的方式显示了清单来源中的字段。</li>
<li><strong>Icons</strong> 部分显示了您已指定的每一个图标。</li>
</ul>
<h3 id="模拟-Add-to-Homescreen-事件"><a href="#模拟-Add-to-Homescreen-事件" class="headerlink" title="模拟 Add to Homescreen 事件"></a>模拟 Add to Homescreen 事件</h3><p>只有至少已经访问网站两次、访问至少间隔五分钟时才可以将网络应用添加到主屏幕上。 开发或调试您的 Add to Homescreen 工作流时，此条件非常不便。利用 <strong>App Manifest</strong> 窗格上的 <strong>Add to homescreen</strong> 按钮，您可以随时模拟 Add to Homescreen 事件。</p>
<p>您可以使用 <a href="https://events.google.com/io2016/" target="_blank" rel="external">Google I/O 2016 Progressive Web App</a> 测试此功能，该应用可以为 Add to Homescreen 提供相应支持。在应用打开时点击 <strong>Add to Homescreen</strong> 会提示 Chrome 显示“add this site to your shelf”横幅（桌面设备），而在移动设备上则会显示“add to homescreen”横幅。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/io.png" alt="添加到桌面设备文件架"></p>
<p><strong>提示</strong>：在模拟 Add to Homescreen 事件时请保持 <strong>Console</strong> 抽屉式导航栏处于打开状态。 Console 会告诉您清单是否存在任何问题，并记录与 Add to Homescreen 生命周期有关的其他信息。</p>
<p><strong>Add to Homescreen</strong> 功能还不能模拟移动设备的工作流。 注意“add to shelf”提示在上方屏幕截图中的触发方式（即使 DevTools 处于 Device Mode）。 不过，如果您可以将应用成功添加到桌面设备文件架，那么在移动设备上也可以获得成功。</p>
<p>如果您希望测试真实的移动体验，则可以通过<a href="https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging" target="_blank" rel="external">远程调试</a>将一台真实的移动设备连接到 DevTools，然后点击 DevTools 上的 <strong>Add to Homescreen</strong> 按钮，在连接的移动设备上触发“add to homescreen”提示。</p>
<h2 id="服务工作线程"><a href="#服务工作线程" class="headerlink" title="服务工作线程"></a>服务工作线程</h2><p>服务工作线程是未来网络平台中的一种基础技术。它们是浏览器独立于网页在后台运行的脚本。这些脚本使您可以访问不需要网页或用户交互的功能，例如推送通知、后台同步和离线体验。</p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/primers/service-worker" target="_blank" rel="external">服务工作线程简介</a></li>
<li><a href="https://developers.google.com/web/fundamentals/engage-and-retain/push-notifications" target="_blank" rel="external">推送通知：及时、相关且精确</a></li>
</ul>
<p><strong>Application</strong> 面板中的 <strong>Service Workers</strong> 窗格是在 DevTools 中检查和调试服务工作线程的主要地方。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/sw.png" alt="Service Worker 窗格"></p>
<ul>
<li>如果服务工作线程已安装到当前打开的页面上，您会看到它将列示在此窗格中。 例如，在上方的屏幕截图中，<code>https://events.google.com/io2016/</code> 的作用域内安装了一个服务工作线程。</li>
<li><strong>Offline</strong> 复选框可以将 DevTools 切换至离线模式。它等同于 <strong>Network</strong> 窗格中的离线模式，或者 <a href="https://developers.google.com/web/tools/chrome-devtools/settings#command-menu" target="_blank" rel="external">Command Menu</a> 中的 <code>Go offline</code> 选项。</li>
<li><strong>Update on reload</strong> 复选框可以强制服务工作线程在每次页面加载时更新。</li>
<li><strong>Bypass for network</strong> 复选框可以绕过服务工作线程并强制浏览器转至网络寻找请求的资源。</li>
<li><strong>Update</strong> 按钮可以对指定的服务工作线程执行一次性更新。</li>
<li><strong>Push</strong> 按钮可以在没有负载的情况下模拟推送通知（也称为<a href="https://developers.google.com/web/fundamentals/engage-and-retain/push-notifications/sending-messages#ways-to-send" target="_blank" rel="external">操作消息</a>）。</li>
<li><strong>Sync</strong> 按钮可以模拟后台同步事件。</li>
<li><strong>Unregister</strong> 按钮可以注销指定的服务工作线程。参阅<a href="https://developers.google.com/web/tools/chrome-devtools/progressive-web-apps#clear-storage" target="_blank" rel="external">清除存储</a>，了解点击一次按钮即可注销服务工作线程并擦除存储和缓存的方式。</li>
<li><strong>Source</strong> 行可以告诉您当前正在运行的服务工作线程的安装时间。 链接是服务工作线程源文件的名称。点击链接会将您定向至服务工作线程来源。</li>
<li><strong>Status</strong> 行可以告诉您服务工作线程的状态。此行上的数字（上方屏幕截图中的 <code>#1</code>）指示服务工作线程已被更新的次数。如果启用 <strong>update on reload</strong> 复选框，您会注意到每次页面加载时此数字都会增大。在状态旁边，您将看到 <strong>start</strong>按钮（如果服务工作线程已停止）或 <strong>stop</strong> 按钮（如果服务工作线程正在运行）。服务工作线程设计为可由浏览器随时停止和启动。 使用 <strong>stop</strong> 按钮明确停止服务工作线程可以模拟这一点。停止服务工作线程是测试服务工作线程再次重新启动时的代码行为方式的绝佳方法。它通常可以揭示由于对持续全局状态的不完善假设而引发的错误。</li>
<li><strong>Clients</strong> 行可以告诉您服务工作线程作用域的原点。 如果您已启用 <strong>show all</strong> 复选框，<strong>focus</strong> 按钮将非常实用。 在此复选框启用时，系统会列出所有注册的服务工作线程。 如果您点击正在不同标签中运行的服务工作线程旁的 <strong>focus</strong> 按钮，Chrome 会聚焦到该标签。</li>
</ul>
<p>如果服务工作线程导致任何错误，将显示一个名为 <strong>Errors</strong> 的新标签。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/sw-error.png" alt="包含错误的服务工作线程"></p>
<h2 id="服务工作线程缓存"><a href="#服务工作线程缓存" class="headerlink" title="服务工作线程缓存"></a>服务工作线程缓存</h2><p><strong>Cache Storage</strong> 窗格提供了一个已使用（服务工作线程）<a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache" target="_blank" rel="external">Cache API</a> 缓存的只读资源列表。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/sw-cache.png" alt="Service Worker Cache 窗格"></p>
<p>请注意，第一次打开缓存并向其添加资源时，DevTools 可能检测不到更改。 重新加载页面后，您应当可以看到缓存。</p>
<p>如果您打开了两个或多个缓存，您将看到它们列在 <strong>Cache Storage</strong> 下拉菜单下方。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/multiple-caches.png" alt="多个服务工作线程缓存"></p>
<h2 id="清除存储"><a href="#清除存储" class="headerlink" title="清除存储"></a>清除存储</h2><p>开发 Progressive Web App 时，<strong>Clear Storage</strong> 窗格是一个非常实用的功能。 利用此窗格，只需点击一次按钮即可注销服务工作线程并清除所有缓存与存储。 参阅下面的部分了解详情。</p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/iterate/manage-data/local-storage#clear-storage" target="_blank" rel="external">清除存储</a></li>
</ul>
<h2 id="其他-Application-面板指南"><a href="#其他-Application-面板指南" class="headerlink" title="其他 Application 面板指南"></a>其他 Application 面板指南</h2><p>参阅下面的部分，获取有关 <strong>Application</strong> 面板其他窗格的更多帮助。</p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/iterate/manage-data/page-resources" target="_blank" rel="external">检查页面资源</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/iterate/manage-data/local-storage" target="_blank" rel="external">检查和管理本地存储与缓存</a></li>
</ul>
<h1 id="了解安全问题"><a href="#了解安全问题" class="headerlink" title="了解安全问题"></a>了解安全问题</h1><p>HTTPS 为您的网站和将个人信息委托给您的网站的人提供了<a href="https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https" target="_blank" rel="external">重要的安全性和数据完整性</a>。在 Chrome DevTools 中使用 Security 面板调试安全问题，确保您已在自己的网站上恰当地实现 HTTPS。</p>
<h3 id="TL-DR-6"><a href="#TL-DR-6" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 Security Overview 可以立即查看当前页面是否安全。</li>
<li>检查各个源以查看连接和证书详情（安全源）或找出具体哪些请求未受保护（非安全源）。</li>
</ul>
<h2 id="Security-Overview"><a href="#Security-Overview" class="headerlink" title="Security Overview"></a>Security Overview</h2><p>要查看页面的整体安全性，请打开 DevTools，然后转至 Security 面板。</p>
<p>您首先会看到 Security Overview。Security Overview 会一目了然地告诉您页面是否安全。 安全页面会通过消息 <code>This page is secure (valid HTTPS).</code> 指示</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/overview-secure.png" alt="Security Overview，安全页面"></p>
<p>点击 <strong>View certificate</strong> 查看<a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">主源</a>的服务器证书。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/view-certificate.png" alt="查看证书"></p>
<p>非安全页面会通过消息 <code>This page is not secure.</code> 指示</p>
<p>Security 面板可以区分两种非安全页面。 如果请求的页面通过 HTTP 提供，则主源会被标记为不安全。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/overview-non-secure.png" alt="Security Overview，非安全主源"></p>
<p>如果请求的页面通过 HTTPS 检索，但页面会继续使用 HTTP 检索其他源的内容，然后页面仍然会被标记为不安全。这称为<a href="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content" target="_blank" rel="external">混合内容</a>页面。 混合内容页面仅受部分保护，因为 HTTP 内容可以被嗅探器获取到且易受到中间人攻击。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/overview-mixed.png" alt="Security Overview，混合内容"></p>
<p>点击 <strong>View request in Network Panel</strong> 打开 Network 面板的过滤视图，然后查看具体是哪些请求通过 HTTP 提供。 这将显示来自所有源的所有未受保护的请求。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/network-all.png" alt="Network 面板，非安全资源，所有源"></p>
<h2 id="检查源"><a href="#检查源" class="headerlink" title="检查源"></a>检查源</h2><p>使用左侧面板可以检查各个安全或非安全源。</p>
<p>点击安全源查看该源的连接和证书详情。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/origin-detail-secure.png" alt="源详情，安全"></p>
<p>如果您点击非安全源，Security 面板会提供 Network 面板过滤视图的链接。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/origin-detail-non-secure.png" alt="源详情，非安全"></p>
<p>点击链接可以查看具体是源的哪些请求通过 HTTP 提供。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/network-one.png" alt="Network 面板，非安全资源，一个源"></p>
<h1 id="从任何页面运行代码段"><a href="#从任何页面运行代码段" class="headerlink" title="从任何页面运行代码段"></a>从任何页面运行代码段</h1><p>代码段是您可以在 Chrome DevTools 的 Sources 面板中制作和执行的小脚本。 您可以从任何页面访问和运行它们。 在您运行代码段时，它会从当前已打开页面的上下文执行。</p>
<p>如果您有将在多个页面上重复使用的实用程序或调试脚本，可以考虑将脚本保存为代码段。</p>
<p>您也可以使用代码段替代<a href="https://en.wikipedia.org/wiki/Bookmarklet" target="_blank" rel="external">小书签</a>。</p>
<h3 id="TL-DR-7"><a href="#TL-DR-7" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>代码段是您可以从任何页面运行的小脚本（类似于小书签）。</li>
<li>使用“Evaluate in Console”功能可以在控制台中运行部分代码段。</li>
<li>请注意，Sources 面板中的常用功能（如断点）也可与代码段结合使用。</li>
</ul>
<h2 id="创建代码段"><a href="#创建代码段" class="headerlink" title="创建代码段"></a>创建代码段</h2><p>要创建代码段，请打开 <strong>Sources</strong> 面板，点击 <strong>Snippets</strong> 标签，在导航器中点击右键，然后选择 <strong>New</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/create-snippet.png" alt="创建代码段"></p>
<p>在编辑器中输入您的代码。如果您未保存更改，您的脚本名称旁会有一个星号，如下面的屏幕截图所示。请按 Command+S(Mac) 或 Ctrl+S （Windows、Linux）以保存您的更改。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/unsaved-snippet.png" alt="未保存的代码段"></p>
<h2 id="运行代码段"><a href="#运行代码段" class="headerlink" title="运行代码段"></a>运行代码段</h2><p>可以通过三种方式运行代码段：</p>
<ul>
<li>右键点击代码段文件名（左侧窗格列出了所有代码段），然后选择 <strong>Run</strong>。</li>
<li>点击 <strong>Run</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/images/run.png" alt="运行代码段按钮">)。</li>
<li>按 Command+Enter (Mac) 或 Ctrl+Enter（Windows、Linux）。</li>
</ul>
<p>要在控制台中评估部分代码段，请突出显示这一部分，在编辑器中的任意位置右键点击，然后选择 <strong>Evaluate in Console</strong>，或使用键盘快捷键 Command+Shift+E (Mac) 或 Ctrl+Shift+E（Windows、Linux）。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/evaluate-in-console.png" alt="在控制台中评估"></p>
<h2 id="查看本地修改"><a href="#查看本地修改" class="headerlink" title="查看本地修改"></a>查看本地修改</h2><p>要查看您对代码段所做修改的差异，请在编辑器中（显示代码段时）点击右键，然后选择 <strong>Local modifications</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/local-modifications.png" alt="本地修改"></p>
<p>在控制台抽屉式导航栏中会弹出名称为 <strong>History</strong> 的新标签。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/snippet-history.png" alt="代码段历史记录"></p>
<p>每个时间戳代表一次修改。展开时间戳旁的三角符号，查看那个时间点所做修改的差异。<strong>revert</strong> 链接可以移除修订历史记录。从 2016 年 6 月 27 日开始，<strong>apply revision content</strong> 和 <strong>apply original content</strong> 链接似乎无法按预期工作。</p>
<h2 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h2><p>就像在其他脚本上一样，您也可以在代码段上设置断点。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/debug/breakpoints/add-breakpoints" target="_blank" rel="external">添加断点</a>，了解如何在 <strong>Sources</strong> 面板中添加断点。</p>
<h1 id="键盘快捷键参考"><a href="#键盘快捷键参考" class="headerlink" title="键盘快捷键参考"></a>键盘快捷键参考</h1><p>本页介绍 Chrome DevTools 中所有键盘快捷键的参考信息。一些快捷键全局可用，而其他快捷键会特定于单一面板。</p>
<p>您也可以在提示中找到快捷键。将鼠标悬停在 DevTools 的 UI 元素上可以显示元素的提示。 如果元素有快捷键，提示将包含快捷键。</p>
<h2 id="访问-DevTools"><a href="#访问-DevTools" class="headerlink" title="访问 DevTools"></a>访问 DevTools</h2><table>
<thead>
<tr>
<th>访问 DevTools</th>
<th>在 Windows 上</th>
<th>在 Mac 上</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开 Developer Tools</td>
<td>F12、Ctrl + Shift + I</td>
<td>Cmd + Opt + I</td>
</tr>
<tr>
<td>打开/切换检查元素模式和浏览器窗口</td>
<td>Ctrl + Shift + C</td>
<td>Cmd + Shift + C</td>
</tr>
<tr>
<td>打开 Developer Tools 并聚焦到控制台</td>
<td>Ctrl + Shift + J</td>
<td>Cmd + Opt + J</td>
</tr>
<tr>
<td>检查检查器（取消停靠第一个后按）</td>
<td>Ctrl + Shift + I</td>
<td>Cmd + Opt + I</td>
</tr>
</tbody>
</table>
<h2 id="全局键盘快捷键"><a href="#全局键盘快捷键" class="headerlink" title="全局键盘快捷键"></a>全局键盘快捷键</h2><p>下列键盘快捷键可以在所有 DevTools 面板中使用：</p>
<table>
<thead>
<tr>
<th>全局快捷键</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>显示一般设置对话框</td>
<td>?、F1</td>
<td>?</td>
</tr>
<tr>
<td>下一个面板</td>
<td>Ctrl + ]</td>
<td>Cmd + ]</td>
</tr>
<tr>
<td>上一个面板</td>
<td>Ctrl + [</td>
<td>Cmd + [</td>
</tr>
<tr>
<td>在面板历史记录中后退</td>
<td>Ctrl + Alt + [</td>
<td>Cmd + Opt + [</td>
</tr>
<tr>
<td>在面板历史记录中前进</td>
<td>Ctrl + Alt + ]</td>
<td>Cmd + Opt + ]</td>
</tr>
<tr>
<td>更改停靠位置</td>
<td>Ctrl + Shift + D</td>
<td>Cmd + Shift + D</td>
</tr>
<tr>
<td>打开 Device Mode</td>
<td>Ctrl + Shift + M</td>
<td>Cmd + Shift + M</td>
</tr>
<tr>
<td>切换控制台/在设置对话框打开时将其关闭</td>
<td>Esc</td>
<td>Esc</td>
</tr>
<tr>
<td>刷新页面</td>
<td>F5、Ctrl + R</td>
<td>Cmd + R</td>
</tr>
<tr>
<td>刷新忽略缓存内容的页面</td>
<td>Ctrl + F5、Ctrl + Shift + R</td>
<td>Cmd + Shift + R</td>
</tr>
<tr>
<td>在当前文件或面板中搜索文本</td>
<td>Ctrl + F</td>
<td>Cmd + F</td>
</tr>
<tr>
<td>在所有源中搜索文本</td>
<td>Ctrl + Shift + F</td>
<td>Cmd + Opt + F</td>
</tr>
<tr>
<td>按文件名搜索（除了在 Timeline 上）</td>
<td>Ctrl + O、Ctrl + P</td>
<td>Cmd + O、Cmd + P</td>
</tr>
<tr>
<td>放大（焦点在 DevTools 中时）</td>
<td>Ctrl + +</td>
<td>Cmd + Shift + +</td>
</tr>
<tr>
<td>缩小</td>
<td>Ctrl + -</td>
<td>Cmd + Shift + -</td>
</tr>
<tr>
<td>恢复默认文本大小</td>
<td>Ctrl + 0</td>
<td>Cmd + 0</td>
</tr>
</tbody>
</table>
<h2 id="按面板分类的键盘快捷键"><a href="#按面板分类的键盘快捷键" class="headerlink" title="按面板分类的键盘快捷键"></a>按面板分类的键盘快捷键</h2><h3 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h3><table>
<thead>
<tr>
<th>Elements 面板</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>撤消更改</td>
<td>Ctrl + Z</td>
<td>Cmd + Z</td>
</tr>
<tr>
<td>重做更改</td>
<td>Ctrl + Y</td>
<td>Cmd + Y、Cmd + Shift + Z</td>
</tr>
<tr>
<td>导航</td>
<td>向上键、向下键</td>
<td>向上键、向下键</td>
</tr>
<tr>
<td>展开/折叠节点</td>
<td>向右键、向左键</td>
<td>向右键、向左键</td>
</tr>
<tr>
<td>展开节点</td>
<td>点击箭头</td>
<td>点击箭头</td>
</tr>
<tr>
<td>展开/折叠节点及其所有子节点</td>
<td>Ctrl + Alt + 点击箭头图标</td>
<td>Opt + 点击箭头图标</td>
</tr>
<tr>
<td>编辑属性</td>
<td>Enter、双击属性</td>
<td>Enter、双击属性</td>
</tr>
<tr>
<td>隐藏元素</td>
<td>H</td>
<td>H</td>
</tr>
<tr>
<td>切换为以 HTML 形式编辑</td>
<td>F2</td>
</tr>
</tbody>
</table>
<h4 id="Styles-边栏"><a href="#Styles-边栏" class="headerlink" title="Styles 边栏"></a>Styles 边栏</h4><p>Styles 边栏中可用的快捷键：</p>
<table>
<thead>
<tr>
<th>Styles 边栏</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>编辑规则</td>
<td>点击</td>
<td>点击</td>
</tr>
<tr>
<td>插入新属性</td>
<td>点击空格</td>
<td>点击空格</td>
</tr>
<tr>
<td>转到源中样式规则属性声明行</td>
<td>Ctrl + 点击属性</td>
<td>Cmd + 点击属性</td>
</tr>
<tr>
<td>转到源中属性值声明行</td>
<td>Ctrl + 点击属性值</td>
<td>Cmd + 点击属性值</td>
</tr>
<tr>
<td>在颜色定义值之间循环</td>
<td>Shift + 点击颜色选取器框</td>
<td>Shift + 点击颜色选取器框</td>
</tr>
<tr>
<td>编辑下一个/上一个属性</td>
<td>Tab、Shift + Tab</td>
<td>Tab、Shift + Tab</td>
</tr>
<tr>
<td>增大/减小值</td>
<td>向上键、向下键</td>
<td>向上键、向下键</td>
</tr>
<tr>
<td>以 10 为增量增大/减小值</td>
<td>Shift + Up、Shift + Down</td>
<td>Shift + Up、Shift + Down</td>
</tr>
<tr>
<td>以 10 为增量增大/减小值</td>
<td>PgUp、PgDown</td>
<td>PgUp、PgDown</td>
</tr>
<tr>
<td>以 100 为增量增大/减小值</td>
<td>Shift + PgUp、Shift + PgDown</td>
<td>Shift + PgUp、Shift + PgDown</td>
</tr>
<tr>
<td>以 0.1 为增量增大/减小值</td>
<td>Alt + 向上键、Alt + 向下键</td>
<td>Opt + 向上键、Opt + 向下键</td>
</tr>
</tbody>
</table>
<h3 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h3><table>
<thead>
<tr>
<th>Sources 面板</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>暂停/继续脚本执行</td>
<td>F8、Ctrl + \</td>
<td>F8、Cmd + \</td>
</tr>
<tr>
<td>越过下一个函数调用</td>
<td>F10、Ctrl + ‘</td>
<td>F10、Cmd + ‘</td>
</tr>
<tr>
<td>进入下一个函数调用</td>
<td>F11、Ctrl + ;</td>
<td>F11、Cmd + ;</td>
</tr>
<tr>
<td>跳出当前函数</td>
<td>Shift + F11、Ctrl + Shift + ;</td>
<td>Shift + F11、Cmd + Shift + ;</td>
</tr>
<tr>
<td>选择下一个调用框架</td>
<td>Ctrl + .</td>
<td>Opt + .</td>
</tr>
<tr>
<td>选择上一个调用框架</td>
<td>Ctrl + ,</td>
<td>Opt + ,</td>
</tr>
<tr>
<td>切换断点条件</td>
<td>点击行号、Ctrl + B</td>
<td>点击行号、Cmd + B</td>
</tr>
<tr>
<td>编辑断点条件</td>
<td>右键点击行号</td>
<td>右键点击行号</td>
</tr>
<tr>
<td>删除各个单词</td>
<td>Ctrl + Delete</td>
<td>Opt + Delete</td>
</tr>
<tr>
<td>为某一行或选定文本添加注释</td>
<td>Ctrl + /</td>
<td>Cmd + /</td>
</tr>
<tr>
<td>将更改保存到本地修改</td>
<td>Ctrl + S</td>
<td>Cmd + S</td>
</tr>
<tr>
<td>保存所有更改</td>
<td>Ctrl + Alt + S</td>
<td>Cmd + Opt + S</td>
</tr>
<tr>
<td>转到行</td>
<td>Ctrl + G</td>
<td>Ctrl + G</td>
</tr>
<tr>
<td>按文件名搜索</td>
<td>Ctrl + O</td>
<td>Cmd + O</td>
</tr>
<tr>
<td>跳转到行号</td>
<td>Ctrl + P + <em>数字</em></td>
<td>Cmd + P + <em>数字</em></td>
</tr>
<tr>
<td>跳转到列</td>
<td>Ctrl + O + <em>数字</em> + <em>数字</em></td>
<td>Cmd + O + <em>数字</em> + <em>数字</em></td>
</tr>
<tr>
<td>转到成员</td>
<td>Ctrl + Shift + O</td>
<td>Cmd + Shift + O</td>
</tr>
<tr>
<td>关闭活动标签</td>
<td>Alt + W</td>
<td>Opt + W</td>
</tr>
<tr>
<td>运行代码段</td>
<td>Ctrl + Enter</td>
<td>Cmd + Enter</td>
</tr>
</tbody>
</table>
<h4 id="在代码编辑器内"><a href="#在代码编辑器内" class="headerlink" title="在代码编辑器内"></a>在代码编辑器内</h4><table>
<thead>
<tr>
<th>代码编辑器</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>转到匹配的括号</td>
<td>Ctrl + M</td>
<td></td>
</tr>
<tr>
<td>跳转到行号</td>
<td>Ctrl + P + <em>数字</em></td>
<td>Cmd + P + <em>数字</em></td>
</tr>
<tr>
<td>跳转到列</td>
<td>Ctrl + O + <em>数字</em> + <em>数字</em></td>
<td>Cmd + O + <em>数字</em> + <em>数字</em></td>
</tr>
<tr>
<td>切换注释</td>
<td>Ctrl + /</td>
<td>Cmd + /</td>
</tr>
<tr>
<td>选择下一个实例</td>
<td>Ctrl + D</td>
<td>Cmd + D</td>
</tr>
<tr>
<td>撤消上一个选择</td>
<td>Ctrl + U</td>
<td>Cmd + U</td>
</tr>
</tbody>
</table>
<h3 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h3><table>
<thead>
<tr>
<th>Timeline 面板</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>开始/停止记录</td>
<td>Ctrl + E</td>
<td>Cmd + E</td>
</tr>
<tr>
<td>保存时间线数据</td>
<td>Ctrl + S</td>
<td>Cmd + S</td>
</tr>
<tr>
<td>加载时间线数据</td>
<td>Ctrl + O</td>
<td>Cmd + O</td>
</tr>
</tbody>
</table>
<h3 id="Profiles"><a href="#Profiles" class="headerlink" title="Profiles"></a>Profiles</h3><table>
<thead>
<tr>
<th>Profiles 面板</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>开始/停止记录</td>
<td>Ctrl + E</td>
<td>Cmd + E</td>
</tr>
</tbody>
</table>
<h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><table>
<thead>
<tr>
<th>控制台快捷键</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>接受建议</td>
<td>向右键</td>
<td>向右键</td>
</tr>
<tr>
<td>上一个命令/行</td>
<td>向上键</td>
<td>向上键</td>
</tr>
<tr>
<td>下一个命令/行</td>
<td>向下键</td>
<td>向下键</td>
</tr>
<tr>
<td>聚焦到控制台</td>
<td>Ctrl + `</td>
<td>Ctrl + `</td>
<td></td>
</tr>
<tr>
<td>清除控制台</td>
<td>Ctrl + L</td>
<td>Cmd + K、Opt + L</td>
</tr>
<tr>
<td>多行输入</td>
<td>Shift + Enter</td>
<td>Ctrl + Return</td>
</tr>
<tr>
<td>执行</td>
<td>Enter</td>
<td>Return</td>
</tr>
</tbody>
</table>
<h3 id="Device-Mode"><a href="#Device-Mode" class="headerlink" title="Device Mode"></a>Device Mode</h3><table>
<thead>
<tr>
<th>Device Mode 快捷键</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>双指张合放大和缩小</td>
<td>Shift + 滚动</td>
<td>Shift + 滚动</td>
</tr>
</tbody>
</table>
<h4 id="抓屏时"><a href="#抓屏时" class="headerlink" title="抓屏时"></a>抓屏时</h4><table>
<thead>
<tr>
<th>抓屏快捷键</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>双指张合放大和缩小</td>
<td>Alt + 滚动、Ctrl + 点击并用两个手指拖动</td>
<td>Opt + 滚动、Cmd + 点击并用两个手指拖动</td>
</tr>
<tr>
<td>检查元素工具</td>
<td>Ctrl + Shift + C</td>
<td>Cmd + Shift + C</td>
</tr>
</tbody>
</table>
<h1 id="UI-Reference"><a href="#UI-Reference" class="headerlink" title="UI Reference"></a>UI Reference</h1><p>本参考文献显示如何：</p>
<ul>
<li>访问和使用Chrome DevTools UI的常见部分，如主菜单。</li>
<li>更改Chrome DevTools UI。</li>
</ul>
<h2 id="主菜单"><a href="#主菜单" class="headerlink" title="主菜单"></a>主菜单</h2><p>单击<strong>更多</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/more.png" alt="更多">以打开主菜单。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/main-menu.svg" alt="DevTools主菜单按钮。"><strong>图1</strong>：用于打开主菜单的按钮，以蓝色概述。</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>要打开设置，请执行以下操作之一：</p>
<ul>
<li>按F1DevTools处于关注状态。</li>
<li>打开<a href="https://developers.google.com/web/tools/chrome-devtools/ui#main-menu" target="_blank" rel="external">主菜单</a>，然后选择<strong>设置</strong>。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/settings.png" alt="DevTools设置。"><strong>图2</strong>：DevTools设置。</p>
<h2 id="命令菜单"><a href="#命令菜单" class="headerlink" title="命令菜单"></a>命令菜单</h2><p>要打开DevTools命令菜单，请按 Cmd+ Shift+ P（Mac）或 Ctrl+ Shift+ P（Windows，Linux）。</p>
<p>命令菜单使用模糊搜索。例如，切换到黑色主题的确切命令是<code>Switch to dark theme</code>，但是也可以输入<code>theme</code>过滤出其他命令。</p>
<p>您在打开命令菜单时看到的命令列表表示所有可用的命令。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/command-menu.png" alt="命令菜单。"><strong>图3</strong>：命令菜单。</p>
<h2 id="抽屉"><a href="#抽屉" class="headerlink" title="抽屉"></a>抽屉</h2><p>按Escape打开或关闭抽屉。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/drawer-example.png" alt="一个DevTools窗口，抽屉开在底部。 控制台选项卡在抽屉中打开。"><strong>图4</strong>：一个DevTools窗口，抽屉在底部打开。控制台选项卡在抽屉中打开。</p>
<p>单击<strong>更多</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/more.png" alt="更多">以打开其他抽屉选项卡。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/more-drawer-tabs.svg" alt="用于打开“抽屉”选项卡的按钮。"><strong>图5</strong>：用于打开“抽屉”选项卡的按钮，以蓝色概述。</p>
<h2 id="更改DevTools-UI"><a href="#更改DevTools-UI" class="headerlink" title="更改DevTools UI"></a>更改DevTools UI</h2><h3 id="重新排列面板选项卡"><a href="#重新排列面板选项卡" class="headerlink" title="重新排列面板选项卡"></a>重新排列面板选项卡</h3><p>单击并拖动面板选项卡以更改其排序。您的自定义标签订单在DevTools会话中仍然存在。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/custom-panel-tab-ordering.png" alt="一个具有自定义面板选项卡排序的DevTools窗口。"><strong>图6</strong>：具有自定义选项卡顺序的DevTools窗口。默认情况下，“网络”面板选项卡通常是左侧的第四个。在屏幕截图中，它是从左到左的第一个。</p>
<h3 id="更改DevTools的位置"><a href="#更改DevTools的位置" class="headerlink" title="更改DevTools的位置"></a>更改DevTools的位置</h3><p>要更改DevTools窗口的位置：</p>
<ol>
<li>打开<a href="https://developers.google.com/web/tools/chrome-devtools/ui#main-menu" target="_blank" rel="external">主菜单</a>。</li>
<li>选择<strong>Undock到单独的窗口</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/undock.png" alt="解开分开的窗口">，<strong>从左到右</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/dock-left.png" alt="停靠左">，<strong>Dock到底部</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/dock-bottom.png" alt="码头底部">，或者<strong>Dock到右边</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/dock-right.png" alt="对接">。</li>
</ol>
<p><strong>注意：**</strong>左侧的Dock<strong>已在Chrome 58中引入。**</strong></p>
<p>您还可以从<a href="https://developers.google.com/web/tools/chrome-devtools/ui#command-menu" target="_blank" rel="external">命令菜单</a>更改DevTools的位置。命令的名称与上述选项相同。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/left-dock-example.png" alt="DevTools窗口，停靠在左边。"><strong>图7</strong>：DevTools窗口，停靠在左边。</p>
<h2 id="使用黑色主题"><a href="#使用黑色主题" class="headerlink" title="使用黑色主题"></a>使用黑色主题</h2><p>将DevTools设置为黑色主题：</p>
<ol>
<li>打开<a href="https://developers.google.com/web/tools/chrome-devtools/ui#settings" target="_blank" rel="external">设置</a>。</li>
<li>单击<strong>首</strong>选项选项卡。</li>
<li>在“ <strong>外观”</strong>部分下，将“ <strong>主题”</strong>设置为“ <strong>黑暗”</strong>。</li>
</ol>
<p>您还可以从<a href="https://developers.google.com/web/tools/chrome-devtools/ui#command-menu" target="_blank" rel="external">命令菜单</a>将DevTools设置为黑色主题。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/images/dark-theme.png" alt="DevTools的黑暗主题。"><strong>图8</strong>：DevTools的黑暗主题。</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>启用DevTools实验：</p>
<ol>
<li>转到<a href="chrome://flags/#enable-devtools-experiments" target="_blank" rel="external">chrome：// flags /＃enable-devtools-experiments</a>。</li>
<li>单击<strong>启用</strong>。</li>
<li>点击页面底部的“ <strong>立即重新启动</strong> ”。</li>
</ol>
<p>下次打开DevTools时，会有一个名为<strong>Experiments</strong> in <a href="https://developers.google.com/web/tools/chrome-devtools/ui#settings" target="_blank" rel="external">Settings</a>的新页面。</p>
<h1 id="检查和编辑页面与样式"><a href="#检查和编辑页面与样式" class="headerlink" title="检查和编辑页面与样式"></a>检查和编辑页面与样式</h1><p>使用 Chrome DevTools 的 Elements 面板检查和实时编辑页面的 HTML 与 CSS。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/elements-panel.png" alt="Chrome DevTools 的 Elements 面板"></p>
<h3 id="TL-DR-8"><a href="#TL-DR-8" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>在 Elements 面板中检查和实时编辑 DOM 树中的任何元素。</li>
<li>在 Styles 窗格中查看和更改应用到任何选定元素的 CSS 规则。</li>
<li>在 Computed 窗格中查看和修改选定元素的框模型。</li>
<li>在 Sources 面板中查看在本地对页面所做的更改。</li>
</ul>
<h2 id="实时编辑-DOM-节点"><a href="#实时编辑-DOM-节点" class="headerlink" title="实时编辑 DOM 节点"></a>实时编辑 DOM 节点</h2><p>要实时编辑 DOM 节点，只需双击<a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/#inspect-an-element" target="_blank" rel="external">选定元素</a>，然后进行更改：</p>
<p>DOM 树视图会显示树的当前状态；可能会与最初因其他原因加载的 HTML 不匹配。 例如，您可以使用 JavaScript 修改 DOM 树；浏览器引擎会尝试修正无效的作者标记并生成意外的 DOM。</p>
<h2 id="实时编辑样式"><a href="#实时编辑样式" class="headerlink" title="实时编辑样式"></a>实时编辑样式</h2><p>在 <strong>Styles</strong> 窗格中实时编辑样式属性名称和值。所有样式均可修改，除了灰色部分（与 User Agent 样式表一样）。</p>
<p>要编辑名称或值，请点击它，进行更改，然后按 Tab 或 Enter 保存更改。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/edit-property-name.png" alt="编辑属性名称"></p>
<p>默认情况下，您的 CSS 修改不是永久的，重新加载页面时更改会丢失。 如果您想要在页面加载时保留更改，请设置<a href="https://developers.google.com/web/tools/setup/setup-workflow" target="_blank" rel="external">永久制作</a>。</p>
<h2 id="检查和编辑框模型参数"><a href="#检查和编辑框模型参数" class="headerlink" title="检查和编辑框模型参数"></a>检查和编辑框模型参数</h2><p>使用 <strong>Computed</strong> 窗格检查和编辑当前元素的框模型参数。 框模型中的所有值均可修改，只需点击它们即可。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/computed-pane.png" alt="Computed 窗格"></p>
<p>同轴矩形包含当前元素 <strong>padding</strong>、<strong>border</strong> 和 <strong>margin</strong> 属性的 <strong>top</strong>、<strong>bottom</strong>、<strong>left</strong>、<strong>right</strong> 值。</p>
<p>对于位置为非静态的元素，还会显示 <strong>position</strong> 矩形，包含 <strong>top</strong>、<strong>right</strong>、<strong>bottom</strong> 和 <strong>left</strong> 属性的值。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/computed-non-static.png" alt="非静态计算元素"></p>
<p>对于 <code>position: fixed</code> 和 <code>position: absolute</code> 元素，中心域包含选定元素实际的 <strong>offsetWidth × offsetHeight</strong> 像素尺寸。所有值都可以通过双击修改，就像 Styles 窗格中的属性值一样。 不过，无法保证这些更改能够生效，因为这要取决于具体的元素定位详情。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/computed-fixed.png" alt="固定计算元素"></p>
<h2 id="查看本地更改"><a href="#查看本地更改" class="headerlink" title="查看本地更改"></a>查看本地更改</h2><p>要查看对页面所做实时编辑的历史记录，请执行以下操作：</p>
<ol>
<li>在 <strong>Styles</strong> 窗格中，点击您修改的文件。DevTools 会将您带到 <strong>Sources</strong> 面板。</li>
<li>右键点击文件。</li>
<li>选择 <strong>Local modifications</strong>。</li>
</ol>
<p>要探索所做的更改，请执行以下操作：</p>
<ul>
<li>展开顶级文件名查看做出修改的时间 <img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/image_25.png" alt="做出修改的时间">。</li>
<li>展开第二级项目查看修改相应的<a href="https://en.wikipedia.org/wiki/Diff" target="_blank" rel="external">不同</a>（前和后）。</li>
</ul>
<p>粉色背景的线表示移除，绿色背景的线表示添加。</p>
<h2 id="撤消更改"><a href="#撤消更改" class="headerlink" title="撤消更改"></a>撤消更改</h2><p>如果您未<a href="https://developers.google.com/web/tools/setup/setup-workflow" target="_blank" rel="external">设置永久制作</a>，每次您重新加载页面时，所有的实时编辑都会丢失。</p>
<p>假设您已设置了永久制作，要撤消更改，请执行以下操作：</p>
<ul>
<li>使用 Ctrl+Z (Windows) 或 Cmd+Z (Mac) 通过 Elements 面板快速撤消对 DOM 或样式所做的细微更改。</li>
<li>要撤消对文件所做的所有本地修改，请打开 <strong>Sources</strong> 面板，然后选择文件名旁的 <strong>revert</strong>。</li>
</ul>
<h1 id="开始查看和更改CSS"><a href="#开始查看和更改CSS" class="headerlink" title="开始查看和更改CSS"></a>开始查看和更改CSS</h1><p>完成这些交互式教程，以了解使用Chrome DevTools查看和更改页面CSS的基础知识。</p>
<h2 id="查看元素的CSS"><a href="#查看元素的CSS" class="headerlink" title="查看元素的CSS"></a>查看元素的CSS</h2><ol>
<li><p>右键单击<code>Inspect Me!</code>下面的文本，然后选择<strong>检查</strong>。DevTools 的<strong>Elements</strong>面板打开。该<code>Inspect Me!</code>元件在突出<strong>DOM树</strong>。</p>
<p>​</p>
</li>
<li><p>在<strong>DOM树</strong>，找到价值<code>data-message</code>的属性<code>Inspect Me!</code>元素。</p>
</li>
<li><p>在下面的文本框中输入值。</p>
<p>​</p>
</li>
<li><p>“ <strong>元素”</strong>面板上的“ <strong>样式</strong> ”选项卡列出了应用于当前在<strong>DOM树</strong>中选择的任何元素的CSS规则，这在这种情况下仍然是元素。查找 班级规则。事实上，你看到这个规则意味着它被应用到元素。<strong><em>**</em></strong><code>Inspect Me!``aloha``Inspect Me!</code></p>
</li>
<li><p>在<code>aloha</code>类声明的价值<code>padding</code>。在下面的文本框中输入该值。</p>
<p>​</p>
</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/css/imgs/inspect.png" alt="被检查的元素在DOM树中突出显示"><strong>图1</strong>。被检查的元素在<strong>DOM树</strong>中突出显示为蓝色<em>**</em></p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/css/imgs/aloha.png" alt="应用于被检查元素的CSS类在“样式”选项卡中突出显示"><strong>图2</strong>。应用于所选元素的CSS类，例如<code>aloha</code>，将显示在“ <strong>样式</strong> ”选项卡中</p>
<h2 id="向元素添加一个CSS声明"><a href="#向元素添加一个CSS声明" class="headerlink" title="向元素添加一个CSS声明"></a>向元素添加一个CSS声明</h2><p>当您想要更改或添加CSS声明到元素时，请使用“ <strong>样式</strong> ”选项卡。</p>
<p><strong>注意：</strong>在执行此操作之前，先完成“ <a href="https://developers.google.com/web/tools/chrome-devtools/css/#view" target="_blank" rel="external">查看”一个元素的CSS</a>教程。</p>
<ol>
<li><p>右键单击<code>Add A Background Color To Me!</code>下面的文本，然后选择 <strong>检查</strong>。</p>
<p>​</p>
</li>
<li><p>点击<strong>样式</strong>选项卡<code>element.style</code>顶部附近。<em>**</em></p>
</li>
<li><p>键入<code>background-color</code>并按Enter。</p>
</li>
<li><p>键入<code>honeydew</code>并按Enter。在<strong>DOM树中，</strong>您可以看到内置样式声明已应用于元素。</p>
</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/css/imgs/declaration.png" alt="通过“样式”选项卡向元素添加CSS声明"><strong>图3</strong>。的<code>background-color:honeydew</code>声明已经经由被施加到元件<code>element.style</code>的第<strong>样式</strong>选项卡</p>
<h2 id="将CSS类添加到元素"><a href="#将CSS类添加到元素" class="headerlink" title="将CSS类添加到元素"></a>将CSS类添加到元素</h2><p>使用“ <strong>样式</strong> ”选项卡查看当CSS类应用于元素或从元素中移除时元素的外观。</p>
<p><strong>注意：</strong>在执行此操作之前，先完成“ <a href="https://developers.google.com/web/tools/chrome-devtools/css/#view" target="_blank" rel="external">查看”一个元素的CSS</a>教程。</p>
<ol>
<li><p>右键单击<code>Add A Class To Me!</code>下面的元素，然后选择<strong>Inspect</strong>。</p>
<p>​</p>
</li>
<li><p>点击<strong>.cls</strong>。DevTools显示一个文本框，您可以在其中添加所选元素的类。</p>
</li>
<li><p>键入<code>color_me</code>在<strong>添加新的类</strong>文本框，然后按 Enter。<strong>添加新类</strong>文本框下方会出现一个复选框，您可以在其中打开和关闭该类。如果该<code>Add A Class To Me!</code> 元素适用于其他任何类，您也可以从这里切换。</p>
</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/css/imgs/apply-class.png" alt="将color_me类应用于元素"><strong>图4</strong>。的<code>color_me</code>类已通过被施加到元件<strong>.CLS</strong>所述的部分<strong>样式</strong>选项卡</p>
<h2 id="向类中添加一个伪节点"><a href="#向类中添加一个伪节点" class="headerlink" title="向类中添加一个伪节点"></a>向类中添加一个伪节点</h2><p>使用“ <strong>样式</strong> ”选项卡将CSS伪节点永久应用于元素。DevTools支持<code>:active</code>，<code>:focus</code>，<code>:hover</code>，和<code>:visited</code>。</p>
<p><strong>注意：</strong>在执行此操作之前，先完成“ <a href="https://developers.google.com/web/tools/chrome-devtools/css/#view" target="_blank" rel="external">查看”一个元素的CSS</a>教程。</p>
<ol>
<li><p>将鼠标悬停在<code>Hover Over Me!</code>下面的文本中。背景颜色变化。</p>
<p>​</p>
</li>
<li><p>右键单击<code>Hover Over Me!</code>文本并选择<strong>检查</strong>。</p>
</li>
<li><p>在“ <strong>样式</strong> ”选项卡中，单击<strong>：hov</strong>。</p>
</li>
<li><p>检查<strong>：悬停</strong>复选框。背景颜色会像以前一样发生变化，即使您实际上并没有悬停在元素上。</p>
</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/css/imgs/set-hover.png" alt="在一个元素上切换悬停的伪节点"><strong>图5</strong>。<code>:hover</code>在一个元素上切换伪节点</p>
<h2 id="更改元素的尺寸"><a href="#更改元素的尺寸" class="headerlink" title="更改元素的尺寸"></a>更改元素的尺寸</h2><p>在“ <strong>样式</strong> ”选项卡中使用“ <strong>框模型”</strong>交互图更改元素的宽度，高度，填充，边距或边框长度。<em>**</em></p>
<p><strong>注意：</strong>在执行此操作之前，先完成“ <a href="https://developers.google.com/web/tools/chrome-devtools/css/#view" target="_blank" rel="external">查看”一个元素的CSS</a>教程。</p>
<ol>
<li><p>右键单击<code>Change My Margin!</code>下面的元素，然后选择<strong>Inspect</strong>。</p>
<p>​</p>
</li>
<li><p>在“ <strong>样式</strong> ”选项卡中的“ <strong>框模型”</strong>图中，将鼠标悬停在 <strong>填充上</strong>。元素的边距在视口中突出显示。<strong><em>**</em></strong></p>
<p>​</p>
<p><strong>注意</strong>：根据您的DevTools窗口的大小，您可能需要滚动到“ <strong>样式</strong> ”选项卡的底部以查看“ <strong>框模型”</strong>。</p>
<p>​</p>
</li>
<li><p>双击<strong>Box Model</strong>中的左边距，该<strong>模型</strong>当前具有一个值，<code>-</code>即该元素没有左边距。</p>
</li>
<li><p>键入<code>100</code>并按Enter。所述<strong>盒模型</strong>默认为像素，但它也接受其他值，例如<code>25%</code>，或<code>10vw</code>。</p>
</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/css/imgs/show-padding.png" alt="悬停在元素的填充上"><strong>图6</strong>。悬停在元素的填充上</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/css/imgs/change-margin.png" alt="更改元素的左边距"><strong>图7</strong>。更改元素的左边距</p>
<h1 id="编辑样式"><a href="#编辑样式" class="headerlink" title="编辑样式"></a>编辑样式</h1><p>使用 <strong>Styles</strong> 窗格可以修改与元素关联的 CSS 样式。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/styles-pane.png" alt="Styles 窗格"></p>
<h3 id="TL-DR-9"><a href="#TL-DR-9" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>利用 Styles 窗格，您可以在本地以尽可能多的方法更改 CSS，包括修改现有样式、添加新样式，以及为样式添加规则。</li>
<li>如果您希望样式可以保持（不会在重新加载后消失），则需要将其保存到您的开发工作区中。</li>
</ul>
<h2 id="检查应用到元素的样式"><a href="#检查应用到元素的样式" class="headerlink" title="检查应用到元素的样式"></a>检查应用到元素的样式</h2><p><a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-dom#inspect-an-element" target="_blank" rel="external">选择一个元素</a>以检查其样式。 <strong>Styles</strong> 窗格可以显示应用到选定元素的 CSS 规则，优先级从高到低：</p>
<ul>
<li>顶端为 <code>element.style</code>。这些样式要么直接使用样式属性（例如 <code>&lt;p style=&quot;color:green&quot;&gt;</code>）直接应用到元素，要么在 DevTools 中应用。</li>
<li>下方是与元素匹配的任何 CSS 规则。例如，在下面的屏幕截图中，选定元素从 <code>tools.css</code> 中定义的规则接收 <code>line-height:24px</code>。</li>
<li>再下方是继承的样式，其中包括与选定元素的祖先实体匹配的任何可继承样式规则。 例如，在下面的屏幕截图中，选定元素从 <code>user agent stylesheet</code> 继承 <code>display:list-item</code>。</li>
</ul>
<p>下图上的标签与其下方带编号的项目对应。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/styles-annotated.png" alt="带标注的 Styles 窗格"></p>
<ol>
<li>与元素匹配的选择器的关联样式。</li>
<li><a href="http://meiert.com/en/blog/20070922/user-agent-style-sheets/" target="_blank" rel="external">User Agent 样式表</a>清晰标记，并且在网页上经常被 CSS 替换。</li>
<li>已被<strong>级联规则</strong>替换的规则将显示为带删除线的文本。</li>
<li><strong>继承的</strong>样式将在“Inherited from <code>&lt;NODE&gt;</code>”标头下显示为一组。点击标头中的 DOM 节点可以导航到其在 DOM 树视图中的位置。 （<a href="http://www.w3.org/TR/CSS21/propidx.html" target="_blank" rel="external">CSS 2.1 属性表</a>显示了哪些属性是可以继承的。）</li>
<li>灰色的条目不是已定义的规则，而是<strong>在运行时计算的</strong>规则。</li>
</ol>
<p>了解级联和继承的原理对于调试样式至关重要。 级联与 CSS 声明被赋予的权重有关，权重用于确定规则在与其他规则重叠时哪些规则的优先级更高。 继承与 HTML 元素如何从其所属元素（祖先实体）继承 CSS 属性有关。 如需了解详情，请参阅<a href="http://www.w3.org/TR/CSS2/cascade.html" target="_blank" rel="external">有关级联的 W3C 文档</a>。</p>
<h2 id="检查受选择器影响的元素"><a href="#检查受选择器影响的元素" class="headerlink" title="检查受选择器影响的元素"></a>检查受选择器影响的元素</h2><p>在 <strong>Styles</strong> 窗格中将鼠标悬停在 CSS 选择器上可以查看受该选择器影响的所有元素。 例如，在下面的屏幕截图中，鼠标悬停在选择器 <code>.wf-tools-guide__section-link a</code> 上。在实时页面中，您可以看到受选择器影响的所有 <code>&lt;a&gt;</code> 元素。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/selector-hover.png" alt="查看受选择器影响的元素"></p>
<p><strong>注</strong>：此功能仅突出显示视口中的元素；视口以外的其他元素也可能受选择器影响。</p>
<h2 id="添加、启用和停用-CSS-类"><a href="#添加、启用和停用-CSS-类" class="headerlink" title="添加、启用和停用 CSS 类"></a>添加、启用和停用 CSS 类</h2><p>点击 <strong>.cls</strong> 按钮可以查看与当前选定元素关联的所有 CSS 类。 从这里，您可以执行以下操作：</p>
<ul>
<li>启用或停用当前与元素关联的类。</li>
<li>向元素添加新类。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/classes.png" alt="classes 窗格"></p>
<h2 id="编辑现有属性名称或值"><a href="#编辑现有属性名称或值" class="headerlink" title="编辑现有属性名称或值"></a>编辑现有属性名称或值</h2><p>点击 CSS 属性名称或值可以对其进行编辑。在名称或值突出显示时，按 Tab 可以向前移动到下一个属性、名称或选择器。</p>
<p>按 Shift+Tab 可以向后移动。</p>
<p>编辑数字式 CSS 属性值时，可以使用下面的键盘快捷键增大和减小值：</p>
<ul>
<li>使用向上键和向下键能够以 1 为增量增大和减小值（如果当前值介于 -1 和 1 之间，则增量为 0.1）。</li>
<li>使用 Alt+向上键和 Alt+向下键能够以 0.1 为增量增大和减小值。</li>
<li>使用 Shift+向上键能够以 10 为增量增大值；使用 Shift+向下键能够以 10 为增量减小值。</li>
<li>使用 Shift+Page Up（Windows、Linux）或 Shift+Function+向上键 (Mac) 能够以 100 为增量增大值。使用 Shift+Page Down（Windows、Linux）或 Shift+Function+向下键 (Mac) 能够以 100 为增量减小值。</li>
</ul>
<h2 id="添加新属性声明"><a href="#添加新属性声明" class="headerlink" title="添加新属性声明"></a>添加新属性声明</h2><p>点击可编辑 CSS 规则中的空白处可以创建一个新声明。 键入，或者将 CSS 粘贴到 <strong>Styles</strong> 窗格中。属性及其值将解析并输入到正确的字段中。</p>
<p>注：要启用或停用样式声明，请选中或取消选中旁边的复选框。</p>
<h2 id="添加样式规则"><a href="#添加样式规则" class="headerlink" title="添加样式规则"></a>添加样式规则</h2><p>点击 <strong>New Style Rule</strong> (<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/new-style-rule.png" alt="New Style Rule 按钮">) 按钮可以添加一个新的 CSS 规则。</p>
<p>点击并按住按钮可以选择要向哪一个样式表添加规则。</p>
<h2 id="添加或移除动态样式（伪类）"><a href="#添加或移除动态样式（伪类）" class="headerlink" title="添加或移除动态样式（伪类）"></a>添加或移除动态样式（伪类）</h2><p>您可以在元素上手动设置动态伪类选择器（例如 <code>:active</code>、<code>:focus</code>、<code>:hover</code> 和 <code>:visited</code>）。</p>
<p>可以通过两种方式在元素上设置动态状态：</p>
<ul>
<li>在 <strong>Elements</strong> 面板内右键点击某个元素，然后从菜单中选择目标伪类，将其启用或停用。 <img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/pseudoclass-rightclick.png" alt="右键点击元素以启用伪类选择器"></li>
<li>在 <strong>Elements</strong> 面板中选择元素，然后在 <strong>Styles</strong> 窗格中点击 <strong>:hov</strong> 按钮，使用复选框启用或停用当前选定元素的选择器。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/hov.png" alt=":hov 窗格"></p>
<h2 id="向样式规则添加背景色或颜色"><a href="#向样式规则添加背景色或颜色" class="headerlink" title="向样式规则添加背景色或颜色"></a>向样式规则添加背景色或颜色</h2><p><strong>Styles</strong> 窗格提供了一个用于向样式规则添加 <code>color</code> 和 <code>background-color</code> 声明的快捷方式。</p>
<p>样式规则的右下角有一个由三个点组成的图标。您需要将鼠标悬停到样式规则上才能看到这个图标。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/rule-set-three-dots-icon.png" alt="规则集中的三点图标"></p>
<p>将鼠标悬停到此图标上可以调出用于添加 <code>color</code> 声明 (<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/add-color.png" alt="添加 color 声明">) 或 <code>background-color</code> 声明 (<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/add-background-color.png" alt="添加 background-color 声明">) 的按钮。点击这些按钮之一可以将声明添加到样式规则中。</p>
<h2 id="使用-Color-Picker-修改颜色"><a href="#使用-Color-Picker-修改颜色" class="headerlink" title="使用 Color Picker 修改颜色"></a>使用 Color Picker 修改颜色</h2><p>要打开 <strong>Color Picker</strong>，请在 <strong>Styles</strong> 窗格中查找一个定义颜色的 CSS 声明（例如 <code>color: blue</code>）。 声明值的左侧有一个带颜色的小正方形。 正方形的颜色与声明值匹配。 点击小正方形可以打开 <strong>Color Picker</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/open-color-picker.jpg" alt="打开 Color Picker"></p>
<p>您可以通过多种方式与 <strong>Color Picker</strong> 交互：</p>
<ol>
<li><strong>取色器</strong>。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-styles#eyedropper" target="_blank" rel="external">取色器</a>了解更多信息。</li>
<li><strong>当前颜色</strong>。<strong>当前值</strong>的可视表示。</li>
<li><strong>当前值</strong>。<strong>当前颜色</strong>的十六进制、RGBA 或 HSL 表示。</li>
<li><strong>调色板</strong>。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-styles#color-palettes" target="_blank" rel="external">调色板</a>了解更多信息。</li>
<li><strong>着色和阴影选择器</strong>。</li>
<li><strong>色调选择器</strong>。</li>
<li><strong>不透明度选择器</strong>。</li>
<li><strong>颜色值选择器</strong>。点击可以在 RGBA、HSL 和十六进制之间切换。</li>
<li><strong>调色板选择器</strong>。点击可以选择不同的模板。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/annotated-color-picker.jpg" alt="带标注的 Color Picker"></p>
<h3 id="取色器"><a href="#取色器" class="headerlink" title="取色器"></a>取色器</h3><p>点击<strong>取色器</strong>按钮将其启用 (<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/eyedropper-enabled.png" alt="启用的取色器">)，在实时页面上将鼠标悬停到某种颜色上，然后点击，将当前选定的声明值设置为您悬停的颜色。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/eyedropper.jpg" alt="取色器实例"></p>
<h3 id="调色板"><a href="#调色板" class="headerlink" title="调色板"></a>调色板</h3><p><strong>Color Picker</strong> 提供了下列调色板：</p>
<ul>
<li><strong>Page Colors</strong>。一组从页面的 CSS 自动生成的颜色。</li>
<li><strong>Material Design</strong>。一组符合 <a href="https://www.google.com/design/spec/style/color.html" target="_blank" rel="external">Material Design 规范</a>的颜色。</li>
<li><strong>Custom</strong>。您选择的任意一组颜色。DevTools 可以保存您的自定义调色板（甚至在不同的页面间），直至您将其删除。</li>
</ul>
<h4 id="修改自定义调色板"><a href="#修改自定义调色板" class="headerlink" title="修改自定义调色板"></a>修改自定义调色板</h4><p>按<strong>加号</strong>按钮可以将当前颜色添加到调色板中。 点击并按住颜色可以将其拖动到不同的位置，或者将其拖动到<strong>垃圾桶</strong>图标进行删除。 右键点击颜色并选择 <strong>Remove color</strong> 可以将其删除。 选择 <strong>Remove all to the right</strong> 可以删除当前选定颜色右侧的所有颜色。 右键点击调色板区域中的任何位置，然后选择 <strong>Clear template</strong> 可以删除模板的所有颜色。</p>
<h2 id="查看和编辑-CSS-自定义属性（CSS-变量）"><a href="#查看和编辑-CSS-自定义属性（CSS-变量）" class="headerlink" title="查看和编辑 CSS 自定义属性（CSS 变量）"></a>查看和编辑 CSS 自定义属性（CSS 变量）</h2><p>您可以查看和编辑定义或使用 <a href="https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care" target="_blank" rel="external">CSS 自定义属性</a>（之前称为 CSS 变量）的声明，就像查看和编辑任何其他声明一样。</p>
<p>自定义属性通常在 <code>:root</code> 选择器中<a href="https://drafts.csswg.org/css-variables/#defining-variables" target="_blank" rel="external">定义</a>。 要查看在 <code>:root</code> 中定义的自定义属性，请检查 <code>html</code> 元素。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/css-var-defined-on-root.png" alt=":root 上定义的自定义属性"></p>
<p>不过，并不一定要在 <code>:root</code> 选择器上定义自定义属性。如果您在其他地方定义，请在定义元素的地方检查元素以查看定义。</p>
<p>您可以查看和编辑使用自定义属性的声明值，就像查看和编辑任何其他声明值一样。</p>
<p>如果您看到一个像 <code>var(--main-color)</code> 一样的声明值（如下面的屏幕截图所示），则表示声明正在使用自定义属性。 可以像编辑任何其他声明值一样编辑这些值。 目前，没有办法跳转到自定义属性定义。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/css-var-in-use.png" alt="使用自定义属性"></p>
<h2 id="编辑-Sass、Less-或-Stylus"><a href="#编辑-Sass、Less-或-Stylus" class="headerlink" title="编辑 Sass、Less 或 Stylus"></a>编辑 Sass、Less 或 Stylus</h2><p>如果您在使用 Sass、Less、Stylus 或任何其他 CSS 预处理器，则在 Styles 编辑器中编辑生成的 CSS 输出文件不会有任何作用，因为它们不会映射到您的源代码。</p>
<p>借助 CSS 源映射，DevTools 可以将生成的文件自动映射到源代码文件，这样，您可以在 Sources 面板中实时编辑这些文件并查看结果，而不用离开 DevTools 或刷新页面。</p>
<h3 id="预处理器工作流"><a href="#预处理器工作流" class="headerlink" title="预处理器工作流"></a>预处理器工作流</h3><p>在检查样式由生成的 CSS 文件提供的元素时，Elements 面板会显示原始的源文件而不是生成的 CSS 文件的链接。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/sass-debugging.png" alt="显示 .scss 样式表的 Elements 面板"></p>
<p>要跳转到源文件，请执行以下操作：</p>
<ol>
<li>点击链接，在 Sources 面板中打开（可编辑）源文件。</li>
<li>Ctrl + <strong>点击</strong>（或 Cmd + <strong>点击</strong>）任何 CSS 属性名称或值，打开源文件并跳转到相应行。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/sass-sources.png" alt="显示 .scss 文件的 Sources 面板"></p>
<p>在 DevTools 中保存对 CSS 预处理器文件的更改时，CSS 预处理器应重新生成 CSS 文件。然后，DevTools 将重新加载新生成的 CSS 文件。</p>
<h3 id="启用-停用-CSS-源映射和自动重新加载"><a href="#启用-停用-CSS-源映射和自动重新加载" class="headerlink" title="启用/停用 CSS 源映射和自动重新加载"></a>启用/停用 CSS 源映射和自动重新加载</h3><p><strong>默认情况下，CSS 源映射处于启用状态</strong>。您可以选择启用生成的 CSS 文件的自动重新加载。要启用 CSS 源映射和 CSS 重新重新加载，请执行以下操作：</p>
<ol>
<li>打开 DevTools 的 Settings 面板并点击 <strong>General</strong>。</li>
<li>开启 <strong>Enable CSS source maps</strong> 和 <strong>Auto-reload generated CSS</strong>。</li>
</ol>
<h3 id="要求和问题"><a href="#要求和问题" class="headerlink" title="要求和问题"></a>要求和问题</h3><ul>
<li>DevTools 无法检测到<strong>在外部编辑器中进行的更改</strong>，直至包含关联的源文件的 Sources 标签重新获得焦点。</li>
<li><strong>手动修改 Sass/LESS/其他编译器生成的 CSS 文件</strong>将中断源映射关联，直至页面重新加载。</li>
<li><strong>使用工作区？</strong>确保生成的 CSS 文件同时映射到工作区中。为此，您可以查看 Sources 面板右侧树，确定 CSS 是从您的本地文件夹提供。</li>
<li><strong>要使 DevTools 在您更改源文件时自动重新加载样式</strong>，必须将您的预处理器设置为在源文件每次发生更改时都重新生成 CSS 文件。否则，您必须手动重新生成 CSS 文件并重新加载页面才能看到更改。</li>
<li><strong>您必须从网络服务器访问您的网站或应用</strong>（不是从 <strong>file://</strong> 网址），服务器必须提供 CSS 文件，以及源映射 (.css.map) 和源文件 (.scss, etc.)。</li>
<li>如果您<em>未</em>使用“工作区”功能，网络服务器还必须提供 <code>Last-Modified</code> 标头。</li>
</ul>
<p>在<a href="https://developers.google.com/web/tools/setup/setup-preprocessors" target="_blank" rel="external">设置 CSS 与 JS 预处理器</a>中了解如何设置源映射。</p>
<h1 id="检查动画"><a href="#检查动画" class="headerlink" title="检查动画"></a>检查动画</h1><p>使用 Chrome DevTools 动画检查器检查和修改动画。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/animation-inspector.png" alt="动画检查器"></p>
<h3 id="TL-DR-10"><a href="#TL-DR-10" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>通过打开动画检查器捕捉动画。检查器会自动检测动画并将它们分类为多个组。</li>
<li>通过慢速播放、重播或查看动画源代码来检查动画。</li>
<li>通过更改动画时间、延迟、持续时间或关键帧偏移修改动画。</li>
</ul>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Chrome DevTools 动画检查器有两个主要用途。</p>
<ul>
<li>检查动画。您希望慢速播放、重播或检查动画组的源代码。</li>
<li>修改动画。您希望修改动画组的时间、延迟、持续时间或关键帧偏移。 当前不支持编辑贝塞尔曲线和关键帧。</li>
</ul>
<p>动画检查器支持 CSS 动画、CSS 过渡和网络动画。当前不支持 <code>requestAnimationFrame</code> 动画。</p>
<h3 id="什么是动画组？"><a href="#什么是动画组？" class="headerlink" title="什么是动画组？"></a>什么是动画组？</h3><p>动画组是一组<em>看上去</em>彼此相关的动画。 当前，网页没有真正概念的组动画，动画设计师和开发者必须编排和设置各个动画的时间，让它们看上去有一种连贯的视觉效果。动画检查器会根据开始时间（不包括延迟等等）预测哪些动画相关并将它们并排分组。也就是说，全部在同一脚本块中触发的一组动画被分为一组，但如果是异步的，它们将单独分组。</p>
<h2 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h2><p>可以通过两种方式打开动画检查器：</p>
<ul>
<li>转到 <strong>Styles</strong> 窗格（位于 <strong>Elements</strong> 面板上），然后按 <strong>Animations</strong> 按钮（<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/animations-button.png" alt="Animations 按钮">）。</li>
<li>打开 Command Menu，键入 <code>Drawer: Show Animations</code>。</li>
</ul>
<p>动画检查器将在 Console 抽屉旁作为标签打开。由于检查器是一个是抽屉式导航栏标签，您可以从任何 DevTools 面板打开它。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/empty-ai.png" alt="空的动画检查器"></p>
<p>动画检查器分为四个主要部分（或窗格）。本指南使用以下名称指代各个窗格：</p>
<ol>
<li><strong>Controls</strong>。从这里，您可以清除所有当前捕捉的动画组，或者更改当前选定动画组的速度。</li>
<li><strong>Overview</strong>。在这里选择动画组，然后在 <strong>Details</strong> 窗格中进行检查和修改。</li>
<li><strong>Timeline</strong>。 从这里暂停和开始动画，或者跳到动画中的特定点。</li>
<li><strong>Details</strong>。 检查和修改当前选定的动画组。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/annotated-animation-inspector.png" alt="注解动画检查器"></p>
<p>要捕捉动画，只需在动画检查器打开时执行可以触发动画的交互。 如果动画在页面加载时触发，您可以重新加载页面，帮助动画检查器检测动画。</p>
<h2 id="检查动画-1"><a href="#检查动画-1" class="headerlink" title="检查动画"></a>检查动画</h2><p>捕捉动画后，可以通过以下几种方式重播动画：</p>
<ul>
<li>在 <strong>Overview</strong> 窗格中将鼠标悬停在动画的缩略图上方，查看它的预览。</li>
<li>从 <strong>Overview</strong> 窗格中选择动画组（这样，动画组就会显示在 <strong>Details</strong> 窗格中），然后按 <strong>replay</strong> 按钮（<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/replay-button.png" alt="replay 按钮">）。动画会在视口中重播。点击 <strong>animation speed</strong> 按钮（<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/animation-speed-buttons.png" alt="animation speed 按钮">）更改当前选定动画组的预览速度。您可以使用红色的垂直条更改当前位置。</li>
<li>点击并拖动红色的垂直条以拖拽视口动画。</li>
</ul>
<h3 id="查看动画详细信息"><a href="#查看动画详细信息" class="headerlink" title="查看动画详细信息"></a>查看动画详细信息</h3><p>捕捉动画组后，在 <strong>Overview</strong> 窗格点击动画组可以查看其详细信息。 在 <strong>Details</strong> 窗格中，每个动画会单独成行。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/animation-group-details.png" alt="动画组详情"></p>
<p>将鼠标悬停在动画上可以在视口中突出显示该动画。点击动画，在 <strong>Elements</strong> 面板中将其选中。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/highlight-animation.png" alt="将鼠标悬停在动画上，使其在视口中突出显示"></p>
<p>动画最左侧的深色部分是其定义。右侧的浅色部分表示重复。 例如，在下方的屏幕截图中，第二和第三部分表示第一部分的重复。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/animation-iterations.png" alt="动画重复示意图"></p>
<p>如果两个元素应用了同一个动画，动画检查器会给它们分配相同的颜色。 颜色本身是随机的且没有意义。例如，在下方的屏幕截图中，两个元素 <code>div.eye.left::after</code> 和 <code>div.eye.right::after</code> 已应用了同一个动画 (<code>eyes</code>)，<code>div.feet::before</code> 和 <code>div.feet::after</code> 元素也同样如此。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/color-coded-animations.png" alt="带有彩色编码的动画"></p>
<h2 id="修改动画"><a href="#修改动画" class="headerlink" title="修改动画"></a>修改动画</h2><p>可以通过以下三种方式使用动画检查器修改动画：</p>
<ul>
<li>动画持续时间。</li>
<li>关键帧时间。</li>
<li>开始时间延迟。</li>
</ul>
<p>对于本部分，假设下面的屏幕截图代表原始动画：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/modify-original.png" alt="修改之前的原始动画"></p>
<p>要更改动画的持续时间，请点击并拖动第一个或最后一个圆圈。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/modify-duration.png" alt="修改的持续时间"></p>
<p>如果动画定义了任何关键帧规则，那么这些将表示为白色内圈。 点击并拖动其中一个以更改关键帧的时间。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/modify-keyframe.png" alt="修改的关键帧"></p>
<p>要为动画添加延迟，请点击并将其拖动至圆圈以外的任何位置。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/modify-delay.png" alt="修改的延迟"></p>
<h1 id="编辑-DOM"><a href="#编辑-DOM" class="headerlink" title="编辑 DOM"></a>编辑 DOM</h1><p>Chrome DevTools 的 Elements 面板中的 DOM 树视图可以显示当前网页的 DOM 结构。通过 DOM 更新实时修改页面的内容和结构。</p>
<h3 id="TL-DR-11"><a href="#TL-DR-11" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>DOM 定义您的页面结构。每一个 DOM 节点都是一个页面元素，例如，标题节点或段落节点。</li>
<li>通过渲染的 DOM 实时编辑页面的内容和结构。</li>
<li>不过请记住，您无法在 Elements 面板中通过 DOM 更改修改源文件。重新加载页面会清空任何 DOM 树修改。</li>
<li>使用 DOM 断点留意 DOM 更改。</li>
</ul>
<h2 id="检查元素"><a href="#检查元素" class="headerlink" title="检查元素"></a>检查元素</h2><p>使用 <strong>Elements</strong> 面板可以在一个 DOM 树中检查页面中的所有元素。 选择任何元素并检查应用到该元素的样式。</p>
<p>可以通过多种方式检查元素：</p>
<p>右键点击页面上的任何元素并选择 <strong>Inspect</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/right-click-inspect.png" alt="通过右键点击检查元素"></p>
<p>按 Ctrl + Shift + C (Windows) 或 Cmd + Shift + C (Mac)，在 Inspect Element 模式下打开 DevTools，然后将鼠标悬停到某个元素上。 DevTools 会在 <strong>Elements</strong> 面板中自动突出显示您悬停的元素。点击元素可以退出检查模式，同时保持元素在 <strong>Elements</strong> 面板中处于突出显示状态。</p>
<p>点击 <strong>Inspect Element</strong> 按钮 <img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/inspect-icon.png" alt="Inspect 图标"> 转到 Inspect Element 模式，然后点击元素。</p>
<p>在控制台中使用 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/command-line/command-line-reference#inspect" target="_blank" rel="external"><code>inspect</code></a> 方法，例如 <code>inspect(document.body)</code>。</p>
<h2 id="DOM-导航"><a href="#DOM-导航" class="headerlink" title="DOM 导航"></a>DOM 导航</h2><p>使用您的鼠标或键盘在 DOM 结构中导航。</p>
<p>折叠的节点的旁边会有一个向右箭头：<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/collapsed-node.png" alt="折叠的节点"></p>
<p>展开的节点的旁边会有一个向下箭头：<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/expanded-node.png" alt="展开的节点"></p>
<p>使用鼠标：</p>
<ul>
<li>点击一次可以突出显示节点。</li>
<li>要展开节点，请双击节点上的任何地方，或者点击节点旁边的箭头。</li>
<li>要折叠节点，请点击节点旁边的箭头。</li>
</ul>
<p>使用键盘：</p>
<ul>
<li>按<strong>向上箭头</strong>键可以选择当前节点上方的节点。</li>
<li>按<strong>向下箭头</strong>可以选择当前节点下方的节点。</li>
<li>按<strong>向右箭头</strong>键可以展开折叠的节点。再按一次可以移动到（已展开）节点的第一个子级。 您可以使用此方法快速导航到深度嵌套的节点。</li>
</ul>
<h3 id="面包屑导航记录导航"><a href="#面包屑导航记录导航" class="headerlink" title="面包屑导航记录导航"></a>面包屑导航记录导航</h3><p>Elements 面板的底部是面包屑导航记录。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/breadcrumb-body.png" alt="面包屑导航记录"></p>
<p>当前选定的节点将以蓝色突出显示。左侧是当前节点的父级。 再左侧是父级的父级。以此类推，一直到 DOM 树。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/breadcrumb-footer.png" alt="扩展面包屑导航记录"></p>
<p>在结构中向上导航会移动突出显示焦点：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/breadcrumb-trail.png" alt="面包屑导航记录向上导航"></p>
<p>DevTools 会在记录中显示尽可能多的项目。如果状态栏无法显示全部记录，将在记录截断的地方显示一个省略号 (…)。点击省略号可以显示隐藏的元素：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/breadcrumb-ellipsis.png" alt="面包屑导航省略号"></p>
<h2 id="编辑-DOM-节点和属性"><a href="#编辑-DOM-节点和属性" class="headerlink" title="编辑 DOM 节点和属性"></a>编辑 DOM 节点和属性</h2><p>要编辑 DOM 节点名称或属性，请执行以下操作：</p>
<ul>
<li>直接在节点名称或属性上双击。</li>
<li>突出显示节点，按 Enter，然后按 Tab， 直到选中名称或属性。</li>
<li>打开 <a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-dom#more-actions" target="_blank" rel="external">more actions 菜单</a> 并选择 <strong>Add Attribute</strong> 或 <strong>Edit Attribute</strong>。 <strong>Edit Attribute</strong> 取决于上下文；您点击的部分决定要编辑的内容。</li>
</ul>
<p>完成后，结束标记将自动更新。</p>
<h3 id="以-HTML-形式编辑-DOM-节点及其子级"><a href="#以-HTML-形式编辑-DOM-节点及其子级" class="headerlink" title="以 HTML 形式编辑 DOM 节点及其子级"></a>以 HTML 形式编辑 DOM 节点及其子级</h3><p>要以 HTML 形式编辑 DOM 节点及其子级，请执行以下操作：</p>
<ul>
<li>打开 <a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-dom#more-actions" target="_blank" rel="external">more actions 菜单</a>并选择 <strong>Edit as HTML</strong>。</li>
<li>按 F2 (Windows / Linux) 或 Fn+F2 (Mac)。</li>
<li>按 Ctrl+Enter (Windows / Linux) 或 Cmd+Enter (Mac) 保存更改。</li>
<li>按 Esc 可以退出编辑器而不保存。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/edit-as-html.png" alt="以 HTML 形式编辑"></p>
<h2 id="移动-DOM-节点"><a href="#移动-DOM-节点" class="headerlink" title="移动 DOM 节点"></a>移动 DOM 节点</h2><p>点击、按住并拖动节点可将其移动。</p>
<h2 id="删除-DOM-节点"><a href="#删除-DOM-节点" class="headerlink" title="删除 DOM 节点"></a>删除 DOM 节点</h2><p>要删除 DOM 节点，请执行以下操作：</p>
<ul>
<li>打开 <a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-dom#more-actions" target="_blank" rel="external">more actions 菜单</a>并选择 <strong>Delete Node</strong>。</li>
<li>选择节点并按 Delete 键。</li>
</ul>
<p>注：如果您意外删除了节点，按 Ctrl + Z（Mac 上为 Cmd + Z）可以撤消您的上一步操作。</p>
<h2 id="显示-more-actions-菜单"><a href="#显示-more-actions-菜单" class="headerlink" title="显示 more actions 菜单"></a>显示 more actions 菜单</h2><p>利用 <strong>more actions</strong> 菜单，您可以通过多种方式与 DOM 节点交互。 要查看该菜单，请右键点击节点，或者选择节点，然后按 <strong>more actions</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/more-actions-button.png" alt="more action 按钮">))。按钮仅在当前选定的元素上显示。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/more-actions-menu.png" alt="more actions 菜单"></p>
<h2 id="滚动到视图"><a href="#滚动到视图" class="headerlink" title="滚动到视图"></a>滚动到视图</h2><p>悬停或选择 DOM 节点时，渲染的节点将在视口中突出显示。 如果节点滚动到屏幕以外，在节点位于当前视口上方时您将在视口顶部看到提示，而在节点位于当前视口下方时，您将在底部看到提示。例如，在下方的屏幕截图中，DevTools 指出 <strong>Elements</strong> 面板中当前选定的节点位于视口以下。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/below-viewport.png" alt="视口下的元素"></p>
<p>要滚动页面使节点在视口中显示，请<strong>右键点击</strong>节点并选择 <strong>Scroll into View</strong>。</p>
<h2 id="设置-DOM-断点"><a href="#设置-DOM-断点" class="headerlink" title="设置 DOM 断点"></a>设置 DOM 断点</h2><p>设置 DOM 断点以调试复杂的 JavaScript 应用。例如，如果您的 JavaScript 正在更改 DOM 元素的样式，请将 DOM 断点设置为在元素属性修改时触发。在发生以下一种 DOM 更改时触发断点：子树更改、属性更改、节点移除。</p>
<h3 id="子树修改"><a href="#子树修改" class="headerlink" title="子树修改"></a>子树修改</h3><p>添加、移除或移动子元素时将触发子树修改断点。例如，如果您在 <code>main-content</code> 元素上设置子树修改，以下代码将触发断点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var element = document.getElementById(&apos;main-content&apos;);</div><div class="line">//modify the element&apos;s subtree.</div><div class="line">var mySpan = document.createElement(&apos;span&apos;);</div><div class="line">element.appendChild( mySpan );</div></pre></td></tr></table></figure>
<h3 id="属性修改"><a href="#属性修改" class="headerlink" title="属性修改"></a>属性修改</h3><p>动态更改元素的属性 (<code>class, id, name</code>) 时将发生属性修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var element = document.getElementById(&apos;main-content&apos;);</div><div class="line">// class attribute of element has been modified.</div><div class="line">element.className = &apos;active&apos;;</div></pre></td></tr></table></figure>
<h3 id="节点移除"><a href="#节点移除" class="headerlink" title="节点移除"></a>节点移除</h3><p>从 DOM 中移除有问题的节点时将触发节点移除修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementById(&apos;main-content&apos;).remove();</div></pre></td></tr></table></figure>
<h2 id="与-DOM-断点交互"><a href="#与-DOM-断点交互" class="headerlink" title="与 DOM 断点交互"></a>与 DOM 断点交互</h2><p>Elements 和 Sources 面板均包含一个用于管理 DOM 断点的窗格。</p>
<p>每个断点都会列出元素标识符和断点类型。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/dom-breakpoints-pane.png" alt="DOM breakpoints 窗格"></p>
<p>可通过以下方式之一与列出的每一个断点交互：</p>
<ul>
<li><strong>悬停</strong>在元素标识符上可以显示元素在页面上的相应位置（类似于在 Elements 面板中悬停在节点上）。</li>
<li><strong>点击</strong>元素可以将其在 Elements 面板中选中。</li>
<li><strong>切换</strong>复选框可以启用或停用断点。</li>
</ul>
<p>触发 DOM 断点时，断点将在 DOM Breakpoints 窗格中突出显示。 <strong>Call Stack</strong> 窗格将显示调试程序暂停的<strong>原因</strong>：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/breakpoint-reason.png" alt="断点原因"></p>
<h2 id="查看元素事件侦听器"><a href="#查看元素事件侦听器" class="headerlink" title="查看元素事件侦听器"></a>查看元素事件侦听器</h2><p>在 <strong>Event Listeners</strong> 窗格中查看与 DOM 节点关联的 JavaScript 事件侦听器。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/event-listeners-pane.png" alt="Event Listeners 面板"></p>
<p>Event Listeners 窗格中的顶级项目将显示具有已注册侦听器的事件类型。</p>
<p>点击事件类型（例如 <code>click</code>）旁的箭头可以查看已注册事件处理程序的列表。 每个处理程序都由一个类似于 CSS 选择器的元素标识符标识，例如 <code>document</code> 或 <code>button#call-to-action</code>。如果已为相同元素注册多个处理程序，将重复列示元素。</p>
<p>点击元素标识符旁的展开箭头可以查看事件处理程序的属性。Event Listeners 窗格将列出每个侦听器的以下属性：</p>
<table>
<thead>
<tr>
<th>事件侦听器属性和说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>handler</code></td>
<td>包含一个回调函数。右键点击函数并选择 <strong>Show Function Definition</strong> 可以查看函数的定义位置（如果源代码可用）。</td>
</tr>
<tr>
<td><code>useCapture</code></td>
<td>指示 <code>addEventListener</code> 上的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener" target="_blank" rel="external">useCapture</a> 标志是否设置的布尔值。</td>
</tr>
</tbody>
</table>
<p>注：许多 Chrome 扩展程序都会将其自己的事件侦听器添加到 DOM 上。如果您看到一些不是由您的代码设置的事件侦听器，您可能希望在<a href="https://support.google.com/chrome/answer/95464" target="_blank" rel="external">隐身窗口</a>中重新打开页面。默认情况下，隐身窗口会阻止扩展程序运行。</p>
<h3 id="查看祖先实体事件侦听器"><a href="#查看祖先实体事件侦听器" class="headerlink" title="查看祖先实体事件侦听器"></a>查看祖先实体事件侦听器</h3><p>如果启用 <strong>Ancestors</strong> 复选框，除了当前选定节点的事件侦听器外，还会显示其祖先实体的事件侦听器。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/ancestors-enabled.png" alt="已启用祖先实体"></p>
<p>如果停用复选框，将仅显示当前选定节点的事件侦听器。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/ancestors-disabled.png" alt="已停用祖先实体"></p>
<h3 id="查看框架侦听器"><a href="#查看框架侦听器" class="headerlink" title="查看框架侦听器"></a>查看框架侦听器</h3><p>某些 JavaScript 框架和库会将原生 DOM 事件封装到它们的自定义事件 API 中。 过去，这会让使用 DevTools 检查事件侦听器非常困难，因为函数定义仅会引用框架或内容库代码。<strong>框架侦听器</strong>功能让这一问题迎刃而解。</p>
<p>启用 <strong>Framework listeners</strong> 复选框时，DevTools 会自动解析事件代码的框架或内容库封装部分，然后告诉您实际将事件绑定到代码中的位置。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/framework-listeners-enabled.png" alt="框架侦听器已启用"></p>
<p>如果停用 <strong>Framework listeners</strong> 复选框，事件侦听器代码很可能会在框架或内容库代码的其他地方解析。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/framework-listeners-disabled.png" alt="框架侦听器已停用"></p>
<h1 id="检查和管理存储、数据库与缓存"><a href="#检查和管理存储、数据库与缓存" class="headerlink" title="检查和管理存储、数据库与缓存"></a>检查和管理存储、数据库与缓存</h1><p>从 </p>
<p>Application</p>
<p> 面板检查和管理存储、数据库与缓存。</p>
<h3 id="TL-DR-12"><a href="#TL-DR-12" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>查看和修改本地存储与会话存储。</li>
<li>检查和修改 IndexedDB 数据库。</li>
<li>对 Web SQL 数据库执行语句。</li>
<li>查看应用缓存和服务工作线程缓存。</li>
<li>点击一次按钮即可清除所有存储、数据库、缓存和服务工作线程。</li>
</ul>
<h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>如果您使用<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="external">本地存储</a>存储键值对 (KVP)，则可以从 <strong>Local Storage</strong> 窗格中检查、修改和删除这些 KVP。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/local-storage.png" alt="Local Storage 窗格"></p>
<ul>
<li>双击键或值可以修改相应的值。</li>
<li>双击空白单元格可以添加新 KVP。</li>
<li>点击 KVP ，然后按 <strong>Delete</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/delete.png" alt="Delete 按钮">) 可以删除该 KVP。 只需点击一次按钮，即可从 <a href="https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#clear-storage" target="_blank" rel="external"><strong>Clear storage</strong> 窗格</a>擦除所有本地存储数据。</li>
<li>如果您使用一种可以创建、删除或修改 KVP 的方式与页面交互，则不会看到这些更改实时更新。 点击 <strong>refresh</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/refresh.png" alt="refresh 按钮">) 可以查看您的更改。</li>
</ul>
<h2 id="Session-storage"><a href="#Session-storage" class="headerlink" title="Session storage"></a>Session storage</h2><p><strong>Session Storage</strong> 窗格与 <strong>Local Storage</strong> 窗格的工作方式相同。 参阅上面的<a href="https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#local-storage" target="_blank" rel="external">本地存储</a>部分，了解如何查看和编辑<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="external">会话存储</a>。</p>
<h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><p>使用 <strong>IndexedDB</strong> 窗格可以检查、修改和删除 IndexedDB 数据。</p>
<p>展开 <strong>IndexedDB</strong> 窗格时，IndexedDB 下的第一个级别是数据库。 如果存在多个活动的数据库，您会看到多个条目。 在下面的屏幕截图中，页面只有一个活动的数据库。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/idb-tab.png" alt="indexeddb 标签"></p>
<p>点击数据库的名称可以查看该数据库的安全源、名称和版本。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/idb-db.png" alt="indexeddb 数据库"></p>
<p>展开数据库可以查看其键值对 (KVP)。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/idb-kvps.png" alt="indexeddb 键值对"></p>
<p>使用 <strong>Start from key</strong> 文本字段旁的箭头按钮可以在 KVP 的页面之间移动。</p>
<p>展开值并双击可以编辑该值。在您添加、修改或删除值时，这些更改不会实时更新。</p>
<p>点击 <strong>refresh</strong> 按钮可以更新数据库。 <img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/idb-edit.png" alt="编辑 indexeddb kvp"></p>
<p>在 <strong>Start from key</strong> 文本字段中输入键可以过滤出值小于该值的所有键。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/idb-filter.png" alt="过滤的 kvp"></p>
<p>在您添加、修改或删除值时，这些更改不会实时更新。 点击 <strong>refresh</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/refresh.png" alt="refresh 按钮">) 可以更新数据库。</p>
<p>点击 <strong>Clear Object Store</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/clear-object-store.png" alt="Clear Object Store">) 可以删除数据库中的所有数据。 从 <a href="https://developers.google.com/web/tools/chrome-devtools/manage-data/local-storage#clear-storage" target="_blank" rel="external"><strong>Clear storage</strong> 窗格</a>中，点击一次按钮注销服务工作线程并移除其他存储与缓存也可以实现此目标。</p>
<h2 id="Web-SQL"><a href="#Web-SQL" class="headerlink" title="Web SQL"></a>Web SQL</h2><p>使用 <strong>Web SQL</strong> 窗格可以查询和修改 Web SQL 数据库。</p>
<p>点击数据库名称可以打开该数据库的控制台。从这里，您可以对数据库执行语句。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/web-sql-console.png" alt="web sql 控制台"></p>
<p>点击数据库表可以查看该表的数据。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/web-sql-table.png" alt="web sql 表"></p>
<ul>
<li>您无法从这里更新值，但是可以通过数据库控制台（参见上文）更新。</li>
<li>点击列标题可以按该列排序表格。</li>
<li>您对表格的更改不会实时更新。点击 <strong>refresh</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/refresh.png" alt="refresh 按钮">) 可以查看更新。</li>
<li>在 <strong>Visibile columns</strong> 文本字段中输入一个由空格分隔或逗号分隔的列名称列表可以仅显示列表中包含的列。</li>
</ul>
<h2 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h2><p>使用 <strong>Application Cache</strong> 窗格可以检查通过 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache" target="_blank" rel="external">Application Cache API</a> 创建的资源和规则。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/appcache.png" alt="Application Cache 窗格"></p>
<p>每一行表示一个资源。</p>
<p><strong>Type</strong> 列的值为以下值之一：</p>
<ul>
<li><strong>Master</strong>。资源上指示此缓存为其主文件的 <code>manifest</code> 属性。</li>
<li><strong>Explicit</strong>。此资源在清单中明确列出。</li>
<li><strong>Network</strong>。指定此资源的清单必须来自网络。</li>
<li><strong>Fallback</strong>。<strong>Resource</strong> 列中的网址作为另一个网址（未在 DevTools 中显示）的回退网址形式列出。</li>
</ul>
<p>表格底部拥有指示网络连接和应用缓存状态的状态图标。 应用缓存可能拥有以下状态：</p>
<ul>
<li><strong>IDLE</strong>。缓存没有新更改。</li>
<li><strong>CHECKING</strong>。正在提取清单并检查有无更新。</li>
<li><strong>DOWNLOADING</strong>。正在将资源添加到缓存中。</li>
<li><strong>UPDATEREADY</strong>。存在新版本的缓存。</li>
<li><strong>OBSOLETE</strong>。正在删除缓存。</li>
</ul>
<h2 id="服务工作线程缓存-1"><a href="#服务工作线程缓存-1" class="headerlink" title="服务工作线程缓存"></a>服务工作线程缓存</h2><p>利用 <strong>Application</strong> 面板上的 <strong>Cache Storage</strong> 窗格，您可以检查、修改和调试使用（服务工作线程）Cache API 创建的缓存。 参阅下面的指南获取更多帮助。</p>
<h2 id="清除服务工作线程、存储、数据库和缓存"><a href="#清除服务工作线程、存储、数据库和缓存" class="headerlink" title="清除服务工作线程、存储、数据库和缓存"></a>清除服务工作线程、存储、数据库和缓存</h2><p>有时，您只需要擦除给定源的所有数据。利用 <strong>Application</strong> 面板上的 <strong>Clear Storage</strong> 窗格，您可以选择性地注销服务工作线程、存储和缓存。要清除数据，只需启用您想要擦除的组件旁的复选框，然后点击 <strong>Clear site data</strong>。操作将擦除 <strong>Clear storage</strong> 标签下所列源的所有数据。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/clear-storage.png" alt="clear storage"></p>
<h1 id="检查和删除-Cookie"><a href="#检查和删除-Cookie" class="headerlink" title="检查和删除 Cookie"></a>检查和删除 Cookie</h1><p>从 <strong>Application</strong> 面板检查和删除 Cookie。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/cookies.png" alt="Cookies 窗格"></p>
<h3 id="TL-DR-13"><a href="#TL-DR-13" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>查看与 Cookie 有关的详细信息，例如名称、值、网域和大小，等等。</li>
<li>删除单个 Cookie、选定网域的 Cookie 或所有网域的全部 Cookie。</li>
</ul>
<h2 id="概览-1"><a href="#概览-1" class="headerlink" title="概览"></a>概览</h2><p>使用 <strong>Cookies</strong> 窗格可以查看和删除 Cookie。您无法修改 Cookie 值。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/cookies.png" alt="Cookies 窗格"></p>
<p>Cookie 按网域列示。其中包括主文档和所有嵌套的框架。 选择一个“框架组”将显示该组中所有资源、所有框架的所有 Cookie。 请注意，这种分组方式有两个结果：</p>
<ul>
<li>来自不同网域的 Cookie 可能显示在相同的框架组中。</li>
<li>相同 Cookie 可能出现在多个框架组中。</li>
</ul>
<h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>为每个 Cookie 提供了以下字段：</p>
<table>
<thead>
<tr>
<th>Cookie 字段和说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td>
<td>Cookie 的名称。</td>
</tr>
<tr>
<td>Value</td>
<td>Cookie 的值。</td>
</tr>
<tr>
<td>Domain</td>
<td>Cookie 的网域。</td>
</tr>
<tr>
<td>Path</td>
<td>Cookie 的路径。</td>
</tr>
<tr>
<td>Expires / Maximum Age</td>
<td>Cookie 的过期时间或最长寿命。对于会话 Cookie，此字段始终为“Session”。</td>
</tr>
<tr>
<td>Size</td>
<td>Cookie 的大小（以字节为单位）。</td>
</tr>
<tr>
<td>HTTP</td>
<td>如果存在，指示应仅在 HTTP 上使用 Cookie，并且不允许 JavaScript 修改。</td>
</tr>
<tr>
<td>Secure</td>
<td>如果存在，指示此 Cookie 的通信必须通过加密传输进行。</td>
</tr>
</tbody>
</table>
<h2 id="删除-Cookie"><a href="#删除-Cookie" class="headerlink" title="删除 Cookie"></a>删除 Cookie</h2><p>可以通过多种方式删除 Cookie：</p>
<ul>
<li>选择 Cookie 并按 <strong>Delete</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/delete.png" alt="Delete 按钮">) 可以删除相应 Cookie。</li>
<li>按 <strong>Clear</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/clear-object-store.png" alt="Clear 按钮">) 可以删除指定框架组的所有 Cookie。</li>
<li>右键点击 Cookie 的<strong>Domain</strong>值，然后选择 <strong>Clear all from “…”</strong>（其中 <strong>“…”</strong> 是网域的名称）可以删除来自该网域的所有 Cookie。</li>
</ul>
<h1 id="检查资源"><a href="#检查资源" class="headerlink" title="检查资源"></a>检查资源</h1><p>按框架、网域、类型或其他条件组织资源。</p>
<h3 id="TL-DR-14"><a href="#TL-DR-14" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 <strong>Application</strong> 面板的 <strong>Frames</strong> 窗格可以按框架组织资源。</li>
<li>您也可以在 <strong>Sources</strong> 面板中停用 <strong>Group by folder</strong> 选项，按框架查看资源。</li>
<li>要按网域和文件夹查看资源，请使用 <strong>Sources</strong> 面板。</li>
<li>在 <strong>Network</strong> 面板中按名称或其他条件过滤资源。</li>
</ul>
<h2 id="按框架组织资源"><a href="#按框架组织资源" class="headerlink" title="按框架组织资源"></a>按框架组织资源</h2><p>使用 <strong>Application</strong> 面板的 <strong>Frames</strong> 窗格可以按框架组织页面的资源。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/frames.png" alt="框架详情"></p>
<ul>
<li>顶层（上面屏幕截图中的 <code>top</code>）是主文档。</li>
<li>在这下方（例如上面屏幕截图中的 <code>widget2</code>）是主文档的子框架。 展开一个子框架可以查看源自该框架的资源。</li>
<li>子框架下方是图像、脚本，以及主文档的其他资源。</li>
<li>最后是主文档本身。</li>
</ul>
<p>点击资源可以查看其预览。</p>
<p>右键点击资源可以在 <strong>Network</strong> 面板中查看、将其在新标签中打开、复制其网址或将其保存。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/resource.png" alt="查看资源"></p>
<p>通过在 <strong>Sources</strong> 面板中点击导航器中的溢出菜单并停用 <strong>Group by folder</strong> 选项以停止按文件夹分组资源，您也可以按框架查看资源。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/group-by-folder.png" alt="Group by folder 分组"></p>
<p>资源将仅按框架列示。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/no-folders.png" alt="无文件夹"></p>
<h2 id="按网域和文件夹组织资源"><a href="#按网域和文件夹组织资源" class="headerlink" title="按网域和文件夹组织资源"></a>按网域和文件夹组织资源</h2><p>要查看按网域和目录组织的资源，请使用 <strong>Sources</strong> 面板。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/manage-data/imgs/sources.png" alt="Sources 面板"></p>
<h2 id="按名称、类型或其他条件过滤资源"><a href="#按名称、类型或其他条件过滤资源" class="headerlink" title="按名称、类型或其他条件过滤资源"></a>按名称、类型或其他条件过滤资源</h2><p>使用 <strong>Network</strong> 面板可以按名称、类型和一系列其他条件过滤资源。 参阅下面的指南了解详情。</p>
<h1 id="使用-Device-Mode-模拟移动设备"><a href="#使用-Device-Mode-模拟移动设备" class="headerlink" title="使用 Device Mode 模拟移动设备"></a>使用 Device Mode 模拟移动设备</h1><p>使用 Chrome DevTools 的 Device Mode 打造移动设备优先的完全自适应式网站。了解如何使用 Device Mode 模拟多种设备及其功能。</p>
<p>警告：Device Mode 可以让您了解您的网站在移动设备上的大致显示效果，但要获得全面的了解，则应始终在真实设备上测试您的网站。DevTools 无法模拟移动设备的性能特性。</p>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul>
<li>在<a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/emulate-mobile-viewports" target="_blank" rel="external">不同的屏幕尺寸和分辨率</a>（包括 Retina 显示屏）下模拟您的网站。</li>
<li>通过可视化和<a href="https://developers.google.com/web/tools/chrome-devtools/iterate/device-mode/media-queries" target="_blank" rel="external">检查 CSS 媒体查询</a>进行自适应设计。</li>
<li>使用<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions" target="_blank" rel="external">网络模拟器</a>在不影响其他标签流量的情况下模拟您网站的性能。</li>
<li>针对触摸事件、地理定位和设备方向准确<a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/device-input-and-sensors" target="_blank" rel="external">模拟设备输入</a></li>
</ul>
<h2 id="切换-Device-Mode"><a href="#切换-Device-Mode" class="headerlink" title="切换 Device Mode"></a>切换 Device Mode</h2><p>切换 <strong>Device Mode</strong> 按钮可以打开或关闭 Device Mode。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/device-mode-initial-view.png" alt="Device Mode 的初次启动"></p>
<p>当 Device Mode 打开时，该图标呈蓝色 (<img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/device-mode-on.png" alt="Device Mode 打开">)。</p>
<p>当 Device Mode 关闭时，该图标呈灰色 (<img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/device-mode-off.png" alt="Device Mode 关闭">)。</p>
<p>Device Mode 默认处于启用状态。</p>
<p>您还可以通过按 Command+Shift+M (Mac) 或 Ctrl+Shift+M（Windows、Linux）来切换 Device Mode。要使用此快捷键，鼠标焦点需要位于 DevTools 窗口中。如果焦点位于视口中，您将触发 <a href="https://support.google.com/chrome/answer/157179" target="_blank" rel="external">Chrome 的切换用户快捷键</a>。</p>
<h1 id="测试自适应和设备特定的视口"><a href="#测试自适应和设备特定的视口" class="headerlink" title="测试自适应和设备特定的视口"></a>测试自适应和设备特定的视口</h1><p>更新后的 Device Mode（自 Chrome 49 起）是当前移动设备优先的 DevTools 的主要部分，并且扩展了主 DevTools 栏。了解如何使用其控件模拟各种设备或切换为完全自适应。</p>
<h3 id="TL-DR-15"><a href="#TL-DR-15" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 Device Mode 的屏幕模拟器测试网站的响应能力。</li>
<li>保存自定义预设，便于日后访问。</li>
<li>Device Mode 不能替代真实设备测试。请注意它的限制。</li>
</ul>
<h2 id="使用视口控件"><a href="#使用视口控件" class="headerlink" title="使用视口控件"></a>使用视口控件</h2><p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/device-mode.png" alt="Device Mode 已启用"></p>
<p>利用视口控件，您可以针对各种设备测试网站，以及是否能够实现完全自适应。它包括以下两个模式：</p>
<ol>
<li><strong>自适应</strong>。使视口可以通过任意一侧的大手柄随意调整大小。</li>
<li><strong>特定设备</strong>。将视口锁定为特定设备确切的视口大小，并模拟特定设备特性。</li>
</ol>
<h2 id="自适应模式"><a href="#自适应模式" class="headerlink" title="自适应模式"></a>自适应模式</h2><p>我们建议将<strong>自适应模式</strong>用作您的默认工作模式。在您的网站和应用的活动开发期间使用这一模式，并经常调整视口大小以创建完全自适应设计，这种设计可以适应未知和未来的设备类型。</p>
<p>要充分利用自适应模式，请启用<a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/emulate-mobile-viewports#media-queries" target="_blank" rel="external">媒体查询栏</a>。</p>
<h3 id="自定义视口大小"><a href="#自定义视口大小" class="headerlink" title="自定义视口大小"></a>自定义视口大小</h3><p>在视口上拖动调整大小的大手柄，或者点击菜单栏中的值进行精确调整。</p>
<h2 id="特定设备模式"><a href="#特定设备模式" class="headerlink" title="特定设备模式"></a>特定设备模式</h2><p>在接近活动开发末期以及想要了解网站在特定移动设备（例如，特定 iPhone 或 Nexus）上的外观时，可以使用<strong>特定设备模式</strong>。</p>
<h3 id="内置设备预设"><a href="#内置设备预设" class="headerlink" title="内置设备预设"></a>内置设备预设</h3><p>我们已在设备下拉菜单中包含了当前最热门的设备。选择设备后，每个预设都会自动配置特定设备特性的模拟：</p>
<ul>
<li>设置正确的“User Agent”(UA) 字符串。</li>
<li>设置设备分辨率和 DPI（设备像素比）。</li>
<li>模拟触摸事件（如果适用）。</li>
<li>模拟移动设备滚动条叠加和 meta viewport。</li>
<li>自动调整不带已定义视口的页面文本的大小（效果增强）。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/select-device.png" alt="选择设备"></p>
<h3 id="添加自定义设备预设"><a href="#添加自定义设备预设" class="headerlink" title="添加自定义设备预设"></a>添加自定义设备预设</h3><p>Device Mode 提供了多种用于模拟的设备。如果您发现某款边缘或冷门设备未涵盖在内，可以添加自定义设备。</p>
<p>要添加自定义设备，请执行以下操作：</p>
<ol>
<li>转至 DevTools 的 Settings 面板。</li>
<li>点击 <strong>Devices</strong> 标签。</li>
<li>点击 <strong>Add custom device</strong>。</li>
<li>输入设备名称、宽度、高度、设备像素比和 User Agent 字符串。</li>
<li>点击 <strong>Add</strong>。</li>
</ol>
<p>现在，您的自定义设备将显示在 <strong>Device</strong> 下拉菜单中。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/custom-device.png" alt="选择设备"></p>
<h3 id="设备状态和方向"><a href="#设备状态和方向" class="headerlink" title="设备状态和方向"></a>设备状态和方向</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/change-orientation.png" alt="切换方向"></p>
<p>模拟特定设备时，Device Mode 工具栏会显示另一个控件，主要用于在横向和纵向屏幕方向之间切换。</p>
<p>在选定的设备上，控件不只是可以切换方向。对于支持的设备（如 Nexus 5X），您会获得一个下拉菜单，可以模拟特定设备状态，如：</p>
<ul>
<li>默认浏览器 UI</li>
<li>显示 Chrome 导航栏</li>
<li>显示打开的键盘</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/change-device-state.png" alt="更改设备 UI"></p>
<h3 id="缩放到合适大小"><a href="#缩放到合适大小" class="headerlink" title="缩放到合适大小"></a>缩放到合适大小</h3><p>有时，您可能想要测试分辨率大于浏览器窗口实际可用空间的设备。这种情况下，<strong>Zoom to Fit</strong> 选项会很方便：</p>
<ol>
<li><strong>Fit to Window</strong> 会自动将缩放级别设置为最大的可用空间。</li>
<li>例如，如果您想要测试图像的 DPI，<strong>Explicit percentages</strong> 会非常有用。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/zoom-to-fit.png" alt="缩放到合适大小"></p>
<h2 id="可选控件（例如，触摸、媒体查询、DPR）"><a href="#可选控件（例如，触摸、媒体查询、DPR）" class="headerlink" title="可选控件（例如，触摸、媒体查询、DPR）"></a>可选控件（例如，触摸、媒体查询、DPR）</h2><p>点击设备工具栏右侧上的三个小圆点，可以更改或启用可选控件。当前选项包括：</p>
<ul>
<li>User Agent 类型（模拟 UA 和触摸事件）</li>
<li>设备像素比</li>
<li>媒体查询</li>
<li>标尺</li>
<li>配置网络（UA、网络节流）</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/device-mode-dotmenu.png" alt="Device Mode 设置"></p>
<p>继续阅读，详细了解特定选项。</p>
<h3 id="User-Agent-类型"><a href="#User-Agent-类型" class="headerlink" title="User Agent 类型"></a>User Agent 类型</h3><p><strong>User Agent Type</strong> 或 Device Type 设置让您可以更改设备的类型。 可能的值为：</p>
<ol>
<li>Mobile</li>
<li>Desktop</li>
<li>Desktop with touch</li>
</ol>
<p>更改此设置会影响移动设备视口和触摸事件模拟并更改 UA 字符串。 因此，如果您想要为桌面设备创建自适应网站，且想要测试悬停效果，请在 Responsive 模式下切换到“Desktop”。 ：</p>
<p><strong>提示</strong>：您也可以在 <a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/network-conditions#network-conditions" target="_blank" rel="external"><strong>Network conditions</strong></a> 抽屉式导航栏中设置 User Agent。</p>
<h3 id="设备像素比-DPR"><a href="#设备像素比-DPR" class="headerlink" title="设备像素比 (DPR)"></a>设备像素比 (DPR)</h3><p>如果您想要从非 Retina 机器上模拟 Retina 设备或者从 Retina 机器上模拟非 Retina 设备，请调整<strong>设备像素比</strong>。 <strong>设备像素比</strong> (DPR) 是逻辑像素与物理像素之间的比率。与普通设备相比，带有 Retina 显示屏的设备（如 Nexus 6P）的像素密度更高，像素密度会影响可视内容的清晰度和大小。</p>
<p>网页上“设备像素比”(DPR) 灵敏度的部分示例如下：</p>
<ul>
<li><p>CSS 媒体查询，例如：</p>
<p>@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) { … }</p>
</li>
<li><p>CSS <a href="http://dev.w3.org/csswg/css-images/#image-set-notation" target="_blank" rel="external">image-set</a> 规则。</p>
</li>
<li><p>图像上的 <a href="https://developers.google.com/web/fundamentals/design-and-ui/media/images/images-in-markup" target="_blank" rel="external">srcset</a> 属性。</p>
</li>
<li><p><code>window.devicePixelRatio</code> 属性。</p>
</li>
</ul>
<p>如果拥有原生 Retina 显示屏，您会注意到较低“每英寸点数”(DPI) 的资源看上去比较模糊，而较高 DPI 的资源比较清晰。 要在标准显示屏上模拟这种效果，请将 DPR 设置为 2 并通过缩放调整视口的大小。2 倍资源看上去还是比较清晰，1 倍资源看上去则比较模糊。</p>
<h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p><a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/fundamentals/use-media-queries" target="_blank" rel="external">媒体查询</a>是自适应网页设计的基本部分。要查看媒体查询检查器，请在三圆点菜单中点击 <strong>Show Media queries</strong>。DevTools 会在样式表中检测媒体查询，并在顶端标尺中将它们显示为彩色条形。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/show-media-queries.png" alt="显示媒体查询"></p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/media-query-inspector-ruler.png" alt="媒体查询检查器"></p>
<p>用彩色标记的媒体查询示例如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>针对最大宽度的查询。</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>针对一定范围内宽度的查询。</td>
</tr>
<tr>
<td></td>
<td>针对最小宽度的查询。</td>
</tr>
</tbody>
</table>
<h4 id="快速预览媒体查询"><a href="#快速预览媒体查询" class="headerlink" title="快速预览媒体查询"></a>快速预览媒体查询</h4><p>点击媒体查询条形，调整视口大小和预览适合目标屏幕大小的样式。</p>
<h4 id="查看关联的-CSS"><a href="#查看关联的-CSS" class="headerlink" title="查看关联的 CSS"></a>查看关联的 CSS</h4><p>右键点击某个条形，查看媒体查询在 CSS 中何处定义并跳到源代码中的定义。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/reveal-source-code.png" alt="网页基础知识媒体查询视图"></p>
<h3 id="标尺"><a href="#标尺" class="headerlink" title="标尺"></a>标尺</h3><p>切换此选项可以在视口旁显示基于像素的标尺。</p>
<h3 id="配置网络（UA、网络节流）"><a href="#配置网络（UA、网络节流）" class="headerlink" title="配置网络（UA、网络节流）"></a>配置网络（UA、网络节流）</h3><p>选择此选项会在抽屉式导航栏中打开一个面板，您可以在其中更改网络相关行为：</p>
<ol>
<li><strong>Disk Cache</strong>：停用 Disk Cache 将在打开 DevTools 时停止浏览器缓存页面及其资源。</li>
<li><strong>Network Throttling</strong>：在此处阅读更多有关<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions" target="_blank" rel="external">网络节流</a>的信息。</li>
<li><strong>User Agent</strong>：允许您设置特定的 UA (User Agent) 字符串替换值。</li>
</ol>
<p><strong>提示</strong>：您也可以从<a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/network-conditions#network-conditions" target="_blank" rel="external">主菜单</a>中打开 <strong>Network conditions</strong> 抽屉式导航栏。</p>
<h2 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h2><p>Device Mode 存在一些限制。</p>
<ul>
<li><strong>设备硬件</strong></li>
<li>无法模拟 GPU 和 CPU 行为。</li>
<li><strong>浏览器 UI</strong></li>
<li>无法模拟系统显示，如地址栏。</li>
<li>无法将原生显示（如 <code>&lt;select&gt;</code> 元素）作为模态列表模拟。</li>
<li>一些增强功能（如数字输入打开小键盘）可能会因实际设备行为不同而不同。</li>
<li><strong>浏览器功能</strong></li>
<li>WebGL 可以在模拟器中操作，但 iOS 7 设备不支持 WebGL。</li>
<li>Chrome 不支持 MathML，但 iOS 7 设备支持 MathML。</li>
<li>无法模拟 <a href="https://github.com/scottjehl/device-bugs/issues/2" target="_blank" rel="external">iOS 5 方向缩放错误</a>。</li>
<li>行高 CSS 属性可以在模拟器中操作，但 Opera Mini 不支持行高 CSS。</li>
<li>无法模拟 CSS 规则限制，例如 <a href="http://blogs.msdn.com/b/ieinternals/archive/2011/05/14/10164546.aspx" target="_blank" rel="external">Internet Explorer</a> 中的规则限制。</li>
<li><strong>AppCache</strong></li>
<li>模拟器不会替换 AppCache <a href="https://code.google.com/p/chromium/issues/detail?id=334120" target="_blank" rel="external">清单文件</a> 的 UA 或<a href="https://code.google.com/p/chromium/issues/detail?id=119767" target="_blank" rel="external">查看源请求</a>。</li>
</ul>
<p>尽管存在这些限制，Device Mode 还是十分强大，能够完成大多数任务。 如果需要在真实设备上测试，可以使用<a href="https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging" target="_blank" rel="external">远程调试</a>获得其他数据分析。</p>
<h1 id="模拟传感器：地理定位与加速度计"><a href="#模拟传感器：地理定位与加速度计" class="headerlink" title="模拟传感器：地理定位与加速度计"></a>模拟传感器：地理定位与加速度计</h1><p>由于大多数桌面设备都没有 GPS 芯片和加速度计，所以测试它们比较困难。Chrome DevTools 的 Sensors 模拟窗格可以通过模拟常见的移动设备传感器来降低测试的开销。</p>
<h3 id="TL-DR-16"><a href="#TL-DR-16" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>模拟地理定位坐标以测试地理定位替换值。</li>
<li>模拟设备方向以测试加速度计数据。</li>
</ul>
<h2 id="访问传感器控件"><a href="#访问传感器控件" class="headerlink" title="访问传感器控件"></a>访问传感器控件</h2><p>要访问 Chrome DevTools 传感器控件，请执行以下操作：</p>
<ol>
<li>打开 DevTools 主菜单</li>
<li>在 <strong>More Tools</strong> 菜单下，点击 <strong>Sensors</strong></li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/navigate-to-sensors.png" alt="导航至 Sensors 面板"></p>
<p>注：如果您的应用检测到使用 JavaScript（如 Modernizr）的传感器加载，请确保在启用传感器模拟器之后重新加载页面。</p>
<h2 id="替换地理定位数据"><a href="#替换地理定位数据" class="headerlink" title="替换地理定位数据"></a>替换地理定位数据</h2><p>与桌面设备不同，移动设备通常使用 GPS 硬件检测位置。在 Sensors 窗格中，您可以模拟地理定位坐标，以便与 <a href="http://www.w3.org/TR/geolocation-API/" target="_blank" rel="external">Geolocation API</a> 结合使用。</p>
<p>在模拟抽屉式导航栏的 Sensors 窗格中选中 <strong>Emulate geolocation coordinates</strong> 复选框，启用地理定位模拟。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/emulation-drawer-geolocation.png" alt="已启用的地理定位模拟器"></p>
<p>您可以使用此模拟器替换 <code>navigator.geolocation</code> 的位置值，并在地理定位数据不可用时模拟用例。</p>
<h2 id="模拟加速度计（设备方向）"><a href="#模拟加速度计（设备方向）" class="headerlink" title="模拟加速度计（设备方向）"></a>模拟加速度计（设备方向）</h2><p>要测试来自 <a href="http://www.w3.org/TR/screen-orientation/" target="_blank" rel="external">Orientation API</a> 的加速度计数据，请在 Sensors 窗格中选中 <strong>Accelerometer</strong> 复选框，启用加速度计模拟器。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/emulation-drawer-accelerometer.png" alt="加速度计控件"></p>
<p>您可以操作下列方向参数：</p>
<ul>
<li><p>α</p>
<p>围绕 Z 轴旋转。</p>
</li>
<li><p>β</p>
<p>左右倾斜。</p>
</li>
<li><p>γ</p>
<p>前后倾斜。</p>
</li>
</ul>
<p>您也可以点击模型加速度计并将其拖动到所需方向。</p>
<p>使用此<a href="http://googlesamples.github.io/web-fundamentals/fundamentals/native-hardware/device-orientation/dev-orientation.html" target="_blank" rel="external">设备方向演示</a>试用加速度计模拟器。</p>
<h1 id="模拟和测试其他浏览器"><a href="#模拟和测试其他浏览器" class="headerlink" title="模拟和测试其他浏览器"></a>模拟和测试其他浏览器</h1><p>您的任务不只局限于确保网站在 Chrome 和 Android 上出色运行。即使 Device Mode 可以模拟 iPhone 等多种其他设备，我们仍鼓励您查看其他浏览器模拟解决方案。</p>
<h3 id="TL-DR-17"><a href="#TL-DR-17" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>如果您没有特定设备，或者想要执行抽检，最佳方式就是直接在浏览器中模拟设备。</li>
<li>利用设备模拟器，您可以从工作站在一系列设备上模拟开发网站。</li>
<li>基于云的模拟器让您可以在不同平台之间对网站进行自动化单元测试。”</li>
</ul>
<h2 id="浏览器模拟器"><a href="#浏览器模拟器" class="headerlink" title="浏览器模拟器"></a>浏览器模拟器</h2><p>浏览器模拟器非常适合于测试网站的自适应能力，但它们无法模拟 API 差异、CSS 支持，以及您可以在移动设备浏览器中看到的某些行为。在真实设备运行的浏览器上测试您的网站，确保一切均按照预期运行。</p>
<h3 id="Firefox-的自适应设计视图"><a href="#Firefox-的自适应设计视图" class="headerlink" title="Firefox 的自适应设计视图"></a>Firefox 的自适应设计视图</h3><p>Firefox 拥有一个<a href="https://developer.mozilla.org/en-US/docs/Tools/Responsive_Design_View" target="_blank" rel="external">自适应设计视图</a>，让您可以探索您的设计在常见屏幕尺寸上的变化或者通过拖动边缘的方式确定自己的大小，而不用考虑具体设备。</p>
<h3 id="Edge-的-F12-模拟"><a href="#Edge-的-F12-模拟" class="headerlink" title="Edge 的 F12 模拟"></a>Edge 的 F12 模拟</h3><p>要模拟 Windows Phones，请使用 Microsoft Edge 的<a href="https://dev.modern.ie/platform/documentation/f12-devtools-guide/emulation/" target="_blank" rel="external">内置模拟</a>。</p>
<p>由于 Edge 不具备旧版兼容性，请使用 <a href="https://msdn.microsoft.com/en-us/library/dn255001(v=vs.85" target="_blank" rel="external">IE 11 的模拟</a>.aspx)模拟您的页面在较旧版本 Internet Explorer 中的外观。</p>
<h2 id="设备模拟器"><a href="#设备模拟器" class="headerlink" title="设备模拟器"></a>设备模拟器</h2><p>设备模拟器不仅可以模拟浏览器环境，也能模拟整个设备。它们可以用于测试需要 iOS 集成的内容，例如带虚拟键盘的表单输入。</p>
<h3 id="Android-Emulator"><a href="#Android-Emulator" class="headerlink" title="Android Emulator"></a>Android Emulator</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/android-emulator-stock-browser.png" alt="Android Emulator Stock Browser">Android Emulator 中的 Stock Browser</p>
<p>目前，无法在 Android Emulator 上安装 Chrome。不过，您可以使用 Android Browser、Chromium Content Shell 和 Firefox for Android，我们将在本指南的稍后部分进行介绍。Chromium Content Shell 与 Chrome 使用相同的渲染引擎，但没有任何浏览器特定的功能。</p>
<p>Android Emulator 标配 Android SDK，您需要从<a href="http://developer.android.com/sdk/installing/studio.html" target="_blank" rel="external">此处</a>下载。 然后，按照说明<a href="http://developer.android.com/tools/devices/managing-avds.html" target="_blank" rel="external">设置虚拟设备</a>和<a href="http://developer.android.com/tools/devices/emulator.html" target="_blank" rel="external">启动模拟器</a>。</p>
<p>模拟器启动后，点击 Browser 图标，就可以在较旧的 Stock Browser for Android 上测试网站了。</p>
<h4 id="Android-上的-Chromium-Content-Shell"><a href="#Android-上的-Chromium-Content-Shell" class="headerlink" title="Android 上的 Chromium Content Shell"></a>Android 上的 Chromium Content Shell</h4><p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/android-avd-contentshell.png" alt="Android Emulator Content Shell">Android Emulator Content Shell</p>
<p>要安装 Chromium Content Shell for Android，请保持模拟器运行并在命令提示符处运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/PaulKinlan/chromium-android-installer.git</div><div class="line">chmod u+x ./chromium-android-installer/\*.sh</div><div class="line">./chromium-android-installer/install-chromeandroid.sh</div></pre></td></tr></table></figure>
<p>现在，您可以使用 Chromium Content Shell 测试您的网站。</p>
<h4 id="Android-上的-Firefox"><a href="#Android-上的-Firefox" class="headerlink" title="Android 上的 Firefox"></a>Android 上的 Firefox</h4><p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/ff-on-android-emulator.png" alt="Android Emulator 上的 Firefox 图标">Android Emulator 上的 Firefox 图标</p>
<p>与 Chromium 的 Content Shell 类似，您可以获取一个 APK 以将 Firefox 安装到模拟器上。</p>
<p>从 <a href="https://ftp.mozilla.org/pub/mozilla.org/mobile/releases/latest/" target="_blank" rel="external">https://ftp.mozilla.org/pub/mozilla.org/mobile/releases/latest/</a> 下载合适的 .apk 文件。</p>
<p>从这里，您可以使用以下命令将文件安装到打开的模拟器或连接的 Android 设备上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb install &amp;lt;path to APK&amp;gt;/fennec-XX.X.XX.android-arm.apk</div></pre></td></tr></table></figure>
<h3 id="iOS-模拟器"><a href="#iOS-模拟器" class="headerlink" title="iOS 模拟器"></a>iOS 模拟器</h3><p>适用于 Mac OS X 的 iOS 模拟器标配 Xcode，您可以<a href="https://itunes.apple.com/us/app/xcode/id497799835?ls=1&amp;mt=12" target="_blank" rel="external">从 App Store 安装</a>。</p>
<p>完成后，您可以通过 <a href="https://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/iOS_Simulator_Guide/Introduction/Introduction.html" target="_blank" rel="external">Apple 的文档</a>学习如何使用模拟器。</p>
<p>注：为了避免在每次想要使用 iOS 模拟器时都要打开 Xcode，请打开 Xcode，然后右键点击停靠栏中的 iOS Simulator 图标并选择 <code>Keep in Dock</code>。现在，您可以在需要时随时点击此图标。</p>
<h3 id="Modern-IE"><a href="#Modern-IE" class="headerlink" title="Modern.IE"></a>Modern.IE</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/device-mode/imgs/modern-ie-simulator.png" alt="Modern IE VM">Modern IE VM</p>
<p>利用 Modern.IE 虚拟机，您可以在自己的计算机上通过 VirtualBox（或 VMWare）访问不同版本的 IE。在<a href="https://modern.ie/en-us/virtualization-tools#downloads" target="_blank" rel="external">此处的下载页面</a>上选择一款虚拟机。</p>
<h2 id="基于云的模拟器"><a href="#基于云的模拟器" class="headerlink" title="基于云的模拟器"></a>基于云的模拟器</h2><p>如果您无法使用模拟器并且没有真实设备，那么基于云的模拟器是您的最佳选择。基于云的模拟器相对于真实设备和本地模拟器的一大优势是，您可以在不同平台上对网站进行自动化单元测试。</p>
<ul>
<li><a href="https://www.browserstack.com/automate" target="_blank" rel="external">BrowserStack（商用）</a>是最便于进行手动测试的云模拟器。您可以选择操作系统、浏览器版本与设备类型，以及要浏览的网址，模拟器将启动一个您可以与之交互的托管式虚拟机。您还可以在相同屏幕中启动多个模拟器，这样，您能够同时测试应用在多个设备上的外观。</li>
<li><a href="https://saucelabs.com/" target="_blank" rel="external">SauceLabs（商用）</a> 允许您在模拟器内部运行单元测试，这对于将网站流脚本化和稍后在各种设备上观看视频记录非常有用。您也可以对网站进行手动测试。</li>
<li><a href="http://www.keynote.com/solutions/testing/mobile-testing" target="_blank" rel="external">Device Anywhere（商用）</a>不使用模拟器，而是使用您可以远程控制的真实设备。 如果您需要在特定设备上重现问题并且在本指南之前的任何选项上都无法看到错误，远程控制真实设备将非常有用。</li>
</ul>
<h1 id="远程调试-Android-设备使用入门"><a href="#远程调试-Android-设备使用入门" class="headerlink" title="远程调试 Android 设备使用入门"></a>远程调试 Android 设备使用入门</h1><p>从 Windows、Mac 或 Linux 计算机远程调试 Android 设备上的实时内容。 本教程将向您展示如何：</p>
<ul>
<li>设置您的 Android 设备进行远程调试，并从开发计算机上发现设备。</li>
<li>从您的开发计算机检查和调试 Android 设备上的实时内容。</li>
<li>将 Android 设备上的内容抓屏到您的开发计算机上的 DevTools 实例中。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/remote-debugging.png" alt="远程调试图示"></p>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>开发计算机上已安装 Chrome 32 或更高版本。</li>
<li>开发计算机上已安装 <a href="https://developer.android.com/tools/extras/oem-usb.html" target="_blank" rel="external">USB 驱动程序</a>（如果您使用 Windows）。 确保设备管理器报告正确的 USB 驱动程序</li>
<li>拥有一根可以将您的 Android 设备连接至开发计算机的 USB 电缆。</li>
<li>Android 4.0 或更高版本。</li>
<li>您的 Android 设备上已安装 Chrome（Android 版）。</li>
</ul>
<h2 id="第-1-步：发现您的-Android-设备"><a href="#第-1-步：发现您的-Android-设备" class="headerlink" title="第 1 步：发现您的 Android 设备"></a>第 1 步：发现您的 Android 设备</h2><ol>
<li><p>在您的 Android 设备上，选择 <strong>Settings</strong> &gt; <strong>Developer Options</strong> &gt; <strong>Enable USB Debugging</strong>。 在运行 Android 4.2 及更新版本的设备上，<strong>Developer options</strong> 默认情况下处于隐藏状态。 请参阅<a href="https://developer.android.com/studio/run/device.html#developer-device-options" target="_blank" rel="external">启用设备上的开发者选项</a>以了解如何启用它。</p>
</li>
<li><p>在您的开发计算机上打开 Chrome。您应使用您的一个 Google 帐户登录到 Chrome。 远程调试在<a href="https://support.google.com/chrome/answer/95464" target="_blank" rel="external">隐身模式</a>或<a href="https://support.google.com/chrome/answer/6130773" target="_blank" rel="external">访客模式</a>下无法运行。</p>
</li>
<li><p><a href="https://developers.google.com/web/tools/chrome-devtools/#open" target="_blank" rel="external">打开 DevTools</a>。</p>
</li>
<li><p>在 DevTools 中，点击 <strong>Main Menu</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/three-dot.png" alt="主菜单">，然后选择 <strong>More tools</strong> &gt; <strong>Remote devices</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/open-remote-devices.png" alt="打开远程设备抽屉式导航栏"></p>
</li>
<li><p>在 DevTools 中，点击 <strong>Settings</strong> 标签（如果正在显示另一个标签）。</p>
</li>
<li><p>确保已启用 <strong>Discover USB devices</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/discover-usb-devices.png" alt="已启用 Discover USB devices"></p>
</li>
<li><p>使用一根 USB 电缆将 Android 设备直接连接到您的开发计算机。 请勿使用任何中间 USB 集线器。如果这是您首次将您的 Android 设备连接到此开发计算机，您的设备将显示在 <strong>Unknown</strong> 中，其下面具有文本 <strong>Pending Authorization</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/unknown-device.png" alt="未知的设备，待授权"></p>
</li>
<li><p>如果您的设备显示为 <strong>Unknown</strong>，则在 Android 设备上接受 <strong>Allow USB Debugging</strong> 权限提示。 <strong>Unknown</strong> 被替换为您的 Android 设备的型号名称。 绿色圆圈和 <strong>Connected</strong> 文本表示您已大功告成，可以从开发计算机远程调试您的 Android 设备。</p>
</li>
</ol>
<p>注：如果您在发现流程中遇到任何问题，您可以通过在 Android 设备上选择 <strong>Settings</strong> &gt; <strong>Developer Options</strong> &gt; <strong>Revoke USB Debugging Authorizations</strong> 重启该流程。</p>
<h2 id="第-2-步：从您的开发计算机调试-Android-设备上的内容。"><a href="#第-2-步：从您的开发计算机调试-Android-设备上的内容。" class="headerlink" title="第 2 步：从您的开发计算机调试 Android 设备上的内容。"></a>第 2 步：从您的开发计算机调试 Android 设备上的内容。</h2><ol>
<li><p>如果您尚未在 Android 设备上打开 Chrome，则现在打开它。</p>
</li>
<li><p>返回 DevTools，点击与设备的型号名称匹配的标签。 在此页面的顶部，您会看到 Android 设备的型号名称，后面紧跟着其序列号。 在型号名称下面，您可以看到在设备上运行的 Chrome 的版本，版本号在括号里。每个打开的 Chrome 标签都会有自己的区域。您可以从此区域与该标签交互。 如果有任何使用 WebView 的应用，您也会看到针对每个应用的区域。 下面的屏幕截图没有任何打开的标签或 WebViews。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/connected-remote-device.png" alt="连接的远程设备"></p>
</li>
<li><p>在 <strong>New tab</strong> 旁输入一个网址，然后点击 <strong>Open</strong>。此页面将在 Android 设备上的新标签中打开。</p>
</li>
<li><p>点击您刚刚打开的网址旁的 <strong>Inspect</strong>。这将打开一个新的 DevTools 实例。 您的 Android 设备上运行的 Chrome 的版本决定在开发计算机上打开的 DevTools 的版本。因此，如果您的 Android 设备正在运行一个非常旧的 Chrome 版本，则 DevTools 实例看上去可能与您常用的实例有很大的差别。</p>
</li>
</ol>
<h3 id="更多操作：重新加载、聚焦或关闭一个标签"><a href="#更多操作：重新加载、聚焦或关闭一个标签" class="headerlink" title="更多操作：重新加载、聚焦或关闭一个标签"></a>更多操作：重新加载、聚焦或关闭一个标签</h3><p>点击您要重新加载、聚焦或关闭的标签旁的 <strong>More Options</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/three-dot.png" alt="更多选项">。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/reload.png" alt="重新加载、聚焦或关闭一个标签"></p>
<h3 id="检查元素-1"><a href="#检查元素-1" class="headerlink" title="检查元素"></a>检查元素</h3><p>转到您的 DevTools 实例的 <strong>Elements</strong> 面板，将鼠标悬停在一个元素上以在 Android 设备的视口中突出显示它。</p>
<p>您还可以在 Android 设备屏幕上点按一个元素，以在 <strong>Elements</strong> 面板中选中它。 点击您的 DevTools 实例上的 <strong>Select Element</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/select-element.png" alt="SelectElement">，然后在您的 Android 设备屏幕上点按此元素。 请注意，<strong>Select Element</strong> 将在第一次触摸后停用，因此，每次想要使用此功能时您都需要重新启用它。</p>
<h3 id="Android-设备到开发计算机的抓屏"><a href="#Android-设备到开发计算机的抓屏" class="headerlink" title="Android 设备到开发计算机的抓屏"></a>Android 设备到开发计算机的抓屏</h3><p>点按 <strong>Toggle Screencast</strong> ![Toggle Screencast][screencast]{:.devtools-inline} 以在您的 DevTools 实例中查看 Android 设备的内容。</p>
<p>您可以通过多种方式与抓屏互动：</p>
<ul>
<li>将点击转变为点按，在设备上触发适当的触摸事件。</li>
<li>将计算机上的按键发送至设备。</li>
<li>要模拟双指张合手势，请按住 Shift 拖动。</li>
<li>要滚动，请使用您的触控板或鼠标滚轮，或者使用您的鼠标指针抛式滚动。</li>
</ul>
<p>关于抓屏的一些注意事项：</p>
<ul>
<li>抓屏仅显示页面内容。抓屏的透明部分表示设备界面，如 Chrome 多功能框、Android 状态栏或 Android 键盘。</li>
<li>抓屏会对帧率产生负面影响。在测量滚动或动画时停用抓屏，以更准确地了解页面的性能。</li>
<li>如果您的 Android 设备屏幕锁定，您的抓屏内容将消失。 将您的 Android 设备屏幕解锁可自动恢复抓屏。</li>
</ul>
<h1 id="访问本地服务器"><a href="#访问本地服务器" class="headerlink" title="访问本地服务器"></a>访问本地服务器</h1><p>在开发计算机网络服务器上托管网站，然后从 Android 设备访问内容。</p>
<p>使用 USB 电缆和 Chrome DevTools，您可以从开发计算机运行网站，然后在 Android 设备上查看网站。</p>
<h3 id="TL-DR-18"><a href="#TL-DR-18" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>利用端口转发，您可以在 Android 设备上查看开发计算机网络服务器中的内容。</li>
<li>如果您的网络服务器正在使用自定义域名，您可以将 Android 设备设置为访问位于具有自定义域名映射的网域中的内容。</li>
</ul>
<h2 id="设置端口转发"><a href="#设置端口转发" class="headerlink" title="设置端口转发"></a>设置端口转发</h2><p>端口转发使您的 Android 设备可以访问在开发计算机网络服务器上托管的内容。 端口转发通过在映射到开发计算机上 TCP 端口的 Android 设备上创建侦听 TCP 端口的方式工作。端口之间的流量通过 Android 设备与开发计算机之间的 USB 连接传输，所以连接并不取决于您的网络配置。</p>
<p>要启用端口转发，请执行以下操作：</p>
<ol>
<li>在您的开发计算机与 Android 设备之间设置<a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/" target="_blank" rel="external">远程调试</a>。 完成后，您应在 <strong>Inspect Devices</strong> 对话框的左侧菜单中看到 Android 设备，还应看到 <strong>Connected</strong> 状态指示器。</li>
<li>在 DevTools 的 <strong>Inspect Devices</strong> 对话框中，启用 <strong>Port forwarding</strong>。</li>
<li>点击 <strong>Add rule</strong>。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/add-rule.png" alt="添加端口转发规则">1. 在左侧的 <strong>Device port</strong> 文本字段中，输入 Android 设备上您想要从其访问网站的 <code>localhost</code> 端口号。例如，如果您想要从 <code>localhost:5000</code> 访问网站，则应输入 <code>5000</code>。 1. 在右侧的 <strong>Local address</strong> 文本字段中，输入开发计算机网络服务器上运行的您的网站的 IP 地址或主机名，后面紧跟端口号。例如，如果您的网站在 <code>localhost:7331</code> 上运行，则应输入 <code>localhost:7331</code>。</p>
<ol>
<li>点击 <strong>Add</strong>。</li>
</ol>
<p>端口转发已设置完毕。您可以在该设备位于 <strong>Inspect Devices</strong> 对话框内的标签上看到端口转发的状态指示器。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/port-forwarding-status.png" alt="端口转发状态"></p>
<p>要查看内容，请在您的 Android 设备上打开 Chrome，然后转至您在 <strong>Device port</strong> 中指定的 <code>localhost</code> 端口。 例如，如果您在字段中输入了 <code>5000</code>，则应转至 <code>localhost:5000</code>。</p>
<h2 id="映射到自定义本地域名"><a href="#映射到自定义本地域名" class="headerlink" title="映射到自定义本地域名"></a>映射到自定义本地域名</h2><p>利用自定义域名映射，您可以在 Android 设备上查看当前使用自定义域名的开发计算机上网络服务器中的内容。</p>
<p>例如，假设您的网站使用仅在白名单网域 <code>chrome.devtools</code> 上运行的第三方 JavaScript 库。 因此，您可以在开发计算机上的 <code>hosts</code> 文件中创建条目，将此网域映射到 <code>localhost</code>（如 <code>127.0.0.1 chrome.devtools</code>）。设置自定义域名映射和端口转发后，您将能够在 Android 设备上查看网站，网址为 <code>chrome.devtools</code>。</p>
<h3 id="为代理服务器设置端口转发"><a href="#为代理服务器设置端口转发" class="headerlink" title="为代理服务器设置端口转发"></a>为代理服务器设置端口转发</h3><p>要映射自定义域名，您必须在开发计算机上运行代理服务器。 代理服务器示例包括 <a href="http://www.charlesproxy.com/" target="_blank" rel="external">Charles</a>、<a href="http://www.squid-cache.org/" target="_blank" rel="external">Squid</a> 和 <a href="http://www.telerik.com/fiddler" target="_blank" rel="external">Fiddler</a>。</p>
<p>要为代理设置端口转发，请执行以下操作：</p>
<ol>
<li>运行代理服务器并记下其正在使用的端口。<strong>注</strong>：代理服务器和您的网络服务器必须在不同的端口上运行。</li>
<li>为您的 Android 设备设置<a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/local-server#port-forwarding" target="_blank" rel="external">端口转发</a>。在 <strong>local address</strong> 字段中，输入 <code>localhost:</code>，后面紧跟运行代理服务器的端口。例如，如果代理服务器在端口 <code>8000</code> 上运行，您应输入 <code>localhost:8000</code>。 在 <strong>device port</strong> 字段中，输入您想要使 Android 设备在其上面侦听的端口号，如 <code>3333</code>。</li>
</ol>
<h3 id="在您的设备上配置代理设置"><a href="#在您的设备上配置代理设置" class="headerlink" title="在您的设备上配置代理设置"></a>在您的设备上配置代理设置</h3><p>接下来，您需要配置 Android 设备，以便与代理服务器进行通信。</p>
<ol>
<li>在您的 Android 设备上，转至 <strong>Settings</strong> &gt; <strong>Wi-Fi</strong>。</li>
<li>长按您当前连接到的网络的名称。 <strong>注</strong>：代理设置的适用范围为单个网络。</li>
<li>点按 <strong>Modify network</strong>。</li>
<li>点按 <strong>Advanced options</strong>。将会显示代理设置。</li>
<li>点按 <strong>Proxy</strong> 菜单，然后选择 <strong>Manual</strong>。</li>
<li>在 <strong>Proxy hostname</strong> 字段中，输入 <code>localhost</code>。</li>
<li>在 <strong>Proxy port</strong> 字段中，输入您在前一部分中为 <strong>device port</strong> 输入的端口号。</li>
<li>点按 <strong>Save</strong>。</li>
</ol>
<p>进行这些设置后，您的设备会将所有请求转发给开发计算机上的代理。 代理会代表您的设备发出请求，这样就可以正确解析对自定义本地域名的请求。</p>
<p>现在，您可以在 Android 设备上访问自定义域名，就像您在开发计算机上访问一样。</p>
<p>如果您的网络服务器正在非标准端口上运行，从 Android 设备请求内容时请务必指定端口。例如，如果网络服务器正在端口 <code>7331</code> 上使用自定义域名 <code>chrome.devtools</code>，您从 Android 设备上查看网站时应使用网址 <code>chrome.devtools:7331</code>。</p>
<p><strong>提示</strong>：要恢复正常浏览，与开发计算机断开连接后请务必在您的 Android 设备上还原代理设置。</p>
<h1 id="远程调试-WebView"><a href="#远程调试-WebView" class="headerlink" title="远程调试 WebView"></a>远程调试 WebView</h1><p>使用 Chrome 开发者工具在您的原生 Android 应用中调试 WebView。</p>
<p>在 Android 4.4 (KitKat) 或更高版本中，使用 DevTools 可以在原生 Android 应用中调试 WebView 内容。</p>
<h3 id="TL-DR-19"><a href="#TL-DR-19" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>在您的原生 Android 应用中启用 WebView 调试；在 Chrome DevTools 中调试 WebView。</li>
<li>通过 <strong>chrome://inspect</strong> 访问已启用调试的 WebView 列表。</li>
<li>调试 WebView 与通过<a href="https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging" target="_blank" rel="external">远程调试</a>调试网页相同。</li>
</ul>
<h2 id="配置-WebViews-进行调试"><a href="#配置-WebViews-进行调试" class="headerlink" title="配置 WebViews 进行调试"></a>配置 WebViews 进行调试</h2><p>必须从您的应用中启用 WebView 调试。要启用 WebView 调试，请在 WebView 类上调用静态方法 <a href="https://developer.android.com/reference/android/webkit/WebView.html#setWebContentsDebuggingEnabled(boolean" target="_blank" rel="external">setWebContentsDebuggingEnabled</a>)。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">    WebView.setWebContentsDebuggingEnabled(<span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此设置适用于应用的所有 WebView。</p>
<p><strong>提示</strong>：WebView 调试<strong>不会</strong>受应用清单中 <code>debuggable</code> 标志的状态的影响。如果您希望仅在 <code>debuggable</code> 为 <code>true</code> 时启用 WebView 调试，请在运行时测试标志。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> != (getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE))</div><div class="line">    &#123; WebView.setWebContentsDebuggingEnabled(<span class="literal">true</span>); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在-DevTools-中打开-WebView"><a href="#在-DevTools-中打开-WebView" class="headerlink" title="在 DevTools 中打开 WebView"></a>在 DevTools 中打开 WebView</h2><p><strong>chrome://inspect</strong> 页面将显示您的设备上已启用调试的 WebView 列表。</p>
<p>要开始调试，请点击您想要调试的 WebView 下方的 <strong>inspect</strong>。像使用远程浏览器标签一样使用 DevTools。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/imgs/webview-debugging.png" alt="在 WebView 中检查元素"></p>
<p>与 WebView 一起列示的灰色图形表示 WebView 的大小和相对于设备屏幕的位置。如果您的 WebView 已设置标题，标题也会一起显示。</p>
<h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><p>在 <strong>chrome://inspect page</strong> 上无法看到您的 WebView？</p>
<ul>
<li>验证已为您的应用启用 WebView 调试。</li>
<li>在设备上，打开应用以及您想要调试的 WebView。然后，刷新 <strong>chrome://inspect</strong> 页面。</li>
</ul>
<h1 id="在-Chrome-DevTools-中调试-JavaScript-入门"><a href="#在-Chrome-DevTools-中调试-JavaScript-入门" class="headerlink" title="在 Chrome DevTools 中调试 JavaScript 入门"></a>在 Chrome DevTools 中调试 JavaScript 入门</h1><p>本交互式教程循序渐进地教您在 Chrome DevTools 中调试 JavaScript 的基本工作流程。 虽然教程介绍的是如何调试一种具体问题，但您学到的一般工作流程对调试各种类型的 JavaScript 错误均有帮助。</p>
<p>如果您使用 <code>console.log()</code> 来查找和修正代码中的错误，可以考虑改用本教程介绍的工作流程。 其速度快得多，也更有效。</p>
<h2 id="第-1-步：重现错误"><a href="#第-1-步：重现错误" class="headerlink" title="第 1 步：重现错误"></a>第 1 步：重现错误</h2><p>重现错误始终是调试的第一步。“重现错误”是指找到一系列总是能导致错误出现的操作。</p>
<p>您可能需要多次重现错误，因此要尽量避免任何多余的步骤。</p>
<p>请按照以下说明重现您要在本教程中修正的错误。</p>
<ol>
<li><p>点击 <strong>Open Demo</strong>。演示页面在新标签中打开。</p>
<p><a href="https://googlechrome.github.io/devtools-samples/debug-js/get-started" target="_blank" rel="external">OPEN DEMO</a></p>
</li>
<li><p>在演示页面上，输入 <code>5</code> 作为 <strong>Number 1</strong>。</p>
</li>
<li><p>输入 <code>1</code> 作为 <strong>Number 2</strong>。</p>
</li>
<li><p>点击 <strong>Add Number 1 and Number 2</strong>。</p>
</li>
<li><p>查看输入和按钮下方的标签。上面显示的是 <code>5 + 1 = 51</code>。</p>
</li>
</ol>
<p>啊呜。这个结果是错误的。正确结果应为 <code>6</code>。这就是您要修正的错误。</p>
<h2 id="第-2-步：使用断点暂停代码"><a href="#第-2-步：使用断点暂停代码" class="headerlink" title="第 2 步：使用断点暂停代码"></a>第 2 步：使用断点暂停代码</h2><p>DevTools 让您可以暂停执行中的代码，并对暂停时刻的<em>所有</em>变量值进行检查。 用于暂停代码的工具称为<strong>断点</strong>。 立即试一试：</p>
<ol>
<li>按 Command+Option+I (Mac) 或 Ctrl+Shift+I（Windows、Linux）在演示页面上打开 DevTools。</li>
<li>点击 <strong>Sources</strong> 标签。</li>
</ol>
<ol>
<li>点击 <strong>Event Listener Breakpoints</strong> 将该部分展开。DevTools 显示一个包含 <strong>Animation</strong> 和 <strong>Clipboard</strong> 等可展开事件类别的列表。</li>
</ol>
<ol>
<li><p>在 <strong>Mouse</strong> 事件类别旁，点击 <strong>Expand</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/expand.png" alt="Expand 图标">。DevTools 显示一个包含 <strong>click</strong> 等 Mouse 事件的列表，事件旁有相应的复选框。</p>
</li>
<li><p>选中 <strong>click</strong> 复选框。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/get-started-click-breakpoint.png" alt="DevTools 在演示页面上打开，Sources 面板获得焦点，click 事件侦听器断点处于启用状态。"><strong>图 1</strong>：DevTools 在演示页面上打开，Sources 面板获得焦点，click 事件侦听器断点处于启用状态。 如果 DevTools 窗口较大，则 <strong>Event Listener Breakpoints</strong> 窗格位于右侧，而不是像屏幕截图中那样位于左下方。</p>
<p>​</p>
</li>
<li><p>返回至演示页面，再次点击 <strong>Add Number 1 and Number 2</strong>。DevTools 暂停演示并在 <strong>Sources</strong> 面板中突出显示一行代码。 DevTools 突出显示的是下面这行代码：</p>
<p><code>function onClick() {</code></p>
</li>
</ol>
<p>当您选中 <strong>click</strong> 复选框时，就是在所有 <code>click</code> 事件上设置了一个基于事件的断点。 点击了<em>任何</em>节点，并且该节点具有 <code>click</code> 处理程序时，DevTools 会自动暂停在该节点 <code>click</code> 处理程序的第一行。</p>
<p>注：这不过是 DevTools 提供的众多断点类型中的一种。应使用的断点类型取决于您要调试的问题类型。</p>
<h2 id="第-3-步：单步调试代码"><a href="#第-3-步：单步调试代码" class="headerlink" title="第 3 步：单步调试代码"></a>第 3 步：单步调试代码</h2><p>一个常见的错误原因是脚本执行顺序有误。 可以通过单步调试代码一次一行地检查代码执行情况，准确找到执行顺序异常之处。立即试一试：</p>
<ol>
<li><p>在 DevTools 的 <strong>Sources</strong> 面板上，点击 <strong>Step into next function call</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/step-into.png" alt="单步执行到下一个函数调用中">，一次一行地单步调试 <code>onClick()</code> 函数的执行。DevTools 突出显示下面这行代码：</p>
<p><code>if (inputsAreEmpty()) {</code></p>
</li>
<li><p>点击 <strong>Step over next function call</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/step-over.png" alt="单步执行时越过下一个函数调用">。 DevTools 执行 <code>inputsAreEmpty()</code> 但不进入它。 请注意 DevTools 是如何跳过几行代码的。 这是因为 <code>inputsAreEmpty()</code> 求值结果为 false，所以 <code>if</code> 语句的代码块未执行。</p>
</li>
</ol>
<p>这就是单步调试代码的基本思路。如果您看一下 <code>get-started.js</code> 中的代码，就能发现错误多半出在 <code>updateLabel()</code>函数的某处。您可以不必单步调试每一行代码，而是使用另一种断点在靠近错误位置的地方暂停代码。</p>
<h2 id="第-4-步：设置另一个断点"><a href="#第-4-步：设置另一个断点" class="headerlink" title="第 4 步：设置另一个断点"></a>第 4 步：设置另一个断点</h2><p>代码行断点是最常见的断点类型。如果您想在执行到某一行代码时暂停，请使用代码行断点。立即试一试：</p>
<ol>
<li><p>看一下 <code>updateLabel()</code> 中的最后一行代码，其内容类似于：</p>
<p><code>label.textContent = addend1 + &#39; + &#39; + addend2 + &#39; = &#39; + sum;</code></p>
</li>
<li><p>在这行代码的左侧，可以看到这行代码的行号： <strong>32</strong>。点击 <strong>32</strong>。DevTools 会在 <strong>32</strong> 上放置一个蓝色图标。 这意味着这行代码上有一个代码行断点。 DevTools 现在总是会在执行这行代码之前暂停。</p>
</li>
<li><p>点击 <strong>Resume script execution</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/resume-script-execution.png" alt="继续执行脚本">。 脚本继续执行，直至到达您设置了断点的代码行。</p>
</li>
<li><p>看一下 <code>updateLabel()</code> 中已执行的代码行。</p>
</li>
</ol>
<p>DevTools 打印输出 <code>addend1</code>、<code>addend2</code> 和 <code>sum</code> 的值。</p>
<p><code>sum</code> 的值疑似有问题。其求值结果本应是数字，而实际结果却是字符串。 这可能就是造成错误的原因。</p>
<h2 id="第-5-步：检查变量值"><a href="#第-5-步：检查变量值" class="headerlink" title="第 5 步：检查变量值"></a>第 5 步：检查变量值</h2><p>另一种常见的错误原因是，变量或函数产生的值异常。 许多开发者都利用 <code>console.log()</code> 来了解值随时间变化的情况，但 <code>console.log()</code> 可能单调乏味而又效率低下，原因有两个。 其一，您可能需要手动编辑大量调用 <code>console.log()</code> 的代码。 其二，由于您不一定知晓究竟哪一个变量与错误有关，因此可能需要对许多变量进行记录。</p>
<p>DevTools 为 <code>console.log()</code> 提供的其中一个替代工具是监视表达式。可以使用监视表达式来监视变量值随时间变化的情况。顾名思义，监视表达式的监视对象不仅限于变量。您可以将任何有效的 JavaScript 表达式存储在监视表达式中。 立即试一试：</p>
<ol>
<li><p>在 DevTools 的 <strong>Sources</strong> 面板上，点击 <strong>Watch</strong>。该部分随即展开。</p>
</li>
<li><p>点击 <strong>Add Expression</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/add-expression.png" alt="添加表达式">。</p>
</li>
<li><p>键入 <code>typeof sum</code>。</p>
</li>
<li><p>按 Enter。DevTools 显示 <code>typeof sum: &quot;string&quot;</code>。冒号右侧的值就是监视表达式的结果。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/get-started-watch-expression.png" alt="“监视表达式”窗格。"><strong>图 1</strong>：创建 <code>typeof sum</code> 监视表达式后的“监视表达式”窗格（右下方）。 如果 DevTools 窗口较大，则“监视表达式”窗格位于右侧，<strong>Event Listener Breakpoints</strong> 窗格的上方。</p>
<p>​</p>
</li>
</ol>
<p>正如猜想的那样，<code>sum</code> 的求值结果本应是数字，而实际结果却是字符串。 这就是演示页面错误的原因。</p>
<p>DevTools 为 <code>console.log()</code> 提供的另一个替代工具是 Console。可以使用 Console 对任意 JavaScript 语句求值。开发者通常利用 Console 在调试时覆盖变量值。在您所处的情况下，Console 可帮助您测试刚发现的错误的潜在解决方法。 立即试一试：</p>
<ol>
<li><p>如果您尚未打开 Console 抽屉，请按 Escape 将其打开。 它会在 DevTools 窗口底部打开。</p>
</li>
<li><p>在 Console 中，键入 <code>parseInt(addend1) + parseInt(addend2)</code>。</p>
</li>
<li><p>按 Enter。DevTools 对语句求值并打印输出 <code>6</code>，即您预料演示页面会产生的结果。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/get-started-console.png" alt="对一个语句求值后的 Console 抽屉。"><strong>图 1</strong>：对 <code>parseInt(addend1) + parseInt(addend2)</code> 求值后的 Console 抽屉。</p>
<p>​</p>
</li>
</ol>
<h2 id="第-6-步：应用修正"><a href="#第-6-步：应用修正" class="headerlink" title="第 6 步：应用修正"></a>第 6 步：应用修正</h2><p>您已找到错误的潜在解决方法。剩下的工作就是编辑代码后重新运行演示页面来测试修正效果。 您不必离开 DevTools 就能应用修正。 您可以直接在 DevTools UI 内编辑 JavaScript 代码。 立即试一试：</p>
<ol>
<li>在 DevTools 的 <strong>Sources</strong> 面板上的代码编辑器中，将 <code>var sum = addend1 + addend2</code> 替换为 <code>var sum = parseInt(addend1) + parseInt(addend2);</code>。它就是您当前暂停位置上面那行代码。</li>
<li>按 Command+S (Mac) 或 Ctrl+S（Windows、Linux）保存更改。代码的背景色变为红色，这表示在 DevTools 内更改了脚本。</li>
<li>点击 <strong>Deactivate breakpoints</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/deactivate-breakpoints-button.png" alt="停用断点">。它变为蓝色，表示处于活动状态。 如果进行了此设置，DevTools 会忽略您已设置的任何断点。</li>
<li>点击 <strong>Resume script execution</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/resume-script-execution.png" alt="继续执行脚本">。</li>
<li>使用不同的值测试演示页面。现在演示页面应能正确计算求和。</li>
</ol>
<p>切记，此工作流程只对运行在浏览器中的代码应用修正。 它不会为所有运行您的页面的用户修正代码。 要实现该目的，您需要修正运行在提供页面的服务器上的代码。</p>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p>恭喜！现在您已掌握了在 DevTools 中调试 JavaScript 的基础知识。</p>
<p>本教程只向您介绍了两种设置断点的方法。DevTools 还提供了许多其他方法，其中包括：</p>
<ul>
<li>仅在满足您指定的条件时触发的条件断点。</li>
<li>发生已捕获或未捕获异常时触发的断点。</li>
<li>当请求的网址与您提供的子字符串匹配时触发的 XHR 断点。</li>
</ul>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints" target="_blank" rel="external">为我演示所有断点</a></p>
<p>有几个代码单步执行控件在本教程中未予说明。 请点击以下链接，了解有关它们的更多信息。</p>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/step-code#stepping_in_action" target="_blank" rel="external">我想要掌握代码单步调试知识</a></p>
<h1 id="用断点暂停你的代码"><a href="#用断点暂停你的代码" class="headerlink" title="用断点暂停你的代码"></a>用断点暂停你的代码</h1><p>使用断点来暂停JavaScript代码。本指南介绍了DevTools中可用的每种类型的断点，以及何时使用和如何设置每种类型。有关调试过程的实际教程，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/javascript/" target="_blank" rel="external">Chrome DevTools中的开始调试JavaScript</a>。</p>
<h2 id="概述何时使用每个断点类型"><a href="#概述何时使用每个断点类型" class="headerlink" title="概述何时使用每个断点类型"></a>概述何时使用每个断点类型</h2><p>最知名的断点类型是代码行。但是，代码行断点可能无法设置，特别是如果您不知道确切的位置，或者您正在使用大型代码库。通过知道如何以及何时使用其他类型的断点，您可以节省调试时间。</p>
<table>
<thead>
<tr>
<th>断点类型</th>
<th>当你使用这个</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints#loc" target="_blank" rel="external">行的代码</a></td>
<td>了解确切的代码区域进行调查。</td>
</tr>
<tr>
<td><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints#conditional-loc" target="_blank" rel="external">条件代码行</a></td>
<td>了解要调查的确切代码区域，但是只有当其他条件为真时才想暂停。</td>
</tr>
<tr>
<td><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints#dom" target="_blank" rel="external">DOM</a></td>
<td>想要暂停更改或删除特定DOM节点或其子节点的代码。</td>
</tr>
<tr>
<td><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints#xhr" target="_blank" rel="external">XHR</a></td>
<td>想要在XHR URL包含字符串模式时暂停。</td>
</tr>
<tr>
<td><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints#event-listeners" target="_blank" rel="external">事件侦听器</a></td>
<td>想调查事件发生后的代码，如 <code>click</code>触发。</td>
</tr>
<tr>
<td><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints#exceptions" target="_blank" rel="external">例外</a></td>
<td>想要暂停在引发捕获或未捕获异常的代码行。</td>
</tr>
</tbody>
</table>
<h2 id="行代码断点"><a href="#行代码断点" class="headerlink" title="行代码断点"></a>行代码断点</h2><p>当您知道需要调查的确切代码区域时，请使用一行代码断点。在这行代码执行之前，DevTools <em>总是</em>暂停。</p>
<p>要在DevTools中设置一行代码断点：</p>
<ol>
<li>单击<strong>源</strong>选项卡。</li>
<li>打开包含要打破的代码行的文件。</li>
<li>去代码行。</li>
<li>代码行的左边是行号列。点击它。行号列顶部显示蓝色图标。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/loc-breakpoint.png" alt="一行代码断点。"><strong>图1</strong>：第<strong>29</strong>行设置的代码段断点<em>**</em></p>
<h3 id="有条件的代码断点"><a href="#有条件的代码断点" class="headerlink" title="有条件的代码断点"></a>有条件的代码断点</h3><p>当您知道需要调查的确切代码区域时，使用条件代码段断点，但只有当其他条件为真时才想暂停。</p>
<p>要设置条件代码段断点：</p>
<ol>
<li>单击<strong>源</strong>选项卡。</li>
<li>打开包含要打破的代码行的文件。</li>
<li>去代码行。</li>
<li>代码行的左边是行号列。右键单击它。</li>
<li>选择<strong>添加条件断点</strong>。在代码行下方显示一个对话框。</li>
<li>在对话框中输入您的条件。</li>
<li>按Enter激活断点。行号列顶部出现橙色图标。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/conditional-loc-breakpoint.png" alt="条件代码段断点。"><strong>图2</strong>：A线条件线路的代码断点集 <strong>32</strong></p>
<h3 id="管理代码段断点"><a href="#管理代码段断点" class="headerlink" title="管理代码段断点"></a>管理代码段断点</h3><p>使用“ <strong>断点</strong> ”窗格从单个位置禁用或删除代码行代码断点。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/breakpoints-pane.png" alt="“断点”窗格。"><strong>图3</strong>：“ <strong>断点</strong> ”窗格显示两行代码断点：一行在行15 <code>get-started.js</code>，另一行代码行32</p>
<ul>
<li>选中一个条目旁边的复选框以禁用该断点。</li>
<li>右键单击一个条目以删除该断点。</li>
<li>右键单击“ <strong>断点</strong> ”窗格中的任何位置以停用所有断点，禁用所有断点或删除所有断点。禁用所有断点等同于取消选中每个断点。停用所有断点指示DevTools忽略所有代码段断点，但也要保持其启用状态，以使它们处于与以前相同的状态，当您重新激活它们时。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/deactivated-breakpoints.png" alt="断点窗格中已停用断点。"><strong>图4</strong>：“ <strong>断点</strong> ”窗格中的禁用断点被禁用和透明</p>
<h2 id="DOM更改断点"><a href="#DOM更改断点" class="headerlink" title="DOM更改断点"></a>DOM更改断点</h2><p>当您想暂停更改DOM节点或其子节点的代码时，请使用DOM更改断点。</p>
<p>设置DOM更改断点：</p>
<ol>
<li>单击<strong>元素</strong>选项卡。</li>
<li>转到要设置断点的元素。</li>
<li>右键单击该元素。</li>
<li>将鼠标悬停在<strong>Break上，</strong>然后选择<strong>Subtree修改</strong>，<strong>Attribute修改</strong>或<strong>Node移除</strong>。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/dom-change-breakpoint.png" alt="用于创建DOM的上下文菜单更改断点。"><strong>图5</strong>：创建DOM更改断点的上下文菜单</p>
<h3 id="DOM类型更改断点"><a href="#DOM类型更改断点" class="headerlink" title="DOM类型更改断点"></a>DOM类型更改断点</h3><ul>
<li><strong>子树修改</strong>。当当前选择的节点的子节点被删除或添加，或子节点的内容被改变时触发。未触发子节点属性更改，或对当前选定节点的任何更改。</li>
<li><strong>属性修改</strong>：在当前选择的节点上添加或删除属性时，或属性值更改时触发。</li>
<li><strong>节点删除</strong>：当当前选择的节点被删除时触发。</li>
</ul>
<h2 id="XHR断点"><a href="#XHR断点" class="headerlink" title="XHR断点"></a>XHR断点</h2><p>当XHR的请求URL包含指定的字符串时想要中断时使用XHR断点。DevTools暂停XHR调用的代码行<code>send()</code>。</p>
<p><strong>注意：</strong>此功能也适用于<a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="external">提取</a>请求。</p>
<p>设置XHR断点：</p>
<ol>
<li>单击<strong>源</strong>选项卡。</li>
<li>展开“ <strong>XHR断点</strong> ”窗格。</li>
<li>单击<strong>添加断点</strong>。</li>
<li>输入您要打破的字符串。当这个字符串存在于XHR的请求URL中的任何位置时，DevTools会暂停。</li>
<li>按Enter确认。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/xhr-breakpoint.png" alt="创建XHR断点。"><strong>图6</strong>：在创建XHR断点<strong>XHR断点</strong> 为包含任何请求<code>org</code>的URL</p>
<h2 id="事件侦听器断点"><a href="#事件侦听器断点" class="headerlink" title="事件侦听器断点"></a>事件侦听器断点</h2><p>当您想暂停事件侦听器代码后，在事件触发后运行事件侦听器断点。您可以选择特定事件，例如事件<code>click</code>类别，例如所有鼠标事件。</p>
<ol>
<li>单击<strong>源</strong>选项卡。</li>
<li>展开“ <strong>事件侦听器断点</strong> ”窗格。DevTools显示事件类别的列表，如<strong>动画</strong>。</li>
<li>检查其中一个类别，以便在任何来自该类别的事件触发时暂停，或者展开类别并检查特定事件。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/event-listener-breakpoint.png" alt="创建事件侦听器断点。"><strong>图7</strong>：创建事件监听器断点 <code>deviceorientation</code></p>
<h2 id="异常断点"><a href="#异常断点" class="headerlink" title="异常断点"></a>异常断点</h2><p>当您想暂停在引发捕获或未捕获异常的代码行时使用异常断点。</p>
<ol>
<li>单击<strong>源</strong>选项卡。</li>
<li>点击<strong>异常暂停</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/pause-on-exceptions.png" alt="暂停例外">。启用后会变成蓝色。</li>
<li>（可选）如果您还想暂停捕获的异常，除了未捕获的异常之外，请检查<strong>“捕获异常暂停”</strong>复选框。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/uncaught-exception.png" alt="暂停了一个未被捕获的例外。"><strong>图7</strong>：暂停一个未捕获的异常</p>
<h1 id="将预处理代码映射到源代码"><a href="#将预处理代码映射到源代码" class="headerlink" title="将预处理代码映射到源代码"></a>将预处理代码映射到源代码</h1><p>保持您的客户端代码便于阅读和调试，即使在您组合、缩减或编译代码后也应如此。使用源映射将您的源代码映射到编译的代码。</p>
<h3 id="TL-DR-20"><a href="#TL-DR-20" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 Source Maps 将缩减的代码映射到源代码。随后，您可以在其原始来源中阅读和调试编译的代码。</li>
<li>仅使用<a href="https://developers.google.com/" target="_blank" rel="external">可以产生 Source Maps 的预处理器</a>。</li>
<li>验证您的网络服务器可以提供 Source Maps。</li>
</ul>
<h2 id="预处理器使用入门"><a href="#预处理器使用入门" class="headerlink" title="预处理器使用入门"></a>预处理器使用入门</h2><p>本文将说明如何与 DevTools Sources 面板中的 JavaScript Source Maps 交互。要初步了解什么是预处理器、它们的作用以及 Source Maps 的工作方式，请转至<a href="https://developers.google.com/web/tools/setup/setup-preprocessors#debugging-and-editing-preprocessed-content" target="_blank" rel="external">设置 CSS 和 JS 预处理器</a>。</p>
<h2 id="使用支持的预处理器"><a href="#使用支持的预处理器" class="headerlink" title="使用支持的预处理器"></a>使用支持的预处理器</h2><p>您需要使用可以创建源映射的压缩工具。有关最常用的选项，<a href="https://developers.google.com/web/tools/setup/setup-preprocessors#supported-preprocessors" target="_blank" rel="external">请参见我们的预处理器支持部分</a>。要详细查看，请参见<a href="https://github.com/ryanseddon/source-map/wiki/Source-maps:-languages,-tools-and-other-info" target="_blank" rel="external">源映射：语言、工具和其他信息</a> Wiki 页面。</p>
<p>Source Maps 一般与下列类型的预处理器搭配使用：</p>
<ul>
<li>转译器（<a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>、<a href="https://github.com/google/traceur-compiler/wiki/Getting-Started" target="_blank" rel="external">Traceur</a>）</li>
<li>编译器（<a href="https://github.com/google/closure-compiler" target="_blank" rel="external">Closure Compiler</a>、<a href="http://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>、<a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript</a> 和 <a href="https://www.dartlang.org/" target="_blank" rel="external">Dart</a>）</li>
<li>Minifiers (<a href="https://github.com/mishoo/UglifyJS" target="_blank" rel="external">UglifyJS</a>)</li>
</ul>
<h2 id="DevTools-Sources-面板中的-Source-Maps"><a href="#DevTools-Sources-面板中的-Source-Maps" class="headerlink" title="DevTools Sources 面板中的 Source Maps"></a>DevTools Sources 面板中的 Source Maps</h2><p>预处理器中的 Source Maps 可以使 DevTools 加载缩减代码与原始文件。然后，您可以使用原始文件设置断点和浏览代码。同时，Chrome 也会运行您的缩减代码。这会让您感觉到就像在生产环境中运行开发网站一样。</p>
<p>在 DevTools 中运行 Source Maps 时，您会注意到 JavaScript 不会编译，也会看到 Source Maps 引用的所有 JavaScript 文件。这是使用源映射，不过后台却在实际运行编译的代码。任何错误、日志和断点都将映射到开发代码，从而实现出色的调试！因此，您会感觉到就像在生产环境中运行开发网站一样。</p>
<h3 id="在设置中启用-Source-Maps"><a href="#在设置中启用-Source-Maps" class="headerlink" title="在设置中启用 Source Maps"></a>在设置中启用 Source Maps</h3><p>Source Maps 默认处于启用状态（自 Chrome 39 开始），不过，如果您想要仔细检查或启用它们，请先打开 DevTools，然后点击设置配置 <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/gear.png" alt="齿轮">。在 <strong>Sources</strong>下，选中 <strong>Enable JavaScript Source Maps</strong>。您也可以选中 <strong>Enable CSS Source Maps</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/source-maps.jpg" alt="启用 Source Maps"></p>
<h3 id="使用-Source-Maps-调试"><a href="#使用-Source-Maps-调试" class="headerlink" title="使用 Source Maps 调试"></a>使用 Source Maps 调试</h3><p><a href="https://developers.google.com/web/tools/chrome-devtools/debug/breakpoints/step-code" target="_blank" rel="external">调试代码</a> 和启用 Source Maps 时，Source Maps 将在两个地方显示：</p>
<ol>
<li>控制台中（指向来源的链接应是原始文件，而不是生成的文件）</li>
<li>逐步执行代码时（调用堆栈中的链接应打开原始的源文件）</li>
</ol>
<h2 id="sourceURL-和-displayName"><a href="#sourceURL-和-displayName" class="headerlink" title="@sourceURL 和 displayName"></a>@sourceURL 和 displayName</h2><p>虽然不是 Source Map 规范的一部分，<code>@sourceURL</code> 仍然可以让您在处理 eval 时将开发变得更轻松。此帮助程序非常类似于 <code>//# sourceMappingURL</code> 属性，并且实际上在 Source Map V3 规范中也有所提及。</p>
<p>通过将下面的特殊注释包含到代码中（将进行 eval 处理），您可以命名 eval 和内嵌脚本与样式，使其在 DevTools 中以更具逻辑的名称显示。</p>
<p><code>//# sourceURL=source.coffee</code></p>
<p>导航到此<strong>演示</strong>，然后执行以下操作：</p>
<ul>
<li>打开 DevTools 并转至 <strong>Sources</strong> 面板。</li>
<li>将一个文件名输入“Name your code:”输入字段。</li>
<li>点击 <strong>compile</strong> 按钮。</li>
<li>将出现一条提醒，以及 CoffeeScript 源的评估和。</li>
</ul>
<p>如果您展开“Sources”子面板，现在您会看到一个具有您之前输入的自定义文件名的新文件。如果您双击来查看此文件，它将包含我们原始来源的已编译 JavaScript。不过，最后一行将是 <code>// @sourceURL</code> 注释，指示原始的源文件是什么。处理语言抽象时，这样可以为调试提供很大帮助。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/coffeescript.jpg" alt="使用 sourceURL"></p>
<h1 id="JavaScript调试参考"><a href="#JavaScript调试参考" class="headerlink" title="JavaScript调试参考"></a>JavaScript调试参考</h1><p>通过Chrome DevTools调试功能的全面参考，发现新的调试工作流程。</p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/javascript" target="_blank" rel="external">开始调试JavaScript在Chrome DevTools</a>中了解调试的基础知识。</p>
<h2 id="用断点暂停代码"><a href="#用断点暂停代码" class="headerlink" title="用断点暂停代码"></a>用断点暂停代码</h2><p>设置一个断点，以便在执行过程中暂停代码。</p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints" target="_blank" rel="external">使用断点暂停代码</a>，以了解如何设置断点。</p>
<h2 id="逐步编码"><a href="#逐步编码" class="headerlink" title="逐步编码"></a>逐步编码</h2><p>一旦你的代码暂停了，一步一步地，一路一行，调查控制流程和属性值。</p>
<h3 id="一步一步的代码"><a href="#一步一步的代码" class="headerlink" title="一步一步的代码"></a>一步一步的代码</h3><p>当暂停一行代码，其中包含与您正在调试的问题无关的功能时，请单击“ <strong>逐步</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/step-over.png" alt="一步一步">执行”以执行该功能，而无需进入。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/step-over-outline.svg" alt="选择“过渡”。"><strong>图1</strong>。<strong>跳过</strong>，蓝色概述</p>
<p>例如，假设您正在调试以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateHeader</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> day = <span class="keyword">new</span> <span class="built_in">Date</span>().getDay();</div><div class="line">  <span class="keyword">var</span> name = getName(); <span class="comment">// A</span></div><div class="line">  updateName(name); <span class="comment">// D</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = app.first + <span class="string">' '</span> + app.last; <span class="comment">// B</span></div><div class="line">  <span class="keyword">return</span> name; <span class="comment">// C</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你暂停对<code>A</code>。通过按<strong>步骤</strong>，DevTools将执行您所跳过的功能中的所有代码，这是<code>B</code>和<code>C</code>。DevTools然后暂停<code>D</code>。</p>
<h3 id="一步一行的代码"><a href="#一步一行的代码" class="headerlink" title="一步一行的代码"></a>一步一行的代码</h3><p>当包含与您正在调试的问题相关的函数调用的代码行中暂停时，单击“ <strong>步入”</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/step-into.png" alt="步入">以进一步调查此功能。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/step-into-outline.svg" alt="选择“进入”。"><strong>图2</strong>。<strong>进入</strong>，蓝色概述</p>
<p>例如，假设您正在调试以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateHeader</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> day = <span class="keyword">new</span> <span class="built_in">Date</span>().getDay();</div><div class="line">  <span class="keyword">var</span> name = getName(); <span class="comment">// A</span></div><div class="line">  updateName(name);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = app.first + <span class="string">' '</span> + app.last; <span class="comment">// B</span></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你暂停对<code>A</code>。通过按<strong>步骤</strong>，DevTools会执行这一行代码，然后暂停<code>B</code>。</p>
<h3 id="一步一步的代码-1"><a href="#一步一步的代码-1" class="headerlink" title="一步一步的代码"></a>一步一步的代码</h3><p>当暂停在与您正在调试的问题无关的功能中时，单击<strong>Step out</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/step-out.png" alt="走出去"> 执行功能代码的其余部分。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/step-out-outline.svg" alt="选择“退出”。"><strong>图3</strong>。<strong>走出去</strong>，用蓝色概括</p>
<p>例如，假设您正在调试以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateHeader</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> day = <span class="keyword">new</span> <span class="built_in">Date</span>().getDay();</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line">  updateName(name); <span class="comment">// C</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = app.first + <span class="string">' '</span> + app.last; <span class="comment">// A</span></div><div class="line">  <span class="keyword">return</span> name; <span class="comment">// B</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你暂停对<code>A</code>。通过按下<strong>Step out</strong>，DevTools会执行其中的代码<code>getName()</code>，这只是<code>B</code>在这个例子中，然后暂停<code>C</code>。</p>
<h3 id="运行所有代码到一定的行"><a href="#运行所有代码到一定的行" class="headerlink" title="运行所有代码到一定的行"></a>运行所有代码到一定的行</h3><p>调试长功能时，可能会有很多与调试问题无关的代码。</p>
<p>你<em>可以</em>通过所有的路线，但这可能是乏味的。您<em>可以</em> 在您感兴趣的行上设置一行代码断点，然后按<strong>恢复脚本执行</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/resume-script-execution.png" alt="恢复脚本执行">，但有一个更快的方法。</p>
<p>右键单击您感兴趣的代码行，然后选择 <strong>继续到此处</strong>。DevTools运行所有代码，然后暂停该行。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/continue-to-here.png" alt="选择“继续到这里”。"><strong>图4</strong>。选择<strong>继续到这里</strong></p>
<h3 id="重新启动调用堆栈的顶部功能"><a href="#重新启动调用堆栈的顶部功能" class="headerlink" title="重新启动调用堆栈的顶部功能"></a>重新启动调用堆栈的顶部功能</h3><p>在暂停一行代码时，右键单击“调用堆栈”窗格中的任意位置，然后选择“ <strong>重新启动帧”</strong>以在调用堆栈中顶部函数的第一行暂停。顶部函数是最后一个被调用的函数。</p>
<p>例如，假设您正在浏览以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> product = <span class="number">0</span>; <span class="comment">// B</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">    product += i;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> product; <span class="comment">// A</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你暂停对<code>A</code>。单击<strong>重新启动框架后</strong>，您将暂停<code>B</code>，而无需设置断点或按 <strong>恢复脚本执行</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/restart-frame.png" alt="选择“重新启动框架”。"><strong>图5</strong>。选择<strong>重新启动帧</strong></p>
<h3 id="恢复脚本执行"><a href="#恢复脚本执行" class="headerlink" title="恢复脚本执行"></a>恢复脚本执行</h3><p>要在暂停后继续执行脚本，请单击“ <strong>恢复脚本执行”</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/resume-script-execution.png" alt="恢复脚本执行">。DevTools执行脚本直到下一个断点（如果有的话）。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/resume-script-execution-outline.svg" alt="选择“恢复脚本执行”。"><strong>图6</strong>。<strong>恢复脚本执行</strong>，概述为蓝色</p>
<h4 id="强制执行脚本"><a href="#强制执行脚本" class="headerlink" title="强制执行脚本"></a>强制执行脚本</h4><p>要忽略所有断点并强制您的脚本恢复执行，请单击并按住<strong>恢复脚本执行</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/images/resume-script-execution.png" alt="恢复脚本执行">，然后选择<strong>强制执行脚本</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/force-script-execution.png" alt="强制执行脚本">。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/selecting-force-script-execution.png" alt="选择“强制脚本执行”。"><strong>图7</strong>。选择<strong>强制脚本执行</strong></p>
<h3 id="更改线程上下文"><a href="#更改线程上下文" class="headerlink" title="更改线程上下文"></a>更改线程上下文</h3><p>在使用Web工作人员或服务工作人员时，单击“线程”窗格中列出的上下文切换到该上下文。蓝色箭头图标表示当前选择的上下文。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/threads.svg" alt="线程窗格。"><strong>图8</strong>。“线程”窗格，以蓝色概括</p>
<p>例如，假设您在主脚本和服务工作脚本中的断点处暂停。您希望查看服务工作者上下文的本地和全局属性，但“源”面板显示主脚本上下文。通过单击“线程”窗格中的服务工作者条目，您将可以切换到该上下文。</p>
<h2 id="查看和编辑本地，关闭和全局属性"><a href="#查看和编辑本地，关闭和全局属性" class="headerlink" title="查看和编辑本地，关闭和全局属性"></a>查看和编辑本地，关闭和全局属性</h2><p>在暂停一行代码时，使用“范围”窗格来查看和编辑本地，关闭和全局作用域中的属性和变量的值。</p>
<ul>
<li>双击属性值进行更改。</li>
<li>不可枚举的属性是灰色的。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/scope.svg" alt="“范围”窗格。"><strong>图9</strong>。“范围”窗格，以蓝色概括</p>
<h2 id="查看当前的调用堆栈"><a href="#查看当前的调用堆栈" class="headerlink" title="查看当前的调用堆栈"></a>查看当前的调用堆栈</h2><p>在暂停一行代码的同时，使用“调用堆栈”窗格可以查看到此为止的调用堆栈。</p>
<p>如果您正在使用异步代码，请检查“ <strong>异步”</strong>复选框以启用异步调用堆栈。</p>
<p>单击一个条目跳转到该函数调用的代码行。蓝色箭头图标表示DevTools当前正在突出显示的功能。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/call-stack.svg" alt="呼叫堆栈窗格。"><strong>图10</strong>。“调用堆栈”窗格，以蓝色概括</p>
<p><strong>注意：</strong>当一行代码没有暂停时，“调用堆栈”窗格为空。</p>
<h3 id="复制堆栈跟踪"><a href="#复制堆栈跟踪" class="headerlink" title="复制堆栈跟踪"></a>复制堆栈跟踪</h3><p>右键单击“调用堆栈”窗格中的任意位置，然后选择“ <strong>复制堆栈跟踪</strong> ”将当前调用堆栈复制到剪贴板。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/copy-stack-trace.png" alt="选择“复制堆栈跟踪”。"><strong>图11</strong>。选择<strong>复制堆栈跟踪</strong></p>
<p>下面是一个输出示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getNumber1 (get-started.js:<span class="number">35</span>)</div><div class="line">inputsAreEmpty (get-started.js:<span class="number">22</span>)</div><div class="line">onClick (get-started.js:<span class="number">15</span>)</div></pre></td></tr></table></figure>
<h2 id="忽略脚本或脚本模式"><a href="#忽略脚本或脚本模式" class="headerlink" title="忽略脚本或脚本模式"></a>忽略脚本或脚本模式</h2><p>当您要在调试时忽略该脚本时，Blackbox会出现一个脚本。当黑盒子时，在“调用堆栈”窗格中隐藏了一个脚本，当您逐步执行代码时，您就不会进入脚本的功能。</p>
<p>例如，假设您正在逐步执行此代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  prepare();</div><div class="line">  lib.doFancyStuff(); <span class="comment">// A</span></div><div class="line">  render();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>A</code>是您信任的第三方图书馆。如果您确信您正在调试的问题与第三方库无关，那么黑盒子的脚本是有意义的。</p>
<h3 id="从“编辑器”窗格中选择一个脚本"><a href="#从“编辑器”窗格中选择一个脚本" class="headerlink" title="从“编辑器”窗格中选择一个脚本"></a>从“编辑器”窗格中选择一个脚本</h3><p>从“编辑器”窗格中对一个脚本进行黑框：</p>
<ol>
<li>打开文件。</li>
<li>右键单击任意位置。</li>
<li>选择<strong>Blackbox脚本</strong>。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/blackbox-editor-pane.png" alt="从编辑器窗格中打包一个脚本。"><strong>图12</strong>。从编辑器窗格中打包一个脚本</p>
<h3 id="Blackbox从“调用堆栈”窗格中的脚本"><a href="#Blackbox从“调用堆栈”窗格中的脚本" class="headerlink" title="Blackbox从“调用堆栈”窗格中的脚本"></a>Blackbox从“调用堆栈”窗格中的脚本</h3><p>从“调用堆栈”窗格中对一个脚本进行黑框：</p>
<ol>
<li>右键单击脚本中的函数。</li>
<li>选择<strong>Blackbox脚本</strong>。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/blackbox-call-stack-pane.png" alt="从“调用堆栈”窗格中打包一个脚本。"><strong>图13</strong>。从“调用堆栈”窗格中打包一个脚本</p>
<h3 id="Blackbox从Settings设置一个脚本"><a href="#Blackbox从Settings设置一个脚本" class="headerlink" title="Blackbox从Settings设置一个脚本"></a>Blackbox从Settings设置一个脚本</h3><p>从“设置”中单击单个脚本或脚本模式：</p>
<ol>
<li>打开<a href="https://developers.google.com/web/tools/chrome-devtools/ui#settings" target="_blank" rel="external">设置</a>。</li>
<li>转到<strong>Blackboxing</strong>选项卡。</li>
<li>单击<strong>添加模式</strong>。</li>
<li>输入脚本名称或脚本名称的正则表达式模式到blackbox。</li>
<li>单击<strong>添加</strong>。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/blackbox.png" alt="从“设置”中打勾一个脚本。"><strong>图14</strong>。从“设置”中打勾一个脚本</p>
<h2 id="从任何页面运行调试代码段"><a href="#从任何页面运行调试代码段" class="headerlink" title="从任何页面运行调试代码段"></a>从任何页面运行调试代码段</h2><p>如果您发现自己在控制台中运行相同的调试代码，请考虑使用代码段。代码段是您在DevTools中创建，存储和运行的可执行脚本。</p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/snippets" target="_blank" rel="external">运行代码片段从任何页面</a>了解更多。</p>
<h2 id="观察自定义JavaScript表达式的值"><a href="#观察自定义JavaScript表达式的值" class="headerlink" title="观察自定义JavaScript表达式的值"></a>观察自定义JavaScript表达式的值</h2><p>使用“监视”窗格来观看自定义表达式的值。您可以观看任何有效的JavaScript表达式。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/watch.svg" alt="观察窗格。"><strong>图15</strong>。手表窗格，以蓝色概括</p>
<ul>
<li>单击<strong>添加表达式</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/add-expression.png" alt="添加表达式">创建一个新的表达式。</li>
<li>单击<strong>刷新</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/refresh.png" alt="刷新"> 以刷新所有现有表达式的值。值在逐步执行代码时自动刷新。</li>
<li>将鼠标悬停在表达式上，然后单击<strong>删除表达式</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/delete-expression.png" alt="删除表达式">将其删除。</li>
</ul>
<h2 id="做一个最小化的文件可读"><a href="#做一个最小化的文件可读" class="headerlink" title="做一个最小化的文件可读"></a>做一个最小化的文件可读</h2><p>点击<strong>格式</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/format.png" alt="格式">，使一个最小化的文件可读。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/format.svg" alt="格式按钮。"><strong>图16</strong>。<strong>格式</strong>，蓝色概述</p>
<h2 id="编辑脚本"><a href="#编辑脚本" class="headerlink" title="编辑脚本"></a>编辑脚本</h2><p>修复错误时，您经常要测试JavaScript代码的一些更改。您不需要在外部浏览器中进行更改，然后重新加载页面。您可以在DevTools中编辑脚本。</p>
<p>编辑脚本：</p>
<ol>
<li>在“源”面板的“编辑器”窗格中打开文件。</li>
<li>在“编辑器”窗格中进行更改。</li>
<li>按Command+ S（Mac）或 Ctrl+ S（Windows，Linux）保存。DevTools将整个JS文件修复到Chrome的JavaScript引擎。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/editor.svg" alt="编辑器窗格。"><strong>图17</strong>。编辑器窗格，以蓝色概括</p>
<h1 id="如何单步调试代码"><a href="#如何单步调试代码" class="headerlink" title="如何单步调试代码"></a>如何单步调试代码</h1><p>通过每次执行一个代码行或一个函数，您可以观察数据和页面中的变化，准确了解正在发生什么。您还可以修改脚本使用的数据值，您甚至可以修改脚本本身。</p>
<p><em>为什么此变量值是 20 而不是 30？为什么该代码行看上去没什么效果？为什么此标志在应为 false 的时候成为 true？</em> 每个开发者都面临这些问题，逐步执行代码可了解问题所在。</p>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints" target="_blank" rel="external">设置断点</a>后，返回此页面，并正常地使用它，直到达到某个断点。这将暂停页面上的所有 JavaScript，焦点转向“DevTools Sources”面板，并突出显示断点。现在，您可以有选择性地执行代码并逐步检查其数据。</p>
<h3 id="TL-DR-21"><a href="#TL-DR-21" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>逐步执行代码以便在问题发生之前或发生时观察问题，并通过实时编辑测试更改。</li>
<li>最好越过控制台记录，因为记录的数据在到达控制台时已过时。</li>
<li>启用“Async call stack”功能以提高异步函数调用堆栈的可视性。</li>
<li>将脚本设为黑箱以使第三方代码不出现在调用堆栈中。</li>
<li>使用已命名的函数而不是匿名函数，以提高调用堆栈可读性。</li>
</ul>
<h2 id="步骤的操作"><a href="#步骤的操作" class="headerlink" title="步骤的操作"></a>步骤的操作</h2><p>所有步骤选项均通过边栏中的可点击图标<img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_7.png" alt="断点按钮栏">表示，但也可以通过快捷键触发。下面是简要介绍：</p>
<table>
<thead>
<tr>
<th>图标/按钮</th>
<th>操作</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_8.png" alt="Resume"></td>
<td>Resume</td>
<td>继续执行直到下一个断点。如果没有遇到断点，则继续正常执行。</td>
</tr>
<tr>
<td><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_9.png" alt="Long Resume"></td>
<td>Long Resume</td>
<td>继续执行，将断点停用 500 毫秒。便于暂时跳过断点，否则会持续暂停执行代码，例如，循环内的断点。<strong>点击并按住 Resume，直到展开以显示操作。</strong></td>
</tr>
<tr>
<td><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_10.png" alt="Step Over"></td>
<td>Step Over</td>
<td>不管下一行发生什么都会执行，并跳转到下一行。</td>
</tr>
<tr>
<td><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_11.png" alt="Step Into"></td>
<td>Step Into</td>
<td>如果下一行包含一个函数调用，<em>Step Into</em> 将跳转并在其第一行暂停该函数。</td>
</tr>
<tr>
<td><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_12.png" alt="Step Out"></td>
<td>Step Out</td>
<td>函数调用后，执行当前函数剩余部分，然后在下一个语句暂停。</td>
</tr>
<tr>
<td><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_13.png" alt="Deactivate breakpoints"></td>
<td>Deactivate breakpoints</td>
<td>暂时停用所有断点。用于继续完整执行，不会真正移除断点。再次点击以重新激活断点。</td>
</tr>
<tr>
<td><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_14.png" alt="Pause on exceptions"></td>
<td>Pause on exceptions</td>
<td>在发生异常时，自动暂停执行代码。</td>
</tr>
</tbody>
</table>
<p>使用 <strong>step into</strong> 作为典型的“一次一行”操作，因为它确保只有一个语句被执行，无论您进入或离开哪些函数。</p>
<p>当您怀疑未捕获的异常正在引发问题，但不知道异常在哪里时，使用 <a href="https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints#break-on-uncaught-exception" target="_blank" rel="external">Pause on exceptions</a>。启用此选项后，您可以通过点击 <strong>Pause On Caught Exceptions</strong> 复选框优化它；在此情况下，仅当发生需要特别处理的异常时执行才会暂停。</p>
<h2 id="按作用域查看属性"><a href="#按作用域查看属性" class="headerlink" title="按作用域查看属性"></a>按作用域查看属性</h2><p>当您暂停脚本时，<strong>Scope</strong> 窗格会显示在该时刻当前已定义的所有属性。</p>
<p>在以下屏幕截图中，此窗格用蓝色突出显示。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/scope-pane.png" alt="Sources 面板的 Scope 窗格"></p>
<p>Scope 窗格只有在脚本暂停时才会填充信息。页面运行时，Scope 窗格不含任何信息。</p>
<p>Scope 窗格显示在 local、closure 和 global 级别定义的属性。</p>
<p>如果某个属性旁有“Carat”图标，这意味着此属性指代一个对象。点击“Carat”图标可展开对象并查看其属性。</p>
<p>有时这些属性的显示会变暗。例如，在以下屏幕截图中，属性 <code>constructor</code> 比 <code>confirm</code> 属性暗淡。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/enumerables.png" alt="显示暗淡的属性"></p>
<p>深颜色属性可以计数。浅颜色、显示暗淡的属性则不可计数。 如需了解详细信息，请参阅以下 Stack Overflow 主题：<a href="https://developers.google.com/web/tools/chrome-devtools/javascript/Chrome%20%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%20Scope%20%E9%9D%A2%E6%9D%BF%E4%B8%AD%E7%9A%84%E9%A2%9C%E8%89%B2%E6%9C%89%E4%BD%95%E5%90%AB%E4%B9%89%EF%BC%9F" target="_blank" rel="external">Chrome 开发者工具 Scope 面板中的颜色有何含义？</a></p>
<h2 id="调用堆栈"><a href="#调用堆栈" class="headerlink" title="调用堆栈"></a>调用堆栈</h2><p>在靠近边栏顶部的位置是 <strong>Call Stack</strong> 部分。在断点处代码暂停时，调用堆栈以倒序形式显示将代码带到该断点的执行路径。这不但有助于了解执行<em>现在</em>所在位置，还有助于了解代码的执行路径，这是进行调试的一个重要因素。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_15.png" alt="Call stack"></p>
<p><code>index.html</code> 文件中位于第 50 行的一个初始 onclick 事件调用了位于 <code>dgjs.js</code>JavaScript 文件第 18 行的 <code>setone()</code> 函数，后者接着调用了位于同一文件第 4 行的 <code>setall()</code> 函数，执行在当前断点处暂停。</p>
<h3 id="启用异步调用堆栈"><a href="#启用异步调用堆栈" class="headerlink" title="启用异步调用堆栈"></a>启用异步调用堆栈</h3><p>启用异步调用堆栈功能可提高执行异步函数调用的透明度。</p>
<ol>
<li>打开 DevTools 的 <strong>Sources</strong> 面板。</li>
<li>在 <strong>Call Stack</strong> 窗格上，启用 <strong>Async</strong> 复选框。</li>
</ol>
<p>以下视频包含一个展示异步调用堆栈功能的简单脚本。 在此脚本中，第三方库用于选择一个 DOM 元素。 一个名为 <code>onClick</code> 的函数被注册为此元素的 <code>onclick</code> 事件处理程序。 无论何时调用 <code>onClick</code>，它都会循序调用一个名为 <code>f</code> 的函数，该函数通过 <code>debugger</code> 关键字强制脚本暂停。</p>
<p>在此视频中，触发了一个断点并展开了调用堆栈。堆栈中只有一个调用：<code>f</code>。 然后，启用异步调用堆栈功能，脚本继续执行，并再次触发断点和展开调用堆栈。此时，调用堆栈包含 <code>f</code> 之前的所有调用，包括第三方内容库调用和 <code>onClick</code> 调用。首次调用该脚本时，调用堆栈中只有一个调用。 第二次调用脚本时，有四个调用。简言之，异步调用堆栈功能可提高完整的异步函数调用堆栈的可视性。</p>
<h3 id="提示：给函数命名以提高调用堆栈可读性"><a href="#提示：给函数命名以提高调用堆栈可读性" class="headerlink" title="提示：给函数命名以提高调用堆栈可读性"></a>提示：给函数命名以提高调用堆栈可读性</h3><p>匿名函数使调用堆栈很难阅读。为函数命名以提高可读性。</p>
<p>以下两个屏幕截图中的代码段功能效果相同：代码功能并不重要，重要的是第一个屏幕截图中的代码使用匿名函数，而第二个屏幕截图中的代码使用已命名的函数。</p>
<p>在第一个屏幕截图的调用堆栈中，前两个函数均标明 <code>(anonymous function)</code>。 在第二个屏幕截图中，前两个函数已命名，从而让您更容易了解程序流的大致情况。在处理大量的脚本文件（包括第三方内容库和框架）时，您的调用堆栈为五个或者十个调用深，在函数已命名后，理解调用堆栈流要容易得多。</p>
<p>含匿名函数的调用堆栈：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/anon.png" alt="包含可读性低匿名函数的调用堆栈"></p>
<p>含已命名函数的调用堆栈：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/named.png" alt="包含可读性更高已命名函数的调用堆栈"></p>
<h3 id="将第三方代码设置为黑箱"><a href="#将第三方代码设置为黑箱" class="headerlink" title="将第三方代码设置为黑箱"></a>将第三方代码设置为黑箱</h3><p>将脚本文件设置为黑箱以忽略来自调用栈的第三方文件。</p>
<p>设置为黑箱之前：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/before-blackbox.png" alt="设置为黑箱之前的调用堆栈"></p>
<p>设置为黑箱之后：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/after-blackbox.png" alt="设置为黑箱之后的调用堆栈"></p>
<p>如需将文件设置为黑箱：</p>
<ol>
<li>打开 DevTools Settings。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/open-settings.png" alt="打开 DevTools 设置"></p>
<ol>
<li>在左侧的导航菜单中，点击 <strong>Blackboxing</strong>。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/blackbox-panel.png" alt="Chrome DevTools 中的 Blackboxing 面板"></p>
<ol>
<li>点击 <strong>Add pattern</strong>。</li>
<li>在 <strong>Pattern</strong> 文本字段中，输入您想要从调用堆栈排除的文件名模式。 DevTools 将排除与该模式匹配的任意脚本。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/add-pattern.png" alt="添加黑箱模式"></p>
<ol>
<li>在文本字段右侧的下拉菜单中，选择 <strong>Blackbox</strong> 以执行脚本文件，但从调用堆栈排除调用，或选择 <strong>Disabled</strong> 以阻止执行文件。</li>
<li>点击 <strong>Add</strong> 保存。</li>
</ol>
<p>下次运行此页面并触发断点时，DevTools 将使函数调用不出现在来自调用堆栈的已设置为黑箱的脚本中。</p>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p>代码执行暂停时，您可以观察和修改其正在处理的数据。这对于尝试追踪一个看上去有错误值的变量或没有如期收到的传递参数很关键。</p>
<p>通过点击 <strong>Show/Hide drawer</strong> 显示 Console 抽屉<img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_16.png" alt="显示/隐藏抽屉">或按 ESC.在执行步骤时打开控制台，您现在可以：</p>
<ul>
<li>输入变量的名称以在当前函数范围中查看其当前值</li>
<li>输入一个 JavaScript 分配语句以更改此值</li>
</ul>
<p>尝试修改值，然后继续执行以查看它如何改变您的代码的结果，以及它是否如期运行。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_17.png" alt="Console Drawer"></p>
<p>我们发现参数 <code>dow</code> 的值当前为 2，但在继续执行前将其手动更改为 3。</p>
<h2 id="实时编辑"><a href="#实时编辑" class="headerlink" title="实时编辑"></a>实时编辑</h2><p>观察并暂停执行代码有助于您查找错误，而实时编辑让您可以快速预览更改，无需重新加载。</p>
<p>如需实时编辑脚本，只需在执行步骤时点击“Sources”面板的编辑器部分。在编辑器中进行所需的更改，然后按 Ctrl+S（或在 Mac 上按 Cmd+S）提交此更改。此时，整个 JS 文件将作为补丁程序进入 VM，并且所有函数定义都将更新。</p>
<p>现在，您可以继续执行；已修改的脚本将替代原始脚本执行，并且您可以观察您的更改效果。</p>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/image_18.png" alt="实时编辑"></p>
<p>我们怀疑参数 <code>dow</code> 在被传递到函数 <code>setone()</code> 时，在任何情况下都会增加 1，也就是说，收到的值 <code>dow&lt;</code> 在应为 0 时却为 1，在应为 1 时却为 2，等等。为了快速测试递减的传递值是否确认这是一个问题，我们在函数的开头添加第 17 行，并按 Ctrl + S 键提交并继续。</p>
<h2 id="管理线程执行"><a href="#管理线程执行" class="headerlink" title="管理线程执行"></a>管理线程执行</h2><p>使用 Sources 面板上的 <strong>Threads</strong> 窗格可暂停、进入以及检查其他线程，例如服务工作线程或网络工作线程。</p>
<p>为展示 Threads 窗格，此部分使用了以下演示：<a href="http://mdn.github.io/simple-web-worker/" target="_blank" rel="external">网络工作线程基本示例</a>。</p>
<p>如果您打开应用上的 DevTools，就能发现 main 脚本位于 <code>main.js</code> 中：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/main-script.png" alt="Main 脚本"></p>
<p>网络 worker 脚本位于 <code>worker.js</code> 中：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/worker-script.png" alt="Worker 脚本"></p>
<p>Main 脚本侦听对 <strong>Multiply number 1</strong> 或 <strong>Multiply number 2</strong> 输入字段做出的更改。 侦听到更改时，main 脚本立即向网络工作线程发送一则消息，内含这两个需要相乘的数值。 网络工作线程执行完乘法运算后将结果返回给 main 脚本。</p>
<p>假定您在 <code>main.js</code> 中设置了一个在第一个数字发生变化时触发的断点：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/main-script-breakpoint.png" alt="Main 脚本断点"></p>
<p>并且您还在 <code>worker.js</code> 中设置了一个在工作线程收到消息时触发的断点：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/worker-script-breakpoint.png" alt="Worker 脚本断点"></p>
<p>在此应用的 UI 触发这两个断点时修改第一个数字。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/breakpoints-triggered.png" alt="触发的 main 和 worker 脚本断点"></p>
<p>在 Threads 窗格中，蓝色箭头指示的是当前选定的线程。 例如，在上面的屏幕截图中，选定的是 <strong>Main</strong> 线程。</p>
<p>DevTools 所有用于单步调试代码（继续或暂停脚本执行、单步执行下一函数调用、进入并单步执行下一函数调用等）的控件都与该线程有关。换言之，如果您在 DevTools 显示类似以上屏幕截图的内容时按 <strong>Resume script execution</strong> 按钮，Main 线程会继续执行，但网络工作线程仍将暂停。<strong>Call Stack</strong> 和 <strong>Scope</strong> 部分同样只显示 Main 线程的信息。</p>
<p>如果您想为网络工作线程单步调试代码，或查看其作用域和调用堆栈信息，只需在 Threads 窗格中点击其标签，使其旁边出现蓝色箭头。以下屏幕截图显示的是选择工作线程后调用堆栈和作用域信息的变化情况。同样，如果您要按任何一个单步调试代码按钮（继续执行脚本、单步执行下一函数调用等），该操作将只与工作线程有关。Main 线程不受影响。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/worker-thread.png" alt="获得焦点的工作线程"></p>
<h1 id="美化-JavaScript-外观"><a href="#美化-JavaScript-外观" class="headerlink" title="美化 JavaScript 外观"></a>美化 JavaScript 外观</h1><p>在 <strong>Sources</strong> 面板中查看脚本时，请点击 <strong>Pretty-Print</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/prettyprint-icon.png" alt="pretty-print 图标"> 图标，将缩减的脚本转换成更便于人阅读的形式。</p>
<p>下面是缩减的脚本在 <strong>Sources</strong> 面板中可能的外观：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/pretty-print-off.jpg" alt="缩减的脚本"></p>
<p>下面是相同脚本在点击 <strong>Pretty-Print</strong> 图标后的外观：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/pretty-print-on.jpg" alt="点击 pretty print 之后缩减的脚本"></p>
<h1 id="在-Sources-中观察变量"><a href="#在-Sources-中观察变量" class="headerlink" title="在 Sources 中观察变量"></a>在 Sources 中观察变量</h1><p>利用 Chrome DevTools，您可以轻松地查看整个应用中的多个变量。在 Sources 中观察变量让您可以不必使用控制台，并将精力放在改进代码上。</p>
<p>Sources 面板让您可以观察应用中的变量。此功能位于调试程序边栏的 Watch 部分。利用此功能，您无需将对象重复记录到控制台中。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/sources-watch-variables-location.png" alt="调试程序的 Watch 部分"></p>
<h2 id="添加变量"><a href="#添加变量" class="headerlink" title="添加变量"></a>添加变量</h2><p>要将变量添加至观察列表，请使用此部分标题右侧的 Add 图标。这将打开内嵌输入窗口，您在这里提供要观察的变量名称。填好后，按 Enter 键将其添加到列表中。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/add-variable-to-watch.png" alt="添加到观察列表按钮"></p>
<p>观察窗口将显示变量在添加时的当前值。如果变量未设置或无法找到，值将显示为 <not available="">。</not></p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/undefined-variable-in-watch.png" alt="观察列表中的未定义变量"></p>
<h2 id="更新变量"><a href="#更新变量" class="headerlink" title="更新变量"></a>更新变量</h2><p>应用继续操作时，变量值会更改。观察列表不是变量的实时视图，除非您正在单步执行。当您使用<a href="https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints" target="_blank" rel="external">断点</a>单步执行时，观察值会自动更新。要手动重新检查列表中的值，请按这一部分标题右侧的 Refresh 按钮。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/refresh-variables-being-watched.png" alt="刷新观察变量按钮"></p>
<p>请求刷新时，将重新检查当前应用状态。每个观察项目都会更新为当前值。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/updated-variable-being-watched.png" alt="所观察的已更新变量"></p>
<h2 id="移除变量"><a href="#移除变量" class="headerlink" title="移除变量"></a>移除变量</h2><p>为了确保您观察的内容尽可能少以加快工作速度，您需要从观察列表中移除变量。可以将鼠标悬停在变量上，然后点击右侧的移除图标。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/javascript/imgs/hover-to-delete-watched-variable.png" alt="将鼠标悬停在变量上以从观察列表中移除"></p>
<h1 id="使用控制台"><a href="#使用控制台" class="headerlink" title="使用控制台"></a>使用控制台</h1><p>了解如何：打开 DevTools 控制台；堆叠冗余消息或将其显示在各自的行上；清除或保留输出，或者将其保存到文件中；过滤输出，以及访问其他控制台设置。</p>
<h3 id="TL-DR-22"><a href="#TL-DR-22" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>以专用面板或任何其他面板旁的抽屉式导航栏的形式打开控制台。</li>
<li>堆叠冗余消息，或者将其显示在各自的行上。</li>
<li>清除或保留页面之间的输出，或者将其保存到文件中。</li>
<li>按严重性等级、通过隐藏网络消息或者按正则表达式模式对输出进行过滤。</li>
</ul>
<h2 id="打开控制台"><a href="#打开控制台" class="headerlink" title="打开控制台"></a>打开控制台</h2><p>以全屏模式的专用面板形式访问控制台：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-panel.png" alt="Console 面板"></p>
<p>或以任何其他面板旁的抽屉式导航栏的形式：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-drawer.png" alt="Console 抽屉式导航栏"></p>
<h3 id="以面板形式打开"><a href="#以面板形式打开" class="headerlink" title="以面板形式打开"></a>以面板形式打开</h3><p>要打开专用的 <strong>Console</strong> 面板，请执行以下操作之一：</p>
<ul>
<li>按 Ctrl+Shift+J (Windows / Linux) 或者 Cmd+Opt+J (Mac)。</li>
<li>如果 DevTools 已打开，则按 <strong>Console</strong> 按钮。</li>
</ul>
<p>打开 Console 面板时，Console 抽屉式导航栏将自动折叠。</p>
<h3 id="以抽屉式导航栏形式打开"><a href="#以抽屉式导航栏形式打开" class="headerlink" title="以抽屉式导航栏形式打开"></a>以抽屉式导航栏形式打开</h3><p>要以任何其他面板旁的抽屉式导航栏的形式打开控制台，请执行以下操作之一：</p>
<ul>
<li>在 DevTools 处于聚焦状态时按 Esc。</li>
<li>按 <strong>Customize and control DevTools</strong> 按钮，然后按 <strong>Show console</strong>。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/show-console.png" alt="显示控制台"></p>
<h2 id="消息堆叠"><a href="#消息堆叠" class="headerlink" title="消息堆叠"></a>消息堆叠</h2><p>如果一条消息连续重复，而不是在新行上输出每一个消息实例，控制台将“堆叠”消息并在左侧外边距显示一个数字。此数字表示该消息已重复的次数。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/message-stacking.png" alt="消息堆叠"></p>
<p>如果您倾向于为每一个日志使用一个独特的行条目，请在 DevTools 设置中启用 <strong>Show timestamps</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/show-timestamps.png" alt="显示时间戳"></p>
<p>由于每一条消息的时间戳均不同，因此，每一条消息都将显示在各自的行上。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/timestamped-console.png" alt="带时间戳的控制台"></p>
<h2 id="处理控制台历史记录"><a href="#处理控制台历史记录" class="headerlink" title="处理控制台历史记录"></a>处理控制台历史记录</h2><h3 id="清除历史记录"><a href="#清除历史记录" class="headerlink" title="清除历史记录"></a>清除历史记录</h3><p>您可以通过以下方式清除控制台历史记录：</p>
<ul>
<li>在控制台中点击右键，然后按 <strong>Clear console</strong>。</li>
<li>在控制台中键入 <code>clear()</code>。</li>
<li>从您的 JavaScript 代码内调用 <code>console.clear()</code>。</li>
<li>按 Ctrl+L （Mac、Windows、Linux）。</li>
</ul>
<h3 id="保留历史记录"><a href="#保留历史记录" class="headerlink" title="保留历史记录"></a>保留历史记录</h3><p>启用控制台顶部的 <strong>Preserve log</strong> 复选框可以在页面刷新或更改之间保留控制台历史记录。 消息将一直存储，直至您清除控制台或者关闭标签。</p>
<h3 id="保存历史记录"><a href="#保存历史记录" class="headerlink" title="保存历史记录"></a>保存历史记录</h3><p>在控制台中点击右键，然后选择 <strong>Save as</strong>，将控制台的输出保存到日志文件中。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-save-as.png" alt="将控制台的输出保存到日志文件"></p>
<h2 id="选择执行环境"><a href="#选择执行环境" class="headerlink" title="选择执行环境"></a>选择执行环境</h2><p>以下屏幕截图中以蓝色突出显示的下拉菜单称为 <strong>Execution Context Selector</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/execution-context-selector.png" alt="Execution Context Selector"></p>
<p>通常，您会看到此环境设置为 <code>top</code>（页面的顶部框架）。</p>
<p>其他框架和扩展程序在其自身的环境中运行。要使用这些其他环境，您需要从下拉菜单中选中它们。 例如，如果您要查看 <code>&lt;iframe&gt;</code> 元素的日志输出，并修改该环境中存在的某个变量，您需要从 Execution Context Selector 下拉菜单中选中该元素。</p>
<p>控制台默认设置为 <code>top</code> 环境，除非您通过检查其他环境中的某个元素来访问 DevTools。 例如，如果您检查 <code>&lt;iframe&gt;</code>中的一个 <code>&lt;p&gt;</code> 元素，那么，DevTools 将 Execution Context Selector 设置为该 <code>&lt;iframe&gt;</code> 的环境。</p>
<p>当您在 <code>top</code> 以外的环境中操作时，DevTools 将 Execution Context Selector 突出显示为红色，如下面的屏幕截图中所示。 这是因为开发者很少需要在 <code>top</code> 以外的任意环境中操作。 输入一个变量，期待返回一个值，只是为了查看该变量是否为 <code>undefined</code>（因为该变量是在不同环境中定义的），这会非常令人困惑。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/non-top-context.png" alt="Execution Context Selector 突出显示为红色"></p>
<h2 id="过滤控制台输出"><a href="#过滤控制台输出" class="headerlink" title="过滤控制台输出"></a>过滤控制台输出</h2><p>点击 <strong>Filter</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/console/images/filter-button.png" alt="filter 按钮">) 可以过滤控制台输出。您可以按严重性等级、按正则表达式模式或者通过隐藏网络消息的方式进行过滤。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/filtered-console.png" alt="过滤的控制台输出"></p>
<p>按严重性等级进行过滤的说明如下所示：</p>
<table>
<thead>
<tr>
<th>选项及显示的内容</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>All</td>
<td>显示所有控制台输出</td>
</tr>
<tr>
<td>Errors</td>
<td>仅显示 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consoleerrorobject--object-" target="_blank" rel="external">console.error()</a> 的输出。</td>
</tr>
<tr>
<td>Warnings</td>
<td>仅显示 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consolewarnobject--object-" target="_blank" rel="external">console.warn()</a> 的输出。</td>
</tr>
<tr>
<td>Info</td>
<td>仅显示 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consoleinfoobject--object-" target="_blank" rel="external">console.info()</a> 的输出。</td>
</tr>
<tr>
<td>Logs</td>
<td>仅显示 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consolelogobject--object-" target="_blank" rel="external">console.log()</a> 的输出。</td>
</tr>
<tr>
<td>Debug</td>
<td>仅显示 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consoletimeendlabel" target="_blank" rel="external">console.timeEnd()</a> 和<a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consoledebugobject--object-" target="_blank" rel="external">console.debug()</a> 的输出。</td>
</tr>
</tbody>
</table>
<h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><p>打开 DevTools 设置，转至 <strong>General</strong> 标签，然后向下滚动到 <strong>Console</strong> 部分，查看更多控制台设置。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-settings.png" alt="控制台设置"></p>
<table>
<thead>
<tr>
<th>设置及说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Hide network messages</td>
<td>默认情况下，控制台将报告网络问题。启用此设置将指示控制台不显示这些错误的日志。例如，将不会记录 404 和 500 系列错误。</td>
</tr>
<tr>
<td>Log XMLHttpRequests</td>
<td>确定控制台是否记录每一个 XMLHttpRequest。</td>
</tr>
<tr>
<td>Preserve log upon navigation</td>
<td>在页面刷新或导航时保留控制台历史记录。</td>
</tr>
<tr>
<td>Show timestamps</td>
<td>在调用时向显示的每条控制台消息追加一个时间戳。对于发生特定事件时的调试非常实用。这会停用消息堆叠。</td>
</tr>
<tr>
<td>Enable custom formatters</td>
<td>控制 JavaScript 对象的<a href="https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview" target="_blank" rel="external">格式设置</a>。</td>
</tr>
</tbody>
</table>
<h1 id="诊断并记录到控制台中"><a href="#诊断并记录到控制台中" class="headerlink" title="诊断并记录到控制台中"></a>诊断并记录到控制台中</h1><h3 id="TL-DR-23"><a href="#TL-DR-23" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 <a href="https://developers.google.com/" target="_blank" rel="external">console.log()</a> 进行基本记录</li>
<li>使用 <a href="https://developers.google.com/" target="_blank" rel="external">console.error()</a> 和 <a href="https://developers.google.com/" target="_blank" rel="external">console.warn()</a> 显示引入注目的消息</li>
<li>使用 <a href="https://developers.google.com/" target="_blank" rel="external">console.group()</a> 和 <a href="https://developers.google.com/" target="_blank" rel="external">console.groupEnd()</a> 对相关消息进行分组，避免混乱</li>
<li>使用 <a href="https://developers.google.com/" target="_blank" rel="external">console.assert()</a> 显示条件性错误消息</li>
</ul>
<h2 id="写入控制台"><a href="#写入控制台" class="headerlink" title="写入控制台"></a>写入控制台</h2><p>使用 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consolelogobject--object-" target="_blank" rel="external">console.log()</a> 方法可以向控制台进行任何基本记录。此方法采用一个或多个表达式作为参数，并将其当前值写入控制台，从而将多个参数级联到一个由空格分隔的行中。</p>
<p>在您的 JavaScript 中执行下面一行代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"Node count:"</span>, a.childNodes.length, <span class="string">"and the current time is:"</span>, <span class="built_in">Date</span>.now());</div></pre></td></tr></table></figure>
<p>将在控制台中输出以下内容： <img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-log-multiple.png" alt="记录多个"></p>
<h2 id="自动填充命令"><a href="#自动填充命令" class="headerlink" title="自动填充命令"></a>自动填充命令</h2><p>在控制台中键入内容时，控制台将自动显示与您已键入文字匹配的相关方法的自动填充下拉菜单。其中包括您已经执行的前几个命令。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/autocomplete.png" alt="自动填充的示例"></p>
<h2 id="组织控制台输出"><a href="#组织控制台输出" class="headerlink" title="组织控制台输出"></a>组织控制台输出</h2><h3 id="将消息组织到一起"><a href="#将消息组织到一起" class="headerlink" title="将消息组织到一起"></a>将消息组织到一起</h3><p>您可以使用组命令将相关输出组织到一起。<a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consolegroupobject-object-" target="_blank" rel="external"><code>console.group()</code></a> 命令采用一个字符串参数设置组名称。在您的 JavaScript 中调用此命令后，控制台会开始将所有后续输出都组织到一起。</p>
<p>要结束分组，您只需要在完成后调用 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consolegroupend" target="_blank" rel="external"><code>console.groupEnd()</code></a>。</p>
<p>示例输入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = <span class="string">"jsmith"</span>, authenticated = <span class="literal">false</span>;</div><div class="line"><span class="built_in">console</span>.group(<span class="string">"Authentication phase"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Authenticating user '%s'"</span>, user);</div><div class="line"><span class="comment">// authentication code here...</span></div><div class="line"><span class="keyword">if</span> (!authenticated) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"User '%s' not authenticated."</span>, user)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.groupEnd();</div></pre></td></tr></table></figure>
<p>示例输出： <img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-group.png" alt="简单的控制台组输出"></p>
<h4 id="嵌套组"><a href="#嵌套组" class="headerlink" title="嵌套组"></a>嵌套组</h4><p>日志组也可以彼此嵌套。同时以小片段查看较大的组时，嵌套组非常有用。</p>
<p>下面的示例显示了登录流程身份验证阶段的日志组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = <span class="string">"jsmith"</span>, authenticated = <span class="literal">true</span>, authorized = <span class="literal">true</span>;</div><div class="line"><span class="comment">// Top-level group</span></div><div class="line"><span class="built_in">console</span>.group(<span class="string">"Authenticating user '%s'"</span>, user);</div><div class="line"><span class="keyword">if</span> (authenticated) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"User '%s' was authenticated"</span>, user);</div><div class="line">    <span class="comment">// Start nested group</span></div><div class="line">    <span class="built_in">console</span>.group(<span class="string">"Authorizing user '%s'"</span>, user);</div><div class="line">    <span class="keyword">if</span> (authorized) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"User '%s' was authorized."</span>, user);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// End nested group</span></div><div class="line">    <span class="built_in">console</span>.groupEnd();</div><div class="line">&#125;</div><div class="line"><span class="comment">// End top-level group</span></div><div class="line"><span class="built_in">console</span>.groupEnd();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"A group-less log trace."</span>);</div></pre></td></tr></table></figure>
<p>下面是控制台中的嵌套组输出： <img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-nestedgroup.png" alt="简单的控制台组输出"></p>
<h4 id="自动折叠组"><a href="#自动折叠组" class="headerlink" title="自动折叠组"></a>自动折叠组</h4><p>大量使用组时，即时查看所有信息可能不是非常有用。这些情况下，您可以通过调用 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consolegroupcollapsedobject-object-" target="_blank" rel="external"><code>console.groupCollapsed()</code></a> 而不是 <code>console.group()</code> 的方式自动折叠组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">"Authenticating user '%s'"</span>, user);</div><div class="line"><span class="keyword">if</span> (authenticated) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.groupEnd();</div></pre></td></tr></table></figure>
<p>groupCollapsed() 输出： <img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-groupcollapsed.png" alt="初始处于折叠状态的组"></p>
<h2 id="错误和警告"><a href="#错误和警告" class="headerlink" title="错误和警告"></a>错误和警告</h2><p>错误和警告的作用与正常日志的作用相同。唯一的区别是 <code>error()</code> 和 <code>warn()</code> 的样式引人注目。</p>
<h3 id="console-error"><a href="#console-error" class="headerlink" title="console.error()"></a>console.error()</h3><p><a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consoleerrorobject--object-" target="_blank" rel="external"><code>console.error()</code></a> 方法会显示红色图标和红色消息文本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectToServer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">"Error: %s (%i)"</span>, <span class="string">"Server is  not responding"</span>,<span class="number">500</span>);</div><div class="line">&#125;</div><div class="line">connectToServer();</div></pre></td></tr></table></figure>
<p>转变为</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-error-server-not-resp.png" alt="错误示例输出"></p>
<h3 id="console-warn"><a href="#console-warn" class="headerlink" title="console.warn()"></a>console.warn()</h3><p><a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consolewarnobject--object-" target="_blank" rel="external"><code>console.warn()</code></a> 方法会显示一个黄色警告图标和相应的消息文本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(a.childNodes.length &lt; <span class="number">3</span> ) &#123;</div><div class="line">    <span class="built_in">console</span>.warn(<span class="string">'Warning! Too few nodes (%d)'</span>, a.childNodes.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转变为</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-warning-too-few-nodes.png" alt="警告示例"></p>
<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p><a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consoleassertexpression-object" target="_blank" rel="external"><code>console.assert()</code></a> 方法可以仅在其第一个参数为 <code>false</code> 时有条件地显示错误字符串（其第二个参数）。</p>
<h3 id="简单的断言及其显示方式"><a href="#简单的断言及其显示方式" class="headerlink" title="简单的断言及其显示方式"></a>简单的断言及其显示方式</h3><p>下面的代码仅会在属于 <code>list</code> 元素的子节点数大于 500 时在控制台中显示一条错误消息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.assert(list.childNodes.length &lt; <span class="number">500</span>, <span class="string">"Node count is &gt; 500"</span>);</div></pre></td></tr></table></figure>
<p>断言失败在控制台中的显示方式： <img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-assert-failed.png" alt="断言失败"></p>
<h2 id="字符串替代和格式设置"><a href="#字符串替代和格式设置" class="headerlink" title="字符串替代和格式设置"></a>字符串替代和格式设置</h2><p>传递到任何记录方法的第一个参数可能包含一个或多个格式说明符。格式说明符由一个 <code>%</code> 符号与后面紧跟的一个字母组成，字母指示应用到值的格式。字符串后面的参数会按顺序应用到占位符。</p>
<p>下面的示例使用字符串和数字格式说明符来将值插入到输出字符串中。您将在控制台中看到“Sam has 100 points”。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"%s has %d points"</span>, <span class="string">"Sam"</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>格式说明符的完整列表为：</p>
<table>
<thead>
<tr>
<th>说明符</th>
<th>输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>%s</td>
<td>将值格式化为字符串</td>
</tr>
<tr>
<td>%i 或 %d</td>
<td>将值格式化为整型</td>
</tr>
<tr>
<td>%f</td>
<td>将值格式化为浮点值</td>
</tr>
<tr>
<td>%o</td>
<td>将值格式化为可扩展 DOM 元素。如同在 Elements 面板中显示的一样</td>
</tr>
<tr>
<td>%O</td>
<td>将值格式化为可扩展 JavaScript 对象</td>
</tr>
<tr>
<td>%c</td>
<td>将 CSS 样式规则应用到第二个参数指定的输出字符串</td>
</tr>
</tbody>
</table>
<p>本示例使用数字说明符设置 <code>document.childNodes.length</code> 的值的格式。同时使用浮点说明符设置 <code>Date.now()</code> 的值的格式。</p>
<p>代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"Node count: %d, and the time is %f."</span>, <span class="built_in">document</span>.childNodes.length, <span class="built_in">Date</span>.now());</div></pre></td></tr></table></figure>
<p>上一个代码示例的输出： <img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-log-multiple.png" alt="示例替代输出"></p>
<h3 id="使用-CSS-设置控制台输出的样式"><a href="#使用-CSS-设置控制台输出的样式" class="headerlink" title="使用 CSS 设置控制台输出的样式"></a>使用 CSS 设置控制台输出的样式</h3><p>利用 CSS 格式说明符，您可以自定义控制台中的显示。使用说明符启动字符串，并设置为您希望的样式，作为第二个参数。</p>
<p>尝试使用下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"%cThis will be formatted with large, blue text"</span>, <span class="string">"color: blue; font-size: x-large"</span>);</div></pre></td></tr></table></figure>
<p>..将您的日志输出设置为蓝色的大字体：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/console-write-format-string.png" alt="设置了格式的字符串"></p>
<h3 id="将-DOM-元素格式化为-JavaScript-对象"><a href="#将-DOM-元素格式化为-JavaScript-对象" class="headerlink" title="将 DOM 元素格式化为 JavaScript 对象"></a>将 DOM 元素格式化为 JavaScript 对象</h3><p>默认情况下，DOM 元素将以其 HTML 的表示的形式记录到控制台中，不过有时，您希望以 JavaScript 对象的形式访问 DOM 元素并检查其属性。为此，您可以使用 <code>%o</code> 字符串说明符（参见上文），也可以使用 <code>console.dir</code> 达到同样的效果：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/dir-element.png" alt="使用 dir() 记录元素"></p>
<h1 id="比较类似的数据对象"><a href="#比较类似的数据对象" class="headerlink" title="比较类似的数据对象"></a>比较类似的数据对象</h1><p>使用 <code>table()</code> 方法，您可以轻松地查看包含类似数据的对象和数组。调用时，此方法将提取对象的属性并创建一个标头。行数据则来自每个索引的属性值。</p>
<h2 id="基本示例：记录对象数组"><a href="#基本示例：记录对象数组" class="headerlink" title="基本示例：记录对象数组"></a>基本示例：记录对象数组</h2><p>在最基本的形式中，您只需要一个由具有相同属性的多个对象组成的数组，<code>table()</code> 命令将执行剩余操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.table([&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;, &#123;<span class="attr">a</span>:<span class="string">"foo"</span>, <span class="attr">b</span>:<span class="literal">false</span>, <span class="attr">c</span>:<span class="literal">undefined</span>&#125;]);</div><div class="line"><span class="built_in">console</span>.table([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]);</div></pre></td></tr></table></figure>
<p>这将输出：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/table-arrays.png" alt="控制台表格显示"></p>
<h2 id="高级示例：记录特定的属性"><a href="#高级示例：记录特定的属性" class="headerlink" title="高级示例：记录特定的属性"></a>高级示例：记录特定的属性</h2><p>可以使用 <code>table()</code> 的第二个参数记录更多高级对象。定义一个包含您希望显示的属性字符串的数组，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.firstName = firstName;</div><div class="line">  <span class="keyword">this</span>.lastName = lastName;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> family = &#123;&#125;;</div><div class="line">family.mother = <span class="keyword">new</span> Person(<span class="string">"Susan"</span>, <span class="string">"Doyle"</span>, <span class="number">32</span>);</div><div class="line">family.father = <span class="keyword">new</span> Person(<span class="string">"John"</span>, <span class="string">"Doyle"</span>, <span class="number">33</span>);</div><div class="line">family.daughter = <span class="keyword">new</span> Person(<span class="string">"Lily"</span>, <span class="string">"Doyle"</span>, <span class="number">5</span>);</div><div class="line">family.son = <span class="keyword">new</span> Person(<span class="string">"Mike"</span>, <span class="string">"Doyle"</span>, <span class="number">8</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.table(family, [<span class="string">"firstName"</span>, <span class="string">"lastName"</span>, <span class="string">"age"</span>]);</div></pre></td></tr></table></figure>
<p>这将输出以下内容：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/table-people-objects.png" alt="包含表格对象的控制台输出"></p>
<h1 id="测量执行时间和对执行进行计数"><a href="#测量执行时间和对执行进行计数" class="headerlink" title="测量执行时间和对执行进行计数"></a>测量执行时间和对执行进行计数</h1><p>利用 Console API 测量执行时间和对语句执行进行计数。</p>
<h3 id="TL-DR-24"><a href="#TL-DR-24" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 <code>console.time()</code> 和 <code>console.timeEnd()</code> 跟踪代码执行点之间经过的时间。</li>
<li>使用 <code>console.count()</code> 对相同字符串传递到函数的次数进行计数。</li>
</ul>
<h2 id="测量执行时间"><a href="#测量执行时间" class="headerlink" title="测量执行时间"></a>测量执行时间</h2><p><a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consoletimelabel" target="_blank" rel="external"><code>time()</code></a> 方法可以启动一个新计时器，并且对测量某个事项花费的时间非常有用。将一个字符串传递到方法，以便为标记命名。</p>
<p>如果您想要停止计时器，请调用 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consoletimeendlabel" target="_blank" rel="external"><code>timeEnd()</code></a> 并向其传递已传递到初始值设定项的相同字符串。</p>
<p>控制台随后会在 <code>timeEnd()</code> 方法触发时记录标签和经过的时间。</p>
<h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><p>在这里，我们将测量 100 万个新 Array 的初始化：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.time(<span class="string">"Array initialize"</span>);</div><div class="line"><span class="keyword">var</span> array= <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    array[i] = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Array initialize"</span>);</div></pre></td></tr></table></figure>
<p>将在控制台中输出下列结果： <img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-executions-time-duration.png" alt="经过的时间"></p>
<h3 id="Timeline-上的计时器"><a href="#Timeline-上的计时器" class="headerlink" title="Timeline 上的计时器"></a>Timeline 上的计时器</h3><p>当 <a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool" target="_blank" rel="external">Timeline</a> 记录在 <code>time()</code> 操作期间发生时，它也会对 Timeline 进行标注。如果您想要跟踪应用的操作和操作来自何处，请使此记录。</p>
<p>执行 <code>time()</code> 时 Timeline 上的标注如下所示：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-executions-time-annotation-on-timeline.png" alt="timeline 上的时间标注"></p>
<h3 id="标记-Timeline"><a href="#标记-Timeline" class="headerlink" title="标记 Timeline"></a>标记 Timeline</h3><p><em>注：timeStamp() 方法只能在某个 Timeline 记录正在进行时发挥作用。</em></p>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool" target="_blank" rel="external">Timeline 面板</a>可以提供引擎时间消耗的完整概览。您可以使用 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consoletimestamplabel" target="_blank" rel="external"><code>timeStamp()</code></a> 从控制台向 Timeline 添加一个标记。 这是一种将您应用中的事件与其他事件进行关联的简单方式。</p>
<p><code>timeStamp()</code> 会在以下地方对 Timeline 进行标注：</p>
<ul>
<li>Timeline 汇总和详细信息视图中的黄色垂直线。</li>
<li>会向事件列表添加一条记录。</li>
</ul>
<p>以下示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddResult</span>(<span class="params">name, result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.timeStamp(<span class="string">"Adding result"</span>);</div><div class="line">    <span class="keyword">var</span> text = name + <span class="string">': '</span> + result;</div><div class="line">    <span class="keyword">var</span> results = <span class="built_in">document</span>.getElementById(<span class="string">"results"</span>);</div><div class="line">    results.innerHTML += (text + <span class="string">"&lt;br&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将生成下面的 Timeline 时间戳：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-executions-timestamp2.png" alt="Timeline 中的时间戳"></p>
<h2 id="对语句执行进行计数"><a href="#对语句执行进行计数" class="headerlink" title="对语句执行进行计数"></a>对语句执行进行计数</h2><p>使用 <code>count()</code> 方法记录提供的字符串，以及相同字符串已被提供的次数。当完全相同的语句被提供给同一行上的 <code>count()</code> 时，此数字将增大。</p>
<p>将 <code>count()</code> 与某些动态内容结合使用的示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function login(user) &#123;</div><div class="line">    console.count(&quot;Login called for user &quot; + user);</div><div class="line">&#125;</div><div class="line"></div><div class="line">users = [ // by last name since we have too many Pauls.</div><div class="line">    &apos;Irish&apos;,</div><div class="line">    &apos;Bakaus&apos;,</div><div class="line">    &apos;Kinlan&apos;</div><div class="line">];</div><div class="line"></div><div class="line">users.forEach(function(element, index, array) &#123;</div><div class="line">    login(element);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">login(users[0]);</div></pre></td></tr></table></figure>
<p>代码示例的输出：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-executions-console-count.png" alt="console.count() example output"></p>
<h1 id="异常和错误处理"><a href="#异常和错误处理" class="headerlink" title="异常和错误处理"></a>异常和错误处理</h1><p>如果您可以了解背后的详细信息，页面异常和 JavaScript 错误会非常有用。在页面引发异常或脚本产生错误时，Console 可以提供具体、可靠的信息来帮助您定位和纠正问题。</p>
<p>在控制台中，您可以跟踪异常和引发异常的执行路径，显式或隐式捕捉异常（或忽略它们），甚至设置错误处理程序来自动收集和处理异常数据。</p>
<h3 id="TL-DR-25"><a href="#TL-DR-25" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>触发异常时启用 Pause on Exceptions 来调试代码上下文。</li>
<li>使用 <code>console.trace</code> 打印当前的 JavaScript 调用堆栈。</li>
<li>使用 <code>console.assert()</code> 在您的代码中放置断言和引发异常。</li>
<li>使用 <code>window.onerror</code> 记录浏览器中发生的错误。</li>
</ul>
<h2 id="跟踪异常"><a href="#跟踪异常" class="headerlink" title="跟踪异常"></a>跟踪异常</h2><p>发生错误时，请打开 DevTools 控制台 (<code>Ctrl+Shift+J</code> / <code>Cmd+Option+J</code>) 查看 JavaScript 错误消息。每一条消息都有一个指向文件名的链接，文件名带有您可以导航到文件的行号。</p>
<p>异常示例： <img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-tracking-exceptions.jpg" alt="异常示例"></p>
<h3 id="视图异常堆叠追踪"><a href="#视图异常堆叠追踪" class="headerlink" title="视图异常堆叠追踪"></a>视图异常堆叠追踪</h3><p>导致错误的执行路径并不总是非常明显。完整的 JavaScript 调用堆栈在控制台中会伴随着异常。展开这些控制台消息可以查看堆栈框架和导航到代码中的相应位置：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-exception-stack-trace.jpg" alt="异常堆叠追踪"></p>
<h3 id="出现-JavaScript-异常时暂停"><a href="#出现-JavaScript-异常时暂停" class="headerlink" title="出现 JavaScript 异常时暂停"></a>出现 JavaScript 异常时暂停</h3><p>下一次引发异常时，请暂停 JavaScript 执行并检查其调用堆栈、范围变量以及您应用的状态。利用 Scripts 面板底部的三态停止按钮，您可以在不同的异常处理模式之间切换：<img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-pause-gray.png" alt="暂停按钮"></p>
<p>选择暂停所有异常或仅暂停未捕捉的异常，您也可以集中忽略异常。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-pause-execution.jpg" alt="暂停执行"></p>
<h2 id="打印堆叠追踪"><a href="#打印堆叠追踪" class="headerlink" title="打印堆叠追踪"></a>打印堆叠追踪</h2><p>通过将日志消息输出到控制台可更好地了解网页的行为。通过包含关联的堆叠追踪让日志条目的信息更丰富。有多种方式可以实现此目标。</p>
<h3 id="Error-stack"><a href="#Error-stack" class="headerlink" title="Error.stack"></a>Error.stack</h3><p>每个 Error 对象都有一个包含堆叠追踪的字符串属性命名的堆栈：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-error-stack.jpg" alt="Error.stack 示例"></p>
<h3 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace()"></a>console.trace()</h3><p>使用可以打印当前 JavaScript 调用跟踪的 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consoletraceobject" target="_blank" rel="external"><code>console.trace()</code></a> 调用设置您的代码：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-console-trace.jpg" alt="console.trace() 示例"></p>
<h3 id="console-assert"><a href="#console-assert" class="headerlink" title="console.assert()"></a>console.assert()</h3><p>通过将带有错误条件的 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#consoleassertexpression-object" target="_blank" rel="external"><code>console.assert()</code></a> 作为第一个参数调用，在您的 JavaScript 代码中放置断言。当此表达式评估为 false 时，您将看到一条相应的 Console 记录：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-console-assert.jpg" alt="console.assert() 示例"></p>
<h2 id="如何检查堆叠追踪来查找触发器"><a href="#如何检查堆叠追踪来查找触发器" class="headerlink" title="如何检查堆叠追踪来查找触发器"></a>如何检查堆叠追踪来查找触发器</h2><p>我们来看一下如何使用刚刚学习的工具，并找出错误的真正原因。下面是一个包含两个脚本的简单 HTML 页面：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-example-code.png" alt="示例代码"></p>
<p>当用户点击页面时，段落将更改其内部文本，将调用 <code>lib.js</code> 提供的 <code>callLibMethod()</code> 函数。</p>
<p>此函数会输出一个 <code>console.log</code>，然后调用 <code>console.slog</code>，后者不是一种由 Console API 提供的方法。调用应触发一个错误。</p>
<p>在页面运行的时候点击页面时，将触发下面的错误：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-example-error-triggered.png" alt="触发的错误"></p>
<p>点击箭头可以展开错误消息：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/track-exceptions-example-error-message-expanded.png" alt="展开的错误消息"></p>
<p>控制台会告诉您错误在 <code>lib.js</code> 的第 4 行触发，此脚本在 <code>addEventListener</code> 回调（匿名函数）的 <code>script.js</code> 中的第 3 行调用。</p>
<p>这是一个非常简单的示例，不过，即使最复杂的日志跟踪调试也遵循相同的流程。</p>
<h2 id="使用-window-onerror-处理运行时异常"><a href="#使用-window-onerror-处理运行时异常" class="headerlink" title="使用 window.onerror 处理运行时异常"></a>使用 window.onerror 处理运行时异常</h2><p>Chrome 会公开 <code>window.onerror</code> 处理程序函数，每当 JavaScript 代码执行中发生错误时都会调用此函数。当 JavaScript 异常每次在窗口上下文中引发并且未被 try/catch 块捕捉时，调用此函数时还会调用异常的消息、引发异常的文件的网址、该文件中的行号，三者按照此顺序作为三个参数传递。</p>
<p>举例来说，使用 AJAX POST 调用设置一个错误处理程序，用于收集未捕捉异常的相关信息并将其报告回服务器，您会发现这样非常实用。这样，您可以记录用户浏览器中发生的所有错误并获得相关通知。</p>
<p>使用 <code>window.onerror</code> 的示例：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/runtime-exceptions-window-onerror.jpg" alt="window.onerror 处理程序的示例"></p>
<h1 id="Console-API-参考"><a href="#Console-API-参考" class="headerlink" title="Console API 参考"></a>Console API 参考</h1><p>使用 Console API 可以向控制台写入信息、创建 JavaScript 配置文件，以及启动调试会话。</p>
<h2 id="console-assert-expression-object"><a href="#console-assert-expression-object" class="headerlink" title="console.assert(expression, object)"></a>console.assert(expression, object)</h2><p>在被评估的表达式为 <code>false</code> 时向控制台写入一个<a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#error" target="_blank" rel="external">错误</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greaterThan</span>(<span class="params">a,b</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.assert(a &gt; b, &#123;<span class="string">"message"</span>:<span class="string">"a is not greater than b"</span>,<span class="string">"a"</span>:a,<span class="string">"b"</span>:b&#125;);</div><div class="line">&#125;</div><div class="line">greaterThan(<span class="number">5</span>,<span class="number">6</span>);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/assert.png" alt="console.assert() 示例"></p>
<h2 id="console-clear"><a href="#console-clear" class="headerlink" title="console.clear()"></a>console.clear()</h2><p>清除控制台。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.clear();</div></pre></td></tr></table></figure>
<p>如果已启用 <a href="https://developers.google.com/web/tools/chrome-devtools/console/index#preserve-log" target="_blank" rel="external"><strong>Preserve log</strong></a> 复选框，<code>console.clear()</code> 将停用。 不过，在控制台处于聚焦状态时，按 <strong>clear console</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/console/images/clear-console-button.png" alt="clear console 按钮">) 或者输入 Ctrl+L 快捷键仍然有效。</p>
<p>如需了解详细信息，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/console/index#clearing" target="_blank" rel="external">清除控制台</a>。</p>
<h2 id="console-count-label"><a href="#console-count-label" class="headerlink" title="console.count(label)"></a>console.count(label)</h2><p>写入在同一行使用相同标签调用 <code>count()</code> 的次数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.count(name + <span class="string">' logged in'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/count.png" alt="console.count() example"></p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/console/track-executions#counting-statement-executions" target="_blank" rel="external">对语句执行进行计数</a>，查看更多示例。</p>
<h2 id="console-debug-object-object-…"><a href="#console-debug-object-object-…" class="headerlink" title="console.debug(object [, object, …])"></a>console.debug(object [, object, …])</h2><p>与 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#log" target="_blank" rel="external"><code>console.log()</code></a> 作用相同。</p>
<h2 id="console-dir-object"><a href="#console-dir-object" class="headerlink" title="console.dir(object)"></a>console.dir(object)</h2><p>输出以 JavaScript 形式表示的指定对象。如果正在记录的对象是 HTML 元素，将输出其以 DOM 形式表示的属性，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/dir.png" alt="klzzwxh:0018 example"></p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/console/console-write#string-substitution-and-formatting" target="_blank" rel="external">字符串替代和格式设置</a>，了解功能相同的对象格式化程序 (<code>%O</code>) 和其他信息。</p>
<h2 id="console-dirxml-object"><a href="#console-dirxml-object" class="headerlink" title="console.dirxml(object)"></a>console.dirxml(object)</h2><p>如果可以，输出 <code>object</code> 子级元素的 XML 表示形式，否则输出其 JavaScript 表示形式。 在 HTML 和 XML 元素上调用 <code>console.dirxml()</code> 等同于调用 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#log" target="_blank" rel="external"><code>console.log()</code></a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.dirxml(<span class="built_in">document</span>);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/dirxml.png" alt="console.dirxml() example"></p>
<h2 id="console-error-object-object-…"><a href="#console-error-object-object-…" class="headerlink" title="console.error(object [, object, …])"></a>console.error(object [, object, …])</h2><p>输出一条类似于 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#log" target="_blank" rel="external"><code>console.log()</code></a> 的消息，将消息设置成错误样式，并在调用此方法的地方包含一个堆叠追踪。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.error(<span class="string">'error: name is undefined'</span>);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/error.png" alt="console.error() example"></p>
<h2 id="console-group-object-object-…"><a href="#console-group-object-object-…" class="headerlink" title="console.group(object[, object, …])"></a>console.group(object[, object, …])</h2><p>启动一个带有可选标题的新日志组。以可视化方式将在 <code>console.group()</code> 后、<code>console.groupEnd()</code> 前发生的所有控制台输出组合在一起。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.group(<span class="string">'name'</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'first: '</span>, obj.first);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'middle: '</span>, obj.middle);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'last: '</span>, obj.last);</div><div class="line">  <span class="built_in">console</span>.groupEnd();</div><div class="line">&#125;</div><div class="line"></div><div class="line">name(&#123;<span class="string">"first"</span>:<span class="string">"Wile"</span>,<span class="string">"middle"</span>:<span class="string">"E"</span>,<span class="string">"last"</span>:<span class="string">"Coyote"</span>&#125;);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/group.png" alt="console.group() example"></p>
<p>您还可以嵌套组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.group(<span class="string">'name'</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'first: '</span>, obj.first);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'middle: '</span>, obj.middle);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'last: '</span>, obj.last);</div><div class="line">  <span class="built_in">console</span>.groupEnd();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.group(<span class="string">'doStuff()'</span>);</div><div class="line">  name(&#123;<span class="string">"first"</span>:<span class="string">"Wile"</span>,<span class="string">"middle"</span>:<span class="string">"E"</span>,<span class="string">"last"</span>:<span class="string">"coyote"</span>&#125;);</div><div class="line">  <span class="built_in">console</span>.groupEnd();</div><div class="line">&#125;</div><div class="line"></div><div class="line">doStuff();</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/nested-group.png" alt="nested console.group() example"></p>
<h2 id="console-groupCollapsed-object-object-…"><a href="#console-groupCollapsed-object-object-…" class="headerlink" title="console.groupCollapsed(object[, object, …])"></a>console.groupCollapsed(object[, object, …])</h2><p>创建一个初始处于折叠状态而不是打开状态的新日志组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.groupCollapsed(<span class="string">'status'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"peekaboo, you can't see me"</span>);</div><div class="line"><span class="built_in">console</span>.groupEnd();</div></pre></td></tr></table></figure>
<h2 id="console-groupEnd"><a href="#console-groupEnd" class="headerlink" title="console.groupEnd()"></a>console.groupEnd()</h2><p>关闭日志组。相关示例请参阅 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#group" target="_blank" rel="external"><code>console.group</code></a>。</p>
<h2 id="console-info-object-object-…"><a href="#console-info-object-object-…" class="headerlink" title="console.info(object [, object, …])"></a>console.info(object [, object, …])</h2><p>输出一条类似 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#log" target="_blank" rel="external"><code>console.log()</code></a> 的消息，但同时在输出旁显示一个图标（带白色“i”的蓝色圆圈）。</p>
<h2 id="console-log-object-object-…"><a href="#console-log-object-object-…" class="headerlink" title="console.log(object [, object, …])"></a>console.log(object [, object, …])</h2><p>在控制台中显示一条消息。将一个或多个对象传递到此方法。每个对象都会进行评估并级联到一个由空格分隔的字符串中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello, Logs!'</span>);</div></pre></td></tr></table></figure>
<h3 id="格式说明符"><a href="#格式说明符" class="headerlink" title="格式说明符"></a>格式说明符</h3><p>您传递的第一个对象可以包含一个或多个<strong>格式说明符</strong>。格式说明符由百分号 (<code>%</code>) 与紧跟其后面的一个字母组成，字母指示要应用的格式。</p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/console/console-write" target="_blank" rel="external">组织控制台输出</a></li>
</ul>
<h2 id="console-profile-label"><a href="#console-profile-label" class="headerlink" title="console.profile([label])"></a>console.profile([label])</h2><p>启动一个带有可选标签的 JavaScript CPU 配置文件。要完成配置文件，请调用 <code>console.profileEnd()</code>。 每一个配置文件都会添加到 <strong>Profiles</strong> 面板中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processPixels</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.profile(<span class="string">"processPixels()"</span>);</div><div class="line">  <span class="comment">// later, after processing pixels</span></div><div class="line">  <span class="built_in">console</span>.profileEnd();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="console-profileEnd"><a href="#console-profileEnd" class="headerlink" title="console.profileEnd()"></a>console.profileEnd()</h2><p>停止当前的 JavaScript CPU 分析会话（如果正在进行此会话），并将报告输出到 <strong>Profiles</strong> 面板中。</p>
<p>相关示例请参阅 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#profile" target="_blank" rel="external"><code>console.profile()</code></a>。</p>
<h2 id="console-time-label"><a href="#console-time-label" class="headerlink" title="console.time(label)"></a>console.time(label)</h2><p>启动一个具有关联标签的新计时器。使用相同标签调用 <code>console.timeEnd()</code> 时，定时器将停止，经过的时间将显示在控制台中。计时器值精确到亚毫秒。传递到 <code>time()</code> 和 <code>timeEnd()</code> 的字符串必须匹配，否则计时器不会结束。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.time(<span class="string">"Array initialize"</span>);</div><div class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">  array[i] = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"Array initialize"</span>);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/time.png" alt="console.time() example"></p>
<h2 id="console-timeEnd-label"><a href="#console-timeEnd-label" class="headerlink" title="console.timeEnd(label)"></a>console.timeEnd(label)</h2><p>停止当前的计时器（如果正在运行一个计时器），并将计时器标签和经过的时间输出到控制台。</p>
<p>相关示例请参阅 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#time" target="_blank" rel="external"><code>console.time()</code></a>。</p>
<h2 id="console-timeStamp-label"><a href="#console-timeStamp-label" class="headerlink" title="console.timeStamp([label])"></a>console.timeStamp([label])</h2><p>在录制会话期间向 <strong>Timeline</strong> 添加一个事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.timeStamp(&apos;check out this custom timestamp thanks to console.timeStamp()!&apos;);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/timestamp.png" alt="console.timeStamp() example"></p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool" target="_blank" rel="external">使用 Timeline 工具</a></li>
</ul>
<h2 id="console-trace-object"><a href="#console-trace-object" class="headerlink" title="console.trace(object)"></a>console.trace(object)</h2><p>从调用此方法的位置输出一个堆叠追踪。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.trace();</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/trace.png" alt="console.trace() 示例"></p>
<h2 id="console-warn-object-object-…"><a href="#console-warn-object-object-…" class="headerlink" title="console.warn(object [, object, …])"></a>console.warn(object [, object, …])</h2><p>输出一条类似 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference#log" target="_blank" rel="external"><code>console.log()</code></a> 的消息，但同时在记录的消息旁显示一个黄色警告图标。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.warn(<span class="string">'user limit reached!'</span>);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/warn.png" alt="console.warn() example"></p>
<h1 id="评估表达式"><a href="#评估表达式" class="headerlink" title="评估表达式"></a>评估表达式</h1><p>从 DevTools 控制台使用它的某个评估功能查看页面上任意项目的状态。</p>
<p>DevTools 控制台让您可通过特定方式了解您页面中的项目状态。通过使用支持 JavaScript 的多个功能，再结合运用您的 JavaScript 知识，评估您可以输入的任何表达式。</p>
<h3 id="TL-DR-26"><a href="#TL-DR-26" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>只需键入表达式即可对其进行评估。</li>
<li>使用一个快捷键选择元素。</li>
<li>使用 <code>inspect()</code> 检查 DOM 元素和 JavaScript 堆对象。</li>
<li>使用 $0 - 4 访问最近选择的元素和对象。</li>
</ul>
<h2 id="查看表达式"><a href="#查看表达式" class="headerlink" title="查看表达式"></a>查看表达式</h2><p>按下 Enter 键后，此控制台可评估您提供的任何 JavaScript 表达式。输入表达式后，系统将显示属性名称建议；控制台还会提供自动填充和 Tab 自动补全功能。</p>
<p>如果有多个匹配项，↑ 和 ↓ 在它们之间循环切换。 按 → 键可选择当前建议。如果有一个建议，按 Tab 键选中它。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/evaluate-expressions.png" alt="控制台中的简单表达式。"></p>
<h2 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h2><p>使用下列快捷键选择元素：</p>
<table>
<thead>
<tr>
<th>快捷键及说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>$()</td>
<td>返回与指定 CSS 选择器匹配的第一个元素。 <code>document.querySelector()</code> 的快捷键。</td>
</tr>
<tr>
<td>$$()</td>
<td>返回一个与指定 CSS 选择器匹配的所有元素数组。等同于 <code>document.querySelectorAll()</code>。</td>
</tr>
<tr>
<td>$x()</td>
<td>返回一个与指定 XPath 匹配的元素数组。</td>
</tr>
</tbody>
</table>
<p>目标选择的示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'code'</span>) <span class="comment">// Returns the first code element in the document.</span></div><div class="line">$$(<span class="string">'figure'</span>) <span class="comment">// Returns an array of all figure elements in the document.</span></div><div class="line">$x(<span class="string">'html/body/p'</span>) <span class="comment">// Returns an array of all paragraphs in the document body.</span></div></pre></td></tr></table></figure>
<h2 id="检查-DOM-元素和-JavaScript-堆对象"><a href="#检查-DOM-元素和-JavaScript-堆对象" class="headerlink" title="检查 DOM 元素和 JavaScript 堆对象"></a>检查 DOM 元素和 JavaScript 堆对象</h2><p><code>inspect()</code> 函数选取一个 DOM 元素或 JavaScript 引用作为一个参数。如果您提供一个 DOM 元素，则 DevTools 进入“Elements”面板并显示该元素。如果您提供一个 JavaScript 引用，则它进入“Profile”面板。</p>
<p>当此代码在该页面上的控制台中执行时，它会抓取此图并在“Elements”面板上显示它。这会利用到 <code>$_</code> 属性以获取最后一个评估的表达式的输出。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'[data-target="inspecting-dom-elements-example"]'</span>)</div><div class="line">inspect($_)</div></pre></td></tr></table></figure>
<h2 id="访问最近选择的元素和对象"><a href="#访问最近选择的元素和对象" class="headerlink" title="访问最近选择的元素和对象"></a>访问最近选择的元素和对象</h2><p>控制台在变量中存储最后使用的五个元素和对象，以方便访问。使用 $0 - 4 从控制台访问这些元素。请记住，计算机从 0 开始计算，这意味着最新的项目是 $0，最早的项目是 $4。</p>
<h1 id="监控事件"><a href="#监控事件" class="headerlink" title="监控事件"></a>监控事件</h1><h3 id="TL-DR-27"><a href="#TL-DR-27" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 <code>monitorEvents()</code> 侦听特定类型的事件。</li>
<li>使用 <code>unmonitorEvents()</code> 停止侦听。</li>
<li>使用 <code>getEventListeners()</code> 获取 DOM 元素的侦听器。</li>
<li>使用“Event Listeners Inspector”面板获取有关事件侦听器的信息。</li>
</ul>
<h2 id="监控事件-1"><a href="#监控事件-1" class="headerlink" title="监控事件"></a>监控事件</h2><p><a href="https://developers.google.com/web/tools/chrome-devtools/debug/command-line/command-line-reference#monitoreventsobject-events" target="_blank" rel="external">monitorEvents()</a> 方法指示 DevTools 记录与指定目标有关的信息。</p>
<p>第一个参数是要监控的对象。如果不提供第二个参数，所有事件都将返回。若要指定要侦听的事件，则传递一个字符串或一个字符串数组作为第二个参数。</p>
<p>在页面正文上侦听“click”事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">monitorEvents(<span class="built_in">document</span>.body, <span class="string">"click"</span>);</div></pre></td></tr></table></figure>
<p>如果监控的事件是受支持的<em>事件类型</em>，DevTools 将其映射到一组标准事件名称，则该方法侦听该类型的事件。</p>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/debug/command-line/command-line-reference" target="_blank" rel="external">Command Line API</a> 可提供完整的<em>事件类型</em>与其涵盖的事件的对应情况。</p>
<p>如需停止监控事件，请调用 <code>unmonitorEvents()</code> 方法并为其提供对象以停止监控。</p>
<p>停止侦听 <code>body</code> 对象上的事件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unmonitorEvents(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure>
<h2 id="查看在对象上注册的事件侦听器"><a href="#查看在对象上注册的事件侦听器" class="headerlink" title="查看在对象上注册的事件侦听器"></a>查看在对象上注册的事件侦听器</h2><p><a href="https://developers.google.com/web/tools/chrome-devtools/debug/command-line/command-line-reference#geteventlistenersobject" target="_blank" rel="external">getEventListeners() API</a> 返回在指定对象上注册的事件侦听器。</p>
<p>返回值是一个对象，其包含每个注册的事件类型（例如，<code>click</code> 或 <code>keydown</code>）数组。每个数组的成员是描述为每个类型注册的侦听器的对象。例如，以下代码列出了在文档对象上注册的所有事件侦听器：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getEventListeners(<span class="built_in">document</span>);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/events-call-geteventlisteners.png" alt="使用 getEventListeners() 时的输出"></p>
<p>如果在指定对象上注册了多个侦听器，则数组包含每个侦听器的成员。以下示例中，在“#scrollingList”元素上为 <code>mousedown</code> 事件注册了两个事件侦听器：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/events-geteventlisteners_multiple.png" alt="附加到 mousedown 的事件侦听器的视图"></p>
<p>进一步展开每个对象以查看它们的属性：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/events-geteventlisteners_expanded.png" alt="展开的 listener 对象的视图"></p>
<h2 id="查看在-DOM-元素上注册的事件侦听器"><a href="#查看在-DOM-元素上注册的事件侦听器" class="headerlink" title="查看在 DOM 元素上注册的事件侦听器"></a>查看在 DOM 元素上注册的事件侦听器</h2><p>默认情况下，Elements Inspector 中的 <em>Event Listeners</em> 面板显示附加到页面的所有事件：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/events-eventlisteners_panel.png" alt="Event listeners 面板"></p>
<p>过滤器将事件限制在选定的节点：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/events-eventlisteners_panel_filtered.png" alt="Event listeners 面板，仅按选定的节点过滤"></p>
<p>通过展开对象，此面板显示事件侦听器详细信息。在此示例中，此页面拥有两个通过 jQuery 附加的事件侦听器：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/events-eventlisteners_panel_details.png" alt="展开的事件侦听器视图"></p>
<h1 id="Command-Line-API-参考"><a href="#Command-Line-API-参考" class="headerlink" title="Command Line API 参考"></a>Command Line API 参考</h1><p>Command Line API 包含一个用于执行以下常见任务的便捷函数集合：选择和检查 DOM 元素，以可读格式显示数据，停止和启动分析器，以及监控 DOM 事件。</p>
<p>注：此 API 仅能通过控制台本身获取。您无法通过网页上的脚本访问 Command Line API。</p>
<h2 id=""><a href="#" class="headerlink" title="$_"></a>$_</h2><p><code>$_</code> 返回最近评估的表达式的值。</p>
<p>在以下示例中，对一个简单的表达式 (<code>2 + 2</code>) 进行评估。然后评估 <code>$_</code> 属性，其包含相同的值：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/recently-evaluated-expression-1.png" alt="$_ 为最近评估的表达式"></p>
<p>在下一个示例中，已评估的表达式最初包含一个名称数组。评估 <code>$_.length</code> 以发现数组的长度，<code>$_</code> 中存储的值变为最新评估的表达式，即 4：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/recently-evaluated-expression-2.png" alt="$_ 在评估新命令时更改"></p>
<h2 id="0-4"><a href="#0-4" class="headerlink" title="$0 - $4"></a>$0 - $4</h2><p><code>$0</code>、<code>$1</code>、<code>$2</code>、<code>$3</code> 和 <code>$4</code> 命令用作在 Elements 面板中检查的最后五个 DOM 元素或在 Profiles 面板中选择的最后五个 JavaScript 堆对象的历史参考。<code>$0</code> 返回最近一次选择的元素或 JavaScript 对象，<code>$1</code> 返回仅在最近一次之前选择的元素或对象，依此类推。</p>
<p>在以下示例中，在 Elements 面板中选择一个具有类 <code>medium</code> 的元素。在 Console 抽屉式导航栏中，<code>$0</code> 已评估，并显示相同的元素：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/element-0.png" alt="$0 的示例"></p>
<p>下图显示的是在同一个页面中选择的一个不同的元素。<code>$0</code> 现在指的是新选择的元素，而 <code>$1</code> 返回以前选择的元素：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/element-1.png" alt="$1 的示例"></p>
<h2 id="selector"><a href="#selector" class="headerlink" title="$(selector)"></a>$(selector)</h2><p><code>$(selector)</code> 返回带有指定的 CSS 选择器的第一个 DOM 元素的引用。此函数等同于 <a href="https://docs.webplatform.org/wiki/css/selectors_api/querySelector" target="_blank" rel="external">document.querySelector()</a> 函数。</p>
<p>以下示例在文档中返回第一个 <code>&lt;img&gt;</code> 元素的引用：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/selector-img.png" alt="$(&#39;img&#39;) 的示例"></p>
<p>右键点击返回的结果并选择“Reveal in Elements Panel”以在 DOM 中查找它，或选择“Scroll in to View”以在页面上显示它。</p>
<p>以下示例返回当前选择的元素的引用，并显示它的 src 属性：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/selector-img-src.png" alt="$(&#39;img&#39;).src 的示例"></p>
<p>注：如果您在使用库，例如，使用 <code>$</code> 的 jQuery，则此功能将被覆盖， <code>$</code> 将与该库的实现对应。</p>
<h2 id="selector-1"><a href="#selector-1" class="headerlink" title="$(selector)"></a>$(selector)</h2><p><code>$$(selector)</code> 返回与给定 CSS 选择器匹配的元素数组。此命令等同于调用 <a href="https://docs.webplatform.org/wiki/css/selectors_api/querySelectorAll" target="_blank" rel="external">document.querySelectorAll()</a>。</p>
<p>以下示例使用 <code>$$()</code> 在当前文档中创建一个所有 <code>&lt;img&gt;</code> 元素的数组，并显示每个元素的 <code>src</code> 属性值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> images = $$(<span class="string">'img'</span>);</div><div class="line"><span class="keyword">for</span> (each <span class="keyword">in</span> images) &#123;</div><div class="line">    <span class="built_in">console</span>.log(images[each].src);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/all-selector.png" alt="使用 $$() 选择文档中的所有图像并显示其来源的示例。"></p>
<p>注：在控制台中按 Shift + Enter 以开始一个新行，无需执行脚本。</p>
<h2 id="x-path"><a href="#x-path" class="headerlink" title="$x(path)"></a>$x(path)</h2><p><code>$x(path)</code> 返回一个与给定 XPath 表达式匹配的 DOM 元素数组。</p>
<p>例如，以下命令返回页面上的所有 <code>&lt;p&gt;</code> 元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$x(&quot;//p&quot;)</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/xpath-p-example.png" alt="使用 XPath 选择器的示例"></p>
<p>以下示例返回包含 <code>&lt;a&gt;</code> 元素的所有 <code>&lt;p&gt;</code> 元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$x(&quot;//p[a]&quot;)</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/xpath-p-a-example.png" alt="示例较复杂的 XPath 选择器的示例"></p>
<h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p><code>clear()</code> 清除其历史记录的控制台。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clear();</div></pre></td></tr></table></figure>
<h2 id="copy-object"><a href="#copy-object" class="headerlink" title="copy(object)"></a>copy(object)</h2><p><code>copy(object)</code> 将指定对象的字符串表示形式复制到剪贴板。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy($<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="debug-function"><a href="#debug-function" class="headerlink" title="debug(function)"></a>debug(function)</h2><p>调用指定的函数时，将触发调试程序，并在 Sources 面板上使函数内部中断，从而允许逐行执行代码并进行调试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">debug(getData);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/debug.png" alt="使用 debug() 在函数内部中断"></p>
<p>使用 <code>undebug(fn)</code> 停止函数中断，或使用 UI 停用所有断点。</p>
<p>如需了解有关断点的详细信息，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/javascript/add-breakpoints" target="_blank" rel="external">使用断点进行调试</a>。</p>
<h2 id="dir-object"><a href="#dir-object" class="headerlink" title="dir(object)"></a>dir(object)</h2><p><code>dir(object)</code> 显示所有指定对象的属性的对象样式列表。此方法等同于 Console API 的 <code>console.dir()</code> 方法。</p>
<p>以下示例显示在命令行中直接评估 <code>document.body</code> 和使用 <code>dir()</code> 显示相同元素之间的差异：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body;</div><div class="line">dir(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/dir.png" alt="包含/不含 dir() 函数的日志记录 document.body"></p>
<p>如需了解详细信息，请参阅 Console API 中的 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#console.dir(object" target="_blank" rel="external"><code>console.dir()</code></a>) 条目。</p>
<h2 id="dirxml-object"><a href="#dirxml-object" class="headerlink" title="dirxml(object)"></a>dirxml(object)</h2><p><code>dirxml(object)</code> 输出以 XML 形式表示的指定对象，如 Elements 标签中所示。此方法等同于 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Console" target="_blank" rel="external">console.dirxml()</a> 方法。</p>
<h2 id="inspect-object-function"><a href="#inspect-object-function" class="headerlink" title="inspect(object/function)"></a>inspect(object/function)</h2><p><code>inspect(object/function)</code> 在相应的面板中打开并选择指定的元素或对象：针对 DOM 元素使用 Elements 面板，或针对 JavaScript 堆对象使用 Profiles 面板。</p>
<p>以下是在“Elements”面板中打开 <code>document.body</code> 的示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">inspect(<span class="built_in">document</span>.body);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/inspect.png" alt="使用 inspect() 检查文档"></p>
<p>当传递要检查的函数时，此函数在 Sources 面板中打开文档以供您检查。</p>
<h2 id="getEventListeners-object"><a href="#getEventListeners-object" class="headerlink" title="getEventListeners(object)"></a>getEventListeners(object)</h2><p><code>getEventListeners(object)</code> 返回在指定对象上注册的事件侦听器。返回值是一个对象，其包含每个注册的事件类型（例如，“click”或“keydown”）数组。每个数组的成员是描述为每个类型注册的侦听器的对象。例如，下面列出了在文档对象上注册的所有事件侦听器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getEventListeners(document);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/get-event-listeners.png" alt="使用 getEventListeners() 时的输出"></p>
<p>如果在指定对象上注册了多个侦听器，则数组包含每个侦听器的成员。以下示例中，在 #scrollingList 元素上为“mousedown”事件注册了两个事件侦听器：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/scrolling-list.png" alt="多个侦听器"></p>
<p>您可以进一步展开每个对象以查看他们的属性：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/scrolling-list-expanded.png" alt="展开的 listener 对象的视图"></p>
<h2 id="keys-object"><a href="#keys-object" class="headerlink" title="keys(object)"></a>keys(object)</h2><p><code>keys(object)</code> 返回一个包含属于指定对象的属性名称的数组。如需获取相同属性的关联值，请使用 <code>values()</code>。</p>
<p>例如，假设您的应用定义了以下对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> player1 = &#123; <span class="string">"name"</span>: <span class="string">"Ted"</span>, <span class="string">"level"</span>: <span class="number">42</span> &#125;</div></pre></td></tr></table></figure>
<p>假设在全局命名空间中定义了 <code>player1</code>（为简单起见），那么，在控制台输入 <code>keys(player1)</code> 和 <code>values(player1)</code>会生成以下内容：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/keys-values.png" alt="keys() 和 values() 方法的示例"></p>
<h2 id="monitor-function"><a href="#monitor-function" class="headerlink" title="monitor(function)"></a>monitor(function)</h2><p>调用指定函数时，系统会向控制台记录一条消息，其中指明函数名称及在调用时传递到该函数的参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">monitor(sum);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/monitor.png" alt="monitor() 方法的示例"></p>
<p>使用 <code>unmonitor(function)</code> 停止监控。</p>
<h2 id="monitorEvents-object-events"><a href="#monitorEvents-object-events" class="headerlink" title="monitorEvents(object[, events])"></a>monitorEvents(object[, events])</h2><p>当在指定对象上发生一个指定事件时，将 Event 对象记录到控制台。您可以指定一个要监控的单独事件、一个事件数组或一个映射到预定义事件集合的常规事件“类型”。请参阅以下示例。</p>
<p>以下命令监控 window 对象上的所有 resize 事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">monitorEvents(<span class="built_in">window</span>, <span class="string">"resize"</span>);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/monitor-events.png" alt="监控窗口大小调整事件"></p>
<p>下面定义一个在 window 对象上同时监控“resize”和“scroll”事件的数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">monitorEvents(<span class="built_in">window</span>, [<span class="string">"resize"</span>, <span class="string">"scroll"</span>])</div></pre></td></tr></table></figure>
<p>您还可以指定一个可用的事件“类型”、映射到预定义事件集的字符串。下表列出了可用的事件类型及其相关的事件映射：</p>
<table>
<thead>
<tr>
<th>事件类型和对应的已映射事件</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>mouse</td>
<td>“mousedown”, “mouseup”, “click”, “dblclick”, “mousemove”, “mouseover”, “mouseout”, “mousewheel”</td>
</tr>
<tr>
<td>key</td>
<td>“keydown”, “keyup”, “keypress”, “textInput”</td>
</tr>
<tr>
<td>touch</td>
<td>“touchstart”, “touchmove”, “touchend”, “touchcancel”</td>
</tr>
<tr>
<td>control</td>
<td>“resize”, “scroll”, “zoom”, “focus”, “blur”, “select”, “change”, “submit”, “reset”</td>
</tr>
</tbody>
</table>
<p>例如，以下示例为 Elements 面板上当前选择的输入文本字段上的所有对应 key 事件使用使用“key”事件类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">monitorEvents($0, &quot;key&quot;);</div></pre></td></tr></table></figure>
<p>下面是在文本字段中输入字符后的一个输出示例：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/monitor-key.png" alt="监控关键事件"></p>
<h2 id="profile-name-and-profileEnd-name"><a href="#profile-name-and-profileEnd-name" class="headerlink" title="profile([name]) and profileEnd([name])"></a>profile([name]) and profileEnd([name])</h2><p><code>profile()</code> 使用可选的名称启动一个 JavaScript CPU 分析会话。<code>profileEnd()</code> 在 Profile 面板中完成分析，并显示结果。（另请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution" target="_blank" rel="external">加速 JavaScript 执行</a>。）</p>
<p>开始分析：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">profile(<span class="string">"My profile"</span>)</div></pre></td></tr></table></figure>
<p>在“Profiles”面板中停止分析并显示结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">profileEnd(<span class="string">"My profile"</span>)</div></pre></td></tr></table></figure>
<p>也可以嵌入配置文件。例如，这在任意顺序下都起作用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">profile(<span class="string">'A'</span>);</div><div class="line">profile(<span class="string">'B'</span>);</div><div class="line">profileEnd(<span class="string">'A'</span>);</div><div class="line">profileEnd(<span class="string">'B'</span>);</div></pre></td></tr></table></figure>
<p>“profiles”面板中的结果</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/grouped-profiles.png" alt="分组的个人资料"></p>
<p>注：一次可运行多个 CPU 配置文件，不需要您按创建顺序结束它们。</p>
<h2 id="table-data-columns"><a href="#table-data-columns" class="headerlink" title="table(data[, columns])"></a>table(data[, columns])</h2><p>通过传入含可选列标题的数据对象记录具有表格格式的对象数据。例如，要在控制台中显示使用 table 的名称列表，您需要执行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> names = &#123;</div><div class="line">    <span class="number">0</span>: &#123; <span class="attr">firstName</span>: <span class="string">"John"</span>, <span class="attr">lastName</span>: <span class="string">"Smith"</span> &#125;,</div><div class="line">    <span class="number">1</span>: &#123; <span class="attr">firstName</span>: <span class="string">"Jane"</span>, <span class="attr">lastName</span>: <span class="string">"Doe"</span> &#125;</div><div class="line">&#125;;</div><div class="line">table(names);</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/console/images/table.png" alt="table() 方法的示例"></p>
<h2 id="undebug-function"><a href="#undebug-function" class="headerlink" title="undebug(function)"></a>undebug(function)</h2><p><code>undebug(function)</code> 可停止调试指定函数，以便在调用函数时，不再调用调试程序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">undebug(getData);</div></pre></td></tr></table></figure>
<h2 id="unmonitor-function"><a href="#unmonitor-function" class="headerlink" title="unmonitor(function)"></a>unmonitor(function)</h2><p><code>unmonitor(function)</code> 可停止监控指定函数。它可与 <code>monitor(fn)</code> 结合使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unmonitor(getData);</div></pre></td></tr></table></figure>
<h2 id="unmonitorEvents-object-events"><a href="#unmonitorEvents-object-events" class="headerlink" title="unmonitorEvents(object[, events])"></a>unmonitorEvents(object[, events])</h2><p><code>unmonitorEvents(object[, events])</code> 可停止针对指定对象和事件的事件监控。例如，以下命令可停止 window 对象上的所有事件监控：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unmonitorEvents(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>您也可以有选择性地停止监控某个对象上的特定事件。例如，以下代码可开始对当前所选元素上所有鼠标事件的监控，然后停止监控“mousemove”事件（可能会减少控制台输出的噪音）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">monitorEvents($<span class="number">0</span>, <span class="string">"mouse"</span>);</div><div class="line">unmonitorEvents($<span class="number">0</span>, <span class="string">"mousemove"</span>);</div></pre></td></tr></table></figure>
<h2 id="values-object"><a href="#values-object" class="headerlink" title="values(object)"></a>values(object)</h2><p><code>values(object)</code> 返回一个包含属于指定对象的所有属性值的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">values(object);</div></pre></td></tr></table></figure>
<h1 id="开始分析运行时性能"><a href="#开始分析运行时性能" class="headerlink" title="开始分析运行时性能"></a>开始分析运行时性能</h1><p>运行时性能是您的页面在运行时的效果，而不是加载。本教程教你如何使用Chrome DevTools Performance面板分析运行时性能。在<a href="https://developers.google.com/web/fundamentals/performance/rail" target="_blank" rel="external">RAIL</a>模型方面，您在本教程中学习的技能对分析页面的响应，动画和空闲阶段很有用。</p>
<p><strong>注意：</strong>本教程基于Chrome 59.如果您使用其他版本的Chrome，则DevTools的UI和功能可能会有所不同。检查<code>chrome://help</code>您正在运行的Chrome版本。</p>
<h2 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h2><p>在本教程中，您可以在实际页面上打开DevTools，并使用“性能”面板查找页面上的性能瓶颈。</p>
<ol>
<li><p>以<a href="https://support.google.com/chrome/answer/95464" target="_blank" rel="external">隐身模式</a>打开Google Chrome 。无痕模式可确保Chrome运行在一个干净的状态。例如，如果您安装了大量扩展，则这些扩展可能会在您的性能测量中产生噪音。</p>
</li>
<li><p>在您的隐身窗口中加载以下页面。这是您要简要介绍的演示。该页面显示了一堆上下移动的小蓝色方块。</p>
<p><code>https://googlechrome.github.io/devtools-samples/jank/</code></p>
</li>
<li><p>按Command+ Option+ I（Mac）或 Control+ Shift+ I（Windows，Linux）打开DevTools。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/get-started.png" alt="左边的演示，右边的DevTools"><strong>图1</strong>。左边的演示，右边的DevTools</p>
<p>​</p>
<p>​</p>
<p><strong>注意</strong>：对于其余的屏幕截图，DevTools将被拆除<a href="https://developers.google.com/web/tools/chrome-devtools/ui#placement" target="_blank" rel="external">到一个单独的窗口</a>，以便您可以更好地看到它的内容。</p>
<p>​</p>
</li>
</ol>
<h3 id="模拟移动CPU"><a href="#模拟移动CPU" class="headerlink" title="模拟移动CPU"></a>模拟移动CPU</h3><p>移动设备的CPU功耗远低于台式机和笔记本电脑。无论何时配置页面，使用CPU调节来模拟页面在移动设备上的表现。</p>
<ol>
<li><p>在DevTools中，单击“ <strong>性能</strong> ”选项卡。</p>
</li>
<li><p>确保<strong>屏幕截图</strong>复选框已启用。</p>
</li>
<li><p>单击<strong>捕获设置</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/capture-settings.png" alt="捕获设置">。DevTools显示与捕获性能指标的相关设置。</p>
</li>
<li><p>对于<strong>CPU</strong>，请选择<strong>2x减速</strong>。DevTools控制CPU，使其比平常慢2倍。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/throttling.svg" alt="CPU节流"><strong>图2</strong>。CPU节流，概述为蓝色</p>
<p>​</p>
<p>​</p>
<p><strong>注意</strong>：测试其他页面时，如果要确保它们在低端移动设备上运行良好，请将CPU限制设置为<strong>20倍的速度</strong>。这个演示对于20倍的减速不能很好的工作，所以它只是使用2x减速来进行教学。</p>
<p>​</p>
</li>
</ol>
<h3 id="设置演示"><a href="#设置演示" class="headerlink" title="设置演示"></a>设置演示</h3><p>很难创建一个适用于本网站所有读者的运行时性能演示。此部分可让您自定义演示，以确保您的体验与本教程中看到的屏幕截图和说明相比是一致的，无论您的具体设置如何。</p>
<ol>
<li><p>继续点击<strong>添加10</strong>，直到蓝色方块移动明显比以前慢。在高端机器上，可能需要大约20次点击。</p>
</li>
<li><p>点击<strong>优化</strong>。蓝色方块应更快更顺利地移动。</p>
<p>​</p>
<p><strong>注意</strong>：如果在优化版本和未优化版本之间看不到显着的差异，请尝试单击“减少<strong>10”</strong>几次，然后重试。如果您添加太多的蓝色方块，您只需要最大化CPU，您将不会看到两个版本的结果有重大差异。</p>
<p>​</p>
</li>
<li><p>点击<strong>取消优化</strong>。蓝色正方形移动较慢，再次更多地打。</p>
</li>
</ol>
<h3 id="记录运行时性能"><a href="#记录运行时性能" class="headerlink" title="记录运行时性能"></a>记录运行时性能</h3><p>当您运行页面的优化版本时，蓝色方块移动速度更快。这是为什么？这两个版本应该在相同的时间量内移动每个正方形相同的空间。在“性能”面板中进行录制，以了解如何检测未优化版本中的性能瓶颈。</p>
<ol>
<li><p>在DevTools中，单击<strong>记录</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/record.png" alt="记录">。DevTools在页面运行时捕获性能指标。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/profiling.png" alt="分析页面"><strong>图3</strong>：分析页面</p>
<p>​</p>
</li>
<li><p>等待几秒钟</p>
</li>
<li><p>单击<strong>停止</strong>。DevTools停止录制，处理数据，然后在“性能”面板上显示结果。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/results.png" alt="配置文件的结果"><strong>图4</strong>：配置文件的结果</p>
<p>​</p>
</li>
</ol>
<p>哇，这是一个压倒性的数据量。不用担心，很快就会变得更加有道理。</p>
<h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>记录页面的性能后，您可以测量页面性能的差异，并查找原因。</p>
<h3 id="分析每秒帧数"><a href="#分析每秒帧数" class="headerlink" title="分析每秒帧数"></a>分析每秒帧数</h3><p>测量任何动画性能的主要指标是每秒帧数（FPS）。当动画运行在60 FPS时，用户很高兴。</p>
<ol>
<li><p>看看<strong>FPS</strong>图表。每当您看到<strong>FPS</strong>上方的红色条纹 ，这意味着帧率下降得如此之低，以致可能会损害用户体验。一般来说，绿色条越高，FPS越高。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/fps-chart.svg" alt="FPS图表"><strong>图5</strong>：FPS图，概述为蓝色</p>
<p>​</p>
</li>
<li><p>在<strong>FPS</strong>图表下方，您可以看到<strong>CPU</strong>图表。中相应的颜色 <strong>CPU</strong>图表对应于颜色<strong>摘要</strong>选项卡，在性能板的底部。<strong>CPU</strong>图表充满色彩的事实意味着CPU在录制过程中被最大化。无论何时看到CPU长时间的长时间运行，都可以找到减少工作量的方法。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/cpu-summary.svg" alt="CPU图表和摘要选项卡"><strong>图6</strong>：CPU图和摘要选项卡，以蓝色概述</p>
<p>​</p>
</li>
<li><p>将鼠标悬停在<strong>FPS</strong>，<strong>CPU</strong>或<strong>NET</strong>图表上。DevTools在该时间点显示页面的屏幕截图。左右移动鼠标重播录音。这被称为擦洗，它有助于手动分析动画的进度。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/screenshot.png" alt="查看屏幕截图"><strong>图7</strong>：在录像的2000ms标记周围查看该页面的屏幕截图</p>
<p>​</p>
</li>
<li><p>在“ <strong>框架”</strong>部分，将鼠标悬停在其中一个绿色方块上。DevTools向您显示该特定框架的FPS。每帧可能远低于60 FPS的目标。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/frame.png" alt="悬停在一个框架上"><strong>图8</strong>：悬停在框架上</p>
<p>​</p>
</li>
</ol>
<p>当然，在这个演示中，很显然页面效果不佳。但是在实际的情况下，可能不太清楚，所以让所有这些工具进行测量就会派上用场。</p>
<h4 id="奖金：打开FPS表"><a href="#奖金：打开FPS表" class="headerlink" title="奖金：打开FPS表"></a>奖金：打开FPS表</h4><p>另一个便利的工具是FPS计费器，它可以在页面运行时为FPS提供实时估计。</p>
<ol>
<li><p>按Command+ Shift+ P（Mac）或 Control+ Shift+ P（Windows，Linux）打开命令菜单。</p>
</li>
<li><p>开始键入<code>Rendering</code>命令菜单，然后选择<strong>显示渲染</strong>。</p>
</li>
<li><p>在“ <strong>渲染</strong> ”选项卡中，启用<strong>FPS仪表</strong>。您的视口右上方会显示一个新的叠加层。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/fps-meter.png" alt="FPS仪表"><strong>图9</strong>：FPS仪表</p>
<p>​</p>
</li>
<li><p>禁用<strong>FPS仪表</strong>，然后按Escape关闭“ <strong>渲染</strong> ”选项卡。您将不会在本教程中使用它。</p>
</li>
</ol>
<h3 id="找到瓶颈"><a href="#找到瓶颈" class="headerlink" title="找到瓶颈"></a>找到瓶颈</h3><p>现在，您已经衡量和验证了动画效果不佳，下一个问题是：为什么？</p>
<ol>
<li><p>注意摘要选项卡。当没有选择任何事件时，此选项卡显示活动细目。页面花费大部分时间渲染。由于表现是减少工作的艺术，您的目标是减少花费在渲染工作上花费的时间。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/summary.svg" alt="摘要选项卡"><strong>图10</strong>：摘要选项卡，概述为蓝色</p>
<p>​</p>
</li>
<li><p>展开<strong>主要</strong>部分。DevTools随着时间的推移，显示主线程上的活动的火焰图表。随着时间的推移，x轴表示录制。每个酒吧代表一个事件。更广泛的酒吧意味着事件花费更长时间。y轴表示调用堆栈。当您看到彼此堆叠的事件时，这意味着上部事件导致较低的事件。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/main.svg" alt="主要部分"><strong>图11</strong>：主要部分，概述为蓝色</p>
<p>​</p>
</li>
<li><p>录音中有很多数据。通过单击，按住并将鼠标拖动到“ <strong>概述</strong> ”（即包含<strong>FPS</strong>，<strong>CPU</strong>和<strong>NET</strong>图表的部分）上， 放大单个<strong>动画帧激活</strong>事件。的<strong>主要</strong>部分和<strong>摘要</strong> 标签仅显示记录的所选择的部分的信息。<strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/zoomed.png" alt="放大单个动画帧激活事件"><strong>图12</strong>：放大单个动画帧激活事件</p>
<p>​</p>
<p>​</p>
<p><strong>注</strong>：缩放另一种方法是把重点放在<strong>主要</strong>通过单击其背景或选择事件部分，然后按 W，A，S，和D键。</p>
<p>​</p>
</li>
<li><p>注意<strong>动画框架激活</strong> 事件右上角的红色三角形。每当你看到一个红色的三角形，这是一个警告，可能会有一个与此事件相关的问题。</p>
<p>​</p>
<p><strong>注意</strong>：只要执行回调，就会发生<strong>Animation Frame Fired</strong>事件 <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" target="_blank" rel="external"><code>requestAnimationFrame()</code></a>。</p>
<p>​</p>
</li>
<li><p>单击<strong>动画帧激活</strong>事件。“ <strong>摘要</strong> ”选项卡现在显示有关该事件的信息。注意<strong>显示</strong>链接。单击导致DevTools突出显示启动“ <strong>动画框架</strong>激活” 事件的事件。还要注意<strong>app.js：94的</strong>链接。单击它将跳转到源代码中的相关行。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/animation-frame-fired.png" alt="有关动画框架发生事件的更多信息"><strong>图13</strong>：有关Animation Frame Fired事件的更多信息</p>
<p>​</p>
<p>​</p>
<p><strong>注意</strong>：选择事件后，使用箭头键选择旁边的事件。</p>
<p>​</p>
</li>
<li><p>在<strong>app.update</strong>事件下，有一堆紫色的事件。如果它们更宽，看起来好像每个人都可能有一个红色的三角形。现在单击一个紫色<strong>布局</strong>事件。“ <strong>摘要</strong> ”选项卡中的DevTools提供有关该事件的更多信息。事实上，有一个关于强制回流的警告（另外一个是布局）。</p>
</li>
<li><p>在<strong>摘要</strong>选项卡中，单击<strong>布局强制</strong>下的<strong>app.js：70</strong>链接。DevTools将您带到强制布局的代码行。<em>**</em></p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/forced-layout-src.png" alt="导致强制布局的代码行"><strong>图13</strong>：导致强制布局的代码行</p>
<p>​</p>
<p>​</p>
<p><strong>注意</strong>：此代码的问题是，在每个动画框架中，它会更改每个正方形的样式，然后查询页面上每个Square的位置。由于样式改变了，浏览器不知道每个Square的位置是否改变了，所以它必须重新布局方块才能计算它的位置。请参阅<a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid_forced_synchronous_layouts" target="_blank" rel="external">避免强制同步布局</a>了解更多信息。</p>
<p>​</p>
</li>
</ol>
<p>唷！这很重要，但您现在已经在分析运行时性能的基本工作流程中有了坚实的基础。做得好。</p>
<h3 id="奖金：分析优化版本"><a href="#奖金：分析优化版本" class="headerlink" title="奖金：分析优化版本"></a>奖金：分析优化版本</h3><p>使用您刚刚学到的工作流程和工具，单击演示中的<strong>优化</strong>以启用<strong>优化</strong>的代码，进行另一个性能记录，然后分析结果。从<strong>主要</strong>部分火焰图表中的改进帧速率到减少事件可以看出，优化版本的应用程序的工作量少得多，从而实现更好的性能。</p>
<p><strong>注意：</strong>即使这个“优化”版本并不是很好，因为它仍然操纵<code>top</code>每个Square 的属性。一个更好的方法是坚持只影响合成的属性。有关详细信息，请参阅<a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count#use_transform_and_opacity_changes_for_animations" target="_blank" rel="external">为动画使用变换和不透明度更改</a>。</p>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>理解性能的基础是RAIL模型。该模式向您介绍对用户最重要的性能指标。请参阅<a href="https://developers.google.com/web/fundamentals/performance/rail" target="_blank" rel="external">使用RAIL模型测量性能</a>以了解更多信息。</p>
<p>为了更好的与性能面板，练习使完美。尝试分析自己的页面并分析结果。如果您对结果有任何疑问， <a href="http://stackoverflow.com/questions/ask?tags=google-chrome-devtools" target="_blank" rel="external">请打开标记为“Stack Overflow”的堆栈问题<code>google-chrome-devtools</code></a>。如果可能的话，将屏幕截图或链接包含在可重复的页面中。</p>
<p>为了真正掌握运行时性能，您已经了解了浏览器如何将HTML，CSS和JS转换为屏幕上的像素。最好的开始是<a href="https://developers.google.com/web/fundamentals/performance/rendering/" target="_blank" rel="external">渲染性能概述</a>。<a href="https://aerotwist.com/blog/the-anatomy-of-a-frame/" target="_blank" rel="external">一个框架的解剖学</a>深入细节。</p>
<p>最后，有很多方法可以提高运行时性能。本教程重点介绍一个特定的动画瓶颈，让您可以通过“性能”面板进行重点介绍，但这只是您可能遇到的许多瓶颈之一。渲染性能系列的其余部分有很多好的提示，用于改进运行时性能的各个方面，如：</p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution" target="_blank" rel="external">优化JS执行</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations" target="_blank" rel="external">减少风格计算的范围和复杂性</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing" target="_blank" rel="external">避免大型，复杂的布局和布局颠覆</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas" target="_blank" rel="external">简化绘制复杂性，减少绘制面积</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="external">坚持仅用于Compositor的属性和管理层计数</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/debounce-your-input-handlers" target="_blank" rel="external">消除您的输入处理程序</a></li>
</ul>
<h1 id="分析运行时性能"><a href="#分析运行时性能" class="headerlink" title="分析运行时性能"></a>分析运行时性能</h1><p>用户希望页面可以交互并且非常流畅。像素管道的每个阶段均可能出现卡顿现象。 了解用于确定和解决会降低运行时性能的常见问题的工具和策略。</p>
<h3 id="TL-DR-28"><a href="#TL-DR-28" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>不要编写会强制浏览器重新计算布局的 JavaScript。将读取和写入功能分开，并首先执行读取。</li>
<li>不要使您的 CSS 过于复杂。减少使用 CSS 并保持 CSS 选择器简洁。</li>
<li>尽可能地避免布局。选择根本不会触发布局的 CSS。</li>
<li>绘制比任何其他渲染活动花费的时间都要多。请留意绘制瓶颈。</li>
</ul>
<h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JavaScript 计算，特别是会触发大量视觉变化的计算会降低应用性能。 不要让时机不当或长时间运行的 JavaScript 影响用户交互。</p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>进行 <strong>Timeline</strong> <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#make-a-recording" target="_blank" rel="external">记录</a>，并找出疑似较长的 <strong>Evaluate Script</strong> 事件。 如果您发现存在任何这样的事件，可以启用 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#profile-js" target="_blank" rel="external">JS 分析器</a>并重新做记录，以便获取究竟调用了哪些 JS 函数以及调用每个函数需要多长时间的更详细信息。</p>
<p>如果您注意到 JavaScript 中出现较多的卡顿现象，您可能需要进一步分析并收集 JavaScript CPU 配置文件。CPU 配置文件会显示执行时间花费在页面的哪些函数上。在<a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution" target="_blank" rel="external">加快 JavaScript 执行速度</a>中了解如何创建 CPU 配置文件。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>下表对一些常见 JavaScript 问题和潜在解决方案进行了说明：</p>
<table>
<thead>
<tr>
<th>问题</th>
<th>示例</th>
<th>解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>大开销输入处理程序影响响应或动画。</td>
<td>触摸、视差滚动。</td>
<td>让浏览器尽可能晚地处理触摸和滚动，或者绑定侦听器（请参阅 <a href="http://calendar.perfplanet.com/2013/the-runtime-performance-checklist/" target="_blank" rel="external">Paul Lewis 运行时性能检查单中的大开销输入处理程序</a>）。</td>
</tr>
<tr>
<td>时机不当的 JavaScript 影响响应、动画、加载。</td>
<td>页面加载后用户向右滚动、setTimeout/setInterval。</td>
<td><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution" target="_blank" rel="external">优化 JavaScript 执行</a>：使用 <code>requestAnimationFrame</code>、使 DOM 操作遍布各个帧、使用网络工作线程。</td>
</tr>
<tr>
<td>长时间运行的 JavaScript 影响响应。</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">DOMContentLoaded 事件</a>由于 JS 工作过多而停止。</td>
<td>将纯粹的计算工作转移到<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">网络工作线程</a>。如果您需要 DOM 访问权限，请使用<code>requestAnimationFrame</code>（另请参阅<a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution" target="_blank" rel="external">优化 JavaScript 执行</a>）。</td>
</tr>
<tr>
<td>会产生垃圾的脚本影响响应或动画。</td>
<td>任何地方都可能发生垃圾回收。</td>
<td>减少编写会产生垃圾的脚本（请参阅 <a href="http://calendar.perfplanet.com/2013/the-runtime-performance-checklist/" target="_blank" rel="external">Paul Lewis 运行时性能检查单中的动画垃圾回收</a>）。</td>
</tr>
</tbody>
</table>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>样式更改开销较大，在这些更改会影响 DOM 中的多个元素时更是如此。 只要您将样式应用到元素，浏览器就必须确定对所有相关元素的影响、重新计算布局并重新绘制。</p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations" target="_blank" rel="external">缩小样式计算的范围并降低其复杂性</a></li>
</ul>
<h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><p>进行 <strong>Timeline</strong> <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#make-a-recording" target="_blank" rel="external">记录</a>。检查大型 <strong>Recalculate Style</strong> 事件的记录（以紫色显示）。</p>
<p>点击 <strong>Recalculate Style</strong> 事件可以在 <strong>Details</strong> 窗格中查看更多相关信息。 如果样式更改需要较长时间，对性能的影响会非常大。 如果样式计算会影响大量元素，则需要改进另一个方面。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/recalculate-style.png" alt="长时间运行的重新计算样式"></p>
<p>要降低 <strong>Recalculate Style</strong> 事件的影响，请执行以下操作：</p>
<ul>
<li>使用 <a href="https://csstriggers.com/" target="_blank" rel="external">CSS 触发器</a>了解哪些 CSS 属性会触发布局、绘制与合成。 这些属性对渲染性能的影响最大。</li>
<li>请转换到影响较小的属性。请参阅<a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="external">坚持仅合成器属性和管理层计数</a>，寻求更多指导。</li>
</ul>
<h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>下表对一些常见样式问题和潜在解决方案进行了说明：</p>
<table>
<thead>
<tr>
<th>问题</th>
<th>示例</th>
<th>解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>大开销样式计算影响响应或动画。</td>
<td>任何会更改元素几何形状的 CSS 属性，如宽度、高度或位置；浏览器必须检查所有其他元素并重做布局。</td>
<td><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing" target="_blank" rel="external">避免会触发布局的 CSS。</a></td>
</tr>
<tr>
<td>复杂的选择器影响响应或动画。</td>
<td>嵌套选择器强制浏览器了解与所有其他元素有关的全部内容，包括父级和子级。</td>
<td><a href="https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations" target="_blank" rel="external">在 CSS 中引用只有一个类的元素。</a></td>
</tr>
</tbody>
</table>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations" target="_blank" rel="external">缩小样式计算的范围并降低其复杂性</a></li>
</ul>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>布局（或 Firefox 中的自动重排）是浏览器用来计算页面上所有元素的位置和大小的过程。 网页的布局模式意味着一个元素可能影响其他元素；例如 <code>&lt;body&gt;</code> 元素的宽度一般会影响其子元素的宽度以及树中各处的节点，等等。这个过程对于浏览器来说可能很复杂。 一般的经验法则是，如果在帧完成前从 DOM 请求返回几何值，您将发现会出现“强制同步布局”，在频繁地重复或针对较大的 DOM 树执行操作时这会成为性能的大瓶颈。</p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing" target="_blank" rel="external">避免布局抖动</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/forced-synchronous-layouts" target="_blank" rel="external">诊断强制同步布局</a></li>
</ul>
<h3 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h3><p>Chrome DevTools 的 <strong>Timeline</strong> 可以确定页面何时会导致强制同步布局。 这些 <strong>Layout</strong> 事件使用红色竖线标记。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/forced-synchronous-layout.png" alt="强制同步布局"></p>
<p>“布局抖动”是指反复出现强制同步布局情况。 这种情况会在 JavaScript 从 DOM 反复地写入和读取时出现，将会强制浏览器反复重新计算布局。 要确定布局抖动，请找到多个强制同步布局警告（如上方屏幕截图所示）的模式。</p>
<h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><p>下表对一些常见布局问题和潜在解决方案进行了说明：</p>
<table>
<thead>
<tr>
<th>问题</th>
<th>示例</th>
<th>解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>强制同步布局影响响应或动画。</td>
<td>强制浏览器在像素管道中过早执行布局，导致在渲染流程中重复步骤。</td>
<td>先批处理您的样式读取，然后处理任何写入（另请参阅<a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing" target="_blank" rel="external">避免大型、复杂的布局和布局抖动</a>）。</td>
</tr>
<tr>
<td>布局抖动影响响应或动画。</td>
<td>形成一个使浏览器进入读取-写入-读取写入周期的循环，强制浏览器反复地重新计算布局。</td>
<td>使用 <a href="https://github.com/wilsonpage/fastdom" target="_blank" rel="external">FastDom 内容库</a>自动批处理读取-写入操作。</td>
</tr>
</tbody>
</table>
<h2 id="绘制与合成"><a href="#绘制与合成" class="headerlink" title="绘制与合成"></a>绘制与合成</h2><p>绘制是填充像素的过程。这经常是渲染流程开销最大的部分。 如果您在任何情况下注意到页面出现卡顿现象，很有可能存在绘制问题。</p>
<p>合成是将页面的已绘制部分放在一起以在屏幕上显示的过程。 大多数情况下，如果坚持仅合成器属性并避免一起绘制，您会看到性能会有极大的改进，但是您需要留意过多的层计数（另请参阅<a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="external">坚持仅合成器属性和管理层计数</a>）。</p>
<h3 id="工具-3"><a href="#工具-3" class="headerlink" title="工具"></a>工具</h3><p>想要了解绘制花费多久或多久绘制一次？请在 <strong>Timeline</strong> 面板上启用 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#profile-painting" target="_blank" rel="external">Paint profiler</a>，然后<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#make-a-recording" target="_blank" rel="external">进行记录</a>。</p>
<p>如果您的大部分渲染时间花费在绘制上，即表示存在绘制问题。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/long-paint.png" alt="Timeline 记录中的长时间绘制"></p>
<p>请查看 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool#rendering-settings" target="_blank" rel="external"><strong>rendering settings</strong></a> 菜单，进一步了解可以帮助诊断绘制问题的配置。</p>
<h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><p>下表对一些常见绘制与合成问题及潜在解决方案进行了说明：</p>
<table>
<thead>
<tr>
<th>问题</th>
<th>示例</th>
<th>解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>绘制风暴影响响应或动画。</td>
<td>较大的绘制区域或大开销绘制影响响应或动画。</td>
<td>避免绘制、提升将要移动到自有层的元素，使用变形和不透明度（请参阅<a href="https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas" target="_blank" rel="external">降低绘制的复杂性并减少绘制区域</a>）。</td>
</tr>
<tr>
<td>层数激增影响动画。</td>
<td>使用 translateZ(0) 过度提升过多的元素会严重影响动画性能。</td>
<td>请谨慎提升到层，并且仅在您了解这样会有切实改进时提升到层（请参阅<a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="external">坚持仅合成器属性和管理层计数</a>）。</td>
</tr>
</tbody>
</table>
<h1 id="性能分析参考"><a href="#性能分析参考" class="headerlink" title="性能分析参考"></a>性能分析参考</h1><p>此页面是与Chrome分析工具分析性能相关的功能的综合参考。</p>
<p>有关如何使用Chrome DevTools分析页面性能的指导教程，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/" target="_blank" rel="external">开始分析运行时性能</a>。</p>
<h2 id="记录表现"><a href="#记录表现" class="headerlink" title="记录表现"></a>记录表现</h2><h3 id="记录运行时性能-1"><a href="#记录运行时性能-1" class="headerlink" title="记录运行时性能"></a>记录运行时性能</h3><p>记录运行时性能，当您要分析页面在运行时的性能，而不是加载。</p>
<ol>
<li><p>转到要分析的页面。</p>
</li>
<li><p>单击DevTools中的“ <strong>性能</strong> ”选项卡。</p>
</li>
<li><p>单击<strong>记录</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/record.png" alt="记录">。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/record.svg" alt="记录"><strong>图1</strong>。<strong>记录</strong>，概述为蓝色</p>
<p>​</p>
</li>
<li><p>与页面互动。DevTools记录由于您的互动而发生的所有页面活动。</p>
</li>
<li><p>再次单击<strong>记录</strong>，或单击<strong>停止</strong>停止录制。</p>
</li>
</ol>
<h3 id="记录负载性能"><a href="#记录负载性能" class="headerlink" title="记录负载性能"></a>记录负载性能</h3><p>当您要分析页面在加载时的性能而不是运行时，记录负载性能。</p>
<ol>
<li><p>转到要分析的页面。</p>
</li>
<li><p>打开DevTools的“ <strong>性能”</strong>面板。</p>
</li>
<li><p>单击<strong>重新加载页面</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/reload-page.png" alt="重新加载页面">。DevTools在页面重新加载时记录性能指标，然后在加载完成后几秒钟自动停止录制。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/reload-page.svg" alt="重新加载页面"><strong>图2</strong>。<strong>重新加载页面</strong>，概述为蓝色</p>
<p>​</p>
</li>
</ol>
<p>DevTools会自动放大大部分活动发生的记录部分。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/load-recording.png" alt="页面加载记录"><strong>图3</strong>。页面加载记录</p>
<h3 id="在录制时拍摄截图"><a href="#在录制时拍摄截图" class="headerlink" title="在录制时拍摄截图"></a>在录制时拍摄截图</h3><p>启用“ <strong>屏幕截图”</strong>复选框可在录制时捕获每个帧的屏幕截图。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/screenshots.svg" alt="屏幕截图复选框"><strong>图4</strong>。该<strong>截图</strong>复选框</p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#view-screenshot" target="_blank" rel="external">查看屏幕截图</a>，了解如何与屏幕截图交互。</p>
<h3 id="录制时强制收集垃圾"><a href="#录制时强制收集垃圾" class="headerlink" title="录制时强制收集垃圾"></a>录制时强制收集垃圾</h3><p>在录制页面时，单击<strong>收集垃圾</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/collect-garbage.png" alt="收集垃圾">以强制垃圾回收。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/collect-garbage.svg" alt="收集垃圾"><strong>图5</strong>。收集垃圾，概述为蓝色</p>
<h3 id="显示录音设置"><a href="#显示录音设置" class="headerlink" title="显示录音设置"></a>显示录音设置</h3><p>单击<strong>捕获设置</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/capture-settings.png" alt="捕获设置">以显示与DevTools如何捕获性能记录有关的更多设置。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/capture-settings.svg" alt="“捕获设置”部分"><strong>图6</strong>。在<strong>捕捉设置</strong>部分，在蓝色轮廓</p>
<h3 id="禁用JavaScript示例"><a href="#禁用JavaScript示例" class="headerlink" title="禁用JavaScript示例"></a>禁用JavaScript示例</h3><p>默认情况下，记录的<strong>主要</strong>部分显示在录制过程中调用的JavaScript函数的详细调用堆栈。要禁用这些调用堆栈：</p>
<ol>
<li>打开<strong>捕获设置</strong>菜单。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#settings" target="_blank" rel="external">显示录制设置</a>。</li>
<li>启用<strong>禁用JavaScript样本</strong>复选框。</li>
<li>记录页面。</li>
</ol>
<p>图7和图8显示了禁用和启用JavaScript示例之间的区别。当采样被禁用时，记录的<strong>主要</strong>部分要短得多，因为它省略了所有的JavaScript调用堆栈。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/js-samples-disabled.png" alt="JS样本被禁用时的记录示例"><strong>图7</strong>。JS样本被禁用时的记录示例</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/js-samples-enabled.png" alt="启用JS样本时的记录示例"><strong>图8</strong>。启用JS样本时的录制示例</p>
<h3 id="在录制时对网络进行调节"><a href="#在录制时对网络进行调节" class="headerlink" title="在录制时对网络进行调节"></a>在录制时对网络进行调节</h3><p>在录制时调节网络：</p>
<ol>
<li>打开<strong>捕获设置</strong>菜单。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#settings" target="_blank" rel="external">显示录制设置</a>。</li>
<li>将<strong>网络</strong>设置为所需的节流水平。</li>
</ol>
<h3 id="在记录时节油CPU"><a href="#在记录时节油CPU" class="headerlink" title="在记录时节油CPU"></a>在记录时节油CPU</h3><p>在录制时节流CPU：</p>
<ol>
<li>打开<strong>捕获设置</strong>菜单。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#settings" target="_blank" rel="external">显示录制设置</a>。</li>
<li>将<strong>CPU</strong>设置为所需的节流水平。</li>
</ol>
<p>调节是相对于您的计算机的功能。例如， <strong>2x减速</strong>选项使您的CPU运行速度比其通常能力慢2倍。DevTools无法真正模拟移动设备的CPU，因为移动设备的架构与台式机和笔记本电脑的结构非常不同。</p>
<h3 id="启用先进的油漆仪器"><a href="#启用先进的油漆仪器" class="headerlink" title="启用先进的油漆仪器"></a>启用先进的油漆仪器</h3><p>查看详细的油漆仪表：</p>
<ol>
<li>打开<strong>捕获设置</strong>菜单。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#settings" target="_blank" rel="external">显示录制设置</a>。</li>
<li>选中<strong>启用高级绘图仪器</strong>复选框。</li>
</ol>
<p>要了解如何与油漆信息进行交互，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#layers" target="_blank" rel="external">查看图层</a> 和<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint-profiler" target="_blank" rel="external">查看油漆分析器</a>。</p>
<h2 id="保存录音"><a href="#保存录音" class="headerlink" title="保存录音"></a>保存录音</h2><p>要保存录音，请右键单击并选择<strong>保存配置文件</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/save-profile.png" alt="保存个人信息"><strong>图9</strong>。<strong>保存个人信息</strong></p>
<h2 id="加载录音"><a href="#加载录音" class="headerlink" title="加载录音"></a>加载录音</h2><p>要加载录音，请右键单击并选择<strong>加载配置文件</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/load-profile.png" alt="负载配置文件"><strong>图10</strong>。<strong>负载配置文件</strong></p>
<h2 id="清除以前的录音"><a href="#清除以前的录音" class="headerlink" title="清除以前的录音"></a>清除以前的录音</h2><p>录制完成后，按“ <strong>清除录像”</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/clear-recording.png" alt="清除录音">可从“ <strong>性能”</strong> 面板<strong>清除录音</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/clear-recording.svg" alt="清除录音"><strong>图11</strong>。清晰录制，概述为蓝色</p>
<h2 id="分析录音"><a href="#分析录音" class="headerlink" title="分析录音"></a>分析录音</h2><p>当您<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#record-runtime" target="_blank" rel="external">记录运行时的性能</a>或<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#record-load" target="_blank" rel="external">记录负载性能</a>，该<strong>性能</strong>面板提供了大量的数据分析中刚刚发生了什么表现。</p>
<h3 id="选择录音的一部分"><a href="#选择录音的一部分" class="headerlink" title="选择录音的一部分"></a>选择录音的一部分</h3><p>在“ <strong>概览”</strong>中向左或向右拖动鼠标以选择录制的一部分。该<strong>概述</strong>是包含部分<strong>FPS</strong>， <strong>CPU</strong>和<strong>NET</strong>图表。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/zoom.gif" alt="在“概览”上拖动鼠标进行缩放"><strong>图12</strong>。在“概览”上拖动鼠标进行缩放</p>
<p>使用键盘选择一部分：</p>
<ol>
<li>单击<strong>主要</strong>部分的背景，或其旁边的任何部分，如<strong>交互</strong>，<strong>网络</strong>或<strong>GPU</strong>。此键盘工作流仅在其中一个部分处于焦点时才起作用。</li>
<li>使用W，A，S，D键来放大，向左移动，缩小，分别向右移动。</li>
</ol>
<p>使用触控板选择一部分：</p>
<ol>
<li>将鼠标悬停在“ <strong>概述”</strong>部分或“ <strong>详细信息”</strong>部分。该<strong>概述</strong>部分是包含该地区<strong>的FPS</strong>，<strong>CPU</strong>和 <strong>NET</strong>图表。的<strong>详细</strong>部分是包含区域<strong>主要</strong> 部分，所述<strong>相互作用</strong>部分，依此类推。</li>
<li>使用两根手指，向上滑动以缩小，向左滑动左移，向下滑动以放大，向右滑动即可向右移动。</li>
</ol>
<p>要滚动<strong>主</strong>区段或其任何邻居的长火焰图表，请单击并按住上下拖动。拖动左右移动选择录音的哪一部分。</p>
<h3 id="搜索活动"><a href="#搜索活动" class="headerlink" title="搜索活动"></a>搜索活动</h3><p>按Command+ F（Mac）或 Control+ F（Windows，Linux）打开“ <strong>性能”</strong>面板底部的搜索框。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/search.png" alt="搜索框"><strong>图13</strong>。在窗口底部的搜索框中使用正则表达式来查找以`E’开头的任何活动</p>
<p>浏览与您的查询匹配的活动：</p>
<ul>
<li>使用上<strong>一个</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/previous.png" alt="以前">和<strong>下一个</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/next.png" alt="下一个">按钮。</li>
<li>按Shift+ Enter选择上一个或 Enter选择下一个。</li>
</ul>
<p>修改查询设置：</p>
<ul>
<li>按<strong>区分大小写</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/search-case.png" alt="区分大小写"> 使查询区分大小写。</li>
<li>按<strong>正则表达式</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/search-regex.png" alt="正则表达式">在查询中使用<strong>正则表达式</strong>。</li>
</ul>
<p>要隐藏搜索框，请按<strong>取消</strong>。</p>
<h3 id="查看主线程活动"><a href="#查看主线程活动" class="headerlink" title="查看主线程活动"></a>查看主线程活动</h3><p>使用<strong>Main</strong>部分来查看页面主线程上发生的活动。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/main.svg" alt="主要部分"><strong>图14</strong>。的<strong>主要</strong>部分，在蓝色的概述</p>
<p>在“ <strong>摘要</strong> ”选项卡中单击事件以查看有关其的更多信息。DevTools将所选事件概述为蓝色。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/maineventsummary.png" alt="在摘要选项卡中有关主线程事件的更多信息"><strong>图15</strong>。<code>Me</code>“ <strong>摘要</strong> ”选项卡中 有关函数调用事件的更多信息</p>
<p>DevTools表示主要线程活动与火焰图表。x轴表示随时间的记录。y轴表示调用堆栈。上面的事件导致下面的事件。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/flamechart.png" alt="火焰图"><strong>图16</strong>。<strong>主要</strong>部分的 火焰图表</p>
<p>在图16中，一个<code>click</code>事件<code>script_foot_closure.js</code> 在第53行引发了一个函数调用。下面<code>Function Call</code>你看到一个匿名函数被调用。那个匿名函数然后调用<code>Me()</code>，然后调用<code>Se()</code>，等等。</p>
<p>DevTools分配脚本随机颜色。在图16中，来自一个脚本的函数调用为浅绿色。来自另一个脚本的电话是米色的。较暗的黄色代表脚本活动，紫色事件表示渲染活动。这些较暗的黄色和紫色事件在所有录音中都是一致的。</p>
<p>如果要隐藏JavaScript调用的详细火焰图表，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#disable-js-samples" target="_blank" rel="external">禁用JavaScript示例</a>。当JS样品被禁用，你只看到高级别活动，如<code>Event (click)</code>和<code>Function Call (script_foot_closure.js:53)</code>从图16。</p>
<h3 id="查看表中的活动"><a href="#查看表中的活动" class="headerlink" title="查看表中的活动"></a>查看表中的活动</h3><p>录制页面后，您不需要仅依靠<strong>Main</strong>部分来分析活动。DevTools还提供了三个表格视图来分析活动。每个视图都给你一个不同的观点：</p>
<ul>
<li>当您想查看导致最多工作的根活动时，请使用<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#call-tree" target="_blank" rel="external">“ <strong>调用树</strong> ”选项卡</a>。</li>
<li>当您想查看直接花费最多时间的活动时，请使用“ <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#bottom-up" target="_blank" rel="external">自<strong>底</strong> ”选项卡</a>。</li>
<li>当您要按录制中发生的顺序查看<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#event-log" target="_blank" rel="external"><strong>活动</strong></a>时，请使用<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#event-log" target="_blank" rel="external">“ <strong>事件日志</strong> ”选项卡</a>。</li>
</ul>
<p><strong>注意：</strong>接下来的三个部分都是引用相同的演示。您可以在“ <a href="https://googlechrome.github.io/devtools-samples/perf/activitytabs" target="_blank" rel="external">活动”选项卡</a>演示中自己运行<a href="https://googlechrome.github.io/devtools-samples/perf/activitytabs" target="_blank" rel="external">演示</a>，并在<a href="https://github.com/GoogleChrome/devtools-samples/blob/master/perf/activitytabs.html" target="_blank" rel="external">GoogleChrome / devtools-samples / perf / activitytabs.html上</a>查看源代码 。</p>
<h4 id="根活动"><a href="#根活动" class="headerlink" title="根活动"></a>根活动</h4><p>以下是“ <strong>调用树</strong> ”选项卡，“自<strong>底</strong> ”选项卡和“ <strong>事件日志”</strong>部分中提到的<em>根活动</em>概念的说明。<strong><strong><em>**</em></strong></strong></p>
<p>根活动是导致浏览器做一些工作的活动。例如，当您单击页面时，浏览器将<code>Event</code>作为根活动触发活动。这<code>Event</code>可能会导致一个处理程序执行，等等。</p>
<p>在<strong>主要</strong>部分的火焰图表中，根活动位于图表的顶部。在“ <strong>调用树”</strong>和“ <strong>事件日志”</strong>选项卡中，根活动是顶级项目。</p>
<p>有关根活动的示例，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#call-tree" target="_blank" rel="external">“调用树”选项卡</a>。</p>
<h4 id="“呼叫树”选项卡"><a href="#“呼叫树”选项卡" class="headerlink" title="“呼叫树”选项卡"></a>“呼叫树”选项卡</h4><p>使用“ <strong>调用树</strong> ”选项卡查看哪些<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#root-activities" target="_blank" rel="external">根活动</a> 导致最多的工作。</p>
<p>“ <strong>呼叫树</strong> ”选项卡仅在录制的所选部分显示活动。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#select" target="_blank" rel="external">选择录音的一部分，</a>了解如何选择部分。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/call-tree.png" alt="“呼叫树”选项卡"><strong>图17</strong>。“ <strong>呼叫树</strong> ”选项卡</p>
<p>在图17中，在物品的顶层<strong>活动</strong>柱，例如 <code>Event</code>，<code>Paint</code>，和<code>Composite Layers</code>是根活动。嵌套表示调用堆栈。例如，在图17中<code>Event</code>引起的 <code>Function Call</code>，引起的<code>button.addEventListener</code>，引起的<code>b</code>，等等。</p>
<p><strong>自我时间</strong>代表直接在该活动中花费的时间。 <strong>总时间</strong>表示在该活动或其任何孩子中花费的时间。</p>
<p>单击“ <strong>自我时间”</strong>，“ <strong>总时间</strong> ”或“ <strong>活动”</strong>以按该列对表进行排序。</p>
<p>使用<strong>过滤器</strong>文本框按活动名称过滤事件。</p>
<p>默认情况下，“ <strong>分组</strong> ”菜单设置为“ <strong>无分组”</strong>。使用 <strong>分组</strong>菜单根据各种条件对活动表进行排序。</p>
<p>单击<strong>显示最重叠堆栈</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/show-heaviest-stack.png" alt="显示最重叠的堆栈">以显示<strong>活动</strong>表右侧的另一个表。点击活动填充<strong>最重堆栈</strong>表。在<strong>最重的堆栈</strong>表显示您所选择的活动的孩子们把执行时间最长的一次。</p>
<h4 id="自下而上的选项卡"><a href="#自下而上的选项卡" class="headerlink" title="自下而上的选项卡"></a>自下而上的选项卡</h4><p>使用“ <strong>自下而上</strong> ”选项卡查看哪些活动直接占用了大部分时间。</p>
<p>“ <strong>自下而上</strong> ”选项卡仅在录制的所选部分显示活动。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#select" target="_blank" rel="external">选择录音的一部分，</a>了解如何选择部分。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/bottom-up.png" alt="自下而上的选项卡"><strong>图18</strong>。在<strong>自下而上</strong>标签</p>
<p>在图18 的<strong>主要</strong>部分火焰图中，您可以看到几乎几乎所有的时间都花费在执行三个调用<code>wait()</code>。因此，图18的“ 自<strong>底</strong> ”选项卡中的顶部活动是 <code>wait</code>。在图18的火焰图中，呼叫之下的黄色<code>wait</code> 实际上是数千个<code>Minor GC</code>呼叫。因此，您可以看到在<strong>自下而上</strong>选项卡中，下一个最昂贵的活动是<code>Minor GC</code>。</p>
<p>“ <strong>自我时间”</strong>列表示在其所有事件中直接在该活动中花费的总计时间。</p>
<p>“ <strong>总时间”</strong>列表示在该活动或其任何子项中花费的聚合时间。</p>
<h4 id="事件日志选项卡"><a href="#事件日志选项卡" class="headerlink" title="事件日志选项卡"></a>事件日志选项卡</h4><p>使用“ <strong>事件日志</strong> ”选项卡可以按照录制过程中发生的顺序来查看<strong>活动</strong>。</p>
<p>“ <strong>事件日志</strong> ”选项卡仅在录制的所选部分显示活动。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#select" target="_blank" rel="external">选择录音的一部分，</a>了解如何选择部分。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/event-log.png" alt="事件日志选项卡"><strong>图19</strong>。在<strong>事件日志</strong>选项卡</p>
<p>“ <strong>起始时间”</strong>列表示相对于录制开始的活动开始点。例如，<code>1573.0 ms</code>图19中所选项目的开始时间 表示活动开始后1573 ms。</p>
<p>“ <strong>自我时间”</strong>列表示直接在该活动中花费的时间。</p>
<p>“ <strong>总时间”</strong>列表示直接在该活动或其任何子项中花费的时间。</p>
<p>单击<strong>开始时间</strong>，<strong>自身时间</strong>或<strong>总时间</strong>以按该列对表进行排序。</p>
<p>使用<strong>过滤器</strong>文本框按名称过滤活动。</p>
<p>使用“ <strong>持续时间</strong> ”菜单过滤出花费少于1毫秒或15毫秒的活动。默认情况下，“ <strong>持续时间</strong> ”菜单设置为“ <strong>全部”</strong>，表示显示所有活动。</p>
<p>禁用<strong>加载</strong>，<strong>脚本</strong>，<strong>渲染</strong>或<strong>绘图</strong> 复选框，以过滤掉这些类别中的所有活动。</p>
<h3 id="查看GPU活动"><a href="#查看GPU活动" class="headerlink" title="查看GPU活动"></a>查看GPU活动</h3><p>在<strong>GPU</strong>部分查看GPU活动。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/gpu.svg" alt="GPU部分"><strong>图20</strong>。该<strong>GPU</strong>部分，在蓝色轮廓</p>
<h3 id="查看栅格活动"><a href="#查看栅格活动" class="headerlink" title="查看栅格活动"></a>查看栅格活动</h3><p>在“ <strong>栅格”</strong>部分中查看栅格活动。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/raster.svg" alt="光栅部分"><strong>图21</strong>。该<strong>栅格</strong>部分的蓝色轮廓</p>
<h3 id="查看互动"><a href="#查看互动" class="headerlink" title="查看互动"></a>查看互动</h3><p>使用“ <strong>交互”</strong>部分查找和分析录制过程中发生的用户交互。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/interactions.svg" alt="互动部分"><strong>图22</strong>。在<strong>互动</strong>部分，在蓝色轮廓</p>
<p>互动底部的红线代表等待主线程花费的时间。</p>
<p>单击交互以在“ <strong>摘要</strong> ”选项卡中查看有关它的更多信息。</p>
<h3 id="分析每秒帧数（FPS）"><a href="#分析每秒帧数（FPS）" class="headerlink" title="分析每秒帧数（FPS）"></a>分析每秒帧数（FPS）</h3><p>DevTools提供了多种分析每秒帧数的方法：</p>
<ul>
<li>使用<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#fps-chart" target="_blank" rel="external">的<strong>FPS</strong>图表</a>在记录期间获得FPS的概述。</li>
<li>使用<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#frames" target="_blank" rel="external">“ <strong>帧”</strong>部分</a>查看特定帧占用多长时间。</li>
<li>当页面运行时，使用<strong>FPS仪表</strong>实时估计FPS。请参阅 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#fps-meter" target="_blank" rel="external">查看与FPS仪表实时帧每秒</a>。</li>
</ul>
<h4 id="FPS图表"><a href="#FPS图表" class="headerlink" title="FPS图表"></a>FPS图表</h4><p>在<strong>FPS</strong>图表提供了在记录期间的帧速率的概述。一般来说，绿色条越高，帧率越高。</p>
<p><strong>FPS</strong>图表上方的红色条是一个警告，即帧速率降低到可能损害用户体验。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/fps-chart.svg" alt="FPS图表"><strong>图20</strong>。FPS图表，蓝色概述</p>
<h4 id="框架部分"><a href="#框架部分" class="headerlink" title="框架部分"></a>框架部分</h4><p>“ <strong>帧”</strong>部分将告诉您具体帧的花费多长时间。</p>
<p>将鼠标悬停在一个框架上以查看具有更多信息的工具提示。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/frames-section.png" alt="悬停在一个框架上"><strong>图21</strong>。悬停在一个框架上</p>
<p>单击一个框架可以在“ <strong>摘要</strong> ”选项卡中查看有关框架的更多信息 。DevTools以蓝色勾勒所选框。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/frame-summary.png" alt="在“摘要”选项卡中查看一个框架"><strong>图22</strong>。在“ <strong>摘要</strong> ”选项卡中 查看一个框架</p>
<h3 id="查看网络请求"><a href="#查看网络请求" class="headerlink" title="查看网络请求"></a>查看网络请求</h3><p>展开“ <strong>网络”</strong>部分以查看在录制期间发生的网络请求的瀑布。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/network-request.svg" alt="网络部分"><strong>图23</strong>。在<strong>网络</strong>部分，在蓝色轮廓</p>
<p>请求的颜色如下：</p>
<ul>
<li>HTML：蓝色</li>
<li>CSS：紫色</li>
<li>JS：黄色</li>
<li>图片：绿色</li>
</ul>
<p>在“ <strong>摘要</strong> ”选项卡中单击请求以查看有关信息的更多信息。例如，在图23中，<strong>“摘要</strong> ”选项卡显示有关在“ <strong>网络”</strong>部分中选择的蓝色请求的更多信息。</p>
<p>请求左上角的一个较深蓝色的方块意味着它是一个较高优先级的请求。浅蓝色方块意味着较低优先级。例如，在图23中，蓝色的选择的请求是较高优先级的，其上的绿色优先级较低。</p>
<p>在图24中，请求<code>www.google.com</code>由左侧的一行表示，中间的条形表示为黑色部分和浅色部分，右侧表示线条。图25显示了<strong>网络</strong>面板的“ <strong>定时</strong> ”选项卡中相同请求的相应表示。这两个表示如何映射到彼此：<em>**</em></p>
<ul>
<li>左边的一切都是一<code>Connection Start</code>组包含事件的事情。换句话说，这是以前的一切<code>Request Sent</code>，独家。</li>
<li>酒吧的灯光部分是<code>Request Sent</code>和<code>Waiting (TTFB)</code>。</li>
<li>酒吧的黑暗部分是<code>Content Download</code>。</li>
<li>正确的路线基本上是等待主线程的时间。这不在“ <strong>时间</strong> ”选项卡中显示。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/linebar.png" alt="www.google.com请求的线条表示"><strong>图24</strong>。<code>www.google.com</code>请求 的线条表示</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/timing.png" alt="网络部分"><strong>图25</strong>。请求 的<strong>Timing</strong>选项卡表示 <code>www.google.com</code></p>
<h3 id="查看内存指标"><a href="#查看内存指标" class="headerlink" title="查看内存指标"></a>查看内存指标</h3><p>启用<strong>内存</strong>复选框以查看上次录制中的内存指标。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/memory.svg" alt="内存复选框"><strong>图26</strong>。该<strong>内存</strong>复选框，在蓝色轮廓</p>
<p><strong>“开发工具</strong> ” 在<strong>“摘要</strong> ”选项卡上方显示新的“ <strong>内存”</strong>图表。<strong>NET</strong>图表下面还有一个新的图表，称为<strong>HEAP</strong>。的<strong>HEAP</strong>图表提供了相同的信息作为<strong>斯·海亚普</strong>中线路<strong>存储器</strong>图表。<strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/memory.png" alt="内存指标"><strong>图27</strong>。“ <strong>汇总</strong> ”选项卡 上方的内存指标</p>
<p>图表上的彩色线条映射到图表上方的彩色复选框。禁用复选框以从图表中隐藏该类别。</p>
<p>图表仅显示当前选择的录制区域。例如，在图27中，“ <strong>存储器”</strong>图表仅显示记录开始的内存使用情况，最多可达1000ms。</p>
<h3 id="查看记录部分的持续时间"><a href="#查看记录部分的持续时间" class="headerlink" title="查看记录部分的持续时间"></a>查看记录部分的持续时间</h3><p>在分析<strong>网络</strong>或<strong>主要部分</strong>时，有时您需要更准确地估计某些事件需要多长时间。按住Shift，单击并按住，然后向左或向右拖动以选择录制的一部分。在您选择的底部，DevTools显示该部分花费了多长时间。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/duration.png" alt="查看记录的一部分的持续时间"><strong>图28</strong>。将<code>488.53ms</code>在所选部分的底部戳指示多久那部分了</p>
<h3 id="查看截图"><a href="#查看截图" class="headerlink" title="查看截图"></a>查看截图</h3><p>请参阅在<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#screenshots" target="_blank" rel="external">录制时捕获屏幕截图，</a>以了解如何启用屏幕截图。</p>
<p>将鼠标悬停在“ <strong>概述”上</strong>，以查看在录制过程中该页面的显示方式。该<strong>概述</strong>是包含了部分<strong>CPU</strong>，<strong>FPS</strong>和<strong>NET</strong>图表。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/view-screenshot.png" alt="查看屏幕截图"><strong>图29</strong>。查看屏幕截图</p>
<p>您还可以通过单击<strong>框架</strong> 部分中的<strong>框架</strong>来查看屏幕截图。在“ <strong>摘要</strong> ”选项卡中，DevTools显示一个小版本的屏幕截图。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/frame-screenshot-summary.png" alt="在“摘要”选项卡中查看屏幕截图"><strong>图30</strong>。在“ <strong>框架”</strong>部分中单击<code>195.5ms</code>框架后，该 <strong>框架</strong>的屏幕截图将显示在“ <strong>摘要</strong> ”选项卡中</p>
<p>在“ <strong>摘要</strong> ”标签中单击缩略图以放大屏幕截图。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/frame-screenshot-zoom.png" alt="从“摘要”选项卡放大截图"><strong>图31</strong>。在“ <strong>摘要</strong> ”选项卡中单击缩略图后，DevTools将放大屏幕截图</p>
<h3 id="查看图层信息"><a href="#查看图层信息" class="headerlink" title="查看图层信息"></a>查看图层信息</h3><p>查看有关框架的高级图层信息：</p>
<ol>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint" target="_blank" rel="external">启用先进的油漆仪器</a>。</li>
<li>在“ <strong>帧”</strong>部分中选择一个帧。DevTools在“新建<strong>图层”</strong>选项卡中的“ <strong>事件日志</strong> ”选项卡旁显示有关其图层的信息。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/layers.png" alt="“图层”选项卡"><strong>图32</strong>。“ <strong>图层”</strong>选项卡</p>
<p>将鼠标悬停在图层上以在图中突出显示。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/layerhover.png" alt="突出显示一个图层"><strong>图33</strong>。突出显示层<strong>＃39</strong></p>
<p>移动图：</p>
<ul>
<li>点击<strong>平移模式</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/pan-mode.png" alt="平移模式">沿X轴和Y轴移动。</li>
<li>单击<strong>旋转模式</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/rotate-mode.png" alt="旋转模式">沿Z轴旋转。</li>
<li>单击<strong>重置变换</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/reset-transform.png" alt="重置变换">将图重置为其原始位置。</li>
</ul>
<h3 id="查看油漆分析仪"><a href="#查看油漆分析仪" class="headerlink" title="查看油漆分析仪"></a>查看油漆分析仪</h3><p>查看有关paint事件的高级信息：</p>
<ol>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#paint" target="_blank" rel="external">启用先进的油漆仪器</a>。</li>
<li>在<strong>主要</strong>部分选择一个<strong>油漆</strong>事件。<em>**</em></li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/paint-profiler.png" alt="“油漆分析器”选项卡"><strong>图34</strong>。“ <strong>油漆分析器</strong> ”选项卡</p>
<h2 id="使用“渲染”选项卡分析渲染性能"><a href="#使用“渲染”选项卡分析渲染性能" class="headerlink" title="使用“渲染”选项卡分析渲染性能"></a>使用“渲染”选项卡分析渲染性能</h2><p>使用“ <strong>渲染</strong> ”选项卡的功能可以帮助您可视化页面的渲染性能。</p>
<p>打开“ <strong>渲染</strong> ”选项卡：</p>
<ol>
<li>打开<a href="https://developers.google.com/web/tools/chrome-devtools/ui#command-menu" target="_blank" rel="external">命令菜单</a>。</li>
<li>开始输入<code>Rendering</code>并选择<code>Show Rendering</code>。DevTools显示DevTools窗口底部的“ <strong>渲染</strong> ”选项卡。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/rendering-tab.png" alt="“渲染”选项卡"><strong>图35</strong>。“ <strong>渲染</strong> ”选项卡</p>
<h3 id="使用FPS仪表实时查看每秒帧数"><a href="#使用FPS仪表实时查看每秒帧数" class="headerlink" title="使用FPS仪表实时查看每秒帧数"></a>使用FPS仪表实时查看每秒帧数</h3><p>在<strong>FPS米</strong>是出现在你的视口的右上角的叠加。当页面运行时，它提供FPS的实时估计。打开<strong>FPS仪表</strong>：</p>
<ol>
<li>打开“ <strong>渲染</strong> ”选项卡。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#rendering" target="_blank" rel="external">使用“渲染”选项卡分析渲染性能</a>。</li>
<li>启用<strong>FPS仪表</strong>复选框。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/fps-meter.png" alt="FPS仪表"><strong>图36</strong>。FPS仪表</p>
<h3 id="用油漆闪烁实时查看绘画事件"><a href="#用油漆闪烁实时查看绘画事件" class="headerlink" title="用油漆闪烁实时查看绘画事件"></a>用油漆闪烁实时查看绘画事件</h3><p>使用油漆闪烁获取页面上所有油漆事件的实时视图。每当页面的一部分被重新绘制时，DevTools会将该部分概括为绿色。</p>
<p>启用油漆闪烁：</p>
<ol>
<li>打开“ <strong>渲染</strong> ”选项卡。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#rendering" target="_blank" rel="external">使用“渲染”选项卡分析渲染性能</a>。</li>
<li>启用<strong>油漆闪烁</strong>复选框。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/paint-flashing.gif" alt="油漆闪烁"><strong>图37</strong>。<strong>油漆闪烁</strong></p>
<h3 id="查看层与图层边框的叠加"><a href="#查看层与图层边框的叠加" class="headerlink" title="查看层与图层边框的叠加"></a>查看层与图层边框的叠加</h3><p>使用“ <strong>图层边框</strong> ”查看页面顶部的图层边框和图块的叠加层。</p>
<p>启用图层边框：</p>
<ol>
<li>打开“ <strong>渲染</strong> ”选项卡。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#rendering" target="_blank" rel="external">使用“渲染”选项卡分析渲染性能</a>。</li>
<li>启用“ <strong>图层边框”</strong>复选框。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/layer-borders.png" alt="层边界"><strong>图38</strong>。<strong>层边界</strong></p>
<h3 id="实时查找滚动性能问题"><a href="#实时查找滚动性能问题" class="headerlink" title="实时查找滚动性能问题"></a>实时查找滚动性能问题</h3><p>使用滚动性能问题来标识具有与滚动相关的事件侦听器的页面的元素，这些元素可能会损害页面的性能。DevTools概述了潜在问题的元素。</p>
<p>查看滚动性能问题：</p>
<ol>
<li>打开“ <strong>渲染</strong> ”选项卡。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference#rendering" target="_blank" rel="external">使用“渲染”选项卡分析渲染性能</a>。</li>
<li>启用<strong>滚动性能问题</strong>复选框。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/scrolling-performance-issues.png" alt="滚动性能问题表明有一个包含可能会影响滚动性能的整个视口的鼠标滚轮事件侦听器"><strong>图39</strong>。<strong>滚动性能问题</strong>表明有一个<code>mousewheel</code>包含整个视口的事件监听器可能会影响滚动性能</p>
<h1 id="时间线事件参考"><a href="#时间线事件参考" class="headerlink" title="时间线事件参考"></a>时间线事件参考</h1><p>时间线事件模式可以显示记录时触发的所有事件。使用时间线事件参考可以详细了解每一个时间线事件类型。</p>
<h2 id="常见的时间线事件属性"><a href="#常见的时间线事件属性" class="headerlink" title="常见的时间线事件属性"></a>常见的时间线事件属性</h2><p>某些详细信息存在于所有类型的事件中，而一些仅适用于特定的事件类型。本部分列出了不同事件类型的通用属性。特定于特定事件类型的属性列在这些事件类型遵循的参考中。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>显示时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>Aggregated time</td>
<td>对于带<a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool#view-nested-events" target="_blank" rel="external">嵌套事件</a>的事件，每个类别的事件所用的时间。</td>
</tr>
<tr>
<td>Call Stack</td>
<td>对于带<a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool#view-nested-events" target="_blank" rel="external">子事件</a>的事件，每个类别的事件所用的时间。</td>
</tr>
<tr>
<td>CPU time</td>
<td>记录的事件所花费的 CPU 时间。</td>
</tr>
<tr>
<td>Details</td>
<td>有关事件的其他详细信息。</td>
</tr>
<tr>
<td>Duration (at time-stamp)</td>
<td>事件及其所有子事件完成所需的时间，时间戳是事件发生的时间（相对于记录开始的时间）。</td>
</tr>
<tr>
<td>Self time</td>
<td>事件（不包括任何子事件）花费的时间。</td>
</tr>
<tr>
<td>Used Heap Size</td>
<td>记录事件时应用使用的内存大小，以及自上次采样以来已使用堆大小的增减 (+/-) 变化。</td>
</tr>
</tbody>
</table>
<h2 id="Loading-事件"><a href="#Loading-事件" class="headerlink" title="Loading 事件"></a>Loading 事件</h2><p>本部分列出了属于加载类别的事件及其属性。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Parse HTML</td>
<td>Chrome 执行其 HTML 解析算法。</td>
</tr>
<tr>
<td>Finish Loading</td>
<td>网络请求已完成。</td>
</tr>
<tr>
<td>Receive Data</td>
<td>请求的数据已被接收。存在一个或多个 Receive Data 事件。</td>
</tr>
<tr>
<td>Receive Response</td>
<td>请求的初始 HTTP 响应。</td>
</tr>
<tr>
<td>Send Request</td>
<td>网络请求已被发送。</td>
</tr>
</tbody>
</table>
<h3 id="Loading-事件属性"><a href="#Loading-事件属性" class="headerlink" title="Loading 事件属性"></a>Loading 事件属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Resource</td>
<td>请求的资源的网址。</td>
</tr>
<tr>
<td>Preview</td>
<td>请求的资源的预览（仅图像）。</td>
</tr>
<tr>
<td>Request Method</td>
<td>用于请求的 HTTP 方法（例如，GET 或 POST）。</td>
</tr>
<tr>
<td>Status Code</td>
<td>HTTP 响应代码。</td>
</tr>
<tr>
<td>MIME Type</td>
<td>请求的资源的 MIME 类型。</td>
</tr>
<tr>
<td>Encoded Data Length</td>
<td>请求的资源的长度（以字节为单位）。</td>
</tr>
</tbody>
</table>
<h2 id="Scripting-事件"><a href="#Scripting-事件" class="headerlink" title="Scripting 事件"></a>Scripting 事件</h2><p>本部分列出了属于脚本类别的事件及其属性。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Animation Frame Fired</td>
<td>预定的动画帧被触发，其回调处理程序被调用。</td>
</tr>
<tr>
<td>Cancel Animation Frame</td>
<td>预定的动画帧被取消。</td>
</tr>
<tr>
<td>GC Event</td>
<td>发生垃圾回收。</td>
</tr>
<tr>
<td>DOMContentLoaded</td>
<td>浏览器触发 <a href="https://docs.webplatform.org/wiki/dom/events/DOMContentLoaded" target="_blank" rel="external">DOMContentLoaded</a>。当页面的所有 DOM 内容都已加载和解析时，将触发此事件。</td>
</tr>
<tr>
<td>Evaluate Script</td>
<td>脚本已被评估。</td>
</tr>
<tr>
<td>Event</td>
<td>JavaScript 事件（例如，“mousedown”或“key”）。</td>
</tr>
<tr>
<td>Function Call</td>
<td>发生顶级 JavaScript 函数调用（只有浏览器进入 JavaScript 引擎时才会出现）。</td>
</tr>
<tr>
<td>Install Timer</td>
<td>已使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval" target="_blank" rel="external">setInterval()</a> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout" target="_blank" rel="external">setTimeout()</a> 创建定时器。</td>
</tr>
<tr>
<td>Request Animation Frame</td>
<td><code>requestAnimationFrame()</code> 调用已预定一个新帧。</td>
</tr>
<tr>
<td>Remove Timer</td>
<td>之前创建的定时器已被清除。</td>
</tr>
<tr>
<td>Time</td>
<td>一个脚本调用了 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consoletimelabel" target="_blank" rel="external">console.time()</a></td>
</tr>
<tr>
<td>Time End</td>
<td>一个脚本调用了 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/console/console-reference#consoletimeendlabel" target="_blank" rel="external">console.timeEnd()</a></td>
</tr>
<tr>
<td>Timer Fired</td>
<td>使用 <code>setInterval()</code> 或 <code>setTimeout()</code> 创建的定时器已被触发。</td>
</tr>
<tr>
<td>XHR Ready State Change</td>
<td>XMLHTTPRequest 的就绪状态已发生变化。</td>
</tr>
<tr>
<td>XHR Load</td>
<td><code>XMLHTTPRequest</code> 已结束加载。</td>
</tr>
</tbody>
</table>
<h3 id="Scripting-事件属性"><a href="#Scripting-事件属性" class="headerlink" title="Scripting 事件属性"></a>Scripting 事件属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Timer ID</td>
<td>定时器 ID。</td>
</tr>
<tr>
<td>Timeout</td>
<td>定时器指定的超时。</td>
</tr>
<tr>
<td>Repeats</td>
<td>指定定时器是否重复的布尔值。</td>
</tr>
<tr>
<td>Function Call</td>
<td>已调用一个函数。</td>
</tr>
</tbody>
</table>
<h2 id="Rendering-事件"><a href="#Rendering-事件" class="headerlink" title="Rendering 事件"></a>Rendering 事件</h2><p>本部分列出了属于渲染类别的事件及其属性。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Invalidate layout</td>
<td>页面布局被 DOM 更改声明为无效。</td>
</tr>
<tr>
<td>Layout</td>
<td>页面布局已被执行。</td>
</tr>
<tr>
<td>Recalculate style</td>
<td>Chrome 重新计算了元素样式。</td>
</tr>
<tr>
<td>Scroll</td>
<td>嵌套视图的内容被滚动。</td>
</tr>
</tbody>
</table>
<h3 id="Rendering-事件属性"><a href="#Rendering-事件属性" class="headerlink" title="Rendering 事件属性"></a>Rendering 事件属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Layout invalidated</td>
<td>对于 Layout 记录，导致布局失效的代码的堆叠追踪。</td>
</tr>
<tr>
<td>Nodes that need layout</td>
<td>对于 Layout 记录，被标记为需要在重新布局启动前布局的节点的数量。正常情况下，这些代码是被开发者代码声明为无效的代码，以及向上追溯到重新布局根目录的路径。</td>
</tr>
<tr>
<td>Layout tree size</td>
<td>对于布局记录，重新布局根目录下节点（Chrome 启动重新布局的节点）的总数。</td>
</tr>
<tr>
<td>Layout scope</td>
<td>可能的值为“Partial”（重新布局边界是 DOM 的一部分）或“Whole document”。</td>
</tr>
<tr>
<td>Elements affected</td>
<td>对于 Recalculate 样式记录，受样式重新计算影响的元素的数量。</td>
</tr>
<tr>
<td>Styles invalidated</td>
<td>对于 Recalculate 样式记录，提供导致样式失效的代码的堆叠追踪。</td>
</tr>
</tbody>
</table>
<h2 id="Painting-事件"><a href="#Painting-事件" class="headerlink" title="Painting 事件"></a>Painting 事件</h2><p>本部分列出了属于打印类别的事件及其属性。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Composite Layers</td>
<td>Chrome 的渲染引擎合成了图像层。</td>
</tr>
<tr>
<td>Image Decode</td>
<td>一个图像资源被解码。</td>
</tr>
<tr>
<td>Image Resize</td>
<td>一个图像的大小相对于其原生尺寸发生了变化。</td>
</tr>
<tr>
<td>Paint</td>
<td>合成的图层被绘制到显示画面的一个区域。将鼠标悬停到 Paint 记录上会突出显示已被更新的显示画面区域。</td>
</tr>
</tbody>
</table>
<h3 id="Painting-事件属性"><a href="#Painting-事件属性" class="headerlink" title="Painting 事件属性"></a>Painting 事件属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Location</td>
<td>对于 Paint 事件，绘制矩形的 x 和 y 坐标。</td>
</tr>
<tr>
<td>Dimensions</td>
<td>对于 Paint 事件，已绘制区域的高度和宽度。</td>
</tr>
</tbody>
</table>
<h1 id="加速执行-JavaScript"><a href="#加速执行-JavaScript" class="headerlink" title="加速执行 JavaScript"></a>加速执行 JavaScript</h1><p>使用 Chrome DevTools CPU 分析器识别开销大的函数。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/cpu-profile.png" alt="CPU 分析"></p>
<h3 id="TL-DR-29"><a href="#TL-DR-29" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 CPU 分析器准确地记录调用了哪些函数和每个函数花费的时间。</li>
<li>将您的配置文件可视化为火焰图。</li>
</ul>
<h2 id="记录-CPU-分析"><a href="#记录-CPU-分析" class="headerlink" title="记录 CPU 分析"></a>记录 CPU 分析</h2><p>如果您在 JavaScript 中注意到出现卡顿，请收集 JavaScript CPU 分析。CPU 分析会显示执行时间花费在页面中哪些函数上。</p>
<ol>
<li>转到 DevTools 的 <strong>Profiles</strong> 面板。</li>
<li>选择 <strong>Collect JavaScript CPU Profile</strong> 单选按钮。</li>
<li>按 <strong>Start</strong>。</li>
<li>根据您要分析的内容不同，可以重新加载页面、与页面交互，或者只是让页面运行。</li>
<li>完成后，按 <strong>Stop</strong> 按钮。</li>
</ol>
<p>您也可以使用 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/command-line/command-line-reference#profilename-and-profileendname" target="_blank" rel="external">Command Line API</a> 对命令行产生的分析进行记录和分组。</p>
<h2 id="查看-CPU-分析"><a href="#查看-CPU-分析" class="headerlink" title="查看 CPU 分析"></a>查看 CPU 分析</h2><p>完成记录后，DevTools 会使用记录的数据自动填充 Profile 面板。</p>
<p>默认视图为 <strong>Heavy (Bottom Up)</strong>。此视图让您可以看到哪些函数对性能影响最大并能够检查这些函数的调用路径。</p>
<h3 id="更改排序顺序"><a href="#更改排序顺序" class="headerlink" title="更改排序顺序"></a>更改排序顺序</h3><p>要更改排序顺序，请点击 <strong>focus selected function</strong> 图标 (<img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/focus.png" alt="focus selected function 图标">) 旁的下拉菜单，然后选择下列选项中的一项：</p>
<p><strong>Chart</strong>。显示记录按时间顺序排列的火焰图。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/flamechart.png" alt="火焰图"></p>
<p><strong>Heavy (Bottom Up)</strong>。按照函数对性能的影响列出函数，让您可以检查函数的调用路径。 这是默认视图。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/heavy.png" alt="大型图表"></p>
<p><strong>Tree (Top Down)</strong>。显示调用结构的总体状况，从调用堆栈的顶端开始。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/tree.png" alt="树状图"></p>
<h3 id="排除函数"><a href="#排除函数" class="headerlink" title="排除函数"></a>排除函数</h3><p>要从您的 CPU 分析中排除函数，请点击以选择该函数，然后按 <strong>exclude selected function</strong> 图标 (<img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/exclude.png" alt="exclude function 图标">)。</p>
<p>已排除函数的调用方由排除函数的总时间管理。</p>
<p>点击 <strong>restore all functions</strong> 图标 (<img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/restore.png" alt="restore all functions 图标">) 可以将所有排除的函数恢复到记录中。</p>
<h2 id="以火焰图形式查看-CPU-分析"><a href="#以火焰图形式查看-CPU-分析" class="headerlink" title="以火焰图形式查看 CPU 分析"></a>以火焰图形式查看 CPU 分析</h2><p>火焰图视图直观地表示了一段时间内的 CPU 分析。</p>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution#record-profile" target="_blank" rel="external">记录 CPU 分析</a>后，<a href="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution#sort" target="_blank" rel="external">更改排序顺序</a>为 <strong>Chart</strong>，以便以火焰图形式查看记录。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/flamechart.png" alt="Flamechart 视图"></p>
<p>火焰图分为以下两部分：</p>
<ol>
<li><strong>概览</strong>。整个记录的鸟瞰图。 条的高度与调用堆栈的深度相对应。 所以，栏越高，调用堆栈越深。</li>
<li><strong>调用堆栈</strong>。这里可以详细深入地查看记录过程中调用的函数。 横轴是时间，纵轴是调用堆栈。 堆栈由上而下组织。所以，上面的函数调用它下面的函数，以此类推。</li>
</ol>
<p>函数的颜色随机，与其他面板中使用的颜色无关。 不过，函数的颜色在调用过程中始终保持一致，以便您了解执行的模式。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/annotated-cpu-flame.png" alt="带标注的火焰图"></p>
<p>高调用堆栈不一定很重要，只是表示调用了大量的函数。 但宽条表示调用需要很长时间完成。 这些需要优化。</p>
<h3 id="在记录的特定部分上放大"><a href="#在记录的特定部分上放大" class="headerlink" title="在记录的特定部分上放大"></a>在记录的特定部分上放大</h3><p>在概览中点击、按住并左右拖动鼠标，可放大调用堆栈的特定部分。 缩放后，调用堆栈会自动显示您选定的记录部分。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/benchmark-zoom.png" alt="缩放过的火焰图"></p>
<h3 id="查看函数详情"><a href="#查看函数详情" class="headerlink" title="查看函数详情"></a>查看函数详情</h3><p>点击函数可在 <strong>Sources</strong> 面板中查看其定义。</p>
<p>将鼠标悬停在函数上可显示其名称和计时数据。提供的信息如下：</p>
<ul>
<li><strong>Name</strong>。函数的名称。</li>
<li><strong>Self time</strong>。完成函数当前的调用所需的时间，仅包含函数本身的声明，不包含函数调用的任何函数。</li>
<li><strong>Total time</strong>。完成此函数和其调用的任何函数当前的调用所需的时间。</li>
<li><strong>URL</strong>。形式为 <code>file.js:100</code> 的函数定义的位置，其中 <code>file.js</code> 是定义函数的文件名称，<code>100</code> 是定义的行号。</li>
<li><strong>Aggregated self time</strong>。记录中函数所有调用的总时间，不包含此函数调用的函数。</li>
<li><strong>Aggregated total time</strong>。函数所有调用的总时间，不包含此函数调用的函数。</li>
<li><strong>Not optimized</strong>。如果分析器已检测出函数存在潜在的优化，会在此处列出。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/details.png" alt="在火焰图中查看函数详情"></p>
<h1 id="如何使用-Timeline-工具"><a href="#如何使用-Timeline-工具" class="headerlink" title="如何使用 Timeline 工具"></a>如何使用 Timeline 工具</h1><p>使用 Chrome DevTools 的 <em>Timeline</em> 面板可以记录和分析您的应用在运行时的所有活动。 这里是开始调查应用中可觉察性能问题的最佳位置。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/timeline-panel.png" alt="Timeline 工具"></p>
<h3 id="TL-DR-30"><a href="#TL-DR-30" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>执行 Timeline 记录，分析页面加载或用户交互后发生的每个事件。</li>
<li>在 Overview 窗格中查看 FPS、CPU 和网络请求。</li>
<li>点击火焰图中的事件以查看与其相关的详细信息。</li>
<li>放大显示一部分记录以简化分析。</li>
</ul>
<h2 id="Timeline-面板概览"><a href="#Timeline-面板概览" class="headerlink" title="Timeline 面板概览"></a>Timeline 面板概览</h2><p>Timeline 面板包含以下四个窗格：</p>
<ol>
<li><strong>Controls</strong>。开始记录，停止记录和配置记录期间捕获的信息。</li>
<li><strong>Overview</strong>。 页面性能的高级汇总。更多内容请参见下文。</li>
<li><strong>火焰图</strong>。 CPU 堆叠追踪的可视化。</li>
</ol>
<p>您可以在<strong>火焰图</strong>上看到一到三条垂直的虚线。蓝线代表 <code>DOMContentLoaded</code> 事件。 绿线代表首次绘制的时间。 红线代表 <code>load</code> 事件。</p>
<ol>
<li><strong>Details</strong>。选择事件后，此窗格会显示与该事件有关的更多信息。 未选择事件时，此窗格会显示选定时间范围的相关信息。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/timeline-annotated.png" alt="带标注的 Timeline 面板"></p>
<h3 id="Overview-窗格"><a href="#Overview-窗格" class="headerlink" title="Overview 窗格"></a>Overview 窗格</h3><p><strong>Overview</strong> 窗格包含以下三个图表：</p>
<ol>
<li><strong>FPS</strong>。每秒帧数。绿色竖线越高，FPS 越高。 FPS 图表上的红色块表示长时间帧，很可能会出现<a href="https://developers.google.com/web/fundamentals/performance/rendering/" target="_blank" rel="external">卡顿</a>。</li>
<li><strong>CPU</strong>。 CPU 资源。此<a href="https://en.wikipedia.org/wiki/Area_chart" target="_blank" rel="external">面积图</a>指示消耗 CPU 资源的事件类型。</li>
<li><strong>NET</strong>。每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间）。</li>
</ol>
<p>深色部分表示传输时间（下载第一个和最后一个字节之间的时间）。</p>
<p>横杠按照以下方式进行彩色编码：</p>
<ul>
<li>HTML 文件为<strong>蓝色</strong>。</li>
<li>脚本为<strong>黄色</strong>。</li>
<li>样式表为<strong>紫色</strong>。</li>
<li>媒体文件为<strong>绿色</strong>。</li>
<li>其他资源为<strong>灰色</strong>。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/overview-annotated.jpg" alt="Overview 窗格，带标注"></p>
<h2 id="做记录"><a href="#做记录" class="headerlink" title="做记录"></a>做记录</h2><p>要记录<em>页面加载</em>，请打开 <strong>Timeline</strong> 面板，打开想要记录的页面，然后重新加载页面。 <strong>Timeline</strong> 面板会自动记录页面重新加载。</p>
<p>要记录<em>页面交互</em>，请打开 <strong>Timeline</strong> 面板，然后按 <strong>Record</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/record-off.png" alt="Record 按钮">) 或者键入键盘快捷键 Cmd+E (Mac) 或 Ctrl+E(Windows / Linux)，开始记录。记录时，<strong>Record</strong> 按钮会变成红色。执行页面交互，然后按 <strong>Record</strong> 按钮或再次键入键盘快捷键停止记录。</p>
<p>完成记录后，DevTools 会猜测哪一部分记录与您最相关，并自动缩放到那一个部分。</p>
<h3 id="记录提示"><a href="#记录提示" class="headerlink" title="记录提示"></a>记录提示</h3><ul>
<li><strong>尽可能保持记录简短</strong>。简短的记录通常会让分析更容易。</li>
<li><strong>避免不必要的操作</strong>。避免与您想要记录和分析的活动无关联的操作（鼠标点击、网络加载，等等）。例如，如果您想要记录点击 Login 按钮后发生的事件，请不要滚动页面、加载图像，等等。</li>
<li><strong>停用浏览器缓存</strong>。记录网络操作时，最好从 DevTools 的 Settings 面板或 <a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/network-conditions#network-conditions" target="_blank" rel="external"><strong>Network conditions</strong></a> 抽屉式导航栏停用浏览器的缓存。</li>
<li><strong>停用扩展程序</strong>。Chrome 扩展程序会给应用的 Timeline 记录增加不相关的噪声。 以<a href="https://support.google.com/chrome/answer/95464" target="_blank" rel="external">隐身模式</a>打开 Chrome 窗口或者创建新的 <a href="https://support.google.com/chrome/answer/142059" target="_blank" rel="external">Chrome 用户个人资料</a>，确保您的环境中没有扩展程序。</li>
</ul>
<h2 id="查看记录详细信息"><a href="#查看记录详细信息" class="headerlink" title="查看记录详细信息"></a>查看记录详细信息</h2><p>在<strong>火焰图</strong>中选择事件时，<strong>Details</strong> 窗格会显示与事件相关的其他信息。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/details-pane.png" alt="Details 窗格"></p>
<p>一些标签（如 <strong>Summary</strong>）适用于所有事件类型。其他标签则仅对特定事件类型可用。 请参阅 <a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/performance-reference" target="_blank" rel="external">Timeline 事件参考</a>，了解与每个记录类型相关的详细信息。</p>
<h2 id="在记录期间捕捉屏幕截图"><a href="#在记录期间捕捉屏幕截图" class="headerlink" title="在记录期间捕捉屏幕截图"></a>在记录期间捕捉屏幕截图</h2><p><strong>Timeline</strong> 面板可以在页面加载时捕捉屏幕截图。此功能称为<strong>幻灯片</strong>。</p>
<p>在您开始记录之前，请在 <strong>Controls</strong> 窗格中启用 <strong>Screenshots</strong> 复选框，以便捕捉记录的屏幕截图。 屏幕截图显示在 <strong>Overview</strong> 窗格下方。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/timeline-filmstrip.png" alt="带幻灯片的 Timeline 记录"></p>
<p>将您的鼠标悬停在 <strong>Screenshots</strong> 或 <strong>Overview</strong> 窗格上可以查看记录中该点的缩放屏幕截图。 左右移动鼠标可以模拟记录的动画。</p>
<h2 id="分析-JavaScript"><a href="#分析-JavaScript" class="headerlink" title="分析 JavaScript"></a>分析 JavaScript</h2><p>开始记录前，请启用 <strong>JS Profile</strong> 复选框，以便在您的时间线记录中捕捉 JavaScript 堆栈。 启用 JS 分析器后，您的火焰图会显示调用的每个 JavaScript 函数。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/js-profile.png" alt="启用 JS 分析的火焰图"></p>
<h2 id="分析绘制"><a href="#分析绘制" class="headerlink" title="分析绘制"></a>分析绘制</h2><p>开始记录前，请启用 <strong>Paint</strong> 复选框，以便获取有关 <strong>Paint</strong> 事件的更多数据分析。 启用绘制分析并点击 <strong>Paint</strong> 事件后，新 <strong>Paint Profiler</strong> 标签会出现在 <strong>Details</strong> 窗格中，后者显示了许多与事件相关的更精细信息。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/paint-profiler.png" alt="paint profiler"></p>
<h3 id="渲染设置"><a href="#渲染设置" class="headerlink" title="渲染设置"></a>渲染设置</h3><p>打开主 DevTools 菜单，然后选择<strong>More tools</strong> &gt; <strong>Rendering settings</strong> 访问渲染设置，这些设置在调试绘制问题时非常有用。渲染设置会作为一个标签显示在 <strong>Console</strong> 抽屉式导航栏（如果隐藏，请按 esc 显示抽屉式导航栏）旁边。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/rendering-settings.png" alt="渲染设置"></p>
<h2 id="搜索记录"><a href="#搜索记录" class="headerlink" title="搜索记录"></a>搜索记录</h2><p>查看事件时，您可能希望侧重于一种类型的事件。例如，您可能需要查看每个 <code>Parse HTML</code> 事件的详细信息。</p>
<p>在 <strong>Timeline</strong> 处于焦点时，按 Cmd+F (Mac) 或 Ctrl+F (Windows / Linux) 以打开一个查找工具栏。键入您想要检查的事件类型的名称，如 <code>Event</code>。</p>
<p>工具栏仅适用于当前选定的时间范围。选定时间范围以外的任何事件都不会包含在结果中。</p>
<p>利用上下箭头，您可以按照时间顺序在结果中移动。所以，第一个结果表示选定时间范围内最早的事件，最后一个结果表示最后的事件。每次按向上或向下箭头会选择一个新事件，因此，您可以在 <strong>Details</strong> 窗格中查看其详细信息。按向上和向下箭头等同于在<strong>火焰图</strong>中点击事件。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/find-toolbar.png" alt="查找工具栏"></p>
<h2 id="在-Timeline-部分上放大"><a href="#在-Timeline-部分上放大" class="headerlink" title="在 Timeline 部分上放大"></a>在 Timeline 部分上放大</h2><p>您可以放大显示一部分记录，以便简化分析。使用 <strong>Overview</strong> 窗格可以放大显示一部分记录。 放大后，<strong>火焰图</strong>会自动缩放以匹配同一部分。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/zoom.png" alt="放大 Timeline 记录的一部分"></p>
<p>要在 Timeline 部分上放大，请执行以下操作：</p>
<ul>
<li>在 <strong>Overview</strong> 窗格中，使用鼠标拖出 Timeline 选择。</li>
<li>在标尺区域调整灰色滑块。</li>
</ul>
<p>选择部分后，可以使用 W、A、S 和 D 键调整您的选择。 W 和 S 分别代表放大和缩小。 A 和 D 分别代表左移和右移。</p>
<h2 id="保存和打开记录"><a href="#保存和打开记录" class="headerlink" title="保存和打开记录"></a>保存和打开记录</h2><p>您可以在 <strong>Overview</strong> 或<strong>火焰图</strong>窗格中点击右键并选择相关选项，保存和打开记录。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/imgs/save-open.png" alt="保存和打开记录"></p>
<h1 id="诊断强制同步布局"><a href="#诊断强制同步布局" class="headerlink" title="诊断强制同步布局"></a>诊断强制同步布局</h1><p>了解如何使用 DevTools 诊断强制同步布局。</p>
<p>在本指南中，您将学习如何通过确定和解决实时演示中的问题调试<a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid-forced-synchronous-layouts" target="_blank" rel="external">强制同步布局</a>。 演示使用 <a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution#use-requestanimationframe-for-visual-changes" target="_blank" rel="external"><code>requestAnimationFrame()</code></a>对图像进行动画处理，这是处理基于帧的动画的推荐方法。不过，动画中会有大量的卡顿。 您的目标是确定卡顿的原因并解决问题，以便演示以流畅的 60 FPS 运行。</p>
<h2 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h2><p>首先，您需要捕获数据，以便准确了解页面运行时会发生什么。</p>
<ol>
<li>打开<a href="https://googlesamples.github.io/web-fundamentals/tools/chrome-devtools/rendering-tools/forcedsync.html" target="_blank" rel="external">演示</a>。</li>
<li>打开 DevTools 的 <strong>Timeline</strong> 面板。</li>
<li>启用 <strong>JS Profile</strong> 选项。稍后分析火焰图时，您可以通过此选项准确地查看调用了哪些函数。</li>
<li>点击页面上的 <strong>Start</strong> 启动动画。</li>
<li>点击 Timeline 面板上的 <strong>Record</strong> 按钮启动 Timeline 记录。</li>
<li>等待两秒。</li>
<li>再次点击 <strong>Record</strong> 按钮停止记录。</li>
</ol>
<p>完成记录后，您在 Timeline 面板上应看到如下所示的内容。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/demo-recording.png" alt="卡顿演示的 Timeline 记录"></p>
<h2 id="确定问题"><a href="#确定问题" class="headerlink" title="确定问题"></a>确定问题</h2><p>现在，您已获取数据，可以着手弄清楚它们了。</p>
<p>您可以在 Timeline 记录的 <strong>Summary</strong> 窗格中一眼看出浏览器在渲染上花费的时间最多。 一般来说，如果您可以<a href="https://developers.google.com/web/tools/chrome-devtools/profile/rendering-tools/analyze-runtime#layout" target="_blank" rel="external">优化页面布局操作</a>，就可以减少花费在渲染上的时间。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/summary.png" alt="Timeline 摘要"></p>
<p>现在，请将注意力转移到 <strong>Overview</strong> 窗格下方的粉色条形上。 这些表示帧。将鼠标悬停在上面可以查看与帧相关的更多信息。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/long-frame.png" alt="长时间帧"></p>
<p>完成这些帧需要较长的时间。要使动画流畅，您需要达到 60 FPS。</p>
<p>现在，可以准确地诊断哪里出错了。使用您的鼠标，在调用堆栈上<a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool#zoom" target="_blank" rel="external">放大</a>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/zoom.png" alt="缩放的 Timeline 记录"></p>
<p>堆栈的顶端是 <code>Animation Frame Fired</code> 事件。只要触发此事件，就会调用传递至 <code>requestAnimationFrame()</code> 的函数。在 <code>Animation Frame Fired</code> 下方，您会看到 <code>Function Call</code>，在它的下方，您会看到 <code>update</code>。您可以推断名为 <code>update()</code> 的方法是 <code>requestAnimationFrame()</code> 的回调。</p>
<p>注：这是您之前启用 <strong>JS Profile</strong> 选项的作用。 如果停用，您就会看到 <code>Function Call</code>，后面是所有紫色小事件（稍后介绍），不包含具体调用了哪些函数的详情。</p>
<p>现在，请将注意力转移到 <code>update</code> 事件下方的所有紫色小事件上。 许多这些事件的顶部为红色。那是警告标志。 将鼠标悬停在这些事件上方，您会看到 DevTools 在警告您页面可能会被强制自动重排。 强制自动重排是强制同步布局的另一种说法。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/layout-hover.png" alt="鼠标指针悬停在 layout 事件上"></p>
<p>现在，可以看一下导致全部强制同步布局的函数。 点击其中一个布局事件可以选择它。现在，在 Summary 窗格中，您会看到与此事件有关的详细信息。 点击 <strong>Layout Forced</strong> (<code>update @ forcedsync.html:457</code>) 下面的链接跳转到函数定义。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/jump.png" alt="跳转到函数定义"></p>
<p>现在，您在 <strong>Sources</strong> 面板中应看到函数定义。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/definition.png" alt="Sources 面板中的函数定义"></p>
<p><code>update()</code> 函数是 <code>requestAnimationCallback()</code> 的回调处理程序。 处理程序会根据每个图像的 <code>offsetTop</code> 值计算其 <code>left</code> 属性。 这将强制浏览器立即执行新布局，以便确保其提供正确的值。在每个动画帧期间强制布局是导致页面上出现动画卡顿的原因。</p>
<p>现在，您已经确定了问题，可以尝试在 DevTools 中直接解决问题。</p>
<h2 id="在-DevTools-中应用修复"><a href="#在-DevTools-中应用修复" class="headerlink" title="在 DevTools 中应用修复"></a>在 DevTools 中应用修复</h2><p>此脚本内已嵌入 HTML，因此，您无法通过 <strong>Sources</strong> 面板对其进行编辑（不过，可以在 Sources 面板中编辑格式为 <code>*.js</code>的脚本）。</p>
<p>不过，要测试您的更改，可以在 Console 中重新定义函数。从 HTML 文件复制函数定义，并将其粘贴到 DevTools 的 Console 中。删除使用 <code>offsetTop</code> 的语句并取消注释其下面的语句。 完成后，按 <code>Enter</code>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/redefinition.png" alt="重新定义有问题的函数"></p>
<p>重启动画。您可以直观地验证现在顺畅多了。</p>
<h2 id="使用另一个记录验证"><a href="#使用另一个记录验证" class="headerlink" title="使用另一个记录验证"></a>使用另一个记录验证</h2><p>最好使用另一个记录来验证动画确实比之前更快且性能更好。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/rendering-tools/imgs/after.png" alt="优化后的 Timeline 记录"></p>
<p>效果好多了。</p>
<h1 id="开始分析Chrome-DevTools中的网络性能"><a href="#开始分析Chrome-DevTools中的网络性能" class="headerlink" title="开始分析Chrome DevTools中的网络性能"></a>开始分析Chrome DevTools中的网络性能</h1><p>了解如何使用Chrome DevTools网络面板了解页面在逐步交互式教程中缓慢加载的原因。</p>
<h2 id="步骤1：设置DevTools"><a href="#步骤1：设置DevTools" class="headerlink" title="步骤1：设置DevTools"></a>步骤1：设置DevTools</h2><p>假设您正在从移动用户那里收到您网站上特定页面缓慢的报告。你的工作是使页面快速。</p>
<ol>
<li><p>单击<strong>打开缓慢页面</strong>。该页面将在新选项卡中打开。</p>
<p><a href="https://googlechrome.github.io/devtools-samples/network/gs/v1.html" target="_blank" rel="external">打开慢页</a></p>
</li>
<li><p>当页面对焦时，请按 Command+ Option+ I（Mac）或 Control+ Shift+ I（Windows，Linux）打开页面上的DevTools。</p>
</li>
<li><p>在DevTools中，单击<strong>网络</strong>选项卡。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-network-panel.png" alt="Chrome DevTools网络面板在您要诊断的缓慢页面上打开。"><strong>图1</strong>。Chrome DevTools网络面板在您要诊断的缓慢页面旁边打开。</p>
<p>​</p>
<p>​</p>
<p><strong>注意：</strong>对于其余的屏幕截图，DevTools被拆除<a href="https://developers.google.com/web/tools/chrome-devtools/ui#placement" target="_blank" rel="external"> 到一个单独的窗口</a>，以便您可以更好地看到它的内容。</p>
<p>​</p>
</li>
<li><p>启用<strong>捕获屏幕截图</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/capture-screenshots.png" alt="捕捉截图">，启用后会变成蓝色。DevTools在页面加载期间捕获截图。</p>
</li>
</ol>
<h2 id="步骤2：模拟移动用户的体验"><a href="#步骤2：模拟移动用户的体验" class="headerlink" title="步骤2：模拟移动用户的体验"></a>步骤2：模拟移动用户的体验</h2><p>在笔记本电脑或桌面上测试网络性能可能会欺骗。您的互联网连接比移动用户快得多，您的浏览器缓存以前访问的资源。</p>
<ol>
<li>选中<strong>禁用高速缓存</strong>复选框。启用此复选框后，DevTools不会从缓存中提供任何资源。这更准确地模拟了用户在查看您的页面时遇到的首次用户体验。</li>
<li>从当前说<strong>没有限制</strong>的下拉菜单中，选择 <strong>Regular 2G</strong>。DevTools控制网络连接，以模拟正常的2G体验。这就是移动用户如何在连接不良的地方体验您的网站。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-setup.svg" alt="Chrome DevTools网络面板在设置屏幕截图，缓存禁用和限制之后。"><strong>图2</strong>。Chrome DevTools网络面板设置为模拟移动用户的体验。截图，缓存禁用和限制分别以蓝色概述，从左到右。</p>
<p>这是一个最坏的情况。如果您可以在此设置下快速加载页面，那么所有用户都将快速上手！</p>
<h2 id="步骤3：分析请求"><a href="#步骤3：分析请求" class="headerlink" title="步骤3：分析请求"></a>步骤3：分析请求</h2><p>找出通过重新加载页面并分析进入的请求来使页面变慢的内容。</p>
<h3 id="部分A：查找渲染阻止脚本"><a href="#部分A：查找渲染阻止脚本" class="headerlink" title="部分A：查找渲染阻止脚本"></a>部分A：查找渲染阻止脚本</h3><p>当浏览器遇到<code>&lt;script&gt;</code>标签时，它必须暂停渲染并立即执行该脚本。查找页面加载不需要的脚本，并标记它们异步或延迟其执行以加快加载时间。</p>
<ol>
<li><p>按Command+ R（Mac）或 Control+ R（Windows，Linux）重新加载页面。在良好的Wi-Fi连接上，该页面需要10秒以上才能完整加载。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-post-load.png" alt="Chrome DevTools网络面板，重新加载页面后。"><strong>图3</strong>。Chrome DevTools网络面板，重新加载页面后。</p>
<p>​</p>
</li>
<li><p>请注意值<a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded" target="_blank" rel="external"><code>DOMContentLoaded</code></a>在<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#summary" target="_blank" rel="external">摘要窗格</a>，在网络面板的底部。您应该看到至少4秒的值。当你看到这个事件像这样发火时，请注意脚本，这些脚本会拖延主文档的加载和解析。</p>
</li>
<li><p>单击<strong>main.js</strong>进一步调查该请求。DevTools显示一组新的选项卡，提供有关此请求的更多信息。</p>
</li>
<li><p>单击<strong>预览</strong>选项卡查看请求的源代码。您可以看到脚本挂起4000ms。通过使用<code>async</code>属性标记该脚本并将其移动到文档的底部，<code>&lt;body&gt;</code>可以加载该页面，而无需等待该脚本。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-preview.png" alt="在“预览”窗格中查看main.js的源代码。"><strong>图4</strong>。<code>main.js</code>在预览窗格中查看源代码。</p>
<p>​</p>
</li>
</ol>
<p>请参阅<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript#parser_blocking_versus_asynchronous_javascript" target="_blank" rel="external">解析器阻塞与异步JavaScript</a>以了解有关渲染阻止脚本的更多信息。</p>
<h3 id="B部分：查找大量请求"><a href="#B部分：查找大量请求" class="headerlink" title="B部分：查找大量请求"></a>B部分：查找大量请求</h3><p>当页面加载时，您是否注意到DevTools标志需要很长时间才能加载？它不阻止负载，但它使页面<em>看起来</em> 很慢。页面<em>显示</em>速度快时，用户喜欢它。</p>
<ol>
<li><p>单击<strong>关闭</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/close.png" alt="关">，以便您可以再次看到“ <a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#requests" target="_blank" rel="external"><strong>请求”窗格</strong></a>。</p>
</li>
<li><p>双击左上方的屏幕截图。</p>
</li>
<li><p>按右箭头键扫描屏幕截图。屏幕截图下方的时间表示屏幕截图被拍摄的时间。屏幕截图需要几秒钟才能加载。这意味着文件可能太大了。</p>
</li>
<li><p>点击屏幕截图以外的任何位置将其最小化。</p>
</li>
<li><p>悬停在<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#waterfall" target="_blank" rel="external">瀑布</a>上的<code>logo-1024px.png</code> 请求。该请求花费大部分时间下载图像。这证实图像太大了。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-waterfall.png" alt="瀑布为logo-1024px.png。"><strong>图5</strong>。瀑布为<code>logo-1024px.png</code>。</p>
<p>​</p>
</li>
</ol>
<h2 id="步骤4：验证更新页面上的修补程序"><a href="#步骤4：验证更新页面上的修补程序" class="headerlink" title="步骤4：验证更新页面上的修补程序"></a>步骤4：验证更新页面上的修补程序</h2><p>你刚刚完成 假设您已经对该页面进行了两次更改：</p>
<ul>
<li>您将脚本移动到底部，并将<code>&lt;body&gt;</code>其标记<code>async</code> 为防止其阻止页面加载。</li>
<li>您将徽标转换为SVG以减小其大小。</li>
</ul>
<p>剩下的就是测试更新的页面，以验证您的修复确实使页面加载速度更快。</p>
<ol>
<li><p>单击<strong>打开快速页面</strong>。固定页面将在新选项卡中打开。</p>
<p><a href="https://googlechrome.github.io/devtools-samples/network/gs/v2.html" target="_blank" rel="external">打开快速页面</a></p>
</li>
<li><p>设置DevTools与以前一样。屏幕截图和缓存禁用应该打开，网络限制应该设置为<strong>Regular 2G</strong>。</p>
</li>
<li><p>重新加载页面。页面加载速度更快。</p>
<p>​</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/get-started-post-fix.png" alt="在应用修补程序后，记录页面的加载。"><strong>图6</strong>。在应用修补程序后，记录页面的加载。该页面大约需要10秒才能完美显现。现在只需要大约1秒钟。</p>
<p>​</p>
</li>
</ol>
<p><strong>注意</strong>：虽然页面加载速度更快，但仍然不可用约5秒钟。这是因为它仍然运行挂起页面主线程的脚本。</p>
<h2 id="下一步-1"><a href="#下一步-1" class="headerlink" title="下一步"></a>下一步</h2><p>做得好。您现在是Chrome DevTools网络专家的真正专家。好吧，也许不是专家。你确实有一个很好的技能和知识基础。</p>
<ul>
<li>请参阅<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path" target="_blank" rel="external">关键渲染路径</a>，以了解有关避雷网页加载的理论的更多信息。</li>
<li>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/issues" target="_blank" rel="external">网络问题指南</a>，了解如何发现更多网络问题。</li>
<li>有关<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference" target="_blank" rel="external">网络面板功能</a>的全面列表，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference" target="_blank" rel="external">网络面板参考</a>。</li>
</ul>
<h1 id="网络问题指南"><a href="#网络问题指南" class="headerlink" title="网络问题指南"></a>网络问题指南</h1><p>指南介绍如何在Chrome DevTools的“网络”面板中检测网络问题或优化机会。</p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance" target="_blank" rel="external">入门</a>，了解“网络”面板的基础知识。</p>
<h2 id="排队或停滞的请求"><a href="#排队或停滞的请求" class="headerlink" title="排队或停滞的请求"></a>排队或停滞的请求</h2><p><strong>症状</strong></p>
<p>六个请求正在同时下载。之后，一系列请求排队或停滞。前六个请求中的一个完成后，队列中的一个请求开始。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/stalled.png" alt="“网络”面板中排队或停顿的系列的示例。"><strong>图1</strong>。“网络”面板中排队或停播的一系列请求的示例。在<strong>瀑布中</strong>，您可以看到前六个请求同时<code>logo-1024px.png</code>启动。随后的请求停止，直到原来的六个完成。</p>
<p><strong>原因</strong></p>
<p>单个域上的请求数量太多。在HTTP / 1.0或HTTP / 1.1连接上，Chrome每个主机最多允许六个同时TCP连接。</p>
<p><strong>修复</strong></p>
<ul>
<li>如果您必须使用HTTP / 1.0或HTTP / 1.1，请执行域分片。</li>
<li>使用HTTP / 2。不要使用HTTP / 2的域分片。</li>
<li>删除或推迟不必要的请求，以便关键请求可以提前下载。</li>
</ul>
<h2 id="慢时间到第一个字节（TTFB）"><a href="#慢时间到第一个字节（TTFB）" class="headerlink" title="慢时间到第一个字节（TTFB）"></a>慢时间到第一个字节（TTFB）</h2><p><strong>症状</strong></p>
<p>请求花费很长时间等待从服务器接收第一个字节。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/slow-ttfb.png" alt="具有慢时间到第一个字节的请求的示例。"><strong>图2</strong>。具有慢时间到第一个字节的请求的示例。在长长的绿条<strong>瀑布</strong>表明 <code>wait</code>请求等待很长的时间。</p>
<p><strong>原因</strong></p>
<ul>
<li>客户端和服务器之间的连接速度很慢。</li>
<li>服务器响应缓慢。在本地托管服务器以确定连接或服务器是否缓慢。如果在本地服务时仍然有一个缓慢的TTFB，则服务器速度很慢。</li>
</ul>
<p><strong>修复</strong></p>
<ul>
<li>如果连接速度较慢，请考虑在CDN上托管您的内容或更改托管服务提供商。</li>
<li>如果服务器速度较慢，请考虑优化数据库查询，实现缓存或修改服务器配置。</li>
</ul>
<h2 id="内容下载缓慢"><a href="#内容下载缓慢" class="headerlink" title="内容下载缓慢"></a>内容下载缓慢</h2><p><strong>症状</strong></p>
<p>请求需要很长时间才能下载。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/slow-content-download.png" alt="一个需要很长时间下载的请求的例子。"><strong>图3</strong>。一个需要很长时间下载的请求的例子。<strong>瀑布</strong>旁边 的长条蓝色的酒吧<code>elements-panel.png</code>意味着需要很长时间才能下载。</p>
<p><strong>原因</strong></p>
<ul>
<li>客户端和服务器之间的连接速度很慢。</li>
<li>正在下载大量内容。</li>
</ul>
<p><strong>修复</strong></p>
<ul>
<li>考虑在CDN上托管您的内容或更改托管服务提供商。</li>
<li>通过优化您的请求发送较少的字节。</li>
</ul>
<h2 id="贡献知识"><a href="#贡献知识" class="headerlink" title="贡献知识"></a>贡献知识</h2><p>有一个网络问题应该添加到本指南？</p>
<ul>
<li>发送推文。</li>
<li>通过电子邮件发送邮件列表线程 <code>google-chrome-developer-tools@googlegroups.com</code>。</li>
<li>在docs repo上<a href="https://github.com/google/WebFundamentals/issues/new?title=[DevTools%20Network%20Issues%20Guide%20Suggestion]" target="_blank" rel="external">打开一个问题</a>。</li>
</ul>
<h1 id="网络分析参考"><a href="#网络分析参考" class="headerlink" title="网络分析参考"></a>网络分析参考</h1><p>在Chrome DevTools网络分析功能的全面参考中，探索分析页面加载方式的新方法。</p>
<p><strong>注意：</strong>此参考基于Chrome 58.如果您使用其他版本的Chrome，则DevTools的UI和功能可能不同。检查 <code>chrome://help</code>您正在运行的Chrome版本。</p>
<h2 id="记录网络请求"><a href="#记录网络请求" class="headerlink" title="记录网络请求"></a>记录网络请求</h2><p>默认情况下，只要DevTools打开，DevTools会记录“网络”面板中的所有网络请求。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/network.png" alt="网络面板。"><strong>图1</strong>。网络面板</p>
<h3 id="停止录制网络请求"><a href="#停止录制网络请求" class="headerlink" title="停止录制网络请求"></a>停止录制网络请求</h3><p>要停止录制请求：</p>
<ul>
<li>单击<strong>停止</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/record-on.png" alt="停止录制网络日志">在网络面板上<strong>记录网络日志</strong>。它变为灰色，表示DevTools不再记录请求。</li>
<li>当网络面板对焦时，请按Command+ E（Mac）或 Control+ E（Windows，Linux）。</li>
</ul>
<h3 id="清除请求"><a href="#清除请求" class="headerlink" title="清除请求"></a>清除请求</h3><p>单击“网络”面板上的“ <strong>清除</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/clear-requests.png" alt="明确"> ”以清除“请求”表中的所有请求。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/clear.svg" alt="清除按钮。"><strong>图2</strong>。清晰，概述为蓝色</p>
<h3 id="在页面加载中保存请求"><a href="#在页面加载中保存请求" class="headerlink" title="在页面加载中保存请求"></a>在页面加载中保存请求</h3><p>要在页面加载中保存请求，请选中“网络”面板上的“ <strong>保留日志”</strong>复选框。DevTools保存所有请求，直到禁用 <strong>保存日志</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/preserve-log.svg" alt="保存日志复选框。"><strong>图3</strong>。保存日志复选框，以蓝色概述</p>
<h3 id="在页面加载期间捕获截图"><a href="#在页面加载期间捕获截图" class="headerlink" title="在页面加载期间捕获截图"></a>在页面加载期间捕获截图</h3><p>捕获屏幕截图，分析用户在等待页面加载时看到的内容。</p>
<p>要启用屏幕截图，请单击“网络”面板上的“ <strong>捕获屏幕截图</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/capture-screenshots.png" alt="捕获截图"> ”。启用后会变成蓝色。</p>
<p>在网络面板对焦时捕获屏幕截图时重新加载页面。</p>
<p>捕获后，您可以通过以下方式与屏幕截图进行交互：</p>
<ul>
<li>将鼠标悬停在屏幕截图上，以查看捕获截图的点。“概述”窗格中将显示一条黄线。</li>
<li>点击屏幕截图的缩略图，以过滤捕获截图后发生的任何请求。</li>
<li>双击缩略图放大。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/screenshot-hover.png" alt="悬停在屏幕截图上。"><strong>图4</strong>。悬停在屏幕截图上。“概览”窗格中的黄色垂直线和“瀑布”代表截图被捕获的时间。</p>
<h3 id="重播XHR请求"><a href="#重播XHR请求" class="headerlink" title="重播XHR请求"></a>重播XHR请求</h3><p>要重播XHR请求，请右键单击请求表中的请求，然后选择<strong>Replay XHR</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/replay-xhr.png" alt="选择Replay XHR。"><strong>图5</strong>。选择Replay XHR</p>
<h2 id="更改加载行为"><a href="#更改加载行为" class="headerlink" title="更改加载行为"></a>更改加载行为</h2><h3 id="通过禁用浏览器缓存来模拟首次访问者"><a href="#通过禁用浏览器缓存来模拟首次访问者" class="headerlink" title="通过禁用浏览器缓存来模拟首次访问者"></a>通过禁用浏览器缓存来模拟首次访问者</h3><p>要模拟首次使用者如何体验您的网站，请勾选[ <strong>停用快取</strong> ]核取方块。DevTools禁用浏览器缓存。这更准确地模拟了第一次用户的体验，因为在重复访问时从浏览器缓存提供请求。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/disable-cache.svg" alt="禁用缓存复选框。"><strong>图6</strong>。禁用缓存复选框，以蓝色概述</p>
<h4 id="从网络条件抽屉禁用浏览器缓存"><a href="#从网络条件抽屉禁用浏览器缓存" class="headerlink" title="从网络条件抽屉禁用浏览器缓存"></a>从网络条件抽屉禁用浏览器缓存</h4><p>如果要在其他DevTools面板中工作时禁用缓存，请使用网络条件抽屉。</p>
<ol>
<li>打开<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#network-conditions" target="_blank" rel="external">网络条件抽屉</a>。</li>
<li>选中或取消选中<strong>禁用缓存</strong>复选框。</li>
</ol>
<h3 id="手动清除浏览器缓存"><a href="#手动清除浏览器缓存" class="headerlink" title="手动清除浏览器缓存"></a>手动清除浏览器缓存</h3><p>要随时手动清除浏览器缓存，请右键单击“请求”表中的任意位置，然后选择“ <strong>清除浏览器缓存”</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/clear-browser-cache.png" alt="选择清除浏览器缓存。"><strong>图7</strong>。选择清除浏览器缓存</p>
<h3 id="模拟离线"><a href="#模拟离线" class="headerlink" title="模拟离线"></a>模拟离线</h3><p>有一类新的网络应用程序，称为<a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="external">渐进式Web应用程序</a>，可以在<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external">服务人员</a>的帮助下离线<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external">运行</a>。当您构建这种类型的应用程序时，能够快速模拟没有数据连接的设备是非常有用的。</p>
<p>检查<strong>离线</strong>复选框以模拟完全脱机的网络体验。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/offline.svg" alt="离线复选框"><strong>图8</strong>。离线复选框，以蓝色概述</p>
<h3 id="模拟网络连接速度慢"><a href="#模拟网络连接速度慢" class="headerlink" title="模拟网络连接速度慢"></a>模拟网络连接速度慢</h3><p>从<strong>网络调节</strong> 菜单中模拟2G，3G和其他连接速度。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/network-panel-throttling-menu.svg" alt="网络调节菜单。"><strong>图9</strong>。网络调节菜单，概述为蓝色</p>
<p>您可以从各种预设中进行选择，例如Regular或Good 2G。您还可以通过打开网络限制菜单并选择<strong>自定义</strong> &gt; <strong>添加来添加</strong>自己的自定义预设。</p>
<p>“ <strong>网络</strong> ”选项卡旁边显示一个警告图标，以提醒您启用限流功能。</p>
<h4 id="从网络条件抽屉模拟慢速网络连接"><a href="#从网络条件抽屉模拟慢速网络连接" class="headerlink" title="从网络条件抽屉模拟慢速网络连接"></a>从网络条件抽屉模拟慢速网络连接</h4><p>如果要在其他DevTools面板中工作时节省网络连接，请使用网络条件抽屉。</p>
<ol>
<li>打开<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#network-conditions" target="_blank" rel="external">网络条件抽屉</a>。</li>
<li>从<strong>网络调节</strong>菜单中选择所需的连接速度。</li>
</ol>
<h3 id="手动清除浏览器Cookie"><a href="#手动清除浏览器Cookie" class="headerlink" title="手动清除浏览器Cookie"></a>手动清除浏览器Cookie</h3><p>要随时手动清除浏览器Cookie，请右键单击“请求”表中的任意位置，然后选择“ <strong>清除浏览器Cookie”</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/clear-browser-cookies.png" alt="选择清除浏览器Cookie。"><strong>图10</strong>。选择清除浏览器Cookie</p>
<h3 id="覆盖用户代理"><a href="#覆盖用户代理" class="headerlink" title="覆盖用户代理"></a>覆盖用户代理</h3><p>要手动覆盖用户代理：</p>
<ol>
<li>打开<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#network-conditions" target="_blank" rel="external">网络条件抽屉</a>。</li>
<li>取消选中<strong>自动选择</strong>。</li>
<li>从菜单中选择用户代理选项，或在文本框中输入自定义选项。</li>
</ol>
<h2 id="过滤请求"><a href="#过滤请求" class="headerlink" title="过滤请求"></a>过滤请求</h2><h3 id="根据属性过滤请求"><a href="#根据属性过滤请求" class="headerlink" title="根据属性过滤请求"></a>根据属性过滤请求</h3><p>使用<strong>过滤器</strong>文本框通过属性过滤请求，例如请求的域或大小。</p>
<p>如果看不到文本框，则可能会隐藏“过滤器”窗格。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#hide-filters" target="_blank" rel="external">隐藏过滤器窗格</a>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filter-text-box.svg" alt="“过滤器”文本框。"><strong>图11</strong>。“过滤器”文本框，以蓝色概括</p>
<p>您可以通过将每个属性与空格分开来同时使用多个属性。例如，<code>mime-type:image/gif larger-than:1K</code>显示大于一千字节的所有GIF。这些多属性过滤器等同于AND操作。目前不支持OR操作。</p>
<p>以下是支持的属性的完整列表。</p>
<ul>
<li><code>domain</code>。只显示来自指定域的资源。您可以使用通配符（<code>*</code>）来包含多个域。例如，<code>*.com</code> 显示所有域名的资源<code>.com</code>。DevTools将自动完成下拉菜单与其遇到的所有域进行填充。</li>
<li><code>has-response-header</code>。显示包含指定HTTP响应头的资源。DevTools使用所遇到的所有响应标头填充自动完成下拉列表。</li>
<li><code>is</code>。使用<code>is:running</code>找<code>WebSocket</code>资源。</li>
<li><code>larger-than</code>。显示大于指定大小的资源（以字节为单位）。设置值<code>1000</code>等于设置值<code>1k</code>。</li>
<li><code>method</code>。显示通过指定的HTTP方法类型检索的资源。DevTools使用所遇到的所有HTTP方法填充下拉列表。</li>
<li><code>mime-type</code>。显示指定MIME类型的资源。DevTools使用其遇到的所有MIME类型填充下拉列表。</li>
<li><code>mixed-content</code>。显示所有混合内容资源（<code>mixed-content:all</code>）或仅显示当前显示的内容（<code>mixed-content:displayed</code>）。</li>
<li><code>scheme</code>。显示通过未受保护的HTTP（<code>scheme:http</code>）或受保护的HTTPS（<code>scheme:https</code>）检索的资源。</li>
<li><code>set-cookie-domain</code>。显示具有与指定值匹配的属性的<code>Set-Cookie</code>标题<code>Domain</code>的资源。DevTools填充所有遇到的cookie域的自动完成。</li>
<li><code>set-cookie-name</code>。显示具有<code>Set-Cookie</code>与指定值匹配的名称的标题的资源。DevTools填充自动完成所遇到的所有cookie名称。</li>
<li><code>set-cookie-value</code>。显示具有<code>Set-Cookie</code>与指定值匹配的值的标题的资源。DevTools填充自动完成所遇到的所有cookie值。</li>
<li><code>status-code</code>。只显示其HTTP状态码与指定代码匹配的资源。DevTools使用所遇到的所有状态代码填充自动完成下拉菜单。</li>
</ul>
<h3 id="按类型过滤请求"><a href="#按类型过滤请求" class="headerlink" title="按类型过滤请求"></a>按类型过滤请求</h3><p>要通过请求类型过滤请求，请单击“网络”面板上的<strong>XHR</strong>，<strong>JS</strong>，<strong>CSS</strong>，<strong>Img</strong>，<strong>Media</strong>，<strong>Font</strong>，<strong>Doc</strong>，<strong>WS</strong>（WebSocket），<strong>Manifest</strong>或 <strong>其他</strong>（此处未列出的任何其他类型）按钮。</p>
<p>如果看不到这些按钮，则可能会隐藏“过滤器”窗格。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#hide-filters" target="_blank" rel="external">隐藏过滤器窗格</a>。</p>
<p>要同时启用多个类型的过滤器，请按住Command （Mac）或Control（Windows，Linux），然后单击。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/multi-type-filter.png" alt="使用类型过滤器来显示JS，CSS和Doc [ument]资源。"><strong>图12</strong>。使用类型过滤器来显示JS，CSS和Doc [ument]资源。</p>
<h3 id="按时间过滤请求"><a href="#按时间过滤请求" class="headerlink" title="按时间过滤请求"></a>按时间过滤请求</h3><p>在“概述”窗格上单击并向左或向右拖动，以仅显示在该时间范围内处于活动状态的请求。过滤器是包容性的。显示在突出显示的时间内处于活动状态的任何请求。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/overview-filter.png" alt="过滤任何在2500ms左右不活动的请求。"><strong>图13</strong>。过滤任何在2500ms左右不活动的请求</p>
<h3 id="隐藏数据URL"><a href="#隐藏数据URL" class="headerlink" title="隐藏数据URL"></a>隐藏数据URL</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank" rel="external">数据URL</a>是嵌入到其他文档中的小文件。您在“请求”表中看到的任何请求 <code>data:</code>都是数据URL。</p>
<p>检查“ <strong>隐藏数据URL”</strong>复选框以隐藏这些请求。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/hide-data-urls.svg" alt="隐藏数据URL复选框。"><strong>图14</strong>。隐藏数据URL复选框</p>
<h2 id="排序请求"><a href="#排序请求" class="headerlink" title="排序请求"></a>排序请求</h2><p>默认情况下，请求表中的请求按启动时间排序，但您可以使用其他条件对表进行排序。</p>
<h3 id="按列排序"><a href="#按列排序" class="headerlink" title="按列排序"></a>按列排序</h3><p>单击请求中任何列的标题，以对该列进行排序。</p>
<h3 id="按活动阶段排序"><a href="#按活动阶段排序" class="headerlink" title="按活动阶段排序"></a>按活动阶段排序</h3><p>要更改瀑布如何排序请求，请右键单击“请求”表的标题，将其悬停在“ <strong>瀑布”上</strong>，然后选择以下选项之一：</p>
<ul>
<li><strong>开始时间</strong>。发起的第一个请求位于顶部。</li>
<li><strong>响应时间</strong>。开始下载的第一个请求位于顶部。</li>
<li><strong>结束时间</strong>。完成的第一个请求位于顶部。</li>
<li><strong>总时长</strong>。具有最短连接设置和请求/响应的请求位于顶部。</li>
<li><strong>延迟</strong>。等待最短时间响应的请求位于顶部。</li>
</ul>
<p>这些描述假设每个相应的选项从最短到最长排序。点击“ <strong>瀑布”</strong>列的标题会反转顺序。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/waterfall-total-duration.png" alt="按总时间排序瀑布。"><strong>图15</strong>。按总时间排序瀑布。每个酒吧的较轻部分是等待花费的时间。较暗的部分是用于下载字节的时间。</p>
<h2 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h2><p>只要DevTools打开，它会将所有请求记录在“网络”面板中。使用“网络”面板分析请求。</p>
<h3 id="查看请求日志"><a href="#查看请求日志" class="headerlink" title="查看请求日志"></a>查看请求日志</h3><p>使用“查询”表查看DevTools已打开时所发出的所有请求的日志。点击或悬停请求会显示更多关于它们的信息。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/requests-table.svg" alt="请求表。"><strong>图16</strong>。请求表，以蓝色概述</p>
<p>“请求”表默认显示以下列：</p>
<ul>
<li><p><strong>名称</strong>。资源的文件名，或资源的标识符。</p>
</li>
<li><p><strong>状态</strong>。HTTP状态码。</p>
</li>
<li><p><strong>类型</strong>。所请求资源的MIME类型。</p>
</li>
<li><p>发起人</p>
<p>。以下对象或进程可以启动请求：</p>
<ul>
<li><strong>分析器</strong>。Chrome的HTML解析器。</li>
<li><strong>重定向</strong>。HTTP重定向</li>
<li><strong>脚本</strong>。一个JavaScript函数。</li>
<li><strong>其他</strong>。一些其他过程或操作，例如通过链接导航到页面或在地址栏中输入URL。</li>
</ul>
</li>
<li><p><strong>尺寸</strong>。响应标头的组合大小加上服务器发送的响应主体。</p>
</li>
<li><p><strong>时间</strong>。总持续时间，从请求开始到收到响应中的最后一个字节。</p>
</li>
<li><p><a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#waterfall" target="_blank" rel="external"><strong>瀑布</strong></a>。每个请求活动的视觉分解。</p>
</li>
</ul>
<h4 id="添加或删除列"><a href="#添加或删除列" class="headerlink" title="添加或删除列"></a>添加或删除列</h4><p>右键单击“请求”表的标题，然后选择一个隐藏或显示它的选项。当前显示的选项在它们旁边有复选标记。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/add-column.png" alt="向“请求”表中添加列。"><strong>图17</strong>。向“请求”表中添加列。</p>
<h4 id="添加自定义列"><a href="#添加自定义列" class="headerlink" title="添加自定义列"></a>添加自定义列</h4><p>要将自定义列添加到“请求”表中，右键单击“请求”表的标题，然后选择“ <strong>响应标头”</strong> &gt;“ <strong>管理标题列”</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/custom-column.png" alt="将自定义列添加到“请求”表中。"><strong>图18</strong>。将自定义列添加到“请求”表中。</p>
<h3 id="查看请求相对于彼此的时间"><a href="#查看请求相对于彼此的时间" class="headerlink" title="查看请求相对于彼此的时间"></a>查看请求相对于彼此的时间</h3><p>使用瀑布来查看请求相对于彼此的时间。默认情况下，瀑布由请求的开始时间组织。所以，比左边更远的请求开始比那些更右边的请求开始。</p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#sort-by-activity" target="_blank" rel="external">按活动阶段排序，</a>以查看可以排序瀑布的不同方式。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/waterfall.png" alt="“请求”窗格的“瀑布”列。"><strong>图19</strong>。“请求”窗格的“瀑布”列。</p>
<h3 id="分析WebSocket连接的框架"><a href="#分析WebSocket连接的框架" class="headerlink" title="分析WebSocket连接的框架"></a>分析WebSocket连接的框架</h3><p>要查看WebSocket连接的帧：</p>
<ol>
<li>单击“ 请求”表的“ <strong>名称”</strong>列下的WebSocket连接的URL 。</li>
<li>单击<strong>框架</strong>选项卡。该表显示最后100帧。</li>
</ol>
<p>要刷新表，请在“请求”表的“ <strong>名称”</strong>列下重新单击WebSocket连接的 <strong>名称</strong>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/frames.svg" alt="框架选项卡。"><strong>图20</strong>。“框架”选项卡，以蓝色概括</p>
<p>该表包含三列：</p>
<ul>
<li><strong>数据</strong>。消息有效载荷。如果消息是纯文本，则显示在此处。对于二进制操作码，此列显示操作码的名称和代码。支持以下操作码：连续帧，二进制帧，连接关闭帧，Ping帧和Pong帧。</li>
<li><strong>长度</strong>。消息有效负载的长度（以字节为单位）。</li>
<li><strong>时间</strong>。消息收到或发送的时间。</li>
</ul>
<p>消息根据其类型进行颜色编码：</p>
<ul>
<li>外发短信是浅绿色的。</li>
<li>收到的短信是白色的。</li>
<li>WebSocket操作码为浅黄色。</li>
<li>错误是浅红色的。</li>
</ul>
<h3 id="查看响应正文的预览"><a href="#查看响应正文的预览" class="headerlink" title="查看响应正文的预览"></a>查看响应正文的预览</h3><p>要查看响应正文的预览：</p>
<ol>
<li>在“请求”表的“ <strong>名称”</strong>列下单击请求的URL 。</li>
<li>单击<strong>预览</strong>选项卡。</li>
</ol>
<p>此选项卡主要用于查看图像。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/preview.svg" alt="预览选项卡。"><strong>图21</strong>。预览选项卡，以蓝色概述</p>
<h3 id="查看响应体"><a href="#查看响应体" class="headerlink" title="查看响应体"></a>查看响应体</h3><p>查看请求的响应正文：</p>
<ol>
<li>在“请求”表的“ <strong>名称”</strong>列下单击请求的URL 。</li>
<li>单击<strong>标题</strong>选项卡。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/response.svg" alt="响应选项卡。"><strong>图22</strong>。“响应”选项卡，以蓝色概述</p>
<h3 id="查看HTTP头"><a href="#查看HTTP头" class="headerlink" title="查看HTTP头"></a>查看HTTP头</h3><p>查看有关请求的HTTP头数据：</p>
<ol>
<li>在“ 请求”表的“ <strong>名称”</strong>列下单击请求的URL 。</li>
<li>单击<strong>标题</strong>选项卡。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/headers.svg" alt="标题选项卡。"><strong>图23</strong>。标题标签，以蓝色勾画</p>
<h4 id="查看HTTP头源"><a href="#查看HTTP头源" class="headerlink" title="查看HTTP头源"></a>查看HTTP头源</h4><p>默认情况下，“标题”选项卡按字母顺序显示标题名称。按照接收的顺序查看HTTP头名称：</p>
<ol>
<li>打开您感兴趣的请求的<strong>标题</strong>选项卡。请参阅 <a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#headers" target="_blank" rel="external">查看HTTP头</a>。</li>
<li>单击<strong>查看源</strong>，旁边的<strong>请求头</strong>或<strong>响应头</strong>部分。</li>
</ol>
<h3 id="查看查询字符串参数"><a href="#查看查询字符串参数" class="headerlink" title="查看查询字符串参数"></a>查看查询字符串参数</h3><p>要以人类可读格式查看URL的查询字符串参数：</p>
<ol>
<li>打开您感兴趣的请求的<strong>标题</strong>选项卡。请参阅 <a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#headers" target="_blank" rel="external">查看HTTP头</a>。</li>
<li>转到<strong>查询字符串参数</strong>部分。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/query-string.svg" alt="查询字符串参数部分。"><strong>图24</strong>。查询字符串参数部分，概述为蓝色</p>
<h4 id="查看查询字符串参数源码"><a href="#查看查询字符串参数源码" class="headerlink" title="查看查询字符串参数源码"></a>查看查询字符串参数源码</h4><p>查看请求的查询字符串参数源：</p>
<ol>
<li>转到查询字符串参数部分。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#query-string" target="_blank" rel="external">查看查询字符串参数</a>。</li>
<li>点击<strong>查看源</strong>。</li>
</ol>
<h4 id="查看URL编码的查询字符串参数"><a href="#查看URL编码的查询字符串参数" class="headerlink" title="查看URL编码的查询字符串参数"></a>查看URL编码的查询字符串参数</h4><p>要以人类可读的格式查看查询字符串参数，但保留编码：</p>
<ol>
<li>转到查询字符串参数部分。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#query-string" target="_blank" rel="external">查看查询字符串参数</a>。</li>
<li>点击<strong>查看URL编码</strong>。</li>
</ol>
<h3 id="查看饼干"><a href="#查看饼干" class="headerlink" title="查看饼干"></a>查看饼干</h3><p>查看在请求的HTTP标头中发送的Cookie：</p>
<ol>
<li>在“请求”表的“ <strong>名称”</strong>列下单击请求的URL 。</li>
<li>单击<strong>Cookies</strong>选项卡。</li>
</ol>
<p>有关每个列的说明，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/manage-data/cookies#fields" target="_blank" rel="external">字段</a>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/cookies.svg" alt="“Cookies”选项卡。"><strong>图25</strong>。Cookies标签，蓝色</p>
<h3 id="查看请求的时间细分"><a href="#查看请求的时间细分" class="headerlink" title="查看请求的时间细分"></a>查看请求的时间细分</h3><p>查看请求的时间细分：</p>
<ol>
<li>在“请求”表的“ <strong>名称”</strong>列下单击请求的URL 。</li>
<li>单击<strong>时间</strong>选项卡。</li>
</ol>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#timing-preview" target="_blank" rel="external">预览时间细分</a>，以便更快速地访问此数据。</p>
<p>有关可在“时间”选项卡中看到的每个<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#timing-explanation" target="_blank" rel="external">阶段</a>的更多信息，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#timing-explanation" target="_blank" rel="external">定时故障阶段</a>。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/timing.svg" alt="计时标签"><strong>图26</strong>。时间标签，蓝色概述</p>
<p>以下是有关每个阶段的更多信息。</p>
<p>有关另一种访问此视图的方式，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#timing-breakdown" target="_blank" rel="external">查看时间细分</a>。</p>
<h4 id="预览时间细分"><a href="#预览时间细分" class="headerlink" title="预览时间细分"></a>预览时间细分</h4><p>要查看请求的时间细分的预览，将鼠标悬停在“请求”表的“ <strong>瀑布”</strong>列中的请求条目上。</p>
<p>请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#timing" target="_blank" rel="external">查看请求的时间细分，</a>以便访问不需要悬停的数据。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/waterfall-hover.png" alt="预览请求的时间细分。"><strong>图27</strong>。预览请求的时间细分</p>
<h4 id="定时分解阶段解释"><a href="#定时分解阶段解释" class="headerlink" title="定时分解阶段解释"></a>定时分解阶段解释</h4><p>以下是有关“时间”选项卡中可能看到的每个阶段的更多信息：</p>
<ul>
<li><p>排队</p>
<p>。浏览器在以下情况下排队请求：</p>
<ul>
<li>有较高优先级的请求。</li>
<li>已经有六个TCP连接打开这个来源，这是极限。仅适用于HTTP / 1.0和HTTP / 1.1。</li>
</ul>
</li>
<li><p><strong>失速</strong>。由于<strong>排队</strong>中描述的任何原因，请求可能会停止。</p>
</li>
<li><p><strong>DNS查找</strong>。浏览器解析请求的IP地址。</p>
</li>
<li><p><strong>代理谈判</strong>。浏览器正在使用<a href="https://en.wikipedia.org/wiki/Proxy_server" target="_blank" rel="external">代理服务器</a>协商请求。</p>
</li>
<li><p><strong>请求发送</strong>。请求正在发送。</p>
</li>
<li><p><strong>ServiceWorker准备</strong>。浏览器正在启动服务工作者。</p>
</li>
<li><p><strong>请求ServiceWorker</strong>。该请求被发送给服务工作者。</p>
</li>
<li><p><strong>等待（TTFB）</strong>。浏览器正在等待响应的第一个字节。TTFB代表时间到第一个字节。</p>
</li>
<li><p><strong>内容下载</strong>。浏览器正在接收响应。</p>
</li>
</ul>
<h3 id="查看发起者和依赖关系"><a href="#查看发起者和依赖关系" class="headerlink" title="查看发起者和依赖关系"></a>查看发起者和依赖关系</h3><p>要查看请求的发起者和依赖关系，请保存Shift 并将其悬停在“请求”表中的请求上。DevTools颜色启动器为绿色，依赖为红色。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/initiators-dependencies.png" alt="查看请求的发起者和依赖关系。"><strong>图28</strong>。查看请求的发起者和依赖关系</p>
<p>当“请求”表按时间顺序排列时，您悬停的请求之上的第一个绿色请求是依赖关系的启动器。如果还有另一个绿色请求，那么这个更高的请求是发起者的发起者。等等。</p>
<h3 id="查看加载事件"><a href="#查看加载事件" class="headerlink" title="查看加载事件"></a>查看加载事件</h3><p>DevTools显示的时机<code>DOMContentLoaded</code>和<code>load</code>事件在网络面板上的多个位置。该<code>DOMContentLoaded</code>事件为蓝色，而<code>load</code>事件是红色的。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/load-events.svg" alt="“网络”面板上的DOMContentLoaded和加载事件的位置。"><strong>图29</strong>。网络面板中的<code>DOMContentLoaded</code>和 <code>load</code>事件的位置</p>
<h3 id="查看请求总数"><a href="#查看请求总数" class="headerlink" title="查看请求总数"></a>查看请求总数</h3><p>“请求”总数列在“摘要”窗格中的“网络”面板的底部。</p>
<p><strong>注意：</strong>此数字仅跟踪从DevTools打开以来已记录的请求。如果在DevTools打开之前发生其他请求，则不会计算这些请求。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/total-requests.svg" alt="自DevTools打开以来的总请求数"><strong>图30</strong>。自DevTools打开以来的总请求数</p>
<h3 id="查看总下载大小"><a href="#查看总下载大小" class="headerlink" title="查看总下载大小"></a>查看总下载大小</h3><p>“网络”面板底部的“摘要”窗格中列出了请求的总下载大小。</p>
<p><strong>注意：</strong>此数字仅跟踪从DevTools打开以来已记录的请求。如果在DevTools打开之前发生其他请求，则不会计算这些请求。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/total-size.svg" alt="请求的总下载大小"><strong>图31</strong>。请求的总下载大小</p>
<h2 id="导出请求数据"><a href="#导出请求数据" class="headerlink" title="导出请求数据"></a>导出请求数据</h2><h3 id="保存请求作为HAR与内容"><a href="#保存请求作为HAR与内容" class="headerlink" title="保存请求作为HAR与内容"></a>保存请求作为HAR与内容</h3><p>要以HAR格式保存请求内容：</p>
<ol>
<li>右键单击“请求”表中包含请求的行。</li>
<li>选择<strong>另存为HAR与内容</strong>。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/save-as-har.png" alt="选择另存为HAR内容。"><strong>图32</strong>。选择另存为HAR内容</p>
<h3 id="将一个或多个请求复制到剪贴板"><a href="#将一个或多个请求复制到剪贴板" class="headerlink" title="将一个或多个请求复制到剪贴板"></a>将一个或多个请求复制到剪贴板</h3><p>在“ 请求”表的“ <strong>名称”</strong>列下，右键单击请求，将其悬停在“ <strong>复制”上</strong>，然后选择以下选项之一：</p>
<ul>
<li><strong>复制链接地址</strong>。将请求的URL复制到剪贴板。</li>
<li><strong>复制响应</strong>。将响应正文复制到剪贴板。</li>
<li><strong>复制为cURL</strong>。将请求复制为cURL命令。</li>
<li><strong>全部复制为cURL</strong>。将所有请求复制为cURL命令链。</li>
<li><strong>全部复制为HAR</strong>。将所有请求复制为HAR数据。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/copy.png" alt="选择复制响应。"><strong>图33</strong>。选择复制响应</p>
<h2 id="更改“网络”面板的布局"><a href="#更改“网络”面板的布局" class="headerlink" title="更改“网络”面板的布局"></a>更改“网络”面板的布局</h2><p>展开或折叠“网络”面板UI的部分，专注于对您很重要的部分。</p>
<h3 id="隐藏“过滤器”窗格"><a href="#隐藏“过滤器”窗格" class="headerlink" title="隐藏“过滤器”窗格"></a>隐藏“过滤器”窗格</h3><p>默认情况下，DevTools显示“ <a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#filters" target="_blank" rel="external">过滤器”窗格</a>。单击“ <strong>过滤器”</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filters.png" alt="过滤">将其隐藏。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/hide-filters.svg" alt="隐藏过滤器按钮"><strong>图34</strong>。隐藏过滤器，概述为蓝色</p>
<h3 id="使用大的请求行"><a href="#使用大的请求行" class="headerlink" title="使用大的请求行"></a>使用大的请求行</h3><p>默认情况下，DevTools在“ <a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#requests" target="_blank" rel="external">请求”窗格中</a>使用小行。单击<strong>使用大的请求行</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/large-resource-rows-button.png" alt="使用大的请求行">来使用大行。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/large-request-rows.svg" alt="“大请求行”按钮"><strong>图35</strong>。大型请求行，以蓝色概括</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/small-request-rows.png" alt="“请求”窗格中的小请求行的示例。"><strong>图36</strong>。“请求”窗格中的小请求行的示例</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/large-request-rows.png" alt="“请求”窗格中的大请求行的示例。"><strong>图37</strong>。“请求”窗格中的大请求行的示例</p>
<h3 id="隐藏概述窗格"><a href="#隐藏概述窗格" class="headerlink" title="隐藏概述窗格"></a>隐藏概述窗格</h3><p>默认情况下，DevTools显示“ <a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#overview" target="_blank" rel="external">概述”窗格</a>。单击<strong>隐藏概览</strong> <img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/hide-overview.png" alt="隐藏概述">以隐藏它。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/hide-overview.svg" alt="“隐藏概述”按钮"><strong>图38</strong>。隐藏概述，概述为蓝色</p>
<h1 id="测量资源加载时间"><a href="#测量资源加载时间" class="headerlink" title="测量资源加载时间"></a>测量资源加载时间</h1><p>使用 <strong>Network</strong> 面板测量您的网站网络性能。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/network-panel.png" alt="Chrome DevTools 的 Network 面板"></p>
<p><strong>Network</strong> 面板记录页面上每个网络操作的相关信息，包括详细的耗时数据、HTTP 请求与响应标头和 Cookie，等等。</p>
<h3 id="TL-DR-31"><a href="#TL-DR-31" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 Network 面板记录和分析网络活动。</li>
<li>整体或单独查看资源的加载信息。</li>
<li>过滤和排序资源的显示方式。</li>
<li>保存、复制和清除网络记录。</li>
<li>根据需求自定义 Network 面板。</li>
</ul>
<h2 id="Network-面板概览"><a href="#Network-面板概览" class="headerlink" title="Network 面板概览"></a>Network 面板概览</h2><p>Network 面板由五个窗格组成：</p>
<ol>
<li><strong>Controls</strong>。使用这些选项可以控制 <strong>Network</strong> 面板的外观和功能。</li>
<li><strong>Filters</strong>。 使用这些选项可以控制在 <strong>Requests Table</strong> 中显示哪些资源。提示：按住 Cmd (Mac) 或 Ctrl(Windows/Linux) 并点击过滤器可以同时选择多个过滤器。</li>
<li><strong>Overview</strong>。 此图表显示了资源检索时间的时间线。如果您看到多条竖线堆叠在一起，则说明这些资源被同时检索。</li>
<li><strong>Requests Table</strong>。 此表格列出了检索的每一个资源。 默认情况下，此表格按时间顺序排序，最早的资源在顶部。点击资源的名称可以显示更多信息。 提示：右键点击 <strong>Timeline</strong> 以外的任何一个表格标题可以添加或移除信息列。</li>
<li><strong>Summary</strong>。 此窗格可以一目了然地告诉您请求总数、传输的数据量和加载时间。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/panes.png" alt="Network 面板的窗格"></p>
<p>默认情况下，<strong>Requests Table</strong> 会显示以下列。您可以<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/resource-loading#add-and-remove-table-columns" target="_blank" rel="external">添加和移除列</a>。</p>
<ul>
<li><strong>Name</strong>。资源的名称。</li>
<li><strong>Status</strong>。HTTP 状态代码。</li>
<li><strong>Type</strong>。已请求资源的 MIME 类型。</li>
<li><strong>Initiator</strong>。发起请求的对象或进程。值为以下选项之一：</li>
<li><strong>Parser</strong>。Chrome 的 HTML 解析器发起请求。</li>
<li><strong>Redirect</strong>。HTTP 重定向发起请求。</li>
<li><strong>Script</strong>。脚本发起请求。</li>
<li><strong>Other</strong>。某些其他进程或操作发起请求，例如用户通过链接或者在地址栏中输入网址导航到页面。</li>
<li><strong>Size</strong>。响应标头（通常为数百字节）加响应正文（由服务器提供）的组合大小。</li>
<li><strong>Time</strong>。从请求开始至在响应中接收到最终字节的总持续时间。</li>
<li><strong>Timeline</strong>。Timeline 列可以显示所有网络请求的可视瀑布。 点击此列的标题可以显示一个包含更多排序字段的菜单。</li>
</ul>
<h2 id="记录网络活动"><a href="#记录网络活动" class="headerlink" title="记录网络活动"></a>记录网络活动</h2><p>在 <strong>Network</strong> 面板打开时，DevTools 在默认情况下会记录所有网络活动。 要记录活动，只需在面板打开时重新加载页面，或者等待当前加载页面上的网络活动。</p>
<p>您可以通过 <strong>record</strong> 按钮指示 DevTools 是否记录。 显示红色 (<img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/record-on.png" alt="记录按钮打开">) 表明 DevTools 正在记录。 显示灰色 (<img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/record-off.png" alt="记录按钮关闭">) 表明 DevTools 未在记录。 点击此按钮可以开始或停止记录，也可以按键盘快捷键 Cmd/Ctrl+e。</p>
<h2 id="在记录期间捕捉屏幕截图-1"><a href="#在记录期间捕捉屏幕截图-1" class="headerlink" title="在记录期间捕捉屏幕截图"></a>在记录期间捕捉屏幕截图</h2><p><strong>Network</strong> 面板可以在页面加载期间捕捉屏幕截图。此功能称为<strong>幻灯片</strong>。</p>
<p>点击<strong>摄影机</strong>图标可以启用幻灯片。图标为灰色时，幻灯片处于停用状态 (<img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filmstrip-disabled.png" alt="已停用幻灯片">)。如果图标为蓝色，则说明已启用 (<img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filmstrip-enabled.png" alt="已启用幻灯片">)。</p>
<p>重新加载页面可以捕捉屏幕截图。屏幕截图显示在<strong>概览</strong>上方。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filmstrip.png" alt="带幻灯片的记录"></p>
<p>将鼠标悬停在一个屏幕截图上时，<strong>Timeline</strong> 将显示一条黄色竖线，指示帧的捕捉时间。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filmstrip-timeline-overlay.png" alt="Timeline 上的幻灯片叠加层"></p>
<p>双击屏幕截图可查看放大版本。在屏幕截图处于放大状态时，使用键盘的向左和向右箭头可以在屏幕截图之间导航。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filmstrip-zoom.png" alt="放大的幻灯片屏幕截图"></p>
<h2 id="查看-DOMContentLoaded-和-load-事件信息"><a href="#查看-DOMContentLoaded-和-load-事件信息" class="headerlink" title="查看 DOMContentLoaded 和 load 事件信息"></a>查看 DOMContentLoaded 和 load 事件信息</h2><p><strong>Network</strong> 面板突出显示两种事件：<a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded" target="_blank" rel="external"><code>DOMContentLoaded</code></a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/load" target="_blank" rel="external"><code>load</code></a>。</p>
<p>解析页面的初始标记时会触发 <code>DOMContentLoaded</code>。 此事件将在 <strong>Network</strong> 面板上的两个地方显示：</p>
<ol>
<li><strong>Overview</strong> 窗格中的蓝色竖线表示事件。</li>
<li>在 <strong>Summary</strong> 窗格中，您可以看到事件的确切时间。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/domcontentloaded.png" alt="Network 面板上的 DOMContentLoaded 事件"></p>
<p>页面完全加载时将触发 <code>load</code>。此事件显示在三个地方：</p>
<ol>
<li><strong>Overview</strong> 窗格中的红色竖线表示事件。</li>
<li><strong>Requests Table</strong> 中的红色竖线也表示事件。</li>
<li>在 <strong>Summary</strong> 窗格中，您可以看到事件的确切时间。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/load.png" alt="Network 面板上的 load 事件"></p>
<h2 id="查看单个资源的详细信息"><a href="#查看单个资源的详细信息" class="headerlink" title="查看单个资源的详细信息"></a>查看单个资源的详细信息</h2><p>点击资源名称（位于 <strong>Requests Table</strong> 的 <strong>Name</strong> 列下）可以查看与该资源有关的更多信息。</p>
<p>可用标签会因您所选择资源类型的不同而不同，但下面四个标签最常见：</p>
<ul>
<li><strong>Headers</strong>。与资源关联的 HTTP 标头。</li>
<li><strong>Preview</strong>。JSON、图像和文本资源的预览。</li>
<li><strong>Response</strong>。HTTP 响应数据（如果存在）。</li>
<li><strong>Timing</strong>。资源请求生命周期的精细分解。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/network-headers.png" alt="查看单一资源的详情"></p>
<h3 id="查看网络耗时"><a href="#查看网络耗时" class="headerlink" title="查看网络耗时"></a>查看网络耗时</h3><p>点击 <strong>Timing</strong> 标签可以查看单个资源请求生命周期的精细分解。</p>
<p>生命周期按照以下类别显示花费的时间：</p>
<ul>
<li>Queuing</li>
<li>Stalled</li>
<li>如果适用：DNS lookup、initial connection、SSL handshake</li>
<li>Request sent</li>
<li>Waiting (TTFB)</li>
<li>Content Download</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/timing-tab.png" alt="timing 标签"></p>
<p>将鼠标悬停到 <strong>Timeline</strong> 图表内的资源上时，您也可以看到相同的信息。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/timeline-view-hover.png" alt="Timeline 中一个资源的定时数据"></p>
<p>相关指南：</p>
<ul>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing" target="_blank" rel="external">了解 Resource Timing</a></li>
</ul>
<h3 id="查看-HTTP-标头"><a href="#查看-HTTP-标头" class="headerlink" title="查看 HTTP 标头"></a>查看 HTTP 标头</h3><p>点击 <strong>Headers</strong> 可以显示该资源的标头。</p>
<p><strong>Headers</strong> 标签可以显示资源的请求网址、HTTP 方法以及响应状态代码。 此外，该标签还会列出 HTTP 响应和请求标头、它们的值以及任何查询字符串参数。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/network-headers.png" alt="单一资源的 HTTP 标头"></p>
<p>点击每一部分旁边的 <code>view source</code> 或 <code>view parsed</code> 链接，您能够以源格式或者解析格式查看响应标头、请求标头或者查询字符串参数。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/view-header-source.png" alt="查看标头源"></p>
<p>您也可以点击相应部分旁边的 <code>view URL encoded</code> 或 <code>view decoded</code> 链接，以网址编码或解码格式查看查询字符串参数。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/view-url-encoded.png" alt="查看已编码网址"></p>
<h3 id="预览资源"><a href="#预览资源" class="headerlink" title="预览资源"></a>预览资源</h3><p>点击 <strong>Preview</strong> 标签可以查看该资源的预览。<strong>Preview</strong> 标签可能显示一些有用的信息，也可能不显示，具体取决于您所选择资源的类型。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/preview-png.png" alt="图像资源预览"></p>
<h3 id="查看-HTTP-响应内容"><a href="#查看-HTTP-响应内容" class="headerlink" title="查看 HTTP 响应内容"></a>查看 HTTP 响应内容</h3><p>点击 <strong>Response</strong> 标签可以查看资源未格式化的 HTTP 响应内容。 <strong>Preview</strong> 标签可能包含一些有用的信息，也可能不包含，具体取决于您所选择资源的类型。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/response-json.png" alt="JSON 资源响应数据"></p>
<h3 id="查看-Cookie"><a href="#查看-Cookie" class="headerlink" title="查看 Cookie"></a>查看 Cookie</h3><p>点击 <strong>Cookies</strong> 标签可以查看在资源的 HTTP 请求和响应标头中传输的 Cookie 表。 只有传输 Cookie 时，此标签才可用。</p>
<p>下面是 Cookie 表中每一列的说明：</p>
<ul>
<li><strong>Name</strong>。Cookie 的名称。</li>
<li><strong>Value</strong>。Cookie 的值。</li>
<li><strong>Domain</strong>。Cookie 所属的域。</li>
<li><strong>Path</strong>。Cookie 来源的网址路径。</li>
<li><strong>Expires / Max-Age</strong>。Cookie 的 expires 或 max-age 属性的值。</li>
<li><strong>Size</strong>。Cookie 的大小（以字节为单位）。</li>
<li><strong>HTTP</strong>。指示 Cookie 应仅由浏览器在 HTTP 请求中设置，而无法通过 JavaScript 访问。</li>
<li><strong>Secure</strong>。如果存在此属性，则指示 Cookie 应仅通过安全连接传输。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/cookies.png" alt="资源 Cookie"></p>
<h3 id="查看-WebSocket-框架"><a href="#查看-WebSocket-框架" class="headerlink" title="查看 WebSocket 框架"></a>查看 WebSocket 框架</h3><p>点击 <strong>Frames</strong> 标签可以查看 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="external"><code>WebSocket</code></a> 连接信息。</p>
<p>只有选定资源发起 <code>WebSocket</code> 连接时，此标签才会显示。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/websocket-frames.png" alt="WebSocket 框架标签"></p>
<p>下表对 <strong>Frames</strong> 标签上表格中的每一列进行了说明：</p>
<ul>
<li><strong>Data</strong>。消息负载。如果消息为纯文本，将在此处显示。 对于二进制操作码，此字段将显示操作码的名称和代码。 支持以下操作码：</li>
<li>延续框架</li>
<li>二进制框架</li>
<li>连接关闭框架</li>
<li>Ping 框架</li>
<li>Pong 框架</li>
<li><strong>Length</strong>。消息负载的长度（以字节为单位）。</li>
<li><strong>Time</strong>。消息创建时的时间戳。</li>
</ul>
<p>消息根据其类型进行彩色编码：</p>
<ul>
<li>传出文本消息为浅绿色。</li>
<li>传入文本消息为白色。</li>
<li>WebSocket 操作码为浅黄色。</li>
<li>错误为浅红色。</li>
</ul>
<p><strong>有关当前实现的说明：</strong></p>
<ul>
<li>要在每条新消息到达后刷新 <strong>Frames</strong> 表，请点击左侧的资源名称。</li>
<li><strong>Frames</strong> 表格仅保留最后 100 条 <code>WebSocket</code> 消息。</li>
</ul>
<h2 id="查看资源发起者和依赖项"><a href="#查看资源发起者和依赖项" class="headerlink" title="查看资源发起者和依赖项"></a>查看资源发起者和依赖项</h2><p>按住 Shift 并将鼠标悬停在资源上，可以查看其发起者和依赖项。 本部分将您悬停的资源称为<strong>目标</strong>。</p>
<p>目标上方的第一个绿色编码资源为目标的发起者。 如果上方存在第二个也是绿色编码的资源，那么该资源将是发起者的发起者。 目标下方红色编码的任何资源都是目标的依赖项。</p>
<p>下方的屏幕截图中，目标是 <code>dn/</code>。此目标的发起者为以 <code>rs=AA2Y</code> 开头的脚本。 发起者 (<code>rs=AA2Y</code>) 的发起者为 <code>google.com</code>。 最后，<code>dn.js</code> 是目标 (<code>dn/</code>) 的依赖项。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/initiators-dependencies.png" alt="查看资源发起者和依赖关系"></p>
<p>请记住，对于具有大量资源的页面，您可能无法看到所有的发起者或依赖项。</p>
<h2 id="排序请求-1"><a href="#排序请求-1" class="headerlink" title="排序请求"></a>排序请求</h2><p>默认情况下，<strong>Requests Table</strong> 中的资源按照每个请求的开始时间排序，最早的请求位于顶部。</p>
<p>点击列标头可以按照该标头下每个资源的值对表格排序。 再次点击相同的标头可以将排序顺序更改为升序或降序。</p>
<p><strong>Timeline</strong> 列与其他列不同。点击此列时，它将显示一个由多个排序字段组成的菜单：</p>
<ul>
<li><strong>Timeline</strong>。按每个网络请求的开始时间排序。这是默认排序方式，与按 <strong>Start Time</strong> 选项排序相同。</li>
<li><strong>Start Time</strong>。按每个网络请求的开始时间排序（与按 <strong>Timeline</strong> 选项排序相同）。</li>
<li><strong>Response Time</strong>。按每个请求的响应时间排序。</li>
<li><strong>End Time</strong>。按每个请求完成的时间排序。</li>
<li><strong>Duration</strong>。按每个请求的总时间排序。选择此过滤器可以确定哪些资源的加载时间最长。</li>
<li><strong>Latency</strong>。按请求开始与响应开始之间的时间排序。 选择此过滤器可以确定哪些资源至第一字节 (TTFB) 的时间最长。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/timeline-sort-fields.png" alt="Timeline 排序字段"></p>
<h2 id="过滤请求-1"><a href="#过滤请求-1" class="headerlink" title="过滤请求"></a>过滤请求</h2><p><strong>Network</strong> 面板提供了多种方式来过滤要显示哪些资源。 点击 <strong>Filter</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filters.png" alt="Filter 按钮">) 可以隐藏或显示 <strong>Filters</strong> 窗格。</p>
<p>使用内容类型按钮可以仅显示选定内容类型的资源。</p>
<p>注：按住 Cmd (Mac) 或 Ctrl (Windows/Linux) 并点击过滤器可以同时启用多个过滤器。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/multiple-content-type-filters.png" alt="同时选择了多个内容类型过滤器"></p>
<p><strong>Filter</strong> 文本字段看似非常强大。如果您在其中输入任意字符串，<strong>Network</strong> 面板仅会显示文件名与给定字符串匹配的资源。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/resource-name-filtering.png" alt="资源名称过滤"></p>
<p><strong>Filter</strong> 文本字段还支持各种关键词，这样，您可以按照各种属性对资源排序，例如使用 <code>larger-than</code> 关键字按文件大小进行排序。</p>
<p>下文列表说明了所有关键字。</p>
<ul>
<li><code>domain</code>。仅显示来自指定域的资源。您可以使用通配符字符 (<code>*</code>) 来包含多个域。 例如，<code>*.com</code> 将显示来自以 <code>.com</code> 结尾的所有域名的资源。 DevTools 会使用它遇到的所有域填充自动填充下拉菜单。</li>
<li><code>has-response-header</code>。显示包含指定 HTTP 响应标头的资源。 DevTools 会使用它遇到的所有响应标头填充自动填充下拉菜单。</li>
<li><code>is</code>。使用 <code>is:running</code> 可以查找 <code>WebSocket</code> 资源。</li>
<li><code>larger-than</code>。显示大于指定大小的资源（以字节为单位）。 将值设为 <code>1000</code> 等同于设置为 <code>1k</code>。</li>
<li><code>method</code>。显示通过指定 HTTP 方法类型检索的资源。 DevTools 会使用它遇到的所有 HTTP 方法填充下拉菜单。</li>
<li><code>mime-type</code>。显示指定 MIME 类型的资源。DevTools 会使用它遇到的所有 MIME 类型填充下拉菜单。</li>
<li><code>mixed-content</code>。显示所有混合内容资源 (<code>mixed-content:all</code>)，或者仅显示当前显示的资源 (<code>mixed-content:displayed</code>)。</li>
<li><code>scheme</code>。显示通过未保护 HTTP (<code>scheme:http</code>) 或受保护 HTTPS (<code>scheme:https</code>) 检索的资源。</li>
<li><code>set-cookie-domain</code>。显示具有 <code>Set-Cookie</code> 标头并带有与指定值匹配的 <code>Domain</code> 属性的资源。 DevTools 会使用它遇到的所有 Cookie 域填充自动填充下拉菜单。</li>
<li><code>set-cookie-name</code>。显示具有 <code>Set-Cookie</code> 标头并且名称与指定值匹配的资源。 DevTools 会使用它遇到的所有 Cookie 名称填充自动填充下拉菜单。</li>
<li><code>set-cookie-value</code>。显示具有 <code>Set-Cookie</code> 标头并且值与指定值匹配的资源。 DevTools 会使用它遇到的所有 Cookie 值填充自动填充下拉菜单。</li>
<li><code>status-code</code>。仅显示 HTTP 状态代码与指定代码匹配的资源。 DevTools 会使用它遇到的所有状态代码填充自动填充下拉菜单。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/larger-than.png" alt="按文件大小过滤"></p>
<p>上面的一些关键字都提及自动填充下拉菜单。要触发自动填充菜单，请在键入关键字时后面加一个冒号。 例如，在下面的屏幕截图中，输入 <code>domain:</code> 触发了自动填充下拉菜单。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/filter-autocomplete.png" alt="过滤文本字段自动填充"></p>
<h2 id="复制、保存和清除网络信息"><a href="#复制、保存和清除网络信息" class="headerlink" title="复制、保存和清除网络信息"></a>复制、保存和清除网络信息</h2><p>在 <strong>Requests Table</strong> 中点击右键可以复制、保存或删除网络信息。 某些选项取决于上下文，因此，如果您希望操作单个资源，则需要右键点击该资源所在的行。</p>
<p>下面的列表说明了每一个选项。</p>
<ul>
<li><strong>Copy Response</strong>。将选定资源的 HTTP 响应复制到系统剪贴板。</li>
<li><strong>Copy as cURL</strong>。以 <a href="http://curl.haxx.se/" target="_blank" rel="external">cURL</a> 命令字符串的形式将选定资源的网络请求复制到系统剪贴板。请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/resource-loading#copy-requests-as-curl-commands" target="_blank" rel="external">以 cURL 命令形式复制请求</a>。</li>
<li><strong>Copy All as HAR</strong>。以 <a href="https://en.wikipedia.org/wiki/.har" target="_blank" rel="external">HAR</a> 数据形式将所有资源复制到系统剪贴板。HAR 文件包含用于说明网络“瀑布”的 JSON 数据结构。多款<a href="https://ericduran.github.io/chromeHAR/" target="_blank" rel="external">第三方</a> <a href="https://code.google.com/p/harviewer/" target="_blank" rel="external">工具</a> 可以依据 HAR 文件中的数据重建网络瀑布。请参阅<a href="https://www.igvita.com/2012/08/28/web-performance-power-tool-http-archive-har/" target="_blank" rel="external">网页性能工具： HTTP 归档 (HAR)</a>，了解更多信息。</li>
<li><strong>Save as HAR with Content</strong>。将所有网络数据及每一个页面资源保存到 HAR 文件。 二进制资源（包括图像）以 Base64 编码文本的形式编码。</li>
<li><strong>Clear Browser Cache</strong>。清除浏览器缓存。<strong>提示</strong>：您也可以从 <a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/network-conditions#network-conditions" target="_blank" rel="external"><strong>Network Conditions</strong></a> 抽屉式导航栏中启用或停用浏览器缓存。</li>
<li><strong>Clear Browser Cookies</strong>。清除浏览器的 Cookie。</li>
<li><strong>Open in Sources Panel</strong>。在 <strong>Sources</strong> 面板中打开选定资源。</li>
<li><strong>Open Link in New Tab</strong>。在新标签中打开选定资源。您也可以在 Network 表中双击资源名称。</li>
<li><strong>Copy Link Address</strong>。将资源网址复制到系统剪贴板。</li>
<li><strong>Save</strong>。保存选定的文本资源。仅在文本资源上显示。</li>
<li><strong>Replay XHR</strong>。重新发送选定的 <code>XMLHTTPRequest</code>。仅在 XHR 资源上显示。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/copy-save-menu.png" alt="复制并保存上下文菜单"></p>
<h3 id="以-cURL-命令形式复制一个或所有请求"><a href="#以-cURL-命令形式复制一个或所有请求" class="headerlink" title="以 cURL 命令形式复制一个或所有请求"></a>以 cURL 命令形式复制一个或所有请求</h3><p><a href="http://curl.haxx.se/" target="_blank" rel="external">cURL</a> 是一种用于进行 HTTP 事务的命令行工具。</p>
<p>在 Requests Table 中右键点击某个资源，将鼠标悬停在 <strong>Copy</strong> 上，然后选择 <strong>Copy as cURL</strong>，复制 Network 面板检测到的所有资源的 cURL 请求的字符串。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/copy-as-curl.png" alt="以 cURL 命令形式复制单一请求"></p>
<p>选择 <strong>Copy as cURL</strong>，复制 Network 面板检测到的所有资源的 cURL 请求的字符串。</p>
<p>当您复制全部时，过滤将被忽略（例如，如果您过滤 Network 面板仅显示 CSS 资源，然后按 <strong>Copy All as cURL</strong>，您将获取所有检测到的资源，而不只是 CSS）。</p>
<h2 id="自定义-Network-面板"><a href="#自定义-Network-面板" class="headerlink" title="自定义 Network 面板"></a>自定义 Network 面板</h2><p>默认情况下，<strong>Requests Table</strong> 会使用小行显示资源。点击 <strong>Use large resource rows</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/large-resource-rows-button.png" alt="large resource rows 按钮">) 可以增大每一行的大小。</p>
<p>大行可以让某些列显示两个文本字段：主要字段和次要字段。 列标头指示次要字段的含义。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/large-resource-rows.png" alt="大资源行"></p>
<h3 id="添加和移除表格列"><a href="#添加和移除表格列" class="headerlink" title="添加和移除表格列"></a>添加和移除表格列</h3><p>右键点击 <strong>Requests Table</strong> 中的任一标题可以添加或移除列。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/network-performance/imgs/add-remove-columns.png" alt="添加或移除列"></p>
<h3 id="导航时保留网络日志。"><a href="#导航时保留网络日志。" class="headerlink" title="导航时保留网络日志。"></a>导航时保留网络日志。</h3><p>默认情况下，每当您重新加载当前页面或者加载不同的页面时，网络活动记录会被丢弃。启用 <strong>Preserve log</strong> 复选框可以在这些情况下保存网络日志。 新记录将附加到 <strong>Requests Table</strong> 的底部。</p>
<h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><p>要详细了解如何优化您的应用的网络性能，请参阅下面的资源：</p>
<ul>
<li>使用 <a href="https://developers.google.com/speed/pagespeed/insights" target="_blank" rel="external">PageSpeed Insights</a> 确定可以应用到您网站的性能最佳做法，以及使用 <a href="https://developers.google.com/speed/pagespeed/optimization" target="_blank" rel="external">PageSpeed 优化工具</a>将应用这些最佳做法的流程自动化。</li>
<li><a href="https://www.igvita.com/posa/high-performance-networking-in-google-chrome/" target="_blank" rel="external">Google Chrome 中的高性能网络</a>讨论了 Chrome 网络内部机制，以及您如何充分利用它们让您的网站更快。</li>
<li><a href="https://developers.google.com/speed/articles/gzip" target="_blank" rel="external">gzip 压缩的工作原理</a>提供了 gzip 压缩的高级概览，并介绍了这种压缩为什么是一种不错的方法。</li>
<li><a href="https://developers.google.com/speed/docs/best-practices/rules_intro" target="_blank" rel="external">网页性能最佳做法</a>提供了更多用于优化您的网页或应用的网络性能的提示。</li>
</ul>
<h1 id="解决内存问题"><a href="#解决内存问题" class="headerlink" title="解决内存问题"></a>解决内存问题</h1><p>了解如何使用 Chrome 和 DevTools 查找影响页面性能的内存问题，包括内存泄漏、内存膨胀和频繁的垃圾回收。</p>
<h3 id="TL-DR-32"><a href="#TL-DR-32" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul>
<li>使用 Chrome 的任务管理器了解您的页面当前正在使用的内存量。</li>
<li>使用 Timeline 记录可视化一段时间内的内存使用。</li>
<li>使用堆快照确定已分离的 DOM 树（内存泄漏的常见原因）。</li>
<li>使用分配时间线记录了解新内存在 JS 堆中的分配时间。</li>
</ul>
<h2 id="概览-2"><a href="#概览-2" class="headerlink" title="概览"></a>概览</h2><p>在 <a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/rail" target="_blank" rel="external">RAIL</a> 性能模型的精髓中，您的性能工作的焦点应是用户。</p>
<p>内存问题至关重要，因为这些问题经常会被用户察觉。 用户可通过以下方式察觉内存问题：</p>
<ul>
<li><strong>页面的性能随着时间的延长越来越差。</strong> 这可能是内存泄漏的症状。 内存泄漏是指，页面中的错误导致页面随着时间的延长使用的内存越来越多。</li>
<li><strong>页面的性能一直很糟糕。</strong> 这可能是内存膨胀的症状。 内存膨胀是指，页面为达到最佳速度而使用的内存比本应使用的内存多。</li>
<li><strong>页面出现延迟或者经常暂停。</strong> 这可能是频繁垃圾回收的症状。 垃圾回收是指浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停。</li>
</ul>
<h3 id="内存膨胀：如何界定“过多”？"><a href="#内存膨胀：如何界定“过多”？" class="headerlink" title="内存膨胀：如何界定“过多”？"></a>内存膨胀：如何界定“过多”？</h3><p>内存泄漏很容易确定。如果网站使用的内存越来越多，则说明发生内存泄漏。 但内存膨胀比较难以界定。 什么情况才算是“使用过多的内存”？</p>
<p>这里不存在硬性数字，因为不同的设备和浏览器具有不同的能力。 在高端智能手机上流畅运行的相同页面在低端智能手机上则可能崩溃。</p>
<p>界定的关键是使用 RAIL 模型并以用户为中心。了解什么设备在您的用户中深受欢迎，然后在这些设备上测试您的页面。如果体验一直糟糕，则页面可能超出这些设备的内存能力。</p>
<h2 id="使用-Chrome-任务管理器实时监视内存使用"><a href="#使用-Chrome-任务管理器实时监视内存使用" class="headerlink" title="使用 Chrome 任务管理器实时监视内存使用"></a>使用 Chrome 任务管理器实时监视内存使用</h2><p>使用 Chrome 任务管理器作为内存问题调查的起点。 任务管理器是一个实时监视器，可以告诉您页面当前正在使用的内存量。</p>
<ol>
<li>按 Shift+Esc 或者转到 Chrome 主菜单并选择 <strong>More tools</strong> &gt; <strong>Task manager</strong>，打开任务管理器。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/task-manager.png" alt="打开任务管理器"></p>
<ol>
<li>右键点击任务管理器的表格标题并启用 <strong>JavaScript memory</strong>。</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/js-memory.png" alt="启用 Javascript memory"></p>
<p>下面两列可以告诉您与页面的内存使用有关的不同信息：</p>
<ul>
<li><strong>Memory</strong> 列表示原生内存。DOM 节点存储在原生内存中。 如果此值正在增大，则说明正在创建 DOM 节点。</li>
<li><strong>JavaScript Memory</strong> 列表示 JS 堆。此列包含两个值。 您感兴趣的值是实时数字（括号中的数字）。 实时数字表示您的页面上的可到达对象正在使用的内存量。 如果此数字在增大，要么是正在创建新对象，要么是现有对象正在增长。</li>
</ul>
<h2 id="使用-Timeline-记录可视化内存泄漏"><a href="#使用-Timeline-记录可视化内存泄漏" class="headerlink" title="使用 Timeline 记录可视化内存泄漏"></a>使用 Timeline 记录可视化内存泄漏</h2><p>您也可以使用 Timeline 面板作为调查的起点。 Timeline 面板可以帮助您直观了解页面在一段时间内的内存使用情况。</p>
<ol>
<li>在 DevTools 上打开 <strong>Timeline</strong> 面板。</li>
<li>启用 <strong>Memory</strong> 复选框。</li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool#make-a-recording" target="_blank" rel="external">做记录</a>。</li>
</ol>
<p>提示：一种比较好的做法是使用强制垃圾回收开始和结束记录。 在记录时点击 <strong>Collect garbage</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/collect-garbage.png" alt="强制垃圾回收按钮">) 可以强制进行垃圾回收。</p>
<p>要显示 Timeline 内存记录，请考虑使用下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = [];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">grow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'div'</span>));</div><div class="line">  &#125;</div><div class="line">  x.push(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">'x'</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'grow'</span>).addEventListener(<span class="string">'click'</span>, grow);</div></pre></td></tr></table></figure>
<p>每次按代码中引用的按钮时，将向文档正文附加 1 万个 <code>div</code> 节点，并将一个由 100 万个 <code>x</code> 字符组成的字符串推送到 <code>x</code>数组。运行此代码会生成一个类似于以下屏幕截图的 Timeline 记录：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/simple-growth.png" alt="简单增长示例"></p>
<p>首先，我们来说明一下用户界面。<strong>Overview</strong> 窗格中的 <strong>HEAP</strong> 图表（<strong>NET</strong> 下方）表示 JS 堆。<strong>概览</strong>窗格下方是<strong>计数器</strong>窗格。从这里，您可以看到内存使用按 JS 堆 （与 <strong>Overview</strong> 窗格中的 <strong>HEAP</strong> 图表相同）、文档、DOM 节点、侦听器和 GPU 内存细分。停用对应的复选框可以将其在图表中隐藏。</p>
<p>现在，我们将根据屏幕截图来分析代码。如果查看节点计数器（绿色图表），您会看到它与代码完全匹配。节点计数以离散步长方式增大。 您可以假定节点计数的每次增大都是对 <code>grow()</code> 的一次调用。 JS 堆图表（蓝色图表）的显示并不直接。为了符合最佳做法，第一次下降实际上是一次强制垃圾回收（通过按 <strong>Collect garbage</strong> 按钮实现）。随着记录的进行，您会看到 JS 堆大小高低交错变化。这种现象是正常的并且在预料之中：每次点击按钮，JavaScript 代码都会创建 DOM 节点，在创建由 100 万个字符组成的字符串期间，代码会完成大量工作。这里的关键是，JS 堆在结束时会比开始时大（这里“开始”是指强制垃圾回收后的时间点）。在实际使用过程中，如果您看到这种 JS 堆大小或节点大小不断增大的模式，则可能存在内存泄漏。</p>
<h2 id="使用堆快照发现已分离-DOM-树的内存泄漏"><a href="#使用堆快照发现已分离-DOM-树的内存泄漏" class="headerlink" title="使用堆快照发现已分离 DOM 树的内存泄漏"></a>使用堆快照发现已分离 DOM 树的内存泄漏</h2><p>只有页面的 DOM 树或 JavaScript 代码不再引用 DOM 节点时，DOM 节点才会被作为垃圾进行回收。 如果某个节点已从 DOM 树移除，但某些 JavaScript 仍然引用它，我们称此节点为“已分离”。已分离的 DOM 节点是内存泄漏的常见原因。此部分将教您如何使用 DevTools 的堆分析器确定已分离的节点。</p>
<p>下面是一个已分离 DOM 节点的简单示例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> detachedNodes;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">    ul.appendChild(li);</div><div class="line">  &#125;</div><div class="line">  detachedTree = ul;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'create'</span>).addEventListener(<span class="string">'click'</span>, create);</div></pre></td></tr></table></figure>
<p>点击代码中引用的按钮将创建一个包含 10 个 <code>li</code> 子级的 <code>ul</code> 节点。 这些节点由代码引用，但不存在于 DOM 树中，因此它们已分离。</p>
<p>堆快照是确定已分离节点的一种方式。顾名思义，堆快照可以为您显示拍摄快照时内存在您页面的 JS 对象和 DOM 节点间的分配。</p>
<p>要创建快照，请打开 DevTools 并转到 <strong>Profiles</strong> 面板，选择 <strong>Take Heap Snapshot</strong> 单选按钮，然后按 <strong>Take Snapshot</strong> 按钮。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/take-heap-snapshot.png" alt="Take Heap Snapshot"></p>
<p>快照可能需要一些时间处理和加载。完成后，请从左侧面板（名称为 <strong>HEAP SNAPSHOTS</strong>）中选择该快照。</p>
<p>在 <strong>Class filter</strong> 文本框中键入 <code>Detached</code>，搜索已分离的 DOM 树。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/detached-filter.png" alt="针对已分离的节点过滤"></p>
<p>展开三角符号以调查分离的树。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/expanded-detached.png" alt="调查分离的树"></p>
<p>以黄色突出显示的节点具有 JavaScript 代码对它们的直接引用。 以红色突出显示的节点则没有直接引用。只有属于黄色节点的树时，它们才处于活动状态。 一般而言，您需要将注意力放在黄色节点上。 修复代码，使黄色节点处于活动状态的时间不长于需要的时间，您也需要消除属于黄色节点树的红色节点。</p>
<p>点击黄色节点对其进行进一步调查。在 <strong>Object</strong> 窗格中，您可以看到与正在引用该节点的代码相关的更多信息。 例如，在下面的屏幕截图中，您可以看到 <code>detachedTree</code> 变量正在引用该节点。要解决这一特定的内存泄漏，您需要研究使用 <code>detachedTree</code> 的代码并确保在不需要时，此代码可以移除其对节点的引用。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/yellow-node.png" alt="调查黄色节点"></p>
<h2 id="使用分配时间线确定-JS-堆内存泄漏"><a href="#使用分配时间线确定-JS-堆内存泄漏" class="headerlink" title="使用分配时间线确定 JS 堆内存泄漏"></a>使用分配时间线确定 JS 堆内存泄漏</h2><p>分配时间线是您可以用于跟踪 JS 堆中内存泄漏的另一种工具。</p>
<p>要显示分配时间线，请考虑使用下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = [];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">grow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  x.push(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">'x'</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'grow'</span>).addEventListener(<span class="string">'click'</span>, grow);</div></pre></td></tr></table></figure>
<p>每次按代码中引用的按钮时，都会向 <code>x</code> 数组添加一个由 100 万个字符组成的字符串。</p>
<p>要记录分配时间线，请打开 DevTools，然后转到 <strong>Profiles</strong> 面板，选择 <strong>Record Allocation Timeline</strong> 单选按钮，按 <strong>Start</strong> 按钮，执行您怀疑导致内存泄漏的操作。完成后，按 <strong>stop recording</strong> 按钮 (<img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/stop-recording.png" alt="stop recording 按钮">)。</p>
<p>记录时，请注意分配时间线上是否显示任何蓝色竖线（如下面的屏幕截图所示）。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/new-allocations.png" alt="新分配"></p>
<p>这些蓝色竖线表示新内存分配。新内存分配中可能存在内存泄漏。 您可以在竖线上放大，将 <strong>Constructor</strong> 窗格筛选为仅显示在指定时间范围内分配的对象。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/zoomed-allocation-timeline.png" alt="缩放的分配时间线"></p>
<p>展开对象并点击它的值，可以在 <strong>Object</strong> 窗格中查看其更多详情。 例如，在下面的屏幕截图中，通过查看新分配对象的详细信息，您可以看到它被分配到 <code>Window</code> 作用域中的 <code>x</code> 变量。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/object-details.png" alt="对象详情"></p>
<h2 id="按函数调查内存分配"><a href="#按函数调查内存分配" class="headerlink" title="按函数调查内存分配"></a>按函数调查内存分配</h2><p>使用 <strong>Record Allocation Profiler</strong> 类型可按 JavaScript 函数查看内存分配。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/record-allocation-profile.png" alt="Record Allocation Profiler"></p>
<ol>
<li>选择 <strong>Record Allocation Profiler</strong> 单选按钮。如果页面上有一个工作线程，您可以使用 <strong>Start</strong> 按钮旁的下拉菜单选择它作为分析目标。</li>
<li>按 <strong>Start</strong> 按钮。</li>
<li>在您想调查的页面上执行操作。</li>
<li>完成所有操作时按 <strong>Stop</strong> 按钮。</li>
</ol>
<p>DevTools 按函数显示内存分配明细。默认视图为 <strong>Heavy (Bottom Up)</strong>，将分配了最多内存的函数显示在最上方。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/allocation-profile.png" alt="分配分析"></p>
<h2 id="发现频繁的垃圾回收"><a href="#发现频繁的垃圾回收" class="headerlink" title="发现频繁的垃圾回收"></a>发现频繁的垃圾回收</h2><p>如果感觉页面经常暂停，则可能存在垃圾回收问题。</p>
<p>您可以使用 Chrome 任务管理器或者 Timeline 内存记录发现频繁的垃圾回收。 在任务管理器中，<strong>Memory</strong> 或 <strong>JavaScript Memory</strong> 值频繁上升和下降表示存在频繁的垃圾回收。在 Timeline 记录中，JS 堆或节点计数图表频繁上升和下降指示存在频繁的垃圾回收。</p>
<p>确定问题后，您可以使用分配时间线记录找出内存正在分配到什么地方，以及哪些函数导致分配。</p>
<h1 id="内存术语"><a href="#内存术语" class="headerlink" title="内存术语"></a>内存术语</h1><p>本部分将介绍内存分析中的常用术语，适用于不同语言的各种内存分析工具。</p>
<p>此处介绍的术语和概念适用于 <a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/heap-snapshots" target="_blank" rel="external">Chrome DevTools 堆分析器</a>。如果您之前使用过 Java、.NET 或其他内存分析器，那么本部分内容对您来说将是全新的。</p>
<h2 id="对象大小"><a href="#对象大小" class="headerlink" title="对象大小"></a>对象大小</h2><p>将内存视为具有原语类型（如数字和字符串）和对象（关联数组）的图表。形象一点，可以将内存表示为一个由多个互连的点组成的图表，如下所示：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/thinkgraph.png" alt="内存的直观表示"></p>
<p>对象可通过以下两种方式占用内存：</p>
<ul>
<li>直接通过对象自身占用。</li>
<li>通过保持对其他对象的引用隐式占用，这种方式可以阻止这些对象被垃圾回收器（简称 <strong>GC</strong>）自动处置。</li>
</ul>
<p>使用 DevTools 中的堆分析器（一种用于检查在“Profiles”下发现的内存问题的工具）时，您会看到多个信息列。<strong>Shallow Size</strong> 和 <strong>Retained Size</strong> 这两个列比较引人注目，但它们表示什么呢？</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/shallow-retained.png" alt="浅层大小和保留大小"></p>
<h3 id="浅层大小"><a href="#浅层大小" class="headerlink" title="浅层大小"></a>浅层大小</h3><p>这是对象自身占用内存的大小。</p>
<p>典型的 JavaScript 对象会将一些内存用于自身的说明和保存中间值。通常，只有数组和字符串会有明显的浅层大小。不过，字符串和外部数组的主存储一般位于渲染器内存中，仅将一个小包装器对象置于 JavaScript 堆上。</p>
<p>渲染器内存是渲染检查页面的进程的内存总和：原生内存 + 页面的 JS 堆内存 + 页面启动的所有专用工作线程的 JS 堆内存。尽管如此，即使一个小对象也可能通过阻止其他对象被自动垃圾回收进程处理的方式间接地占用大量内存。</p>
<h3 id="保留大小"><a href="#保留大小" class="headerlink" title="保留大小"></a>保留大小</h3><p>这是将对象本身连同其无法从 <strong>GC 根</strong>到达的相关对象一起删除后释放的内存大小。</p>
<p><strong>GC 根</strong>由<em>句柄</em>组成，这些句柄在从原生代码引用 V8 外部的 JavaScript 对象时创建（本地或全局）。所有此类句柄都可以在 <strong>GC 根</strong> &gt; <strong>句柄作用域</strong>和 <strong>GC 根</strong> &gt; <strong>全局句柄</strong>下的堆快照内找到。本文档对句柄的介绍没有深入到浏览器实现的细节，可能让您感到困惑。您不必担心 GC 根和句柄。</p>
<p>存在很多内部 GC 根，其中的大部分都不需要用户关注。从应用角度来看，存在以下种类的根：</p>
<ul>
<li>Window 全局对象（位于每个 iframe 中）。堆快照中有一个距离字段，表示从 window 出发的最短保留路径上的属性引用数量。</li>
<li>文档 DOM 树，由可以通过遍历文档到达的所有原生 DOM 节点组成。并不是所有的节点都有 JS 包装器，不过，如果有包装器，并且文档处于活动状态，包装器也将处于活动状态。</li>
<li>有时，对象可能会被调试程序上下文和 DevTools 控制台保留（例如，在控制台评估后）。在调试程序中清除控制台并移除活动断点，创建堆快照。</li>
</ul>
<p>内存图从根开始，根可以是浏览器的 <code>window</code> 对象或 Node.js 模块的 <code>Global</code> 对象。您无法控制此根对象的垃圾回收方式。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/dontcontrol.png" alt="无法控制的对象"></p>
<p>任何无法从根到达的对象都会被 GC 回收。</p>
<p>注：浅层大小和保留大小列均以字节为单位表示数据。</p>
<h2 id="对象保留树"><a href="#对象保留树" class="headerlink" title="对象保留树"></a>对象保留树</h2><p>堆是一个由互连的对象组成的网络。在数学领域，此结构被称为“图表”或内存图。图表由通过<em>边缘</em>连接的<em>节点</em>组成，两者都是给定标签。</p>
<ul>
<li><strong>节点</strong>（<em>或对象</em>）使用<em>构造函数</em>（用于构建节点）的名称进行标记。</li>
<li><strong>边缘</strong>使用<em>属性</em>的名称进行标记。</li>
</ul>
<p>了解<a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/heap-snapshots" target="_blank" rel="external">如何使用堆分析器记录分析</a>。我们可以从下面的堆分析器记录中看到一些引人注目的参数，例如距离：距离是指与 GC 根之间的距离。如果相同类型的几乎所有对象的距离都相同，只有少数对象的距离偏大，则有必要进行调查。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/root.png" alt="距根的距离"></p>
<h2 id="支配项"><a href="#支配项" class="headerlink" title="支配项"></a>支配项</h2><p>支配对象由一个树结构组成，因为每个对象都有且仅有一个支配项。对象的支配项可能缺少对其所支配对象的直接应用；也就是说，支配项的树不是图表的生成树。</p>
<p>在下面的图表中：</p>
<ul>
<li>节点 1 支配节点 2</li>
<li>节点 2 支配节点 3 、4 和 6</li>
<li>节点 3 支配节点 5</li>
<li>节点 5 支配节点 8</li>
<li>节点 6 支配节点 7</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/dominatorsspanning.png" alt="支配项树结构"></p>
<p>在下面的示例中，节点 <code>#3</code> 是 <code>#10</code> 的支配项，但 <code>#7</code> 也存在于从 GC 到 <code>#10</code> 的每一个简单路径中。因此，如果对象 B 存在于从根到对象 A 的每一个简单路径中，那么对象 B 就是对象 A 的支配项。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/dominators.gif" alt="支配项动画图示"></p>
<h2 id="V8-详细信息"><a href="#V8-详细信息" class="headerlink" title="V8 详细信息"></a>V8 详细信息</h2><p>分析内存时，了解堆快照的显示方式非常有用。本部分将介绍一些特定于 <strong>V8 JavaScript 虚拟机</strong>（V8 VM 或 VM）的内存相关主题。</p>
<h3 id="JavaScript-对象表示"><a href="#JavaScript-对象表示" class="headerlink" title="JavaScript 对象表示"></a>JavaScript 对象表示</h3><p>存在三种原语类型：</p>
<ul>
<li>数字（例如 3.14159..）</li>
<li>布尔值（true 或 false）</li>
<li>字符串（例如“Werner Heisenberg”）</li>
</ul>
<p>它们无法引用其他值，并且始终是叶或终止节点。</p>
<p><strong>数字</strong>可以存储为：</p>
<ul>
<li>中间 31 位整型值（称为<strong>小整型</strong> (<em>SMI</em>)），或</li>
<li>堆对象，作为<strong>堆数字</strong>引用。堆数字用于存储不适合 SMI 格式的值（例如<em>双精度</em>），或者在需要将值“包装”起来时使用（例如在值上设置属性）。</li>
</ul>
<p><strong>字符串</strong>可以存储在以下位置：</p>
<ul>
<li><strong>VM 堆</strong>中，或</li>
<li><strong>渲染器内存</strong>中（外部）。将创建一个<em>包装器对象</em>并用于访问外部存储空间，例如，外部存储空间是存储脚本源和从网页接收（而不是复制到 VM 堆上）的其他内容的位置。</li>
</ul>
<p>新 JavaScript 对象的内存分配自专用的 JavaScript 堆（或 <strong>VM 堆</strong>）。这些对象由 V8 的垃圾回收器管理，因此，只要存在一个对它们的强引用，它们就会一直保持活动状态。</p>
<p><strong>原生对象</strong>是 JavaScript 堆之外的任何对象。与堆对象相反，原生对象在其生命周期内不由 V8 垃圾回收器管理，并且只能使用其 JavaScript 包装器对象从 JavaScript 访问。</p>
<p><strong>Cons 字符串</strong>是一种由存储并联接的成对字符串组成的对象，是串联的结果。<em>cons 字符串</em>内容仅根据需要进行联接。一个示例便是需要构造已联接字符串的子字符串。</p>
<p>例如，如果您将 <strong>a</strong> 与 <strong>b</strong> 串联，您将获得一个字符串 (a, b)，它表示串联结果。如果您稍后将 <strong>d</strong> 与该结果串联，您将得到另一个 cons 字符串 ((a, b), d)。</p>
<p><strong>数组</strong> - 数组是一个具有数字键的对象。它们在 V8 VM 中广泛使用，用于存储大量数据。用作字典的成套键值对采用数组形式。</p>
<p>典型的 JavaScript 对象可以是两个数组类型之一，用于存储：</p>
<ul>
<li>命名属性，以及</li>
<li>数字元素</li>
</ul>
<p>数字元素如果属性数量非常少，可以将其存储在 JavaScript 对象自身内部。</p>
<p><strong>映射</strong> - 一种用于说明对象种类及其布局的对象。例如，可以使用映射说明用于<a href="https://developers.google.com/v8/design.html#prop_access" target="_blank" rel="external">快速属性访问</a>的隐式对象层次结构。</p>
<h3 id="对象组"><a href="#对象组" class="headerlink" title="对象组"></a>对象组</h3><p>每个原生对象组都由保持对彼此的相互引用的对象组成。例如，在 DOM 子树中，每个节点都有一个指向其父级的链接，并链接到下一个子级和下一个同级，形成一个互连图。请注意，原生对象不会在 JavaScript 堆中表示 - 这正是它们的大小为什么为零的原因。相反，创建包装器对象。</p>
<p>每个包装器对象都会保持对相应原生对象的引用，用于将命令重定向到自身。这样，对象组会保持包装器对象。不过，这不会形成一个无法回收的循环，因为 GC 非常智能，可以释放包装器对象不再被引用的对象组。但是，忘记释放单个包装器将保持整个组和关联的包装器。</p>
<h1 id="如何记录堆快照"><a href="#如何记录堆快照" class="headerlink" title="如何记录堆快照"></a>如何记录堆快照</h1><p>了解如何使用 Chrome DevTools 的堆分析器记录堆快照以及如何查找内存泄漏。</p>
<p>Chrome DevTools 的堆分析器可以按页面的 JavaScript 对象和相关 DOM 节点显示内存分配（另请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/memory-101#objects-retaining-tree" target="_blank" rel="external">对象保留树</a>）。使用分析器可以拍摄 JS 堆快照、分析内存图、比较快照以及查找内存泄漏。</p>
<h2 id="拍摄快照"><a href="#拍摄快照" class="headerlink" title="拍摄快照"></a>拍摄快照</h2><p>在 Profiles 面板上，选择 <strong>Take Heap Snapshot</strong>，然后点击 <strong>Start</strong> 或者按 Cmd + E 或 Ctrl + E：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/profiling-type.png" alt="选择分析类型"></p>
<p><strong>快照</strong>最初存储在渲染器进程内存中。当您点击快照图标进行查看时，它们将根据要求传输到 DevTools 中。</p>
<p>在快照加载到 DevTools 中并解析后，快照名称下方将出现一个数字，显示<a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/memory-101#object-sizes" target="_blank" rel="external">可到达 JavaScript 对象</a>的总大小：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/total-size.png" alt="可到达对象的总大小"></p>
<p>注：只有可到达对象才会包含到快照中。此外，拍摄快照始终从垃圾回收开始。</p>
<h2 id="清除快照"><a href="#清除快照" class="headerlink" title="清除快照"></a>清除快照</h2><p>按 Clear all profiles 图标可以（同时从 DevTools 和渲染器内存）移除快照：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/remove-snapshots.png" alt="移除快照"></p>
<p>关闭 DevTools 窗口不会从渲染器内存中删除配置文件。重新打开 DevTools 时，之前拍摄的所有快照都会重新显示在快照列表中。</p>
<p><strong>示例：</strong>查看此<a href="https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example3.html" target="_blank" rel="external">离散对象</a>示例，并使用堆分析器对其进行分析。您应看到多个（对象）项目分配。</p>
<h2 id="查看快照"><a href="#查看快照" class="headerlink" title="查看快照"></a>查看快照</h2><p>从不同角度查看不同任务的快照。</p>
<p><strong>Summary 视图</strong>可以显示按构造函数名称分组的对象。使用此视图可以根据按构造函数名称分组的类型深入了解对象（及其内存使用）。此视图特别适用于<a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/memory-diagnosis#narrow-down-causes-of-memory-leaks" target="_blank" rel="external">跟踪 DOM 泄漏</a>。</p>
<p><strong>Comparison 视图</strong>可以显示两个快照之间的不同。使用此视图可以比较两个（或多个）内存快照在某个操作前后的差异。检查已释放内存的变化和参考计数让您可以确认是否存在内存泄漏及其原因。</p>
<p><strong>Containment 视图</strong>允许您探索堆内容。此视图提供了一种更好的对象结构视图，有助于分析全局命名空间 (window) 中引用的对象以找出是什么让它们始终如影随形。使用此视图可以分析闭包以及在较低级别深入了解您的对象。</p>
<p><strong>Dominators 视图</strong>可以显示<a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/memory-101#dominators" target="_blank" rel="external">支配树</a>，并且对于查找聚集点非常有用。此视图有助于确认对对象的意外引用已消失，以及删除/垃圾回收正在运行。</p>
<p>要在视图间切换，请使用视图底部的选择器：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/switch-views.png" alt="切换视图选择器"></p>
<p>注：并不是所有属性都存储在 JavaScript 堆上。不会捕捉使用执行原生代码的 getter 实现的属性。另外，也不会捕捉数字等非字符串值。</p>
<h3 id="Summary-视图"><a href="#Summary-视图" class="headerlink" title="Summary 视图"></a>Summary 视图</h3><p>快照最初会在 Summary 视图下打开并显示对象概览，可以将此视图展开以显示实例：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/summary-view.png" alt="Summary 视图"></p>
<p>顶级条目为“概览”行。这些行显示：</p>
<ul>
<li><strong>Constructor</strong> 表示使用此构造函数创建的所有对象。</li>
<li><strong>对象实例数</strong>显示在 # 列中。</li>
<li><strong>Shallow Size</strong> 列显示通过特定构造函数创建的所有对象浅层大小的总和。浅层大小是指对象自身占用的内存大小（一般来说，数组和字符串的浅层大小比较大）。另请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/memory-101#object-sizes" target="_blank" rel="external">对象大小</a>。</li>
<li><strong>Retained Size</strong> 列显示同一组对象中最大的保留大小。某个对象删除后（其依赖项不再可到达）可以释放的内存大小称为保留大小。另请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/memory-101#object-sizes" target="_blank" rel="external">对象大小</a>。</li>
<li><strong>Distance</strong> 显示使用节点最短简单路径时距根节点的距离。</li>
</ul>
<p>在上面的视图中展开一个概览行后，将显示其所有实例。对于每一个实例，其浅层大小和保留大小将显示在相应的列中。@ 字符后面的数字是对象的唯一 ID，您可以使用此 ID 以对象为基础比较堆快照。</p>
<p>请注意，黄色对象具有 JavaScript 引用，红色对象则是引用自具有黄色背景的对象的已分离节点。</p>
<p><strong>各个构造函数（组）条目在堆分析器中与什么对应？</strong></p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/constructor-groups.jpg" alt="构造函数组"></p>
<ul>
<li><strong>（全局属性）</strong>– 全局对象（例如“window”）与其引用的对象之前的中间对象。如果对象使用构造函数 Person 创建且由某个全局对象占用，那么保留路径将类似于 [global] &gt;（全局属性）&gt; Person。这与常规相反，常规情况下对象直接引用彼此。我们出于性能原因而采用中间对象。全局项会定期修改，而属性访问优化则非常适合不适用于全局项的非全局对象。</li>
<li><strong>（根）</strong>– 保留树中的根条目是引用选定对象的条目。这些条目也可能是引擎出于其自身目的创建的引用。引擎具有引用对象的缓存，但所有此类引用非常弱，并且如果没有很强的引用，无法阻止对象被回收。</li>
<li><strong>（闭包）</strong>– 通过函数闭包对一组对象的引用计数</li>
<li><strong>（array、string、number、regexp）</strong> – 不同对象类型的列表，这些类型具有引用 Array、String、Number 或正则表达式的属性。</li>
<li><strong>（已编译代码）</strong>– 简单地说就是与已编译代码相关的任何内容。脚本与函数类似，但对应于 <script> 正文。SharedFunctionInfo (SFI) 是位于函数与已编译代码之间的对象。函数通常具有上下文，而 SFI 则没有。</li>
<li><strong>HTMLDivElement</strong>、<strong>HTMLAnchorElement</strong>、<strong>DocumentFragment</strong>等 – 引用元素或者您的代码所引用特定类型的文本对象。</li>
</ul>
<p><strong>示例：</strong>查看此<a href="https://developer.chrome.com/devtools/docs/heap-profiling-summary">演示页面</a>，了解如何使用 Summary 视图。</p>
<h3 id="Comparison-视图"><a href="#Comparison-视图" class="headerlink" title="Comparison 视图"></a>Comparison 视图</h3><p>通过相互比较多个快照，查找泄漏的对象。要验证某个特定的应用操作不会引起泄漏（例如，通常来说，一对直接和反向操作（比如打开一个文档然后将其关闭）不应泄漏任何垃圾），您可以按照下面的情形操作：</p>
<ol>
<li>在执行任何操作前拍摄一个堆快照。</li>
<li>执行操作（以一种您认为会引起泄漏的方式与页面交互）。</li>
<li>执行反向操作（执行反向交互并重复几次）。</li>
<li>拍摄第二个堆快照，然后将其视图更改为 Comparison，并与快照 1 进行比较。</li>
</ol>
<p>在 Comparison 视图中，将显示两个快照之间的不同。展开概览条目时，将显示已添加和删除的对象实例：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/comparison-view.png" alt="Comparison 视图"></p>
<p><strong>示例：</strong>查看此<a href="https://developer.chrome.com/devtools/docs/heap-profiling-comparison">演示页面</a>，了解如何使用快照比较检测泄漏。</p>
<h3 id="Containment-视图"><a href="#Containment-视图" class="headerlink" title="Containment 视图"></a>Containment 视图</h3><p>Containment 视图基本上是您应用的对象结构的“俯瞰视图”。利用此视图，您可以深入了解函数闭包、观察共同组成您的 JavaScript 对象的 VM 内部对象，以及从一个非常低的级别了解您的应用使用的内存量。</p>
<p>此视图提供了多个入口点：</p>
<ul>
<li><strong>DOMWindow 对象</strong>是被视为 JavaScript 代码“全局”对象的对象。</li>
<li><strong>GC 根</strong>是 VM 的垃圾使用的实际 GC 根。GC 根可以由内置对象映射、符号表、VM 线程堆栈、编译缓存、句柄作用域和全局句柄组成。</li>
<li><strong>原生对象</strong>是“推送”至 JavaScript 虚拟机内以允许自动化的浏览器对象，例如 DOM 节点和 CSS 规则。</li>
</ul>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/containment-view.png" alt="Containment 视图"></p>
<p><strong>示例：</strong>查看此<a href="https://developer.chrome.com/devtools/docs/heap-profiling-containment">演示页面</a>，了解如何使用此视图探索闭包和事件处理程序。</p>
<p><strong>闭包提示</strong></p>
<p>闭包有助于为函数命名，让您可以轻松地在快照中区分不同的闭包。例如，下面的示例未使用已命名的函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLargeClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> largeStr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">'x'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> lC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// this is NOT a named function</span></div><div class="line">    <span class="keyword">return</span> largeStr;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> lC;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而下面的示例则使用了已命名的函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLargeClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> largeStr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">'x'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> lC = <span class="function"><span class="keyword">function</span> <span class="title">lC</span>(<span class="params"></span>) </span>&#123; <span class="comment">// this IS a named function</span></div><div class="line">    <span class="keyword">return</span> largeStr;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> lC;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/domleaks.png" alt="为函数命名以区分闭包"></p>
<p><strong>示例：</strong> 查看此<a href="https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example7.html">为什么 eval 是魔鬼</a>示例，分析闭包对内存的影响。您可能还想深入研究此示例，了解如何记录<a href="https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example8.html">堆分配</a>。</p>
<h3 id="Dominators-视图"><a href="#Dominators-视图" class="headerlink" title="Dominators 视图"></a>Dominators 视图</h3><p><a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/memory-101#dominators">Dominators</a> 视图可以显示堆图的支配树。此视图类似于 Containment 视图，但缺少属性名称。这是因为对象的支配项可能缺少对它的直接引用；支配树不是堆图的生成树。但它仍然非常有用，可以帮助我们快速确定内存聚集点。</p>
<p><strong>注：</strong>在 Chrome Canary 中，可以通过转到 Settings &gt; Show advanced heap snapshot properties 然后重启 DevTools 的方式启用 Dominators 视图。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/dominators-view.png" alt="Dominators 视图"></p>
<p><strong>示例：</strong> 查看此<a href="https://developer.chrome.com/devtools/docs/heap-profiling-dominators">演示</a>，了解如何查找聚集点。深入研究此示例，了解<a href="https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example10.html">保留路径和支配项</a>。</p>
<h2 id="查询颜色编码"><a href="#查询颜色编码" class="headerlink" title="查询颜色编码"></a>查询颜色编码</h2><p>对象的属性和属性值具有不同的类型，并采用相应的颜色进行编码。 每个属性都具有以下四种类型之一：</p>
<ul>
<li><strong>a: property</strong> - 具有名称的正则属性，可以通过 .（点）运算符或者 [ ]（方括号）标记访问，例如 [“foo bar”]；</li>
<li><strong>0: element</strong> - 具有数字索引的正则属性，可以通过 [ ]（方括号）标记访问；</li>
<li><strong>a: context var</strong> - 函数上下文中的变量，可以通过其名称从函数闭包内访问；</li>
<li><strong>a: system prop</strong> - 由 JavaScript VM 添加的属性，无法从 JavaScript 代码访问。</li>
</ul>
<p>被指定为 <code>System</code> 的对象没有对应的 JavaScript 类型。这些对象是 JavaScript VM 的对象系统实现的一部分。V8 会将相同堆中的大多数内部对象分配为用户的 JS 对象。因此，这些对象只是 v8 内部项。</p>
<h2 id="查找特定对象"><a href="#查找特定对象" class="headerlink" title="查找特定对象"></a>查找特定对象</h2><p>要在回收的堆中查找某个对象，您可以使用 Ctrl + F 搜索并提供对象 ID。</p>
<h2 id="发现-DOM-泄漏"><a href="#发现-DOM-泄漏" class="headerlink" title="发现 DOM 泄漏"></a>发现 DOM 泄漏</h2><p>堆分析器可以反映浏览器原生对象（DOM 节点、CSS 规则）与 JavaScript 对象之间的双向依赖关系。这样有助于发现由被遗忘的已分离 DOM 子树引起的不可见泄漏。</p>
<p>DOM 泄漏可能比您想象的要大。思考下面的示例 - 什么时候发生 #tree GC？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> select = <span class="built_in">document</span>.querySelector;</div><div class="line"><span class="keyword">var</span> treeRef = select(<span class="string">"#tree"</span>);</div><div class="line"><span class="keyword">var</span> leafRef = select(<span class="string">"#leaf"</span>);</div><div class="line"><span class="keyword">var</span> body = select(<span class="string">"body"</span>);</div><div class="line"></div><div class="line">body.removeChild(treeRef);</div><div class="line"></div><div class="line"><span class="comment">//#tree can't be GC yet due to treeRef</span></div><div class="line">treeRef = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="comment">//#tree can't be GC yet due to indirect</span></div><div class="line"><span class="comment">//reference from leafRef</span></div><div class="line"></div><div class="line">leafRef = <span class="literal">null</span>;</div><div class="line"><span class="comment">//#NOW can be #tree GC</span></div></pre></td></tr></table></figure>
<p><code>#leaf</code> 可以维持对其父级 (parentNode) 的引用，并以递归方式返回 <code>#tree</code>，因此，只有 leafRef 被作废后，<code>#tree</code> 下的整个树才会成为 GC 的候选。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/treegc.png" alt="DOM 子树"></p>
<p><strong>示例：</strong> 查看此<a href="https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example6.html">泄漏的 DOM 节点</a>示例，了解 DOM 节点的什么地方可能出现泄漏以及如何检测泄漏。您还可以查看这个 <a href="https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example9.html">DOM 泄漏超出预期</a>示例，继续深入研究。</p>
<p>要详细了解 DOM 泄漏和内存分析基础知识，请参阅 Gonzalo Ruiz de Villa 编写的<a href="http://slid.es/gruizdevilla/memory">使用 Chrome DevTools 查找和调试内存泄漏</a>。</p>
<p><strong>示例</strong>： 查看此<a href="https://developer.chrome.com/devtools/docs/heap-profiling-dom-leaks">演示</a>，了解已分离的 DOM 树。</p>
<h1 id="如何使用分配分析器工具"><a href="#如何使用分配分析器工具" class="headerlink" title="如何使用分配分析器工具"></a>如何使用分配分析器工具</h1><p>使用分配分析器工具可以查找未正确执行垃圾回收的对象，并继续保留内存。</p>
<h2 id="工具的工作方式"><a href="#工具的工作方式" class="headerlink" title="工具的工作方式"></a>工具的工作方式</h2><p><strong>分配分析器</strong>将<a href="https://developers.google.com/web/tools/chrome-devtools/profile/memory-problems/heap-snapshots">堆分析器</a>的详细快照信息与 <a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/timeline-tool">Timeline 面板</a>的增量式更新和跟踪相结合。与这些工具类似，跟踪对象的堆分配涉及开始记录，执行一系列操作，然后停止记录进行分析。</p>
<p>该工具在整个记录过程中定期（频率高达每 50 毫秒一次！）拍摄堆快照，并在记录结束时最后拍摄一次快照。</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/object-tracker.png" alt="分配分析器"></p>
<p>注：@ 后面的数字是存在于拍摄的多个快照之间的对象 ID。使用此 ID 可以精确比较堆状态。显示对象的地址毫无意义，因为对象在垃圾回收过程中会被移动。</p>
<h2 id="启用分配分析器"><a href="#启用分配分析器" class="headerlink" title="启用分配分析器"></a>启用分配分析器</h2><p>要开始使用分配分析器，请执行以下操作：</p>
<ol>
<li>确保您已安装最新的 <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a>。</li>
<li>打开 Developer Tools，然后点击右下方的齿轮图标。</li>
<li>现在，打开 Profiler 面板，您会看到名为“Record Heap Allocations”的配置文件</li>
</ol>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/record-heap.png" alt="Record heap allocations 分析器"></p>
<h2 id="读取堆分配配置文件"><a href="#读取堆分配配置文件" class="headerlink" title="读取堆分配配置文件"></a>读取堆分配配置文件</h2><p>堆分配配置文件会显示正在创建对象的位置并确定保留路径。在下面的快照中，顶部的竖线指示在堆中发现新对象的时间。</p>
<p>每条线的高度与最近分配的对象大小对应，竖线的颜色表示这些对象是否仍然显示在最终的堆快照中。蓝色竖线表示在时间线最后对象仍然显示，灰色竖线表示对象已在时间线期间分配，但曾对其进行过垃圾回收：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/collected.png" alt="分配分析器快照"></p>
<p>在下面的快照中，操作执行了 10 次。示例程序缓存了五个对象，因此才有最后五条蓝色竖线。最左边蓝色竖线指示潜在问题。</p>
<p>然后，您可以使用上面时间线中的滑块放大特定快照并查看最近在该点分配的对象：</p>
<p><img src="https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/sliders.png" alt="放大快照"></p>
<p>点击堆中的特定对象会在堆快照的底部显示其保留树。检查对象的保留路径能够为您提供足够的信息以了解对象为什么未被回收，您可以进行必要的代码更改以移除不必要的引用。</p>
<h2 id="按函数查看内存分配"><a href="#按函数查看内存分配" class="headerlink" title="按函数查看内存分配"></a>按函数查看内存分配</h2><p>您还可以按 JavaScript 函数查看内存分配。如需了解详细信息，请参阅<a href="https://developers.google.com/web/tools/chrome-devtools/memory-problems/index#allocation-profile">按函数调查内存分配</a>。</p>
<p>Chrome DevTools是可扩展的。所以如果DevTools缺少所需的功能，你可以找到一个现有的扩展名，或者自己写一个。或者您可以将DevTools功能集成到应用程序中。</p>
<p>使用DevTools构建自定义解决方案有两种基本方法：</p>
<ul>
<li><strong>DevTools扩展</strong>。一个<a href="http://developer.chrome.com/extensions/">Chrome扩展</a>，可插入DevTools添加功能并延长其UI。</li>
<li><strong>调试协议客户端</strong>。使用Chrome <a href="https://developer.chrome.com/devtools/docs/debugger-protocol.html">远程调试协议</a>的第三方应用<a href="https://developer.chrome.com/devtools/docs/debugger-protocol.html">程序</a>可以插入Chrome中的低级调试支持。</li>
</ul>
<p>以下部分讨论两种方法。</p>
<h2 id="DevTools-Chrome扩展"><a href="#DevTools-Chrome扩展" class="headerlink" title="DevTools Chrome扩展"></a>DevTools Chrome扩展</h2><p>DevTools UI是嵌入Chrome中的Web应用程序。DevTools扩展程序使用<a href="http://developer.chrome.com/extensions/">Chrome扩展系统</a>向DevTools添加功能。DevTools扩展可以将新面板添加到DevTools，将新窗格添加到“元素和源”面板侧栏，检查资源和网络事件，以及评估正在检查的浏览器选项卡中的JavaScript表达式。</p>
<p>如果您想开发DevTools扩展程序：</p>
<ul>
<li>如果您之前尚未开发Chrome扩展程序，请参阅<a href="http://developer.chrome.com/extensions/overview.html">Chrome扩展程序概述</a>。</li>
<li>有关 创建Chrome DevTools扩展的详细信息，请参阅<a href="http://developer.chrome.com/extensions/devtools.html">扩展DevTools</a>。</li>
</ul>
<p>有关示例DevTools扩展的列表，请参阅<a href="https://developer.chrome.com/devtools/docs/sample-extensions.md">示例DevTools扩展</a>。这些示例包括许多可用于参考的开源扩展。</p>
<h2 id="调试协议客户端"><a href="#调试协议客户端" class="headerlink" title="调试协议客户端"></a>调试协议客户端</h2><p>第三方应用程序（如IDE，编辑器，持续集成线束和测试框架）可以与Chrome调试器集成，以便调试代码，实时预览代码和CSS更改以及控制浏览器。客户端使用<a href="https://developer.chrome.com/devtools/docs/debugger-protocol.html">Chrome调试协议</a>与Chrome的实例进行交互，Chrome实例可以在同一系统上运行或远程运行。</p>
<p>注意：目前，Chrome调试协议每页只支持<em>一个</em>客户端。所以您可以使用DevTools来检查页面，或使用第三方客户端，但不能同时使用。</p>
<p>与调试协议集成有两种方式：</p>
<ul>
<li>在Chrome中运行的应用程序（如基于Web的IDE）可以使用调试器模块<a href="http://developer.chrome.com/extensions/debugger.html">chrome.debugger</a>创建Chrome <a href="http://developer.chrome.com/extensions/debugger.html">扩展</a>。该模块允许扩展与直接与调试器交互，绕过DevTools UI。有关详细信息，请参阅<a href="https://developer.chrome.com/devtools/docs/debugger-protocol.html#extension">使用调试器扩展API</a>。</li>
<li>其他应用程序可以使用 <a href="https://developer.chrome.com/devtools/docs/debugger-protocol.html#remote">线路协议</a>直接与调试器集成。该协议涉及通过WebSocket连接交换JSON消息。</li>
</ul>
<p>有关示例集成，请参阅<a href="https://developer.chrome.com/devtools/docs/debugging-clients.md">示例调试协议客户端</a>。</p>
<h1 id="扩展DevTools"><a href="#扩展DevTools" class="headerlink" title="扩展DevTools"></a>扩展DevTools</h1><h2 id="概观"><a href="#概观" class="headerlink" title="概观"></a>概观</h2><p>DevTools扩展功能可以为Chrome DevTools添加功能。它可以添加新的UI面板和侧边栏，与被检查页面进行交互，获取有关网络请求的信息等。查看<a href="https://developer.chrome.com/devtools/docs/extensions-gallery">特色DevTools扩展</a>。DevTools扩展可以访问另外一组特定于DevTools的扩展API：</p>
<ul>
<li><code>devtools.inspectedWindow</code></li>
<li><code>devtools.network</code></li>
<li><code>devtools.panels</code></li>
</ul>
<p>DevTools扩展的结构与任何其他扩展名一样：它可以具有后台页面，内容脚本和其他项目。此外，每个DevTools扩展都有一个DevTools页面，可以访问DevTools API。</p>
<p><img src="https://developer.chrome.com/static/images/devtools-extension.png" alt="体现图显示DevTools页面与被检查窗口和背景页面进行通信。 显示后台页面与内容脚本进行通信并访问扩展API。 DevTools页面可以访问DevTools API，例如创建面板。"></p>
<h2 id="DevTools页面"><a href="#DevTools页面" class="headerlink" title="DevTools页面"></a>DevTools页面</h2><p>每次DevTools窗口打开时都会创建扩展的DevTools页面的一个实例。DevTools窗口的生命周期中存在DevTools页面。DevTools页面可以访问DevTools API和一组有限的扩展API。具体来说，DevTools页面可以：</p>
<ul>
<li>使用<code>devtools.panels</code> API 创建和与面板进行交互。</li>
<li>获取有关被检查窗口的信息，并使用<code>devtools.inspectedWindow</code>API 评估检查窗口中的代码。</li>
<li>使用<code>devtools.network</code> API 获取有关网络请求的信息。</li>
</ul>
<p>DevTools页面不能直接使用大多数扩展API。它可以访问 内容脚本具有访问权限的相同子集<code>extension</code> 和<code>runtime</code>API。像内容脚本一样，DevTools页面可以使用<a href="https://developer.chrome.com/extensions/messaging.html">Message Passing</a>与后台页面进行<a href="https://developer.chrome.com/extensions/messaging.html">通信</a>。有关示例，请参阅<a href="https://developer.chrome.com/extensions/devtools#injecting">注入内容脚本</a>。</p>
<h2 id="创建DevTools扩展"><a href="#创建DevTools扩展" class="headerlink" title="创建DevTools扩展"></a>创建DevTools扩展</h2><p>要为扩展创建一个DevTools页面，请<code>devtools_page</code> 在扩展清单中添加该字段：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: ...</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line">  <span class="string">"minimum_chrome_version"</span>: <span class="string">"10.0"</span>,</div><div class="line">  <span class="string">"devtools_page"</span>: <span class="string">"devtools.html"</span>,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>devtools_page</code>您的扩展的清单中指定的实例是为打开的每个DevTools窗口创建的。该页面可以使用<code>devtools.panels</code>API 将其他扩展页面作为面板和侧边栏添加到DevTools窗口 。</p>
<p>该<code>devtools_page</code>字段必须指向一个HTML页面。这与<code>background</code>字段不同，用于指定背景页面，可以直接指定JavaScript文件。</p>
<p>该<code>chrome.devtools.*</code>API模块只提供给DevTools窗口中加载的页面。内容脚本和其他扩展页没有这些API。因此，API仅在DevTools窗口的生命周期内可用。</p>
<p>还有一些DevTools API仍然是实验性的。请参阅<a href="http://developer.chrome.com/extensions/experimental.html">chrome.experimental。* API</a>的实验API列表和指导如何使用它们。</p>
<h2 id="DevTools-UI元素：面板和边栏窗格"><a href="#DevTools-UI元素：面板和边栏窗格" class="headerlink" title="DevTools UI元素：面板和边栏窗格"></a>DevTools UI元素：面板和边栏窗格</h2><p>除了通常的扩展UI元素（如浏览器操作，上下文菜单和弹出窗口）之外，DevTools扩展可以将UI元素添加到DevTools窗口中：</p>
<ul>
<li>甲<em>面板</em>是一个顶级标签，像元素，源和网络板。</li>
<li>一个<em>侧边栏窗格中</em>列出了与面板补充UI。“元素”面板上的“样式”，“计算样式”和“事件侦听器”窗格是侧栏窗格的示例。目前，您的扩展只能向“元素”面板添加边栏窗格。（请注意，侧边栏窗格的外观可能与图像不一致，具体取决于您使用的Chrome版本，以及DevTools窗口的停靠位置。）</li>
</ul>
<p>每个面板都是自己的HTML文件，可以包含其他资源（JavaScript，CSS，图像等）。创建基本面板如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">chrome.devtools.panels.create(<span class="string">"My Panel"</span>,</div><div class="line">    <span class="string">"MyPanelIcon.png"</span>,</div><div class="line">    <span class="string">"Panel.html"</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">panel</span>) </span>&#123;</div><div class="line">      <span class="comment">// code invoked on panel creation</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在面板或侧栏窗格中执行的JavaScript可以访问与DevTools页面相同的API。</p>
<p>为“面板”面板创建一个基本的边栏窗格如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chrome.devtools.panels.elements.createSidebarPane(<span class="string">"My Sidebar"</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">sidebar</span>) </span>&#123;</div><div class="line">        <span class="comment">// sidebar initialization code here</span></div><div class="line">        sidebar.setObject(&#123; <span class="attr">some_data</span>: <span class="string">"Some data to show"</span> &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在侧边栏窗格中显示内容有几种方法：</p>
<ul>
<li>HTML内容。调用 <code>setPage</code>以指定要在窗格中显示的HTML页面。</li>
<li>JSON数据。传递一个JSON对象 <code>setObject</code>。</li>
<li>JavaScript表达式。传递表达式 <code>setExpression</code>。DevTools评估被检查页面上下文中的表达式，并显示返回值。</li>
</ul>
<p>对于这两个<code>setObject</code>和<code>setExpression</code>的窗格显示，因为它会出现在DevTools控制台中的价值。但是，<code>setExpression</code>您可以显示DOM元素和任意JavaScript对象，而<code>setObject</code>只支持JSON对象。</p>
<h2 id="扩展组件之间进行通信"><a href="#扩展组件之间进行通信" class="headerlink" title="扩展组件之间进行通信"></a>扩展组件之间进行通信</h2><p>以下部分描述了DevTools扩展的不同组件之间进行通信的典型场景。</p>
<h3 id="注入内容脚本"><a href="#注入内容脚本" class="headerlink" title="注入内容脚本"></a>注入内容脚本</h3><p>DevTools页面无法<code>tabs.executeScript</code>直接调用。要从DevTools页面注入内容脚本，您必须使用<code>inspectedWindow.tabId</code> 属性检索被检查窗口标签的ID ，并将消息发送到后台页面。从后台页面，调用<code>tabs.executeScript</code>注入脚本。</p>
<p>如果已经注入了内容脚本，则可以使用该<code>eval</code>方法添加其他上下文脚本。有关详细信息，请参阅 <a href="https://developer.chrome.com/extensions/devtools#selected-element">将所选元素传递到内容脚本</a> 。</p>
<p>以下代码片段显示了如何使用内容脚本注入 <code>executeScript</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DevTools page -- devtools.js</span></div><div class="line"><span class="comment">// Create a connection to the background page</span></div><div class="line"><span class="keyword">var</span> backgroundPageConnection = chrome.runtime.connect(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"devtools-page"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">backgroundPageConnection.onMessage.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</div><div class="line">    <span class="comment">// Handle responses from the background page, if any</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Relay the tab ID to the background page</span></div><div class="line">chrome.runtime.sendMessage(&#123;</div><div class="line">    <span class="attr">tabId</span>: chrome.devtools.inspectedWindow.tabId,</div><div class="line">    <span class="attr">scriptToInject</span>: <span class="string">"content_script.js"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>背景页码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Background page -- background.js</span></div><div class="line">chrome.runtime.onConnect.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">devToolsConnection</span>) </span>&#123;</div><div class="line">    <span class="comment">// assign the listener function to a variable so we can remove it later</span></div><div class="line">    <span class="keyword">var</span> devToolsListener = <span class="function"><span class="keyword">function</span>(<span class="params">message, sender, sendResponse</span>) </span>&#123;</div><div class="line">        <span class="comment">// Inject a content script into the identified tab</span></div><div class="line">        chrome.tabs.executeScript(message.tabId,</div><div class="line">            &#123; <span class="attr">file</span>: message.scriptToInject &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// add the listener</span></div><div class="line">    devToolsConnection.onMessage.addListener(devToolsListener);</div><div class="line"></div><div class="line">    devToolsConnection.onDisconnect.addListener(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         devToolsConnection.onMessage.removeListener(devToolsListener);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在检查窗口中评估JavaScript"><a href="#在检查窗口中评估JavaScript" class="headerlink" title="在检查窗口中评估JavaScript"></a>在检查窗口中评估JavaScript</h3><p>您可以使用该<code>inspectedWindow.eval</code>方法在受检页面的上下文中执行JavaScript代码。您可以<code>eval</code>从DevTools页面，面板或侧边栏窗格中调用该 方法。</p>
<p>默认情况下，表达式在页面主框架的上下文中进行评估。现在，您可能会熟悉DevTools <a href="https://developer.chrome.com/devtools/docs/commandline-api">命令行API</a>功能，如元素检查（<code>inspect(elem)</code>），打破函数（<code>debug(fn)</code>），复制到剪贴板（<code>copy()</code>）等等。 <code>inspectedWindow.eval()</code>使用与DevTools控制台中键入的代码相同的脚本执行上下文和选项，允许在eval中访问这些API。例如，<a href="https://github.com/RedRibbon/SOAK/blob/ffdfad68ffb6051fa2d4e9db0219b3d234ac1ae8/pages/devtools.js#L6-L8">SOAK</a>使用它来检查元素：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chrome.devtools.inspectedWindow.eval(</div><div class="line">   <span class="string">"inspect($$('head script[data-soak=main]')[0])"</span>,</div><div class="line">   <span class="function"><span class="keyword">function</span>(<span class="params">result, isException</span>) </span>&#123; &#125;</div><div class="line"> );</div></pre></td></tr></table></figure>
<p>或者，使用<code>useContentScriptContext: true</code>选项<code>inspectedWindow.eval()</code>来评估与内容脚本相同上下文中的表达式。调用<code>eval</code>与<code>useContentScriptContext: true</code>不<em>创造</em>内容脚本上下文，所以你必须在调用之前加载背景脚本<code>eval</code>，通过调用<code>executeScript</code>或者通过在指定内容的脚本<code>manifest.json</code>文件。</p>
<p>一旦上下文脚本上下文存在，您可以使用此选项来注入其他内容脚本。</p>
<p><code>eval</code>当在正确的上下文中使用该方法并且在不适当地使用时是危险的。<code>tabs.executeScript</code>如果您不需要访问受检页面的JavaScript上下文，请使用该 方法。有关详细的注意事项和两种方法的比较，请参见<code>inspectedWindow</code>。</p>
<h3 id="将所选元素传递到内容脚本"><a href="#将所选元素传递到内容脚本" class="headerlink" title="将所选元素传递到内容脚本"></a>将所选元素传递到内容脚本</h3><p>内容脚本不能直接访问当前选定的元素。但是，您执行的任何代码<code>inspectedWindow.eval</code>都可以访问DevTools控制台和命令行API。例如，在评估的代码中，您可以使用它<code>$0</code>来访问所选元素。</p>
<p>将所选元素传递给内容脚本：</p>
<ul>
<li>在内容脚本中创建一个方法，该方法将所选元素作为参数。</li>
<li>使用<code>inspectedWindow.eval</code> 该<code>useContentScriptContext: true</code>选项从DevTools页面调用该方法。</li>
</ul>
<p>您的内容脚本中的代码可能如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSelectedElement</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">    <span class="comment">// do something with the selected element</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从DevTools页面调用方法，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chrome.devtools.inspectedWindow.eval(<span class="string">"setSelectedElement($0)"</span>,</div><div class="line">    &#123; <span class="attr">useContentScriptContext</span>: <span class="literal">true</span> &#125;);</div></pre></td></tr></table></figure>
<p>该<code>useContentScriptContext: true</code>选项指定表达式必须在与内容脚本相同的上下文中进行求值，因此可以访问该<code>setSelectedElement</code>方法。</p>
<h3 id="获取参考面板-window"><a href="#获取参考面板-window" class="headerlink" title="获取参考面板 window"></a>获取参考面板 <code>window</code></h3><p>要从devtools面板postMessage，您需要引用其窗口对象。从panel.onShown事件处理程序中获取面板的iframe窗口：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">onShown.addListener(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>)</div><div class="line"><span class="title">extensionPanel</span>.<span class="title">onShown</span>.<span class="title">addListener</span>(<span class="params">function (extPanelWindow</span>) </span>&#123;</div><div class="line">    extPanelWindow <span class="keyword">instanceof</span> Window; <span class="comment">// true</span></div><div class="line">    extPanelWindow.postMessage( <span class="comment">// …</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="从内容脚本到DevTools页面的消息传递"><a href="#从内容脚本到DevTools页面的消息传递" class="headerlink" title="从内容脚本到DevTools页面的消息传递"></a>从内容脚本到DevTools页面的消息传递</h3><p>通过背景页面，DevTools页面和内容脚本之间的消息传递是间接的。</p>
<p>当发送消息<em>到</em>一个内容脚本中，背景页面可以使用<code>tabs.sendMessage</code>方法，其引导消息给在一个特定的选项卡内容的脚本，如图 <a href="https://developer.chrome.com/extensions/devtools#injecting">注入内容脚本</a>。</p>
<p>当<em>从</em>内容脚本发送消息<em>时</em>，没有现成的方法将消息传递到与当前选项卡相关联的正确的DevTools页面实例。作为解决方法，您可以让DevTools页面与后台页面建立长时间的连接，并使后台页面保持连接的标签ID映射，从而可以将每条消息路由到正确的连接。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// background.js</span></div><div class="line"><span class="keyword">var</span> connections = &#123;&#125;;</div><div class="line"></div><div class="line">chrome.runtime.onConnect.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">port</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> extensionListener = <span class="function"><span class="keyword">function</span> (<span class="params">message, sender, sendResponse</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// The original connection event doesn't include the tab ID of the</span></div><div class="line">        <span class="comment">// DevTools page, so we need to send it explicitly.</span></div><div class="line">        <span class="keyword">if</span> (message.name == <span class="string">"init"</span>) &#123;</div><div class="line">          connections[message.tabId] = port;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">	<span class="comment">// other message handling</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Listen to messages sent from the DevTools page</span></div><div class="line">    port.onMessage.addListener(extensionListener);</div><div class="line"></div><div class="line">    port.onDisconnect.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">port</span>) </span>&#123;</div><div class="line">        port.onMessage.removeListener(extensionListener);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> tabs = <span class="built_in">Object</span>.keys(connections);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=tabs.length; i &lt; len; i++) &#123;</div><div class="line">          <span class="keyword">if</span> (connections[tabs[i]] == port) &#123;</div><div class="line">            <span class="keyword">delete</span> connections[tabs[i]]</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Receive message from content script and relay to the devTools page for the</span></div><div class="line"><span class="comment">// current tab</span></div><div class="line">chrome.runtime.onMessage.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">request, sender, sendResponse</span>) </span>&#123;</div><div class="line">    <span class="comment">// Messages from content scripts should have sender.tab set</span></div><div class="line">    <span class="keyword">if</span> (sender.tab) &#123;</div><div class="line">      <span class="keyword">var</span> tabId = sender.tab.id;</div><div class="line">      <span class="keyword">if</span> (tabId <span class="keyword">in</span> connections) &#123;</div><div class="line">        connections[tabId].postMessage(request);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Tab not found in connection list."</span>);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"sender.tab not defined."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>DevTools页面（或面板或侧边窗格）建立如下连接：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a connection to the background page</span></div><div class="line"><span class="keyword">var</span> backgroundPageConnection = chrome.runtime.connect(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"panel"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">backgroundPageConnection.postMessage(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'init'</span>,</div><div class="line">    <span class="attr">tabId</span>: chrome.devtools.inspectedWindow.tabId</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="从注入脚本到DevTools页面的消息传递"><a href="#从注入脚本到DevTools页面的消息传递" class="headerlink" title="从注入脚本到DevTools页面的消息传递"></a>从注入脚本到DevTools页面的消息传递</h3><p>虽然上述解决方案适用于内容脚本，但直接注入到页面中的<code>&lt;script&gt;</code>代码（例如通过附加标签或通过<code>inspectedWindow.eval</code>）需要不同的策略。在这种情况下，<code>runtime.sendMessage</code>不会按预期的方式将消息传递给后台脚本。</p>
<p>作为解决方法，您可以将注入的脚本与充当中介的内容脚本相结合。要将消息传递到内容脚本，可以使用该API。下面是一个例子，假设前面部分的后台脚本：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage"> <code>window.postMessage</code></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// injected-script.js</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.postMessage(&#123;</div><div class="line">  <span class="attr">greeting</span>: <span class="string">'hello there!'</span>,</div><div class="line">  <span class="attr">source</span>: <span class="string">'my-devtools-extension'</span></div><div class="line">&#125;, <span class="string">'*'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content-script.js</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="comment">// Only accept messages from the same frame</span></div><div class="line">  <span class="keyword">if</span> (event.source !== <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> message = event.data;</div><div class="line"></div><div class="line">  <span class="comment">// Only accept messages that we know are ours</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> message !== <span class="string">'object'</span> || message === <span class="literal">null</span> ||</div><div class="line">      !message.source === <span class="string">'my-devtools-extension'</span>) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  chrome.runtime.sendMessage(message);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>您的消息现在将从注入的脚本流向内容脚本到后台脚本，最后到DevTools页面。</p>
<p>您还可以<a href="https://github.com/GoogleChrome/devtools-docs/issues/143">在这里</a>考虑<a href="https://github.com/GoogleChrome/devtools-docs/issues/143">两种替代的消息传递技术</a>。</p>
<h3 id="检测当DevTools打开和关闭时"><a href="#检测当DevTools打开和关闭时" class="headerlink" title="检测当DevTools打开和关闭时"></a>检测当DevTools打开和关闭时</h3><p>如果您的扩展需要跟踪DevTools窗口是否打开，您可以将<a href="https://developer.chrome.com/extensions/runtime#event-onConnect">anConnect</a>侦听器添加到后台页面，并从DevTools页面调用 <a href="https://developer.chrome.com/extensions/runtime#method-connect">connect</a>。由于每个选项卡可以打开其自己的DevTools窗口，您可能会收到多个连接事件。要跟踪是否打开任何DevTools窗口，您需要计算连接和断开事件，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// background.js</span></div><div class="line"><span class="keyword">var</span> openCount = <span class="number">0</span>;</div><div class="line">chrome.runtime.onConnect.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">port</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (port.name == <span class="string">"devtools-page"</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (openCount == <span class="number">0</span>) &#123;</div><div class="line">        alert(<span class="string">"DevTools window opening."</span>);</div><div class="line">      &#125;</div><div class="line">      openCount++;</div><div class="line"></div><div class="line">      port.onDisconnect.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">port</span>) </span>&#123;</div><div class="line">          openCount--;</div><div class="line">          <span class="keyword">if</span> (openCount == <span class="number">0</span>) &#123;</div><div class="line">            alert(<span class="string">"Last DevTools window closing."</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>DevTools页面创建一个这样的连接：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// devtools.js</span></div><div class="line"></div><div class="line"><span class="comment">// Create a connection to the background page</span></div><div class="line"><span class="keyword">var</span> backgroundPageConnection = chrome.runtime.connect(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"devtools-page"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="DevTools扩展示例"><a href="#DevTools扩展示例" class="headerlink" title="DevTools扩展示例"></a>DevTools扩展示例</h2><p>浏览这些DevTools扩展示例的源代码：</p>
<ul>
<li><a href="https://github.com/PolymerLabs/polymer-devtools-extension">Polymer Devtools Extension</a> - 使用主机页面中运行的许多帮助器来查询DOM / JS状态以发送回自定义面板。</li>
<li><a href="https://github.com/facebook/react-devtools">React DevTools扩展</a> - 使用Blink的子模块重用DevTools UI组件。</li>
<li><a href="https://github.com/emberjs/ember-inspector">Ember Inspector</a> - 共享扩展内核，适用于Chrome和Firefox。</li>
<li><a href="https://github.com/thomasboyt/coquette-inspect">Coquette-inspect</a> - 一个干净的基于React的扩展，将调试代理注入主机页面。</li>
<li>我们的<a href="https://developer.chrome.com/devtools/docs/extensions-gallery">DevTools扩展程序库</a>和<a href="https://developer.chrome.com/devtools/docs/sample-extensions">示例扩展</a>程序具有更有价值的应用程序来安装，尝试和学习。</li>
</ul>
<h2 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h2><p>有关扩展可以使用的标准API的信息，请参阅 <a href="http://developer.chrome.com/extensions/api_index.html">chrome。* API</a> 和<a href="http://developer.chrome.com/extensions/api_other.html">其他API</a>。</p>
<p><a href="http://groups.google.com/group/google-chrome-developer-tools/topics">给我们反馈！</a> 您的意见和建议有助于我们改进API。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>您可以在<a href="http://developer.chrome.com/extensions/samples.html#devtools">Samples</a>中找到使用DevTools API的 <a href="http://developer.chrome.com/extensions/samples.html#devtools">示例</a>。</p>
<h1 id="使用-Lighthouse-审查网络应用"><a href="#使用-Lighthouse-审查网络应用" class="headerlink" title="使用 Lighthouse 审查网络应用"></a>使用 Lighthouse 审查网络应用</h1><p>是一个开源的自动化工具，用于改进网络应用的质量。 您可以将其作为一个 Chrome 扩展程序运行，或从命令行运行。 您为 Lighthouse 提供一个您要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。</p>
<p>从此处，您可以失败的测试为指示器，看看可以采取哪些措施来改进您的应用。</p>
<p>注：Lighthouse 目前非常关注 Progressive Web App 功能，如“添加到主屏幕”和离线支持。不过，此项目的首要目标是针对网络应用质量的各个方面提供端到端审查。</p>
<h2 id="使用入门-1"><a href="#使用入门-1" class="headerlink" title="使用入门"></a>使用入门</h2><p>运行 Lighthouse 的方式有两种：作为 Chrome 扩展程序运行，或作为命令行工具运行。 Chrome 扩展程序提供了一个对用户更友好的界面，方便读取报告。 命令行工具允许您将 Lighthouse 集成到持续集成系统。</p>
<h3 id="Chrome-扩展程序"><a href="#Chrome-扩展程序" class="headerlink" title="Chrome 扩展程序"></a>Chrome 扩展程序</h3><p>下载 Google Chrome 52 或更高版本。</p>
<p>安装 <a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk">Lighthouse Chrome 扩展程序</a>。</p>
<p>转到您要进行审查的页面。</p>
<p>点击位于 Chrome 工具栏上的 Lighthouse 图标 (<img src="https://developers.google.com/web/tools/lighthouse/images/lighthouse-icon-16.png" alt="Lighthouse 图标">)。</p>
<p><img src="https://developers.google.com/web/tools/lighthouse/images/icon-on-toolbar.png" alt="Chrome 工具栏上的 Lighthouse 图标"></p>
<p>如果您在工具栏上没有看到此图标，它可能隐藏在 Chrome 的主菜单中。</p>
<p><img src="https://developers.google.com/web/tools/lighthouse/images/icon-in-menu.png" alt="Chrome 的菜单中的 Lighthouse 图标"></p>
<p>点击此图标后，您应看到一个菜单。</p>
<p><img src="https://developers.google.com/web/tools/lighthouse/images/menu.png" alt="Lighthouse 菜单"></p>
<p>如果您想仅运行审查的子集，则点击 <strong>Options</strong> 按钮并停用您不关注的审查。 向下滚动并按 <strong>OK</strong> 以确认您的更改。</p>
<p><img src="https://developers.google.com/web/tools/lighthouse/images/options.png" alt="Lighthouse 选项菜单"></p>
<p>点击 <strong>Generate report</strong> 按钮以针对当前打开的页面运行 Lighthouse 测试。</p>
<p>在完成审查后，Lighthouse 将打开一个新标签，并在页面的结果上显示一个报告。</p>
<p><img src="https://developers.google.com/web/tools/lighthouse/images/report.png" alt="Lighthouse 报告"></p>
<h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>安装 <a href="https://nodejs.org/">Node</a>，需要版本 5 或更高版本。</p>
<p>安装 Lighthouse 作为一个全局节点模块。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g lighthouse</div></pre></td></tr></table></figure>
<p>针对一个页面运行 Lighthouse 审查。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lighthouse https://airhorner.com/</div></pre></td></tr></table></figure>
<p>传递 <code>--help</code> 标志以查看可用的输入和输出选项。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lighthouse --help</div></pre></td></tr></table></figure>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>Lighthouse 是一个开放源代码项目，欢迎大家积极做贡献。请查看存储区的<a href="https://github.com/GoogleChrome/lighthouse/issues">问题跟踪器</a>查找您可以修复的错误，以及您可以创建或改进的审查。此问题跟踪器也非常适合讨论审查指标、新的审查想法或与 Lighthouse 有关的任何其他内容。</p>
</script></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谷歌开发工具文档&quot;&gt;&lt;a href=&quot;#谷歌开发工具文档&quot; class=&quot;headerlink&quot; title=&quot;谷歌开发工具文档&quot;&gt;&lt;/a&gt;谷歌开发工具文档&lt;/h1&gt;
    
    </summary>
    
      <category term="Chrome DevTools" scheme="https://muyinchen.github.io/categories/Chrome-DevTools/"/>
    
    
      <category term="Chrome DevTools" scheme="https://muyinchen.github.io/tags/Chrome-DevTools/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data Commons - 中文参考文档</title>
    <link href="https://muyinchen.github.io/2017/06/09/Spring%20Data%20Commons%20-%20%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/"/>
    <id>https://muyinchen.github.io/2017/06/09/Spring Data Commons - 参考文档/</id>
    <published>2017-06-09T14:11:55.169Z</published>
    <updated>2017-06-12T03:19:50.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-Commons-中文参考文档"><a href="#Spring-Data-Commons-中文参考文档" class="headerlink" title="Spring Data Commons - 中文参考文档"></a>Spring Data Commons - 中文参考文档</h1><p>Oliver GierkeThomas DarimontChristoph StroblMark PollackThomas Risberg版本1.13.4.RELEASE，2017-06-08</p>
<p>©2008-2015原作者.<br><a id="more"></a><br>| <strong>注</strong>注<strong>注</strong> | 只要您不对这些副本收取任何费用，并且进一步规定，每个副本都包含本版权声明，无论是以印刷版还是电子版分发，本文档的副本可供您自己使用并分发给他人. |<br>| ———– | —————————————- |<br>|             |                                          |</p>
<p>目录</p>
<ul>
<li>前言<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#project" target="_blank" rel="external">项目元数据</a></li>
</ul>
</li>
<li>参考文献<ul>
<li>依赖关系<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#dependencies.spring-boot" target="_blank" rel="external">2.1.使用Spring Boot进行依赖管理</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#dependencies.spring-framework" target="_blank" rel="external">2.2.Spring框架</a></li>
</ul>
</li>
<li>3.使用Spring数据存储库<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.core-concepts" target="_blank" rel="external">3.1.核心概念</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.query-methods" target="_blank" rel="external">3.2.查询方式</a></li>
<li>3.3.定义存储库接口<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.definition-tuning" target="_blank" rel="external">3.3.1.微调存储库定义</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.multiple-modules" target="_blank" rel="external">3.3.2.使用多个Spring数据模块的存储库</a></li>
</ul>
</li>
<li>3.4.定义查询方法<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.query-methods.query-lookup-strategies" target="_blank" rel="external">3.4.1.查询查询策略</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.query-methods.query-creation" target="_blank" rel="external">3.4.2.查询创建</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.query-methods.query-property-expressions" target="_blank" rel="external">3.4.3.属性表达式</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.special-parameters" target="_blank" rel="external">3.4.4.特殊参数处理</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.limit-query-result" target="_blank" rel="external">3.4.5.限制查询结果</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.query-streaming" target="_blank" rel="external">3.4.6.流式查询结果</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.query-async" target="_blank" rel="external">3.4.7.异步查询结果</a></li>
</ul>
</li>
<li>3.5.创建存储库实例<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances.spring" target="_blank" rel="external">3.5.1.XML配置</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances.java-config" target="_blank" rel="external">3.5.2.JavaConfig</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances.standalone" target="_blank" rel="external">3.5.3.独立使用</a></li>
</ul>
</li>
<li>3.6.Spring数据存储库的自定义实现<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.single-repository-behaviour" target="_blank" rel="external">3.6.1.将自定义行为添加到单个存储库</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.custom-behaviour-for-all-repositories" target="_blank" rel="external">3.6.2.将自定义行为添加到所有存储库</a></li>
</ul>
</li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#core.domain-events" target="_blank" rel="external">3.7.从集合根发布事件</a></li>
<li>3.8.Spring数据扩展<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#core.extensions.querydsl" target="_blank" rel="external">3.8.1.Querydsl扩展</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#core.web" target="_blank" rel="external">3.8.2.网络支持</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#core.repository-populators" target="_blank" rel="external">3.8.3.存储库populator</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#web.legacy" target="_blank" rel="external">3.8.4.传统网络支持</a></li>
</ul>
</li>
</ul>
</li>
<li>4.按示例查询<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#query-by-example.introduction" target="_blank" rel="external">4.1.介绍</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#query-by-example.usage" target="_blank" rel="external">4.2.用法</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#query-by-example.matchers" target="_blank" rel="external">4.3.示例匹配器</a></li>
</ul>
</li>
<li>5.审计<ul>
<li>5.1.基本<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#auditing.annotations" target="_blank" rel="external">5.1.1.基于注解的审计元数据</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#auditing.interfaces" target="_blank" rel="external">5.1.2.基于接口的审计元数据</a></li>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#auditing.auditor-aware" target="_blank" rel="external">5.1.3.AuditorAware</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>附录<ul>
<li>附录A：命名空间参考<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#populator.namespace-dao-config" target="_blank" rel="external">元素</a></li>
</ul>
</li>
<li>附录B：Populators命名空间参考<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#namespace-dao-config" target="_blank" rel="external">元素</a></li>
</ul>
</li>
<li>附录C：存储库查询关键字<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_supported_query_keywords" target="_blank" rel="external">支持的查询关键字</a></li>
</ul>
</li>
<li>附录D：存储库查询返回类型<ul>
<li><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_supported_query_return_types" target="_blank" rel="external">支持的查询返回类型</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Data Commons项目将核心Spring概念应用到使用许多关系和非关系数据存储的解决方案的开发中.</p>
<h2 id="项目元数据"><a href="#项目元数据" class="headerlink" title="项目元数据"></a>项目元数据</h2><ul>
<li>版本控制 - <a href="https://github.com/spring-projects/spring-data-commons" target="_blank" rel="external">http://github.com/spring-projects/spring-data-commons</a></li>
<li>Bugtracker - <a href="https://jira.spring.io/browse/DATACMNS" target="_blank" rel="external">https://jira.spring.io/browse/DATACMNS</a></li>
<li>版本库 - <a href="https://repo.spring.io/libs-release" target="_blank" rel="external">https://repo.spring.io/libs-release</a></li>
<li>里程碑存储库 - <a href="https://repo.spring.io/libs-milestone" target="_blank" rel="external">https://repo.spring.io/libs-milestone</a></li>
<li>快照库 - <a href="https://repo.spring.io/libs-snapshot" target="_blank" rel="external">https://repo.spring.io/libs-snapshot</a></li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><p>由于个别Spring数据模块的初始日期不同，其中大多数都带有不同的主要和次要版本号.找到兼容版本的最简单的方法是依靠我们随附的兼容版本定义的Spring Data Release Train BOM.在Maven项目<code>&lt;dependencyManagement /&gt;</code>中，您可以在POM部分中声明此依赖关系：</p>
<p>示例1.使用Spring数据发布列表BOM</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-releasetrain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;release-train&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>目前的发布火车版本是<code>Ingalls-SR4</code>.火车名称按字母顺序升序，目前可用的火车名称列<a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-planning" target="_blank" rel="external">在这里</a>.版本名称遵循以下模式：<code>${name}-${release}</code>其中release可以是以下之一：</p>
<ul>
<li><code>BUILD-SNAPSHOT</code> - 当前快照</li>
<li><code>M1</code>，<code>M2</code>等等-里程碑</li>
<li><code>RC1</code>，<code>RC2</code>等等-候选发布版</li>
<li><code>RELEASE</code> - GA发布</li>
<li><code>SR1</code>，<code>SR2</code>等等-服务版本</li>
</ul>
<p>使用BOM的一个工作示例可以在我们的<a href="https://github.com/spring-projects/spring-data-examples/tree/master/bom" target="_blank" rel="external">Spring Data示例存储库中找到</a>.如果这样就可以声明要在<code>&lt;dependencies /&gt;</code>块中使用没有版本的Spring数据模块.</p>
<p>示例2.声明对Spring数据模块的依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-1-使用Spring-Boot进行依赖管理"><a href="#2-1-使用Spring-Boot进行依赖管理" class="headerlink" title="2.1.使用Spring Boot进行依赖管理"></a>2.1.使用Spring Boot进行依赖管理</h3><p>Spring Boot已经为您选择了最新版本的Spring数据模块.如果您想要升级到较新版本，只需将该属性配置<code>spring-data-releasetrain.version</code>为您要使用的<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#dependencies.train-names" target="_blank" rel="external">列车名称和迭代</a>.</p>
<h3 id="2-2-Spring框架"><a href="#2-2-Spring框架" class="headerlink" title="2.2.Spring框架"></a>2.2.Spring框架</h3><p>当前版本的Spring Data模块需要Spring Framework在4.3.9.RELEASE或更好的版本中.这些模块也可能会使用该较小版本的旧版本错误版本.但是，强烈建议您使用该版本中的最新版本.</p>
<h2 id="3-使用Spring数据存储库"><a href="#3-使用Spring数据存储库" class="headerlink" title="3.使用Spring数据存储库"></a>3.使用Spring数据存储库</h2><p>Spring数据库抽象的目标是大大减少为各种持久性存储实现数据访问层所需的样板代码量.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th><em>Spring数据存储库文档和您的模块</em>本章介绍了Spring Data存储库的核心概念和接口.本章中的信息是从Spring Data Commons模块中获取的.它使用Java Persistence API（JPA）模块的配置和代码示例.将XML命名空间声明和要扩展的类型调整为您正在使用的特定模块的等效项.<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.namespace-reference" target="_blank" rel="external">命名空间参考</a>涵盖支持存储库API的所有Spring数据模块支持的XML配置，<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repository-query-keywords" target="_blank" rel="external">Repository查询关键字</a>涵盖了一般由存储库抽象支持的查询方法关键字.有关模块特定功能的详细信息，请参阅本文档该模块的一章.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h3 id="3-1-核心概念"><a href="#3-1-核心概念" class="headerlink" title="3.1.核心概念"></a>3.1.核心概念</h3><p>Spring数据库抽象中的中央接口<code>Repository</code>（可能不是什么惊喜）.管理域类以及域类的id类型作为类型参数.此接口主要作为标记接口捕获要使用的类型，并帮助您发现扩展此接口的接口.该<code>CrudRepository</code>规定对于正在管理的实体类复杂的CRUD功能.</p>
<p>示例3. CrudRepository接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; &#123;</div><div class="line"></div><div class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S entity)</span></span>; *<span class="number">1</span>*</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">findOne</span><span class="params">(ID primaryKey)</span></span>;    *<span class="number">2</span>*   </div><div class="line"></div><div class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;        *<span class="number">3</span>*  </div><div class="line"></div><div class="line">    <span class="function">Long <span class="title">count</span><span class="params">()</span></span>;               *<span class="number">4</span>*   </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(T entity)</span></span>;        *<span class="number">5</span>*  </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(ID primaryKey)</span></span>;  *<span class="number">6</span>*</div><div class="line"></div><div class="line">    <span class="comment">// … more functionality omitted.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><em>1</em></th>
<th>保存给定的实体.</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>2</em></td>
<td>返回由给定的ID标识的实体.</td>
</tr>
<tr>
<td><em>3</em></td>
<td>返回所有实体.</td>
</tr>
<tr>
<td><em>4</em></td>
<td>返回实体数.</td>
</tr>
<tr>
<td><em>5</em></td>
<td>删除给定的实体.</td>
</tr>
<tr>
<td><em>6</em></td>
<td>指示是否存在具有给定id的实体.</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>我们还提供持久性技术特定的抽象，例如<code>JpaRepository</code>或<code>MongoRepository</code>.<code>CrudRepository</code>除了相当通用的持久化技术不可知的接口，例如CrudRepository，这些接口还扩展和暴露了底层持久性技术的功能.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>除此之外，<code>CrudRepository</code>还有一个<code>PagingAndSortingRepository</code>抽象方法可以添加其他方法来简化对实体的分页访问：</p>
<p>示例4. PagingAndSortingRepository</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></div><div class="line">  <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; &#123;</div><div class="line"></div><div class="line">  <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span></span>;</div><div class="line"></div><div class="line">  <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问第二页的<code>User</code>页面大小为20，你可以简单地做这样的事情：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PagingAndSortingRepository&lt;User, Long&gt; repository = <span class="comment">// … get access to a bean</span></div><div class="line">Page&lt;User&gt; users = repository.findAll(<span class="keyword">new</span> PageRequest(<span class="number">1</span>, <span class="number">20</span>));</div></pre></td></tr></table></figure>
<p>除了查询方法之外，还可以查询计数和删除查询的推导.</p>
<p>示例5.派生计数查询</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="function">Long <span class="title">countByLastname</span><span class="params">(String lastname)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>派生删除查询</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="function">Long <span class="title">deleteByLastname</span><span class="params">(String lastname)</span></span>;</div><div class="line"></div><div class="line">  <span class="function">List&lt;User&gt; <span class="title">removeByLastname</span><span class="params">(String lastname)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-查询方式"><a href="#3-2-查询方式" class="headerlink" title="3.2.查询方式"></a>3.2.查询方式</h3><p>标准CRUD功能库通常在基础数据存储上有查询.使用Spring数据，声明这些查询将成为四个步骤：</p>
<ol>
<li><p>声明扩展Repository或其一个子接口的接口，并将其键入将要处理的域类和ID类型.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123; … &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在接口上声明查询方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastname</span><span class="params">(String lastname)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>设置Spring为这些接口创建代理实例.通过<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances.java-config" target="_blank" rel="external">JavaConfig</a>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</div><div class="line"></div><div class="line"><span class="meta">@EnableJpaRepositories</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>或通过<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances" target="_blank" rel="external">XML配置</a>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">   <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">     http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">     http://www.springframework.org/schema/data/jpa</div><div class="line">     http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repositories"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这个例子中使用JPA命名空间.如果您正在为任何其他商店使用存储库抽象，则需要将其更改为商店模块的相应命名空间声明，该名称空间声明应该进行交换<code>jpa</code>，例如<code>mongodb</code>.</p>
<p>另外，请注意，JavaConfig变体不会明确地配置程序包，因为默认情况下使用注解类的程序包.要自定义要扫描的软件包，请使用<code>basePackage…</code>数据存储特定存储库-annotation的<code>@Enable…</code>属性之一.</p>
</li>
<li><p>获取注册表实例并使用它.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeClient</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> PersonRepository repository;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Person&gt; persons = repository.findByLastname(<span class="string">"Matthews"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>下面的部分详细说明每一步.</p>
<h3 id="3-3-定义存储库接口"><a href="#3-3-定义存储库接口" class="headerlink" title="3.3.定义存储库接口"></a>3.3.定义存储库接口</h3><p>作为第一步，您定义一个域类别的存储库接口.该接口必须扩展Repository并输入到域类和ID类型.如果要公开该域类型的CRUD方法，则扩展<code>CrudRepository</code>而不是<code>Repository</code>.</p>
<h4 id="3-3-1-微调存储库定义"><a href="#3-3-1-微调存储库定义" class="headerlink" title="3.3.1.微调存储库定义"></a>3.3.1.微调存储库定义</h4><p>通常情况下，你的资料库接口将延长<code>Repository</code>，<code>CrudRepository</code>或<code>PagingAndSortingRepository</code>.或者，如果您不想扩展Spring数据接口，还可以使用它来注解存储库接口<code>@RepositoryDefinition</code>.扩展<code>CrudRepository</code>公开了一套完整的方法来操纵您的实体.如果您希望对所暴露的方法有选择性，只需将要暴露的方法复制<code>CrudRepository</code>到您的域库中即可.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>这允许您在提供的Spring数据存储库功能之上定义自己的抽象.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>示例7.选择性地暴露CRUD方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="function">T <span class="title">findOne</span><span class="params">(ID id)</span></span>;</div><div class="line"></div><div class="line">  <span class="function">T <span class="title">save</span><span class="params">(T entity)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  <span class="function">User <span class="title">findByEmailAddress</span><span class="params">(EmailAddress emailAddress)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在此第一步中，您为所有域存储库定义了一个公共基础接口，并将其暴露出来<code>findOne(…)</code>.<code>save(…)</code>这些方法将被路由到由Spring Data提供的您选择的存储库的基本存储库实现中，例如在JPA的情况下<code>SimpleJpaRepository</code>，因为他们正在匹配方法签名<code>CrudRepository</code>.所以<code>UserRepository</code>现在将能够保存用户，并通过id查找单个，以及触发查询以<code>Users</code>通过其电子邮件地址查找.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>请注意，中间版本库接口被注解为<code>@NoRepositoryBean</code>.确保将该注解添加到Spring Data不应在运行时创建实例的所有存储库接口.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h4 id="3-3-2-使用多个Spring数据模块的存储库"><a href="#3-3-2-使用多个Spring数据模块的存储库" class="headerlink" title="3.3.2.使用多个Spring数据模块的存储库"></a>3.3.2.使用多个Spring数据模块的存储库</h4><p>在应用程序中使用唯一的Spring数据模块使事情变得简单，因此定义范围内的所有存储库接口都绑定到Spring数据模块.有时应用程序需要使用多个Spring数据模块.在这种情况下，存储库定义需要区分持久性技术.Spring Data进入严格的存储库配置模式，因为它在类路径上检测到多个存储库工厂.严格的配置需要有关存储库或域类的详细信息来决定用于存储库定义的Spring数据模块绑定：</p>
<ol>
<li>如果存储库定义<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.multiple-modules.types" target="_blank" rel="external">扩展了模块特定的存储库</a>，那么它是<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.multiple-modules.types" target="_blank" rel="external">特定</a> Spring数据模块的有效候选者.</li>
<li>如果域类<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.multiple-modules.annotations" target="_blank" rel="external">使用模块特定类型注解进行注解</a>，那么它是特定Spring数据模块的有效候选项.Spring数据模块接受第三方注解（如JPA <code>@Entity</code>）或提供自己的注解，例如<code>@Document</code>Spring Data MongoDB / Spring Data Elasticsearch.</li>
</ol>
<p>示例8.使用模块特定接口的存储库定义</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>MyRepository</code>并<code>UserRepository</code>延长<code>JpaRepository</code>他们的类型层次.它们是Spring Data JPA模块的有效候选.</p>
<p>示例9.使用通用接口的存储库定义</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AmbiguousRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"> …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AmbiguousUserRepository</span> <span class="keyword">extends</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AmbiguousRepository</code>和<code>AmbiguousUserRepository</code>仅延伸<code>Repository</code>，并<code>CrudRepository</code>在他们的类型层次.虽然使用独特的Spring数据模块是非常好的，但是多个模块无法区分哪些特定的Spring Data这些存储库应该绑定.</p>
<p>示例10.使用带有注解的域类的存储库定义</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"> …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"> …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Document</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>PersonRepository</code>引用<code>Person</code>用JPA注解注解<code>@Entity</code>，因此这个存储库显然属于Spring Data JPA.<code>UserRepository</code>使用<code>User</code>注解与Spring数据MongoDB的<code>@Document</code>注解.</p>
<p>示例11.使用具有混合注解的域类的存储库定义</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">JpaPersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"> …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MongoDBPersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"> …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Document</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此示例显示使用JPA和Spring Data MongoDB注解的域类.它定义了两个仓库，<code>JpaPersonRepository</code>和<code>MongoDBPersonRepository</code>.一个用于JPA，另一个用于MongoDB使用.Spring数据不再能够分辨出存储库导致未定义的行为.</p>
<p><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.multiple-modules.types" target="_blank" rel="external">存储库类型详细信息</a>和<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.multiple-modules.annotations" target="_blank" rel="external">标识域类注解</a>用于严格的存储库配置，以识别特定Spring数据模块的存储库候选.在同一个域类型上使用多个持久性技术特定的注解可能会跨多个持久性技术重用域类型，但是Spring Data不再能够确定绑定存储库的唯一模块.</p>
<p>区分资源库的最后一个方法是定义库基础包.基本包定义了扫描存储库接口定义的起点，这意味着存储库定义位于相应的包中.默认情况下，注解驱动的配置使用配置类的包.<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances.spring" target="_blank" rel="external">基于XML的配置</a>中的<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances.spring" target="_blank" rel="external">基本包</a>是强制性的.</p>
<p>示例12.基本包的注解驱动配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.acme.repositories.jpa"</span>)</div><div class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = <span class="string">"com.acme.repositories.mongo"</span>)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Configuration</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>
<h3 id="3-4-定义查询方法"><a href="#3-4-定义查询方法" class="headerlink" title="3.4.定义查询方法"></a>3.4.定义查询方法</h3><p>存储库代理有两种方法从方法名称中导出特定于存储的查询.它可以直接从方法名称导出查询，或通过使用手动定义的查询.可用选项取决于实际存储.但是，必须有一个策略来决定创建什么实际的查询.我们来看看可用的选项.</p>
<h4 id="3-4-1-查询查询策略"><a href="#3-4-1-查询查询策略" class="headerlink" title="3.4.1.查询查询策略"></a>3.4.1.查询查询策略</h4><p>以下策略可用于存储库基础架构来解决查询.在配置<code>query-lookup-strategy</code>XML的情况下，您可以通过属性配置命名空间中的策略，也可以通过<code>queryLookupStrategy</code>Java配置中启用$ {store}存储库注解的属性来配置策略.特定数据存储可能不支持某些策略.</p>
<ul>
<li><code>CREATE</code>尝试从查询方法名称构造特定于商店的查询.一般的方法是从方法名称中删除一组已知的前缀，并解析该方法的其余部分.详细了解查询<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.query-methods.query-creation" target="_blank" rel="external">创建中的</a>查询构造.</li>
<li><code>USE_DECLARED_QUERY</code>尝试找到一个声明的查询，并将抛出一个异常，以防万一找不到它.查询可以由某处的注解定义，也可以通过其他方式声明.请参阅特定商店的文档以查找该商店的可用选项.如果存储库基础架构在引导时没有找到方法的声明查询，则它将失败.</li>
<li><code>CREATE_IF_NOT_FOUND</code>（默认）组合<code>CREATE</code>和<code>USE_DECLARED_QUERY</code>.它首先查找声明的查询，如果没有找到声明的查询，它将创建一个基于名称的自定义查询.这是默认的查找策略，因此如果您没有明确配置任何内容.它允许通过方法名称快速查询定义，但也可以根据需要引入声明的查询来定制这些查询.</li>
</ul>
<h4 id="3-4-2-查询创建"><a href="#3-4-2-查询创建" class="headerlink" title="3.4.2.查询创建"></a>3.4.2.查询创建</h4><p>构建在Spring数据存储库基础架构中的查询生成器机制对于在存储库的实体上构建约束查询很有用.该机制条前缀<code>find…By</code>，<code>read…By</code>，<code>query…By</code>，<code>count…By</code>，和<code>get…By</code>从所述方法和开始分析它的其余部分.引入子句可以包含其他表达式，例如在<code>Distinct</code>要创建的查询上设置不同的标志.然而，第一个<code>By</code>作为分隔符来指示实际标准的开始.在一个非常基本的水平，你可以定义实体性条件，并与它们串联<code>And</code>和<code>Or</code>.</p>
<p>示例13.从方法名称创建查询</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByEmailAddressAndLastname</span><span class="params">(EmailAddress emailAddress, String lastname)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">// Enables the distinct flag for the query</span></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findDistinctPeopleByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span></span>;</div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findPeopleDistinctByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">// Enabling ignoring case for an individual property</span></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameIgnoreCase</span><span class="params">(String lastname)</span></span>;</div><div class="line">  <span class="comment">// Enabling ignoring case for all suitable properties</span></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameAndFirstnameAllIgnoreCase</span><span class="params">(String lastname, String firstname)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">// Enabling static ORDER BY for a query</span></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameAsc</span><span class="params">(String lastname)</span></span>;</div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameDesc</span><span class="params">(String lastname)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析方法的实际结果取决于创建查询的持久性存储.但是，有一些一般的事情要注意.</p>
<ul>
<li>表达式通常是可以连接的运算符的属性遍历.您可以使用组合属性表达式<code>AND</code>和<code>OR</code>.您还可以得到这样的运营商为支撑<code>Between</code>，<code>LessThan</code>，<code>GreaterThan</code>，<code>Like</code>为属性表达式.受支持的操作员可能因数据存储而异，因此请参阅参考文档的相应部分.</li>
<li>该方法解析器支持设置一个<code>IgnoreCase</code>标志个别特性（例如，<code>findByLastnameIgnoreCase(…)</code>）或对于支持忽略大小写（通常是一个类型的所有属性<code>String</code>情况下，例如，<code>findByLastnameAndFirstnameAllIgnoreCase(…)</code>）.是否支持忽略案例可能会因存储而异，因此请参阅参考文档中相关章节，了解特定于商店的查询方法.</li>
<li>您可以通过<code>OrderBy</code>在引用属性和提供排序方向（<code>Asc</code>或<code>Desc</code>）的查询方法中附加一个子句来应用静态排序.要创建支持动态排序的查询方法，请参阅<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.special-parameters" target="_blank" rel="external">特殊参数处理</a>.</li>
</ul>
<h4 id="3-4-3-属性表达式"><a href="#3-4-3-属性表达式" class="headerlink" title="3.4.3.属性表达式"></a>3.4.3.属性表达式</h4><p>属性表达式只能引用被管实体的直接属性，如前面的例子所示.在查询创建时，您已经确保已解析属性是受管域类的属性.但是，您还可以通过遍历嵌套属性来定义约束.假设一个<code>Person</code>有<code>Address</code>一个<code>ZipCode</code>.在这种情况下，方法名称为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;Person&gt; <span class="title">findByAddressZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</div></pre></td></tr></table></figure>
<p>创建属性遍历<code>x.address.zipCode</code>.解析算法首先将整个part（<code>AddressZipCode</code>）解释为属性，并使用该名称（uncapitalized）检查域类的属性.如果算法成功，则使用该属性.如果不是，则算法拆分了从右侧的驼峰部分的信号源到头部和尾部，并试图找出相应的属性，在我们的例子，<code>AddressZip</code>和<code>Code</code>.如果算法找到一个具有该头部的属性，那么它需要尾部，并从那里继续构建树，然后按照刚刚描述的方式将尾部分割.如果第一个分割不匹配，则算法将分割点移动到左（<code>Address</code>，<code>ZipCode</code>），然后继续.</p>
<p>虽然这在大多数情况下应该起作用，但算法可能会选择错误的属性.假设<code>Person</code>该类也有一个<code>addressZip</code>属性.该算法将在第一个分割轮中匹配，并且基本上选择错误的属性，最后失败（因为该类型<code>addressZip</code>可能没有<code>code</code>属性）.</p>
<p>要解决这个歧义，您可以<code>_</code>在方法名称中使用手动定义遍历点.所以我们的方法名称最终会如此：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;Person&gt; <span class="title">findByAddress_ZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</div></pre></td></tr></table></figure>
<p>当我们将下划线视为保留字符时，我们强烈建议遵循标准Java命名约定（即<strong>注</strong>不**使用属性名称中的下划线，而是使用骆驼案例）.</p>
<h4 id="3-4-4-特殊参数处理"><a href="#3-4-4-特殊参数处理" class="headerlink" title="3.4.4.特殊参数处理"></a>3.4.4.特殊参数处理</h4><p>要处理查询中的参数，您只需定义方法参数，如上述示例中所示.此外，基础设施将会识别某些特定类型，<code>Pageable</code>并动态<code>Sort</code>地将分页和排序应用于查询.</p>
<p>示例14.在查询方法中使用Pageable，Slice和Sort</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">Page&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div><div class="line"></div><div class="line"><span class="function">Slice&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div><div class="line"></div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</div><div class="line"></div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div></pre></td></tr></table></figure>
<p>第一种方法允许您将<code>org.springframework.data.domain.Pageable</code>实例传递给查询方法，以动态地将分页添加到静态定义的查询中.A <code>Page</code>知道可用的元素和页面的总数.它通过基础设施触发计数查询来计算总数.由于这可能是昂贵的，这取决于所使用的商店，<code>Slice</code>可以用作返回.A <code>Slice</code>只知道是否有下一个<code>Slice</code>可用的，当走过较大的结果集时可能只是足够的.</p>
<p>排序选项也通过<code>Pageable</code>实例处理.如果只需要排序，只需在<code>org.springframework.data.domain.Sort</code>参数中添加一个参数即可.正如你也可以看到的，只需返回一个<code>List</code>也是可能的.在这种情况下，<code>Page</code>将不会创建构建实际实例所需的附加元数据（这反过来意味着必须不被发布的附加计数查询），而仅仅是限制查询仅查找给定范围的实体.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>要查找完整查询的页面数量，您必须触发额外的计数查询.默认情况下，此查询将从您实际触发的查询派生.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h4 id="3-4-5-限制查询结果"><a href="#3-4-5-限制查询结果" class="headerlink" title="3.4.5.限制查询结果"></a>3.4.5.限制查询结果</h4><p>的查询方法的结果可以通过关键字来限制<code>first</code>或<code>top</code>，其可以被可互换地使用.可选的数值可以追加到顶部/第一个以指定要返回的最大结果大小.如果数字被省略，则假设结果大小为1.</p>
<p>示例15.使用<code>Top</code>和限制查询的结果大小<code>First</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">User <span class="title">findFirstByOrderByLastnameAsc</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function">User <span class="title">findTopByOrderByAgeDesc</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function">Page&lt;User&gt; <span class="title">queryFirst10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div><div class="line"></div><div class="line"><span class="function">Slice&lt;User&gt; <span class="title">findTop3ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div><div class="line"></div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findFirst10ByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</div><div class="line"></div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findTop10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div></pre></td></tr></table></figure>
<p>限制表达式也支持<code>Distinct</code>关键字.此外，对于将结果集限制为一个实例的查询，支持将结果包装到一个实例中<code>Optional</code>.</p>
<p>如果将分页或切片应用于限制查询分页（以及可用页数的计算），则在限制结果中应用.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>请注意，通过参数将结果限制为动态排序，<code>Sort</code>可以表示最小的“K”以及“K”最大元素的查询方法.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h4 id="3-4-6-流式查询结果"><a href="#3-4-6-流式查询结果" class="headerlink" title="3.4.6.流式查询结果"></a>3.4.6.流式查询结果</h4><p>可以通过使用Java 8 <code>Stream&lt;T&gt;</code>作为返回类型来逐步处理查询方法的结果.而不是简单地将查询结果包装在<code>Stream</code>数据存储中，特定的方法用于执行流.</p>
<p>示例16.使用Java 8流式传输查询的结果 <code>Stream&lt;T&gt;</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</div><div class="line"><span class="function">Stream&lt;User&gt; <span class="title">findAllByCustomQueryAndStream</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function">Stream&lt;User&gt; <span class="title">readAllByFirstnameNotNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</div><div class="line"><span class="function">Stream&lt;User&gt; <span class="title">streamAllPaged</span><span class="params">(Pageable pageable)</span></span>;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>在<code>Stream</code>潜在封装底层数据存储特定资源和使用后必须因此被关闭.您可以手动关闭<code>Stream</code>使用该<code>close()</code>方法或使用Java 7 try-with-resources块.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>示例17. <code>Stream&lt;T&gt;</code>在try-with-resources块中使用结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Stream&lt;User&gt; stream = repository.findAllByCustomQueryAndStream()) &#123;</div><div class="line">  stream.forEach(…);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>目前并不是所有的Spring数据模块都支持<code>Stream&lt;T&gt;</code>返回类型.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h4 id="3-4-7-异步查询结果"><a href="#3-4-7-异步查询结果" class="headerlink" title="3.4.7.异步查询结果"></a>3.4.7.异步查询结果</h4><p>可以使用<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html#scheduling" target="_blank" rel="external">Spring的异步方法</a>执行功能异步执行存储库查询.这意味着方法将在调用时立即返回，并且实际的查询执行将发生在已提交给Spring TaskExecutor的任务中.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function">Future&lt;User&gt; <span class="title">findByFirstname</span><span class="params">(String firstname)</span></span>;       *<span class="number">1</span>*        </div><div class="line"></div><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function">CompletableFuture&lt;User&gt; <span class="title">findOneByFirstname</span><span class="params">(String firstname)</span></span>; *<span class="number">2</span>*</div><div class="line"></div><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function">ListenableFuture&lt;User&gt; <span class="title">findOneByLastname</span><span class="params">(String lastname)</span></span>;    *<span class="number">3</span>*</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><em>1</em></th>
<th>使用<code>java.util.concurrent.Future</code>的返回类型.</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>2</em></td>
<td>使用Java 8 <code>java.util.concurrent.CompletableFuture</code>作为返回类型.</td>
</tr>
<tr>
<td><em>3</em></td>
<td>使用a <code>org.springframework.util.concurrent.ListenableFuture</code>作为返回类型.</td>
</tr>
</tbody>
</table>
<h3 id="3-5-创建存储库实例"><a href="#3-5-创建存储库实例" class="headerlink" title="3.5.创建存储库实例"></a>3.5.创建存储库实例</h3><p>在本节中，您将为定义的存储库接口创建实例和bean定义.一种方法是使用支持存储库机制的每个Spring数据模块附带的Spring命名空间，尽管我们通常建议使用Java-Config样式配置.</p>
<h4 id="3-5-1-XML配置"><a href="#3-5-1-XML配置" class="headerlink" title="3.5.1.XML配置"></a>3.5.1.XML配置</h4><p>每个Spring Data模块都包含一个存储库元素，它允许您简单地定义Spring为您扫描的基础包.</p>
<p>示例18.通过XML启用Spring数据存储库</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans:beans</span> <span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/data/jpa</div><div class="line">    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repositories"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans:beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上述示例中，指示Spring扫描<code>com.acme.repositories</code>其所有接口扩展的子包<code>Repository</code>或其子接口之一.对于发现的每个接口，基础架构注册特定<code>FactoryBean</code>于持久性技术，以创建处理查询方法调用的适当代理.每个bean都是从接口名称导出的bean名称下注册的，所以接口<code>UserRepository</code>将被注册<code>userRepository</code>.该<code>base-package</code>属性允许通配符，以便您可以定义扫描包的模式.</p>
<h5 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h5><p>默认情况下，基础设施拾取每个接口<code>Repository</code>，扩展位于配置的基础包下面的持久性技术特定子接口，并为其创建一个bean实例.但是，您可能需要对要为其创建哪些接口bean实例进行更细粒度的控制.要做到这一点你使用<code>&lt;include-filter /&gt;</code>和<code>&lt;exclude-filter /&gt;</code>元素里面<code>&lt;repositories /&gt;</code>.语义与Spring的上下文命名空间中的元素完全相同.有关详细信息，请参阅有关这些元素的<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-scanning-filters" target="_blank" rel="external">Spring参考文档</a>.</p>
<p>例如，要将某些接口从实例化中排除为存储库，可以使用以下配置：</p>
<p>示例19.使用exclude-filter元素</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repositories"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">".*SomeRepository"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此示例排除所有<code>SomeRepository</code>从实例化开始的接口.</p>
<h4 id="3-5-2-JavaConfig"><a href="#3-5-2-JavaConfig" class="headerlink" title="3.5.2.JavaConfig"></a>3.5.2.JavaConfig</h4><p>也可以使用<code>@Enable${store}Repositories</code>JavaConfig类上的特定于商店的注解触发存储库基础架构.有关Spring容器的基于Java的配置的介绍，请参阅参考文档.[ <a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_footnote_1" target="_blank" rel="external">1</a> ]</p>
<p>启用Spring Data存储库的示例配置看起来像这样.</p>
<p>示例20.基于样本注解的存储库配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableJpaRepositories</span>(<span class="string">"com.acme.repositories"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> EntityManagerFactory <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// …</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>该示例使用JPA特定的注解，您可以根据实际使用的存储模块进行更改.这同样适用于<code>EntityManagerFactory</code>bean的定义.请参阅涵盖商店特定配置的部分.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h4 id="3-5-3-独立使用"><a href="#3-5-3-独立使用" class="headerlink" title="3.5.3.独立使用"></a>3.5.3.独立使用</h4><p>您还可以使用Spring容器外部的存储库基础架构，例如在CDI环境中.您在类路径中仍然需要一些Spring库，但通常可以通过编程方式设置存储库.提供存储库支持的Spring数据模块提供了一个持久性技术特定的RepositoryFactory，可以使用如下所示的RepositoryFactory.</p>
<p>示例21.存储库工厂的独立使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RepositoryFactorySupport factory = … <span class="comment">// Instantiate factory here</span></div><div class="line">UserRepository repository = factory.getRepository(UserRepository.class);</div></pre></td></tr></table></figure>
<h3 id="3-6-Spring数据存储库的自定义实现"><a href="#3-6-Spring数据存储库的自定义实现" class="headerlink" title="3.6.Spring数据存储库的自定义实现"></a>3.6.Spring数据存储库的自定义实现</h3><p>通常有必要为几个存储库方法提供自定义实现.Spring数据存储库可以轻松地允许您提供自定义存储库代码，并将其与通用CRUD抽象和查询方法功能集成.</p>
<h4 id="3-6-1-将自定义行为添加到单个存储库"><a href="#3-6-1-将自定义行为添加到单个存储库" class="headerlink" title="3.6.1.将自定义行为添加到单个存储库"></a>3.6.1.将自定义行为添加到单个存储库</h4><p>要使用自定义功能丰富资源库，首先要定义一个接口和自定义功能的实现.使用您提供的存储库接口来扩展自定义接口.</p>
<p>示例22.自定义存储库功能的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someCustomMethod</span><span class="params">(User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>示例23.自定义存储库功能的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someCustomMethod</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">    <span class="comment">// Your custom implementation</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>找到的类的最重要的一点是<code>Impl</code>与核心存储库接口相比的名称的后缀（见下文）.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>实现本身并不依赖于Spring Data，而且可以是一个常规的Spring bean.因此，您可以使用标准依赖注入行为来注入其他bean的引用，如a <code>JdbcTemplate</code>，参与方面等等.</p>
<p>示例24.更改您的基本存储库接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt;, <span class="title">UserRepositoryCustom</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Declare query methods here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让您的标准存储库接口扩展自定义库.这样做结合了CRUD和自定义功能，并将其提供给客户端.</p>
<h5 id="组态"><a href="#组态" class="headerlink" title="组态"></a>组态</h5><p>如果使用命名空间配置，存储库基础设施会尝试通过扫描我们找到存储库的包下的类来自动检测自定义实现.这些类需要遵循将命名空间元素的属性附加<code>repository-impl-postfix</code>到找到的存储库接口名称的命名约定.此后缀默认为<code>Impl</code>.</p>
<p>示例25.配置示例</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repository"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repository"</span> <span class="attr">repository-impl-postfix</span>=<span class="string">"FooBar"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>第一个配置示例将尝试查找一个类<code>com.acme.repository.UserRepositoryImpl</code>作为自定义存储库实现，而第二个示例将尝试查找<code>com.acme.repository.UserRepositoryFooBar</code>.</p>
<h6 id="手动接线"><a href="#手动接线" class="headerlink" title="手动接线"></a>手动接线</h6><p>如果您的自定义实现仅使用基于注解的配置和自动布线，那么刚才显示的方法效果很好，因为它将被视为任何其他Spring bean.如果您的自定义实现bean需要特殊布线，那么您只需简单地声明该bean并将其命名为刚刚描述的约定.然后，基础设施将通过名称引用手动定义的bean定义，而不是创建一个本身.</p>
<p>示例26.自定义实现的手动接线</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repository"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"userRepositoryImpl"</span> <span class="attr">class</span>=<span class="string">"…"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- further configuration --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-6-2-将自定义行为添加到所有存储库"><a href="#3-6-2-将自定义行为添加到所有存储库" class="headerlink" title="3.6.2.将自定义行为添加到所有存储库"></a>3.6.2.将自定义行为添加到所有存储库</h4><p>当您想将一个方法添加到所有的存储库接口时，上述方法是不可行的.要将自定义行为添加到所有存储库，您首先添加一个中间接口来声明共享行为.</p>
<p>示例27.声明定制共享行为的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></div><div class="line">  <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; &#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sharedCustomMethod</span><span class="params">(ID id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，您的各个存储库接口将扩展此中间接口，而不是扩展<code>Repository</code>接口以包含声明的功能.接下来，创建扩展了持久性技术特定的存储库基类的中间接口的实现.然后，该类将用作存储库代理的自定义基类.</p>
<p>自定义库基础类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRepositoryImpl</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></div><div class="line">  <span class="keyword">extends</span> <span class="title">SimpleJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">MyRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> EntityManager entityManager;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyRepositoryImpl</span><span class="params">(JpaEntityInformation entityInformation,</span></span></div><div class="line">                          EntityManager entityManager) &#123;</div><div class="line">    <span class="keyword">super</span>(entityInformation, entityManager);</div><div class="line"></div><div class="line">    <span class="comment">// Keep the EntityManager around to used from the newly introduced methods.</span></div><div class="line">    <span class="keyword">this</span>.entityManager = entityManager;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sharedCustomMethod</span><span class="params">(ID id)</span> </span>&#123;</div><div class="line">    <span class="comment">// implementation goes here</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>该类需要具有专门的存储库工厂实现使用的超级类的构造函数.如果存储库基类有多个构造函数，则覆盖一个<code>EntityInformation</code>加上特定于存储的基础架构对象（例如，一个<code>EntityManager</code>或一个模板类）.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>Spring <code>&lt;repositories /&gt;</code>命名空间的默认行为是为所有接下来的接口提供一个实现<code>base-package</code>.这意味着如果保持当前状态，<code>MyRepository</code>Spring将创建一个实现实例.这当然是不希望的，因为它只是作为一个中介，<code>Repository</code>以及您想为每个实体定义的实际存储库接口.要排除<code>Repository</code>从被实例化为存储库实例的接口，您可以使用<code>@NoRepositoryBean</code>（如上所示）注解它，或将其移动到已配置的外部<code>base-package</code>.</p>
<p>最后一步是使Spring数据基础架构了解定制的库基类.在JavaConfig中，这是通过使用<code>repositoryBaseClass</code>注解的<code>@Enable…Repositories</code>属性来实现的：</p>
<p>示例29.使用JavaConfig配置自定义存储库基类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableJpaRepositories</span>(repositoryBaseClass = MyRepositoryImpl.class)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123; … &#125;</div></pre></td></tr></table></figure>
<p>相应的属性在XML命名空间中可用.</p>
<p>示例30.使用XML配置自定义存储库基类</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repository"</span></span></div><div class="line">     <span class="attr">base-class</span>=<span class="string">"….MyRepositoryImpl"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="3-7-从集合根发布事件"><a href="#3-7-从集合根发布事件" class="headerlink" title="3.7.从集合根发布事件"></a>3.7.从集合根发布事件</h3><p>存储库管理的实体是聚合根.在域驱动设计应用程序中，这些聚合根通常会发布域事件.Spring Data提供了一个注解，<code>@DomainEvents</code>您可以使用聚合根的方法来使该发布尽可能简单.</p>
<p>示例31.从聚合根中暴露域事件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnAggregateRoot</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@DomainEvents</span> 		*<span class="number">1</span>*</div><div class="line">    <span class="function">Collection&lt;Object&gt; <span class="title">domainEvents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// … return events you want to get published here</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@AfterDomainEventsPublication</span>  *<span class="number">2</span>*</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callbackMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">// … potentially clean up domain events list</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><em>1</em></th>
<th>使用的方法<code>@DomainEvents</code>可以返回单个事件实例或事件集合.它不能采取任何论据.</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>2</em></td>
<td>在所有事件发布之后，注解了一个方法<code>@AfterDomainEventsPublication</code>.它可以用于潜在地清理要发布的事件列表.</td>
</tr>
</tbody>
</table>
<p>每次调用Spring数据存储库的<code>save(…)</code>方法之一时，都会调用这些方法.</p>
<h3 id="3-8-Spring数据扩展"><a href="#3-8-Spring数据扩展" class="headerlink" title="3.8.Spring数据扩展"></a>3.8.Spring数据扩展</h3><p>本节介绍一组Spring数据扩展，可以在各种上下文中启用Spring数据使用.目前大部分的集成针对Spring MVC.</p>
<h4 id="3-8-1-Querydsl扩展"><a href="#3-8-1-Querydsl扩展" class="headerlink" title="3.8.1.Querydsl扩展"></a>3.8.1.Querydsl扩展</h4><p><a href="http://www.querydsl.com/" target="_blank" rel="external">Querydsl</a>是一个框架，可以通过流畅的API构建静态类型的类SQL查询.</p>
<p>几个Spring数据模块提供与Querydsl的集成<code>QueryDslPredicateExecutor</code>.</p>
<p>示例32. QueryDslPredicateExecutor接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QueryDslPredicateExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">findOne</span><span class="params">(Predicate predicate)</span></span>;             *<span class="number">1</span>*</div><div class="line"></div><div class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Predicate predicate)</span></span>;   *<span class="number">2</span>*</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Predicate predicate)</span></span>;            *<span class="number">3</span>*</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Predicate predicate)</span></span>;        *<span class="number">4</span>*</div><div class="line"></div><div class="line">    <span class="comment">// … more functionality omitted.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><em>1</em></th>
<th>查找并返回一个匹配的实体<code>Predicate</code>.</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>2</em></td>
<td>查找并返回匹配的所有实体<code>Predicate</code>.</td>
</tr>
<tr>
<td><em>3</em></td>
<td>返回匹配的实体数<code>Predicate</code>.</td>
</tr>
<tr>
<td><em>4</em></td>
<td>如果匹配的实体<code>Predicate</code>存在则返回.</td>
</tr>
</tbody>
</table>
<p>要使用Querydsl支持，只需<code>QueryDslPredicateExecutor</code>在您的存储库接口上扩展.</p>
<p>实例33.在存储库上进行Querydsl整合</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt;, <span class="title">QueryDslPredicateExecutor</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上使用Querydsl可以编写类型安全的查询<code>Predicate</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Predicate predicate = user.firstname.equalsIgnoreCase(<span class="string">"dave"</span>)</div><div class="line">	.and(user.lastname.startsWithIgnoreCase(<span class="string">"mathews"</span>));</div><div class="line"></div><div class="line">userRepository.findAll(predicate);</div></pre></td></tr></table></figure>
<h4 id="3-8-2-网络支持"><a href="#3-8-2-网络支持" class="headerlink" title="3.8.2.网络支持"></a>3.8.2.网络支持</h4><table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>本部分包含Spring数据Web支持的文档，因为它在1.6范围内与Spring Data Commons相同.由于新引入的支持更改了很多事情，因此我们保留了<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#web.legacy" target="_blank" rel="external">旧版Web支持中</a>前一行为的文档.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>如果模块支持仓库编程模型，Spring数据模块将附带各种Web支持.Web相关的东西需要Spring MVC JAR在类路径上，其中一些甚至提供与Spring HATEOAS的集成[ <a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_footnote_2" target="_blank" rel="external">2</a> ].通常，通过<code>@EnableSpringDataWebSupport</code>在JavaConfig配置类中使用注解来启用集成支持.</p>
<p>示例34.启用Spring Data Web支持</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@EnableSpringDataWebSupport</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>
<p>该<code>@EnableSpringDataWebSupport</code>批注注册几个组件，我们将在一个位讨论.它还将在类路径上检测Spring HATEOAS，并注册集成组件（如果存在）.</p>
<p>或者，如果您使用XML配置，请注册<code>SpringDataWebSupport</code>或<code>HateoasAwareSpringDataWebSupport</code>作为Spring bean：</p>
<p>示例35.启用XML中的Spring Data Web支持</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.web.config.SpringDataWebConfiguration"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- If you're using Spring HATEOAS as well register this one *instead* of the former --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h5 id="基本网络支持"><a href="#基本网络支持" class="headerlink" title="基本网络支持"></a>基本网络支持</h5><p>上述配置设置将注册几个基本组件：</p>
<ul>
<li>A <code>DomainClassConverter</code>使Spring MVC能够从请求参数或路径变量解析存储库管理域类的实例.</li>
<li><code>HandlerMethodArgumentResolver</code> 实现让Spring MVC从请求参数中解析Pageable和Sort实例.</li>
</ul>
<h6 id="DomainClassConverter"><a href="#DomainClassConverter" class="headerlink" title="DomainClassConverter"></a>DomainClassConverter</h6><p>将<code>DomainClassConverter</code>让你在你的Spring MVC控制器方法签名直接使用域类型，这样就不必通过库手动查找实例：</p>
<p>示例36. Spring MVC控制器在方法签名中使用域类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUserForm</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> User user, Model model) </span>&#123;</div><div class="line"></div><div class="line">    model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">    <span class="keyword">return</span> <span class="string">"userForm"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您可以看到该方法直接接收User实例，不需要进一步的查找.实例可以通过让Spring MVC首先将路径变量转换为域类型，最终通过调用<code>findOne(…)</code>注册为域类型的存储库实例来访问该实例来解决.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>目前，资源库<code>CrudRepository</code>必须实施才能被发现以进行转换.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h6 id="HandlerMethodArgumentResolvers-for-Pageable和Sort"><a href="#HandlerMethodArgumentResolvers-for-Pageable和Sort" class="headerlink" title="HandlerMethodArgumentResolvers for Pageable和Sort"></a>HandlerMethodArgumentResolvers for Pageable和Sort</h6><p>上面的配置代码片段也注册了一个<code>PageableHandlerMethodArgumentResolver</code>以及一个实例<code>SortHandlerMethodArgumentResolver</code>.注册启用<code>Pageable</code>并<code>Sort</code>成为有效的控制器方法参数</p>
<p>使用Pageable作为控制器方法参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span> UserRepository repository;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUsers</span><span class="params">(Model model, Pageable pageable)</span> </span>&#123;</div><div class="line"></div><div class="line">    model.addAttribute(<span class="string">"users"</span>, repository.findAll(pageable));</div><div class="line">    <span class="keyword">return</span> <span class="string">"users"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此方法签名将导致Spring MVC尝试使用以下默认配置从请求参数派生一个Pageable实例：</p>
<table>
<thead>
<tr>
<th><code>page</code></th>
<th>您要检索的页面，0已编入索引并默认为0.</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>size</code></td>
<td>您要检索的页面的大小，默认为20.</td>
</tr>
<tr>
<td><code>sort</code></td>
<td>应以格式排序的属性`property,property(,ASC</td>
<td>DESC)<code>.默认排序方向是上升.</code>sort<code>如果要切换路线，请使用多个参数，例如</code>?sort=firstname&amp;sort=lastname,asc`.</td>
</tr>
</tbody>
</table>
<p>要自定义此行为可扩展<code>SpringDataWebConfiguration</code>或启用HATEOAS启用的等效项，并覆盖<code>pageableResolver()</code>或<code>sortResolver()</code>方法并导入自定义配置文件，而不是使用<code>@Enable</code>-annotation.</p>
<p>如果您需要从请求中解析多个<code>Pageable</code>或<code>Sort</code>实例（例如，对于多个表），则可以使用Spring的<code>@Qualifier</code>注解来区分出来.然后请求参数必须加上前缀<code>${qualifier}_</code>.所以对于像这样的方法签名：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showUsers</span><span class="params">(Model model,</span></span></div><div class="line">      @Qualifier(<span class="string">"foo"</span>) Pageable first,</div><div class="line">      @<span class="title">Qualifier</span><span class="params">(<span class="string">"bar"</span>)</span> Pageable second) &#123; … &#125;</div></pre></td></tr></table></figure>
<p>你有填充<code>foo_page</code>和<code>bar_page</code>等.</p>
<p>该<code>Pageable</code>方法的默认值相当于一个，<code>new PageRequest(0, 20)</code>但可以使用<code>@PageableDefaults</code>参数上的<code>Pageable</code>注解进行自定义.</p>
<h5 id="超媒体支持页面"><a href="#超媒体支持页面" class="headerlink" title="超媒体支持页面"></a>超媒体支持页面</h5><p>Spring HATEOAS提供了一个表示模型类<code>PagedResources</code>，它允许<code>Page</code>使用必要的<code>Page</code>元数据丰富一个实例的内容，以及让客户端轻松浏览页面的链接.<code>PagedResources</code>通过Spring HATEOAS <code>ResourceAssembler</code>接口的实现来完成页面的转换<code>PagedResourcesAssembler</code>.</p>
<p>示例38.使用PagedResourcesAssembler作为控制器方法参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span> PersonRepository repository;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/persons"</span>, method = RequestMethod.GET)</div><div class="line">  HttpEntity&lt;PagedResources&lt;Person&gt;&gt; persons(Pageable pageable,</div><div class="line">    PagedResourcesAssembler assembler) &#123;</div><div class="line"></div><div class="line">    Page&lt;Person&gt; persons = repository.findAll(pageable);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(assembler.toResources(persons), HttpStatus.OK);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启用如上所示的配置允许将<code>PagedResourcesAssembler</code>其用作控制器方法参数.打电话<code>toResources(…)</code>会导致以下情况：</p>
<ul>
<li>将内容的内容<code>Page</code>变成<code>PagedResources</code>实例的内容.</li>
<li>该<code>PagedResources</code>会得到一个<code>PageMetadata</code>附加填充信息形成的实例<code>Page</code>和基础<code>PageRequest</code>.</li>
<li>根据页面的状态<code>PagedResources</code>获取<code>prev</code>和<code>next</code>链接.链接将指向被调用的方法映射到的URI.添加到方法中的分页参数将匹配设置，<code>PageableHandlerMethodArgumentResolver</code>以确保以后可以解析链接.</li>
</ul>
<p>假设我们在数据库中有30个Person实例.您现在可以触发请求，您将看到类似的内容：<code>GET http://localhost:8080/persons</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123; "links" : [ &#123; "rel" : "next",</div><div class="line">                "href" : "http://localhost:8080/persons?page=1&amp;size=20 &#125;</div><div class="line">  ],</div><div class="line">  "content" : [</div><div class="line">     … // 20 Person instances rendered here</div><div class="line">  ],</div><div class="line">  "pageMetadata" : &#123;</div><div class="line">    "size" : 20,</div><div class="line">    "totalElements" : 30,</div><div class="line">    "totalPages" : 2,</div><div class="line">    "number" : 0</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您会看到汇编程序产生了正确的URI，并且还提取了存在的默认配置，以将参数解析<code>Pageable</code>为即将到来的请求.这意味着，如果您更改该配置，链接将自动遵守更改.默认情况下，汇编程序指向被调用的控制器方法，但可以通过将自定义<code>Link</code>作为基础来定制，以构建<code>PagedResourcesAssembler.toResource(…)</code>方法重载的分页链接.</p>
<h5 id="Querydsl网络支持"><a href="#Querydsl网络支持" class="headerlink" title="Querydsl网络支持"></a>Querydsl网络支持</h5><p>对于具有<a href="http://www.querydsl.com/" target="_blank" rel="external">QueryDSL</a>集成的那些商店，可以从<code>Request</code>查询字符串中包含的属性中导出查询.</p>
<p>这意味着给定<code>User</code>前一个样本的对象一个查询字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?firstname=Dave&amp;lastname=Matthews</div></pre></td></tr></table></figure>
<p>可以解决</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QUser.user.firstname.eq(<span class="string">"Dave"</span>).and(QUser.user.lastname.eq(<span class="string">"Matthews"</span>))</div></pre></td></tr></table></figure>
<p>使用<code>QuerydslPredicateArgumentResolver</code>.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th><code>@EnableSpringDataWebSupport</code>当类路径上找到 Querydsl时，该功能将自动启用.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>添加<code>@QuerydslPredicate</code>到方法签名将提供一个可以使用的<code>Predicate</code>，可以通过执行<code>QueryDslPredicateExecutor</code>.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>类型信息通常从方法返回类型中解析出来.由于这些信息不一定与域类型相匹配，所以使用<code>root</code>属性可能是一个好主意<code>QuerydslPredicate</code>.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span> UserRepository repository;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function">String <span class="title">index</span><span class="params">(Model model, @QuerydslPredicate(root = User.class)</span> Predicate predicate,    *1*</span></div><div class="line">          Pageable pageable, @RequestParam MultiValueMap&lt;String, String&gt; parameters) &#123;</div><div class="line"></div><div class="line">    model.addAttribute(<span class="string">"users"</span>, repository.findAll(predicate, pageable));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><em>1</em></th>
<th>解析查询字符串参数匹配<code>Predicate</code>的<code>User</code>.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>默认绑定如下：</p>
<ul>
<li><code>Object</code>简单的属性为<code>eq</code>.</li>
<li><code>Object</code>收集像属性一样<code>contains</code>.</li>
<li><code>Collection</code>简单的属性为<code>in</code>.</li>
</ul>
<p>这些绑定可以通过<code>bindings</code>属性<code>@QuerydslPredicate</code>或通过使用Java 8 <code>default methods</code>添加<code>QuerydslBinderCustomizer</code>到存储库接口进行定制.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt;,</span></div><div class="line">                                 <span class="title">QueryDslPredicateExecutor</span>&lt;<span class="title">User</span>&gt;,           *1*     </div><div class="line">                                 <span class="title">QuerydslBinderCustomizer</span>&lt;<span class="title">QUser</span>&gt; &#123;           *<span class="number">2</span>*    </div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(QuerydslBindings bindings, QUser user)</span> </span>&#123;</div><div class="line"></div><div class="line">    bindings.bind(user.username).first((path, value) -&gt; path.contains(value))    *<span class="number">3</span>*</div><div class="line">    bindings.bind(String.class)</div><div class="line">      .first((StringPath path, String value) -&gt; path.containsIgnoreCase(value)); *<span class="number">4</span>*</div><div class="line">    bindings.excluding(user.password);                                           *<span class="number">5</span>*</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><em>1</em></th>
<th><code>QueryDslPredicateExecutor</code>提供对特定查找器方法的访问<code>Predicate</code>.</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>2</em></td>
<td><code>QuerydslBinderCustomizer</code>在存储库接口上定义将自动拾取和快捷方式<code>@QuerydslPredicate(bindings=…)</code>.</td>
</tr>
<tr>
<td><em>3</em></td>
<td>将<code>username</code>属性的绑定定义为简单的包含绑定.</td>
</tr>
<tr>
<td><em>4</em></td>
<td>将属性的默认绑定定义<code>String</code>为不区分大小写的包含匹配.</td>
</tr>
<tr>
<td><em>5</em></td>
<td>从解决方案中排除<em>密码</em>属性<code>Predicate</code>.</td>
</tr>
</tbody>
</table>
<h4 id="3-8-3-存储库populator"><a href="#3-8-3-存储库populator" class="headerlink" title="3.8.3.存储库populator"></a>3.8.3.存储库populator</h4><p>如果您使用Spring JDBC模块，您可能熟悉<code>DataSource</code>使用SQL脚本填充的支持.尽管它不使用SQL作为数据定义语言，但存储库级别可以使用类似的抽象，因为它必须与存储无关.因此，populator支持XML（通过Spring的OXM抽象）和JSON（通过Jackson）来定义用于填充存储库的数据.</p>
<p>假设你有一个<code>data.json</code>包含以下内容的文件：</p>
<p>示例39. JSON中定义的数据</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[ &#123; <span class="attr">"_class"</span> : <span class="string">"com.acme.Person"</span>,</div><div class="line"> <span class="attr">"firstname"</span> : <span class="string">"Dave"</span>,</div><div class="line">  <span class="attr">"lastname"</span> : <span class="string">"Matthews"</span> &#125;,</div><div class="line">  &#123; <span class="attr">"_class"</span> : <span class="string">"com.acme.Person"</span>,</div><div class="line"> <span class="attr">"firstname"</span> : <span class="string">"Carter"</span>,</div><div class="line">  <span class="attr">"lastname"</span> : <span class="string">"Beauford"</span> &#125; ]</div></pre></td></tr></table></figure>
<p>您可以使用Spring Data Commons中提供的存储库命名空间的populator元素轻松填充您的存储库.要将上述数据填充到您的PersonRepository，请执行以下操作：</p>
<p>示例40.声明Jackson存储库填充程序</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xmlns:repository</span>=<span class="string">"http://www.springframework.org/schema/data/repository"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/data/repository</div><div class="line">    http://www.springframework.org/schema/data/repository/spring-repository.xsd"&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">repository:jackson2-populator</span> <span class="attr">locations</span>=<span class="string">"classpath:data.json"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该声明导致该<code>data.json</code>文件通过Jackson读取和反序列化<code>ObjectMapper</code>.</p>
<p>JSON对象将被解组的类型将通过检查<code>_class</code>JSON文档的属性来确定.基础设施将最终选择适当的存储库来处理刚被反序列化的对象.</p>
<p>要使用XML来定义数据库，应该使用这些<code>unmarshaller-populator</code>元素来填充这些数据库.您可以将其配置为使用Spring OXM为您提供的一种XML编组器选项.有关详细信息，请参阅<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/oxm.html" target="_blank" rel="external">Spring参考文档</a>.</p>
<p>示例41.声明一个解组的存储库填充程序（使用JAXB）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xmlns:repository</span>=<span class="string">"http://www.springframework.org/schema/data/repository"</span></div><div class="line">  <span class="attr">xmlns:oxm</span>=<span class="string">"http://www.springframework.org/schema/oxm"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">    http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">    http://www.springframework.org/schema/data/repository</div><div class="line">    http://www.springframework.org/schema/data/repository/spring-repository.xsd</div><div class="line">    http://www.springframework.org/schema/oxm</div><div class="line">    http://www.springframework.org/schema/oxm/spring-oxm.xsd"&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">repository:unmarshaller-populator</span> <span class="attr">locations</span>=<span class="string">"classpath:data.json"</span></span></div><div class="line">    <span class="attr">unmarshaller-ref</span>=<span class="string">"unmarshaller"</span> /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">oxm:jaxb2-marshaller</span> <span class="attr">contextPath</span>=<span class="string">"com.acme"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-8-4-传统网络支持"><a href="#3-8-4-传统网络支持" class="headerlink" title="3.8.4.传统网络支持"></a>3.8.4.传统网络支持</h4><h5 id="Spring-MVC的域类Web绑定"><a href="#Spring-MVC的域类Web绑定" class="headerlink" title="Spring MVC的域类Web绑定"></a>Spring MVC的域类Web绑定</h5><p>鉴于您正在开发Spring MVC Web应用程序，您通常必须从URL解析域类ID.默认情况下，您的任务是将请求参数或URL部分转换为域类，将其转交到下面的层，然后直接对实体执行业务逻辑.这看起来像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</div><div class="line">    Assert.notNull(repository, <span class="string">"Repository must not be null!"</span>);</div><div class="line">    <span class="keyword">this</span>.userRepository = userRepository;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUserForm</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id, Model model) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// Do null check for id</span></div><div class="line">    User user = userRepository.findOne(id);</div><div class="line">    <span class="comment">// Do null check for user</span></div><div class="line"></div><div class="line">    model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">    <span class="keyword">return</span> <span class="string">"user"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，您声明每个控制器的存储库依赖关系，以分别查找由控制器或存储库管理的实体.查看实体也是样板，因为它总是<code>findOne(…)</code>打电话.幸运的是，Spring提供了注册自定义组件的方法，允许在<code>String</code>值与任意类型之间进行转换.</p>
<h6 id="属性编辑器"><a href="#属性编辑器" class="headerlink" title="属性编辑器"></a>属性编辑器</h6><p>对于3.0之前的Spring版本<code>PropertyEditors</code>，必须使用简单的Java .要与之进行集成，Spring Data提供了一个<code>DomainClassPropertyEditorRegistrar</code>查找所有在其中注册的Spring数据存储库<code>ApplicationContext</code>并注册<code>PropertyEditor</code>管理域类的自定义.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"….web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"webBindingInitializer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"….web.bind.support.ConfigurableWebBindingInitializer"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propertyEditorRegistrars"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.repository.support.DomainClassPropertyEditorRegistrar"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果您已经配置了上述示例中的Spring MVC，则可以按如下方式配置控制器，从而减少了大量杂乱和样板.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUserForm</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> User user, Model model) </span>&#123;</div><div class="line"></div><div class="line">    model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">    <span class="keyword">return</span> <span class="string">"userForm"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-按示例查询"><a href="#4-按示例查询" class="headerlink" title="4.按示例查询"></a>4.按示例查询</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1.介绍"></a>4.1.介绍</h3><p>本章将为您提供“按示例查询”的介绍，并说明如何使用示例.</p>
<p>示例查询（QBE）是一种用户友好的查询技术，具有简单的接口.它允许动态查询创建，并且不需要编写包含字段名称的查询.实际上，按示例查询，根本不需要使用商店特定的查询语言编写查询.</p>
<h3 id="4-2-用法"><a href="#4-2-用法" class="headerlink" title="4.2.用法"></a>4.2.用法</h3><p>由示例API查询由三部分组成：</p>
<ul>
<li>Probe：这是具有填充字段的域对象的实际示例.</li>
<li><code>ExampleMatcher</code>：<code>ExampleMatcher</code>载有关于如何匹配特定字段的详细信息.它可以重复使用在多个示例.</li>
<li><code>Example</code>：<code>Example</code>由探针和<code>ExampleMatcher</code>.它用于创建查询.</li>
</ul>
<p>按示例查询适用于多个用例，但也有限制：</p>
<p><strong>何时使用</strong></p>
<ul>
<li>使用一组静态或动态约束来查询数据存储</li>
<li>频繁重构域对象，而不用担心破坏现有查询</li>
<li>独立于底层数据存储API</li>
</ul>
<p><strong>限制</strong></p>
<ul>
<li>不支持嵌套/分组的属性约束，如 <code>firstname = ?0 or (firstname = ?1 and lastname = ?2)</code></li>
<li>只支持对字符串进行启动/包含/结束/正则表达式匹配以及其他属性类型的精确匹配</li>
</ul>
<p>在开始使用按示例查询之前，您需要有一个域对象.要开始，只需为您的存储库创建一个接口：</p>
<p>示例42. Sample Person对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="keyword">private</span> String id;</div><div class="line">  <span class="keyword">private</span> String firstname;</div><div class="line">  <span class="keyword">private</span> String lastname;</div><div class="line">  <span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line">  <span class="comment">// … getters and setters omitted</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个简单的域对象.你可以用它创建一个<code>Example</code>.默认情况下，具有<code>null</code>值的字段将被忽略，字符串将使用存储特定的默认值进行匹配.示例可以通过使用<code>of</code>工厂方法或使用来构建<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#query-by-example.matcher" target="_blank" rel="external"><code>ExampleMatcher</code></a>.<code>Example</code>是不可变的</p>
<p>示例43.简单示例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person person = <span class="keyword">new</span> Person();                     *<span class="number">1</span>*    </div><div class="line">person.setFirstname(<span class="string">"Dave"</span>);                      *<span class="number">2</span>*    </div><div class="line"></div><div class="line">Example&lt;Person&gt; example = Example.of(person);      *<span class="number">3</span>*</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><em>1</em></th>
<th>创建域对象的新实例</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>2</em></td>
<td>设置要查询的属性</td>
</tr>
<tr>
<td><em>3</em></td>
<td>创建 <code>Example</code></td>
</tr>
</tbody>
</table>
<p>理想情况下，使用存储库执行示例.为此，让您的存储库接口扩展<code>QueryByExampleExecutor&lt;T&gt;</code>.以下是该<code>QueryByExampleExecutor</code>接口的摘录：</p>
<p>例44 <code>QueryByExampleExecutor</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  &lt;S extends T&gt; <span class="function">S <span class="title">findOne</span><span class="params">(Example&lt;S&gt; example)</span></span>;</div><div class="line"></div><div class="line">  &lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; example)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">// … more functionality omitted.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您可以在下面阅读更多关于<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#query-by-example.execution" target="_blank" rel="external">按示例执行</a>查询.</p>
<h3 id="4-3-示例匹配器"><a href="#4-3-示例匹配器" class="headerlink" title="4.3.示例匹配器"></a>4.3.示例匹配器</h3><p>示例不限于默认设置.您可以使用以下命令为字符串匹配，空处理和特定于属性的设置指定自己的默认值<code>ExampleMatcher</code>.</p>
<p>示例45.具有自定义匹配的示例匹配器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Person person = <span class="keyword">new</span> Person();                  *<span class="number">1</span>*        </div><div class="line">person.setFirstname(<span class="string">"Dave"</span>);                    *<span class="number">2</span>*       </div><div class="line"></div><div class="line">ExampleMatcher matcher = ExampleMatcher.matching()     *<span class="number">3</span>*</div><div class="line">  .withIgnorePaths(<span class="string">"lastname"</span>)                       *<span class="number">4</span>*  </div><div class="line">  .withIncludeNullValues()                             *<span class="number">5</span>*</div><div class="line">  .withStringMatcherEnding();                          *<span class="number">6</span>*</div><div class="line"></div><div class="line">Example&lt;Person&gt; example = Example.of(person, matcher); *<span class="number">7</span>*</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th><em>1</em></th>
<th>创建域对象的新实例.</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>2</em></td>
<td>设置属性.</td>
</tr>
<tr>
<td><em>3</em></td>
<td>创建一个<code>ExampleMatcher</code>期望所有值匹配.即使没有进一步的配置，在这个阶段也可以使用.</td>
</tr>
<tr>
<td><em>4</em></td>
<td>构造一个新的<code>ExampleMatcher</code>来忽略属性路径<code>lastname</code>.</td>
</tr>
<tr>
<td><em>5</em></td>
<td>构造一个新的<code>ExampleMatcher</code>来忽略属性路径<code>lastname</code>并包含空值.</td>
</tr>
<tr>
<td><em>6</em></td>
<td>构造一个新<code>ExampleMatcher</code>的忽略属性路径<code>lastname</code>，包含空值，并使用perform suffix字符串匹配.</td>
</tr>
<tr>
<td><em>7</em></td>
<td><code>Example</code>根据域对象和配置创建新的<code>ExampleMatcher</code>.</td>
</tr>
</tbody>
</table>
<p>默认情况下，<code>ExampleMatcher</code>将期望探针上设置的所有值都匹配.如果要获取匹配任何隐含定义的谓词的结果，请使用<code>ExampleMatcher.matchingAny()</code>.</p>
<p>您可以为各个属性指定行为（例如嵌套属性的“firstname”和“lastname”，“address.city”）.您可以使用匹配的选项和区分大小写来调整它.</p>
<p>示例46.配置匹配器选项</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ExampleMatcher matcher = ExampleMatcher.matching()</div><div class="line">  .withMatcher(<span class="string">"firstname"</span>, endsWith())</div><div class="line">  .withMatcher(<span class="string">"lastname"</span>, startsWith().ignoreCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置匹配器选项的另一种风格是使用Java 8 lambdas.这种方法是一个回调，要求实现者修改匹配器.由于配置选项保持在匹配器实例中，因此不需要返回匹配器.</p>
<p>示例47.使用lambdas配置匹配器选项</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ExampleMatcher matcher = ExampleMatcher.matching()</div><div class="line">  .withMatcher(<span class="string">"firstname"</span>, match -&gt; match.endsWith())</div><div class="line">  .withMatcher(<span class="string">"firstname"</span>, match -&gt; match.startsWith());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过<code>Example</code>使用合并的配置视图创建的查询.默认匹配设置可以在<code>ExampleMatcher</code>级别设置，而个别设置可以应用于特定的属性路径.设置的设置<code>ExampleMatcher</code>由属性路径设置继承，除非它们被明确定义.属性修补程序上的设置的优先级高于默认设置.</p>
<table>
<thead>
<tr>
<th>设置</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>空操作</td>
<td><code>ExampleMatcher</code></td>
</tr>
<tr>
<td>字符串匹配</td>
<td><code>ExampleMatcher</code> 和物业路径</td>
</tr>
<tr>
<td>忽略属性</td>
<td>物业路径</td>
</tr>
<tr>
<td>区分大小写</td>
<td><code>ExampleMatcher</code> 和物业路径</td>
</tr>
<tr>
<td>价值转型</td>
<td>物业路径</td>
</tr>
</tbody>
</table>
<h2 id="5-审计"><a href="#5-审计" class="headerlink" title="5.审计"></a>5.审计</h2><h3 id="5-1-基本"><a href="#5-1-基本" class="headerlink" title="5.1.基本"></a>5.1.基本</h3><p>Spring Data提供了复杂的支持，以透明地跟踪创建或更改实体的人员以及发生的时间点.为了从该功能中受益，您必须为实体类配备审计元数据，该元数据可以使用注解或实现一个接口进行定义.</p>
<h4 id="5-1-1-基于注解的审计元数据"><a href="#5-1-1-基于注解的审计元数据" class="headerlink" title="5.1.1.基于注解的审计元数据"></a>5.1.1.基于注解的审计元数据</h4><p>我们提供<code>@CreatedBy</code>，<code>@LastModifiedBy</code>捕捉谁创建或修改的实体以及用户<code>@CreatedDate</code>和<code>@LastModifiedDate</code>捕捉一次发生这种情况的地步.</p>
<p>实例48.经审计的实体</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@CreatedBy</span></div><div class="line">  <span class="keyword">private</span> User user;</div><div class="line"></div><div class="line">  <span class="meta">@CreatedDate</span></div><div class="line">  <span class="keyword">private</span> DateTime createdDate;</div><div class="line"></div><div class="line">  <span class="comment">// … further properties omitted</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您可以看到，可以选择性地应用注解，具体取决于您要捕获的信息.对于捕获时间点的注解可以用于JodaTimes <code>DateTime</code>，旧Java <code>Date</code>和<code>Calendar</code>JDK8日期/时间类型以及<code>long</code>/的类型的属性<code>Long</code>.</p>
<h4 id="5-1-2-基于接口的审计元数据"><a href="#5-1-2-基于接口的审计元数据" class="headerlink" title="5.1.2.基于接口的审计元数据"></a>5.1.2.基于接口的审计元数据</h4><p>如果您不想使用注解来定义审核元数据，则可以让您的域类实现该<code>Auditable</code>接口.它暴露了所有审核属性的setter方法.</p>
<p>还有一个方便的基类<code>AbstractAuditable</code>，您可以扩展，以避免手动实现接口方法的需要.请注意，这增加了您的域类与Spring数据的耦合，这可能是您想要避免的.通常，基于注解的定义审计元数据的方式是首选的，因为它具有较少的侵入性和更灵活性.</p>
<h4 id="5-1-3-AuditorAware"><a href="#5-1-3-AuditorAware" class="headerlink" title="5.1.3.AuditorAware"></a>5.1.3.AuditorAware</h4><p>如果您使用任何一个<code>@CreatedBy</code>或者<code>@LastModifiedBy</code>，审计基础设施需要了解当前的主体.为此，我们提供了一个<code>AuditorAware&lt;T&gt;</code>SPI接口，您必须实现该接口来告知基础架构当前用户或系统与应用程序交互的情况.通用类型<code>T</code>定义了使用<code>@CreatedBy</code>或<code>@LastModifiedBy</code>必须注解的属性类型.</p>
<p>以下是使用Spring Security <code>Authentication</code>对象的接口示例实现：</p>
<p>示例49.基于Spring Security的AuditorAware的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityAuditorAware</span> <span class="keyword">implements</span> <span class="title">AuditorAware</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">getCurrentAuditor</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (authentication == <span class="keyword">null</span> || !authentication.isAuthenticated()) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ((MyUserDetails) authentication.getPrincipal()).getUser();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该实现是访问<code>Authentication</code>Spring Security提供的对象，并查找<code>UserDetails</code>您在实现中创建的自定义实例<code>UserDetailsService</code>.我们在这里假设您通过该<code>UserDetails</code>实现暴露域用户，但您也可以根据<code>Authentication</code>发现从任何地方查找.</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="附录A：命名空间参考"><a href="#附录A：命名空间参考" class="headerlink" title="附录A：命名空间参考"></a>附录A：命名空间参考</h2><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a><repositories>元素</repositories></h3><p>该<code>&lt;repositories /&gt;</code>元素触发了Spring Data存储库基础结构的设置.最重要的属性是<code>base-package</code>定义要扫描Spring数据存储库接口的包.[ <a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_footnote_3" target="_blank" rel="external">3</a> ]</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>base-package</code></td>
<td>定义用于在自动检测模式下扩展*存储库（实际接口由特定的Spring数据模块确定）的存储库接口进行扫描的软件包.所配置的软件包以下的所有软件包也将被扫描.通配符是允许的.</td>
</tr>
<tr>
<td><code>repository-impl-postfix</code></td>
<td>定义后缀自动检测自定义存储库实现.其名称以配置的后缀结尾的类将被视为候选.默认为<code>Impl</code>.</td>
</tr>
<tr>
<td><code>query-lookup-strategy</code></td>
<td>确定用于创建查找器查询的策略.有关详细信息，请参阅<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.query-methods.query-lookup-strategies" target="_blank" rel="external">查询查询策略</a>.默认为<code>create-if-not-found</code>.</td>
</tr>
<tr>
<td><code>named-queries-location</code></td>
<td>定义查找包含外部定义查询的“属性”文件的位置.</td>
</tr>
<tr>
<td><code>consider-nested-repositories</code></td>
<td>控制是否应考虑嵌套的存储库接口定义.默认为<code>false</code>.</td>
</tr>
</tbody>
</table>
<h2 id="附录B：Populators命名空间参考"><a href="#附录B：Populators命名空间参考" class="headerlink" title="附录B：Populators命名空间参考"></a>附录B：Populators命名空间参考</h2><h3 id="元素-1"><a href="#元素-1" class="headerlink" title="元素"></a><populator>元素</populator></h3><p>该<code>&lt;populator /&gt;</code>元素允许通过Spring数据库基础架构填充数据存储.[ <a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_footnote_4" target="_blank" rel="external">4</a> ]</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>locations</code></td>
<td>在哪里可以找到从存储库读取对象的文件.</td>
</tr>
</tbody>
</table>
<h2 id="附录C：存储库查询关键字"><a href="#附录C：存储库查询关键字" class="headerlink" title="附录C：存储库查询关键字"></a>附录C：存储库查询关键字</h2><h3 id="支持的查询关键字"><a href="#支持的查询关键字" class="headerlink" title="支持的查询关键字"></a>支持的查询关键字</h3><p>下表列出了Spring数据库查询推导机制通常支持的关键字.但是，请查阅特定于商店的文档，了解支持的关键字的确切列表，因为某些商店中可能不支持这些列表.</p>
<table>
<thead>
<tr>
<th>逻辑关键字</th>
<th>关键词表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>AND</code></td>
<td><code>And</code></td>
</tr>
<tr>
<td><code>OR</code></td>
<td><code>Or</code></td>
</tr>
<tr>
<td><code>AFTER</code></td>
<td><code>After</code>， <code>IsAfter</code></td>
</tr>
<tr>
<td><code>BEFORE</code></td>
<td><code>Before</code>， <code>IsBefore</code></td>
</tr>
<tr>
<td><code>CONTAINING</code></td>
<td><code>Containing</code>，<code>IsContaining</code>，<code>Contains</code></td>
</tr>
<tr>
<td><code>BETWEEN</code></td>
<td><code>Between</code>， <code>IsBetween</code></td>
</tr>
<tr>
<td><code>ENDING_WITH</code></td>
<td><code>EndingWith</code>，<code>IsEndingWith</code>，<code>EndsWith</code></td>
</tr>
<tr>
<td><code>EXISTS</code></td>
<td><code>Exists</code></td>
</tr>
<tr>
<td><code>FALSE</code></td>
<td><code>False</code>， <code>IsFalse</code></td>
</tr>
<tr>
<td><code>GREATER_THAN</code></td>
<td><code>GreaterThan</code>， <code>IsGreaterThan</code></td>
</tr>
<tr>
<td><code>GREATER_THAN_EQUALS</code></td>
<td><code>GreaterThanEqual</code>， <code>IsGreaterThanEqual</code></td>
</tr>
<tr>
<td><code>IN</code></td>
<td><code>In</code>， <code>IsIn</code></td>
</tr>
<tr>
<td><code>IS</code></td>
<td><code>Is</code>，<code>Equals</code>（或没有关键词）</td>
</tr>
<tr>
<td><code>IS_NOT_NULL</code></td>
<td><code>NotNull</code>， <code>IsNotNull</code></td>
</tr>
<tr>
<td><code>IS_NULL</code></td>
<td><code>Null</code>， <code>IsNull</code></td>
</tr>
<tr>
<td><code>LESS_THAN</code></td>
<td><code>LessThan</code>， <code>IsLessThan</code></td>
</tr>
<tr>
<td><code>LESS_THAN_EQUAL</code></td>
<td><code>LessThanEqual</code>， <code>IsLessThanEqual</code></td>
</tr>
<tr>
<td><code>LIKE</code></td>
<td><code>Like</code>， <code>IsLike</code></td>
</tr>
<tr>
<td><code>NEAR</code></td>
<td><code>Near</code>， <code>IsNear</code></td>
</tr>
<tr>
<td><code>NOT</code></td>
<td><code>Not</code>， <code>IsNot</code></td>
</tr>
<tr>
<td><code>NOT_IN</code></td>
<td><code>NotIn</code>， <code>IsNotIn</code></td>
</tr>
<tr>
<td><code>NOT_LIKE</code></td>
<td><code>NotLike</code>， <code>IsNotLike</code></td>
</tr>
<tr>
<td><code>REGEX</code></td>
<td><code>Regex</code>，<code>MatchesRegex</code>，<code>Matches</code></td>
</tr>
<tr>
<td><code>STARTING_WITH</code></td>
<td><code>StartingWith</code>，<code>IsStartingWith</code>，<code>StartsWith</code></td>
</tr>
<tr>
<td><code>TRUE</code></td>
<td><code>True</code>， <code>IsTrue</code></td>
</tr>
<tr>
<td><code>WITHIN</code></td>
<td><code>Within</code>， <code>IsWithin</code></td>
</tr>
</tbody>
</table>
<h2 id="附录D：存储库查询返回类型"><a href="#附录D：存储库查询返回类型" class="headerlink" title="附录D：存储库查询返回类型"></a>附录D：存储库查询返回类型</h2><h3 id="支持的查询返回类型"><a href="#支持的查询返回类型" class="headerlink" title="支持的查询返回类型"></a>支持的查询返回类型</h3><p>下表列出了Spring Data仓库通常支持的返回类型.但是，请查阅特定于商店的文档，以获取支持的返回类型的确切列表，因为某些商店中可能不支持这些列表.</p>
<table>
<thead>
<tr>
<th><strong>注</strong></th>
<th>地理空间类型，如（<code>GeoResult</code>，<code>GeoResults</code>，<code>GeoPage</code>）只适用于支持地理空间查询的数据存储.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>返回类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td>不表示返回值.</td>
</tr>
<tr>
<td>基元</td>
<td>Java原语.</td>
</tr>
<tr>
<td>包装类型</td>
<td>Java包装器类型.</td>
</tr>
<tr>
<td><code>T</code></td>
<td>一个独特的实体.期望查询方法最多返回一个结果.如果没有找到结果<code>null</code>返回.多个结果将触发<code>IncorrectResultSizeDataAccessException</code>.</td>
</tr>
<tr>
<td><code>Iterator&lt;T&gt;</code></td>
<td>的<code>Iterator</code>.</td>
</tr>
<tr>
<td><code>Collection&lt;T&gt;</code></td>
<td>一<code>Collection</code>.</td>
</tr>
<tr>
<td><code>List&lt;T&gt;</code></td>
<td>一<code>List</code>.</td>
</tr>
<tr>
<td><code>Optional&lt;T&gt;</code></td>
<td>Java 8或Guava <code>Optional</code>.期望查询方法最多返回一个结果.如果没有找到<code>Optional.empty()</code>/ <code>Optional.absent()</code>返回结果.多个结果将触发<code>IncorrectResultSizeDataAccessException</code>.</td>
</tr>
<tr>
<td><code>Option&lt;T&gt;</code></td>
<td>Scala或JavaSlang <code>Option</code>类型.与<code>Optional</code>上述Java 8相似的行为.</td>
</tr>
<tr>
<td><code>Stream&lt;T&gt;</code></td>
<td>Java 8 <code>Stream</code>.</td>
</tr>
<tr>
<td><code>Future&lt;T&gt;</code></td>
<td>一<code>Future</code>.期待使用<code>@Async</code>注解的方法，并且需要启用Spring的异步方法执行功能.</td>
</tr>
<tr>
<td><code>CompletableFuture&lt;T&gt;</code></td>
<td>Java 8 <code>CompletableFuture</code>.期待使用<code>@Async</code>注解的方法，并且需要启用Spring的异步方法执行功能.</td>
</tr>
<tr>
<td><code>ListenableFuture</code></td>
<td>一<code>org.springframework.util.concurrent.ListenableFuture</code>.期待使用<code>@Async</code>注解的方法，并且需要启用Spring的异步方法执行功能.</td>
</tr>
<tr>
<td><code>Slice</code></td>
<td>大小的数据块与信息是否有更多的数据可用.需要一个<code>Pageable</code>方法参数.</td>
</tr>
<tr>
<td><code>Page&lt;T&gt;</code></td>
<td>A <code>Slice</code>附加信息，例如总结果数.需要一个<code>Pageable</code>方法参数.</td>
</tr>
<tr>
<td><code>GeoResult&lt;T&gt;</code></td>
<td>带有附加信息的结果条目，例如到参考位置的距离.</td>
</tr>
<tr>
<td><code>GeoResults&lt;T&gt;</code></td>
<td>的列表<code>GeoResult&lt;T&gt;</code>与其他信息，到参考位置例如平均距离.</td>
</tr>
<tr>
<td><code>GeoPage&lt;T&gt;</code></td>
<td>甲<code>Page</code>带<code>GeoResult&lt;T&gt;</code>，例如平均距离的参考位置.</td>
</tr>
</tbody>
</table>
<hr>
<p><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_footnoteref_1" target="_blank" rel="external">1</a>.<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java" target="_blank" rel="external">JavaConfig在Spring参考文档中</a></p>
<p><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_footnoteref_2" target="_blank" rel="external">2</a>.SPRINGHATEOAS - <a href="https://github.com/SpringSource/spring-hateoas" target="_blank" rel="external">https://github.com/SpringSource/spring-hateoas</a></p>
<p><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_footnoteref_3" target="_blank" rel="external">3</a>.请参阅<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances.spring" target="_blank" rel="external">XML配置</a></p>
<p><a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#_footnoteref_4" target="_blank" rel="external">4</a>.请参阅<a href="http://docs.spring.io/spring-data/data-commons/docs/current/reference/html/#repositories.create-instances.spring" target="_blank" rel="external">XML配置</a></p>
<p>版本1.13.4.RELEASE<br>最后更新2017-06-08 10:35:34 MESZ</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Data-Commons-中文参考文档&quot;&gt;&lt;a href=&quot;#Spring-Data-Commons-中文参考文档&quot; class=&quot;headerlink&quot; title=&quot;Spring Data Commons - 中文参考文档&quot;&gt;&lt;/a&gt;Spring Data Commons - 中文参考文档&lt;/h1&gt;&lt;p&gt;Oliver GierkeThomas DarimontChristoph StroblMark PollackThomas Risberg版本1.13.4.RELEASE，2017-06-08&lt;/p&gt;
&lt;p&gt;©2008-2015原作者.&lt;br&gt;
    
    </summary>
    
      <category term="Spring Data Commons" scheme="https://muyinchen.github.io/categories/Spring-Data-Commons/"/>
    
    
      <category term="Spring Data Commons" scheme="https://muyinchen.github.io/tags/Spring-Data-Commons/"/>
    
  </entry>
  
  <entry>
    <title>一个轻量级分布式 RPC 框架  下</title>
    <link href="https://muyinchen.github.io/2017/03/27/%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%88%86%E5%B8%83%E5%BC%8F%20RPC%20%E6%A1%86%E6%9E%B6%20%E4%B8%8B/"/>
    <id>https://muyinchen.github.io/2017/03/27/一个轻量级分布式 RPC 框架 下/</id>
    <published>2017-03-26T17:04:05.844Z</published>
    <updated>2017-03-26T17:03:19.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个轻量级分布式-RPC-框架-下"><a href="#一个轻量级分布式-RPC-框架-下" class="headerlink" title="一个轻量级分布式 RPC 框架 下"></a>一个轻量级分布式 RPC 框架 下</h1><p>接<a href="https://muyinchen.github.io/2017/03/16/%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%88%86%E5%B8%83%E5%BC%8F%20RPC%20%E6%A1%86%E6%9E%B6%20%E4%B8%8A/">一个轻量级分布式 RPC 框架 上</a></p>
<a id="more"></a>
<h2 id="3，编写客户端模块"><a href="#3，编写客户端模块" class="headerlink" title="3，编写客户端模块"></a>3，编写客户端模块</h2><h3 id="设定Client端的实现功能接口"><a href="#设定Client端的实现功能接口" class="headerlink" title="设定Client端的实现功能接口"></a>设定<code>Client</code>端的实现功能接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.client;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Response;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 服务的发现与使用</div><div class="line"> *</div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/18.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function">Response <span class="title">sendMessage</span><span class="params">(Class&lt;?&gt; clazz, Method method, Object[] args)</span></span>;</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">proxyInterface</span><span class="params">(Class&lt;T&gt; serviceInterface)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实现-RPC-代理"><a href="#实现-RPC-代理" class="headerlink" title="实现 RPC 代理"></a>实现 RPC 代理</h3><p>因会用到动态代理，那先设计动态代理实现的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.rpcproxy;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.client.Client;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/18.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RpcProxy</span> </span>&#123;</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">proxyInterface</span><span class="params">(Client client, <span class="keyword">final</span> Class&lt;T&gt; serviceInterface)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用CGLib 来实现  RPC 代理（当然也可以使用Java 提供的动态代理技术实现 ），具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.rpcproxy;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.client.Client;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/18.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibRpcProxy</span> <span class="keyword">implements</span> <span class="title">RpcProxy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">proxyInterface</span><span class="params">(Client client, Class&lt;T&gt; serviceInterface)</span> </span>&#123;</div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</div><div class="line">        enhancer.setSuperclass(serviceInterface);</div><div class="line">        enhancer.setCallback(<span class="keyword">new</span> CglibInteceptor(client, serviceInterface));</div><div class="line">        Object enhancedObject = enhancer.create();</div><div class="line">        <span class="keyword">return</span> (T)enhancedObject;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 搞个静态内部类来做Method的cglib代理</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibInteceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//首先判断所要代理的方法是通用方法，是的话就此返回此代理对象的相关内容</span></div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Method hashCodeMethod;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Method equalsMethod;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Method toStringMethod;</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                hashCodeMethod = Object.class.getMethod(<span class="string">"hashCode"</span>);</div><div class="line">                equalsMethod = Object.class.getMethod(<span class="string">"equals"</span>, Object.class);</div><div class="line">                toStringMethod = Object.class.getMethod(<span class="string">"toString"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 针对这几个方法做相应的策略</div><div class="line">         * <span class="doctag">@param</span> proxy</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">proxyHashCode</span><span class="params">(Object proxy)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> System.identityHashCode(proxy);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">proxyEquals</span><span class="params">(Object proxy, Object other)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (proxy == other);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">proxyToString</span><span class="params">(Object proxy)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> proxy.getClass().getName() + <span class="string">'@'</span> + Integer.toHexString(proxy.hashCode());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 加入rpc客户端和传入所调用服务的接口</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> Client client;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> Class&lt;?&gt; serviceInterface;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CglibInteceptor</span><span class="params">(Client client, Class&lt;?&gt; serviceInterface)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.client = client;</div><div class="line">            <span class="keyword">this</span>.serviceInterface = serviceInterface;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">            <span class="comment">//先对方法进行判断是否是通用方法，假如都不是，最后再通过client来调用</span></div><div class="line">            <span class="keyword">if</span> (hashCodeMethod.equals(method)) &#123;</div><div class="line">                <span class="keyword">return</span> proxyHashCode(proxy);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (equalsMethod.equals(method)) &#123;</div><div class="line">                <span class="keyword">return</span> proxyEquals(proxy, args[<span class="number">0</span>]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (toStringMethod.equals(method)) &#123;</div><div class="line">                <span class="keyword">return</span> proxyToString(proxy);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> client.sendMessage(serviceInterface, method, args).getResponse();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="客户端handler设计"><a href="#客户端handler设计" class="headerlink" title="客户端handler设计"></a>客户端handler设计</h3><p>在服务端完成处理对服务端的返回信息进行封装:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Response;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/18.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseMapHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentMap&lt;Long, BlockingQueue&lt;Response&gt;&gt; responseMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后再客户端对返回信息进行处理:</p>
<p>因为代码注释很详细，细节就不说了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.client;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Response;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandler;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.nia.rpc.core.utils.ResponseMapHelper.responseMap;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/18.</div><div class="line"> */</div><div class="line"><span class="meta">@ChannelHandler</span>.Sharable<span class="comment">/*因为要在不同channel中共享使用responseMap的blockingQueue，所以要加此注解*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Response</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RpcClientHandler.class);</div><div class="line"></div><div class="line">    <span class="comment">//因为此处这个要公用，故拿出来单独放到一个类中来调用</span></div><div class="line">   <span class="comment">// public static ConcurrentMap&lt;Long, BlockingQueue&lt;Response&gt;&gt; responseMap = new ConcurrentHashMap&lt;Long, BlockingQueue&lt;Response&gt;&gt;();</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Response msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//此处的业务逻辑就是拿到对应id，讲返回信息放入相应blockingQueue中</span></div><div class="line">        BlockingQueue&lt;Response&gt; blockingQueue = responseMap.get(msg.getRequestId());</div><div class="line">        <span class="keyword">if</span> (blockingQueue != <span class="keyword">null</span>) &#123;</div><div class="line">            blockingQueue.put(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.error(<span class="string">"Exception caught on &#123;&#125;, "</span>, ctx.channel(), cause);</div><div class="line">        ctx.channel().close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="客户端创建连接并保存"><a href="#客户端创建连接并保存" class="headerlink" title="客户端创建连接并保存"></a>客户端创建连接并保存</h3><h4 id="commons-pool2-对象池的使用"><a href="#commons-pool2-对象池的使用" class="headerlink" title="commons.pool2 对象池的使用"></a>commons.pool2 对象池的使用</h4><p>在客户端这里建立个对象池来保存并复用和提供服务端连接channel的信息，并在这里进行创建客户端连接然后保存，减少重复创建所带来的资源损耗</p>
<p>关于此对象池，想进一步了解，请看<a href="https://github.com/muyinchen/woker/blob/master/rpc%E6%A1%86%E6%9E%B6%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9/commons.pool2%20%E5%AF%B9%E8%B1%A1%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8.md" target="_blank" rel="external">commons.pool2 对象池的使用</a>，这里就不多说了</p>
<p>通过上个说明文档链接先搞个池对象工厂的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.client.RpcClientHandler;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.RpcDecoder;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.RpcEncoder;</div><div class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</div><div class="line"><span class="keyword">import</span> io.netty.channel.*;</div><div class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</div><div class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</div><div class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</div><div class="line"><span class="keyword">import</span> org.apache.commons.pool2.BasePooledObjectFactory;</div><div class="line"><span class="keyword">import</span> org.apache.commons.pool2.PooledObject;</div><div class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.DefaultPooledObject;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 池对象工厂(PooledObjectFactory接口):</div><div class="line"> * 用来创建池对象, 将不用的池对象进行钝化(passivateObject),</div><div class="line"> * 对要使用的池对象进行激活(activeObject),</div><div class="line"> * 对池对象进行验证(validateObject),</div><div class="line"> * 对有问题的池对象进行销毁(destroyObject)等工作</div><div class="line"> *</div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/18.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionObjectFactory</span> <span class="keyword">extends</span> <span class="title">BasePooledObjectFactory</span>&lt;<span class="title">Channel</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ConnectionObjectFactory.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String ip;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionObjectFactory</span><span class="params">(String ip, <span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ip = ip;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Channel <span class="title">createNewConChannel</span><span class="params">()</span> </span>&#123;</div><div class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</div><div class="line">        bootstrap.channel(NioSocketChannel.class)</div><div class="line">                 .group(<span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>))</div><div class="line">                 .handler(<span class="keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;</div><div class="line">                     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                         ch.pipeline().addLast(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line">                           .addLast(<span class="keyword">new</span> RpcDecoder(<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>))</div><div class="line">                           .addLast(<span class="keyword">new</span> RpcEncoder())</div><div class="line">                           .addLast(<span class="keyword">new</span> RpcClientHandler())</div><div class="line">                         ;</div><div class="line">                     &#125;</div><div class="line">                 &#125;);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> ChannelFuture f = bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">3000</span>)</div><div class="line">                                             .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</div><div class="line">                                             .connect(ip, port).sync();</div><div class="line">            f.addListener((ChannelFutureListener) future -&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (future.isSuccess()) &#123;</div><div class="line">                    LOGGER.info(<span class="string">"Connect success &#123;&#125; "</span>, f);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">final</span> Channel channel = f.channel();</div><div class="line">            channel.closeFuture().addListener((ChannelFutureListener) future -&gt; LOGGER.info(<span class="string">"Channel Close &#123;&#125; &#123;&#125;"</span>, ip, port));</div><div class="line">            <span class="keyword">return</span> channel;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Channel <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> createNewConChannel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PooledObject&lt;Channel&gt; <span class="title">wrap</span><span class="params">(Channel obj)</span> </span>&#123;</div><div class="line">        <span class="comment">//排查出错，之前直接返回个null，未对方法进行重写，导致出错，拿不出对象</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultPooledObject&lt;&gt;(obj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyObject</span><span class="params">(PooledObject&lt;Channel&gt; p)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        p.getObject().close().addListener((ChannelFutureListener) future -&gt; LOGGER.info(<span class="string">"Close Finish"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateObject</span><span class="params">(PooledObject&lt;Channel&gt; p)</span> </span>&#123;</div><div class="line">        Channel object = p.getObject();</div><div class="line">        <span class="keyword">return</span> object.isActive();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后做个<code>channel</code>包装:</p>
<p>主要还是为了得到一个池<code>GenericObjectPool</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.client;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.utils.ConnectionObjectFactory;</div><div class="line"><span class="keyword">import</span> io.netty.channel.Channel;</div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"><span class="keyword">import</span> org.apache.commons.pool2.ObjectPool;</div><div class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPool;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/18.</div><div class="line"> */</div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelConf</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String connStr;</div><div class="line">    <span class="keyword">private</span> String host;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ip;</div><div class="line">    <span class="keyword">private</span> Channel channel;</div><div class="line">    <span class="keyword">private</span> ObjectPool&lt;Channel&gt; channelObjectPool;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChannelConf</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.host = host;</div><div class="line">        <span class="keyword">this</span>.ip = port;</div><div class="line">        <span class="keyword">this</span>.connStr = host + <span class="string">":"</span> + ip;</div><div class="line">        channelObjectPool = <span class="keyword">new</span> GenericObjectPool&lt;&gt;(<span class="keyword">new</span> ConnectionObjectFactory(host, port));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        channelObjectPool.close();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"ChannelConf&#123;"</span>);</div><div class="line">        sb.append(<span class="string">"connStr='"</span>).append(connStr).append(<span class="string">'\''</span>);</div><div class="line">        sb.append(<span class="string">", host='"</span>).append(host).append(<span class="string">'\''</span>);</div><div class="line">        sb.append(<span class="string">", ip="</span>).append(ip);</div><div class="line">        sb.append(<span class="string">", channel="</span>).append(channel);</div><div class="line">        sb.append(<span class="string">", channelObjectPool="</span>).append(channelObjectPool);</div><div class="line">        sb.append(<span class="string">'&#125;'</span>);</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="对客户端接口逻辑进行实现"><a href="#对客户端接口逻辑进行实现" class="headerlink" title="对客户端接口逻辑进行实现:"></a>对客户端接口逻辑进行实现:</h3><h4 id="在客户端启动时通过init-做如下逻辑"><a href="#在客户端启动时通过init-做如下逻辑" class="headerlink" title="在客户端启动时通过init()做如下逻辑:"></a>在客户端启动时通过<code>init()</code>做如下逻辑:</h4><ol>
<li>通过<code>CuratorFrameworkFactory</code>来连接<code>zk</code>;</li>
<li>通过<code>curator API</code> 的<code>Path Cache</code>用来监控一个<code>ZNode</code>的子节点. 这里是<code>pathChildrenCache</code>，然后开写监控逻辑(方便动态的增加删除<code>channel</code>):<ul>
<li>先在之前拿到<code>zk</code>下的所有节点，然后根据服务注册规则，所得到拼接服务的节点的<code>key</code>，就可以得到提供服务的所有子节点list,这里是<code>newServiceData</code></li>
<li>关闭删除本地缓存中多出的<code>channel</code>:<ul>
<li>​通过遍历<code>channelWrappers</code>来判断<code>newServiceData</code>是否包含有其中的链接，没包含的就清理掉，关闭相应对象池，并从<code>channelWrappers</code>移除;</li>
</ul>
</li>
<li>增加<code>channelWrappers</code>中未存在的服务连接<code>channel</code></li>
</ul>
</li>
<li>回到主线程，通过<code>List&lt;String&gt; strings = children.forPath(serviceZKPath);</code>得到提供服务的所有子节点list</li>
<li><code>strings</code>为空，则报出无可用服务的运行时异常处理;</li>
<li>不为空，添加进<code>channelWrappers</code>中</li>
</ol>
<h4 id="在客户端调用接口方法时实现的逻辑"><a href="#在客户端调用接口方法时实现的逻辑" class="headerlink" title="在客户端调用接口方法时实现的逻辑:"></a>在客户端调用接口方法时实现的逻辑:</h4><ol>
<li>对接口方法调用进行<code>request</code>包装;</li>
<li>根据相应服务来得到<code>channel</code>包装;</li>
<li>根据<code>channel = channelWrapper.getChannelObjectPool().borrowObject();</code>得到<code>channel</code></li>
<li>将请求写入<code>channel</code>并刷出去<code>channel.writeAndFlush(request);</code></li>
<li>然后:(看里面代码注释即可，已经很详细了)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">     channel.writeAndFlush(request);</div><div class="line">     <span class="comment">//建立一个ResponseMap，将RequestId作为键，服务端回应的内容作为值保存于BlockingQueue，</span></div><div class="line">     <span class="comment">// 最后一起保存在这个ResponseMap中</span></div><div class="line">     BlockingQueue&lt;Response&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>);</div><div class="line">     ResponseMapHelper.responseMap.put(request.getRequestId(), blockingQueue);</div><div class="line">     <span class="comment">//poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null</span></div><div class="line"></div><div class="line">     <span class="keyword">return</span> blockingQueue.poll(requestTimeoutMillis, TimeUnit.MILLISECONDS);</div><div class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> RequestTimeoutException(<span class="string">"service"</span> + serviceName + <span class="string">" method "</span> + method + <span class="string">" timeout"</span>);</div><div class="line"> &#125; <span class="keyword">finally</span> &#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         <span class="comment">//拿出去的channel记得还回去</span></div><div class="line">         channelWrapper.getChannelObjectPool().returnObject(channel);</div><div class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//删除此键值对，help GC</span></div><div class="line">     ResponseMapHelper.responseMap.remove(request.getRequestId());</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="客户端接口的动态代理逻辑"><a href="#客户端接口的动态代理逻辑" class="headerlink" title="客户端接口的动态代理逻辑"></a>客户端接口的动态代理逻辑</h3><p>由上面实现的<code>CglibRpcProxy</code>通过<code>newInstance()</code>得到个实例,并调用其相关实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">proxyInterface</span><span class="params">(Class&lt;T&gt; serviceInterface)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (clientProxyClass == <span class="keyword">null</span>) &#123;</div><div class="line">          clientProxyClass = CglibRpcProxy.class;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          rpcProxy = clientProxyClass.newInstance();</div><div class="line">      &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> rpcProxy.proxyInterface(<span class="keyword">this</span>, serviceInterface);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="最后，客户端关闭逻辑"><a href="#最后，客户端关闭逻辑" class="headerlink" title="最后，客户端关闭逻辑:"></a>最后，客户端关闭逻辑:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">//注意要关三处地方，一个是先关闭zookeeper的连接，另一个是channel池对象，最后是netty的断开关闭</span></div><div class="line">       <span class="keyword">if</span> (curatorFramework != <span class="keyword">null</span>) &#123;</div><div class="line">           curatorFramework.close();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">for</span> (ChannelConf cw : channelWrappers) &#123;</div><div class="line">               cw.close();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           eventLoopGroup.shutdownGracefully();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>具体代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.client;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.common.base.Splitter;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.exception.RequestTimeoutException;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Request;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Response;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.rpcproxy.CglibRpcProxy;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.rpcproxy.RpcProxy;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.utils.ResponseMapHelper;</div><div class="line"><span class="keyword">import</span> io.netty.channel.Channel;</div><div class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</div><div class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</div><div class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</div><div class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</div><div class="line"><span class="keyword">import</span> org.apache.curator.framework.api.GetChildrenBuilder;</div><div class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.cache.PathChildrenCache;</div><div class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.nia.rpc.core.utils.Constant.ZK_DATA_PATH;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/18.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientImpl</span> <span class="keyword">implements</span> <span class="title">Client</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ClientImpl.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicLong atomicLong = <span class="keyword">new</span> AtomicLong();</div><div class="line">    <span class="comment">// 通过此发布的服务名称,来寻找对应的服务提供者</span></div><div class="line">    <span class="keyword">private</span> String serviceName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> requestTimeoutMillis = <span class="number">10</span> * <span class="number">1000</span>;</div><div class="line">    <span class="keyword">private</span> EventLoopGroup eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">2</span>);</div><div class="line">    <span class="keyword">private</span> String zkConn;</div><div class="line">    <span class="keyword">private</span> CuratorFramework curatorFramework;</div><div class="line">    <span class="keyword">private</span> Class&lt;? extends RpcProxy&gt; clientProxyClass;</div><div class="line">    <span class="keyword">private</span> RpcProxy rpcProxy;</div><div class="line"></div><div class="line">    <span class="comment">// 存放ChannelConf到一个CopyOnWriteArrayList中，这个本就是读多写少的场景(服务注册后很少会发生状态改变)，所以很适用</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;ChannelConf&gt; channelWrappers = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientImpl</span><span class="params">(String serviceName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.serviceName = serviceName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">     </div><div class="line">        curatorFramework = CuratorFrameworkFactory.newClient(getZkConn(), <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</div><div class="line">        curatorFramework.start();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">final</span> GetChildrenBuilder children = curatorFramework.getChildren();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> String serviceZKPath = ZK_DATA_PATH + serviceName;</div><div class="line">            <span class="comment">//通过curator API 的Path Cache用来监控一个ZNode的子节点.</span></div><div class="line">            <span class="comment">// 当一个子节点增加， 更新，删除时， Path Cache会改变它的状态，</span></div><div class="line">            <span class="comment">// 会包含最新的子节点， 子节点的数据和状态。</span></div><div class="line">            <span class="comment">// 这也正如它的名字表示的那样， 那监控path。</span></div><div class="line">            PathChildrenCache pathChildrenCache = <span class="keyword">new</span> PathChildrenCache(curatorFramework, serviceZKPath, <span class="keyword">true</span>);</div><div class="line">            pathChildrenCache.start();</div><div class="line"></div><div class="line">            pathChildrenCache.getListenable().addListener((client, event) -&gt; &#123;</div><div class="line">                LOGGER.info(<span class="string">"Listen Event &#123;&#125;"</span>, event);</div><div class="line">                <span class="comment">//通过路径拿到此节点下可以提供服务的实现类节点连接地址</span></div><div class="line">                List&lt;String&gt; newServiceData = children.forPath(serviceZKPath);</div><div class="line">                LOGGER.info(<span class="string">"Server &#123;&#125; list change &#123;&#125;"</span>, serviceName, newServiceData);</div><div class="line"></div><div class="line">                <span class="comment">// 关闭删除本地缓存中多出的channel</span></div><div class="line"></div><div class="line">                <span class="keyword">for</span> (ChannelConf cw : channelWrappers) &#123;</div><div class="line">                    String connStr = cw.getConnStr();</div><div class="line">                    <span class="keyword">if</span> (!newServiceData.contains(connStr)) &#123;</div><div class="line">                        cw.close();</div><div class="line">                        LOGGER.info(<span class="string">"Remove channel &#123;&#125;"</span>, connStr);</div><div class="line">                        channelWrappers.remove(cw);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 增加本地缓存中不存在的连接地址</span></div><div class="line">                <span class="keyword">for</span> (String connStr : newServiceData) &#123;</div><div class="line">                    <span class="keyword">boolean</span> containThis = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">for</span> (ChannelConf cw : channelWrappers) &#123;</div><div class="line">                        <span class="keyword">if</span> (connStr != <span class="keyword">null</span> &amp;&amp; connStr.equals(cw.getConnStr())) &#123;</div><div class="line">                            containThis = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (!containThis) &#123;</div><div class="line">                        addNewChannel(connStr);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            List&lt;String&gt; strings = children.forPath(serviceZKPath);</div><div class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(strings)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Service available for "</span> + serviceName);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"Found Server &#123;&#125; List &#123;&#125;"</span>, serviceName, strings);</div><div class="line">            <span class="keyword">for</span> (String connStr : strings) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    addNewChannel(connStr);</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    LOGGER.error(<span class="string">"Add New Channel Exception"</span>, e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNewChannel</span><span class="params">(String connStr)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            List&lt;String&gt; strings = Splitter.on(<span class="string">":"</span>).splitToList(connStr);</div><div class="line">            <span class="keyword">if</span> (strings.size() != <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Error connection str "</span> + connStr);</div><div class="line">            &#125;</div><div class="line">            String host = strings.get(<span class="number">0</span>);</div><div class="line">            <span class="keyword">int</span> port = Integer.parseInt(strings.get(<span class="number">1</span>));</div><div class="line">            ChannelConf channelWrapper = <span class="keyword">new</span> ChannelConf(host, port);</div><div class="line">            channelWrappers.add(channelWrapper);</div><div class="line">            LOGGER.info(<span class="string">"Add New Channel &#123;&#125;, &#123;&#125;"</span>, connStr, channelWrapper);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ChannelConf <span class="title">selectChannel</span><span class="params">()</span> </span>&#123;</div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line">        <span class="comment">//同一个服务下有好几个链接地址的实现，那就选一个就是，其实为集群部署考虑，</span></div><div class="line">        <span class="comment">// 每一台服务器部署有相同的服务，选择其一来处理即可，假如是nginx代理那就无所谓了</span></div><div class="line">        <span class="keyword">int</span> size = channelWrappers.size();</div><div class="line">        <span class="keyword">if</span> (size &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> i = random.nextInt(size);</div><div class="line">        <span class="keyword">return</span> channelWrappers.get(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">sendMessage</span><span class="params">(Class&lt;?&gt; clazz, Method method, Object[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        Request request = <span class="keyword">new</span> Request();</div><div class="line">        request.setRequestId(atomicLong.incrementAndGet());</div><div class="line">        request.setMethod(method.getName());</div><div class="line">        request.setParams(args);</div><div class="line">        request.setClazz(clazz);</div><div class="line">        request.setParameterTypes(method.getParameterTypes());</div><div class="line"></div><div class="line">        ChannelConf channelWrapper = selectChannel();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (channelWrapper == <span class="keyword">null</span>) &#123;</div><div class="line">            Response response = <span class="keyword">new</span> Response();</div><div class="line">            RuntimeException runtimeException = <span class="keyword">new</span> RuntimeException(<span class="string">"Channel is not active now"</span>);</div><div class="line">            response.setThrowable(runtimeException);</div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//当channel的配置链接不为空的时候，就可以取到channel了</span></div><div class="line">        Channel channel = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            channel = channelWrapper.getChannelObjectPool().borrowObject();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</div><div class="line">            Response response = <span class="keyword">new</span> Response();</div><div class="line">            RuntimeException runtimeException = <span class="keyword">new</span> RuntimeException(<span class="string">"Channel is not available now"</span>);</div><div class="line">            response.setThrowable(runtimeException);</div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            channel.writeAndFlush(request);</div><div class="line">            <span class="comment">//建立一个ResponseMap，将RequestId作为键，服务端回应的内容作为值保存于BlockingQueue，</span></div><div class="line">            <span class="comment">// 最后一起保存在这个ResponseMap中</span></div><div class="line">            BlockingQueue&lt;Response&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>);</div><div class="line">            ResponseMapHelper.responseMap.put(request.getRequestId(), blockingQueue);</div><div class="line">            <span class="comment">//poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null</span></div><div class="line"></div><div class="line">            <span class="keyword">return</span> blockingQueue.poll(requestTimeoutMillis, TimeUnit.MILLISECONDS);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">          <span class="comment">//这个异常是自定义的，只是为了说明字面意思</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RequestTimeoutException(<span class="string">"service"</span> + serviceName + <span class="string">" method "</span> + method + <span class="string">" timeout"</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//拿出去的channel记得还回去</span></div><div class="line">                channelWrapper.getChannelObjectPool().returnObject(channel);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//删除此键值对，help GC</span></div><div class="line">            ResponseMapHelper.responseMap.remove(request.getRequestId());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">proxyInterface</span><span class="params">(Class&lt;T&gt; serviceInterface)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (clientProxyClass == <span class="keyword">null</span>) &#123;</div><div class="line">            clientProxyClass = CglibRpcProxy.class;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            rpcProxy = clientProxyClass.newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rpcProxy.proxyInterface(<span class="keyword">this</span>, serviceInterface);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//注意要关三处地方，一个是先关闭zookeeper的连接，另一个是channel池对象，最后是netty的断开关闭</span></div><div class="line">        <span class="keyword">if</span> (curatorFramework != <span class="keyword">null</span>) &#123;</div><div class="line">            curatorFramework.close();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (ChannelConf cw : channelWrappers) &#123;</div><div class="line">                cw.close();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            eventLoopGroup.shutdownGracefully();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getZkConn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> zkConn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZkConn</span><span class="params">(String zkConn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.zkConn = zkConn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRequestTimeoutMillis</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> requestTimeoutMillis;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestTimeoutMillis</span><span class="params">(<span class="keyword">int</span> requestTimeoutMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.requestTimeoutMillis = requestTimeoutMillis;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4，对外提供封装调用接口"><a href="#4，对外提供封装调用接口" class="headerlink" title="4，对外提供封装调用接口"></a>4，对外提供封装调用接口</h2><p>在这里顺带教大家一个链式编程风格的设计，具体参考:<a href="https://github.com/muyinchen/woker/blob/master/rpc%E6%A1%86%E6%9E%B6%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E9%87%8C%E5%AE%9E%E7%8E%B0%E9%93%BE%E5%BC%8F%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.md" target="_blank" rel="external">Java里实现链式编程风格</a></p>
<h4 id="服务端-ServerBuilder"><a href="#服务端-ServerBuilder" class="headerlink" title="服务端:ServerBuilder"></a>服务端:<code>ServerBuilder</code></h4><p>代码太简单，就不解释了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.bootstrap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.common.base.Preconditions;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.server.Server;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.server.ServerImpl;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerBuilder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line">    <span class="keyword">private</span> String serviceName;</div><div class="line">    <span class="keyword">private</span> Object serviceImpl;</div><div class="line">    <span class="keyword">private</span> String zkConn;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ServerBuilder</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServerBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerBuilder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ServerBuilder <span class="title">port</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ServerBuilder <span class="title">serviceName</span><span class="params">(String serviceName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.serviceName = serviceName;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ServerBuilder <span class="title">serviceImpl</span><span class="params">(Object serviceImpl)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.serviceImpl = serviceImpl;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ServerBuilder <span class="title">zkConn</span><span class="params">(String zkConn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.zkConn = zkConn;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        Preconditions.checkNotNull(serviceImpl);</div><div class="line">        Preconditions.checkNotNull(serviceName);</div><div class="line">        Preconditions.checkNotNull(zkConn);</div><div class="line">        Preconditions.checkArgument(port &gt; <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerImpl(<span class="keyword">this</span>.port, <span class="keyword">this</span>.serviceImpl, <span class="keyword">this</span>.serviceName, <span class="keyword">this</span>.zkConn);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="客户端-ClientBuilder"><a href="#客户端-ClientBuilder" class="headerlink" title="客户端:ClientBuilder"></a>客户端:<code>ClientBuilder</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.bootstrap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.common.base.Preconditions;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.client.ClientImpl;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.rpcproxy.CglibRpcProxy;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.rpcproxy.RpcProxy;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientBuilder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String serviceName;</div><div class="line">    <span class="keyword">private</span> String zkConn;</div><div class="line">    <span class="keyword">private</span> Class&lt;T&gt; serviceInterface;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> requestTimeoutMillis = <span class="number">10000</span>;</div><div class="line">    <span class="keyword">private</span> Class&lt;? extends RpcProxy&gt; clientProxyClass = CglibRpcProxy.class;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ClientBuilder&lt;T&gt; <span class="title">builder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientBuilder&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientBuilder&lt;T&gt; <span class="title">serviceName</span><span class="params">(String serviceName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.serviceName = serviceName;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientBuilder&lt;T&gt; <span class="title">zkConn</span><span class="params">(String zkConn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.zkConn = zkConn;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientBuilder&lt;T&gt; <span class="title">serviceInterface</span><span class="params">(Class&lt;T&gt; serviceInterface)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.serviceInterface = serviceInterface;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientBuilder&lt;T&gt; <span class="title">requestTimeout</span><span class="params">(<span class="keyword">int</span> requestTimeoutMillis)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.requestTimeoutMillis = requestTimeoutMillis;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientBuilder&lt;T&gt; <span class="title">clientProxyClass</span><span class="params">(Class&lt;? extends RpcProxy&gt; clientProxyClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.clientProxyClass = clientProxyClass;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//因Curator底层依赖guava，刚好可以拿来验证</span></div><div class="line">        Preconditions.checkNotNull(serviceInterface);</div><div class="line">        Preconditions.checkNotNull(zkConn);</div><div class="line">        Preconditions.checkNotNull(serviceName);</div><div class="line">        ClientImpl client = <span class="keyword">new</span> ClientImpl(<span class="keyword">this</span>.serviceName);</div><div class="line">        client.setZkConn(<span class="keyword">this</span>.zkConn);</div><div class="line">        client.setRequestTimeoutMillis(<span class="keyword">this</span>.requestTimeoutMillis);</div><div class="line">        client.init();</div><div class="line">        <span class="keyword">return</span> client.proxyInterface(<span class="keyword">this</span>.serviceInterface);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="至此，migo-RPC的核心模块完成"><a href="#至此，migo-RPC的核心模块完成" class="headerlink" title="至此，migo-RPC的核心模块完成"></a>至此，migo-RPC的核心模块完成</h4><h2 id="对核心模块的二次封装，提供更人性化的调用接口migo-rpc-provider模块"><a href="#对核心模块的二次封装，提供更人性化的调用接口migo-rpc-provider模块" class="headerlink" title="对核心模块的二次封装，提供更人性化的调用接口migo-rpc-provider模块"></a>对核心模块的二次封装，提供更人性化的调用接口<code>migo-rpc-provider</code>模块</h2><p>新建子项目，并导入<code>pom</code>依赖:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nia.rpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>migo-rpc-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nia.rpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>migo-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;parent.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="分别创建服务端和客户端的工厂bean"><a href="#分别创建服务端和客户端的工厂bean" class="headerlink" title="分别创建服务端和客户端的工厂bean:"></a>分别创建服务端和客户端的<code>工厂bean</code>:</h4><p>通过下面代码可以很容易看到所完成的链式风格:</p>
<h5 id="ServerFactoryBean"><a href="#ServerFactoryBean" class="headerlink" title="ServerFactoryBean:"></a><code>ServerFactoryBean</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.factory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.bootstrap.ServerBuilder;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.server.Server;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.server.ServerImpl;</div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/19.</div><div class="line"> */</div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Object</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Class&lt;?&gt; serviceInterface;</div><div class="line">    <span class="keyword">private</span> Object serviceImpl;</div><div class="line">    <span class="keyword">private</span> String ip;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line">    <span class="keyword">private</span> String serviceName;</div><div class="line">    <span class="keyword">private</span> String zkConn;</div><div class="line">    <span class="keyword">private</span> ServerImpl rpcServer;</div><div class="line"></div><div class="line">    <span class="comment">//服务注册并提供</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</div><div class="line">        Server rpcServer = ServerBuilder</div><div class="line">                .builder()</div><div class="line">                .serviceImpl(serviceImpl)</div><div class="line">                .serviceName(serviceName)</div><div class="line">                .zkConn(zkConn)</div><div class="line">                .port(port)</div><div class="line">                .build();</div><div class="line">        rpcServer.start();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//服务下线</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceOffline</span><span class="params">()</span></span>&#123;</div><div class="line">        rpcServer.shutdown();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass();</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="ClientFactoryBean"><a href="#ClientFactoryBean" class="headerlink" title="ClientFactoryBean:"></a><code>ClientFactoryBean</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.factory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.bootstrap.ClientBuilder;</div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/19.</div><div class="line"> */</div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientFactoryBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ClientFactoryBean.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Class&lt;T&gt; serviceInterface;</div><div class="line">    <span class="keyword">private</span> String serviceName;</div><div class="line">    <span class="keyword">private</span> String zkConn;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> ClientBuilder</div><div class="line">                .&lt;T&gt;builder()</div><div class="line">                .zkConn(zkConn)</div><div class="line">                .serviceName(serviceName)</div><div class="line">                .serviceInterface(serviceInterface)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> serviceInterface;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="示例使用"><a href="#示例使用" class="headerlink" title="示例使用"></a>示例使用</h2><h4 id="这里我们通过一个SpringbootDemo来演示如何使用"><a href="#这里我们通过一个SpringbootDemo来演示如何使用" class="headerlink" title="这里我们通过一个SpringbootDemo来演示如何使用:"></a>这里我们通过一个<code>SpringbootDemo</code>来演示如何使用:</h4><p>具体代码结构请看源码</p>
<h5 id="定义一个测试service接口"><a href="#定义一个测试service接口" class="headerlink" title="定义一个测试service接口:"></a>定义一个测试service接口:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.example.service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">say</span><span class="params">(String hello)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Integer a, Integer b)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="编写其实现类"><a href="#编写其实现类" class="headerlink" title="编写其实现类:"></a>编写其实现类:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.example.service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(String hello)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"server: "</span>+hello;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a+b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(Integer a, Integer b)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a &lt;= b ? b : a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="编写Springboot服务端启动类"><a href="#编写Springboot服务端启动类" class="headerlink" title="编写Springboot服务端启动类:"></a>编写<code>Springboot</code>服务端启动类:</h5><h6 id="SpringServerConfig"><a href="#SpringServerConfig" class="headerlink" title="SpringServerConfig"></a><code>SpringServerConfig</code></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.example.server;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.utils.NetUtils;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.example.service.HelloWorld;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.example.service.HelloWorldImpl;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.factory.ServerFactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/19.</div><div class="line"> */</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringServerConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HelloWorld <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloWorldImpl();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServerFactoryBean <span class="title">serverFactoryBean</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ServerFactoryBean serverFactoryBean = <span class="keyword">new</span> ServerFactoryBean();</div><div class="line">        serverFactoryBean.setPort(<span class="number">9090</span>);</div><div class="line">        serverFactoryBean.setServiceInterface(HelloWorld.class);</div><div class="line">       <span class="comment">//此处自定义的注册名字就相当于注解了，未来迭代的时候会加入自定义注解方式</span></div><div class="line">        serverFactoryBean.setServiceName(<span class="string">"hello"</span>);</div><div class="line">        serverFactoryBean.setServiceImpl(hello());</div><div class="line">        serverFactoryBean.setZkConn(<span class="string">"127.0.0.1:2181"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                serverFactoryBean.start();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="string">"RpcServer"</span>).start();</div><div class="line">        <span class="keyword">return</span> serverFactoryBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       </div><div class="line">        SpringApplication.run(SpringServerConfig.class, <span class="string">"--server.port=8082"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="编写服务调用端启动类"><a href="#编写服务调用端启动类" class="headerlink" title="编写服务调用端启动类:"></a>编写服务调用端启动类:</h5><h6 id="SpringClientConfig"><a href="#SpringClientConfig" class="headerlink" title="SpringClientConfig:"></a><code>SpringClientConfig</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.example.client;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.example.service.HelloWorld;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.factory.ClientFactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/19.</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringClientConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HelloWorld <span class="title">clientFactoryBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ClientFactoryBean&lt;HelloWorld&gt; clientFactoryBean = <span class="keyword">new</span> ClientFactoryBean&lt;&gt;();</div><div class="line">        clientFactoryBean.setZkConn(<span class="string">"127.0.0.1:2181"</span>);</div><div class="line">        clientFactoryBean.setServiceName(<span class="string">"hello"</span>);</div><div class="line">        clientFactoryBean.setServiceInterface(HelloWorld.class);</div><div class="line">      <span class="keyword">return</span> clientFactoryBean.getObject();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> HelloWorld helloWorld;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String say)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> helloWorld.say(say);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringClientConfig.class, <span class="string">"--server.port=8081"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试截图:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170220_022654.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个轻量级分布式-RPC-框架-下&quot;&gt;&lt;a href=&quot;#一个轻量级分布式-RPC-框架-下&quot; class=&quot;headerlink&quot; title=&quot;一个轻量级分布式 RPC 框架 下&quot;&gt;&lt;/a&gt;一个轻量级分布式 RPC 框架 下&lt;/h1&gt;&lt;p&gt;接&lt;a href=&quot;https://muyinchen.github.io/2017/03/16/%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%88%86%E5%B8%83%E5%BC%8F%20RPC%20%E6%A1%86%E6%9E%B6%20%E4%B8%8A/&quot;&gt;一个轻量级分布式 RPC 框架 上&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RPC" scheme="https://muyinchen.github.io/categories/RPC/"/>
    
    
      <category term="RPC" scheme="https://muyinchen.github.io/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>hsweb的系列学习——hsweb-easy-orm分析  中</title>
    <link href="https://muyinchen.github.io/2017/03/23/hsweb%E7%9A%84%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94hsweb-easy-orm%E5%88%86%E6%9E%90%20%20%E4%B8%AD/"/>
    <id>https://muyinchen.github.io/2017/03/23/hsweb的系列学习——hsweb-easy-orm分析  中/</id>
    <published>2017-03-22T16:59:26.068Z</published>
    <updated>2017-03-22T16:58:48.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hsweb的系列学习——hsweb-easy-orm分析-中"><a href="#hsweb的系列学习——hsweb-easy-orm分析-中" class="headerlink" title="hsweb的系列学习——hsweb-easy-orm分析  中"></a>hsweb的系列学习——hsweb-easy-orm分析  中</h1><p>接上篇<br> <a id="more"></a></p>
<h2 id="三，curd的逻辑"><a href="#三，curd的逻辑" class="headerlink" title="三，curd的逻辑"></a>三，curd的逻辑</h2><p>从sql语句里可以看出，查，删，改，都是伴随着条件进行的，首先对条件进行设计，然后再具体事情具体办</p>
<h4 id="1，设计一个统一的条件类型的支持接口来统一接收"><a href="#1，设计一个统一的条件类型的支持接口来统一接收" class="headerlink" title="1，设计一个统一的条件类型的支持接口来统一接收"></a>1，设计一个统一的条件类型的支持接口来统一接收</h4><h5 id="一个是根据输入条件TermTypeConditionalSupport"><a href="#一个是根据输入条件TermTypeConditionalSupport" class="headerlink" title="一个是根据输入条件TermTypeConditionalSupport:"></a>一个是根据输入条件<code>TermTypeConditionalSupport</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TermTypeConditionalSupport</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Accepter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="function">T <span class="title">accept</span><span class="params">(String column, String termType, Object value)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">SimpleAccepter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="function">T <span class="title">accept</span><span class="params">(String column, Object value)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="另外一个根据实例化的po-bean-TermTypeConditionalFromBeanSupport"><a href="#另外一个根据实例化的po-bean-TermTypeConditionalFromBeanSupport" class="headerlink" title="另外一个根据实例化的po bean TermTypeConditionalFromBeanSupport:"></a>另外一个根据实例化的po bean <code>TermTypeConditionalFromBeanSupport</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtilsBean;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtilsBean;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TermTypeConditionalFromBeanSupport</span> </span>&#123;</div><div class="line">    Logger logger = LoggerFactory.getLogger(<span class="string">"queryForBean"</span>);</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Object <span class="title">getValue</span><span class="params">(String property)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getBean() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        PropertyUtilsBean propertyUtilsBean = BeanUtilsBean.getInstance().getPropertyUtils();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> propertyUtilsBean.getProperty(getBean(), property);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.warn(<span class="string">"get bean property &#123;&#125; error"</span>, property, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="接下来就搞定条件的设置接口-Conditional"><a href="#接下来就搞定条件的设置接口-Conditional" class="headerlink" title="接下来就搞定条件的设置接口:Conditional"></a>接下来就搞定条件的设置接口:<code>Conditional</code></h5><p>对于<code>Java8</code>  <code>Consumer接口</code> 的知识预备，请查看  <a href="https://github.com/muyinchen/woker/blob/master/JAVA8/Predicate%E5%92%8CConsumer%E6%8E%A5%E5%8F%A3%E2%80%93%20Java%208%E4%B8%ADjava.util.function%E5%8C%85%E4%B8%8B%E7%9A%84%E6%8E%A5%E5%8F%A3.md" target="_blank" rel="external">Predicate和Consumer接口– Java 8中java.util.function包下的接口</a></p>
<p>对于嵌套条件的设置，请查看<code>org.hsweb.ezorm.core.NestConditional</code>,</p>
<p>源码最后关于<code>Supplier接口</code>和<code>BiConsumer&lt;T, U&gt;接口</code>,不懂的请看<a href="https://github.com/muyinchen/woker/blob/master/JAVA8/Java%208%E4%B9%8BStream%E7%9A%84%E5%BC%BA%E5%A4%A7%E5%B7%A5%E5%85%B7Collector.md" target="_blank" rel="external">Java 8之Stream的强大工具Collector</a></p>
<p>先把各种条件关键字用方法给设定出来，如，and(),or(),where()，以及最后条件追加，根据条件判断然后再确定追加与否这些情况进行设定等，同样支持直接拼接sql，代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.TermType;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</div><div class="line"><span class="keyword">import</span> java.util.function.BooleanSupplier;</div><div class="line"><span class="keyword">import</span> java.util.function.Consumer;</div><div class="line"><span class="keyword">import</span> java.util.function.Function;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Conditional</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Conditional</span>&gt; <span class="keyword">extends</span> <span class="title">TermTypeConditionalSupport</span> </span>&#123;</div><div class="line">    <span class="function">NestConditional&lt;T&gt; <span class="title">nest</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">NestConditional&lt;T&gt; <span class="title">nest</span><span class="params">(String column, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">NestConditional&lt;T&gt; <span class="title">orNest</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">NestConditional&lt;T&gt; <span class="title">orNest</span><span class="params">(String column, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">and</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">or</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">and</span><span class="params">(Consumer&lt;Conditional&gt; consumer)</span> </span>&#123;</div><div class="line">        consumer.accept(<span class="keyword">this</span>.and());</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">or</span><span class="params">(Consumer&lt;Conditional&gt; consumer)</span> </span>&#123;</div><div class="line">        consumer.accept(<span class="keyword">this</span>.or());</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">and</span><span class="params">(String column, String termType, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">or</span><span class="params">(String column, String termType, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Accepter&lt;T&gt; <span class="title">getAccepter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">where</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> and(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">where</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span>  T <span class="title">where</span><span class="params">(Consumer&lt;Conditional&gt; consumer)</span> </span>&#123;</div><div class="line">        consumer.accept(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">and</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> and(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">is</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">or</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> or(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">like</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.like, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T like$(String column, Object value) &#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> like(column, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.like, StringUtils.concat(value, <span class="string">"%"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T $like(String column, Object value) &#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> like(column, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.like, StringUtils.concat(<span class="string">"%"</span>, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> T $like$(String column, Object value) &#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> like(column, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.like, StringUtils.concat(<span class="string">"%"</span>, value, <span class="string">"%"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notLike</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.nlike, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">gt</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.gt, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">lt</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.lt, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">gte</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.gte, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">lte</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.lte, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">in</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.in, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">in</span><span class="params">(String column, Object... values)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.in, values);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">in</span><span class="params">(String column, Collection values)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.in, values);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notIn</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.nin, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">isEmpty</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.empty, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notEmpty</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.nempty, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">isNull</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.isnull, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notNull</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.notnull, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">not</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.not, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">between</span><span class="params">(String column, Object between, Object and)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.btw, Arrays.asList(between, and));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">notBetween</span><span class="params">(String column, Object between, Object and)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accept(column, TermType.nbtw, Arrays.asList(between, and));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">accept</span><span class="params">(String column, String termType, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getAccepter().accept(column, termType, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 直接拼接sql,参数支持预编译</div><div class="line">     * 例如</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;query.sql("name=?","admin")&lt;/li&gt;</div><div class="line">     * &lt;li&gt;query.sql("name=#&#123;name&#125;",&#123;name:"admin"&#125;)&lt;/li&gt;</div><div class="line">     * &lt;li&gt;query.sql("name=#&#123;[0]&#125;",["admin"])&lt;/li&gt;</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql    sql字符串</div><div class="line">     * <span class="doctag">@param</span> params 参数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     */</div><div class="line">    <span class="function">T <span class="title">sql</span><span class="params">(String sql, Object... params)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> &lt;O&gt; <span class="function">T <span class="title">each</span><span class="params">(Collection&lt;O&gt; list, BiConsumer&lt;O, Conditional&lt;T&gt;&gt; consumer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; consumer.accept(o, <span class="keyword">this</span>));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 遍历一个集合，进行条件追加</div><div class="line">     * 例如:&lt;br&gt;</div><div class="line">     * query.or().each("areaId",[1,2,3],(query)-&gt;query::$like$)&lt;br&gt;</div><div class="line">     * 将追加sql&lt;br&gt;</div><div class="line">     * areaId like '%1%' or areaId like '%2%' or areaId like '%3%'</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> column         要追加到的列名</div><div class="line">     * <span class="doctag">@param</span> list           集合</div><div class="line">     * <span class="doctag">@param</span> accepterGetter 追加方式函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Function</div><div class="line">     * <span class="doctag">@see</span> Conditional</div><div class="line">     * <span class="doctag">@see</span> org.hsweb.ezorm.core.TermTypeConditionalSupport.SimpleAccepter</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(String column, Collection list, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepterGetter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; accepterGetter.apply(<span class="keyword">this</span>).accept(column, o));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(String column, String termType, Collection list, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepterGetter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; accepterGetter.apply(<span class="keyword">this</span>).accept(column, termType, o));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 参照 &#123;<span class="doctag">@link</span> Conditional#each(String, Collection, Function)&#125;</div><div class="line">     * 提供了一个valueMapper进行值转换如:</div><div class="line">     * &lt;br&gt;</div><div class="line">     * query.or().each("areaId",[1,2,3],(query)-&gt;query::$like$,(value)-&gt;","+value+",")&lt;br&gt;</div><div class="line">     * 将追加sql&lt;br&gt;</div><div class="line">     * areaId like '%,1,%' or areaId like '%,2,%' or areaId like '%,3,%'</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> column         要追加到的列名</div><div class="line">     * <span class="doctag">@param</span> list           集合</div><div class="line">     * <span class="doctag">@param</span> accepterGetter 追加方式函数</div><div class="line">     * <span class="doctag">@param</span> valueMapper    值转换函数 &#123;<span class="doctag">@link</span> Function&#125;</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Function</div><div class="line">     * <span class="doctag">@see</span> Conditional</div><div class="line">     * <span class="doctag">@see</span> org.hsweb.ezorm.core.TermTypeConditionalSupport.SimpleAccepter</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(String column, Collection list, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepterGetter, Function&lt;Object, Object&gt; valueMapper)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; accepterGetter.apply(<span class="keyword">this</span>).accept(column, valueMapper.apply(o)));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(String column, String termType, Collection list, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepterGetter, Function&lt;Object, Object&gt; valueMapper)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list)</div><div class="line">            list.forEach(o -&gt; accepterGetter.apply(<span class="keyword">this</span>).accept(column, termType, valueMapper.apply(o)));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 遍历一个Map,进行条件追加</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> mapParam map参数</div><div class="line">     * <span class="doctag">@param</span> accepter 追加方式函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Function</div><div class="line">     * <span class="doctag">@see</span> Conditional</div><div class="line">     * <span class="doctag">@see</span> org.hsweb.ezorm.core.TermTypeConditionalSupport.SimpleAccepter</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(Map&lt;String, Object&gt; mapParam, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mapParam)</div><div class="line">            mapParam.forEach((k, v) -&gt; accepter.apply(<span class="keyword">this</span>).accept(k, v));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">each</span><span class="params">(Map&lt;String, Object&gt; mapParam, String termType, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mapParam)</div><div class="line">            mapParam.forEach((k, v) -&gt; accepter.apply(<span class="keyword">this</span>).accept(k, termType, v));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定一个前置条件,当条件满足的时候,调用回调进行自定义参数&lt;br&gt;</div><div class="line">     * 如: query(age&gt;10,query-&gt;query.gt("age",10))</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> condition 前置条件</div><div class="line">     * <span class="doctag">@param</span> consumer  回调</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">when</span><span class="params">(<span class="keyword">boolean</span> condition, Consumer&lt;Conditional&lt;T&gt;&gt; consumer)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (condition) &#123;</div><div class="line">            consumer.accept(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过BooleanSupplier获取条件,例如&lt;br&gt;</div><div class="line">     * query.when(()-&gt;age&gt;10,query-&gt;query.gt("age",10));</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> Conditional#when(boolean, Consumer)</div><div class="line">     * <span class="doctag">@see</span> BooleanSupplier</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">when</span><span class="params">(BooleanSupplier condition, Consumer&lt;Conditional&lt;T&gt;&gt; consumer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> when(condition.getAsBoolean(), consumer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定前置条件,列名,参数值,条件构造函数。当条件满足的时候，执行构造器添加条件.例如&lt;br&gt;</div><div class="line">     * query.when(age&gt;10,"age",10,query-&gt;query::gt);&lt;br&gt;</div><div class="line">     * 等同于&lt;br&gt;</div><div class="line">     * if(age&gt;10)query.gt(age,10);&lt;br&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> condition 前置条件</div><div class="line">     * <span class="doctag">@param</span> column    要查询的列名</div><div class="line">     * <span class="doctag">@param</span> value     参数值</div><div class="line">     * <span class="doctag">@param</span> accepter  条件构造函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">when</span><span class="params">(<span class="keyword">boolean</span> condition, String column, Object value, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (condition) &#123;</div><div class="line">            accepter.apply(<span class="keyword">this</span>).accept(column, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定列名，参数值，条件判断函数，条件构造函数进行条件添加。如&lt;br&gt;</div><div class="line">     * query.when("age",10,value-&gt;value&gt;10,query-&gt;query::gt)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> column    列名</div><div class="line">     * <span class="doctag">@param</span> value     值</div><div class="line">     * <span class="doctag">@param</span> condition 条件判断函数</div><div class="line">     * <span class="doctag">@param</span> accepter  条件构造函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Conditional#when(boolean, String, Object, Function)</div><div class="line">     */</div><div class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">T <span class="title">when</span><span class="params">(String column, V value, Function&lt;V, Boolean&gt; condition, Function&lt;Conditional&lt;T&gt;, SimpleAccepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> when(condition.apply(value), column, value, accepter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 功能与&#123;<span class="doctag">@link</span> Conditional#when(boolean, String, Object, Function)&#125; 类似,可自定义termType 如:&lt;br&gt;</div><div class="line">     * query.when(true,"age","like",10,query-&gt;query::or)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> condition 条件</div><div class="line">     * <span class="doctag">@param</span> column    列名</div><div class="line">     * <span class="doctag">@param</span> termType  条件类型</div><div class="line">     * <span class="doctag">@param</span> value     参数</div><div class="line">     * <span class="doctag">@param</span> accepter  条件构造函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Conditional#when(boolean, String, Object, Function)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> T <span class="title">when</span><span class="params">(<span class="keyword">boolean</span> condition, String column, String termType, Object value, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (condition) &#123;</div><div class="line">            accepter.apply(<span class="keyword">this</span>).accept(column, termType, value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 功能与&#123;<span class="doctag">@link</span> Conditional#when(String, Object, Function, Function)&#125; 类似,可自定义termType 如:&lt;br&gt;</div><div class="line">     * query.when("age","like",10,value-&gt;value==10,query-&gt;query::or)</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> condition 条件</div><div class="line">     * <span class="doctag">@param</span> column    列名</div><div class="line">     * <span class="doctag">@param</span> termType  条件类型</div><div class="line">     * <span class="doctag">@param</span> value     参数</div><div class="line">     * <span class="doctag">@param</span> accepter  条件构造函数</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</div><div class="line">     * <span class="doctag">@see</span> Conditional#when(boolean, String, Object, Function)</div><div class="line">     * <span class="doctag">@see</span> TermType</div><div class="line">     */</div><div class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">T <span class="title">when</span><span class="params">(String column, String termType, V value, Function&lt;V, Boolean&gt; condition, Function&lt;Conditional&lt;T&gt;, Accepter&lt;Conditional&lt;T&gt;&gt;&gt; accepter)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> when(condition.apply(value), column, termType, value, accepter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为之前有设计针对sql的直接封装，那么相应的增加<code>SqlConditionSupport&lt;T&gt;</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.SqlTerm;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlConditionSupport</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Term.Type nowTermType = Term.Type.and;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">addSqlTerm</span><span class="params">(SqlTerm term)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Term.<span class="function">Type <span class="title">getNowTermType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nowTermType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">setOr</span><span class="params">()</span> </span>&#123;</div><div class="line">        nowTermType = Term.Type.or;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">setAnd</span><span class="params">()</span> </span>&#123;</div><div class="line">        nowTermType = Term.Type.and;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">sql</span><span class="params">(String sql, Object... params)</span> </span>&#123;</div><div class="line">        SqlTerm sqlTerm = <span class="keyword">new</span> SqlTerm();</div><div class="line">        sqlTerm.setColumn(sql);</div><div class="line">        sqlTerm.setValue(params);</div><div class="line">        sqlTerm.setType(getNowTermType());</div><div class="line">        <span class="keyword">return</span> addSqlTerm(sqlTerm);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2，对删，改，查的设计与实现"><a href="#2，对删，改，查的设计与实现" class="headerlink" title="2，对删，改，查的设计与实现"></a>2，对删，改，查的设计与实现</h3><h5 id="对改的接口设计Update"><a href="#对改的接口设计Update" class="headerlink" title="对改的接口设计Update:"></a>对改的接口设计<code>Update</code>:</h5><p>具体不需要解释了，英文已经很清晰明白了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.UpdateParam;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Conditional</span>&lt;<span class="title">Update</span>&lt;<span class="title">T</span>&gt;&gt;, <span class="title">TriggerSkipSupport</span>&lt;<span class="title">Update</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">set</span><span class="params">(T data)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">set</span><span class="params">(String property, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">includes</span><span class="params">(String... fields)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">excludes</span><span class="params">(String... fields)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Update&lt;T&gt; <span class="title">setParam</span><span class="params">(UpdateParam param)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">exec</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.*;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.SqlTerm;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.UpdateParam;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SQL;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlRender;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-5.</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleUpdate</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ValidatorAndTriggerSupport</span>&lt;<span class="title">Update</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Update</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Update.class);</div><div class="line">    <span class="keyword">private</span> UpdateParam    updateParam;</div><div class="line">    <span class="keyword">private</span> SimpleTable&lt;T&gt; table;</div><div class="line">    <span class="keyword">private</span> SqlExecutor    sqlExecutor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleUpdate</span><span class="params">(SimpleTable&lt;T&gt; table, SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.table = table;</div><div class="line">        <span class="keyword">this</span>.sqlExecutor = sqlExecutor;</div><div class="line">        updateParam = <span class="keyword">new</span> UpdateParam();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">set</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        updateParam.setData(data);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">set</span><span class="params">(String property, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (updateParam.getData() == <span class="keyword">null</span>) updateParam.setData(<span class="keyword">new</span> HashMap&lt;&gt;());</div><div class="line">        <span class="keyword">if</span> (updateParam.getData() <span class="keyword">instanceof</span> Map) &#123;</div><div class="line">            ((Map) updateParam.getData()).put(property, value);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                BeanUtils.setProperty(updateParam.getData(), property, value);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                logger.warn(<span class="string">"property error"</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Update&lt;T&gt; <span class="title">addSqlTerm</span><span class="params">(SqlTerm term)</span> </span>&#123;</div><div class="line">        updateParam.addTerm(term);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">includes</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        updateParam.includes(fields);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">excludes</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        updateParam.excludes(fields);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">and</span><span class="params">(String condition, String termType, Object value)</span> </span>&#123;</div><div class="line">        updateParam.and(condition, termType, value);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">or</span><span class="params">(String condition, String termType, Object value)</span> </span>&#123;</div><div class="line">        updateParam.or(condition, termType, value);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Accepter accepter=<span class="keyword">this</span>::and;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">and</span><span class="params">()</span> </span>&#123;</div><div class="line">        setAnd();</div><div class="line">        accepter = <span class="keyword">this</span>::and;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">or</span><span class="params">()</span> </span>&#123;</div><div class="line">        setOr();</div><div class="line">        accepter = <span class="keyword">this</span>::or;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Accepter <span class="title">getAccepter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accepter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> NestConditional&lt;Update&lt;T&gt;&gt; nest() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleNestConditional&lt;&gt;(<span class="keyword">this</span>, updateParam.nest());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> NestConditional&lt;Update&lt;T&gt;&gt; nest(String column, Object value) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleNestConditional&lt;&gt;(<span class="keyword">this</span>, updateParam.nest(column, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> NestConditional&lt;Update&lt;T&gt;&gt; orNest() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleNestConditional&lt;&gt;(<span class="keyword">this</span>, updateParam.orNest());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> NestConditional&lt;Update&lt;T&gt;&gt; orNest(String column, Object value) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleNestConditional&lt;&gt;(<span class="keyword">this</span>, updateParam.orNest(column, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Update&lt;T&gt; <span class="title">setParam</span><span class="params">(UpdateParam param)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.updateParam = param;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> supportBefore = !triggerSkip &amp;&amp; table.getMeta().triggerIsSupport(Trigger.update_before);</div><div class="line">        <span class="keyword">boolean</span> supportDone = !triggerSkip &amp;&amp; table.getMeta().triggerIsSupport(Trigger.update_done);</div><div class="line">        Map&lt;String, Object&gt; context = table.getDatabase().getTriggerContextRoot();</div><div class="line">        <span class="keyword">if</span> (supportBefore || supportDone) &#123;</div><div class="line">            context = table.getDatabase().getTriggerContextRoot();</div><div class="line">            context.put(<span class="string">"table"</span>, table);</div><div class="line">            context.put(<span class="string">"database"</span>, table.getDatabase());</div><div class="line">            context.put(<span class="string">"param"</span>, updateParam);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (supportBefore) &#123;</div><div class="line">            table.getMeta().on(Trigger.update_before, context);</div><div class="line">        &#125;</div><div class="line">        SqlRender&lt;UpdateParam&gt; render = table.getMeta().getDatabaseMetaData().getRenderer(SqlRender.TYPE.UPDATE);</div><div class="line">        SQL sql = render.render(table.getMeta(), updateParam);</div><div class="line">        tryValidate(updateParam.getData(), Validator.Operation.UPDATE);</div><div class="line">        <span class="keyword">int</span> total = sqlExecutor.update(sql);</div><div class="line">        <span class="keyword">if</span> (supportDone) &#123;</div><div class="line">            context.put(<span class="string">"total"</span>, total);</div><div class="line">            table.getMeta().on(Trigger.update_done, context);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> total;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">RDBTableMetaData <span class="title">getTableMeta</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> table.getMeta();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="最关键的地方也就在于exec"><a href="#最关键的地方也就在于exec" class="headerlink" title="最关键的地方也就在于exec(),"></a>最关键的地方也就在于<code>exec()</code>,</h6><p>​        <code>boolean supportBefore = !triggerSkip &amp;&amp; table.getMeta().triggerIsSupport(Trigger.update_before);</code></p>
<p>在触发条件不忽略，然后此table的元数据触发条件支持<code>Trigger.update_before</code>,返回true，调用过程如下图:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170322_223008.png" alt=""></p>
<p>同理,<code>supportDone</code>就不再解释了，</p>
<p><code>Map&lt;String, Object&gt; context = table.getDatabase().getTriggerContextRoot();</code>其实就是产生一个<code>map</code>,具体源码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getTriggerContextRoot</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>符合<code>supportBefore || supportDone</code>条件，添加table，database，param信息</p>
<p>当符合<code>supportBefore</code>条件时，<code>table.getMeta().on(Trigger.update_before, context);</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170322_225901.png" alt=""></p>
<p>这里只看到了这一个脚本实现类，就顺带贴下</p>
<p>对后面代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SqlRender&lt;UpdateParam&gt; render = table.getMeta().getDatabaseMetaData().getRenderer(SqlRender.TYPE.UPDATE);</div><div class="line">SQL sql = render.render(table.getMeta(), updateParam);</div><div class="line">tryValidate(updateParam.getData(), Validator.Operation.UPDATE);</div><div class="line"><span class="keyword">int</span> total = sqlExecutor.update(sql);</div></pre></td></tr></table></figure>
<p>下图<code>RDBDatabaseMetaData</code> 下面被掩盖的标记代码为<code>public abstract SqlRender getRenderer(SqlRender.TYPE type);</code></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170322_231154.png" alt=""></p>
<h6 id="AbstractRDBDatabaseMetaData对RDBDatabaseMetaData进行抽象实现"><a href="#AbstractRDBDatabaseMetaData对RDBDatabaseMetaData进行抽象实现" class="headerlink" title="AbstractRDBDatabaseMetaData对RDBDatabaseMetaData进行抽象实现"></a><code>AbstractRDBDatabaseMetaData</code>对<code>RDBDatabaseMetaData</code>进行抽象实现</h6><p>在<code>getRenderer()</code>内得到相应数据库类型的render，在<code>init()</code>放入相应数据库类型的render</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBDatabaseMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlRender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.simple.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRDBDatabaseMetaData</span> <span class="keyword">extends</span> <span class="title">RDBDatabaseMetaData</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Map&lt;SqlRender.TYPE, SqlRender&gt; renderMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Dialect dialect;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractRDBDatabaseMetaData</span><span class="params">(Dialect dialect)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dialect = dialect;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        putRenderer(SqlRender.TYPE.DELETE, <span class="keyword">new</span> SimpleDeleteSqlRender(getDialect()));</div><div class="line">        putRenderer(SqlRender.TYPE.INSERT, <span class="keyword">new</span> SimpleInsertSqlRender());</div><div class="line">        putRenderer(SqlRender.TYPE.SELECT, <span class="keyword">new</span> SimpleSelectSqlRender(getDialect()));</div><div class="line">        putRenderer(SqlRender.TYPE.UPDATE, <span class="keyword">new</span> SimpleUpdateSqlRender(getDialect()));</div><div class="line">        putRenderer(SqlRender.TYPE.SELECT_TOTAL, <span class="keyword">new</span> SimpleSelectTotalSqlRender(getDialect()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Dialect <span class="title">getDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dialect;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlRender <span class="title">getRenderer</span><span class="params">(SqlRender.TYPE type)</span> </span>&#123;</div><div class="line">        SqlRender render = renderMap.get(type);</div><div class="line">        <span class="keyword">if</span> (render == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(type + <span class="string">" is not support"</span>);</div><div class="line">        <span class="keyword">return</span> render;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putRenderer</span><span class="params">(SqlRender.TYPE type, SqlRender sqlRender)</span> </span>&#123;</div><div class="line">        renderMap.put(type, sqlRender);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="最后再看具体实现类，此处拿MysqlRDBDatabaseMetaData为例"><a href="#最后再看具体实现类，此处拿MysqlRDBDatabaseMetaData为例" class="headerlink" title="最后再看具体实现类，此处拿MysqlRDBDatabaseMetaData为例"></a>最后再看具体实现类，此处拿<code>MysqlRDBDatabaseMetaData</code>为例</h6><p>在此<code>MysqlRDBDatabaseMetaData</code>实例进行初始化时，设置MysqL数据库方言并会调用<code>init()</code>方法放入MysqL数据库类型的render</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlRender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.mysql.MysqlDeleteSqlRender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.mysql.MysqlMetaAlterRender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.mysql.MysqlMetaCreateRender;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlRDBDatabaseMetaData</span> <span class="keyword">extends</span> <span class="title">AbstractRDBDatabaseMetaData</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_NAME = <span class="string">"mysql"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.init();</div><div class="line">        renderMap.put(SqlRender.TYPE.META_CREATE, <span class="keyword">new</span> MysqlMetaCreateRender());</div><div class="line">        renderMap.put(SqlRender.TYPE.DELETE, <span class="keyword">new</span> MysqlDeleteSqlRender(getDialect()));</div><div class="line">        renderMap.put(SqlRender.TYPE.META_ALTER, <span class="keyword">new</span> MysqlMetaAlterRender(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MysqlRDBDatabaseMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Dialect.MYSQL);</div><div class="line">        name = DEFAULT_NAME;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="对update-sql语句的组合渲染："><a href="#对update-sql语句的组合渲染：" class="headerlink" title="对update sql语句的组合渲染："></a>对<code>update sql</code>语句的组合渲染：</h6><p>首先设计一个其他类型语句共有的语句特性，比如指定了exclude 字段,没有指定include  字段</p>
<h6 id="CommonSqlRender-具体逻辑如下，不仔细解释了"><a href="#CommonSqlRender-具体逻辑如下，不仔细解释了" class="headerlink" title="CommonSqlRender:具体逻辑如下，不仔细解释了"></a><code>CommonSqlRender</code>:具体逻辑如下，不仔细解释了</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.support.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.Correlation;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Param;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlRender;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonSqlRender</span>&lt;<span class="title">R</span> <span class="keyword">extends</span> <span class="title">Param</span>&gt; <span class="keyword">implements</span> <span class="title">SqlRender</span>&lt;<span class="title">R</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationColumn</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String            tableName;</div><div class="line">        <span class="keyword">private</span> RDBColumnMetaData RDBColumnMetaData;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OperationColumn</span><span class="params">(String tableName, RDBColumnMetaData RDBColumnMetaData)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.tableName = tableName;</div><div class="line">            <span class="keyword">this</span>.RDBColumnMetaData = RDBColumnMetaData;</div><div class="line">            <span class="keyword">if</span> (tableName == <span class="keyword">null</span>) <span class="keyword">this</span>.tableName = RDBColumnMetaData.getTableMetaData().getAlias();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getTableName</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> tableName;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> RDBColumnMetaData <span class="title">getRDBColumnMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> RDBColumnMetaData;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;OperationColumn&gt; <span class="title">parseOperationField</span><span class="params">(RDBTableMetaData metaData, R param)</span> </span>&#123;</div><div class="line">        Set&lt;String&gt; includes = param.getIncludes(),</div><div class="line">                excludes = param.getExcludes();</div><div class="line">        <span class="keyword">boolean</span> includesIsEmpty = includes.isEmpty(),</div><div class="line">                excludesIsEmpty = excludes.isEmpty();</div><div class="line">        List&lt;OperationColumn&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> ((includesIsEmpty &amp;&amp; excludesIsEmpty)) &#123;</div><div class="line">            metaData.getColumns().forEach(column -&gt; tmp.add(<span class="keyword">new</span> OperationColumn(<span class="keyword">null</span>, column)));</div><div class="line">            <span class="keyword">return</span> tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//指定了exclude,没有指定include</span></div><div class="line">        <span class="keyword">if</span> (includesIsEmpty &amp;&amp; !excludesIsEmpty) &#123;</div><div class="line">            <span class="keyword">boolean</span> hasSelf = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (String exclude : excludes) &#123;</div><div class="line">                <span class="keyword">if</span> (exclude.contains(<span class="string">"."</span>)) &#123;</div><div class="line">                  <span class="comment">//表.*</span></div><div class="line">                    includes.add(exclude.split(<span class="string">"[.]"</span>)[<span class="number">0</span>] + <span class="string">".*"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">//不包含表. 就设置下面的*就好</span></div><div class="line">                    hasSelf = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (hasSelf) includes.add(<span class="string">"*"</span>);</div><div class="line">            includesIsEmpty = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!includesIsEmpty) &#123;</div><div class="line">            includes.forEach(include -&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (excludes.contains(include)) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"*"</span>.equals(include)) &#123;</div><div class="line">                    metaData.getColumns().forEach(column -&gt; &#123;</div><div class="line">                        <span class="keyword">if</span> (excludes.contains(column.getAlias()) || excludes.contains(column.getName()))</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        tmp.add(<span class="keyword">new</span> OperationColumn(<span class="keyword">null</span>, column));</div><div class="line">                    &#125;);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (include.contains(<span class="string">"."</span>)) &#123;</div><div class="line">                    String[] columnInfo = include.split(<span class="string">"[.]"</span>);</div><div class="line">                    RDBTableMetaData table = metaData.getDatabaseMetaData().getTableMetaData(columnInfo[<span class="number">0</span>]);</div><div class="line">                    String tname = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == table) &#123;</div><div class="line">                        Correlation correlation = metaData.getCorrelation(columnInfo[<span class="number">0</span>]);</div><div class="line">                        <span class="keyword">if</span> (correlation != <span class="keyword">null</span>) &#123;</div><div class="line">                            table = metaData.getDatabaseMetaData().getTableMetaData(correlation.getTargetTable());</div><div class="line">                            tname = correlation.getAlias();</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        tname = table.getAlias();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == table) <span class="keyword">return</span>;</div><div class="line">                    <span class="keyword">if</span> (columnInfo[<span class="number">1</span>].equals(<span class="string">"*"</span>)) &#123;</div><div class="line">                        String finalName = tname;</div><div class="line">                        table.getColumns().forEach(column -&gt; &#123;</div><div class="line">                            <span class="keyword">if</span> (excludes.contains(column.getFullAliasName()) || excludes.contains(column.getFullName())</div><div class="line">                                    || excludes.contains(finalName + <span class="string">"."</span> + column.getName())</div><div class="line">                                    || excludes.contains(finalName + <span class="string">"."</span> + column.getAlias()))</div><div class="line">                                <span class="keyword">return</span>;</div><div class="line">                            tmp.add(<span class="keyword">new</span> OperationColumn(finalName, column));</div><div class="line">                        &#125;);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        RDBColumnMetaData column = metaData.findColumn(include);</div><div class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != column) &#123;</div><div class="line">                            <span class="keyword">if</span> (excludes.contains(column.getFullAliasName()) || excludes.contains(column.getFullName()))</div><div class="line">                                <span class="keyword">return</span>;</div><div class="line">                            tmp.add(<span class="keyword">new</span> OperationColumn(tname, column));</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    RDBColumnMetaData column = metaData.findColumn(include);</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> != column) &#123;</div><div class="line">                        <span class="keyword">if</span> (excludes.contains(column.getAlias()) || excludes.contains(column.getName()))</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        tmp.add(<span class="keyword">new</span> OperationColumn(column.getTableMetaData().getAlias(), column));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (tmp.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"未找到任何查询字段!"</span>);</div><div class="line">        <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="拼接sql准备"><a href="#拼接sql准备" class="headerlink" title="拼接sql准备:"></a>拼接sql准备:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 浩 on 2015-11-07 0007.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlAppender</span> <span class="keyword">extends</span> <span class="title">LinkedList</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlAppender</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlAppender</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">        add(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlAppender <span class="title">add</span><span class="params">(Object... str)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Object s : str) &#123;</div><div class="line">            <span class="keyword">this</span>.add(String.valueOf(s));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlAppender <span class="title">addEdSpc</span><span class="params">(Object... str)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Object s : str) &#123;</div><div class="line">            <span class="keyword">this</span>.add(String.valueOf(s));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.add(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 接入sql语句，并自动加入空格</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> str</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> SqlAppender <span class="title">addSpc</span><span class="params">(Object... str)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Object s : str) &#123;</div><div class="line">            <span class="keyword">this</span>.add(s);</div><div class="line">            <span class="keyword">this</span>.add(<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">this</span>.forEach(builder::append);</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="where语句的共同部分进行抽象"><a href="#where语句的共同部分进行抽象" class="headerlink" title="where语句的共同部分进行抽象"></a>where语句的共同部分进行抽象</h5><h6 id="首先是Dialect的设定"><a href="#首先是Dialect的设定" class="headerlink" title="首先是Dialect的设定:"></a>首先是<code>Dialect</code>的设定:</h6><p>接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.TableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlAppender;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hsweb.ezorm.rdb.executor.AbstractJdbcSqlExecutor.APPEND_PATTERN;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hsweb.ezorm.rdb.executor.AbstractJdbcSqlExecutor.PREPARED_PATTERN;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">TermTypeMapper</span> </span>&#123;</div><div class="line">        <span class="function">SqlAppender <span class="title">accept</span><span class="params">(String wherePrefix, Term term, RDBColumnMetaData column, String tableAlias)</span></span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">static</span> TermTypeMapper <span class="title">sql</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (wherePrefix, term, column, tableAlias) -&gt; <span class="keyword">new</span> SqlAppender(sql);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">static</span> TermTypeMapper <span class="title">sql</span><span class="params">(String sql, Object param)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> (wherePrefix, term, column, tableAlias) -&gt; &#123;</div><div class="line">                Object finalParam = param;</div><div class="line">                String template = sql;</div><div class="line">                <span class="comment">//?方式预编译</span></div><div class="line">                <span class="keyword">if</span> (template.contains(<span class="string">"?"</span>)) &#123;</div><div class="line">                    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">while</span> (template.contains(<span class="string">"?"</span>)) &#123;</div><div class="line">                        template = template.replaceFirst(<span class="string">"\\?"</span>, <span class="string">"#\\&#123;["</span> + index++ + <span class="string">"]&#125;"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (finalParam <span class="keyword">instanceof</span> Object[]) &#123;</div><div class="line">                    Object[] array = ((Object[]) finalParam);</div><div class="line">                    <span class="keyword">if</span> (array.length == <span class="number">1</span>) &#123;</div><div class="line">                        finalParam = array[<span class="number">0</span>];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                Matcher prepared_matcher = PREPARED_PATTERN.matcher(template);</div><div class="line">                Matcher append_matcher = APPEND_PATTERN.matcher(template);</div><div class="line">                term.setValue(finalParam);</div><div class="line">                <span class="keyword">while</span> (append_matcher.find()) &#123;</div><div class="line">                    String group = append_matcher.group();</div><div class="line">                    String reg = StringUtils.concat(<span class="string">"\\$\\&#123;"</span>, group.replace(<span class="string">"$"</span>, <span class="string">"\\$"</span>).replace(<span class="string">"["</span>, <span class="string">"\\["</span>).replace(<span class="string">"]"</span>, <span class="string">"\\]"</span>), <span class="string">"&#125;"</span>);</div><div class="line">                    String target = StringUtils.concat(<span class="string">"\\$\\&#123;"</span>, wherePrefix, group.startsWith(<span class="string">"["</span>) ? <span class="string">".value"</span> : <span class="string">".value."</span>, group, <span class="string">"&#125;"</span>);</div><div class="line">                    template = template.replaceFirst(reg, target);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (prepared_matcher.find()) &#123;</div><div class="line">                    String group = prepared_matcher.group();</div><div class="line">                    template = template.replaceFirst(StringUtils.concat(<span class="string">"#\\&#123;"</span>, group.replace(<span class="string">"$"</span>, <span class="string">"\\$"</span>).replace(<span class="string">"["</span>, <span class="string">"\\["</span>).replace(<span class="string">"]"</span>, <span class="string">"\\]"</span>), <span class="string">"&#125;"</span>),</div><div class="line">                            StringUtils.concat(<span class="string">"#\\&#123;"</span>, wherePrefix, group.startsWith(<span class="string">"["</span>) ? <span class="string">".value"</span> : <span class="string">".value."</span>, group, <span class="string">"&#125;"</span>));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SqlAppender(template);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">DataTypeMapper</span> </span>&#123;</div><div class="line">        <span class="function">String <span class="title">getDataType</span><span class="params">(RDBColumnMetaData columnMetaData)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ColumnMapper</span> </span>&#123;</div><div class="line">        <span class="function">String <span class="title">getColumn</span><span class="params">(RDBColumnMetaData columnMetaData)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTermTypeMapper</span><span class="params">(String termType, TermTypeMapper mapper)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDataTypeMapper</span><span class="params">(JDBCType jdbcType, DataTypeMapper mapper)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColumnMapper</span><span class="params">(String columnType, ColumnMapper mapper)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getQuoteStart</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getQuoteEnd</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">SqlAppender <span class="title">buildCondition</span><span class="params">(String wherePrefix, Term term, RDBColumnMetaData RDBColumnMetaData, String tableAlias)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">buildDataType</span><span class="params">(RDBColumnMetaData columnMetaData)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">doPaging</span><span class="params">(String sql, <span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">columnToUpperCase</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">buildColumnName</span><span class="params">(String tableName, String columnName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isNullOrEmpty(tableName)) &#123;</div><div class="line">            <span class="keyword">return</span> StringUtils.concat(getQuoteStart(), columnToUpperCase() ? columnName.toUpperCase() : columnName, getQuoteEnd());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> StringUtils.concat(tableName, <span class="string">"."</span>, getQuoteStart(), columnToUpperCase() ? columnName.toUpperCase() : columnName, getQuoteEnd());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">TableMetaParser <span class="title">getDefaultParser</span><span class="params">(SqlExecutor sqlExecutor)</span></span>;</div><div class="line"></div><div class="line">    Dialect MYSQL  = <span class="keyword">new</span> MysqlDialect();</div><div class="line">    Dialect ORACLE = <span class="keyword">new</span> OracleDialect();</div><div class="line">    Dialect H2     = <span class="keyword">new</span> H2Dialect();</div><div class="line"></div><div class="line">    Dialect MSSQL = <span class="keyword">new</span> MSSQLDialect();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="默认实现DefaultDialect"><a href="#默认实现DefaultDialect" class="headerlink" title="默认实现DefaultDialect"></a>默认实现<code>DefaultDialect</code></h6><p>其中<code>TableMetaParser</code>默认使用<code>OracleTableMetaParser</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.SqlTerm;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.TermType;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.OracleTableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.TableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlAppender;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDialect</span> <span class="keyword">implements</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, TermTypeMapper&gt; termTypeMappers       = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, DataTypeMapper&gt; dataTypeMappers       = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> DataTypeMapper              defaultDataTypeMapper = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> List&lt;JDBCType&gt; numberJdbcType = Arrays.asList(JDBCType.NUMERIC, JDBCType.INTEGER, JDBCType.BIGINT, JDBCType.TINYINT, JDBCType.DOUBLE, JDBCType.FLOAT);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//默认查询条件支持</span></div><div class="line">        termTypeMappers.put(TermType.eq, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"=#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.not, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"!=#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.like, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">" LIKE #&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.nlike, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">" NOT LIKE #&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.isnull, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">" IS NULL"</span>));</div><div class="line">        termTypeMappers.put(TermType.notnull, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">" IS NOT NULL"</span>));</div><div class="line">        termTypeMappers.put(TermType.gt, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"&gt;#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.lt, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"&lt;#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.gte, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"&gt;=#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.lte, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"&lt;=#&#123;"</span>, wherePrefix, <span class="string">".value&#125;"</span>));</div><div class="line">        termTypeMappers.put(TermType.empty, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"=''"</span>));</div><div class="line">        termTypeMappers.put(TermType.nempty, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(buildColumnName(tableAlias, column.getName()), <span class="string">"!=''"</span>));</div><div class="line">        termTypeMappers.put(TermType.func, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">                <span class="keyword">new</span> SqlAppender().add(term.getValue()));</div><div class="line">        termTypeMappers.put(TermType.btw, (wherePrefix, term, column, tableAlias) -&gt; &#123;</div><div class="line">            SqlAppender sqlAppender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            List&lt;Object&gt; objects = param2list(term.getValue(), column);</div><div class="line">            <span class="keyword">if</span> (objects.size() == <span class="number">1</span>)</div><div class="line">                objects.add(objects.get(<span class="number">0</span>));</div><div class="line">            term.setValue(objects);</div><div class="line">            sqlAppender.add(buildColumnName(tableAlias, column.getName()), <span class="string">" "</span>).addSpc(<span class="string">"BETWEEN"</span>)</div><div class="line">                    .add(<span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value[0]&#125;"</span>)</div><div class="line">                    .add(<span class="string">" AND "</span>, <span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value[1]&#125;"</span>);</div><div class="line">            <span class="keyword">return</span> sqlAppender;</div><div class="line">        &#125;);</div><div class="line">        termTypeMappers.put(TermType.nbtw, (wherePrefix, term, column, tableAlias) -&gt;</div><div class="line">        &#123;</div><div class="line">            SqlAppender sqlAppender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            List&lt;Object&gt; objects = param2list(term.getValue(), column);</div><div class="line">            <span class="keyword">if</span> (objects.size() == <span class="number">1</span>)</div><div class="line">                objects.add(objects.get(<span class="number">0</span>));</div><div class="line">            term.setValue(objects);</div><div class="line">            sqlAppender.add(buildColumnName(tableAlias, column.getName()), <span class="string">" "</span>).addSpc(<span class="string">"NOT BETWEEN"</span>)</div><div class="line">                    .add(<span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value[0]&#125;"</span>)</div><div class="line">                    .add(<span class="string">" AND "</span>, <span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value[1]&#125;"</span>);</div><div class="line">            <span class="keyword">return</span> sqlAppender;</div><div class="line">        &#125;);</div><div class="line">        termTypeMappers.put(TermType.in, (wherePrefix, term, column, tableAlias) -&gt; &#123;</div><div class="line">            List&lt;Object&gt; values = param2list(term.getValue(), column);</div><div class="line">            term.setValue(values);</div><div class="line">            SqlAppender appender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            appender.add(tableAlias, <span class="string">"."</span>).addSpc(column.getName()).add(<span class="string">"IN("</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.size(); i++) &#123;</div><div class="line">                appender.add(<span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value["</span>, i, <span class="string">"]&#125;"</span>, <span class="string">","</span>);</div><div class="line">            &#125;</div><div class="line">            appender.removeLast();</div><div class="line">            appender.add(<span class="string">")"</span>);</div><div class="line">            <span class="keyword">return</span> appender;</div><div class="line">        &#125;);</div><div class="line">        termTypeMappers.put(TermType.nin, (wherePrefix, term, column, tableAlias) -&gt; &#123;</div><div class="line">            List&lt;Object&gt; values = param2list(term.getValue(), column);</div><div class="line">            term.setValue(values);</div><div class="line">            SqlAppender appender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            appender.add(tableAlias, <span class="string">"."</span>).addSpc(column.getName()).add(<span class="string">"NOT IN("</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.size(); i++) &#123;</div><div class="line">                appender.add(<span class="string">"#&#123;"</span>, wherePrefix, <span class="string">".value["</span>, i, <span class="string">"]&#125;"</span>, <span class="string">","</span>);</div><div class="line">            &#125;</div><div class="line">            appender.removeLast();</div><div class="line">            appender.add(<span class="string">")"</span>);</div><div class="line">            <span class="keyword">return</span> appender;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlAppender <span class="title">buildCondition</span><span class="params">(String wherePrefix, Term term, RDBColumnMetaData RDBColumnMetaData, String tableAlias)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (term <span class="keyword">instanceof</span> SqlTerm) &#123;</div><div class="line">            TermTypeMapper mapper = TermTypeMapper.sql(term.getColumn(), term.getValue());</div><div class="line">            <span class="keyword">return</span> mapper.accept(wherePrefix, term, RDBColumnMetaData, tableAlias);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (term.getValue() <span class="keyword">instanceof</span> TermTypeMapper) &#123;</div><div class="line">            <span class="keyword">return</span> ((TermTypeMapper) term.getValue()).accept(wherePrefix, term, RDBColumnMetaData, tableAlias);</div><div class="line">        &#125;</div><div class="line">        TermTypeMapper mapper = termTypeMappers.get(term.getTermType());</div><div class="line">        <span class="keyword">if</span> (mapper == <span class="keyword">null</span>) mapper = termTypeMappers.get(TermType.eq);</div><div class="line">        <span class="keyword">return</span> mapper.accept(wherePrefix, term, RDBColumnMetaData, tableAlias);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> List&lt;Object&gt; <span class="title">param2list</span><span class="params">(Object value, RDBColumnMetaData columnMetaData)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> List) <span class="keyword">return</span> ((List) value);</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Collection) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(((Collection) value));</div><div class="line">        <span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> Collection)) &#123;</div><div class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</div><div class="line">                String[] arr = ((String) value).split(<span class="string">"[, ;]"</span>);</div><div class="line">                Object[] objArr = <span class="keyword">new</span> Object[arr.length];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">                    String str = arr[i];</div><div class="line">                    Object val = str;</div><div class="line">                    <span class="comment">//数字类型</span></div><div class="line">                    <span class="keyword">if</span> (numberJdbcType.contains(columnMetaData.getJdbcType())) &#123;</div><div class="line">                        <span class="keyword">if</span> (StringUtils.isInt(str))</div><div class="line">                            val = StringUtils.toInt(str);</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isDouble(str))</div><div class="line">                            val = StringUtils.toDouble(str);</div><div class="line">                    &#125;</div><div class="line">                    objArr[i] = val;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> Arrays.asList(objArr);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.getClass().isArray()) &#123;</div><div class="line">                <span class="keyword">return</span> Arrays.asList(((Object[]) value));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(value));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTermTypeMapper</span><span class="params">(String termType, TermTypeMapper mapper)</span> </span>&#123;</div><div class="line">        termType = termType.toLowerCase();</div><div class="line">        termTypeMappers.put(termType, mapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataTypeMapper</span><span class="params">(JDBCType jdbcType, DataTypeMapper mapper)</span> </span>&#123;</div><div class="line">        dataTypeMappers.put(jdbcType.getName(), mapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColumnMapper</span><span class="params">(String columnType, ColumnMapper mapper)</span> </span>&#123;</div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> 16-10-28</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buildDataType</span><span class="params">(RDBColumnMetaData columnMetaData)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (columnMetaData.getJdbcType() == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        DataTypeMapper mapper = dataTypeMappers.get(columnMetaData.getJdbcType().getName());</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mapper) mapper = defaultDataTypeMapper;</div><div class="line">        <span class="keyword">return</span> mapper.getDataType(columnMetaData);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TableMetaParser <span class="title">getDefaultParser</span><span class="params">(SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OracleTableMetaParser(sqlExecutor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体到相应数据库，这里拿<code>MysqlDialect</code>为例:</p>
<p>其实主要还是设置对应的数据类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.MysqlTableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.parser.TableMetaParser;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlDialect</span> <span class="keyword">extends</span> <span class="title">DefaultDialect</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">MysqlDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        defaultDataTypeMapper = (meta) -&gt; meta.getJdbcType().getName().toLowerCase();</div><div class="line">        setDataTypeMapper(JDBCType.CHAR, (meta) -&gt; StringUtils.concat(<span class="string">"char("</span>, meta.getLength(), <span class="string">")"</span>));</div><div class="line">        setDataTypeMapper(JDBCType.VARCHAR, (meta) -&gt; StringUtils.concat(<span class="string">"varchar("</span>, meta.getLength(), <span class="string">")"</span>));</div><div class="line">        setDataTypeMapper(JDBCType.TIMESTAMP, (meta) -&gt; <span class="string">"datetime"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.TIME, (meta) -&gt; <span class="string">"time"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.DATE, (meta) -&gt; <span class="string">"year"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.CLOB, (meta) -&gt; <span class="string">"text"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.LONGVARBINARY, (meta) -&gt; <span class="string">"longblob"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.LONGVARCHAR, (meta) -&gt; <span class="string">"longtext"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.BLOB, (meta) -&gt; <span class="string">"blob"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.BIGINT, (meta) -&gt; <span class="string">"bigint"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.DOUBLE, (meta) -&gt; <span class="string">"double"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.INTEGER, (meta) -&gt; <span class="string">"int"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.NUMERIC, (meta) -&gt; StringUtils.concat(<span class="string">"decimal("</span>, meta.getPrecision(), <span class="string">","</span>, meta.getScale(), <span class="string">")"</span>));</div><div class="line">        setDataTypeMapper(JDBCType.DECIMAL, (meta) -&gt; StringUtils.concat(<span class="string">"decimal("</span>, meta.getPrecision(), <span class="string">","</span>, meta.getScale(), <span class="string">")"</span>));</div><div class="line">        setDataTypeMapper(JDBCType.TINYINT, (meta) -&gt; <span class="string">"tinyint"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.BIGINT, (meta) -&gt; <span class="string">"bigint"</span>);</div><div class="line">        setDataTypeMapper(JDBCType.OTHER, (meta) -&gt; <span class="string">"other"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQuoteStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"`"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQuoteEnd</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"`"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doPaging</span><span class="params">(String sql, <span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(sql)</div><div class="line">                .append(<span class="string">" limit "</span>)</div><div class="line">                .append(pageSize * pageIndex)</div><div class="line">                .append(<span class="string">","</span>)</div><div class="line">                .append(pageSize).toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">columnToUpperCase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TableMetaParser <span class="title">getDefaultParser</span><span class="params">(SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MysqlTableMetaParser(sqlExecutor);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="这里漏说了一个表元素的解析"><a href="#这里漏说了一个表元素的解析" class="headerlink" title="这里漏说了一个表元素的解析:"></a>这里漏说了一个表元素的解析:</h6><p>先设计个接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.parser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TableMetaParser</span> </span>&#123;</div><div class="line">    <span class="function">RDBTableMetaData <span class="title">parse</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;RDBTableMetaData&gt; <span class="title">parseAll</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>抽出抽象部分:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.parser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.commons.StringUtils;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.expand.SimpleMapWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.Dialect;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Objects;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTableMetaParser</span> <span class="keyword">implements</span> <span class="title">TableMetaParser</span> </span>&#123;</div><div class="line">    Map&lt;String, JDBCType&gt; jdbcTypeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    Map&lt;JDBCType, Class&gt;  javaTypeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> SqlExecutor sqlExecutor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> Dialect <span class="title">getDialect</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractTableMetaParser</span><span class="params">(SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sqlExecutor = sqlExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getTableMetaSql</span><span class="params">(String tname)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getTableCommentSql</span><span class="params">(String tname)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getAllTableSql</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getTableExistsSql</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            param.put(<span class="string">"table"</span>, name);</div><div class="line">            Map&lt;String, Object&gt; res = sqlExecutor.single(<span class="keyword">new</span> SimpleSQL(getTableExistsSql(), param), <span class="keyword">new</span> LowerCasePropertySimpleMapWrapper());</div><div class="line">            <span class="keyword">return</span> res.get(<span class="string">"total"</span>) != <span class="keyword">null</span> &amp;&amp; StringUtils.toInt(res.get(<span class="string">"total"</span>)) &gt; <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RDBTableMetaData <span class="title">parse</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!tableExists(name)) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        RDBTableMetaData metaData = <span class="keyword">new</span> RDBTableMetaData();</div><div class="line">        metaData.setName(name);</div><div class="line">        metaData.setAlias(name);</div><div class="line">        Map&lt;String, Object&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        param.put(<span class="string">"table"</span>, name);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            List&lt;RDBColumnMetaData&gt; metaDatas = sqlExecutor.list(<span class="keyword">new</span> SimpleSQL(getTableMetaSql(name), param), <span class="keyword">new</span> RDBColumnMetaDataWrapper());</div><div class="line">            metaDatas.forEach(metaData::addColumn);</div><div class="line">            Map&lt;String, Object&gt; comment = sqlExecutor.single(<span class="keyword">new</span> SimpleSQL(getTableCommentSql(name), param), <span class="keyword">new</span> LowerCasePropertySimpleMapWrapper());</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != comment &amp;&amp; comment.get(<span class="string">"comment"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">                metaData.setComment(String.valueOf(comment.get(<span class="string">"comment"</span>)));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> metaData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;RDBTableMetaData&gt; <span class="title">parseAll</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        List&lt;Map&lt;String, Object&gt;&gt; tables = sqlExecutor.list(<span class="keyword">new</span> SimpleSQL(getAllTableSql()), <span class="keyword">new</span> LowerCasePropertySimpleMapWrapper());</div><div class="line">        <span class="keyword">return</span> tables.stream()</div><div class="line">                .map(map -&gt; (String) map.get(<span class="string">"name"</span>))</div><div class="line">                .filter(Objects::nonNull)</div><div class="line">                .map(<span class="keyword">this</span>::parse).filter(Objects::nonNull)</div><div class="line">                .collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LowerCasePropertySimpleMapWrapper</span> <span class="keyword">extends</span> <span class="title">SimpleMapWrapper</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wrapper</span><span class="params">(Map&lt;String, Object&gt; instance, <span class="keyword">int</span> index, String attr, Object value)</span> </span>&#123;</div><div class="line">            attr = attr.toLowerCase();</div><div class="line">            <span class="keyword">super</span>.wrapper(instance, index, attr, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RDBColumnMetaDataWrapper</span> <span class="keyword">implements</span> <span class="title">ObjectWrapper</span>&lt;<span class="title">RDBColumnMetaData</span>&gt; </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Class&lt;RDBColumnMetaData&gt; <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> RDBColumnMetaData.class;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> RDBColumnMetaData <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RDBColumnMetaData();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wrapper</span><span class="params">(RDBColumnMetaData instance, <span class="keyword">int</span> index, String attr, Object value)</span> </span>&#123;</div><div class="line">            String stringValue;</div><div class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</div><div class="line">                stringValue = ((String) value).toLowerCase();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                stringValue = value == <span class="keyword">null</span> ? <span class="string">""</span> : value.toString();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (attr.equalsIgnoreCase(<span class="string">"name"</span>)) &#123;</div><div class="line">                instance.setName(stringValue);</div><div class="line">                instance.setProperty(<span class="string">"old-name"</span>, stringValue);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attr.equalsIgnoreCase(<span class="string">"comment"</span>)) &#123;</div><div class="line">                instance.setComment(stringValue);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (attr.toLowerCase().equals(<span class="string">"not-null"</span>)) &#123;</div><div class="line">                    value = <span class="string">"1"</span>.equals(stringValue);</div><div class="line">                    instance.setNotNull((<span class="keyword">boolean</span>) value);</div><div class="line">                &#125;</div><div class="line">                instance.setProperty(attr.toLowerCase(), value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">(RDBColumnMetaData instance)</span> </span>&#123;</div><div class="line">            String data_type = instance.getProperty(<span class="string">"data_type"</span>).toString().toLowerCase();</div><div class="line">            <span class="keyword">int</span> len = instance.getProperty(<span class="string">"data_length"</span>).toInt();</div><div class="line">            <span class="keyword">int</span> data_precision = instance.getProperty(<span class="string">"data_precision"</span>).toInt();</div><div class="line">            <span class="keyword">int</span> data_scale = instance.getProperty(<span class="string">"data_scale"</span>).toInt();</div><div class="line">            <span class="keyword">if</span> (data_type == <span class="keyword">null</span>) &#123;</div><div class="line">                data_type = <span class="string">"varchar"</span>;</div><div class="line">            &#125;</div><div class="line">            instance.setLength(len);</div><div class="line">            instance.setPrecision(data_precision);</div><div class="line">            instance.setScale(data_scale);</div><div class="line"></div><div class="line">            JDBCType jdbcType;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                jdbcType = JDBCType.valueOf(data_type.toUpperCase());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                jdbcType = jdbcTypeMap.get(data_type);</div><div class="line">            &#125;</div><div class="line">            Class javaType = javaTypeMap.get(jdbcType);</div><div class="line">            instance.setJdbcType(jdbcType);</div><div class="line">            instance.setJavaType(javaType);</div><div class="line">            instance.setDataType(getDialect().buildDataType(instance));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体数据库完成具体部分<code>MysqlTableMetaParser</code>为例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.parser;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SqlExecutor;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.Dialect;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.MysqlDialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.JDBCType;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-5.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlTableMetaParser</span> <span class="keyword">extends</span> <span class="title">AbstractTableMetaParser</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_META_SQL = <span class="string">" select "</span> +</div><div class="line">            <span class="string">"column_name as `name`, "</span> +</div><div class="line">            <span class="string">"data_type as `data_type`, "</span> +</div><div class="line">            <span class="string">"character_maximum_length as `data_length`, "</span> +</div><div class="line">            <span class="string">"numeric_precision as `data_precision`, "</span> +</div><div class="line">            <span class="string">"numeric_scale as `data_scale`, "</span> +</div><div class="line">            <span class="string">"column_comment as `comment`, "</span> +</div><div class="line">            <span class="string">"case when is_nullable='YES' then 0 else 1 end as 'not-null' "</span> +</div><div class="line">            <span class="string">"from information_schema.columns where table_schema=database() and table_name=#&#123;table&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_COMMENT_SQL = <span class="string">" select "</span> +</div><div class="line">            <span class="string">"table_comment as `comment` "</span> +</div><div class="line">            <span class="string">"from information_schema.tables where table_name=#&#123;table&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ALL_TABLE_SQL = <span class="string">"select table_name as `name` from information_schema.`TABLES` where table_schema=database()"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_EXISTS_SQL = <span class="string">"select count(1) as 'total' from information_schema.`TABLES` where table_schema=database() and table_name=#&#123;table&#125;"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MysqlTableMetaParser</span><span class="params">(SqlExecutor sqlExecutor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(sqlExecutor);</div><div class="line">        jdbcTypeMap.put(<span class="string">"int"</span>, JDBCType.INTEGER);</div><div class="line">        jdbcTypeMap.put(<span class="string">"year"</span>, JDBCType.TIME);</div><div class="line">        jdbcTypeMap.put(<span class="string">"datetime"</span>, JDBCType.TIMESTAMP);</div><div class="line">        jdbcTypeMap.put(<span class="string">"text"</span>, JDBCType.CLOB);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">Dialect <span class="title">getDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Dialect.MYSQL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">String <span class="title">getTableMetaSql</span><span class="params">(String tname)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> TABLE_META_SQL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">String <span class="title">getTableCommentSql</span><span class="params">(String tname)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> TABLE_COMMENT_SQL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">String <span class="title">getAllTableSql</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ALL_TABLE_SQL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function">String <span class="title">getTableExistsSql</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> TABLE_EXISTS_SQL;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="其次是SimpleWhereSqlBuilder："><a href="#其次是SimpleWhereSqlBuilder：" class="headerlink" title="其次是SimpleWhereSqlBuilder："></a>其次是<code>SimpleWhereSqlBuilder</code>：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.support.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.SqlTerm;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.TermType;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.Correlation;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlAppender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.Dialect;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWhereSqlBuilder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getTableAlias</span><span class="params">(RDBTableMetaData metaData, String field)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (field.contains(<span class="string">"."</span>))</div><div class="line">            field = field.split(<span class="string">"[.]"</span>)[<span class="number">0</span>];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> metaData.getAlias();</div><div class="line">        Correlation correlation = metaData.getCorrelation(field);</div><div class="line">        <span class="keyword">if</span> (correlation != <span class="keyword">null</span>) <span class="keyword">return</span> correlation.getAlias();</div><div class="line">        <span class="keyword">return</span> metaData.getAlias();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWhere</span><span class="params">(RDBTableMetaData metaData, String prefix,</span></span></div><div class="line">                           List&lt;Term&gt; terms, SqlAppender appender,</div><div class="line">                           Set&lt;String&gt; needSelectTable) &#123;</div><div class="line">        <span class="keyword">if</span> (terms == <span class="keyword">null</span> || terms.isEmpty()) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</div><div class="line">        String prefixTmp = StringUtils.concat(prefix, StringUtils.isNullOrEmpty(prefix) ? <span class="string">""</span> : <span class="string">"."</span>);</div><div class="line">        <span class="keyword">for</span> (Term term : terms) &#123;</div><div class="line">            index++;</div><div class="line">            <span class="keyword">boolean</span> nullTerm = StringUtils.isNullOrEmpty(term.getColumn());</div><div class="line">            RDBColumnMetaData column = metaData.findColumn(term.getColumn());</div><div class="line">            <span class="comment">//不是空条件 也不是可选字段</span></div><div class="line">            <span class="keyword">if</span> (!nullTerm &amp;&amp; column == <span class="keyword">null</span> &amp;&amp; term.getTermType() != TermType.func &amp;&amp; !(term <span class="keyword">instanceof</span> SqlTerm)) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">//不是空条件，值为空</span></div><div class="line">            <span class="keyword">if</span> (!nullTerm &amp;&amp; StringUtils.isNullOrEmpty(term.getValue())) <span class="keyword">continue</span>;</div><div class="line">            <span class="comment">//是空条件，但是无嵌套</span></div><div class="line">            <span class="keyword">if</span> (nullTerm &amp;&amp; term.getTerms().isEmpty()) <span class="keyword">continue</span>;</div><div class="line">            String tableAlias = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (column != <span class="keyword">null</span>) &#123;</div><div class="line">                tableAlias = getTableAlias(metaData, term.getColumn());</div><div class="line">                needSelectTable.add(tableAlias);</div><div class="line">                <span class="comment">//转换参数的值</span></div><div class="line">                term.setValue(transformationValue(column, term.getValue()));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//用于sql预编译的参数名</span></div><div class="line">            prefix = StringUtils.concat(prefixTmp, <span class="string">"terms["</span>, index, <span class="string">"]"</span>);</div><div class="line">            <span class="comment">//添加类型，and 或者 or</span></div><div class="line">            appender.add(StringUtils.concat(<span class="string">" "</span>, term.getType().toString().toUpperCase(), <span class="string">" "</span>));</div><div class="line">            <span class="keyword">if</span> (!term.getTerms().isEmpty()) &#123;</div><div class="line">                <span class="comment">//构建嵌套的条件</span></div><div class="line">                SqlAppender nest = <span class="keyword">new</span> SqlAppender();</div><div class="line">                buildWhere(metaData, prefix, term.getTerms(), nest, needSelectTable);</div><div class="line">                <span class="comment">//如果嵌套结果为空,</span></div><div class="line">                <span class="keyword">if</span> (nest.isEmpty()) &#123;</div><div class="line">                    appender.removeLast();<span class="comment">//删除最后一个（and 或者 or）</span></div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (nullTerm) &#123;</div><div class="line">                    <span class="comment">//删除 第一个（and 或者 or）</span></div><div class="line">                    nest.removeFirst();</div><div class="line">                &#125;</div><div class="line">                appender.add(<span class="string">"("</span>);</div><div class="line">                <span class="keyword">if</span> (!nullTerm)</div><div class="line">                    appender.add(getDialect().buildCondition(prefix, term, column, tableAlias));</div><div class="line">                appender.addAll(nest);</div><div class="line">                appender.add(<span class="string">")"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!nullTerm)</div><div class="line">                    appender.add(getDialect().buildCondition(prefix, term, column, tableAlias));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">transformationValue</span><span class="params">(RDBColumnMetaData column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; column.getValueConverter() != <span class="keyword">null</span>) &#123;</div><div class="line">            value = column.getValueConverter().getData(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; column.getOptionConverter() != <span class="keyword">null</span>) &#123;</div><div class="line">            Object tmp = column.getOptionConverter().converterData(value);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != tmp) value = tmp;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        JDBCType type = column.getJdbcType();</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//        if (type == null) return value;</span></div><div class="line"><span class="comment">//        switch (type) &#123;</span></div><div class="line"><span class="comment">//            case INTEGER:</span></div><div class="line"><span class="comment">//            case NUMERIC:</span></div><div class="line"><span class="comment">//                if (StringUtils.isInt(type)) return StringUtils.toInt(value);</span></div><div class="line"><span class="comment">//                if (StringUtils.isDouble(type)) return StringUtils.toDouble(value);</span></div><div class="line"><span class="comment">//                break;</span></div><div class="line"><span class="comment">//            case TIMESTAMP:</span></div><div class="line"><span class="comment">//            case TIME:</span></div><div class="line"><span class="comment">//            case DATE:</span></div><div class="line"><span class="comment">//                if (!(value instanceof Date)) &#123;</span></div><div class="line"><span class="comment">//                    String strValue = String.valueOf(value);</span></div><div class="line"><span class="comment">//                    Date date = DateTimeUtils.formatUnknownString2Date(strValue);</span></div><div class="line"><span class="comment">//                    if (date != null) return date;</span></div><div class="line"><span class="comment">//                &#125;</span></div><div class="line"><span class="comment">//                break;</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Dialect <span class="title">getDialect</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="拼接出的sql封装："><a href="#拼接出的sql封装：" class="headerlink" title="拼接出的sql封装："></a>拼接出的sql封装：</h6><p>关联查询sql:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.executor;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 浩 on 2015-11-06 0006.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindSQL</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SQL sql;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String toField;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SQL <span class="title">getSql</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sql;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSql</span><span class="params">(SQL sql)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sql = sql;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToField</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toField;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToField</span><span class="params">(String toField)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.toField = toField;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义<code>SQL</code>封装接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.executor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SQL</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取sql语句模板</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> sql语句模板</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">getSql</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取预编译参数</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">getParams</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取关联查询的sql</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">List&lt;BindSQL&gt; <span class="title">getBinds</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.support.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.BindSQL;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SQL;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSQL</span> <span class="keyword">implements</span> <span class="title">SQL</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String sql;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object param;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;BindSQL&gt; bindSQLs;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleSQL</span><span class="params">(String sql, Object param)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sql = sql;</div><div class="line">        <span class="keyword">this</span>.param = param;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleSQL</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sql = sql;</div><div class="line">        <span class="keyword">this</span>.param = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sql;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getParams</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> param;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;BindSQL&gt; <span class="title">getBinds</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bindSQLs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBindSQLs</span><span class="params">(List&lt;BindSQL&gt; bindSQLs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bindSQLs = bindSQLs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bindSQLs == <span class="keyword">null</span> ? <span class="number">1</span> : bindSQLs.size() + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        builder.append(sql).append(<span class="string">"\n"</span>).append(param);</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="回到SimpleUpdateSqlRender实现"><a href="#回到SimpleUpdateSqlRender实现" class="headerlink" title="回到SimpleUpdateSqlRender实现:"></a>回到<code>SimpleUpdateSqlRender</code>实现:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.render.support.simple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtilsBean;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtilsBean;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.UpdateParam;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.executor.SQL;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBColumnMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.RDBTableMetaData;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.SqlAppender;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.dialect.Dialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleUpdateSqlRender</span> <span class="keyword">extends</span> <span class="title">CommonSqlRender</span>&lt;<span class="title">UpdateParam</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SimpleUpdateSqlRenderProcess</span> <span class="keyword">extends</span> <span class="title">SimpleWhereSqlBuilder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> RDBTableMetaData      metaData;</div><div class="line">        <span class="keyword">private</span> UpdateParam           param;</div><div class="line">        <span class="keyword">private</span> List&lt;OperationColumn&gt; updateField;</div><div class="line">        <span class="keyword">private</span> SqlAppender whereSql       = <span class="keyword">new</span> SqlAppender();</div><div class="line">        <span class="keyword">private</span> Set&lt;String&gt; conditionTable = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        PropertyUtilsBean propertyUtils = BeanUtilsBean.getInstance().getPropertyUtils();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SimpleUpdateSqlRenderProcess</span><span class="params">(RDBTableMetaData metaData, UpdateParam param)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.metaData = metaData;</div><div class="line">            <span class="keyword">this</span>.param = param.clone();</div><div class="line">          <span class="comment">//先得到条件</span></div><div class="line">            List&lt;Term&gt; terms = param.getTerms();</div><div class="line">          <span class="comment">//对包含条件进行过滤转换得到一个list</span></div><div class="line">            terms = terms.stream().filter(term -&gt; term.getColumn() == <span class="keyword">null</span> || !term.getColumn().contains(<span class="string">"."</span>)).collect(Collectors.toList());</div><div class="line">            param.setTerms(terms);</div><div class="line">            <span class="comment">//解析要操作的字段</span></div><div class="line">            <span class="keyword">this</span>.updateField = parseOperationField(metaData, param);</div><div class="line">            <span class="comment">//解析查询条件</span></div><div class="line">            buildWhere(metaData, <span class="string">""</span>, param.getTerms(), whereSql, conditionTable);</div><div class="line">            <span class="keyword">if</span> (!whereSql.isEmpty()) whereSql.removeFirst();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> SQL <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">            SqlAppender appender = <span class="keyword">new</span> SqlAppender();</div><div class="line">            appender.add(<span class="string">"UPDATE "</span>, metaData.getName(), <span class="string">" "</span>, metaData.getAlias(), <span class="string">" SET "</span>);</div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</div><div class="line">            Map&lt;String, Object&gt; valueProxy = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            updateField.forEach(operationColumn -&gt; &#123;</div><div class="line">                RDBColumnMetaData column = operationColumn.getRDBColumnMetaData();</div><div class="line">                <span class="keyword">if</span> (column.getProperty(<span class="string">"read-only"</span>).isTrue()) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    String dataProperty = column.getAlias();</div><div class="line">                    Object value = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        value = propertyUtils.getProperty(param.getData(), dataProperty);</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; !column.getAlias().equals(column.getName())) &#123;</div><div class="line">                        dataProperty = column.getName();</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            value = propertyUtils.getProperty(param.getData(), dataProperty);</div><div class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (logger.isInfoEnabled())</div><div class="line">                            logger.info(<span class="string">"跳过修改列:[&#123;&#125;], 属性[&#123;&#125;]为null!"</span>, column.getName(), column.getAlias());</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (column.getValueConverter() != <span class="keyword">null</span>) &#123;</div><div class="line">                        Object new_value = column.getValueConverter().getData(value);</div><div class="line">                        <span class="keyword">if</span> (column.getOptionConverter() != <span class="keyword">null</span>) &#123;</div><div class="line">                            new_value = column.getOptionConverter().converterData(new_value);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (value != new_value &amp;&amp; !value.equals(new_value)) &#123;</div><div class="line">                            <span class="comment">// propertyUtils.setProperty(param.getData(), dataProperty, new_value);</span></div><div class="line">                            value = new_value;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    valueProxy.put(dataProperty, value);</div><div class="line">                    appender.add(dialect.buildColumnName(<span class="keyword">null</span>, column.getName()), <span class="string">"="</span>)</div><div class="line">                            .addAll(getParamString(<span class="string">"data."</span>.concat(dataProperty), column));</div><div class="line">                    appender.add(<span class="string">","</span>);</div><div class="line">                    bytes[<span class="number">0</span>]++;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="keyword">if</span> (logger.isInfoEnabled())</div><div class="line">                        logger.info(<span class="string">"跳过修改列:[&#123;&#125;], 可能属性[&#123;&#125;]不存在!"</span>, column.getName(), column.getAlias());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">if</span> (bytes[<span class="number">0</span>] == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"没有列被修改!"</span>);</div><div class="line">            appender.removeLast();</div><div class="line">            <span class="keyword">if</span> (whereSql.isEmpty()) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"禁止执行未设置任何条件的修改操作!"</span>);</div><div class="line">            &#125;</div><div class="line">            appender.add(<span class="string">" WHERE "</span>, <span class="string">""</span>).addAll(whereSql);</div><div class="line">            String sql = appender.toString();</div><div class="line">            param.setData(valueProxy);</div><div class="line">            SimpleSQL simpleSQL = <span class="keyword">new</span> SimpleSQL(sql, param);</div><div class="line">            <span class="keyword">return</span> simpleSQL;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Dialect <span class="title">getDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> dialect;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> SqlAppender <span class="title">getParamString</span><span class="params">(String paramName, RDBColumnMetaData rdbColumnMetaData)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlAppender().add(<span class="string">"#&#123;"</span>, paramName, <span class="string">"&#125;"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SQL <span class="title">render</span><span class="params">(RDBTableMetaData metaData, UpdateParam param)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleUpdateSqlRenderProcess(metaData, param).process();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleUpdateSqlRender</span><span class="params">(Dialect dialect)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dialect = dialect;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Dialect dialect;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Dialect <span class="title">getDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dialect;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDialect</span><span class="params">(Dialect dialect)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dialect = dialect;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="终于得到-了sql，最后，验证之后执行sql语句"><a href="#终于得到-了sql，最后，验证之后执行sql语句" class="headerlink" title="终于得到 了sql，最后，验证之后执行sql语句:"></a>终于得到 了sql，最后，验证之后执行sql语句:</h5><h6 id="设定执行器接口SqlExecutor"><a href="#设定执行器接口SqlExecutor" class="headerlink" title="设定执行器接口SqlExecutor:"></a>设定执行器接口<code>SqlExecutor</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.executor;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.meta.expand.SimpleMapWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * SQL执行器,用于执行sql</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlExecutor</span> </span>&#123;</div><div class="line"></div><div class="line">    SimpleMapWrapper mapWrapper = <span class="keyword">new</span> SimpleMapWrapper();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 传入SQL对象和对象包装器执行查询,将查询结果通过对象包装器进行包装后返回</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql     sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@param</span> wrapper 执行结果对象包装器 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.meta.expand.SimpleMapWrapper&#125;</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;     查询结果类型泛型</div><div class="line">     * <span class="doctag">@return</span> 查询结果</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行查询异常</div><div class="line">     */</div><div class="line">    &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(SQL sql, ObjectWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 传入SQL对象和对象包装器执行查询,将查询结果通过对象包装器进行包装后返回</div><div class="line">     * 只返回单个结果,如果sql结果存在多个值,则返回首个值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql     sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@param</span> wrapper 对象包装其</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;     查询结果类型泛型</div><div class="line">     * <span class="doctag">@return</span> 查询结果</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行查询异常</div><div class="line">     */</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">single</span><span class="params">(SQL sql, ObjectWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行sql</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行update</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@return</span> 执行sql后影响的行数</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行delete</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@return</span> 执行sql后影响的行数</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行insert</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql对象 参照&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@return</span> 执行sql后影响的行数</div><div class="line">     * <span class="doctag">@throws</span> SQLException 执行异常</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; list(SQL sql) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        <span class="keyword">return</span> list(sql, mapWrapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; list(String sql, Object params) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        <span class="keyword">return</span> list(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; list(String sql) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        <span class="keyword">return</span> list(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, Object&gt; <span class="title">single</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> single(sql, mapWrapper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, Object&gt; <span class="title">single</span><span class="params">(String sql, Object params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> single(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, Object&gt; <span class="title">single</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> single(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(String sql, Object params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> insert(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql, Object params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> update(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> update(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String sql, Object params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> delete(<span class="keyword">new</span> SimpleSQL(sql, params));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> delete(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        exec(<span class="keyword">new</span> SimpleSQL(sql));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="JDBC-通用sql执行器"><a href="#JDBC-通用sql执行器" class="headerlink" title="JDBC 通用sql执行器"></a><code>JDBC 通用sql执行器</code></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.executor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtilsBean;</div><div class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtilsBean;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.param.Term;</div><div class="line"><span class="keyword">import</span> org.hswebframwork.utils.StringUtils;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * JDBC 通用sql执行器,用于执行sql.支持参数化预编译</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractJdbcSqlExecutor</span> <span class="keyword">implements</span> <span class="title">SqlExecutor</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取jdbc链接,由子类实现</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> jdbc 链接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 直接拼接sql的编译表达式: $&#123;&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern APPEND_PATTERN = Pattern.compile(<span class="string">"(?&lt;=\\$\\&#123;)(.+?)(?=\\&#125;)"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进行参数预编译的表达式:#&#123;&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PREPARED_PATTERN = Pattern.compile(<span class="string">"(?&lt;=#\\&#123;)(.+?)(?=\\&#125;)"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 对象属性操作工具</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> PropertyUtilsBean</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> PropertyUtilsBean propertyUtils = BeanUtilsBean.getInstance().getPropertyUtils();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getSqlParamValue</span><span class="params">(Object param, String paramName)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Object obj = propertyUtils.getProperty(param, paramName);</div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Term)</div><div class="line">                obj = ((Term) obj).getValue();</div><div class="line">            <span class="keyword">return</span> obj;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.warn(<span class="string">"获取sql参数失败"</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将sql模板编译为sql信息</div><div class="line">     * 模板语法:$&#123;&#125;代表直接拼接sql,#&#123;&#125;使用预编译</div><div class="line">     * 如: 模板参数为:&#123;name:"张三",age:10&#125;,sql为:select * from user where name=#&#123;name&#125; and age=$&#123;age&#125;</div><div class="line">     * 将被编译为:select * from user where name=? and age=10。 参数列表:["张三"]</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> sql sql模板 ,参考&#123;<span class="doctag">@link</span> org.hsweb.ezorm.rdb.render.support.simple.SimpleSQL&#125;</div><div class="line">     * <span class="doctag">@return</span> sql 编译好的信息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> SQLInfo <span class="title">compileSql</span><span class="params">(SQL sql)</span> </span>&#123;</div><div class="line">        String sqlTemplate = sql.getSql();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            SQLInfo sqlInfo = <span class="keyword">new</span> SQLInfo();</div><div class="line">            Object param = sql.getParams();</div><div class="line">            Matcher prepared_matcher = PREPARED_PATTERN.matcher(sqlTemplate);</div><div class="line">            Matcher append_matcher = APPEND_PATTERN.matcher(sqlTemplate);</div><div class="line">            List&lt;Object&gt; params = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">            <span class="comment">//直接拼接sql</span></div><div class="line">            <span class="keyword">while</span> (append_matcher.find()) &#123;</div><div class="line">                String group = append_matcher.group();</div><div class="line">                Object obj = getSqlParamValue(param, group);</div><div class="line">                sqlTemplate = sqlTemplate.replaceFirst(StringUtils.concat(<span class="string">"\\$\\&#123;"</span>, escapeExprSpecialWord(group), <span class="string">"\\&#125;"</span>), String.valueOf(obj));</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//参数预编译sql</span></div><div class="line">            <span class="keyword">while</span> (prepared_matcher.find()) &#123;</div><div class="line">                String group = prepared_matcher.group();</div><div class="line">                sqlTemplate = sqlTemplate.replaceFirst(StringUtils.concat(<span class="string">"#\\&#123;"</span>, escapeExprSpecialWord(group), <span class="string">"\\&#125;"</span>), <span class="string">"?"</span>);</div><div class="line">                Object obj = getSqlParamValue(param, group);</div><div class="line">                params.add(obj);</div><div class="line">            &#125;</div><div class="line">            sqlInfo.setSql(sqlTemplate);</div><div class="line">            sqlInfo.setParam(params.toArray());</div><div class="line">            <span class="keyword">return</span> sqlInfo;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"compile sql  &#123;&#125;  error"</span>, sqlTemplate, e);</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 释放连接,在执行完sql后,将释放此链接</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(SQL sql, ObjectWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//将sql模板编译为可执行的sql</span></div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);<span class="comment">//打印sql信息</span></div><div class="line">        Connection connection = getConnection();</div><div class="line">        PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">        List&lt;T&gt; datas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//预编译SQL</span></div><div class="line">            statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            <span class="comment">//执行sql</span></div><div class="line">            resultSet = statement.executeQuery();</div><div class="line">            ResultSetMetaData metaData = resultSet.getMetaData();</div><div class="line">            <span class="keyword">int</span> count = metaData.getColumnCount();</div><div class="line">            <span class="comment">//获取到执行sql后返回的列信息</span></div><div class="line">            List&lt;String&gt; headers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</div><div class="line">                headers.add(metaData.getColumnLabel(i));</div><div class="line">            &#125;</div><div class="line">            wrapper.setUp(headers);</div><div class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</div><div class="line">                <span class="comment">//调用包装器,将查询结果包装为对象</span></div><div class="line">                T data = wrapper.newInstance();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.size(); i++) &#123;</div><div class="line">                    Object value = resultSet.getObject(i + <span class="number">1</span>);</div><div class="line">                    wrapper.wrapper(data, index, headers.get(i), value);</div><div class="line">                &#125;</div><div class="line">                index++;</div><div class="line">                wrapper.done(data);</div><div class="line">                datas.add(data);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"&lt;==      total: &#123;&#125;"</span>, index);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            closeResultSet(resultSet);</div><div class="line">            closeStatement(statement);</div><div class="line">            <span class="comment">//重置JDBC链接</span></div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">closeResultSet</span><span class="params">(ResultSet resultSet)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != resultSet)</div><div class="line">                resultSet.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            logger.error(<span class="string">"close ResultSet error"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">closeStatement</span><span class="params">(Statement statement)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != statement)</div><div class="line">                statement.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            logger.error(<span class="string">"close ResultSet error"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">single</span><span class="params">(SQL sql, ObjectWrapper&lt;T&gt; wrapper)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);</div><div class="line">        Connection connection = getConnection();</div><div class="line">        PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">        T data = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="comment">//预编译参数</span></div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            resultSet = statement.executeQuery();</div><div class="line">            ResultSetMetaData metaData = resultSet.getMetaData();</div><div class="line">            <span class="keyword">int</span> count = metaData.getColumnCount();</div><div class="line">            List&lt;String&gt; headers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</div><div class="line">                headers.add(metaData.getColumnLabel(i));</div><div class="line">            &#125;</div><div class="line">            wrapper.setUp(headers);</div><div class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (resultSet.next()) &#123;</div><div class="line">                data = wrapper.newInstance();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.size(); i++) &#123;</div><div class="line">                    Object value = resultSet.getObject(i + <span class="number">1</span>);</div><div class="line">                    wrapper.wrapper(data, index, headers.get(i), value);</div><div class="line">                &#125;</div><div class="line">                index++;</div><div class="line">                wrapper.done(data);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"&lt;==      total: &#123;&#125;"</span>, index);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            closeResultSet(resultSet);</div><div class="line">            closeStatement(statement);</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span>;</div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);</div><div class="line">        Connection connection = getConnection();</div><div class="line">        PreparedStatement statement = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="comment">//预编译参数</span></div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            statement.execute();</div><div class="line">            <span class="keyword">if</span> (sql.getBinds() != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (BindSQL bindSQL : sql.getBinds()) &#123;</div><div class="line">                    exec(bindSQL.getSql());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            closeStatement(statement);</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);</div><div class="line">        Connection connection = getConnection();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PreparedStatement statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            i = statement.executeUpdate();</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled())</div><div class="line">                logger.debug(<span class="string">"&lt;==    updated: &#123;&#125; rows"</span>, i);</div><div class="line">            closeStatement(statement);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sql <span class="keyword">instanceof</span> EmptySQL) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        SQLInfo info = compileSql(sql);</div><div class="line">        printSql(info);</div><div class="line">        Connection connection = getConnection();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PreparedStatement statement = connection.prepareStatement(info.getSql());</div><div class="line">            <span class="keyword">this</span>.preparedParam(statement, info);</div><div class="line">            i = statement.executeUpdate();</div><div class="line">            <span class="keyword">if</span> (sql.getBinds() != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (BindSQL bindSQL : sql.getBinds()) &#123;</div><div class="line">                    i += delete(bindSQL.getSql());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled())</div><div class="line">                logger.debug(<span class="string">"&lt;==     delete: &#123;&#125; rows"</span>, i);</div><div class="line">            closeStatement(statement);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(SQL sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> update(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tableExists</span><span class="params">(String tname)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        Connection connection = getConnection();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DatabaseMetaData metaData = connection.getMetaData();</div><div class="line">            ResultSet resultSet = metaData</div><div class="line">                    .getTables(connection.getCatalog(), <span class="keyword">null</span>, tname.toUpperCase(), <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (resultSet.next()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                resultSet = metaData</div><div class="line">                        .getTables(connection.getCatalog(), <span class="keyword">null</span>, tname.toLowerCase(), <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (resultSet.next()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            releaseConnection(connection);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 预编译参数</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> statement</div><div class="line">     * <span class="doctag">@param</span> info</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">preparedParam</span><span class="params">(PreparedStatement statement, SQLInfo info)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</div><div class="line">        <span class="comment">//预编译参数</span></div><div class="line">        <span class="keyword">for</span> (Object object : info.getParam()) &#123;</div><div class="line">            <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Date)</div><div class="line">                statement.setTimestamp(index++, <span class="keyword">new</span> java.sql.Timestamp(((Date) object).getTime()));</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</div><div class="line">                statement.setBlob(index++, <span class="keyword">new</span> ByteArrayInputStream((<span class="keyword">byte</span>[]) object));</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">                statement.setObject(index++, object);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printSql</span><span class="params">(SQLInfo info)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(<span class="string">"==&gt;  Preparing: &#123;&#125;"</span>, info.getSql());</div><div class="line">            <span class="keyword">if</span> (info.getParam() != <span class="keyword">null</span> &amp;&amp; info.getParam().length &gt; <span class="number">0</span>) &#123;</div><div class="line">                logger.debug(<span class="string">"==&gt; Parameters: &#123;&#125;"</span>, info.paramsString());</div><div class="line">                String sim = info.getSql();</div><div class="line">                Object[] param = info.getParam();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.length; i++) &#123;</div><div class="line">                    Object obj = param[i];</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        sim = sim.replaceFirst(<span class="string">"\\?"</span>, obj <span class="keyword">instanceof</span> Number ? String.valueOf(obj) : <span class="string">"'"</span>.concat(escapeExprSpecialWord(String.valueOf(obj))).concat(<span class="string">"'"</span>));</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                logger.debug(<span class="string">"==&gt;  Simulated: &#123;&#125;"</span>, sim);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">escapeExprSpecialWord</span><span class="params">(String keyword)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.isNullOrEmpty(keyword)) &#123;</div><div class="line">            String[] fbsArr = &#123;<span class="string">"\\"</span>, <span class="string">"$"</span>, <span class="string">"("</span>, <span class="string">")"</span>, <span class="string">"*"</span>, <span class="string">"+"</span>, <span class="string">"."</span>, <span class="string">"["</span>, <span class="string">"]"</span>, <span class="string">"?"</span>, <span class="string">"^"</span>, <span class="string">"&#123;"</span>, <span class="string">"&#125;"</span>, <span class="string">"|"</span>&#125;;</div><div class="line">            <span class="keyword">for</span> (String key : fbsArr) &#123;</div><div class="line">                <span class="keyword">if</span> (keyword.contains(key)) &#123;</div><div class="line">                    keyword = keyword.replace(key, <span class="string">"\\"</span> + key);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> keyword;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLInfo</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * sql语句</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> String sql;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 参数列表</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> Object[] param;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 参数字符串</div><div class="line">         */</div><div class="line">        <span class="keyword">private</span> String paramString;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getSql</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> sql;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSql</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.sql = sql;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> Object[] getParam() &#123;</div><div class="line">            <span class="keyword">return</span> param;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParam</span><span class="params">(Object[] param)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.param = param;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">paramsString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (getParam() == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span> (paramString == <span class="keyword">null</span>) &#123;</div><div class="line">                StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (Object param : getParam()) &#123;</div><div class="line">                    <span class="keyword">if</span> (i++ != <span class="number">0</span>)</div><div class="line">                        builder.append(<span class="string">","</span>);</div><div class="line">                    builder.append(String.valueOf(param));</div><div class="line">                    builder.append(<span class="string">"("</span>);</div><div class="line">                    builder.append(param == <span class="keyword">null</span> ? <span class="string">"null"</span> : param.getClass().getSimpleName());</div><div class="line">                    builder.append(<span class="string">")"</span>);</div><div class="line">                &#125;</div><div class="line">                paramString = builder.toString();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> paramString;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，关于改终于分析完毕</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hsweb的系列学习——hsweb-easy-orm分析-中&quot;&gt;&lt;a href=&quot;#hsweb的系列学习——hsweb-easy-orm分析-中&quot; class=&quot;headerlink&quot; title=&quot;hsweb的系列学习——hsweb-easy-orm分析  中&quot;&gt;&lt;/a&gt;hsweb的系列学习——hsweb-easy-orm分析  中&lt;/h1&gt;&lt;p&gt;接上篇&lt;br&gt;
    
    </summary>
    
      <category term="hsweb" scheme="https://muyinchen.github.io/categories/hsweb/"/>
    
    
      <category term="hsweb" scheme="https://muyinchen.github.io/tags/hsweb/"/>
    
  </entry>
  
  <entry>
    <title>hsweb的系列学习——hsweb-easy-orm分析  上</title>
    <link href="https://muyinchen.github.io/2017/03/19/hsweb%E7%9A%84%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94hsweb-easy-orm%E5%88%86%E6%9E%90%20%20%E4%B8%8A/"/>
    <id>https://muyinchen.github.io/2017/03/19/hsweb的系列学习——hsweb-easy-orm分析  上/</id>
    <published>2017-03-19T10:32:45.160Z</published>
    <updated>2017-03-19T10:32:05.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hsweb的系列学习——hsweb-easy-orm分析-上"><a href="#hsweb的系列学习——hsweb-easy-orm分析-上" class="headerlink" title="hsweb的系列学习——hsweb-easy-orm分析  上"></a>hsweb的系列学习——hsweb-easy-orm分析  上</h1><h2 id="对于此orm框架的封装，首先要看的便是-hsweb-easy-orm-core"><a href="#对于此orm框架的封装，首先要看的便是-hsweb-easy-orm-core" class="headerlink" title="对于此orm框架的封装，首先要看的便是:hsweb-easy-orm-core"></a>对于此orm框架的封装，首先要看的便是:<code>hsweb-easy-orm-core</code></h2><blockquote>
<p>整体思路:因为是为动态表单设计的orm框架，所以要有为映射包装的PO类和反映到表元素的元数据类MetaData，</p>
<p>以及对这些bean进行操作的各种周边(最多的也就是curd的细节分拆)<br><a id="more"></a></p>
<h3 id="一，映射包装的PO类"><a href="#一，映射包装的PO类" class="headerlink" title="一，映射包装的PO类"></a>一，映射包装的PO类</h3></blockquote>
<h4 id="列的设定"><a href="#列的设定" class="headerlink" title="列的设定"></a>列的设定</h4><p>我们的curd操作的基本元素首先是表,而我们操作的铁定就是po类，表中的基本元素首先是列，列包含两个属性，名字和字段类型</p>
<p>那么对于这个orm框架中的体现就是:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.1</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Column</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String type;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Column <span class="title">type</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Column <span class="title">build</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        Column column = <span class="keyword">new</span> Column();</div><div class="line">        column.setName(name);</div><div class="line">        <span class="keyword">return</span> column;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处单独定义了<code>ColumnType</code>,暂时未见使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.1</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ColumnType</span> </span>&#123;</div><div class="line">    String def = <span class="string">""</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SQL的参数设定"><a href="#SQL的参数设定" class="headerlink" title="SQL的参数设定"></a>SQL的参数设定</h4><p>对列的一系列的操作其实是操作字段及所涉及的数据，那么我们所要设定的地方有:</p>
<p>通过参考一个sql语句可以知道，操作一个字段往往会涉及到<code>where</code>后面的条件，以及要处理的字段如<code>in{...}</code>不处理的字段 <code>not in{...}</code> 具体代码里面的体现就是:</p>
<h5 id="首先对条件类型的设定"><a href="#首先对条件类型的设定" class="headerlink" title="首先对条件类型的设定:"></a>首先对条件类型的设定:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 查询条件类型,用于动态指定查询条件</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TermType</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ==</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String eq      = <span class="string">"eq"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * !=</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String not     = <span class="string">"not"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * like</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String like    = <span class="string">"like"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * not like</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String nlike   = <span class="string">"nlike"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String gt      = <span class="string">"gt"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &lt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String lt      = <span class="string">"lt"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &gt;=</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String gte     = <span class="string">"gte"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &lt;=</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String lte     = <span class="string">"lte"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * in</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String in      = <span class="string">"in"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * notin</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String nin     = <span class="string">"nin"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * =''</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String empty   = <span class="string">"empty"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * !=''</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String nempty  = <span class="string">"nempty"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * is null</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String isnull  = <span class="string">"isnull"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * not null</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String notnull = <span class="string">"notnull"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * between</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String btw     = <span class="string">"btw"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * not between</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    String nbtw    = <span class="string">"nbtw"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 此类型将直接执行sql.在类型是从客户端参数中获取的场景中,应该屏蔽此类型</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> SqlTerm</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     * <span class="doctag">@deprecated</span> 此属性已弃用，如果想直接拼接sql，请使用 &#123;<span class="doctag">@link</span> SqlTerm&#125;</div><div class="line">     */</div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    String func = <span class="string">"func"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="其次对于条件的设定"><a href="#其次对于条件的设定" class="headerlink" title="其次对于条件的设定:"></a>其次对于条件的设定:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 执行条件</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Term</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 字段</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String column;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Object value;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 链接类型</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Type type = Type.and;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 条件类型</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String termType = TermType.eq;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 嵌套的条件</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> List&lt;Term&gt; terms = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">or</span><span class="params">(String term, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> or(term, TermType.eq,value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">and</span><span class="params">(String term, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> and(term, TermType.eq,value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">or</span><span class="params">(String term, String termType, Object value)</span> </span>&#123;</div><div class="line">        Term queryTerm = <span class="keyword">new</span> Term();</div><div class="line">        queryTerm.setTermType(termType);</div><div class="line">        queryTerm.setColumn(term);</div><div class="line">        queryTerm.setValue(value);</div><div class="line">        queryTerm.setType(Type.or);</div><div class="line">        terms.add(queryTerm);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">and</span><span class="params">(String term, String termType, Object value)</span> </span>&#123;</div><div class="line">        Term queryTerm = <span class="keyword">new</span> Term();</div><div class="line">        queryTerm.setTermType(termType);</div><div class="line">        queryTerm.setColumn(term);</div><div class="line">        queryTerm.setValue(value);</div><div class="line">        queryTerm.setType(Type.and);</div><div class="line">        terms.add(queryTerm);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">nest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nest(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">orNest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> orNest(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">nest</span><span class="params">(String term, Object value)</span> </span>&#123;</div><div class="line">        Term queryTerm = <span class="keyword">new</span> Term();</div><div class="line">        queryTerm.setType(Type.and);</div><div class="line">        queryTerm.setColumn(term);</div><div class="line">        queryTerm.setValue(value);</div><div class="line">        terms.add(queryTerm);</div><div class="line">        <span class="keyword">return</span> queryTerm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">orNest</span><span class="params">(String term, Object value)</span> </span>&#123;</div><div class="line">        Term queryTerm = <span class="keyword">new</span> Term();</div><div class="line">        queryTerm.setType(Type.or);</div><div class="line">        queryTerm.setColumn(term);</div><div class="line">        queryTerm.setValue(value);</div><div class="line">        terms.add(queryTerm);</div><div class="line">        <span class="keyword">return</span> queryTerm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColumn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> column;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColumn</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (column == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (column.contains(<span class="string">"$"</span>)) &#123;</div><div class="line">            String tmp[] = column.split(<span class="string">"[$]"</span>);</div><div class="line">            setTermType(tmp[<span class="number">1</span>]);</div><div class="line">            column = tmp[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.column = column;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(Type type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTermType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> termType.toLowerCase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTermType</span><span class="params">(String termType)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.termType = termType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Term&gt; <span class="title">getTerms</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> terms;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTerms</span><span class="params">(List&lt;Term&gt; terms)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.terms = terms;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">addTerm</span><span class="params">(Term term)</span> </span>&#123;</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setColumn(column);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setTermType(termType);</div><div class="line">        term.setType(type);</div><div class="line">        terms.forEach(t -&gt; term.addTerm(t.clone()));</div><div class="line">        <span class="keyword">return</span> term;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123;</div><div class="line">        or, and;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">fromString</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> Type.valueOf(str.toLowerCase());</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">return</span> and;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将各种条件用po来表达出来并进行封装</p>
<h5 id="最后对于SQL参数对象的设定"><a href="#最后对于SQL参数对象的设定" class="headerlink" title="最后对于SQL参数对象的设定:"></a>最后对于SQL参数对象的设定:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * SQL参数对象</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Param</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 条件</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> List&lt;Term&gt; terms = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定要处理的字段</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> Set&lt;String&gt; includes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指定不处理的字段</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> Set&lt;String&gt; excludes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">or</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> or(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">and</span><span class="params">(String column, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> and(column, TermType.eq, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">or</span><span class="params">(String column, String termType, Object value)</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setTermType(termType);</div><div class="line">        term.setColumn(column);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setType(Term.Type.or);</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">and</span><span class="params">(String column, String termType, Object value)</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setTermType(termType);</div><div class="line">        term.setColumn(column);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setType(Term.Type.and);</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">nest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nest(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">orNest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> orNest(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">nest</span><span class="params">(String termString, Object value)</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setColumn(termString);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setType(Term.Type.and);</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> term;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Term <span class="title">orNest</span><span class="params">(String termString, Object value)</span> </span>&#123;</div><div class="line">        Term term = <span class="keyword">new</span> Term();</div><div class="line">        term.setColumn(termString);</div><div class="line">        term.setValue(value);</div><div class="line">        term.setType(Term.Type.or);</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> term;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">includes</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        includes.addAll(Arrays.asList(fields));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">excludes</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        excludes.addAll(Arrays.asList(fields));</div><div class="line">        includes.removeAll(Arrays.asList(fields));</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">where</span><span class="params">(String key, Object value)</span> </span>&#123;</div><div class="line">        and(key, value);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">where</span><span class="params">(String key, String termType, Object value)</span> </span>&#123;</div><div class="line">        and(key, termType, value);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getIncludes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (includes == <span class="keyword">null</span>) includes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        <span class="keyword">return</span> includes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getExcludes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (excludes == <span class="keyword">null</span>) excludes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        <span class="keyword">return</span> excludes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIncludes</span><span class="params">(Set&lt;String&gt; includes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.includes = includes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExcludes</span><span class="params">(Set&lt;String&gt; excludes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.excludes = excludes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Term&gt; <span class="title">getTerms</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> terms;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTerms</span><span class="params">(List&lt;Term&gt; terms)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.terms = terms;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends Param&gt; <span class="function">T <span class="title">addTerm</span><span class="params">(Term term)</span> </span>&#123;</div><div class="line">        terms.add(term);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Param <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        Param param = <span class="keyword">new</span> Param();</div><div class="line">        param.setExcludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(excludes));</div><div class="line">        param.setIncludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(includes));</div><div class="line">        List&lt;Term&gt; terms = <span class="keyword">this</span>.terms.stream().map(term -&gt; term.clone()).collect(Collectors.toList());</div><div class="line">        param.setTerms(terms);</div><div class="line">        <span class="keyword">return</span> param;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过<code>LinkedList</code> 来将条件都包装到一起 ,通过<code>LinkedHashSet</code>来包装要处理的字段</p>
<h4 id="由Param衍生出来的专门对查询-如分页-和更新参数的额外封装"><a href="#由Param衍生出来的专门对查询-如分页-和更新参数的额外封装" class="headerlink" title="由Param衍生出来的专门对查询(如分页)和更新参数的额外封装:"></a>由<code>Param</code>衍生出来的专门对查询(如分页)和更新参数的额外封装:</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp170319_133900.png" alt=""></p>
<h5 id="查询往往会涉及到排序，这里对排序先做下封装"><a href="#查询往往会涉及到排序，这里对排序先做下封装" class="headerlink" title="查询往往会涉及到排序，这里对排序先做下封装:"></a>查询往往会涉及到排序，这里对排序先做下封装:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 排序</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> <span class="keyword">extends</span> <span class="title">Column</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String order = <span class="string">"asc"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> QueryParam queryParam;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> order;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(String order)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.order = order;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sort</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sort</span><span class="params">(QueryParam queryParam, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.queryParam = queryParam;</div><div class="line">        setName(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryParam <span class="title">asc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.order = <span class="string">"asc"</span>;</div><div class="line">        <span class="keyword">return</span> queryParam;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryParam <span class="title">desc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.order = <span class="string">"desc"</span>;</div><div class="line">        <span class="keyword">return</span> queryParam;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Sort <span class="title">and</span><span class="params">(String field)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> queryParam.orderBy(field);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.valueOf(getName()).concat(order).hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.hashCode() == obj.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="QueryParam-排序字段同样LinkedList存储"><a href="#QueryParam-排序字段同样LinkedList存储" class="headerlink" title="QueryParam:   排序字段同样LinkedList存储"></a><code>QueryParam</code>:   排序字段同样<code>LinkedList</code>存储</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 浩 on 2016-01-16 0016.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryParam</span> <span class="keyword">extends</span> <span class="title">Param</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7941767360194797891L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否进行分页，默认为true</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> paging = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第几页 从0开始</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageIndex = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每页显示记录条数</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">25</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 排序字段</div><div class="line">     *</div><div class="line">     * <span class="doctag">@since</span> 1.0</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> List&lt;Sort&gt; sorts = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forUpdate = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryParam <span class="title">select</span><span class="params">(String... fields)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.includes(fields);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Sort <span class="title">orderBy</span><span class="params">(String column)</span> </span>&#123;</div><div class="line">        Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">this</span>, column);</div><div class="line">        sorts.add(sort);</div><div class="line">        <span class="keyword">return</span> sort;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;Q extends QueryParam&gt; <span class="function">Q <span class="title">doPaging</span><span class="params">(<span class="keyword">int</span> pageIndex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageIndex = pageIndex;</div><div class="line">        <span class="keyword">this</span>.paging = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> (Q) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;Q extends QueryParam&gt; <span class="function">Q <span class="title">doPaging</span><span class="params">(<span class="keyword">int</span> pageIndex, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageIndex = pageIndex;</div><div class="line">        <span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">        <span class="keyword">this</span>.paging = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> (Q) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;Q extends QueryParam&gt; <span class="function">Q <span class="title">rePaging</span><span class="params">(<span class="keyword">int</span> total)</span> </span>&#123;</div><div class="line">        paging = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">// 当前页没有数据后跳转到最后一页</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.getPageIndex() != <span class="number">0</span> &amp;&amp; (pageIndex * pageSize) &gt;= total) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = total / <span class="keyword">this</span>.getPageSize();</div><div class="line">            pageIndex = total % <span class="keyword">this</span>.getPageSize() == <span class="number">0</span> ? tmp - <span class="number">1</span> : tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (Q) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPaging</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> paging;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPaging</span><span class="params">(<span class="keyword">boolean</span> paging)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.paging = paging;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pageIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageIndex</span><span class="params">(<span class="keyword">int</span> pageIndex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageIndex = pageIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pageSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Sort&gt; <span class="title">getSorts</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sorts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSorts</span><span class="params">(List&lt;Sort&gt; sorts)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sorts = sorts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForUpdate</span><span class="params">(<span class="keyword">boolean</span> forUpdate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.forUpdate = forUpdate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> forUpdate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> QueryParam <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        QueryParam sqlParam = <span class="keyword">new</span> QueryParam();</div><div class="line">        sqlParam.setExcludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(excludes));</div><div class="line">        sqlParam.setIncludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(includes));</div><div class="line">        List&lt;Term&gt; terms = <span class="keyword">this</span>.terms.stream().map(Term::clone).collect(Collectors.toList());</div><div class="line">        sqlParam.setTerms(terms);</div><div class="line">        sqlParam.setPageIndex(pageIndex);</div><div class="line">        sqlParam.setPageSize(pageSize);</div><div class="line">        sqlParam.setPaging(paging);</div><div class="line">        sqlParam.setSorts(sorts);</div><div class="line">        sqlParam.setForUpdate(forUpdate);</div><div class="line">        <span class="keyword">return</span> sqlParam;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="UpdateParam"><a href="#UpdateParam" class="headerlink" title="UpdateParam:"></a><code>UpdateParam</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-4-19.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateParam</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Param</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> T data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateParam</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateParam</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;C extends UpdateParam&lt;T&gt;&gt; <span class="function">C <span class="title">set</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        <span class="keyword">return</span> (C) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UpdateParam <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        UpdateParam&lt;T&gt; param = <span class="keyword">new</span> UpdateParam&lt;&gt;();</div><div class="line">        param.setData(data);</div><div class="line">        param.setExcludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(excludes));</div><div class="line">        param.setIncludes(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(includes));</div><div class="line">        List&lt;Term&gt; terms = <span class="keyword">this</span>.terms.stream().map(Term::clone).collect(Collectors.toList());</div><div class="line">        param.setTerms(terms);</div><div class="line">        <span class="keyword">return</span> param;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="对更新数据map类型包装的数据做扩展"><a href="#对更新数据map类型包装的数据做扩展" class="headerlink" title="对更新数据map类型包装的数据做扩展:"></a>对更新数据<code>map</code>类型包装的数据做扩展:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-4-21.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateMapParam</span> <span class="keyword">extends</span> <span class="title">UpdateParam</span>&lt;<span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateMapParam</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> HashMap&lt;&gt;());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateMapParam</span><span class="params">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class="line">        setData(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> UpdateMapParam <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.getData().put(key, value);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="表插入数据的封装"><a href="#表插入数据的封装" class="headerlink" title="表插入数据的封装"></a>表插入数据的封装</h4><h6 id="InsertParam"><a href="#InsertParam" class="headerlink" title="InsertParam:"></a><code>InsertParam</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertParam</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> T data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InsertParam</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InsertParam</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> InsertParam&lt;T&gt; <span class="title">value</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">InsertParam&lt;T&gt; <span class="title">build</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InsertParam&lt;&gt;(data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和更新针对<code>map</code>数据类型衍生一样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.param;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertParamMapParam</span> <span class="keyword">extends</span> <span class="title">InsertParam</span>&lt;<span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">super</span>.getData() == <span class="keyword">null</span>) setData(<span class="keyword">new</span> HashMap&lt;&gt;());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> InsertParamMapParam <span class="title">value</span><span class="params">(String property, Object value)</span> </span>&#123;</div><div class="line">        getData().put(property, value);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> InsertParamMapParam <span class="title">values</span><span class="params">(Map&lt;String, Object&gt; values)</span> </span>&#123;</div><div class="line">        getData().putAll(values);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二，反映到表元素的元数据类MetaData"><a href="#二，反映到表元素的元数据类MetaData" class="headerlink" title="二，反映到表元素的元数据类MetaData"></a>二，反映到表元素的元数据类MetaData</h3><h4 id="PO转表元素数据"><a href="#PO转表元素数据" class="headerlink" title="PO转表元素数据"></a>PO转表元素数据</h4><h5 id="OptionConverter-选项映射器"><a href="#OptionConverter-选项映射器" class="headerlink" title="OptionConverter:选项映射器"></a><code>OptionConverter</code>:选项映射器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 选项映射器,当一个字段持有映射器时.</div><div class="line"> * &lt;ul&gt;</div><div class="line"> * &lt;li&gt;</div><div class="line"> * 在查询时,会追加一个名为&#123;<span class="doctag">@link</span> OptionConverter#getFieldName()&#125;的字段为&#123;<span class="doctag">@link</span> OptionConverter#converterValue(Object)&#125; 的值</div><div class="line"> * &lt;/li&gt;</div><div class="line"> * &lt;li&gt;</div><div class="line"> * 在修改或者插入时,验证器会首先通过 &#123;<span class="doctag">@link</span> OptionConverter#converterData(Object)&#125;来获取一个结果.</div><div class="line"> * 如果返回null.则调用&#123;<span class="doctag">@link</span> OptionConverter#converterValue(Object)&#125; ,并将值放入数据库.</div><div class="line"> * 如果继续返回null,则会抛出验证器异常,提示值不再选项范围中</div><div class="line"> * &lt;/li&gt;</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> * Created by zhouhao on 16-6-4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OptionConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取所有选项</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 选项</div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">getOptions</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取转换后的字段名称</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 转换后的字段名称</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">getFieldName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将提交的数据,转换为目标数据</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> value 提交的数据</div><div class="line">     * <span class="doctag">@return</span> 转换结果</div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">converterData</span><span class="params">(Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将数据库的数据,转换为目标数据</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> data 数据库数据</div><div class="line">     * <span class="doctag">@return</span> 转换结果</div><div class="line">     */</div><div class="line">    <span class="function">Object <span class="title">converterValue</span><span class="params">(Object data)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="PropertyWrapper-属性包装"><a href="#PropertyWrapper-属性包装" class="headerlink" title="PropertyWrapper:属性包装"></a><code>PropertyWrapper</code>:属性包装</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertyWrapper</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">toInt</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">toDouble</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTrue</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Date <span class="title">toDate</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Date <span class="title">toDate</span><span class="params">(String format)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">toMap</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Map&gt; <span class="title">toList</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">toBean</span><span class="params">(Class&lt;T&gt; type)</span></span>;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toBeanList</span><span class="params">(Class&lt;T&gt; type)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNullOrEmpty</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">valueTypeOf</span><span class="params">(Class&lt;?&gt; type)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对<code>PropertyWrapper</code>的简单实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> org.hsweb.commons.ClassUtils;</div><div class="line"><span class="keyword">import</span> org.hsweb.commons.DateTimeUtils;</div><div class="line"><span class="keyword">import</span> org.hsweb.commons.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zhouhao on 16-6-4.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePropertyWrapper</span> <span class="keyword">implements</span> <span class="title">PropertyWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimplePropertyWrapper</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">toInt</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.toInt(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">toDouble</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.toDouble(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.isTrue(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">toDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) <span class="keyword">return</span> ((Date) value);</div><div class="line">        <span class="keyword">return</span> DateTimeUtils.formatUnknownString2Date(toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">toDate</span><span class="params">(String format)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Date) <span class="keyword">return</span> ((Date) value);</div><div class="line">        <span class="keyword">return</span> DateTimeUtils.formatDateString(toString(), format);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">toBean</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (valueTypeOf(type)) <span class="keyword">return</span> ((T) getValue());</div><div class="line">        <span class="keyword">return</span> JSON.parseObject(toString(), type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">toList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toBeanList(Map.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">toMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> toBean(Map.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toBeanList</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getValue() <span class="keyword">instanceof</span> List) <span class="keyword">return</span> ((List) getValue());</div><div class="line">        <span class="keyword">return</span> JSON.parseArray(toString(), type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNullOrEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.isNullOrEmpty(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valueTypeOf</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> ClassUtils.instanceOf(value.getClass(), type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.valueOf(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="ValueConverter-数据转换"><a href="#ValueConverter-数据转换" class="headerlink" title="ValueConverter:数据转换"></a><code>ValueConverter</code>:数据转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValueConverter</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">getData</span><span class="params">(Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Object <span class="title">getValue</span><span class="params">(Object data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由其所衍生的类:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170319_151726.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170319_150424.png" alt=""></p>
<p>这里只看其中一两个即可:</p>
<h6 id="ClobValueConverter"><a href="#ClobValueConverter" class="headerlink" title="ClobValueConverter:"></a><code>ClobValueConverter</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.converter;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValueConverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Reader;</div><div class="line"><span class="keyword">import</span> java.sql.Clob;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClobValueConverter</span> <span class="keyword">implements</span> <span class="title">ValueConverter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Clob) &#123;</div><div class="line">            Clob clobData = ((Clob) data);</div><div class="line">            <span class="keyword">try</span> (Reader reader = clobData.getCharacterStream()) &#123;</div><div class="line">                <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[(<span class="keyword">int</span>) clobData.length()];</div><div class="line">                reader.read(chars);</div><div class="line">                data = <span class="keyword">new</span> String(chars);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="BooleanValueConverter"><a href="#BooleanValueConverter" class="headerlink" title="BooleanValueConverter:"></a><code>BooleanValueConverter</code>:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.rdb.meta.converter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValueConverter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooleanValueConverter</span> <span class="keyword">implements</span> <span class="title">ValueConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == data) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Boolean) <span class="keyword">return</span> data;</div><div class="line">        <span class="keyword">return</span> <span class="string">"1"</span>.equals(String.valueOf(data)) || <span class="string">"true"</span>.equals(String.valueOf(data));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="对象包装ObjectWrapper"><a href="#对象包装ObjectWrapper" class="headerlink" title="对象包装ObjectWrapper:"></a>对象包装<code>ObjectWrapper</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright 2016 http://github.com/hs-web</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *     http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对象包装器，在执行查询时，通过包装器对查询结果进行初始化</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> * <span class="doctag">@since</span> 1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObjectWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行初始化,在sql执行后,包装结果前,将调用此方法,传入查询的列</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> columns 列集合</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">(List&lt;String&gt; columns)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &lt;C extends T&gt; <span class="function">Class&lt;C&gt; <span class="title">getType</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建对象实例</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 对象实例</div><div class="line">     */</div><div class="line">    <span class="function">T <span class="title">newInstance</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向实例中填充一个属性值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> instance 实例对象</div><div class="line">     * <span class="doctag">@param</span> index    当前实例的索引</div><div class="line">     * <span class="doctag">@param</span> attr     属性名称</div><div class="line">     * <span class="doctag">@param</span> value    属性值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wrapper</span><span class="params">(T instance, <span class="keyword">int</span> index, String attr, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当一个实例被填充完成后调用，已进行其他操作</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> instance 实例对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">done</span><span class="params">(T instance)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其衍生的类:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp170319_152320.png" alt=""></p>
<h5 id="触发-Trigger"><a href="#触发-Trigger" class="headerlink" title="触发:Trigger:"></a>触发:<code>Trigger</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Trigger</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Map&lt;String, Object&gt; context)</span></span>;</div><div class="line"></div><div class="line">    String select_before       = <span class="string">"select.before"</span>;</div><div class="line">    String select_wrapper_each = <span class="string">"select.wrapper.each"</span>;</div><div class="line">    String select_wrapper_done = <span class="string">"select.wrapper.done"</span>;</div><div class="line">    String select_done         = <span class="string">"select.done"</span>;</div><div class="line">    String insert_before       = <span class="string">"insert.before"</span>;</div><div class="line">    String insert_done         = <span class="string">"insert.done"</span>;</div><div class="line">    String update_before       = <span class="string">"update.before"</span>;</div><div class="line">    String update_done         = <span class="string">"update.done"</span>;</div><div class="line">    String delete_before       = <span class="string">"delete.before"</span>;</div><div class="line">    String delete_done         = <span class="string">"delete.done"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="定义TableMetaData"><a href="#定义TableMetaData" class="headerlink" title="定义TableMetaData"></a>定义<code>TableMetaData</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.PropertyWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.Trigger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> zhouhao</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TableMetaData</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getComment</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getAlias</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends DatabaseMetaData&gt; <span class="function">T <span class="title">getDatabaseMetaData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends ColumnMetaData&gt; <span class="function">Set&lt;T&gt; <span class="title">getColumns</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends ColumnMetaData&gt; <span class="function">T <span class="title">getColumn</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends ColumnMetaData&gt; <span class="function">T <span class="title">findColumn</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    &lt;T&gt; <span class="function">ObjectWrapper&lt;T&gt; <span class="title">getObjectWrapper</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">getProperty</span><span class="params">(String property)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">getProperty</span><span class="params">(String property, Object defaultValue)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">setProperty</span><span class="params">(String property, Object value)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(String name, Trigger trigger)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(String name, Map&lt;String, Object&gt; triggerContext)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">triggerIsSupport</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>里面包含有表名字，注释，别名，然后就是表所属数据库的元数据信息，表包含列的元数据信息，以及对象的包装，属性的包装，见上面对象包装，属性的包装，以及通过<code>on()</code>方法对<code>Trigger</code>使用</p>
<h5 id="定义DatabaseMetaData"><a href="#定义DatabaseMetaData" class="headerlink" title="定义DatabaseMetaData"></a>定义<code>DatabaseMetaData</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapperFactory;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValidatorFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DatabaseMetaData</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">ObjectWrapperFactory <span class="title">getObjectWrapperFactory</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">ValidatorFactory <span class="title">getValidatorFactory</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>个人认为，其实这里表达的就是衔接的意思，<code>ObjectWrapper</code>和<code>TableMetaData</code>信息的对应(等以后有新的理解了再来修改的)</p>
<p><code>ValidatorFactory</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.TableMetaData;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidatorFactory</span> </span>&#123;</div><div class="line">    <span class="function">Validator <span class="title">createValidator</span><span class="params">(TableMetaData tableMetaData)</span></span>;<span class="comment">//源码里暂时未使用到该接口方法定义</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Validator</code>其实是对<code>INSERT, UPDATE</code>操作和相应数据进行下验证</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Validator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(Object data, Operation operation)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">enum</span> Operation &#123;</div><div class="line">        INSERT, UPDATE</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="定义ColumnMetaData"><a href="#定义ColumnMetaData" class="headerlink" title="定义ColumnMetaData"></a>定义<code>ColumnMetaData</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.OptionConverter;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.PropertyWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValueConverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ColumnMetaData</span> <span class="keyword">extends</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getAlias</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">getComment</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Class <span class="title">getJavaType</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">ValueConverter <span class="title">getValueConverter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">OptionConverter <span class="title">getOptionConverter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Set&lt;String&gt; <span class="title">getValidator</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">getProperty</span><span class="params">(String property)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">getProperty</span><span class="params">(String property, Object defaultValue)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">PropertyWrapper <span class="title">setProperty</span><span class="params">(String property, Object value)</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends ColumnMetaData&gt; <span class="function">T <span class="title">clone</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>里面包含有表名字，注释，别名，然后就是列所属表的元数据信息，表包含列的元数据信息，以及值的转换，选项的转换，属性的包装，见上面数据转换，属性的包装小节，以及通过<code>clone()</code>方法返回相应的<code>ColumnMetaData</code>的实现</p>
<h5 id="TableMetaDataStorage定义"><a href="#TableMetaDataStorage定义" class="headerlink" title="TableMetaDataStorage定义"></a><code>TableMetaDataStorage</code>定义</h5><p>以上三个MetaData元素定义完之后，通过<code>TableMetaDataStorage</code>来对表元数据做存储方面的一些操作:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta.storage;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.TableMetaData;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TableMetaDataStorage</span> </span>&#123;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">Set&lt;T&gt; <span class="title">getAllTableMetaData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">(String nameOrAlias)</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">removeTableMeta</span><span class="params">(String nameOrAlias)</span></span>;</div><div class="line"></div><div class="line">    &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">putTableMetaData</span><span class="params">(T table)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为本就是<code>key-value</code>形式保存的，那么很自然就衍生成map类型的实现类: 都是一些map方面的操作，就不多说了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta.storage;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.TableMetaData;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTableMetaDataStorage</span> <span class="keyword">implements</span> <span class="title">TableMetaDataStorage</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, TableMetaData&gt; nameTableMetaDataStorage  = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, TableMetaData&gt; aliasTableMetaDataStorage = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">Set&lt;T&gt; <span class="title">getAllTableMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;T&gt; all = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line">        all.addAll((Set) nameTableMetaDataStorage.values());</div><div class="line">        <span class="keyword">return</span> all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">(String nameOrAlias)</span> </span>&#123;</div><div class="line">        T old = (T) nameTableMetaDataStorage.get(nameOrAlias);</div><div class="line">        <span class="keyword">if</span> (old == <span class="keyword">null</span>) old = (T) aliasTableMetaDataStorage.get(nameOrAlias);</div><div class="line">        <span class="keyword">return</span> old;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">removeTableMeta</span><span class="params">(String nameOrAlias)</span> </span>&#123;</div><div class="line">        T old = (T) nameTableMetaDataStorage.remove(nameOrAlias);</div><div class="line">        T old2 = (T) aliasTableMetaDataStorage.remove(nameOrAlias);</div><div class="line">        <span class="keyword">return</span> old != <span class="keyword">null</span> ? old : old2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">putTableMetaData</span><span class="params">(T table)</span> </span>&#123;</div><div class="line">        nameTableMetaDataStorage.put(table.getName(), table);</div><div class="line">        <span class="keyword">if</span> (!table.getName().equals(table.getAlias())) &#123;</div><div class="line">            nameTableMetaDataStorage.put(table.getAlias(), table);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> table;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        nameTableMetaDataStorage.clear();</div><div class="line">        aliasTableMetaDataStorage.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="对上面定义的三个元数据类型接口的抽象实现"><a href="#对上面定义的三个元数据类型接口的抽象实现" class="headerlink" title="对上面定义的三个元数据类型接口的抽象实现:"></a>对上面定义的三个元数据类型接口的抽象实现:</h5><h6 id="对于DatabaseMetaData的初步通用实现"><a href="#对于DatabaseMetaData的初步通用实现" class="headerlink" title="对于DatabaseMetaData的初步通用实现:"></a>对于<code>DatabaseMetaData</code>的初步通用实现:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ObjectWrapperFactory;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValidatorFactory;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.storage.MapTableMetaDataStorage;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.meta.storage.TableMetaDataStorage;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDatabaseMetaData</span> <span class="keyword">implements</span> <span class="title">DatabaseMetaData</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> ObjectWrapperFactory objectWrapperFactory;</div><div class="line">    <span class="keyword">protected</span> ValidatorFactory     validatorFactory;</div><div class="line">    <span class="keyword">protected</span> TableMetaDataStorage tableMetaDataStorage=<span class="keyword">new</span> MapTableMetaDataStorage();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tableMetaDataStorage.getTableMetaData(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ObjectWrapperFactory <span class="title">getObjectWrapperFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objectWrapperFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ValidatorFactory <span class="title">getValidatorFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> validatorFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectWrapperFactory</span><span class="params">(ObjectWrapperFactory objectWrapperFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.objectWrapperFactory = objectWrapperFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidatorFactory</span><span class="params">(ValidatorFactory validatorFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.validatorFactory = validatorFactory;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTableMetaDataStorage</span><span class="params">(TableMetaDataStorage tableMetaDataStorage)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tableMetaDataStorage = tableMetaDataStorage;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="对于TableMetaData的初步通用实现"><a href="#对于TableMetaData的初步通用实现" class="headerlink" title="对于TableMetaData的初步通用实现:"></a>对于<code>TableMetaData</code>的初步通用实现:</h6><p><code>properties</code> <code>triggerBase</code>都是用map<string,t>来进行相应包装</string,t></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTableMetaData</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">AbstractColumnMetaData</span>&gt; <span class="keyword">implements</span> <span class="title">TableMetaData</span> </span>&#123;</div><div class="line">    <span class="comment">//表名称</span></div><div class="line">    <span class="keyword">protected</span> String               name                   = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//表别名,如果指定了别名,查询结果将使用别名进行封装</span></div><div class="line">    <span class="keyword">protected</span> String               alias                  = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//备注</span></div><div class="line">    <span class="keyword">protected</span> String               comment                = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//表字段</span></div><div class="line">    <span class="keyword">protected</span> Map&lt;String, C&gt;       columnMetaDataMap      = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, C&gt;       aliasColumnMetaDataMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Validator            validator              = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">protected</span> ObjectWrapper        objectWrapper          = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt;  properties             = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, Trigger&gt; triggerBase            = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">ObjectWrapper&lt;T&gt; <span class="title">getObjectWrapper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> objectWrapper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectWrapper</span><span class="params">(ObjectWrapper objectWrapper)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.objectWrapper = objectWrapper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAlias</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (alias == <span class="keyword">null</span>) alias = name;</div><div class="line">        <span class="keyword">return</span> alias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T extends AbstractTableMetaData&lt;C&gt;&gt; <span class="function">T <span class="title">addColumn</span><span class="params">(C columnMetaData)</span> </span>&#123;</div><div class="line">        columnMetaData.setTableMetaData(<span class="keyword">this</span>);</div><div class="line">        columnMetaDataMap.put(columnMetaData.getName(), columnMetaData);</div><div class="line">        <span class="keyword">if</span> (!columnMetaData.getName().equals(columnMetaData.getAlias()))</div><div class="line">            aliasColumnMetaDataMap.put(columnMetaData.getAlias(), columnMetaData);</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlias</span><span class="params">(String alias)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.alias = alias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(String triggerName, Trigger trigger)</span> </span>&#123;</div><div class="line">        triggerBase.put(triggerName, trigger);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">(String triggerName, Map&lt;String, Object&gt; context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (triggerIsSupport(triggerName)) &#123;</div><div class="line">            Trigger trigger = triggerBase.get(triggerName);</div><div class="line">            trigger.execute(context);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;C&gt; <span class="title">getColumns</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinkedHashSet&lt;&gt;(columnMetaDataMap.values());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeColumn</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        columnMetaDataMap.remove(name);</div><div class="line">        aliasColumnMetaDataMap.remove(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">triggerIsSupport</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> triggerBase.containsKey(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.get(name));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">getProperty</span><span class="params">(String name, Object defaultValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.getOrDefault(name, defaultValue));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">removeProperty</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.remove(name));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">setProperty</span><span class="params">(String property, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.put(property, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> C <span class="title">findColumn</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getComment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> comment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> C <span class="title">getColumn</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        C metaData = columnMetaDataMap.get(name);</div><div class="line">        <span class="keyword">if</span> (metaData == <span class="keyword">null</span>) metaData = aliasColumnMetaDataMap.get(name);</div><div class="line">        <span class="keyword">return</span> metaData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComment</span><span class="params">(String comment)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.comment = comment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Map&lt;String, Object&gt; properties)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.properties = properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> validator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidator</span><span class="params">(Validator validator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.validator = validator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name + <span class="string">" ["</span> + alias + <span class="string">"]"</span> + <span class="string">"("</span> + comment + <span class="string">")"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="对于ColumnMetaData的初步通用实现"><a href="#对于ColumnMetaData的初步通用实现" class="headerlink" title="对于ColumnMetaData的初步通用实现:"></a>对于<code>ColumnMetaData</code>的初步通用实现:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.hsweb.ezorm.core.meta;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.OptionConverter;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.PropertyWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.SimplePropertyWrapper;</div><div class="line"><span class="keyword">import</span> org.hsweb.ezorm.core.ValueConverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractColumnMetaData</span> <span class="keyword">implements</span> <span class="title">ColumnMetaData</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> String          name;</div><div class="line">    <span class="keyword">protected</span> String          alias;</div><div class="line">    <span class="keyword">protected</span> String          comment;</div><div class="line">    <span class="keyword">protected</span> Class           javaType;</div><div class="line">    <span class="keyword">protected</span> TableMetaData   tableMetaData;</div><div class="line">    <span class="keyword">protected</span> OptionConverter optionConverter;</div><div class="line">    <span class="keyword">protected</span> ValueConverter  valueConverter;</div><div class="line">    <span class="keyword">protected</span> Set&lt;String&gt;     validator;</div><div class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt; properties = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAlias</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (alias == <span class="keyword">null</span>) alias = name;</div><div class="line">        <span class="keyword">return</span> alias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getComment</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (comment == <span class="keyword">null</span>) comment = <span class="string">""</span>;</div><div class="line">        <span class="keyword">return</span> comment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">getJavaType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> javaType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> validator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends TableMetaData&gt; <span class="function">T <span class="title">getTableMetaData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) tableMetaData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ValueConverter <span class="title">getValueConverter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> valueConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OptionConverter <span class="title">getOptionConverter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> optionConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">getProperty</span><span class="params">(String property)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.get(property));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">getProperty</span><span class="params">(String property, Object defaultValue)</span> </span>&#123;</div><div class="line">        Object value = properties.get(property);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(value == <span class="keyword">null</span> ? defaultValue : value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertyWrapper <span class="title">setProperty</span><span class="params">(String property, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimplePropertyWrapper(properties.put(property, value));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlias</span><span class="params">(String alias)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.alias = alias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComment</span><span class="params">(String comment)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.comment = comment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJavaType</span><span class="params">(Class javaType)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.javaType = javaType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTableMetaData</span><span class="params">(TableMetaData tableMetaData)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tableMetaData = tableMetaData;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOptionConverter</span><span class="params">(OptionConverter optionConverter)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.optionConverter = optionConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValueConverter</span><span class="params">(ValueConverter valueConverter)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.valueConverter = valueConverter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValidator</span><span class="params">(Set&lt;String&gt; validator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.validator = validator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Map&lt;String, Object&gt; properties)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.properties = properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractColumnMetaData <span class="title">clone</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因篇幅有点长，增删改查的相关操作在下一篇中说</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hsweb的系列学习——hsweb-easy-orm分析-上&quot;&gt;&lt;a href=&quot;#hsweb的系列学习——hsweb-easy-orm分析-上&quot; class=&quot;headerlink&quot; title=&quot;hsweb的系列学习——hsweb-easy-orm分析  上&quot;&gt;&lt;/a&gt;hsweb的系列学习——hsweb-easy-orm分析  上&lt;/h1&gt;&lt;h2 id=&quot;对于此orm框架的封装，首先要看的便是-hsweb-easy-orm-core&quot;&gt;&lt;a href=&quot;#对于此orm框架的封装，首先要看的便是-hsweb-easy-orm-core&quot; class=&quot;headerlink&quot; title=&quot;对于此orm框架的封装，首先要看的便是:hsweb-easy-orm-core&quot;&gt;&lt;/a&gt;对于此orm框架的封装，首先要看的便是:&lt;code&gt;hsweb-easy-orm-core&lt;/code&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;整体思路:因为是为动态表单设计的orm框架，所以要有为映射包装的PO类和反映到表元素的元数据类MetaData，&lt;/p&gt;
&lt;p&gt;以及对这些bean进行操作的各种周边(最多的也就是curd的细节分拆)&lt;br&gt;
    
    </summary>
    
      <category term="hsweb" scheme="https://muyinchen.github.io/categories/hsweb/"/>
    
    
      <category term="hsweb" scheme="https://muyinchen.github.io/tags/hsweb/"/>
    
  </entry>
  
  <entry>
    <title>一个轻量级分布式 RPC 框架 上</title>
    <link href="https://muyinchen.github.io/2017/03/16/%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%88%86%E5%B8%83%E5%BC%8F%20RPC%20%E6%A1%86%E6%9E%B6%20%E4%B8%8A/"/>
    <id>https://muyinchen.github.io/2017/03/16/轻量级分布式 RPC 框架 上/</id>
    <published>2017-03-16T11:05:26.277Z</published>
    <updated>2017-03-26T10:19:05.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个轻量级分布式-RPC-框架-上"><a href="#一个轻量级分布式-RPC-框架-上" class="headerlink" title="一个轻量级分布式 RPC 框架 上"></a>一个轻量级分布式 RPC 框架 上</h1><p>RPC，即 Remote Procedure Call（远程过程调用），说得通俗一点就是：调用远程计算机上的服务，就像调用本地服务一样。</p>
<p>具体的介绍就不多说了，通过搜索引擎可以获得很多这方面的介绍。</p>
<p>这里推荐一篇文章:<a href="https://my.oschina.net/huangyong/blog/361751" target="_blank" rel="external">https://my.oschina.net/huangyong/blog/361751</a></p>
<p>对于架构的设计，说些自己的看法，不想去说那么抽象，拿一个人来讲:</p>
<p>首先，人体的组成必须要由骨架，这就是表示项目应该有一个总体的架构图。</p>
<p>然后，要有各个器官来各司其职，这就是各个模块了。</p>
<p>再者，各个器官之间要交流，那就需要有个中间件来承载的，这里就是血管，而血液就是信息承载体，里面包含了各种器官需要的物质和生产出的物     质，血液在代码中的体现可能是一个<code>ConcurrentMap</code>。</p>
<p>最后，专注于各个模块的实现，所用的逻辑和技术具体问题具体再分析处理</p>
<a id="more"></a>
<p>首先对此框架的设计图:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/rpc.jpg" alt="图1"></p>
<p>​                                                        <code>图1</code>                            </p>
<p>本文将为您揭晓开发轻量级分布式 <code>RPC</code>框架的具体过程，该框架基于 <code>TCP</code>协议，提供了<code>NIO</code>特性，提供高效的序列化方式，同时也具备服务注册与发现的能力。</p>
<p>根据以上技术需求，我们可使用如下技术选型：</p>
<ol>
<li><code>Spring</code>:   它是最强大的依赖注入框架，也是业界的权威标准。</li>
<li><code>Netty</code>:    它使 <code>NIO</code> 编程更加容易，屏蔽了 Java 底层的 NIO 细节。</li>
<li><code>Kryo</code>:      一个快速高效的Java序列化框架，旨在提供快速、高效和易用的API。无论文件、数据库或网络数据Kryo都可以随时完成序列化</li>
<li><code>ZooKeeper</code>:   提供服务注册与发现功能，开发分布式系统的必备选择，同时它也具备天生的集群能力。</li>
</ol>
<p>Netty 请自己找文章或书学习的，推荐<code>Netty.in.Action</code></p>
<h2 id="编写核心模块"><a href="#编写核心模块" class="headerlink" title="编写核心模块"></a>编写核心模块</h2><p>一个模块下面也是可以根据很多细分的小模块流程来做的</p>
<h3 id="1，编写通用模块"><a href="#1，编写通用模块" class="headerlink" title="1，编写通用模块"></a>1，编写通用模块</h3><p>因为用的是netty，所以对于netty的编程主要考虑几个方面，编解码处理，核心逻辑处理类。编解码处理就涉及到了序列化处理和所要处理的对象，</p>
<p>我们所要请求的包括方法的名称参数和方法所属类，设计上，以一个id为唯一标志，服务端处理完返回的结果同样携带此id，这样就可以很轻松取到了，</p>
<p>这也就是血液所携带的信息的体现。</p>
<h5 id="设计请求和回复类"><a href="#设计请求和回复类" class="headerlink" title="设计请求和回复类:"></a>设计请求和回复类:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.protocol;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestId;</div><div class="line">    <span class="keyword">private</span> Class&lt;?&gt; clazz;</div><div class="line">    <span class="keyword">private</span> String method;</div><div class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] parameterTypes;</div><div class="line">    <span class="keyword">private</span> Object[] params;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestTime;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.protocol;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.Getter;</div><div class="line"><span class="keyword">import</span> lombok.Setter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> requestId;</div><div class="line">    <span class="keyword">private</span> Object response;</div><div class="line">    <span class="keyword">private</span> Throwable throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于<code>lombok</code>,请看<a href="https://github.com/muyinchen/woker/blob/master/rpc%E6%A1%86%E6%9E%B6%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9/%E9%80%9A%E8%BF%87Lombok%E6%9D%A5%E7%AE%80%E5%8C%96%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81.md" target="_blank" rel="external">通过Lombok来简化你的代码</a></p>
<h5 id="序列化处理类"><a href="#序列化处理类" class="headerlink" title="序列化处理类"></a>序列化处理类</h5><p>先创建一个接口，方便以后有其他序列化实现，这里仅使用<code>Kryo</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.serializer;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializer</span> </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] serialize(Object obj);</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体实现步骤很简单，如下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.serializer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</div><div class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</div><div class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KryoSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object obj) &#123;</div><div class="line">        Kryo kryo=<span class="keyword">new</span> Kryo();</div><div class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        Output output = <span class="keyword">new</span> Output(byteArrayOutputStream);</div><div class="line">        kryo.writeClassAndObject(output,obj);</div><div class="line">        output.close();</div><div class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</div><div class="line">        Kryo kryo=<span class="keyword">new</span> Kryo();</div><div class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</div><div class="line">        Input input = <span class="keyword">new</span> Input(byteArrayInputStream);</div><div class="line">        input.close();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (T) kryo.readClassAndObject(input);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="编解码处理类"><a href="#编解码处理类" class="headerlink" title="编解码处理类"></a>编解码处理类</h5><h6 id="编码处理"><a href="#编码处理" class="headerlink" title="编码处理:"></a>编码处理:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.protocol;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.serializer.KryoSerializer;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.serializer.Serializer;</div><div class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.MessageToByteEncoder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Serializer serializer = <span class="keyword">new</span> KryoSerializer();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, Object msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] bytes = serializer.serialize(msg);</div><div class="line">        <span class="keyword">int</span> length = bytes.length;</div><div class="line">        out.writeInt(length);</div><div class="line">        out.writeBytes(bytes);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="解码处理"><a href="#解码处理" class="headerlink" title="解码处理"></a>解码处理</h6><p>注意点请看注释，都是一贯套路 具体关于此类的文档总结:<a href="https://github.com/muyinchen/woker/blob/master/rpc%E6%A1%86%E6%9E%B6%E6%B6%89%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9/netty%20%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%85%E3%80%81%E7%BB%84%E5%8C%85%E3%80%81%E7%B2%98%E5%8C%85%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6(%E9%83%A8%E5%88%86" target="_blank" rel="external">netty 数据分包、组包、粘包处理机制(部分)</a>.md)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.protocol;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.serializer.KryoSerializer;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.serializer.Serializer;</div><div class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.handler.codec.LengthFieldBasedFrameDecoder;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="comment">//常用的处理大数据分包传输问题的解决类:LengthFieldBasedFrameDecoder</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcDecoder</span> <span class="keyword">extends</span> <span class="title">LengthFieldBasedFrameDecoder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RpcDecoder.class);</div><div class="line">    <span class="keyword">private</span> Serializer serializer = <span class="keyword">new</span> KryoSerializer();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcDecoder</span><span class="params">(<span class="keyword">int</span> maxFrameLength)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(maxFrameLength, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ByteBuf decode = (ByteBuf) <span class="keyword">super</span>.decode(ctx, in);</div><div class="line">        <span class="keyword">if</span> (decode != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> byteLength = decode.readableBytes();</div><div class="line">            <span class="keyword">byte</span>[] byteHolder = <span class="keyword">new</span> <span class="keyword">byte</span>[byteLength];</div><div class="line">            decode.readBytes(byteHolder);</div><div class="line">            Object deserialize = serializer.deserialize(byteHolder);</div><div class="line">            <span class="keyword">return</span> deserialize;</div><div class="line">        &#125;</div><div class="line">        LOGGER.debug(<span class="string">"Decoder Result is null"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-编写服务端模块"><a href="#2-编写服务端模块" class="headerlink" title="2,编写服务端模块"></a>2,编写服务端模块</h3><h6 id="首先搞定ip和端口的获取"><a href="#首先搞定ip和端口的获取" class="headerlink" title="首先搞定ip和端口的获取"></a>首先搞定ip和端口的获取</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.net.UnknownHostException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * IP and Port Helper for RPC</div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 此处实现的并不到位，暂时就这样处理的</div><div class="line">     * 用Java获取本机IP地址，需要处理：</div><div class="line">     *1. 多块网卡。</div><div class="line">     *2. 排除loopback设备、虚拟网卡</div><div class="line">     *看似简单的代码，写起来还是要小心一些的。</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLocalIp</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> InetAddress.getLocalHost().getHostAddress();</div><div class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="服务端对客户端过来方法请求-的处理逻辑"><a href="#服务端对客户端过来方法请求-的处理逻辑" class="headerlink" title="服务端对客户端过来方法请求 的处理逻辑:"></a>服务端对客户端过来方法请求 的处理逻辑:</h6><p>此处的service代码里已经解释过，就是服务端所注册的接口(其实也不一定是接口，对外可能是restful的一个地址)的实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.server;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Request;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.Response;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">Request</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RpcServerHandler.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object service;</div><div class="line"></div><div class="line">    <span class="comment">//此处传入service的实现类对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcServerHandler</span><span class="params">(Object service)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.service = service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, Request msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        String methodName = msg.getMethod();</div><div class="line">        Object[] params = msg.getParams();</div><div class="line">        Class&lt;?&gt;[] parameterTypes = msg.getParameterTypes();</div><div class="line">        <span class="keyword">long</span> requestId = msg.getRequestId();</div><div class="line">        <span class="comment">//通过反射来获取客户端所要调用的方法并执行</span></div><div class="line">        Method method = service.getClass().getDeclaredMethod(methodName, parameterTypes);</div><div class="line">        method.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object invoke = method.invoke(service, params);</div><div class="line">        Response response = <span class="keyword">new</span> Response();</div><div class="line">        response.setRequestId(requestId);</div><div class="line">        response.setResponse(invoke);</div><div class="line">        channelHandlerContext.pipeline().writeAndFlush(response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.error(<span class="string">"Exception caught on &#123;&#125;, "</span>, ctx.channel(), cause);</div><div class="line">        ctx.channel().close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="定义服务接口"><a href="#定义服务接口" class="headerlink" title="定义服务接口:"></a>定义服务接口:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.server;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Server</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="服务端主逻辑的实现"><a href="#服务端主逻辑的实现" class="headerlink" title="服务端主逻辑的实现:"></a>服务端主逻辑的实现:</h6><ol>
<li><p>通过Curator来操作zookeeper的节点，具体的使用请看<a href="http://ifeve.com/zookeeper-leader/" target="_blank" rel="external">跟着实例学习ZooKeeper的用法</a></p>
</li>
<li><p>服务端起起来，具体看下面<code>start()</code>代码，都是<code>netty</code>的格式化用法，将之前的准备应用到此</p>
</li>
<li><p>然后调用<code>registerService()</code>方面实现注册逻辑:</p>
<p>​    获取所连接<code>zk</code>地址;</p>
<p>​    获取服务端本地<code>ip</code>;</p>
<p>​    通过<code>Curator</code>创建一个<code>zk</code>的客户端;</p>
<p>​    添加注册基础服务节点    ;</p>
</li>
<li><p><code>关停相关服务的逻辑</code>,具体看下面源码:</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nia.rpc.core.server;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.RpcDecoder;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.protocol.RpcEncoder;</div><div class="line"><span class="keyword">import</span> com.nia.rpc.core.utils.NetUtils;</div><div class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</div><div class="line"><span class="keyword">import</span> io.netty.channel.Channel;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</div><div class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</div><div class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</div><div class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</div><div class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</div><div class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</div><div class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</div><div class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.nia.rpc.core.utils.Constant.ZK_DATA_PATH;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by Auser on 2017/2/17.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerImpl</span> <span class="keyword">implements</span> <span class="title">Server</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServerImpl.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String localIp;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> Channel channel;</div><div class="line">    <span class="keyword">private</span> Object serviceImpl;</div><div class="line">    <span class="keyword">private</span> String serviceName;</div><div class="line">    <span class="keyword">private</span> String zkConn;</div><div class="line">    <span class="keyword">private</span> String serviceRegisterPath;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">    <span class="keyword">private</span> EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CuratorFramework curatorFramework;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerImpl</span><span class="params">(<span class="keyword">int</span> port, Object serviceImpl, String serviceName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">        <span class="keyword">this</span>.serviceImpl = serviceImpl;</div><div class="line">        <span class="keyword">this</span>.serviceName = serviceName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerImpl</span><span class="params">(<span class="keyword">int</span> port, Object serviceImpl, String serviceName, String zkConn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">        <span class="keyword">this</span>.serviceImpl = serviceImpl;</div><div class="line">        <span class="keyword">this</span>.serviceName = serviceName;</div><div class="line">        <span class="keyword">this</span>.zkConn = zkConn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">        serverBootstrap.group(bossGroup,workerGroup)</div><div class="line">                       .channel(NioServerSocketChannel.class)</div><div class="line">                       .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</div><div class="line">                           <span class="meta">@Override</span></div><div class="line">                           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                               socketChannel.pipeline()</div><div class="line">                                            .addLast(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</div><div class="line">                                            .addLast(<span class="keyword">new</span> RpcDecoder(<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>))</div><div class="line">                                            .addLast(<span class="keyword">new</span> RpcEncoder())</div><div class="line">                                            .addLast(<span class="keyword">new</span> RpcServerHandler(serviceImpl));</div><div class="line">                           &#125;</div><div class="line">                       &#125;);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//调用bind等待客户端来连接</span></div><div class="line">            ChannelFuture future = serverBootstrap.bind(port).sync();</div><div class="line">            <span class="comment">//接着注册服务</span></div><div class="line">            registerService();</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"Server Started At &#123;&#125;"</span>, port);</div><div class="line">            started = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">this</span>.channel = future.channel();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">()</span> </span>&#123;</div><div class="line">         zkConn = getZkConn();</div><div class="line">         localIp = NetUtils.getLocalIp();</div><div class="line">        String serviceIp=localIp+<span class="string">":"</span>+port;</div><div class="line">        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(zkConn,</div><div class="line">                <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</div><div class="line">        curatorFramework.start();</div><div class="line">        <span class="comment">//连接上zk然后开始注册服务节点</span></div><div class="line">        String serviceBasePath=ZK_DATA_PATH+serviceName;</div><div class="line">        <span class="comment">//添加基础服务节点</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            curatorFramework.create()</div><div class="line">                            .creatingParentContainersIfNeeded()</div><div class="line">                            .forPath(serviceBasePath);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (e.getMessage().contains(<span class="string">"NodeExist"</span>)) &#123;</div><div class="line">                LOGGER.info(<span class="string">"This Path Service has already Exist"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                LOGGER.error(<span class="string">"Create Path Error "</span>, e);</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Register error"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> registerSuccess=<span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="comment">//如果添加成功，添加标识服务具体路径的节点</span></div><div class="line">        <span class="keyword">while</span> (!registerSuccess)&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                curatorFramework.create()</div><div class="line">                                .withMode(CreateMode.EPHEMERAL)</div><div class="line">                                .forPath(serviceBasePath+<span class="string">"/"</span>+serviceIp);</div><div class="line">                <span class="comment">//这里测试出现无限注册，特么坑死了，忘添加状态修改了</span></div><div class="line">                registerSuccess = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="comment">//出错重新注册(要先删除下节点再重新注册)</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">                    e1.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                LOGGER.info(<span class="string">"Retry Register ZK, &#123;&#125;"</span>, e.getMessage());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    curatorFramework.delete().forPath(serviceBasePath + <span class="string">"/"</span> + serviceIp);</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e1) &#123;</div><div class="line">                    e1.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//关停相关服务的逻辑</span></div><div class="line">        LOGGER.info(<span class="string">"Shutting down server &#123;&#125;"</span>, serviceName);</div><div class="line">        unRegister();</div><div class="line">        <span class="keyword">if</span> (curatorFramework != <span class="keyword">null</span>) &#123;</div><div class="line">            curatorFramework.close();</div><div class="line">        &#125;</div><div class="line">        bossGroup.shutdownGracefully();</div><div class="line">        workerGroup.shutdownGracefully();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unRegister</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"unRegister zookeeper"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            curatorFramework.delete().forPath(ZK_DATA_PATH+serviceName+<span class="string">"/"</span>+localIp+<span class="string">":"</span>+port);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getZkConn</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> zkConn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZkConn</span><span class="params">(String zkConn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.zkConn = zkConn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocalIp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> localIp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocalIp</span><span class="params">(String localIp)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.localIp = localIp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Channel <span class="title">getChannel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChannel</span><span class="params">(Channel channel)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.channel = channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>暂时先到此，接下来的内容请看下篇</p>
<p>源码查看:<a href="https://github.com/muyinchen/migo-RPC" target="_blank" rel="external">https://github.com/muyinchen/migo-RPC</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个轻量级分布式-RPC-框架-上&quot;&gt;&lt;a href=&quot;#一个轻量级分布式-RPC-框架-上&quot; class=&quot;headerlink&quot; title=&quot;一个轻量级分布式 RPC 框架 上&quot;&gt;&lt;/a&gt;一个轻量级分布式 RPC 框架 上&lt;/h1&gt;&lt;p&gt;RPC，即 Remote Procedure Call（远程过程调用），说得通俗一点就是：调用远程计算机上的服务，就像调用本地服务一样。&lt;/p&gt;
&lt;p&gt;具体的介绍就不多说了，通过搜索引擎可以获得很多这方面的介绍。&lt;/p&gt;
&lt;p&gt;这里推荐一篇文章:&lt;a href=&quot;https://my.oschina.net/huangyong/blog/361751&quot;&gt;https://my.oschina.net/huangyong/blog/361751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于架构的设计，说些自己的看法，不想去说那么抽象，拿一个人来讲:&lt;/p&gt;
&lt;p&gt;首先，人体的组成必须要由骨架，这就是表示项目应该有一个总体的架构图。&lt;/p&gt;
&lt;p&gt;然后，要有各个器官来各司其职，这就是各个模块了。&lt;/p&gt;
&lt;p&gt;再者，各个器官之间要交流，那就需要有个中间件来承载的，这里就是血管，而血液就是信息承载体，里面包含了各种器官需要的物质和生产出的物     质，血液在代码中的体现可能是一个&lt;code&gt;ConcurrentMap&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最后，专注于各个模块的实现，所用的逻辑和技术具体问题具体再分析处理&lt;/p&gt;
    
    </summary>
    
      <category term="RPC" scheme="https://muyinchen.github.io/categories/RPC/"/>
    
    
      <category term="RPC" scheme="https://muyinchen.github.io/tags/RPC/"/>
    
  </entry>
  
</feed>
