<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muyinchen.github.io/"/>
  <updated>2018-09-12T15:58:12.460Z</updated>
  <id>https://muyinchen.github.io/</id>
  
  <author>
    <name>知秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018.9.10 响应式一些内容的分享总结</title>
    <link href="https://muyinchen.github.io/2018/09/12/2018.9.10%20%E5%93%8D%E5%BA%94%E5%BC%8F%E4%B8%80%E4%BA%9B%E5%86%85%E5%AE%B9%E7%9A%84%E5%88%86%E4%BA%AB%E6%80%BB%E7%BB%93/"/>
    <id>https://muyinchen.github.io/2018/09/12/2018.9.10 响应式一些内容的分享总结/</id>
    <published>2018-09-12T15:40:25.000Z</published>
    <updated>2018-09-12T15:58:12.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-9-10-响应式一些内容的分享总结"><a href="#2018-9-10-响应式一些内容的分享总结" class="headerlink" title="2018.9.10 响应式一些内容的分享总结"></a>2018.9.10 响应式一些内容的分享总结</h1><h2 id="响应式到底是什么？"><a href="#响应式到底是什么？" class="headerlink" title="响应式到底是什么？"></a>响应式到底是什么？</h2><p>现实生活中，当我们听到有人喊我们的时候，我们会对其进行响应，也就是说，我们是基于事件驱动模式来进行的编程。<br>所以这个过程其实就是对于所产生事件的下发，我们的消费者对其进行的一系列的消费。<br>从这个角度，我们可以思考，整个代码的设计我们应该是针对于消费者来讲的，比如看电影，有些画面我们不想看，那就闭上眼睛，<br>有些声音不想听，那就捂上耳朵，说白了，就是对于消费者的增强包装，我们将这些复杂的逻辑给其拆分，然后分割成一个个的小任务进行封装，<br>于是就有了诸如ﬁlter、map、skip、limit等操作。而对于其中源码的设计逻辑，我们放在后面来讲。</p>
<a id="more"></a>
<h2 id="并发与并行的关系"><a href="#并发与并行的关系" class="headerlink" title="并发与并行的关系"></a>并发与并行的关系</h2><p>可以这么说，并发很好的利用了CPU时间片的特性，也就是操作系统选择并运行一个任务，接着在下一个时间片会运行另一个任务，并把前一个任务设置成等待状态。<br>其实这里想表达的是<strong>并发并不意味着并行</strong>。<br>具体来举几个情况:</p>
<ul>
<li>有时候多线程执行会提高应用程序的性能，而有时候反而会降低程序的性能。这在关于JDK中其Stream API的使用上体现的很明显，如果任务量很小，而我们又使用了并行流，反而降低了性能。</li>
<li>我们在多线程编程中可能会同时开启或者关闭多个线程，这会产生的很多性能开销，这也降低了程序性能。</li>
<li>当我们的线程同时都在等待IO过程，此时并发也就可能会阻塞CPU资源，其造成的后果不仅仅是用户在等待结果，同时会浪费CPU的计算资源。</li>
<li>如果几个线程共享了一个数据，情况就变得有些复杂了，我们需要考虑数据在各个线程中状态的一致性。为了达到这个目的，我们很可能会使用Synchronized或者是lock来解决。<br>现在，应该对并发有一定的认知了吧。并发是一个很好的东西，但并不一定会实现并行。并行是在多个CPU核心上<br>的同一时间运行多个任务或者一个任务分为多块执行(如ForkJoin)。单核CPU的话就不要考虑了。<br>补充一点，实际上多线程就意味着并发，但是并行只发生在当这些线程在同一时间调度分配在不同CPU上执行。也<br>就是说，并行是并发的一种特定的形式。往往我们一个任务里会产生很多元素，然而这些个元素在不做操作的情况下大都只能在当前线程中操作，要么我们就要对其进行ForkJoin，但这些对于我们很多程序员来讲有时候很不好操作控制，上手难度有些高，响应式的话，我们可以简单的通过其调度API就可以轻松做到事件元素的下发分配，其内部将每个元素包装成一个任务提交到线程池中，我们可以根据是否是计算型任务还是IO类型的任务来选择相应的线程池。<br>这里，需要<strong>强调</strong>一下：线程只是一个对象而已，不要把其想象成cpu中的某一个执行核心，这是很多人都在犯的错，cpu时间片切换执行这些个线程。</li>
</ul>
<h2 id="响应式中的背压到底是一种怎样的理解"><a href="#响应式中的背压到底是一种怎样的理解" class="headerlink" title="响应式中的背压到底是一种怎样的理解"></a>响应式中的背压到底是一种怎样的理解</h2><p>用一个不算很恰当的中国的成语来讲，就是承上启下。为了更好的解释，我们来看一个场景，大坝，在洪水时期，下游没有办法一下子消耗那么多水，大坝在此的作用就是拦截洪水，并根据下游的消耗情况酌情排放。再者，父亲的背，我们小时候，社会上很多的事情首先由父亲用自己的背来帮我们来扛起，然后根据我们自身的能力来适当的下发给我们压力，也就是说，背压应该写在连接元素生产者和消费者的一个地方，即生产者和消费者的连线者。然后，通过这里的描述，背压应该具有承载元素的能力，也就是其必须是一个容器的，而且元素的存储与下发应该具有先后的，那么使用队列则是最适合不过了。</p>
<h2 id="如何去看Rxjava或者Reactor的源码，根据源码的接口的设计我们可以得到一些什么启示"><a href="#如何去看Rxjava或者Reactor的源码，根据源码的接口的设计我们可以得到一些什么启示" class="headerlink" title="如何去看Rxjava或者Reactor的源码，根据源码的接口的设计我们可以得到一些什么启示"></a>如何去看Rxjava或者Reactor的源码，根据源码的接口的设计我们可以得到一些什么启示</h2><p>关于响应式的Rx标准已经写入了JDK中:<code>java.util.concurrent.Flow</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Publisher</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span></span>;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T item)</span></span>;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span></span>;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span>&lt;<span class="title">T</span>,<span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt;, <span class="title">Publisher</span>&lt;<span class="title">R</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，Flow这个类中包含了这4个接口定义，<code>Publisher</code> 通过<code>subscribe</code>方法来和<code>Subscriber</code>产生订阅关系，而<code>Subscriber</code>依靠<code>onSubscribe</code>来首先和上游产生联系，这里就是靠<code>Subscription</code>来做到的，所以说，<code>Subscription</code>往往会作为生产者的内部类定义其中，其用来接收生产者所生产的元素，支持背压的话，<code>Subscription</code>应该首先将其放入到一个队列中，然后根据请求数量来调用<code>Subscriber</code>的<code>onNext</code>等方法进行下发。这个在Rx编程中都是统一的模式，我们通过Reactor中<code>reactor.core.publisher.Flux#fromArray</code>所涉及的<code>FluxArray</code>的源码来对此段内容进行理解:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FluxArray</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Flux</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Fuseable</span>, <span class="title">Scannable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">final</span> T[] array;</div><div class="line"></div><div class="line">	<span class="meta">@SafeVarargs</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FluxArray</span><span class="params">(T... array)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.array = Objects.requireNonNull(array, <span class="string">"array"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(CoreSubscriber&lt;? <span class="keyword">super</span> T&gt; s, T[] array)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (array.length == <span class="number">0</span>) &#123;</div><div class="line">			Operators.complete(s);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (s <span class="keyword">instanceof</span> ConditionalSubscriber) &#123;</div><div class="line">			s.onSubscribe(<span class="keyword">new</span> ArrayConditionalSubscription&lt;&gt;((ConditionalSubscriber&lt;? <span class="keyword">super</span> T&gt;) s, array));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			s.onSubscribe(<span class="keyword">new</span> ArraySubscription&lt;&gt;(s, array));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(CoreSubscriber&lt;? <span class="keyword">super</span> T&gt; actual)</span> </span>&#123;</div><div class="line">		subscribe(actual, array);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">scanUnsafe</span><span class="params">(Attr key)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (key == Attr.BUFFERED) <span class="keyword">return</span> array.length;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySubscription</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">			<span class="keyword">implements</span> <span class="title">InnerProducer</span>&lt;<span class="title">T</span>&gt;, <span class="title">SynchronousSubscription</span>&lt;<span class="title">T</span>&gt; &#123;</div><div class="line"></div><div class="line">		<span class="keyword">final</span> CoreSubscriber&lt;? <span class="keyword">super</span> T&gt; actual;</div><div class="line"></div><div class="line">		<span class="keyword">final</span> T[] array;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> index;</div><div class="line"></div><div class="line">		<span class="keyword">volatile</span> <span class="keyword">boolean</span> cancelled;</div><div class="line"></div><div class="line">		<span class="keyword">volatile</span> <span class="keyword">long</span> requested;</div><div class="line">		<span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">		<span class="keyword">static</span> <span class="keyword">final</span> AtomicLongFieldUpdater&lt;ArraySubscription&gt; REQUESTED =</div><div class="line">				AtomicLongFieldUpdater.newUpdater(ArraySubscription.class, <span class="string">"requested"</span>);</div><div class="line"></div><div class="line">		ArraySubscription(CoreSubscriber&lt;? <span class="keyword">super</span> T&gt; actual, T[] array) &#123;</div><div class="line">			<span class="keyword">this</span>.actual = actual;</div><div class="line">			<span class="keyword">this</span>.array = array;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (Operators.validate(n)) &#123;</div><div class="line">				<span class="keyword">if</span> (Operators.addCap(REQUESTED, <span class="keyword">this</span>, n) == <span class="number">0</span>) &#123;</div><div class="line">					<span class="keyword">if</span> (n == Long.MAX_VALUE) &#123;</div><div class="line">						fastPath();</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						slowPath(n);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">slowPath</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">			<span class="keyword">final</span> T[] a = array;</div><div class="line">			<span class="keyword">final</span> <span class="keyword">int</span> len = a.length;</div><div class="line">			<span class="keyword">final</span> Subscriber&lt;? <span class="keyword">super</span> T&gt; s = actual;</div><div class="line"></div><div class="line">			<span class="keyword">int</span> i = index;</div><div class="line">			<span class="keyword">int</span> e = <span class="number">0</span>;</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (; ; ) &#123;</div><div class="line">				<span class="keyword">if</span> (cancelled) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">while</span> (i != len &amp;&amp; e != n) &#123;</div><div class="line">					T t = a[i];</div><div class="line"></div><div class="line">					<span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</div><div class="line">						s.onError(<span class="keyword">new</span> NullPointerException(<span class="string">"The "</span> + i + <span class="string">"th array element was null"</span>));</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					s.onNext(t);</div><div class="line"></div><div class="line">					<span class="keyword">if</span> (cancelled) &#123;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					i++;</div><div class="line">					e++;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (i == len) &#123;</div><div class="line">					s.onComplete();</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				n = requested;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (n == e) &#123;</div><div class="line">					index = i;</div><div class="line">					n = REQUESTED.addAndGet(<span class="keyword">this</span>, -e);</div><div class="line">					<span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">					e = <span class="number">0</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">fastPath</span><span class="params">()</span> </span>&#123;...&#125;</div><div class="line">				</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayConditionalSubscription</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">			<span class="keyword">implements</span> <span class="title">InnerProducer</span>&lt;<span class="title">T</span>&gt;, <span class="title">SynchronousSubscription</span>&lt;<span class="title">T</span>&gt; &#123;</div><div class="line">		....</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到之前文字在源码内部的表达。这里就不多说了。而对于各种中间操作的包装我们该如何去做，依据之前的接口定义，我们应该更注重功能的设定，而无论是filter，flatmap，map等这些常用的操作，其实都是消费动作，理应定义在消费者层面，想到这里，我们该如何去做？<br>这里，我们就要结合我们的设计模式，装饰模式，对<code>subscribe(Subscriber&lt;? super T&gt; subscriber)</code>所传入的<code>Subscriber</code>进行功能增强，即从<code>Subscriber</code>这个角度来讲，使用的是装饰增强模式，但从外面来看，其整体定义的依然是一个<code>Flux</code>或者<code>Mono</code>，这里<code>FluxArray</code>的话就是例子，这样，从这个角度来讲，其属于向上适配，也就是适配模式，这里的适配玩的比较有意思，完全就是靠对内部类的包装然后通过<code>subscribe(Subscriber&lt;? super T&gt; subscriber)</code>衔接来完成的。</p>
<p>所以，我们应该想到中国古代苏轼的题西林壁里有一句话:<code>横看成岭侧成峰 远近高低各不同</code>讲的就是从不同的角度去看待一个事物，就会得到不同的结果。同样，一百个人心中有一百个哈姆雷特，也是对于同一个事物的看法，从这里，我们应该能学到设计模式千万不要特别刻意的去绝对化！</p>
<p>我们可以结合<code>reactor.core.publisher.Flux#filter</code>涉及的<code>FluxFilter</code>来观察理解上述涉及的内容:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FluxFilter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">FluxOperator</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">final</span> Predicate&lt;? <span class="keyword">super</span> T&gt; predicate;</div><div class="line"></div><div class="line">	FluxFilter(Flux&lt;? extends T&gt; source, Predicate&lt;? <span class="keyword">super</span> T&gt; predicate) &#123;</div><div class="line">		<span class="keyword">super</span>(source);</div><div class="line">		<span class="keyword">this</span>.predicate = Objects.requireNonNull(predicate, <span class="string">"predicate"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(CoreSubscriber&lt;? <span class="keyword">super</span> T&gt; actual)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (actual <span class="keyword">instanceof</span> ConditionalSubscriber) &#123;</div><div class="line">			source.subscribe(<span class="keyword">new</span> FilterConditionalSubscriber&lt;&gt;((ConditionalSubscriber&lt;? <span class="keyword">super</span> T&gt;) actual,</div><div class="line">					predicate));</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		source.subscribe(<span class="keyword">new</span> FilterSubscriber&lt;&gt;(actual, predicate));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterSubscriber</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">			<span class="keyword">implements</span> <span class="title">InnerOperator</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt;,</div><div class="line">			           <span class="title">Fuseable</span>.<span class="title">ConditionalSubscriber</span>&lt;<span class="title">T</span>&gt; &#123;</div><div class="line"></div><div class="line">		<span class="keyword">final</span> CoreSubscriber&lt;? <span class="keyword">super</span> T&gt; actual;</div><div class="line"></div><div class="line">		<span class="keyword">final</span> Predicate&lt;? <span class="keyword">super</span> T&gt; predicate;</div><div class="line"></div><div class="line">		Subscription s;</div><div class="line"></div><div class="line">		<span class="keyword">boolean</span> done;</div><div class="line"></div><div class="line">		FilterSubscriber(CoreSubscriber&lt;? <span class="keyword">super</span> T&gt; actual, Predicate&lt;? <span class="keyword">super</span> T&gt; predicate) &#123;</div><div class="line">			<span class="keyword">this</span>.actual = actual;</div><div class="line">			<span class="keyword">this</span>.predicate = predicate;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (Operators.validate(<span class="keyword">this</span>.s, s)) &#123;</div><div class="line">				<span class="keyword">this</span>.s = s;</div><div class="line">				actual.onSubscribe(<span class="keyword">this</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (done) &#123;</div><div class="line">				Operators.onNextDropped(t, actual.currentContext());</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">boolean</span> b;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				b = predicate.test(t);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">				onError(Operators.onOperatorError(s, e, t, actual.currentContext()));</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (b) &#123;</div><div class="line">				actual.onNext(t);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				s.request(<span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryOnNext</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (done) &#123;</div><div class="line">				Operators.onNextDropped(t, actual.currentContext());</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">boolean</span> b;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				b = predicate.test(t);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">				onError(Operators.onOperatorError(s, e, t, actual.currentContext()));</div><div class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (b) &#123;</div><div class="line">				actual.onNext(t);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> b;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (done) &#123;</div><div class="line">				Operators.onErrorDropped(t, actual.currentContext());</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			done = <span class="keyword">true</span>;</div><div class="line">			actual.onError(t);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (done) &#123;</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			done = <span class="keyword">true</span>;</div><div class="line">			actual.onComplete();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="meta">@Nullable</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">scanUnsafe</span><span class="params">(Attr key)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (key == Attr.PARENT) <span class="keyword">return</span> s;</div><div class="line">			<span class="keyword">if</span> (key == Attr.TERMINATED) <span class="keyword">return</span> done;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> InnerOperator.<span class="keyword">super</span>.scanUnsafe(key);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="keyword">public</span> CoreSubscriber&lt;? <span class="keyword">super</span> T&gt; actual() &#123;</div><div class="line">			<span class="keyword">return</span> actual;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</div><div class="line">			s.request(n);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">			s.cancel();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConditionalSubscriber</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">			<span class="keyword">implements</span> <span class="title">InnerOperator</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt;,</div><div class="line">			           <span class="title">Fuseable</span>.<span class="title">ConditionalSubscriber</span>&lt;<span class="title">T</span>&gt; &#123;</div><div class="line"></div><div class="line">		...</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据这些设计，我们自己也是完全可以作为参考来通过一套api接口设计，可以衍生出很多规范逻辑的开发，比如我们看到的众多的Rx衍生操作API的设计实现，其都是按照一套模板来进行的，我们可以称之为代码层面的微服务设计。</p>
<h2 id="如何去看待众多函数表达式"><a href="#如何去看待众多函数表达式" class="headerlink" title="如何去看待众多函数表达式"></a>如何去看待众多函数表达式</h2><p>人类最擅长描述场景，比如一套动作，假如是舞蹈的话，可以讲是什么什么编舞，但是这个编舞又要在一定的框架之下，即有一定的规范，同样，我们施展一套拳法，也需要一个规范，不能踢一脚也叫拳法。而对于这个规范的实现，那就是一套动作，对于拳法来讲，可能就是一个很简单的左勾拳或者右勾拳，也可以是比较复杂的咏春拳，太极拳等，而且一套拳法可能有很多小套路组成，这些小套路也是遵循着这个规范进行的，那么依据这个思路，我们来看下面的函数式接口定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	 <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div><div class="line">	  <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(other);</div><div class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</div><div class="line">    &#125;</div><div class="line">	 <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</div><div class="line">    &#125;</div><div class="line">	<span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(other);</div><div class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</div><div class="line">                ? Objects::isNull</div><div class="line">                : object -&gt; targetRef.equals(object);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BiConsumer</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt; </span>&#123;</div><div class="line">	 </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t, U u)</span></span>;</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">default</span> BiConsumer&lt;T, U&gt; <span class="title">andThen</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> U&gt; after)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(after);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (l, r) -&gt; &#123;</div><div class="line">            accept(l, r);</div><div class="line">            after.accept(l, r);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到无论是条件判断表达式<code>Predicate</code>还是无返回值动作处理函数<code>BiConsumer</code>都遵循一个标准动作的设计定义思路，并通过<code>default</code>方法来对同类动作进行编排，以达到更加丰富的效果。所以，函数式的应用更加倾向于干净利落，凸显自己要做的事情就好，未来，我会在自己的<code>Java编程方法论- JDK篇</code>中花大量篇幅来解读函数式编程的各种奇特而实用的使用方法，来降低我们复杂接口的设计逻辑难度，做到知名见义，了然于胸的效果。这个在我的<code>Java编程方法论- Reactor与Spring webflux篇</code>中也是有涉及的。</p>
<h2 id="关于响应式的使用性能的考究"><a href="#关于响应式的使用性能的考究" class="headerlink" title="关于响应式的使用性能的考究"></a>关于响应式的使用性能的考究</h2><p>响应式编程知识一种模式，用的好与坏全看自己对于api的理解程度，不要想着会多么的降低性能，这个并没有进行什么过度包装这一说的，当讲到jdbc这里如何表现不行的时候，当前并没有一个开源的Reactor-jdbc的框架，也就造成的测试的不合理性，何况新的知识是需要大家一起共同来学习推动的，不好的地方我们推动就好，不需要上来就对其进行否定，mongodb有提供相应的响应式api，但其内部还是之前的方式，同样，关系型数据库也是一个道理，响应式编程注重的是中间过程的处理，关于生产元素的获取它没太多关系，更多的还是看元素生产者的性能，一家之言，可能有偏颇，希望理解，有问题提出就好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018-9-10-响应式一些内容的分享总结&quot;&gt;&lt;a href=&quot;#2018-9-10-响应式一些内容的分享总结&quot; class=&quot;headerlink&quot; title=&quot;2018.9.10 响应式一些内容的分享总结&quot;&gt;&lt;/a&gt;2018.9.10 响应式一些内容的分享总结&lt;/h1&gt;&lt;h2 id=&quot;响应式到底是什么？&quot;&gt;&lt;a href=&quot;#响应式到底是什么？&quot; class=&quot;headerlink&quot; title=&quot;响应式到底是什么？&quot;&gt;&lt;/a&gt;响应式到底是什么？&lt;/h2&gt;&lt;p&gt;现实生活中，当我们听到有人喊我们的时候，我们会对其进行响应，也就是说，我们是基于事件驱动模式来进行的编程。&lt;br&gt;所以这个过程其实就是对于所产生事件的下发，我们的消费者对其进行的一系列的消费。&lt;br&gt;从这个角度，我们可以思考，整个代码的设计我们应该是针对于消费者来讲的，比如看电影，有些画面我们不想看，那就闭上眼睛，&lt;br&gt;有些声音不想听，那就捂上耳朵，说白了，就是对于消费者的增强包装，我们将这些复杂的逻辑给其拆分，然后分割成一个个的小任务进行封装，&lt;br&gt;于是就有了诸如ﬁlter、map、skip、limit等操作。而对于其中源码的设计逻辑，我们放在后面来讲。&lt;/p&gt;
    
    </summary>
    
      <category term="响应式" scheme="https://muyinchen.github.io/categories/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
    
      <category term="Reactor" scheme="https://muyinchen.github.io/tags/Reactor/"/>
    
  </entry>
  
  <entry>
    <title>关于CyclicBarrier与CountDownLatch的源码比较-CountDownLatch 使用场景</title>
    <link href="https://muyinchen.github.io/2018/05/11/%E5%85%B3%E4%BA%8ECyclicBarrier%E4%B8%8ECountDownLatch%E7%9A%84%E6%BA%90%E7%A0%81%E6%AF%94%E8%BE%83-CountDownLatch%20%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://muyinchen.github.io/2018/05/11/关于CyclicBarrier与CountDownLatch的源码比较-CountDownLatch 使用场景/</id>
    <published>2018-05-11T15:00:25.000Z</published>
    <updated>2018-05-11T15:31:24.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论"><a href="#关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论" class="headerlink" title="关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论"></a>关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  首先我们先针对于上一节讲的给出一个很重要的区别:<br>  <strong>CountDownLatch</strong> 很明显是可以不限制等待线程的数量，而会限制 <strong>countDown</strong>的操作数。<br>  <strong>CyclicBarrier</strong> 会限制等待线程的数量。</p>
<a id="more"></a>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>我们来看JDK给我们带来的两种用法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123; <span class="comment">// ...</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    CountDownLatch startSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">    CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(N);</div><div class="line">  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) <span class="comment">// create and start threads</span></div><div class="line">      <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(startSignal, doneSignal)).start();</div><div class="line">  </div><div class="line">    doSomethingElse();            <span class="comment">// don't let run yet &lt;1&gt;</span></div><div class="line">    startSignal.countDown();      <span class="comment">// let all threads proceed &lt;2&gt;</span></div><div class="line">    doSomethingElse();            <span class="comment">// &lt;3&gt;</span></div><div class="line">    doneSignal.await();           <span class="comment">// wait for all to finish &lt;4&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch startSignal;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch doneSignal;</div><div class="line">  Worker(CountDownLatch startSignal, CountDownLatch doneSignal) &#123;</div><div class="line">    <span class="keyword">this</span>.startSignal = startSignal;</div><div class="line">    <span class="keyword">this</span>.doneSignal = doneSignal;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      startSignal.await(); <span class="comment">// &lt;5&gt;</span></div><div class="line">      doWork();</div><div class="line">      doneSignal.countDown();</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;&#125; <span class="comment">// return;</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>这里其实就是在传达信息，首先，这里定义了一个所传状态值为1的 <strong>startSignal</strong>和状态值为N的 <strong>doneSignal</strong>，然后通过for循环起了N个线程执行任务，但是在这些线程执行具体任务之前我主线程里有一波逻辑必须先行(因为有些变量的设定是子线程里共享的东西)，那么，我就可以在其内进行 <strong>startSignal.await()</strong>的设定，可以看到，我这里N可以是很大的一个数字，这也就是我们上面讲的 <strong>CountDownLatch</strong>的一个很强的特性的应用，接着，在我主线程的一波先行逻辑执行完后(请看<code>&lt;1&gt;</code>)，我就可以放行，于是就可以调用<code>&lt;2&gt;</code>处的 <strong>startSignal.countDown()</strong>，对各个线程进行解除挂起，这里<code>&lt;3&gt;</code>处的代码就和各个子线程里的任务没有什么冲突，也就没什么<code>happen-before</code>这种要求限定了，但我们其他线程就有担心你主线程执行完我任务没完成怎么办，使用sleep？我执行完主线程可能还在等待，这个时间真的不确定，那就在主线程里使用<code>&lt;4&gt;</code>处的代码 <strong>doneSignal.await()</strong>，这样，当我各个子线程都结束的时候，我就可以做到主线程在第一时间也可以结束掉省的浪费资源了，这里，有童鞋可能会说主线程里也可以调用<code>XxxThread.join()</code>，但要注意的是，当一个线程调用之后，主线程就休眠了，剩下的<code>join()</code>操作也就无从谈起了，也就是说其他线程结束的时候会调用一下 <strong>this.notifyAll</strong>但仅针对于这个要结束的线程，所以主线程可能会经历休眠启动，再休眠，再启动，这就浪费性能了。</p>
<p>我们接着看<code>JDK</code>给我们提供的第二个常用使用场景例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver2</span> </span>&#123; <span class="comment">// ...</span></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(N);</div><div class="line">     Executor e = ...</div><div class="line"></div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) <span class="comment">// create and start threads</span></div><div class="line">       e.execute(<span class="keyword">new</span> WorkerRunnable(doneSignal, i));</div><div class="line"></div><div class="line">     doneSignal.await();           <span class="comment">// wait for all to finish</span></div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">WorkerRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch doneSignal;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> i;</div><div class="line">   WorkerRunnable(CountDownLatch doneSignal, <span class="keyword">int</span> i) &#123;</div><div class="line">     <span class="keyword">this</span>.doneSignal = doneSignal;</div><div class="line">     <span class="keyword">this</span>.i = i;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">       doWork(i);</div><div class="line">       doneSignal.countDown();</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;&#125; <span class="comment">// return;</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line"> &#125;&#125;</div></pre></td></tr></table></figure></p>
<p> 这里就实现了一个<code>分治算法</code>应用，首先，我们可以将要做的工作进行策略分割，也就是 <strong>doWork()</strong>方法实现，里面可以根据所传参数进行策略执行，因为任务要放到线程中执行，而且这里还涉及到了一个策略分配，往往，我们的任务在大局上可以很快的进行策略分块操作，然后，每一个块内我们可以根据情况假如复杂再进行一个forkJoin的一个应用，这里我们无须去考虑那么多，我们通过实现一个 <strong>Runnable</strong>来适配<code>Thread</code>需求，这里，为了适应子线程和主线程的等待执行关系，使用了<code>CountDownLatch</code>来实现，通过上一个例子，大家应该很清楚了，主线程传入一个定义的 <strong>CountDownLatch</strong>对象，子线程调用，在其 <strong>Runnable.run</strong>方法的最后调用 <strong>doneSignal.countDown()</strong>。主线程在其最后调用 <strong>doneSignal.await()</strong>，这都是固定套路，记住就好。<br> 最后，在 <strong>doWork()</strong>中根据策略得到的任务很复杂的话，就可以使用 <strong>forkJoin</strong>策略进行二次分治了，这样就可以做到，分模块，有计算型的模块，也有IO型的模块，而且这些模块彼此不影响，每个模块内部的话可能会有共享数据的情况，就需要根据并发的其他知识进行解决了，这里就不多讲了，具体情况具体分析。</p>
<p>本文配套分享视频:</p>
<p><a href="http://v.youku.com/v_show/id_XMzYwMDE3ODA3Ng==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="external">http://v.youku.com/v_show/id_XMzYwMDE3ODA3Ng==.html?spm=a2h3j.8428770.3416059.1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论&quot;&gt;&lt;a href=&quot;#关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论&quot; class=&quot;headerlink&quot; title=&quot;关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论&quot;&gt;&lt;/a&gt;关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论&lt;/h2&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;  首先我们先针对于上一节讲的给出一个很重要的区别:&lt;br&gt;  &lt;strong&gt;CountDownLatch&lt;/strong&gt; 很明显是可以不限制等待线程的数量，而会限制 &lt;strong&gt;countDown&lt;/strong&gt;的操作数。&lt;br&gt;  &lt;strong&gt;CyclicBarrier&lt;/strong&gt; 会限制等待线程的数量。&lt;/p&gt;
    
    </summary>
    
      <category term="Java9" scheme="https://muyinchen.github.io/categories/Java9/"/>
    
    
      <category term="Java" scheme="https://muyinchen.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于CyclicBarrier与CountDownLatch的源码比较-CountDownLatch 源码解读</title>
    <link href="https://muyinchen.github.io/2018/05/09/%E5%85%B3%E4%BA%8ECyclicBarrier%E4%B8%8ECountDownLatch%E7%9A%84%E6%AF%94%E8%BE%83%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A8%E8%AE%BA-CountDownLatch%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>https://muyinchen.github.io/2018/05/09/关于CyclicBarrier与CountDownLatch的比较与使用场景的一些讨论-CountDownLatch 源码解读/</id>
    <published>2018-05-09T15:00:25.000Z</published>
    <updated>2018-05-11T15:01:53.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人的观点也不一定正确，仅供读者参考。<br><a id="more"></a></p>
<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>我们先来读下<strong>CountDownLatch</strong>这个类的注释:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A synchronization aid that allows one or more threads to wait until</div><div class="line"> * a set of operations being performed in other threads completes.</div><div class="line"> **/</div></pre></td></tr></table></figure></p>
<p>此处说明了其使用场景允许一个或多个线程等待，直到在其他线程中执行的一组操作完成。这里有两个关键点:<strong>等待</strong>，<strong>一组操作完成</strong>。这里要强调的是，<strong>等待</strong>并不意味着线程一定挂起，<strong>一组操作完成</strong>并不意味着其中一个操作所在的线程就会结束，这是两码事。<br>接着来看第二段注释:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *&lt;p&gt;A &#123;<span class="doctag">@code</span> CountDownLatch&#125; is initialized with a given &lt;em&gt;count&lt;/em&gt;.</div><div class="line"> * The &#123;<span class="doctag">@link</span> #await await&#125; methods block until the current count reaches</div><div class="line"> * zero due to invocations of the &#123;<span class="doctag">@link</span> #countDown&#125; method, after which</div><div class="line"> * all waiting threads are released and any subsequent invocations of</div><div class="line"> * &#123;<span class="doctag">@link</span> #await await&#125; return immediately.  This is a one-shot phenomenon</div><div class="line"> * -- the count cannot be reset.  If you need a version that resets the</div><div class="line"> * count, consider using a &#123;<span class="doctag">@link</span> CyclicBarrier&#125;.</div><div class="line"> **/</div></pre></td></tr></table></figure></p>
<p>从此处可以知道，<strong>CountDownLatch</strong>用给定的<strong>count</strong>进行初始化。 调用await方法会产生阻塞，直到当前计数count由于调用countDown方法而减至零，此后所有等待的线程被释放，并且后续无论是哪个线程再次进行await调用都会立即返回，不会产生其他动作。 也就是说，这是一次性使用的工具，其计数无法重置。 如果你需要重置计数的版本，请考虑使用CyclicBarrier。<br>这里，我们可以结合下源码来进一步解读，我们首先会看到，<strong>CountDownLatch</strong>只定义了一个<strong>private final Sync sync;</strong>字段，其是final类型，一旦赋值就不可变。</p>
<h3 id="CountDownLatch的初始化"><a href="#CountDownLatch的初始化" class="headerlink" title="CountDownLatch的初始化"></a><strong>CountDownLatch</strong>的初始化</h3><p>我们先来说<strong>CountDownLatch</strong>的初始化:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</div><div class="line">        <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，这里主要还是创建了一个<code>Sync</code>实例，而这也是这个类的核心所在，它是一个针对于<strong>CountDownLatch</strong>而专门设计的一个实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Synchronization control For CountDownLatch.</div><div class="line"> * Uses AQS state to represent count.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</div><div class="line"></div><div class="line">    Sync(<span class="keyword">int</span> count) &#123;</div><div class="line">        setState(count);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getState();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">        <span class="comment">// Decrement count; signal when transition to zero</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> c = getState();</div><div class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">int</span> nextc = c - <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (compareAndSetState(c, nextc))</div><div class="line">                <span class="keyword">return</span> nextc == <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其主要还是利用<strong>AQS</strong>的<strong>volatile</strong>字段state来进行状态的控制，这也是我们可以进行<strong>CAS</strong>操作的核心所在。</p>
<h3 id="共享与独占的区别"><a href="#共享与独占的区别" class="headerlink" title="共享与独占的区别"></a>共享与独占的区别</h3><p>我们在前面知道，调用await方法会产生阻塞，那么这里我们就来看下await:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.concurrent.CountDownLatch#await()</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer#acquireSharedInterruptibly</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">            <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</div><div class="line">            doAcquireSharedInterruptibly(arg);</div><div class="line">    &#125;</div><div class="line">     <span class="comment">/**</span></div><div class="line">     * Acquires in shared interruptible mode.</div><div class="line">     * <span class="doctag">@param</span> arg the acquire argument</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">                <span class="keyword">if</span> (p == head) &#123;</div><div class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg);</div><div class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        setHeadAndPropagate(node, r);</div><div class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                    parkAndCheckInterrupt())</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            cancelAcquire(node);</div><div class="line">            <span class="keyword">throw</span> t;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里，我们看到了<code>Shared</code>，我们仔细追寻，在<code>AQS</code>的的内部类node中，有定义字段<strong>EXCLUSIVE</strong>和<strong>SHARED</strong>这俩就代表了两种情况的使用，独占和共享。其主要还是针对于资源的使用情况来讲的，前者，是对资源，这里就是这个state状态值，单个线程独占这个资源，不为0，不放弃。后者主要是将state状态值共享出来，几个线程都可以操作。而两者应用最大的区别就在于<strong>tryAcquire</strong>和<strong>tryAcquireShared</strong>的实现。这里，我并不会对ReentrantLock中的<strong>tryAcquire</strong>进行讲解。其他地方基本一致，差别点就在于<code>addWaiter(Node.XXX)</code>传入的类型不同，<code>acquireQueued</code>与<code>doAcquireSharedInterruptibly</code>实现思路大致相仿，只是会根据自己实际实现略作调整。这里，我们就专门针对于<strong>CountDownLatch</strong>所涉及到的进行解读。<br>题外话:我们通过知道独占与共享的设计区别，我们就可以很轻松的设计出属于自己的一些特有逻辑的实现，主要还是在于我们首先确定api选型，然后重写相应重点方法即可。</p>
<h3 id="acquireSharedInterruptibly"><a href="#acquireSharedInterruptibly" class="headerlink" title="acquireSharedInterruptibly"></a>acquireSharedInterruptibly</h3><p>从<strong>acquireSharedInterruptibly</strong>方法名称可以知道，其是可打断的，而且每一个调用<code>await</code>正常来讲都是在一个独立的线程中的，那么这个独立的线程在整个过程中都有可能被打断掉。<br>我们参考上面<strong>CountDownLatch中Sync</strong>的<strong>tryAcquireShared</strong>实现，状态不为0就进入<strong>doAcquireSharedInterruptibly</strong>方法中去，这个方法就是，首先先构造个节点，这个节点有绑定当前所在线程，然后让你进个队列，接着，我们的任务就是无限循环找我们前置节点到底是不是头节点，是的话，就再试着获取下状态值，当看到大于0了，对于<strong>CountDownLatch中Sync</strong>里的实现就是1，那就进入<strong>setHeadAndPropagate(node, r);</strong>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sets head of queue, and checks if successor may be waiting</div><div class="line"> * in shared mode, if so propagating if either propagate &gt; 0 or</div><div class="line"> * PROPAGATE status was set.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> node the node</div><div class="line"> * <span class="doctag">@param</span> propagate the return value from a tryAcquireShared</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHeadAndPropagate</span><span class="params">(Node node, <span class="keyword">int</span> propagate)</span> </span>&#123;</div><div class="line">    Node h = head; <span class="comment">// Record old head for check below</span></div><div class="line">    setHead(node);</div><div class="line">   </div><div class="line">    <span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span> ||</div><div class="line">        (h = head) == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</div><div class="line">        Node s = node.next;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isShared()) <span class="comment">/*之前的节点设定类型在这里就用上了*/</span></div><div class="line">            doReleaseShared();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面的都能看懂，这里要强调的是，因为你是<strong>Shared</strong>，还有一点我们需要思考的是，什么时候才会发生tryAcquireShared(1)&gt;0 (这里的参数1在<strong>CountDownLatch中Sync</strong>的<strong>tryAcquireShared</strong>实现里没有什么意义)?就是在状态值为0的时候，也就是产生释放的时候，即调用<strong>java.util.concurrent.CountDownLatch#countDown</strong>将状态值减为0的时候，然后激活头节点，所以我们这里首先释放的其实就是头节点，那读者可能会有疑问，那pre节点是什么，这也是我要强调的，pre节点并不一定是头节点，但是头节点的pre节点绝对就是自身，<br>下面我将三者的源码给出，可以很轻易的看到，假如是头节点，那么在for循环下，就再进行一次其pre节点的设定，初次设定的时候头尾都是自身。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer#addWaiter</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</div><div class="line">        Node node = <span class="keyword">new</span> Node(mode);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            Node oldTail = tail;</div><div class="line">            <span class="keyword">if</span> (oldTail != <span class="keyword">null</span>) &#123;</div><div class="line">                node.setPrevRelaxed(oldTail);</div><div class="line">                <span class="keyword">if</span> (compareAndSetTail(oldTail, node)) &#123;</div><div class="line">                    oldTail.next = node;</div><div class="line">                    <span class="keyword">return</span> node;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                initializeSyncQueue();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//java.util.concurrent.locks.AbstractQueuedSynchronizer.Node#predecessor</span></div><div class="line">     <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</div><div class="line">            Node p = prev;</div><div class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> p;</div><div class="line">        &#125;</div><div class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer#initializeSyncQueue</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Initializes head and tail fields on first contention.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initializeSyncQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        Node h;</div><div class="line">        <span class="keyword">if</span> (HEAD.compareAndSet(<span class="keyword">this</span>, <span class="keyword">null</span>, (h = <span class="keyword">new</span> Node())))</div><div class="line">            tail = h;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>至此，我们知道，在<strong>CountDownLatch</strong>作释放为0的时候，会率先激活头节点，然后后面的逻辑就是依次将自己设定成头节点，并将自身节点的线程状态由需要SIGNAL变为0，即属于正常运行状态，这样，我们方便在<strong>unparkSuccessor</strong>方法中激活下一个节点的所绑定的线程，而当下一个节点为空或者这个节点的线程状态标识位大于0也就是<strong>CANCELLED</strong>的时候，这里就可以根据最后一个节点的来获取线程还未激活的最靠前的那个节点，接下来就是激活这个节点的线程了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Node h = head;</div><div class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</div><div class="line">            <span class="keyword">int</span> ws = h.waitStatus;</div><div class="line">            <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</div><div class="line">                <span class="keyword">if</span> (!h.compareAndSetWaitStatus(Node.SIGNAL, <span class="number">0</span>))</div><div class="line">                    <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></div><div class="line">                unparkSuccessor(h);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</div><div class="line">                     !h.compareAndSetWaitStatus(<span class="number">0</span>, Node.PROPAGATE))</div><div class="line">                <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * If status is negative (i.e., possibly needing signal) try</div><div class="line">     * to clear in anticipation of signalling.  It is OK if this</div><div class="line">     * fails or if status is changed by waiting thread.</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</div><div class="line">        node.compareAndSetWaitStatus(ws, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Thread to unpark is held in successor, which is normally</div><div class="line">     * just the next node.  But if cancelled or apparently null,</div><div class="line">     * traverse backwards from tail to find the actual</div><div class="line">     * non-cancelled successor.</div><div class="line">     */</div><div class="line">    Node s = node.next;</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">        s = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (Node p = tail; p != node &amp;&amp; p != <span class="keyword">null</span>; p = p.prev)</div><div class="line">            <span class="keyword">if</span> (p.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">                s = p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</div><div class="line">        LockSupport.unpark(s.thread);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后，我们再次回到<strong>doAcquireSharedInterruptibly</strong>中，这里，我们来看其在最初调用await方法时候所进行的动作:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div></pre></td></tr></table></figure></p>
<p>这是for循环最后所进行的一个操作，if判断里，前者设定了该node所绑定线程需要进行singal的标志位的设定，接着对其所属线程进行线程挂起操作。代码如下，省的大家找了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> ws = pred.waitStatus;</div><div class="line">        <span class="keyword">if</span> (ws == Node.SIGNAL)</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * This node has already set status asking a release</div><div class="line">             * to signal it, so it can safely park.</div><div class="line">             */</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * Predecessor was cancelled. Skip over predecessors and</div><div class="line">             * indicate retry.</div><div class="line">             */</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                node.prev = pred = pred.prev;</div><div class="line">            &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</div><div class="line">            pred.next = node;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * waitStatus must be 0 or PROPAGATE.  Indicate that we</div><div class="line">             * need a signal, but don't park yet.  Caller will need to</div><div class="line">             * retry to make sure it cannot acquire before parking.</div><div class="line">             */</div><div class="line">            pred.compareAndSetWaitStatus(ws, Node.SIGNAL);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Convenience method to park and then check if interrupted.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if interrupted</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">        LockSupport.park(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">return</span> Thread.interrupted();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>对于<strong>shouldParkAfterFailedAcquire</strong>里面的代码，这里需要我给大家解惑的是，在我已确定我要挂起的情况下，因为当我是头节点的情况下，<code>tryAcquireShared</code>返回的是-1，何况后面非头结点直接进入这个if语句中。但是，这个await方法的调用可能前后很快，第一次设定状态的时候依然会返回一次false，并不会进行线程挂起，所以就需要那个do while语句来判断waitStatus标志位，这样，我们就可以找到最靠近头结点的那个未将标志位设定singal的那个节点所在。<br>对于<strong>parkAndCheckInterrupt</strong>，我们关心的是<strong>LockSupport.park(this);</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//java.util.concurrent.locks.LockSupport#park(java.lang.Object)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">(Object blocker)</span> </span>&#123;</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        setBlocker(t, blocker);</div><div class="line">        U.park(<span class="keyword">false</span>, <span class="number">0L</span>);</div><div class="line">        setBlocker(t, <span class="keyword">null</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里首先将线程和所传对象进行<strong>setBlocker</strong>绑定，告诉我们这里是因为谁而线程挂起的，方便一但出现异常，我们好通过日志确认，然后进行挂起，在挂起结束后就解除标记对象。</p>
<p>至此关于<strong>CountDownLatch</strong>涉及完毕。</p>
<p>本文配套分享视频地址:</p>
<p><a href="http://v.youku.com/v_show/id_XMzU5Nzc5NjI0NA==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="external">http://v.youku.com/v_show/id_XMzU5Nzc5NjI0NA==.html?spm=a2h3j.8428770.3416059.1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本人的观点也不一定正确，仅供读者参考。&lt;br&gt;
    
    </summary>
    
      <category term="Java9" scheme="https://muyinchen.github.io/categories/Java9/"/>
    
    
      <category term="Java" scheme="https://muyinchen.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JPA&amp;Hibernate---SessionFactory和EntityManagerFactory之间的区别</title>
    <link href="https://muyinchen.github.io/2017/11/16/JPA&amp;Hibernate---SessionFactory%E5%92%8CEntityManagerFactory%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://muyinchen.github.io/2017/11/16/JPA&amp;Hibernate---SessionFactory和EntityManagerFactory之间的区别/</id>
    <published>2017-11-16T04:00:25.000Z</published>
    <updated>2017-11-16T16:06:26.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JPA-amp-Hibernate—SessionFactory和EntityManagerFactory之间的区别"><a href="#JPA-amp-Hibernate—SessionFactory和EntityManagerFactory之间的区别" class="headerlink" title="JPA&amp;Hibernate—SessionFactory和EntityManagerFactory之间的区别"></a>JPA&amp;Hibernate—SessionFactory和EntityManagerFactory之间的区别</h1><blockquote>
<p>在谈Spring Data之前，要先讲讲JPA，讲JPA，又不免会说到Hibernate，那就从Hibernate开始说起吧。</p>
<p>因为很多人都喜欢把JPA和Hibernate混为一谈，这个系列文章会把这个问题讲明白。</p>
<p>有两种方法来处理Hibernate中的持久性:会话(session)和实体管理器。通过这篇文章，我们将分析这两种机制的区别。<br><a id="more"></a></p>
</blockquote>
<h2 id="JPA是一个标准"><a href="#JPA是一个标准" class="headerlink" title="JPA是一个标准"></a>JPA是一个标准</h2><p>实体管理器是JPA规范的一部分，而Hibernate是基于Session对象来实现自己的解决方案，也就是处理持久性。我们已经看到他们中的一个(JPA)是一个标准。我们需要记住的是，JPA是“独立出来的”API，它是一个标准，它描述了如何以标准化的方式处理对象持久化。它可以有多个实现。因此，如果你的应用程序基于JPA的实现，则可以随时在不同的实现之间切换。但对于Hibernate来说却不是这样，它可以但不一定与其他持久性解决方案兼容。</p>
<h2 id="Hibernate可以在JPA中使用"><a href="#Hibernate可以在JPA中使用" class="headerlink" title="Hibernate可以在JPA中使用"></a>Hibernate可以在JPA中使用</h2><p>下一个区别是用于管理持久性的类。在JPA中，我们查找EntityManagerFactory，EntityManager，可以发现它们都位于<strong>javax.persistence</strong>包中。Hibernate使用它自己的类来表示持久性上下文:<code>SessionFactory</code>，<code>Session</code>。由于JPA所在包(<code>hibernate-jpa-2.1-api</code>中的<code>javax.persistence包</code>)定义的基本都是接口，所以他们的实现可以是不同的(也就说所也可以是基于Hibernate来进行实现的)。</p>
<p>在使用Hibernate作为JPA实现的情况下，我们可以使用一些Hibernate所特有的功能。实际上，Hibernate的EntityManager实现调用了Session对象。我们可以从一些异常日志中观测到它，例如在关于<code>Hibernate/JPA中的锁</code>(下一篇文章，到时再补链接)的这篇文章中，我们可以看到:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">javax.persistence.RollbackException: Error <span class="keyword">while</span> committing the transaction</div><div class="line">  at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:<span class="number">92</span>)</div><div class="line">  at com.sandboxWebapp.hibernate.locking.LockingSample.pessimisticReadWithWrite(LockingSample.java:<span class="number">117</span>)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">57</span>)</div><div class="line">  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</div><div class="line">  at java.lang.reflect.Method.invoke(Method.java:<span class="number">606</span>)</div><div class="line">  at org.junit.runners.model.FrameworkMethod$<span class="number">1</span>.runReflectiveCall(FrameworkMethod.java:<span class="number">44</span>)</div><div class="line">  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:<span class="number">15</span>)</div><div class="line">  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:<span class="number">41</span>)</div><div class="line">  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:<span class="number">20</span>)</div><div class="line">  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:<span class="number">76</span>)</div><div class="line">  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:<span class="number">50</span>)</div><div class="line">  at org.junit.runners.ParentRunner$<span class="number">3</span>.run(ParentRunner.java:<span class="number">193</span>)</div><div class="line">  at org.junit.runners.ParentRunner$<span class="number">1</span>.schedule(ParentRunner.java:<span class="number">52</span>)</div><div class="line">  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:<span class="number">191</span>)</div><div class="line">  at org.junit.runners.ParentRunner.access$<span class="number">000</span>(ParentRunner.java:<span class="number">42</span>)</div><div class="line">  at org.junit.runners.ParentRunner$<span class="number">2</span>.evaluate(ParentRunner.java:<span class="number">184</span>)</div><div class="line">  at org.junit.runners.ParentRunner.run(ParentRunner.java:<span class="number">236</span>)</div><div class="line">  at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:<span class="number">264</span>)</div><div class="line">  at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:<span class="number">153</span>)</div><div class="line">  at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:<span class="number">124</span>)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">57</span>)</div><div class="line">  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</div><div class="line">  at java.lang.reflect.Method.invoke(Method.java:<span class="number">606</span>)</div><div class="line">  at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(ReflectionUtils.java:<span class="number">208</span>)</div><div class="line">  at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:<span class="number">159</span>)</div><div class="line">  at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:<span class="number">87</span>)</div><div class="line">  at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:<span class="number">153</span>)</div><div class="line">  at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:<span class="number">95</span>)</div><div class="line">Caused by: javax.persistence.LockTimeoutException: could not execute statement</div><div class="line">  at org.hibernate.ejb.AbstractEntityManagerImpl.wrapLockException(AbstractEntityManagerImpl.java:<span class="number">1440</span>)</div><div class="line">  at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:<span class="number">1339</span>)</div><div class="line">  at org.hibernate.ejb.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:<span class="number">1310</span>)</div><div class="line">  at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:<span class="number">80</span>)</div><div class="line">  ... <span class="number">29</span> more</div><div class="line">Caused by: org.hibernate.exception.LockTimeoutException: could not execute statement</div><div class="line">  at org.hibernate.dialect.MySQLDialect$<span class="number">1</span>.convert(MySQLDialect.java:<span class="number">408</span>)</div><div class="line">  at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:<span class="number">49</span>)</div><div class="line">  at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:<span class="number">125</span>)</div><div class="line">  at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:<span class="number">110</span>)</div><div class="line">  at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:<span class="number">136</span>)</div><div class="line">  at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:<span class="number">58</span>)</div><div class="line">  at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:<span class="number">3238</span>)</div><div class="line">  at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:<span class="number">3140</span>)</div><div class="line">  at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:<span class="number">3470</span>)</div><div class="line">  at org.hibernate.action.internal.EntityUpdateAction.execute(EntityUpdateAction.java:<span class="number">140</span>)</div><div class="line">  at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:<span class="number">393</span>)</div><div class="line">  at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:<span class="number">385</span>)</div><div class="line">  at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:<span class="number">302</span>)</div><div class="line">  at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:<span class="number">339</span>)</div><div class="line">  at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:<span class="number">52</span>)</div><div class="line">  <span class="comment">//请看此处</span></div><div class="line">  at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:<span class="number">1240</span>)</div><div class="line">  at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:<span class="number">404</span>)</div><div class="line">  at org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.beforeTransactionCommit(JdbcTransaction.java:<span class="number">101</span>)</div><div class="line">  at org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:<span class="number">175</span>)</div><div class="line">  at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:<span class="number">75</span>)</div><div class="line">  ... <span class="number">29</span> more</div><div class="line">Caused by: java.sql.SQLException: Lock wait timeout exceeded; <span class="keyword">try</span> restarting transaction</div><div class="line">  at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">1055</span>)</div><div class="line">  at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:<span class="number">956</span>)</div><div class="line">  at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:<span class="number">3491</span>)</div><div class="line">  at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:<span class="number">3423</span>)</div><div class="line">  at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:<span class="number">1936</span>)</div><div class="line">  at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:<span class="number">2060</span>)</div><div class="line">  at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:<span class="number">2542</span>)</div><div class="line">  at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:<span class="number">1734</span>)</div><div class="line">  at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:<span class="number">2019</span>)</div><div class="line">  at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:<span class="number">1937</span>)</div><div class="line">  at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:<span class="number">1922</span>)</div><div class="line">  at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:<span class="number">133</span>)</div><div class="line">  ... <span class="number">44</span> more</div></pre></td></tr></table></figure>
<p>这个异常代表一个锁超时，并使用Hibernate的会话(<code>Session</code>)来管理持久性。我们可以在下面的输出片段中观察它:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:<span class="number">1240</span>)</div><div class="line">at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:<span class="number">404</span>)</div></pre></td></tr></table></figure>
<p>想要从Hibernate的EntityManager实现中获取Session，通过下面简单的调用就能拿到了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Session session = entityManager.unwrap(Session.class);</div></pre></td></tr></table></figure>
<p>通过log日志记录这个<code>session</code>对象应该返回以下输出:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hibernate<span class="string">'s session is :SessionImpl(PersistenceContext[entityKeys=[],collectionKeys=[]];ActionQueue[insertions=[] updates=[] deletions=[] orphanRemovals=[] collectionCreations=[] collectionRemovals=[] collectionUpdates=[] collectionQueuedOps=[] unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])</span></div></pre></td></tr></table></figure>
<h2 id="Hibernate和JPA方法比较"><a href="#Hibernate和JPA方法比较" class="headerlink" title="Hibernate和JPA方法比较"></a>Hibernate和JPA方法比较</h2><p>这两者不仅只有以上的差异。有一些方法双方都有，但是名称不同。我们首先<strong>通过标识符</strong>来<strong>获取一个实体</strong>。Hibernate的<code>Session</code>使用一个称为<strong>get</strong>的方法，而JPA所使用的方法称为<strong>find。</strong>(源码 就不截取了，请自行建立环境去验证的)，本文所使用Hibernate版本为:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了<strong>从持久化上下文中分离出一个实体</strong>(也就是我们通常说的游离态)，Hibernate使用<strong>evict</strong>方法。JPA与更通用的函数命名:<strong>detach</strong> (分离)。两个方案都有通过<strong>persist</strong>方法<strong>将对象附加到持久化上下文</strong>。两者都可以用<strong>refresh</strong>方法刷新 实体(entity)的状态。Hibernate和JPA有另一个相似之处。他们可以通过调用 <strong>clear()方法</strong> 来清除持久化上下文。<strong>调用这个clear()方法会导致其中所有的实体分离(也就是游离化)。关于Session和EntityManager方法的区别，我们应该注意到Session有更多的方法来分析它的内部状态。</strong>关于内部状态，它们有一个通用方法称为<code>isOpen</code>，并允许检查<code>Session</code>或<code>EntityManager</code>是否处于打开状态。此外，Hibernate通过Session，我们可以检查它是否连接(isConnected)，是否包含脏(损坏的)数据(isDirty)，或者判断所处理对象(实体或代理)是否处于只读模式(isReadOnly)。关于对象状态的例子就不再次累述了，请参考<a href="http://blog.csdn.net/u014087286/article/details/47039349博文所述。" target="_blank" rel="external">http://blog.csdn.net/u014087286/article/details/47039349博文所述。</a></p>
<blockquote>
<p><strong>NOTE:Hibernate save()与persist()区别</strong></p>
<p>Hibernate 之所以提供与save()功能几乎完全类似的persist()方法，一方面是为了照顾JPA的用法习惯。另一方面，save()和 persist()方法还有一个区别:使用 save() 方法保存持久化对象时，该方法返回该持久化对象的标识属性值(即对应记录的主键值)；但使用 persist() 方法来保存持久化对象时，该方法没有任何返回值。因为 save() 方法需要立即返回持久化对象的标识属性，所以程序执行 save() 会立即将持久化对象对应的数据插入数据库；而 persist() 则保证当它在一个事物外部被调用时，并不立即转换成 insert 语句， 这个功能是很有用的，尤其当我们封装一个长会话流程的时候，persist() 方法就显得尤为重要了。</p>
<p>主要内容区别： </p>
<p>1，persist把一个瞬态的实例持久化，但是并”不保证”标识符(identifier主键对应的属性)被立刻填入到持久化实例中，标识符的填入可能被推迟到flush的时候。</p>
<p>2，save, 把一个瞬态的实例持久化标识符，及时的产生,它要返回标识符，所以它会立即执行Sql insert</p>
</blockquote>
<p>同样，关于<strong>查询对象</strong>，两者也是有名字不同但作用相同的方法。JPA 通过调用<strong>getSingleResult</strong>来<strong>获取单行</strong>和通过<strong>getResultList</strong>得到<strong>一个结果列表</strong>。Hibernate分别使<strong>uniqueResult</strong>和<strong>list</strong>方法来达到相同效果。在Hibernate5.2之前还有一些额外的方法来<strong>指定查询参数</strong>。通过它提供的<code>setters</code>，我们可以设置一个BigInteger，BigDecimal，二进制，布尔，字节，字符串或日期。在Hibernate5.2之后，和JPA规范进行统一化，统一调用<code>setParameter</code>这个方法来达到相应目的。</p>
<p>这篇简短的文章描述了JPA和Hibernate的Session持久化机制之间的差异和相似之处。两者都被用来做同样的事情，将Java对象持久化到数据库中去。他们分别通过EntityManager(JPA)和Session(Hibernate)对象管理持久化上下文(persistence context)来实现它。但他们在工作过程中也有一些相似之处。两者都可以通过<code>persist</code>来持久化实体和通过<code>clear</code>方法从持久化上下文分离实体(使之 游离化)。一般来说，更抽象和标准化的解决方案对于应用程序的可移植性来说更好。而使用Hibernate，我们不能轻易地将其转移到另一个持久性框架中。通过在Hibernate中使用JPA的实现(不使用Hibernate特有的功能)，可以更容易实现代码的可移植性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JPA-amp-Hibernate—SessionFactory和EntityManagerFactory之间的区别&quot;&gt;&lt;a href=&quot;#JPA-amp-Hibernate—SessionFactory和EntityManagerFactory之间的区别&quot; class=&quot;headerlink&quot; title=&quot;JPA&amp;amp;Hibernate—SessionFactory和EntityManagerFactory之间的区别&quot;&gt;&lt;/a&gt;JPA&amp;amp;Hibernate—SessionFactory和EntityManagerFactory之间的区别&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在谈Spring Data之前，要先讲讲JPA，讲JPA，又不免会说到Hibernate，那就从Hibernate开始说起吧。&lt;/p&gt;
&lt;p&gt;因为很多人都喜欢把JPA和Hibernate混为一谈，这个系列文章会把这个问题讲明白。&lt;/p&gt;
&lt;p&gt;有两种方法来处理Hibernate中的持久性:会话(session)和实体管理器。通过这篇文章，我们将分析这两种机制的区别。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JPA" scheme="https://muyinchen.github.io/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Refresh your Java skills--面对Java学习过程中的一些迷茫</title>
    <link href="https://muyinchen.github.io/2017/11/14/Refresh%20your%20Java%20skills--%E9%9D%A2%E5%AF%B9Java%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%BF%B7%E8%8C%AB/"/>
    <id>https://muyinchen.github.io/2017/11/14/Refresh your Java skills--面对Java学习过程中的一些迷茫/</id>
    <published>2017-11-14T10:46:25.000Z</published>
    <updated>2017-11-14T10:07:52.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Refresh-your-Java-skills–面对Java学习过程中的一些迷茫"><a href="#Refresh-your-Java-skills–面对Java学习过程中的一些迷茫" class="headerlink" title="Refresh your Java skills–面对Java学习过程中的一些迷茫"></a>Refresh your Java skills–面对Java学习过程中的一些迷茫</h1><p>很多时候，我们学习Java，开始的时候觉得很容易，越到后面，内容越多，反而心烦气躁起来，学了忘，忘了学，依然会忘，总是摸不到窍门，再看到社会上和身边都是搞Java的，竞争压力可想一般，看到github上人家写的牛逼哄哄的程序，自己又什么都不会，只会一些简单的Demo，更复杂的逻辑想想都头大，当学到框架之后，自己慢慢变得只会套用框架，玩玩CRUD，导致很多人认为，只要会crud，只要会写关于crud之类的业务就可以了，其他都是在 一味的调用api来完成各种组合。于是，你慢慢就害怕咯，后来者学的太快，而且还是全新的知识，自己只会所谓的业务，这些业务的生命周期，不过就是几年光景，当自己想跳槽的时候，一点底气都没。</p>
<p>将话题回归，面对日益更新的编程行业，每天都会有全新的概念，全新的技术诞生，如何立之于不败，其实大家都懂，以不变应万变，以静制动。就好比我们高中时做题一样，无论题型如何变，如何复杂，不都还是书中的那些基础知识，于是我们老师一直在给我们强调基础的重要性，我们也在一遍一遍的通过做题来加强我们对于基础的理解。这些基础就是不变的东西，也是静物。</p>
<p>同样，对于编程语言来讲，其首先是一门语言，我很纳闷国内大学为什么不把编译原理放在大二的时候就开始讲的，哪怕讲的简单一点，可以让学生知道你们是在学习和汉语英语一样的东西，都有词法分析，语法分析，语义分析。而语言是用来表达思想的，没有思想，你只能是一个行尸走肉，这就是国人学习编程最可悲的地方，无视算法的重要性，它是我们组织逻辑的基础，我们的思维需要这些逻辑和相应的语言来表达，而国内太多的培训机构两者皆可抛，大学教育同样如此，只是大家都知道重要，都不去做，因为知道，它不能给你带来短期快速收益，它在你看来不是前沿的东西，殊不知，这些才是最前沿的，经久不衰，各种技术换汤不换药，用的都是他们。</p>
<p>总结出来，论数据结构和算法的重要性，论基础的重要性，有时候自己迷茫的时候，回归下算法，回归下基础，Java的话，我们可以深入一些我们平时使用的API,其内部用了什么样的算法，一个小程序内部是算法，几个类组成的大点的程序，可能是按照设计模式来进行的，而设计模式，又何尝不是一种别样的算法，属于我们抽象出来的解决事情的标准。不扯更多了，沉淀自己，坚持学习，就这么简单，仅此而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Refresh-your-Java-skills–面对Java学习过程中的一些迷茫&quot;&gt;&lt;a href=&quot;#Refresh-your-Java-skills–面对Java学习过程中的一些迷茫&quot; class=&quot;headerlink&quot; title=&quot;Refresh yo
    
    </summary>
    
      <category term="Java9" scheme="https://muyinchen.github.io/categories/Java9/"/>
    
    
      <category term="Java" scheme="https://muyinchen.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Refresh your Java skills--聊聊Java9 中模块化所基于的文件系统 JRTFS</title>
    <link href="https://muyinchen.github.io/2017/11/12/Refresh%20your%20Java%20skills--%E8%81%8A%E8%81%8AJava9%20%E4%B8%AD%E6%A8%A1%E5%9D%97%E5%8C%96%E6%89%80%E5%9F%BA%E4%BA%8E%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%20JRTFS/"/>
    <id>https://muyinchen.github.io/2017/11/12/Refresh your Java skills--聊聊Java9 中模块化所基于的文件系统 JRTFS/</id>
    <published>2017-11-12T08:46:25.000Z</published>
    <updated>2017-11-12T08:55:33.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Refresh-your-Java-skills–聊聊Java9-中模块化所基于的文件系统-JRTFS"><a href="#Refresh-your-Java-skills–聊聊Java9-中模块化所基于的文件系统-JRTFS" class="headerlink" title="Refresh your Java skills–聊聊Java9 中模块化所基于的文件系统 JRTFS"></a>Refresh your Java skills–聊聊Java9 中模块化所基于的文件系统 JRTFS</h1><p>说到文件系统我们很容易就想到Linux，windows操作系统的文件系统，对应到我们的生活中，我们想去一所学校找到某个学生，假如你不了解学号所代表的意义，那就只能是一点一点的找了，不过绝对知道这个学生是几年级，然后一个班一个班的找，假如了解学号的意义的话我们就可以直接定位到哪一栋楼，哪一间教室。</p>
<p>说的再直白点，不就是是个找啊找啊找朋友的游戏么。这也就是我们排序查找的算法了，而面向大量有用数据最好的实践就是用树形结构来统筹，于是我们的数据库的索引，我们的zookeeper的节点管理，小到我们Java里使用的红黑树，以及对hashmap的优化等等，就是因为其复杂度可以降到最低，只需要凭借树的高度就可以快速找到我们所要找的数据了。</p>
<p>说了这么多，就是想要表达的是，我们的Java9中所设计的全新的JRTFS也是基于树来表达的。<br><a id="more"></a></p>
<h2 id="文件系统的设计"><a href="#文件系统的设计" class="headerlink" title="文件系统的设计"></a>文件系统的设计</h2><p>我们往往会将一堆数据分析其成分，然后抽取出结构来对其组织，往往我们碰到的最多的是表结构和其数据，结构定义和数据要分开存放，这里我们首先对其进行结构的定义，接着我们要将每一份数据进行穿针引线，做成一个体系，其实就是一个索引体系，我们要做的就是对其每一个节点的管理。而最后所建立起的索引系统可以作为一个专门的文件来存放(windows系统下面的话请参照<code>C:\Program Files\Java\jdk-9.0.1\lib\modules</code>这个文件)，我们的结构定义作为一个专门的jar文件来存放(windows系统下面的话请参照<code>C:\Program Files\Java\jdk-9.0.1\lib\jrt-fs.jar</code>)</p>
<h3 id="组织结构定义中基本文件的设计"><a href="#组织结构定义中基本文件的设计" class="headerlink" title="组织结构定义中基本文件的设计"></a>组织结构定义中基本文件的设计</h3><p>我们可以参考Linux文件系统，其一个文件应该包含什么样的基本属性:<code>name</code>,可读性，创建时间，最后修改时间，最后访问时间。</p>
<p>我们把我们的目光转向<code>jdk.internal.jrtfs</code>这个包下。找到<code>jdk.internal.jrtfs.JrtFileAttributes</code>,因为Java9要兼容Java8的东西，所以势必要做两种不一样的考虑，那么此处就应该开始做一个岔路口。里面定义了上面所说的这些基本属性。同样，我们可以看到它是基于树的节点控制来做到的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * File attributes implementation for jrt image file system.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@implNote</span> This class needs to maintain JDK 8 source compatibility.</div><div class="line"> *</div><div class="line"> * It is used internally in the JDK to implement jimage/jrtfs access,</div><div class="line"> * but also compiled and delivered as part of the jrtfs.jar to support access</div><div class="line"> * to the jimage file provided by the shipped JDK by tools running on JDK 8.</div><div class="line"> */</div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JrtFileAttributes</span>  <span class="keyword">implements</span> <span class="title">BasicFileAttributes</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node node;</div><div class="line"></div><div class="line">    JrtFileAttributes(Node node) &#123;</div><div class="line">        <span class="keyword">this</span>.node = node;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">///////// basic attributes ///////////</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FileTime <span class="title">creationTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.creationTime();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.isDirectory();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOther</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRegularFile</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> !isDirectory();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FileTime <span class="title">lastAccessTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.lastAccessTime();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FileTime <span class="title">lastModifiedTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.lastModifiedTime();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymbolicLink</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.isLink();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">fileKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.resolveLink(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">///////// jrtfs specific attributes ///////////</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Compressed resource file. If not available or not applicable, 0L is</div><div class="line">     * returned.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> the compressed resource size for compressed resources.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">compressedSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.compressedSize();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * "file" extension of a file resource.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> extension string for the file resource</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">extension</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node.extension();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</div><div class="line">        <span class="keyword">try</span> (Formatter fm = <span class="keyword">new</span> Formatter(sb)) &#123;</div><div class="line">            <span class="keyword">if</span> (creationTime() != <span class="keyword">null</span>) &#123;</div><div class="line">                fm.format(<span class="string">"    creationTime    : %tc%n"</span>, creationTime().toMillis());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                fm.format(<span class="string">"    creationTime    : null%n"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (lastAccessTime() != <span class="keyword">null</span>) &#123;</div><div class="line">                fm.format(<span class="string">"    lastAccessTime  : %tc%n"</span>, lastAccessTime().toMillis());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                fm.format(<span class="string">"    lastAccessTime  : null%n"</span>);</div><div class="line">            &#125;</div><div class="line">            fm.format(<span class="string">"    lastModifiedTime: %tc%n"</span>, lastModifiedTime().toMillis());</div><div class="line">            fm.format(<span class="string">"    isRegularFile   : %b%n"</span>, isRegularFile());</div><div class="line">            fm.format(<span class="string">"    isDirectory     : %b%n"</span>, isDirectory());</div><div class="line">            fm.format(<span class="string">"    isSymbolicLink  : %b%n"</span>, isSymbolicLink());</div><div class="line">            fm.format(<span class="string">"    isOther         : %b%n"</span>, isOther());</div><div class="line">            fm.format(<span class="string">"    fileKey         : %s%n"</span>, fileKey());</div><div class="line">            fm.format(<span class="string">"    size            : %d%n"</span>, size());</div><div class="line">            fm.format(<span class="string">"    compressedSize  : %d%n"</span>, compressedSize());</div><div class="line">            fm.format(<span class="string">"    extension       : %s%n"</span>, extension());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就可以有组成一个树形文件系统的节点定义了。</p>
<h3 id="文件系统镜像的入口设定"><a href="#文件系统镜像的入口设定" class="headerlink" title="文件系统镜像的入口设定"></a>文件系统镜像的入口设定</h3><p>接着通过<code>jdk.internal.jrtfs.SystemImage</code>来作为文件系统的加载入口，在初始化这个类的时候，会首先把静态代码块给执行，接着，我们会在<code>jdk.internal.jrtfs.JrtFileSystem</code> 其构造函数中发现其调用了<code>SystemImage.open()</code>方法，可以知道其首先会检查<code>C:\Program Files\Java\jdk-9.0.1\lib\modules</code>这个文件是否存在，存在，就使用<code>jdk.internal.jimage.ImageReader</code>中的静态内部类<code>jdk.internal.jimage.ImageReader.SharedImageReader</code>来对此文件的进行读取然后建立相应的文件系统镜像:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemImage</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> Node <span class="title">findNode</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">byte</span>[] getResource(Node node) <span class="keyword">throws</span> IOException;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> SystemImage <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (modulesImageExists) &#123;</div><div class="line">            <span class="comment">// open a .jimage and build directory structure</span></div><div class="line">            <span class="keyword">final</span> ImageReader image = ImageReader.open(moduleImageFile);</div><div class="line">            image.getRootDirectory();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SystemImage() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function">Node <span class="title">findNode</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    <span class="keyword">return</span> image.findNode(path);</div><div class="line">                &#125;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="keyword">byte</span>[] getResource(Node node) <span class="keyword">throws</span> IOException &#123;</div><div class="line">                    <span class="keyword">return</span> image.getResource(node);</div><div class="line">                &#125;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    image.close();</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (Files.notExists(explodedModulesDir))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileSystemNotFoundException(explodedModulesDir.toString());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExplodedImage(explodedModulesDir);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String RUNTIME_HOME;</div><div class="line">    <span class="comment">// "modules" jimage file Path</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Path moduleImageFile;</div><div class="line">    <span class="comment">// "modules" jimage exists or not?</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> modulesImageExists;</div><div class="line">    <span class="comment">// &lt;JAVA_HOME&gt;/modules directory Path</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Path explodedModulesDir;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        PrivilegedAction&lt;String&gt; pa = SystemImage::findHome;</div><div class="line">        RUNTIME_HOME = AccessController.doPrivileged(pa);</div><div class="line"></div><div class="line">        FileSystem fs = FileSystems.getDefault();</div><div class="line">        moduleImageFile = fs.getPath(RUNTIME_HOME, <span class="string">"lib"</span>, <span class="string">"modules"</span>);</div><div class="line">        explodedModulesDir = fs.getPath(RUNTIME_HOME, <span class="string">"modules"</span>);</div><div class="line"></div><div class="line">        modulesImageExists = AccessController.doPrivileged(</div><div class="line">            <span class="keyword">new</span> PrivilegedAction&lt;Boolean&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> Files.isRegularFile(moduleImageFile);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the appropriate JDK home for this usage of the FileSystemProvider.</div><div class="line">     * When the CodeSource is null (null loader) then jrt:/ is the current runtime,</div><div class="line">     * otherwise the JDK home is located relative to jrt-fs.jar.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">findHome</span><span class="params">()</span> </span>&#123;</div><div class="line">        CodeSource cs = SystemImage.class.getProtectionDomain().getCodeSource();</div><div class="line">        <span class="keyword">if</span> (cs == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> System.getProperty(<span class="string">"java.home"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// assume loaded from $TARGETJDK/lib/jrt-fs.jar</span></div><div class="line">        URL url = cs.getLocation();</div><div class="line">        <span class="keyword">if</span> (!url.getProtocol().equalsIgnoreCase(<span class="string">"file"</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(url + <span class="string">" loaded in unexpected way"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Path lib = Paths.get(url.toURI()).getParent();</div><div class="line">            <span class="keyword">if</span> (!lib.getFileName().toString().equals(<span class="string">"lib"</span>))</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(url + <span class="string">" unexpected path"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> lib.getParent().toString();</div><div class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，上面这个类的定义，我们可以把启动封装一个open方法，最后在大一统实现文件系统的时候集中调用，每个类做好自己那份事情就好。</p>
<p><code>jdk.internal.jrtfs.JrtFileSystem</code>的构造器:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JrtFileSystem</span> <span class="keyword">extends</span> <span class="title">FileSystem</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JrtFileSystemProvider provider;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JrtPath rootPath = <span class="keyword">new</span> JrtPath(<span class="keyword">this</span>, <span class="string">"/"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isOpen;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isClosable;</div><div class="line">    <span class="keyword">private</span> SystemImage image;</div><div class="line"></div><div class="line">    JrtFileSystem(JrtFileSystemProvider provider, Map&lt;String, ?&gt; env)</div><div class="line">            <span class="keyword">throws</span> IOException</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.provider = provider;</div><div class="line">        <span class="keyword">this</span>.image = SystemImage.open();  <span class="comment">// open image file</span></div><div class="line">        <span class="keyword">this</span>.isOpen = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">this</span>.isClosable = env != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="提供结构定义并设定加载文件系统入口"><a href="#提供结构定义并设定加载文件系统入口" class="headerlink" title="提供结构定义并设定加载文件系统入口"></a>提供结构定义并设定加载文件系统入口</h3><p>通过前面提到的索引数据和结构定义数据分开的可以知道，我们的结构定义也是需要有的，那么，走进<code>jdk.internal.jrtfs.JrtFileSystemProvider</code>来看看其内在乾坤，从下面的源码中可以知道，<code>JrtFileSystemProvider</code> 会判断区分当前的环境状态(这里要求必须存在<code>C:\Program Files\Java\jdk-9.0.1\lib\jrt-fs.jar</code>)，首先拿到<code>jrt-fs.jar</code>的路径，其实通过<code>URLClassLoader.loadClass(String name, boolean resolve)</code>得到Classloader实例，加载完这些结构定义之后，返回一个<code>FileSystem</code>实例(<code>return new JrtFileSystem(this, env);</code>)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JrtFileSystemProvider</span> <span class="keyword">extends</span> <span class="title">FileSystemProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> FileSystem theFileSystem;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JrtFileSystemProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getScheme</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"jrt"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Need RuntimePermission "accessSystemModules" to create or get jrt:/</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">()</span> </span>&#123;</div><div class="line">        SecurityManager sm = System.getSecurityManager();</div><div class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</div><div class="line">            RuntimePermission perm = <span class="keyword">new</span> RuntimePermission(<span class="string">"accessSystemModules"</span>);</div><div class="line">            sm.checkPermission(perm);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">   <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FileSystem <span class="title">newFileSystem</span><span class="params">(URI uri, Map&lt;String, ?&gt; env)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException &#123;</div><div class="line">        Objects.requireNonNull(env);</div><div class="line">        checkPermission();</div><div class="line">        checkUri(uri);</div><div class="line">        <span class="keyword">if</span> (env.containsKey(<span class="string">"java.home"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> newFileSystem((String)env.get(<span class="string">"java.home"</span>), uri, env);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JrtFileSystem(<span class="keyword">this</span>, env);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JRT_FS_JAR = <span class="string">"jrt-fs.jar"</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> FileSystem <span class="title">newFileSystem</span><span class="params">(String targetHome, URI uri, Map&lt;String, ?&gt; env)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException &#123;</div><div class="line">        Objects.requireNonNull(targetHome);</div><div class="line">        Path jrtfs = FileSystems.getDefault().getPath(targetHome, <span class="string">"lib"</span>, JRT_FS_JAR);</div><div class="line">        <span class="keyword">if</span> (Files.notExists(jrtfs)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(jrtfs.toString() + <span class="string">" not exist"</span>);</div><div class="line">        &#125;</div><div class="line">        Map&lt;String,?&gt; newEnv = <span class="keyword">new</span> HashMap&lt;&gt;(env);</div><div class="line">        newEnv.remove(<span class="string">"java.home"</span>);</div><div class="line">        ClassLoader cl = newJrtFsLoader(jrtfs);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; c = Class.forName(JrtFileSystemProvider.class.getName(), <span class="keyword">false</span>, cl);</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">            Object tmp = c.newInstance();</div><div class="line">            <span class="keyword">return</span> ((FileSystemProvider)tmp).newFileSystem(uri, newEnv);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException |</div><div class="line">                 IllegalAccessException |</div><div class="line">                 InstantiationException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="文件系统路径定义"><a href="#文件系统路径定义" class="headerlink" title="文件系统路径定义"></a>文件系统路径定义</h3><p>既然是文件系统，路径这块总要有定义的，就好像Linux使用<code>/</code>作为根，对于Jrtfs来说，同样要有相应定义的。<code>jdk.internal.jrtfs.JrtPath</code> 就是<code>jrt file systems</code>关于<code>Path</code>的基本实现类。</p>
<p>作为一个<code>Path</code>其解析的肯定是一个URI字符串路径，对于操作字符串，我们用的比较多的有切分，而且字符串内部用的比较多的同样有<code>offset</code>，和判断<code>/home/abc/ddd</code>一样，我们通过确认<code>/</code>这个约定来对文件系统进行分层，确定父子 关系，就好像我们的<code>/Base/A模块/B模块/C模块</code>,要获取某些操作，我们都需要先对这个路径以<code>/</code>做偏移量操作，以方便快速获取到某模块的名字。而我们的很多方法刚开始都会调用<code>initOffsets();</code>,那我们来看看这个方法的具体操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create offset list if not already created</span></div><div class="line"><span class="comment">//首先确定`/`的字符数量，来确定模块数量</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initOffsets</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.offsets == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> len = path.length();</div><div class="line">            <span class="comment">// count names</span></div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> off = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (off &lt; len) &#123;</div><div class="line">                <span class="keyword">char</span> c = path.charAt(off++);</div><div class="line">              <span class="comment">//排除多个"//..."相连的情况，两个，三个等等，当"/"后面是其他的时候，说明就是一个模块</span></div><div class="line">                <span class="keyword">if</span> (c != <span class="string">'/'</span>) &#123;</div><div class="line">                    count++;</div><div class="line">                    off = path.indexOf(<span class="string">'/'</span>, off);</div><div class="line">                    <span class="keyword">if</span> (off == -<span class="number">1</span>)</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// populate offsets</span></div><div class="line">          <span class="comment">//计算这个模块路径上，每个模块所在的偏移量位置，方便快速拿到</span></div><div class="line">            <span class="keyword">int</span>[] offsets = <span class="keyword">new</span> <span class="keyword">int</span>[count];</div><div class="line">            count = <span class="number">0</span>;</div><div class="line">            off = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (off &lt; len) &#123;</div><div class="line">                <span class="keyword">char</span> c = path.charAt(off);</div><div class="line">                <span class="keyword">if</span> (c == <span class="string">'/'</span>) &#123;</div><div class="line">                    off++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    offsets[count++] = off++;</div><div class="line">                    off = path.indexOf(<span class="string">'/'</span>, off);</div><div class="line">                    <span class="keyword">if</span> (off == -<span class="number">1</span>)</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.offsets = offsets;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>然后再加入一个<code>JrtFileSystem</code>,自然很多事情就可以做到了，此处就不再多说了。</p>
<h3 id="Jrt文件系统的文件存储实现"><a href="#Jrt文件系统的文件存储实现" class="headerlink" title="Jrt文件系统的文件存储实现"></a>Jrt文件系统的文件存储实现</h3><p>其实<code>Jrt  file systems</code>的文件存储实现很简单，可以说没什么内容，因为是内存里建立起来的镜像文件系统，它也只提供了一些基本的约束，如，文件系统应该以什么为开头等等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JrtFileStore</span> <span class="keyword">extends</span> <span class="title">FileStore</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> FileSystem jrtfs;</div><div class="line"></div><div class="line">    JrtFileStore(JrtPath jrtPath) &#123;</div><div class="line">        <span class="keyword">this</span>.jrtfs = jrtPath.getFileSystem();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jrtfs.toString()<span class="comment">/*"jrt:/"*/</span> + <span class="string">"/"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">type</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"jrtfs"</span>;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">//JRT文件系统的话，返回的是true</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jrtfs.isReadOnly();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsFileAttributeView</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name.equals(<span class="string">"basic"</span>) || name.equals(<span class="string">"jrt"</span>);</div><div class="line">    &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Jrtfs中文件属性视图的设定"><a href="#Jrtfs中文件属性视图的设定" class="headerlink" title="Jrtfs中文件属性视图的设定"></a>Jrtfs中文件属性视图的设定</h3><p>我们在写web项目的时候，往往会使用DTO来展示这些公开的数据，对于文件系统中的文件也是，这就出现了文件属性视图的需求，包括读取和对这些公开属性的设定，比如文件的创建修改时间。</p>
<p>我们找到<code>java.nio.file.attribute.BasicFileAttributeView</code>这个接口，里面定义了上面所说的这些基本属性。然后我们通过<code>jdk.internal.jrtfs.JrtFileAttributeView</code>来对其进行实现。</p>
<p>我们可以通过文件系统类的类型是否相等来判断到底是使用老版本的通过classpath来加载的方式，还是通过Jrtfs的方式来加载。请看如下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// Cast to V</span></div><div class="line">   <span class="keyword">static</span> &lt;V extends FileAttributeView&gt; <span class="function">V <span class="title">get</span><span class="params">(JrtPath path, Class&lt;V&gt; type, LinkOption... options)</span> </span>&#123;</div><div class="line">       Objects.requireNonNull(type);</div><div class="line">       <span class="keyword">if</span> (type == BasicFileAttributeView.class) &#123;</div><div class="line">           <span class="keyword">return</span> (V) <span class="keyword">new</span> JrtFileAttributeView(path, <span class="keyword">false</span>, options);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (type == JrtFileAttributeView.class) &#123;</div><div class="line">           <span class="keyword">return</span> (V) <span class="keyword">new</span> JrtFileAttributeView(path, <span class="keyword">true</span>, options);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>也可以通过一个<code>String</code>关键字来判断:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> JrtFileAttributeView <span class="title">get</span><span class="params">(JrtPath path, String type, LinkOption... options)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(type);</div><div class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"basic"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JrtFileAttributeView(path, <span class="keyword">false</span>, options);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"jrt"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JrtFileAttributeView(path, <span class="keyword">true</span>, options);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isJrtView ? <span class="string">"jrt"</span> : <span class="string">"basic"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>基本属性的话，首先对所操作属性进行判断了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">attribute</span><span class="params">(AttrID id, JrtFileAttributes jrtfas, <span class="keyword">boolean</span> isJrtView)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (id) &#123;</div><div class="line">            <span class="keyword">case</span> size:</div><div class="line">                <span class="keyword">return</span> jrtfas.size();</div><div class="line">            <span class="keyword">case</span> creationTime:</div><div class="line">                <span class="keyword">return</span> jrtfas.creationTime();</div><div class="line">            <span class="keyword">case</span> lastAccessTime:</div><div class="line">                <span class="keyword">return</span> jrtfas.lastAccessTime();</div><div class="line">            <span class="keyword">case</span> lastModifiedTime:</div><div class="line">                <span class="keyword">return</span> jrtfas.lastModifiedTime();</div><div class="line">            <span class="keyword">case</span> isDirectory:</div><div class="line">                <span class="keyword">return</span> jrtfas.isDirectory();</div><div class="line">            <span class="keyword">case</span> isRegularFile:</div><div class="line">                <span class="keyword">return</span> jrtfas.isRegularFile();</div><div class="line">            <span class="keyword">case</span> isSymbolicLink:</div><div class="line">                <span class="keyword">return</span> jrtfas.isSymbolicLink();</div><div class="line">            <span class="keyword">case</span> isOther:</div><div class="line">                <span class="keyword">return</span> jrtfas.isOther();</div><div class="line">            <span class="keyword">case</span> fileKey:</div><div class="line">                <span class="keyword">return</span> jrtfas.fileKey();</div><div class="line">            <span class="keyword">case</span> compressedSize:</div><div class="line">                <span class="keyword">if</span> (isJrtView) &#123;</div><div class="line">                    <span class="keyword">return</span> jrtfas.compressedSize();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> extension:</div><div class="line">                <span class="keyword">if</span> (isJrtView) &#123;</div><div class="line">                    <span class="keyword">return</span> jrtfas.extension();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里的枚举类型，也是我们这个类中定义的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">enum</span> AttrID &#123;</div><div class="line">       size,</div><div class="line">       creationTime,</div><div class="line">       lastAccessTime,</div><div class="line">       lastModifiedTime,</div><div class="line">       isDirectory,</div><div class="line">       isRegularFile,</div><div class="line">       isSymbolicLink,</div><div class="line">       isOther,</div><div class="line">       fileKey,</div><div class="line">       compressedSize,</div><div class="line">       extension</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
<p>就到此吧，关于更多对模块的解读，留在下一篇去说。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Refresh-your-Java-skills–聊聊Java9-中模块化所基于的文件系统-JRTFS&quot;&gt;&lt;a href=&quot;#Refresh-your-Java-skills–聊聊Java9-中模块化所基于的文件系统-JRTFS&quot; class=&quot;headerlink&quot; title=&quot;Refresh your Java skills–聊聊Java9 中模块化所基于的文件系统 JRTFS&quot;&gt;&lt;/a&gt;Refresh your Java skills–聊聊Java9 中模块化所基于的文件系统 JRTFS&lt;/h1&gt;&lt;p&gt;说到文件系统我们很容易就想到Linux，windows操作系统的文件系统，对应到我们的生活中，我们想去一所学校找到某个学生，假如你不了解学号所代表的意义，那就只能是一点一点的找了，不过绝对知道这个学生是几年级，然后一个班一个班的找，假如了解学号的意义的话我们就可以直接定位到哪一栋楼，哪一间教室。&lt;/p&gt;
&lt;p&gt;说的再直白点，不就是是个找啊找啊找朋友的游戏么。这也就是我们排序查找的算法了，而面向大量有用数据最好的实践就是用树形结构来统筹，于是我们的数据库的索引，我们的zookeeper的节点管理，小到我们Java里使用的红黑树，以及对hashmap的优化等等，就是因为其复杂度可以降到最低，只需要凭借树的高度就可以快速找到我们所要找的数据了。&lt;/p&gt;
&lt;p&gt;说了这么多，就是想要表达的是，我们的Java9中所设计的全新的JRTFS也是基于树来表达的。&lt;br&gt;
    
    </summary>
    
      <category term="Java9" scheme="https://muyinchen.github.io/categories/Java9/"/>
    
    
      <category term="Java" scheme="https://muyinchen.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Refresh your Java skills--聊聊Java9 中模块化设计是如何实现类似IOC依赖注入效果及与其区别</title>
    <link href="https://muyinchen.github.io/2017/11/07/Refresh%20your%20Java%20skills--%E8%81%8A%E8%81%8AJava9%20%E4%B8%AD%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AE%BE%E8%AE%A1%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0IOC%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%95%88%E6%9E%9C%E7%9A%84/"/>
    <id>https://muyinchen.github.io/2017/11/07/Refresh your Java skills--聊聊Java9 中模块化设计是如何实现IOC依赖注入效果的/</id>
    <published>2017-11-07T12:00:25.000Z</published>
    <updated>2017-11-12T08:47:54.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Refresh-your-Java-skills–聊聊Java9-中模块化设计是如何实现类似IOC依赖注入效果及与其区别"><a href="#Refresh-your-Java-skills–聊聊Java9-中模块化设计是如何实现类似IOC依赖注入效果及与其区别" class="headerlink" title="Refresh your Java skills–聊聊Java9 中模块化设计是如何实现类似IOC依赖注入效果及与其区别"></a>Refresh your Java skills–聊聊Java9 中模块化设计是如何实现类似IOC依赖注入效果及与其区别</h1><h2 id="场景引入"><a href="#场景引入" class="headerlink" title="场景引入"></a>场景引入</h2><p>如何实现IOC的效果，我们可以来想想，无非就是一个隐式实现，而想要做到，总不能什么都没有，来个巧妇难为无米之炊的境地吧，所以说，米必须要有滴，在Spring中就是一个bean，也就是说，容器里得有米，再官话点就是上下文中得存在所需要的bean。同样模块化中两个互相隔离的模块想要达到这种效果，也要先往jvm里扔个对象进去的，然后<strong>who use ，who get</strong> 就可以了。<br><a id="more"></a><br>请看例子(可以认为是我们平常写的SpringMVC项目中的service-&gt;serviceImpl-&gt;controller):</p>
<h3 id="service接口化模块"><a href="#service接口化模块" class="headerlink" title="service接口化模块"></a>service接口化模块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.api;</div><div class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CodecFactory</span> </span>&#123;</div><div class="line">          <span class="function">Encoder <span class="title">getEncoder</span><span class="params">(String encodingName)</span></span>;</div><div class="line">          <span class="function">Decoder <span class="title">getDecoder</span><span class="params">(String encodingName)</span></span>;</div><div class="line">        </div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>上面这个接口所在的模块定义:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> migo.codec.api &#123;</div><div class="line">   <span class="keyword">exports</span> com.example.api;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="serviceImpl化模块"><a href="#serviceImpl化模块" class="headerlink" title="serviceImpl化模块"></a>serviceImpl化模块</h3><p>接着，我们定义一个实现模块:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> migo.codec.service &#123;</div><div class="line">   <span class="keyword">requires</span> com.example.api;</div><div class="line"></div><div class="line">   provides com.example.api.CodecFactory with com.example.service.codec.CodecFactoryImpl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体实现就省略了。</p>
<h3 id="controller化模块"><a href="#controller化模块" class="headerlink" title="controller化模块"></a>controller化模块</h3><p>最后我们在最上层的模块内使用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> migo.codec.controller &#123;</div><div class="line">   <span class="keyword">requires</span> migo.codec.api;</div><div class="line"></div><div class="line">   uses com.example.api.CodecFactory;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体的controller模块内使用的代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ServiceLoader&lt;CodecFactory&gt; loader = ServiceLoader.load(CodecFactory.class);</div><div class="line">      <span class="keyword">for</span> (CodecFactory factory : loader) &#123;</div><div class="line">          Encoder enc = factory.getEncoder(<span class="string">"PNG"</span>);</div><div class="line">          <span class="keyword">if</span> (enc != <span class="keyword">null</span>)</div><div class="line">              ... use enc to encode a PNG file</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<p>或者:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">    CodecFactory cf =</div><div class="line">      ServiceLoader.load(CodecFactory.class)</div><div class="line">                   .findFirst()</div><div class="line">                   .orElse(getFallBack());</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(cf == <span class="keyword">null</span>) &#123;</div><div class="line">        System.out.println(<span class="string">"Using a fallback"</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(<span class="string">"Found a service"</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CodecFactory <span class="title">getFallBack</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>亦或者假如有很多服务实现的提供者，而某个提供服务实现的provider(也就是serviceImpl)上面有添加注解<code>@PNG</code>，而我们想使用带有这个注解的实例，可以使用以下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ServiceLoader&lt;CodecFactory&gt; loader = ServiceLoader.load(CodecFactory.class);</div><div class="line">      Set&lt;CodecFactory&gt; pngFactories = loader</div><div class="line">             .stream()                                              </div><div class="line">             .filter(p -&gt; p.type().isAnnotationPresent(PNG.class))  </div><div class="line">             .map(Provider::get)                                   </div><div class="line">             .collect(Collectors.toSet());</div></pre></td></tr></table></figure>
<h2 id="内部工作机制原理"><a href="#内部工作机制原理" class="headerlink" title="内部工作机制原理"></a>内部工作机制原理</h2><h3 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路:"></a>具体思路:</h3><p>通过在模块定义里面的<strong>provides aaa with aaaImpl</strong> 这个功能，可以很容易的想到<code>key value</code>组合<br>当我们碰到这对关键字的时候，我们就会解析并将<code>aaa</code>做为<code>key</code>，<code>aaaImpl</code>添加到一个<code>list</code>中并将这个<code>list</code>作为<code>value</code>，并添加到一个<code>Map&lt;String,list&gt;</code>中<br>在我们碰到<code>uses</code>关键字（源码里面<code>acc</code>会去确定这个权限），并通过<code>ServiceLoader.load(key)</code>来找到这个key所对应的一个包含了实现类具体地址的list，可能有多个，那么，拓展功能，我们使用一个装饰模式，也就是继承了<code>Iterable</code>这个接口，可以达到遍历并生成具体实例来达到要求。</p>
<h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h3 id="确定米粒的路径"><a href="#确定米粒的路径" class="headerlink" title="确定米粒的路径"></a>确定米粒的路径</h3><p>那么按照这个思路，我们反着来找下，这里只列关键代码:</p>
<p>从上面的Demo中，我们可以看到，通过类的class字节码来加载:</p>
<p>之前有说，巧妇难为无米之炊，所以这个上下文很重要，我们的类加载器也是要讲究上下文的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Creates a new service loader for the given service type, using the</div><div class="line">    * current thread's &#123;<span class="doctag">@linkplain</span> java.lang.Thread#getContextClassLoader</div><div class="line">    * context class loader&#125;.</div><div class="line">    *</div><div class="line">    * &lt;p&gt; An invocation of this convenience method of the form</div><div class="line">    * &lt;pre&gt;&#123;<span class="doctag">@code</span></div><div class="line">    *     ServiceLoader.load(service)</div><div class="line">    * &#125;&lt;/pre&gt;</div><div class="line">    *</div><div class="line">    * is equivalent to</div><div class="line">    *</div><div class="line">    * &lt;pre&gt;&#123;<span class="doctag">@code</span></div><div class="line">    *     ServiceLoader.load(service, Thread.currentThread().getContextClassLoader())</div><div class="line">    * &#125;&lt;/pre&gt;</div><div class="line">    *</div><div class="line">    * <span class="doctag">@apiNote</span> Service loader objects obtained with this method should not be</div><div class="line">    * cached VM-wide. For example, different applications in the same VM may</div><div class="line">    * have different thread context class loaders. A lookup by one application</div><div class="line">    * may locate a service provider that is only visible via its thread</div><div class="line">    * context class loader and so is not suitable to be located by the other</div><div class="line">    * application. Memory leaks can also arise. A thread local may be suited</div><div class="line">    * to some applications.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span>  &lt;S&gt; the class of the service type</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span>  service</div><div class="line">    *         The interface or abstract class representing the service</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> A new service loader</div><div class="line">    *</div><div class="line">    * <span class="doctag">@throws</span> ServiceConfigurationError</div><div class="line">    *         if the service type is not accessible to the caller or the</div><div class="line">    *         caller is in an explicit module and its module descriptor does</div><div class="line">    *         not declare that it uses &#123;<span class="doctag">@code</span> service&#125;</div><div class="line">    *</div><div class="line">    * <span class="doctag">@revised</span> 9</div><div class="line">    * <span class="doctag">@spec</span> JPMS</div><div class="line">    */</div><div class="line">   <span class="meta">@CallerSensitive</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</div><div class="line">       ClassLoader cl = Thread.currentThread().getContextClassLoader();</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ServiceLoader&lt;&gt;(Reflection.getCallerClass(), service, cl);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>我们进去这个<code>ServiceLoader</code>，其实无非就是一个构造器而已了，关键代码我截下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.service = svc;</div><div class="line">      <span class="keyword">this</span>.serviceName = svc.getName();</div><div class="line">      <span class="keyword">this</span>.layer = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">this</span>.loader = cl;</div><div class="line">      <span class="keyword">this</span>.acc = (System.getSecurityManager() != <span class="keyword">null</span>)</div><div class="line">              ? AccessController.getContext()</div><div class="line">              : <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>有了这个加载器之后，其实我们就拿到了上下文和访问权限的一些东西，我们再来看看这个类的字段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoader</span>&lt;<span class="title">S</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">S</span>&gt;</div><div class="line">&#123;</div><div class="line">    <span class="comment">// The class or interface representing the service being loaded</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</div><div class="line"></div><div class="line">    <span class="comment">// The class of the service type</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String serviceName;</div><div class="line"></div><div class="line">    <span class="comment">// The module layer used to locate providers; null when locating</span></div><div class="line">    <span class="comment">// providers using a class loader</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ModuleLayer layer;</div><div class="line"></div><div class="line">    <span class="comment">// The class loader used to locate, load, and instantiate providers;</span></div><div class="line">    <span class="comment">// null when locating provider using a module layer</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader loader;</div><div class="line"></div><div class="line">    <span class="comment">// The access control context taken when the ServiceLoader is created</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc;</div><div class="line"></div><div class="line">    <span class="comment">// The lazy-lookup iterator for iterator operations</span></div><div class="line">    <span class="keyword">private</span> Iterator&lt;Provider&lt;S&gt;&gt; lookupIterator1;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;S&gt; instantiatedProviders = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// The lazy-lookup iterator for stream operations</span></div><div class="line">    <span class="keyword">private</span> Iterator&lt;Provider&lt;S&gt;&gt; lookupIterator2;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Provider&lt;S&gt;&gt; loadedProviders = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loadedAllProviders; <span class="comment">// true when all providers loaded</span></div><div class="line"></div><div class="line">    <span class="comment">// Incremented when reload is called</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> reloadCount;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaLangAccess LANG_ACCESS;</div></pre></td></tr></table></figure>
<p>可以看到，它实现了按照我们分析的<code>Iterable</code>接口，这样我们就可以多了很多操作，而且我们也看到了下面这几个东西，这样我们就可以做事情了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Iterator&lt;Provider&lt;S&gt;&gt; lookupIterator2;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Provider&lt;S&gt;&gt; loadedProviders = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> loadedAllProviders; <span class="comment">// true when all providers loaded</span></div></pre></td></tr></table></figure>
<p>我们走进<code>findFirst</code>这个方法来看看:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Optional&lt;S&gt; <span class="title">findFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">        Iterator&lt;S&gt; iterator = iterator();</div><div class="line">        <span class="keyword">if</span> (iterator.hasNext()) &#123;</div><div class="line">            <span class="keyword">return</span> Optional.of(iterator.next());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> Optional.empty();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们看到了<code>iterator()</code>这个方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;S&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">// create lookup iterator if needed</span></div><div class="line">       <span class="keyword">if</span> (lookupIterator1 == <span class="keyword">null</span>) &#123;</div><div class="line">           lookupIterator1 = newLookupIterator();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;S&gt;() &#123;</div><div class="line"></div><div class="line">           <span class="comment">// record reload count</span></div><div class="line">           <span class="keyword">final</span> <span class="keyword">int</span> expectedReloadCount = ServiceLoader.<span class="keyword">this</span>.reloadCount;</div><div class="line">         ...</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>现在<code>newLookupIterator()</code>进入到我们的视野中，没有条件创建条件，刚开始我们可没有拿到米，现在去找米去:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Returns a new lookup iterator.</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> Iterator&lt;Provider&lt;S&gt;&gt; newLookupIterator() &#123;</div><div class="line">       <span class="keyword">assert</span> layer == <span class="keyword">null</span> || loader == <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">if</span> (layer != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> LayerLookupIterator&lt;&gt;();</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           Iterator&lt;Provider&lt;S&gt;&gt; first = <span class="keyword">new</span> ModuleServicesLookupIterator&lt;&gt;();</div><div class="line">           Iterator&lt;Provider&lt;S&gt;&gt; second = <span class="keyword">new</span> LazyClassPathLookupIterator&lt;&gt;();</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;Provider&lt;S&gt;&gt;() &#123;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="keyword">return</span> (first.hasNext() || second.hasNext());</div><div class="line">               &#125;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> Provider&lt;S&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="keyword">if</span> (first.hasNext()) &#123;</div><div class="line">                       <span class="keyword">return</span> first.next();</div><div class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (second.hasNext()) &#123;</div><div class="line">                       <span class="keyword">return</span> second.next();</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这里抛开其他我们来看<code>ModuleServicesLookupIterator()</code>这个构造函数 ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ModuleServicesLookupIterator() &#123;</div><div class="line">            <span class="keyword">this</span>.currentLoader = loader;</div><div class="line">            <span class="keyword">this</span>.iterator = iteratorFor(loader);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>映入眼帘的是<code>iteratorFor(ClassLoader loader)</code>这个方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">         * Returns an iterator to iterate over the implementations of &#123;<span class="doctag">@code</span></div><div class="line">         * service&#125; in modules defined to the given class loader or in custom</div><div class="line">         * layers with a module defined to this class loader.</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">private</span> Iterator&lt;ServiceProvider&gt; <span class="title">iteratorFor</span><span class="params">(ClassLoader loader)</span> </span>&#123;</div><div class="line">            <span class="comment">// modules defined to the class loader</span></div><div class="line">            ServicesCatalog catalog;</div><div class="line">            <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</div><div class="line">                catalog = BootLoader.getServicesCatalog();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                catalog = ServicesCatalog.getServicesCatalogOrNull(loader);</div><div class="line">            &#125;</div><div class="line">          	<span class="comment">//此处往下到我中文标记结束就是我们的正主了</span></div><div class="line">            List&lt;ServiceProvider&gt; providers;</div><div class="line">            <span class="keyword">if</span> (catalog == <span class="keyword">null</span>) &#123;</div><div class="line">                providers = List.of();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                providers = catalog.findServices(serviceName);</div><div class="line">            &#125;</div><div class="line">          <span class="comment">//结束</span></div><div class="line"></div><div class="line">            <span class="comment">// modules in layers that define modules to the class loader</span></div><div class="line">            ClassLoader platformClassLoader = ClassLoaders.platformClassLoader();</div><div class="line">            <span class="keyword">if</span> (loader == <span class="keyword">null</span> || loader == platformClassLoader) &#123;</div><div class="line">                <span class="keyword">return</span> providers.iterator();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                List&lt;ServiceProvider&gt; allProviders = <span class="keyword">new</span> ArrayList&lt;&gt;(providers);</div><div class="line">                Iterator&lt;ModuleLayer&gt; iterator = LANG_ACCESS.layers(loader).iterator();</div><div class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">                    ModuleLayer layer = iterator.next();</div><div class="line">                    <span class="keyword">for</span> (ServiceProvider sp : providers(layer)) &#123;</div><div class="line">                        ClassLoader l = loaderFor(sp.<span class="keyword">module</span>());</div><div class="line">                        <span class="keyword">if</span> (l != <span class="keyword">null</span> &amp;&amp; l != platformClassLoader) &#123;</div><div class="line">                            allProviders.add(sp);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> allProviders.iterator();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>这里终于找到了<code>findServices(String service)</code>这个方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Returns the (possibly empty) list of service providers that implement</div><div class="line">    * the given service type.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;ServiceProvider&gt; <span class="title">findServices</span><span class="params">(String service)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> map.getOrDefault(service, Collections.emptyList());</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>结合<code>getOrDefault</code>的源码可知:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> </span>&#123;</div><div class="line">       V v;</div><div class="line">       <span class="keyword">return</span> (((v = get(key)) != <span class="keyword">null</span>) || containsKey(key))</div><div class="line">           ? v</div><div class="line">           : defaultValue;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>是不是和我们的具体思路接上轨了</p>
<h3 id="拿到我们想要的大米"><a href="#拿到我们想要的大米" class="headerlink" title="拿到我们想要的大米"></a>拿到我们想要的大米</h3><p>而我们的<code>provider</code>实例从何而来，请容我娓娓道来咯：</p>
<p>我们从<code>jdk.internal.module.Modules</code>这个模块定义类中可以找到<code>addProvides</code>这个方法，也就是说在我们加载这个模块的时候，这个动作就已经要干活了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Updates module m to provide a service</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addProvides</span><span class="params">(Module m, Class&lt;?&gt; service, Class&lt;?&gt; impl)</span> </span>&#123;</div><div class="line">      ModuleLayer layer = m.getLayer();</div><div class="line"></div><div class="line">      PrivilegedAction&lt;ClassLoader&gt; pa = m::getClassLoader;</div><div class="line">      ClassLoader loader = AccessController.doPrivileged(pa);</div><div class="line"></div><div class="line">      ClassLoader platformClassLoader = ClassLoaders.platformClassLoader();</div><div class="line">      <span class="keyword">if</span> (layer == <span class="keyword">null</span> || loader == <span class="keyword">null</span> || loader == platformClassLoader) &#123;</div><div class="line">          <span class="comment">// update ClassLoader catalog</span></div><div class="line">          ServicesCatalog catalog;</div><div class="line">          <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</div><div class="line">              catalog = BootLoader.getServicesCatalog();</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              catalog = ServicesCatalog.getServicesCatalog(loader);</div><div class="line">          &#125;</div><div class="line">          catalog.addProvider(m, service, impl);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (layer != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">// update Layer catalog</span></div><div class="line">          JLA.getServicesCatalog(layer).addProvider(m, service, impl);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>然后我们可以从<code>sun.instrument.InstrumentationImpl</code>这个类来看到其工作方式(通过其注释就可以看到这个类和JVM相关):</p>
<p>在加载模块的时候就执行了下面的代码，看下面<code>update provides</code>这个注释的代码可以知道其调用了上面的<code>addProvides</code>这个方法，而最后也是调用了<code>addProvider(m, service, impl)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The Java side of the JPLIS implementation. Works in concert with a native JVMTI agent</div><div class="line"> * to implement the JPLIS API set. Provides both the Java API implementation of</div><div class="line"> * the Instrumentation interface and utility Java routines to support the native code.</div><div class="line"> * Keeps a pointer to the native data structure in a scalar field to allow native</div><div class="line"> * processing behind native methods.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentationImpl</span> <span class="keyword">implements</span> <span class="title">Instrumentation</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redefineModule</span><span class="params">(Module <span class="keyword">module</span>,</span></span></div><div class="line">                               Set&lt;Module&gt; extraReads,</div><div class="line">                               Map&lt;String, Set&lt;Module&gt;&gt; extraExports,</div><div class="line">                               Map&lt;String, Set&lt;Module&gt;&gt; extraOpens,</div><div class="line">                               Set&lt;Class&lt;?&gt;&gt; extraUses,</div><div class="line">                               Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; extraProvides)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">module</span>.isNamed())</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!isModifiableModule(<span class="keyword">module</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnmodifiableModuleException(<span class="keyword">module</span>.getName());</div><div class="line"></div><div class="line">        <span class="comment">// copy and check reads</span></div><div class="line">        extraReads = <span class="keyword">new</span> HashSet&lt;&gt;(extraReads);</div><div class="line">        <span class="keyword">if</span> (extraReads.contains(<span class="keyword">null</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"'extraReads' contains null"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// copy and check exports and opens</span></div><div class="line">        extraExports = cloneAndCheckMap(<span class="keyword">module</span>, extraExports);</div><div class="line">        extraOpens = cloneAndCheckMap(<span class="keyword">module</span>, extraOpens);</div><div class="line"></div><div class="line">        <span class="comment">// copy and check uses</span></div><div class="line">        extraUses = <span class="keyword">new</span> HashSet&lt;&gt;(extraUses);</div><div class="line">        <span class="keyword">if</span> (extraUses.contains(<span class="keyword">null</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"'extraUses' contains null"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// copy and check provides</span></div><div class="line">        Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; tmpProvides = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; e : extraProvides.entrySet()) &#123;</div><div class="line">            Class&lt;?&gt; service = e.getKey();</div><div class="line">            <span class="keyword">if</span> (service == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"'extraProvides' contains null"</span>);</div><div class="line">            List&lt;Class&lt;?&gt;&gt; providers = <span class="keyword">new</span> ArrayList&lt;&gt;(e.getValue());</div><div class="line">            <span class="keyword">if</span> (providers.isEmpty())</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"list of providers is empty"</span>);</div><div class="line">            providers.forEach(p -&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (p.getModule() != <span class="keyword">module</span>)</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(p + <span class="string">" not in "</span> + <span class="keyword">module</span>);</div><div class="line">                <span class="keyword">if</span> (!service.isAssignableFrom(p))</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(p + <span class="string">" is not a "</span> + service);</div><div class="line">            &#125;);</div><div class="line">            tmpProvides.put(service, providers);</div><div class="line">        &#125;</div><div class="line">        extraProvides = tmpProvides;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// update reads</span></div><div class="line">        extraReads.forEach(m -&gt; Modules.addReads(<span class="keyword">module</span>, m));</div><div class="line"></div><div class="line">        <span class="comment">// update exports</span></div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;Module&gt;&gt; e : extraExports.entrySet()) &#123;</div><div class="line">            String pkg = e.getKey();</div><div class="line">            Set&lt;Module&gt; targets = e.getValue();</div><div class="line">            targets.forEach(m -&gt; Modules.addExports(<span class="keyword">module</span>, pkg, m));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// update opens</span></div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Set&lt;Module&gt;&gt; e : extraOpens.entrySet()) &#123;</div><div class="line">            String pkg = e.getKey();</div><div class="line">            Set&lt;Module&gt; targets = e.getValue();</div><div class="line">            targets.forEach(m -&gt; Modules.addOpens(<span class="keyword">module</span>, pkg, m));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// update uses</span></div><div class="line">        extraUses.forEach(service -&gt; Modules.addUses(<span class="keyword">module</span>, service));</div><div class="line"></div><div class="line">        <span class="comment">// update provides</span></div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; e : extraProvides.entrySet()) &#123;</div><div class="line">            Class&lt;?&gt; service = e.getKey();</div><div class="line">            List&lt;Class&lt;?&gt;&gt; providers = e.getValue();</div><div class="line">            providers.forEach(p -&gt; Modules.addProvides(<span class="keyword">module</span>, service, p));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Instrumentation</code>接口有一段很重要的注释，大家自己看吧，就不多说了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This class provides services needed to instrument Java</div><div class="line"> * programming language code.</div><div class="line"> * Instrumentation is the addition of byte-codes to methods for the</div><div class="line"> * purpose of gathering data to be utilized by tools.</div><div class="line"> * Since the changes are purely additive, these tools do not modify</div><div class="line"> * application state or behavior.</div><div class="line"> * Examples of such benign tools include monitoring agents, profilers,</div><div class="line"> * coverage analyzers, and event loggers.</div><div class="line"> *</div><div class="line"> * &lt;P&gt;</div><div class="line"> * There are two ways to obtain an instance of the</div><div class="line"> * &lt;code&gt;Instrumentation&lt;/code&gt; interface:</div><div class="line"> *</div><div class="line"> * &lt;ol&gt;</div><div class="line"> *   &lt;li&gt;&lt;p&gt; When a JVM is launched in a way that indicates an agent</div><div class="line"> *     class. In that case an &lt;code&gt;Instrumentation&lt;/code&gt; instance</div><div class="line"> *     is passed to the &lt;code&gt;premain&lt;/code&gt; method of the agent class.</div><div class="line"> *     &lt;/p&gt;&lt;/li&gt;</div><div class="line"> *   &lt;li&gt;&lt;p&gt; When a JVM provides a mechanism to start agents sometime</div><div class="line"> *     after the JVM is launched. In that case an &lt;code&gt;Instrumentation&lt;/code&gt;</div><div class="line"> *     instance is passed to the &lt;code&gt;agentmain&lt;/code&gt; method of the</div><div class="line"> *     agent code. &lt;/p&gt; &lt;/li&gt;</div><div class="line"> * &lt;/ol&gt;</div><div class="line"> * &lt;p&gt;</div><div class="line"> * These mechanisms are described in the</div><div class="line"> * &#123;<span class="doctag">@linkplain</span> java.lang.instrument package specification&#125;.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * Once an agent acquires an &lt;code&gt;Instrumentation&lt;/code&gt; instance,</div><div class="line"> * the agent may call methods on the instance at any time.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span>   1.5</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Instrumentation</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么，我们最后，走入<code>addProvider(m, service, impl)</code>这个方法中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">     * Add a provider in the given module to this services catalog</div><div class="line">     *</div><div class="line">     * <span class="doctag">@apiNote</span> This method is for use by java.lang.instrument</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addProvider</span><span class="params">(Module <span class="keyword">module</span>, Class&lt;?&gt; service, Class&lt;?&gt; impl)</span> </span>&#123;</div><div class="line">        List&lt;ServiceProvider&gt; list = providers(service.getName());</div><div class="line">        list.add(<span class="keyword">new</span> ServiceProvider(<span class="keyword">module</span>, impl.getName()));</div><div class="line">    &#125;</div><div class="line">...</div><div class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceProvider</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String providerName;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceProvider</span><span class="params">(Module <span class="keyword">module</span>, String providerName)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</div><div class="line">            <span class="keyword">this</span>.providerName = providerName;</div><div class="line">        &#125;</div><div class="line">   ...</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>再经过了这么曲曲折折的过程，终于拿到了<code>ServiceProvider</code>,里面包括了我们所要调用实现类的地址信息</p>
<p>于是，看下ServiceLoader这个类定义的<code>Provider</code>静态内部接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">   * Represents a service provider located by &#123;<span class="doctag">@code</span> ServiceLoader&#125;.</div><div class="line">   *</div><div class="line">   * &lt;p&gt; When using a loader's &#123;<span class="doctag">@link</span> ServiceLoader#stream() stream()&#125; method</div><div class="line">   * then the elements are of type &#123;<span class="doctag">@code</span> Provider&#125;. This allows processing</div><div class="line">   * to select or filter on the provider class without instantiating the</div><div class="line">   * provider. &lt;/p&gt;</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span>  &lt;S&gt; The service type</div><div class="line">   * <span class="doctag">@since</span> 9</div><div class="line">   * <span class="doctag">@spec</span> JPMS</div><div class="line">   */</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span>&lt;<span class="title">S</span>&gt; <span class="keyword">extends</span> <span class="title">Supplier</span>&lt;<span class="title">S</span>&gt; </span>&#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Returns the provider type. There is no guarantee that this type is</div><div class="line">       * accessible or that it has a public no-args constructor. The &#123;<span class="doctag">@link</span></div><div class="line">       * #get() get()&#125; method should be used to obtain the provider instance.</div><div class="line">       *</div><div class="line">       * &lt;p&gt; When a module declares that the provider class is created by a</div><div class="line">       * provider factory then this method returns the return type of its</div><div class="line">       * public static "&#123;<span class="doctag">@code</span> provider()&#125;" method.</div><div class="line">       *</div><div class="line">       * <span class="doctag">@return</span> The provider type</div><div class="line">       */</div><div class="line">      Class&lt;? extends S&gt; type();</div><div class="line"></div><div class="line">      <span class="comment">/**</span></div><div class="line">       * Returns an instance of the provider.</div><div class="line">       *</div><div class="line">       * <span class="doctag">@return</span> An instance of the provider.</div><div class="line">       *</div><div class="line">       * <span class="doctag">@throws</span> ServiceConfigurationError</div><div class="line">       *         If the service provider cannot be instantiated, or in the</div><div class="line">       *         case of a provider factory, the public static</div><div class="line">       *         "&#123;<span class="doctag">@code</span> provider()&#125;" method returns &#123;<span class="doctag">@code</span> null&#125; or throws</div><div class="line">       *         an error or exception. The &#123;<span class="doctag">@code</span> ServiceConfigurationError&#125;</div><div class="line">       *         will carry an appropriate cause where possible.</div><div class="line">       */</div><div class="line">      <span class="meta">@Override</span> <span class="function">S <span class="title">get</span><span class="params">()</span></span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>然后我们回到之前追到的<code>iteratorFor</code>方法，知道其返回的是 <code>Iterator&lt;ServiceProvider&gt;</code>类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">        * Returns an iterator to iterate over the implementations of &#123;<span class="doctag">@code</span></div><div class="line">        * service&#125; in modules defined to the given class loader or in custom</div><div class="line">        * layers with a module defined to this class loader.</div><div class="line">        */</div><div class="line">       <span class="function"><span class="keyword">private</span> Iterator&lt;ServiceProvider&gt; <span class="title">iteratorFor</span><span class="params">(ClassLoader loader)</span> </span>&#123;</div><div class="line">           <span class="comment">// modules defined to the class loader</span></div><div class="line">           ServicesCatalog catalog;</div><div class="line">           <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</div><div class="line">               catalog = BootLoader.getServicesCatalog();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               catalog = ServicesCatalog.getServicesCatalogOrNull(loader);</div><div class="line">           &#125;</div><div class="line">           List&lt;ServiceProvider&gt; providers;</div><div class="line">           <span class="keyword">if</span> (catalog == <span class="keyword">null</span>) &#123;</div><div class="line">               providers = List.of();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               providers = catalog.findServices(serviceName);</div><div class="line">           &#125;</div><div class="line">         ...</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p> 然后回到<code>ModuleServicesLookupIterator()</code>这个构造函数，直接看这个内部类,也就是调用这个</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Implements lazy service provider lookup of service providers that</div><div class="line">    * are provided by modules defined to a class loader or to modules in</div><div class="line">    * layers with a module defined to the class loader.</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleServicesLookupIterator</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">       <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Provider</span>&lt;<span class="title">T</span>&gt;&gt;</div><div class="line">   &#123;</div><div class="line">       ClassLoader currentLoader;</div><div class="line">       Iterator&lt;ServiceProvider&gt; iterator;</div><div class="line"></div><div class="line">       Provider&lt;T&gt; nextProvider;</div><div class="line">       ServiceConfigurationError nextError;</div><div class="line"></div><div class="line">       ModuleServicesLookupIterator() &#123;</div><div class="line">           <span class="keyword">this</span>.currentLoader = loader;</div><div class="line">           <span class="keyword">this</span>.iterator = iteratorFor(loader);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       ...</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在<code>newLookupIterator</code>这个方法中得到<code>ModuleServicesLookupIterator</code>的实例<code>first</code>,并调用其<code>hasNext</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Returns a new lookup iterator.</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> Iterator&lt;Provider&lt;S&gt;&gt; newLookupIterator() &#123;</div><div class="line">       <span class="keyword">assert</span> layer == <span class="keyword">null</span> || loader == <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">if</span> (layer != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> LayerLookupIterator&lt;&gt;();</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           Iterator&lt;Provider&lt;S&gt;&gt; first = <span class="keyword">new</span> ModuleServicesLookupIterator&lt;&gt;();</div><div class="line">           Iterator&lt;Provider&lt;S&gt;&gt; second = <span class="keyword">new</span> LazyClassPathLookupIterator&lt;&gt;();</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;Provider&lt;S&gt;&gt;() &#123;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="keyword">return</span> (first.hasNext() || second.hasNext());</div><div class="line">               &#125;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> Provider&lt;S&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="keyword">if</span> (first.hasNext()) &#123;</div><div class="line">                       <span class="keyword">return</span> first.next();</div><div class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (second.hasNext()) &#123;</div><div class="line">                       <span class="keyword">return</span> second.next();</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>我们来进入这个<code>hasNext</code>方法，也就是在这里，调用了<code>loadProvider</code>生成了一个bean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (nextProvider == <span class="keyword">null</span> &amp;&amp; nextError == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// get next provider to load</span></div><div class="line">            <span class="keyword">while</span> (!iterator.hasNext()) &#123;</div><div class="line">                <span class="keyword">if</span> (currentLoader == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    currentLoader = currentLoader.getParent();</div><div class="line">                    iterator = iteratorFor(currentLoader);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// attempt to load provider</span></div><div class="line">            ServiceProvider provider = iterator.next();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                Provider&lt;T&gt; next = (Provider&lt;T&gt;) loadProvider(provider);</div><div class="line">                nextProvider = next;</div><div class="line">            &#125; <span class="keyword">catch</span> (ServiceConfigurationError e) &#123;</div><div class="line">                nextError = e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Provider&lt;T&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hasNext())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line"></div><div class="line">        Provider&lt;T&gt; provider = nextProvider;</div><div class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</div><div class="line">            nextProvider = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> provider;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ServiceConfigurationError e = nextError;</div><div class="line">            <span class="keyword">assert</span> e != <span class="keyword">null</span>;</div><div class="line">            nextError = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>走进这个<code>loadProvider</code>方法,抛开前面所有，我们只看最后返回为:<code>new ProviderImpl&lt;S&gt;(service, type, ctor, acc)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Loads a service provider in a module.</div><div class="line">     *</div><div class="line">     * Returns &#123;<span class="doctag">@code</span> null&#125; if the service provider's module doesn't read</div><div class="line">     * the module with the service type.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> ServiceConfigurationError if the class cannot be loaded or</div><div class="line">     *         isn't the expected sub-type (or doesn't define a provider</div><div class="line">     *         factory method that returns the expected type)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Provider&lt;S&gt; <span class="title">loadProvider</span><span class="params">(ServiceProvider provider)</span> </span>&#123;</div><div class="line">        Module <span class="keyword">module</span> = provider.<span class="keyword">module</span>();</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">module</span>.canRead(service.getModule())) &#123;</div><div class="line">            <span class="comment">// module does not read the module with the service type</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String cn = provider.providerName();</div><div class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (acc == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                clazz = Class.forName(<span class="keyword">module</span>, cn);</div><div class="line">            &#125; <span class="keyword">catch</span> (LinkageError e) &#123;</div><div class="line">                fail(service, <span class="string">"Unable to load "</span> + cn, e);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            PrivilegedExceptionAction&lt;Class&lt;?&gt;&gt; pa = () -&gt; Class.forName(<span class="keyword">module</span>, cn);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                clazz = AccessController.doPrivileged(pa);</div><div class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</div><div class="line">                Throwable x = pae.getCause();</div><div class="line">                fail(service, <span class="string">"Unable to load "</span> + cn, x);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</div><div class="line">            fail(service, <span class="string">"Provider "</span> + cn + <span class="string">" not found"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mods = clazz.getModifiers();</div><div class="line">        <span class="keyword">if</span> (!Modifier.isPublic(mods)) &#123;</div><div class="line">            fail(service, clazz + <span class="string">" is not public"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// if provider in explicit module then check for static factory method</span></div><div class="line">        <span class="keyword">if</span> (inExplicitModule(clazz)) &#123;</div><div class="line">            Method factoryMethod = findStaticProviderMethod(clazz);</div><div class="line">            <span class="keyword">if</span> (factoryMethod != <span class="keyword">null</span>) &#123;</div><div class="line">                Class&lt;?&gt; returnType = factoryMethod.getReturnType();</div><div class="line">                <span class="keyword">if</span> (!service.isAssignableFrom(returnType)) &#123;</div><div class="line">                    fail(service, factoryMethod + <span class="string">" return type not a subtype"</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                Class&lt;? extends S&gt; type = (Class&lt;? extends S&gt;) returnType;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProviderImpl&lt;S&gt;(service, type, factoryMethod, acc);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// no factory method so must be a subtype</span></div><div class="line">        <span class="keyword">if</span> (!service.isAssignableFrom(clazz)) &#123;</div><div class="line">            fail(service, clazz.getName() + <span class="string">" not a subtype"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        Class&lt;? extends S&gt; type = (Class&lt;? extends S&gt;) clazz;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        Constructor&lt;? extends S&gt; ctor = (Constructor&lt;? extends S&gt; ) getConstructor(clazz);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProviderImpl&lt;S&gt;(service, type, ctor, acc);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后，我们通过查看这个<code>ProviderImpl</code>类终于得到了我们想要得到的结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * A Provider implementation that supports invoking, with reduced</div><div class="line">    * permissions, the static factory to obtain the provider or the</div><div class="line">    * provider's no-arg constructor.</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderImpl</span>&lt;<span class="title">S</span>&gt; <span class="keyword">implements</span> <span class="title">Provider</span>&lt;<span class="title">S</span>&gt; </span>&#123;</div><div class="line">       <span class="keyword">final</span> Class&lt;S&gt; service;</div><div class="line">       <span class="keyword">final</span> Class&lt;? extends S&gt; type;</div><div class="line">       <span class="keyword">final</span> Method factoryMethod;  <span class="comment">// factory method or null</span></div><div class="line">       <span class="keyword">final</span> Constructor&lt;? extends S&gt; ctor; <span class="comment">// public no-args constructor or null</span></div><div class="line">       <span class="keyword">final</span> AccessControlContext acc;</div><div class="line"></div><div class="line">       ProviderImpl(Class&lt;S&gt; service,</div><div class="line">                    Class&lt;? extends S&gt; type,</div><div class="line">                    Method factoryMethod,</div><div class="line">                    AccessControlContext acc) &#123;</div><div class="line">           <span class="keyword">this</span>.service = service;</div><div class="line">           <span class="keyword">this</span>.type = type;</div><div class="line">           <span class="keyword">this</span>.factoryMethod = factoryMethod;</div><div class="line">           <span class="keyword">this</span>.ctor = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">this</span>.acc = acc;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       ProviderImpl(Class&lt;S&gt; service,</div><div class="line">                    Class&lt;? extends S&gt; type,</div><div class="line">                    Constructor&lt;? extends S&gt; ctor,</div><div class="line">                    AccessControlContext acc) &#123;</div><div class="line">           <span class="keyword">this</span>.service = service;</div><div class="line">           <span class="keyword">this</span>.type = type;</div><div class="line">           <span class="keyword">this</span>.factoryMethod = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">this</span>.ctor = ctor;</div><div class="line">           <span class="keyword">this</span>.acc = acc;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="keyword">public</span> Class&lt;? extends S&gt; type() &#123;</div><div class="line">           <span class="keyword">return</span> type;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> S <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> (factoryMethod != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">return</span> invokeFactoryMethod();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">return</span> newInstance();</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>IOC和模块化所提供的类似效果的最大的区别就是，前者是提供了实例化的bean(即便是通过AOP实现的，这点很重要，Java9模块化在使用Spring的时候会有特别的设置)，而且是基于Spring容器的单例的存在(多例注入的问题请参考我这方面的Spring源码解析)，后者是提供了class字节码所在的路径，用的时候内部会自行生成实例，所以是多例的。</p>
<p>其实整个过程，Java的模块化文件系统起了很大的作用(这块看情况假如篇幅比较长久不放在我的书里了)，然后自己追源码的思路也在这里给大家展现了一番，希望可以对大家有所帮助，看源码不要上来就瞎找的。另外，最重要的一点就是，不要因为源码很多，很复杂就轻言放弃，看的多了，看的久了，自然就有一套属于自己的方法论了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Refresh-your-Java-skills–聊聊Java9-中模块化设计是如何实现类似IOC依赖注入效果及与其区别&quot;&gt;&lt;a href=&quot;#Refresh-your-Java-skills–聊聊Java9-中模块化设计是如何实现类似IOC依赖注入效果及与其区别&quot; class=&quot;headerlink&quot; title=&quot;Refresh your Java skills–聊聊Java9 中模块化设计是如何实现类似IOC依赖注入效果及与其区别&quot;&gt;&lt;/a&gt;Refresh your Java skills–聊聊Java9 中模块化设计是如何实现类似IOC依赖注入效果及与其区别&lt;/h1&gt;&lt;h2 id=&quot;场景引入&quot;&gt;&lt;a href=&quot;#场景引入&quot; class=&quot;headerlink&quot; title=&quot;场景引入&quot;&gt;&lt;/a&gt;场景引入&lt;/h2&gt;&lt;p&gt;如何实现IOC的效果，我们可以来想想，无非就是一个隐式实现，而想要做到，总不能什么都没有，来个巧妇难为无米之炊的境地吧，所以说，米必须要有滴，在Spring中就是一个bean，也就是说，容器里得有米，再官话点就是上下文中得存在所需要的bean。同样模块化中两个互相隔离的模块想要达到这种效果，也要先往jvm里扔个对象进去的，然后&lt;strong&gt;who use ，who get&lt;/strong&gt; 就可以了。&lt;br&gt;
    
    </summary>
    
      <category term="Java9" scheme="https://muyinchen.github.io/categories/Java9/"/>
    
    
      <category term="Java" scheme="https://muyinchen.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的异步和计划任务</title>
    <link href="https://muyinchen.github.io/2017/10/17/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    <id>https://muyinchen.github.io/2017/10/17/Spring5源码解析-Spring中的异步和计划任务/</id>
    <published>2017-10-16T17:10:25.000Z</published>
    <updated>2017-10-16T17:16:47.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的异步和计划任务"><a href="#Spring5源码解析-Spring中的异步和计划任务" class="headerlink" title="Spring5源码解析-Spring中的异步和计划任务"></a>Spring5源码解析-Spring中的异步和计划任务</h1><p>Java提供了许多创建线程池的方式，并得到一个Future实例来作为任务结果。对于Spring同样小菜一碟，通过其<code>scheduling</code>包就可以做到将任务线程中后台执行。</p>
<p>在本文的第一部分中，我们将讨论下Spring中执行计划任务的一些基础知识。之后，我们将解释这些类是如何一起协作来启动并执行计划任务的。下一部分将介绍计划和异步任务的配置。最后，我们来写个Demo，看看如何通过单元测试来编排计划任务。<br><a id="more"></a></p>
<h2 id="什么是Spring中的异步任务？"><a href="#什么是Spring中的异步任务？" class="headerlink" title="什么是Spring中的异步任务？"></a>什么是Spring中的异步任务？</h2><p>在我们正式的进入话题之前，对于Spring，我们需要理解下它实现的两个不同的概念：异步任务和调度任务。显然，两者有一个很大的共同点：都在后台工作。但是，它们之间存在了很大差异。调度任务与异步不同，其作用与Linux中的<code>CRON job</code>完全相同(windows里面也有计划任务)。举个栗子，有一个任务必须每40分钟执行一次，那么，可以通过XML文件或者注解来进行此配置。简单的异步任务在后台执行就好，无需配置执行频率。</p>
<p>因为它们是两种不同的任务类型，它们两个的执行者自然也就不同。第一个看起来有点像Java的并发执行器(<code>concurrency executor</code>)，这里会有专门去写一篇关于Java中的执行器来具体了解。根据<a href="http://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/htmlsingle/#scheduling" target="_blank" rel="external">Spring文档</a><strong>TaskExecutor</strong>所述，它提供了基于Spring的抽象来处理线程池，这点，也可以通过其类的注释去了解。另一个抽象接口是<strong>TaskScheduler</strong>，它用于在将来给定的时间点来安排任务，并执行一次或定期执行。</p>
<p>在分析源码的过程中，发现另一个比较有趣的点是触发器。它存在两种类型：<strong>CronTrigger</strong>或<strong>PeriodTrigger</strong>。第一个模拟CRON任务的行为。所以我们可以在将来确切时间点提交一个任务的执行。另一个触发器可用于定期执行任务。</p>
<h2 id="Spring的异步任务类"><a href="#Spring的异步任务类" class="headerlink" title="Spring的异步任务类"></a>Spring的异步任务类</h2><p>让我们从<strong>org.springframework.core.task.TaskExecutor</strong>类的分析开始。你会发现，其简单的不行，它是一个扩展Java的Executor接口的接口。它的唯一方法也就是是<strong>执行</strong>，在参数中使用Runnable类型的任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.core.task;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Simple task executor interface that abstracts the execution</div><div class="line"> * of a &#123;<span class="doctag">@link</span> Runnable&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Implementations can use all sorts of different execution strategies,</div><div class="line"> * such as: synchronous, asynchronous, using a thread pool, and more.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Equivalent to JDK 1.5's &#123;<span class="doctag">@link</span> java.util.concurrent.Executor&#125;</div><div class="line"> * interface; extending it now in Spring 3.0, so that clients may declare</div><div class="line"> * a dependency on an Executor and receive any TaskExecutor implementation.</div><div class="line"> * This interface remains separate from the standard Executor interface</div><div class="line"> * mainly for backwards compatibility with JDK 1.4 in Spring 2.x.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 2.0</div><div class="line"> * <span class="doctag">@see</span> java.util.concurrent.Executor</div><div class="line"> */</div><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskExecutor</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Execute the given &#123;<span class="doctag">@code</span> task&#125;.</div><div class="line">	 * &lt;p&gt;The call might return immediately if the implementation uses</div><div class="line">	 * an asynchronous execution strategy, or might block in the case</div><div class="line">	 * of synchronous execution.</div><div class="line">	 * <span class="doctag">@param</span> task the &#123;<span class="doctag">@code</span> Runnable&#125; to execute (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@throws</span> TaskRejectedException if the given task was not accepted</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相对来说，<strong>org.springframework.scheduling.TaskScheduler</strong>接口就有点复杂了。它定义了一组以schedule开头的名称的方法允许我们定义将来要执行的任务。所有 <strong>schedule* </strong>方法返回<strong>java.util.concurrent.ScheduledFuture</strong>实例。Spring5中对<code>scheduleAtFixedRate</code>方法做了进一步的充实，其实最终调用的还是<strong>ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable task, long period);</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskScheduler</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Schedule the given &#123;<span class="doctag">@link</span> Runnable&#125;, invoking it whenever the trigger</div><div class="line">	 * indicates a next execution time.</div><div class="line">	 * &lt;p&gt;Execution will end once the scheduler shuts down or the returned</div><div class="line">	 * &#123;<span class="doctag">@link</span> ScheduledFuture&#125; gets cancelled.</div><div class="line">	 * <span class="doctag">@param</span> task the Runnable to execute whenever the trigger fires</div><div class="line">	 * <span class="doctag">@param</span> trigger an implementation of the &#123;<span class="doctag">@link</span> Trigger&#125; interface,</div><div class="line">	 * e.g. a &#123;<span class="doctag">@link</span> org.springframework.scheduling.support.CronTrigger&#125; object</div><div class="line">	 * wrapping a cron expression</div><div class="line">	 * <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> ScheduledFuture&#125; representing pending completion of the task,</div><div class="line">	 * or &#123;<span class="doctag">@code</span> null&#125; if the given Trigger object never fires (i.e. returns</div><div class="line">	 * &#123;<span class="doctag">@code</span> null&#125; from &#123;<span class="doctag">@link</span> Trigger#nextExecutionTime&#125;)</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.core.task.TaskRejectedException if the given task was not accepted</div><div class="line">	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.scheduling.support.CronTrigger</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	ScheduledFuture&lt;?&gt; schedule(Runnable task, Trigger trigger);</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Schedule the given &#123;<span class="doctag">@link</span> Runnable&#125;, invoking it at the specified execution time.</div><div class="line">	 * &lt;p&gt;Execution will end once the scheduler shuts down or the returned</div><div class="line">	 * &#123;<span class="doctag">@link</span> ScheduledFuture&#125; gets cancelled.</div><div class="line">	 * <span class="doctag">@param</span> task the Runnable to execute whenever the trigger fires</div><div class="line">	 * <span class="doctag">@param</span> startTime the desired execution time for the task</div><div class="line">	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)</div><div class="line">	 * <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> ScheduledFuture&#125; representing pending completion of the task</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.core.task.TaskRejectedException if the given task was not accepted</div><div class="line">	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)</div><div class="line">	 * 使用了默认实现，值得我们学习使用的，Java9中同样可以有私有实现的，从这里我们可以做到我只通过		 * 一个接口你来实现，我把其他相应的功能默认实现下，最后调用你自定义实现的接口即可，使接口功能更	  * 加一目了然</div><div class="line">	 * <span class="doctag">@since</span> 5.0</div><div class="line">	 * <span class="doctag">@see</span> #schedule(Runnable, Date)</div><div class="line">	 */</div><div class="line">	<span class="keyword">default</span> ScheduledFuture&lt;?&gt; schedule(Runnable task, Instant startTime) &#123;</div><div class="line">		<span class="keyword">return</span> schedule(task, Date.from(startTime));</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Schedule the given &#123;<span class="doctag">@link</span> Runnable&#125;, invoking it at the specified execution time.</div><div class="line">	 * &lt;p&gt;Execution will end once the scheduler shuts down or the returned</div><div class="line">	 * &#123;<span class="doctag">@link</span> ScheduledFuture&#125; gets cancelled.</div><div class="line">	 * <span class="doctag">@param</span> task the Runnable to execute whenever the trigger fires</div><div class="line">	 * <span class="doctag">@param</span> startTime the desired execution time for the task</div><div class="line">	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)</div><div class="line">	 * <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> ScheduledFuture&#125; representing pending completion of the task</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.core.task.TaskRejectedException if the given task was not accepted</div><div class="line">	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)</div><div class="line">	 */</div><div class="line">	ScheduledFuture&lt;?&gt; schedule(Runnable task, Date startTime);</div><div class="line"></div><div class="line">...</div><div class="line"><span class="comment">/**</span></div><div class="line">	 * Schedule the given &#123;<span class="doctag">@link</span> Runnable&#125;, invoking it at the specified execution time</div><div class="line">	 * and subsequently with the given period.</div><div class="line">	 * &lt;p&gt;Execution will end once the scheduler shuts down or the returned</div><div class="line">	 * &#123;<span class="doctag">@link</span> ScheduledFuture&#125; gets cancelled.</div><div class="line">	 * <span class="doctag">@param</span> task the Runnable to execute whenever the trigger fires</div><div class="line">	 * <span class="doctag">@param</span> startTime the desired first execution time for the task</div><div class="line">	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)</div><div class="line">	 * <span class="doctag">@param</span> period the interval between successive executions of the task</div><div class="line">	 * <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> ScheduledFuture&#125; representing pending completion of the task</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.core.task.TaskRejectedException if  the given task was not accepted</div><div class="line">	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)</div><div class="line">	 * <span class="doctag">@since</span> 5.0</div><div class="line">	 * <span class="doctag">@see</span> #scheduleAtFixedRate(Runnable, Date, long)</div><div class="line">	 */</div><div class="line">	<span class="keyword">default</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable task, Instant startTime, Duration period) &#123;</div><div class="line">		<span class="keyword">return</span> scheduleAtFixedRate(task, Date.from(startTime), period.toMillis());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Schedule the given &#123;<span class="doctag">@link</span> Runnable&#125;, invoking it at the specified execution time</div><div class="line">	 * and subsequently with the given period.</div><div class="line">	 * &lt;p&gt;Execution will end once the scheduler shuts down or the returned</div><div class="line">	 * &#123;<span class="doctag">@link</span> ScheduledFuture&#125; gets cancelled.</div><div class="line">	 * <span class="doctag">@param</span> task the Runnable to execute whenever the trigger fires</div><div class="line">	 * <span class="doctag">@param</span> startTime the desired first execution time for the task</div><div class="line">	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible)</div><div class="line">	 * <span class="doctag">@param</span> period the interval between successive executions of the task (in milliseconds)</div><div class="line">	 * <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> ScheduledFuture&#125; representing pending completion of the task</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.core.task.TaskRejectedException if  the given task was not accepted</div><div class="line">	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress)</div><div class="line">	 */</div><div class="line">	ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable task, Date startTime, <span class="keyword">long</span> period);</div><div class="line"></div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之前提到两个触发器组件，都实现了<strong>org.springframework.scheduling.Trigger</strong>接口。这里，我们只需关注一个的方法<strong>nextExecutionTime</strong> ，其定义下一个触发任务的执行时间。它的两个实现，CronTrigger和PeriodicTrigger，由<strong>org.springframework.scheduling.TriggerContext</strong>来实现信息的存储，由此，我们可以很轻松获得一个任务的最后一个执行时间(<strong>lastScheduledExecutionTime</strong>)，给定任务的最后完成时间(<strong>lastCompletionTime</strong>)或最后一个实际执行时间(<strong>lastActualExecutionTime</strong>)。接下来，我们通过阅读源代码来简单的了解下这些东西。<strong>org.springframework.scheduling.concurrent.ConcurrentTaskScheduler</strong>包含一个私有类<code>EnterpriseConcurrentTriggerScheduler</code>。在这个<code>class</code>里面，我们可以找到schedule方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable task, <span class="keyword">final</span> Trigger trigger) &#123;</div><div class="line">  ManagedScheduledExecutorService executor = (ManagedScheduledExecutorService) scheduledExecutor;</div><div class="line">  <span class="keyword">return</span> executor.schedule(task, <span class="keyword">new</span> javax.enterprise.concurrent.Trigger() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNextRunTime</span><span class="params">(LastExecution le, Date taskScheduledTime)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> trigger.nextExecutionTime(le != <span class="keyword">null</span> ?</div><div class="line">        <span class="keyword">new</span> SimpleTriggerContext(le.getScheduledStart(), le.getRunStart(), le.getRunEnd()) :</div><div class="line">        <span class="keyword">new</span> SimpleTriggerContext());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">skipRun</span><span class="params">(LastExecution lastExecution, Date scheduledRunTime)</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>SimpleTriggerContext</code>从其名字就可以看到很多东西了，因为它实现了<code>TriggerContext</code>接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Simple data holder implementation of the &#123;<span class="doctag">@link</span> TriggerContext&#125; interface.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 3.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTriggerContext</span> <span class="keyword">implements</span> <span class="title">TriggerContext</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> Date lastScheduledExecutionTime;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> Date lastActualExecutionTime;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> Date lastCompletionTime;</div><div class="line">...</div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * Create a SimpleTriggerContext with the given time values.</div><div class="line">	 * <span class="doctag">@param</span> lastScheduledExecutionTime last &lt;i&gt;scheduled&lt;/i&gt; execution time</div><div class="line">	 * <span class="doctag">@param</span> lastActualExecutionTime last &lt;i&gt;actual&lt;/i&gt; execution time</div><div class="line">	 * <span class="doctag">@param</span> lastCompletionTime last completion time</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SimpleTriggerContext</span><span class="params">(Date lastScheduledExecutionTime, Date lastActualExecutionTime, Date lastCompletionTime)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.lastScheduledExecutionTime = lastScheduledExecutionTime;</div><div class="line">		<span class="keyword">this</span>.lastActualExecutionTime = lastActualExecutionTime;</div><div class="line">		<span class="keyword">this</span>.lastCompletionTime = lastCompletionTime;</div><div class="line">	&#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也正如你看到的，在构造函数中设置的时间值来自<strong>javax.enterprise.concurrent.LastExecution的</strong>实现，其中： </p>
<ul>
<li>getScheduledStart：返回上次开始执行任务的时间。它对应于TriggerContext的lastScheduledExecutionTime属性。 </li>
<li>getRunStart：返回给定任务开始运行的时间。在TriggerContext中，它对应于lastActualExecutionTime。 </li>
<li>getRunEnd：任务终止时返回。它用于在TriggerContext中设置lastCompletionTime。</li>
</ul>
<p>Spring调度和异步执行中的另一个重要类是<strong>org.springframework.core.task.support.TaskExecutorAdapter</strong>。它是一个将<strong>java.util.concurrent.Executor</strong>作为Spring基本的执行器的适配器(描述的有点拗口,看下面代码就明了了)，之前已经描述了<code>TaskExecutor</code>。实际上，它引用了Java的ExecutorService，它也是继承了<code>Executor</code>接口。此引用用于完成所有提交的任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Adapter that takes a JDK &#123;<span class="doctag">@code</span> java.util.concurrent.Executor&#125; and</div><div class="line"> * exposes a Spring &#123;<span class="doctag">@link</span> org.springframework.core.task.TaskExecutor&#125; for it.</div><div class="line"> * Also detects an extended &#123;<span class="doctag">@code</span> java.util.concurrent.ExecutorService 从此解释上面的说明&#125;, adapting</div><div class="line"> * the &#123;<span class="doctag">@link</span> org.springframework.core.task.AsyncTaskExecutor&#125; interface accordingly.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 3.0</div><div class="line"> * <span class="doctag">@see</span> java.util.concurrent.Executor</div><div class="line"> * <span class="doctag">@see</span> java.util.concurrent.ExecutorService </div><div class="line"> * <span class="doctag">@see</span> java.util.concurrent.Executors</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorAdapter</span> <span class="keyword">implements</span> <span class="title">AsyncListenableTaskExecutor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Executor concurrentExecutor;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> TaskDecorator taskDecorator;</div><div class="line">  ...</div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * Create a new TaskExecutorAdapter,</div><div class="line">	 * using the given JDK concurrent executor.</div><div class="line">	 * <span class="doctag">@param</span> concurrentExecutor the JDK concurrent executor to delegate to</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TaskExecutorAdapter</span><span class="params">(Executor concurrentExecutor)</span> </span>&#123;</div><div class="line">		Assert.notNull(concurrentExecutor, <span class="string">"Executor must not be null"</span>);</div><div class="line">		<span class="keyword">this</span>.concurrentExecutor = concurrentExecutor;</div><div class="line">	&#125;</div><div class="line"> 	 <span class="comment">/**</span></div><div class="line">	 * Delegates to the specified JDK concurrent executor.</div><div class="line">	 * <span class="doctag">@see</span> java.util.concurrent.Executor#execute(Runnable)</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			doExecute(<span class="keyword">this</span>.concurrentExecutor, <span class="keyword">this</span>.taskDecorator, task);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(</div><div class="line">					<span class="string">"Executor ["</span> + <span class="keyword">this</span>.concurrentExecutor + <span class="string">"] did not accept task: "</span> + task, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task, <span class="keyword">long</span> startTimeout)</span> </span>&#123;</div><div class="line">		execute(task);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.taskDecorator == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.concurrentExecutor <span class="keyword">instanceof</span> ExecutorService) &#123;</div><div class="line">				<span class="keyword">return</span> ((ExecutorService) <span class="keyword">this</span>.concurrentExecutor).submit(task);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				FutureTask&lt;Object&gt; future = <span class="keyword">new</span> FutureTask&lt;&gt;(task, <span class="keyword">null</span>);</div><div class="line">				doExecute(<span class="keyword">this</span>.concurrentExecutor, <span class="keyword">this</span>.taskDecorator, future);</div><div class="line">				<span class="keyword">return</span> future;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(</div><div class="line">					<span class="string">"Executor ["</span> + <span class="keyword">this</span>.concurrentExecutor + <span class="string">"] did not accept task: "</span> + task, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在Spring中配置异步和计划任务"><a href="#在Spring中配置异步和计划任务" class="headerlink" title="在Spring中配置异步和计划任务"></a>在Spring中配置异步和计划任务</h2><p>下面我们通过代码的方式来实现异步任务。首先，我们需要通过注解来启用配置。它的XML配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"taskScheduler"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">pool-size</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"taskExecutor"</span> <span class="attr">scheduler</span>=<span class="string">"taskScheduler"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo.async"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>可以通过将<code>@EnableScheduling</code>和<code>@EnableAsync</code>注解添加到配置类(用@Configuration注解)来激活两者。完事，我们就可以开始着手实现调度和异步任务。为了实现调度任务，我们可以使用<code>@Scheduled</code>注解。我们可以从<strong>org.springframework.scheduling.annotation</strong>包中找到这个注解。它包含了以下几个属性： </p>
<ul>
<li><p><code>cron</code>：使用<code>CRON</code>风格(Linux配置定时任务的风格)的配置来配置需要启动的带注解的任务。 </p>
</li>
<li><p><code>zone</code>：要解析<code>CRON</code>表达式的时区。 </p>
</li>
<li><p><code>fixedDelay</code>或<code>fixedDelayString</code>：在固定延迟时间后执行任务。即任务将在最后一次调用结束和下一次调用的开始之间的这个固定时间段后执行。 </p>
</li>
<li><p><code>fixedRate</code>或<code>fixedRateString</code>：使用<code>fixedRate</code>注解的方法的调用将以固定的时间段(例如：每10秒钟)进行，与执行生命周期(开始，结束)无关。 </p>
</li>
<li><p><code>initialDelay</code>或<code>initialDelayString</code>：延迟首次执行调度方法的时间。请注意，所有值(<strong>fixedDelay </strong>，<strong>fixedRate </strong>，<strong>initialDelay</strong> <strong>)必须以毫秒表示。 </strong> <strong>需要特别记住的是</strong> ，用@Scheduled注解的方法不能接受任何参数，并且不返回任何内容(void)，如果有返回值，返回值也会被忽略掉的，没什么卵用。定时任务方法由容器管理，而不是由调用者在运行时调用。它们由 <strong>org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor</strong>来解析，其中包含以下方法来拒绝执行所有不正确定义的函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processScheduled</span><span class="params">(Scheduled scheduled, Method method, Object bean)</span> </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    Assert.isTrue(method.getParameterCount() == <span class="number">0</span>,</div><div class="line">					<span class="string">"Only no-arg methods may be annotated with @Scheduled"</span>);</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 *   之前的版本中直接把返回值非空的给拒掉了，在Spring 4.3 Spring5 的版本中就没那么严格了</div><div class="line">   	 *	 Assert.isTrue(void.class.equals(method.getReturnType()),</div><div class="line">     *               "Only void-returning methods may be annotated with <span class="doctag">@Scheduled</span>");</div><div class="line">     **/               </div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>​</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 注释很重要</div><div class="line"> * An annotation that marks a method to be scheduled. Exactly one of</div><div class="line"> * the &#123;<span class="doctag">@link</span> #cron()&#125;, &#123;<span class="doctag">@link</span> #fixedDelay()&#125;, or &#123;<span class="doctag">@link</span> #fixedRate()&#125;</div><div class="line"> * attributes must be specified.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;The annotated method must expect no arguments. It will typically have</div><div class="line"> * a &#123;<span class="doctag">@code</span> void&#125; return type; if not, the returned value will be ignored</div><div class="line"> * when called through the scheduler.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Processing of &#123;<span class="doctag">@code</span> <span class="doctag">@Scheduled</span>&#125; annotations is performed by</div><div class="line"> * registering a &#123;<span class="doctag">@link</span> ScheduledAnnotationBeanPostProcessor&#125;. This can be</div><div class="line"> * done manually or, more conveniently, through the &#123;<span class="doctag">@code</span> &lt;task:annotation-driven/&gt;&#125;</div><div class="line"> * element or @&#123;<span class="doctag">@link</span> EnableScheduling&#125; annotation.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;This annotation may be used as a &lt;em&gt;meta-annotation&lt;/em&gt; to create custom</div><div class="line"> * &lt;em&gt;composed annotations&lt;/em&gt; with attribute overrides.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Mark Fisher</div><div class="line"> * <span class="doctag">@author</span> Dave Syer</div><div class="line"> * <span class="doctag">@author</span> Chris Beams</div><div class="line"> * <span class="doctag">@since</span> 3.0</div><div class="line"> * <span class="doctag">@see</span> EnableScheduling</div><div class="line"> * <span class="doctag">@see</span> ScheduledAnnotationBeanPostProcessor</div><div class="line"> * <span class="doctag">@see</span> Schedules</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Repeatable</span>(Schedules.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<p>使用<code>@Async</code>注解标记一个方法或一个类(通过标记一个类，我们自动将其所有方法标记为异步)。与<code>@Scheduled</code>不同，异步任务可以接受参数，并可能返回某些东西。</p>
<h2 id="写一个在Spring中执行异步任务的Demo"><a href="#写一个在Spring中执行异步任务的Demo" class="headerlink" title="写一个在Spring中执行异步任务的Demo"></a>写一个在Spring中执行异步任务的Demo</h2><p>有了上面这些知识，我们可以来编写异步和计划任务。我们将通过测试用例来展示。我们从不同的任务执行器(task executors)的测试开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"classpath:applicationContext-test.xml"</span>&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorsTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpeAsync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">      * SimpleAsyncTaskExecutor creates new Thread for every task and executes it asynchronously. The threads aren't reused as in </div><div class="line">      * native Java's thread pools.</div><div class="line">      * </div><div class="line">      * The number of concurrently executed threads can be specified through concurrencyLimit bean property </div><div class="line">      * (concurrencyLimit XML attribute). Here it's more simple to invoke setConcurrencyLimit method. </div><div class="line">      * Here the tasks will be executed by 2 simultaneous threads. Without specifying this value,</div><div class="line">      * the number of executed threads will be indefinite.</div><div class="line">      * </div><div class="line">      * You can observe that only 2 tasks are executed at a given time - even if 3 are submitted to execution (lines 40-42).</div><div class="line">      **/</div><div class="line">    SimpleAsyncTaskExecutor executor = <span class="keyword">new</span> SimpleAsyncTaskExecutor(<span class="string">"thread_name_prefix_____"</span>);</div><div class="line">    executor.setConcurrencyLimit(<span class="number">2</span>);</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SimpleAsyncTask-1"</span>, Counters.simpleAsyncTask, <span class="number">1000</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SimpleAsyncTask-2"</span>, Counters.simpleAsyncTask, <span class="number">1000</span>));</div><div class="line"> </div><div class="line">    Thread.sleep(<span class="number">1050</span>);</div><div class="line">    assertTrue(<span class="string">"2 threads should be terminated, but "</span>+Counters.simpleAsyncTask.getNb()+<span class="string">" were instead"</span>, Counters.simpleAsyncTask.getNb() == <span class="number">2</span>);</div><div class="line"> </div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SimpleAsyncTask-3"</span>, Counters.simpleAsyncTask, <span class="number">1000</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SimpleAsyncTask-4"</span>, Counters.simpleAsyncTask, <span class="number">1000</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SimpleAsyncTask-5"</span>, Counters.simpleAsyncTask, <span class="number">2000</span>));</div><div class="line">     </div><div class="line">    Thread.sleep(<span class="number">1050</span>);</div><div class="line">    assertTrue(<span class="string">"4 threads should be terminated, but "</span>+Counters.simpleAsyncTask.getNb()+<span class="string">" were instead"</span>, Counters.simpleAsyncTask.getNb() == <span class="number">4</span>);</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SimpleAsyncTask-6"</span>, Counters.simpleAsyncTask, <span class="number">1000</span>));</div><div class="line"> </div><div class="line">    Thread.sleep(<span class="number">1050</span>);</div><div class="line">    assertTrue(<span class="string">"6 threads should be terminated, but "</span>+Counters.simpleAsyncTask.getNb()+<span class="string">" were instead"</span>, </div><div class="line">      Counters.simpleAsyncTask.getNb() == <span class="number">6</span>);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncTaskTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">      * SyncTask works almost as Java's CountDownLatch. In fact, this executor is synchronous with the calling thread. In our case,</div><div class="line">      * SyncTaskExecutor tasks will be synchronous with JUnit thread. It means that the testing thread will sleep 5 </div><div class="line">      * seconds after executing the third task ('SyncTask-3'). To prove that, we check if the total execution time is ~5 seconds.</div><div class="line">      **/</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    SyncTaskExecutor executor = <span class="keyword">new</span> SyncTaskExecutor();</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SyncTask-1"</span>, Counters.syncTask, <span class="number">0</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SyncTask-2"</span>, Counters.syncTask, <span class="number">0</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SyncTask-3"</span>, Counters.syncTask, <span class="number">0</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SyncTask-4"</span>, Counters.syncTask, <span class="number">5000</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"SyncTask-5"</span>, Counters.syncTask, <span class="number">0</span>));</div><div class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">    <span class="keyword">int</span> execTime = Math.round((end-start)/<span class="number">1000</span>);</div><div class="line">    assertTrue(<span class="string">"Execution time should be 5 seconds but was "</span>+execTime+<span class="string">" seconds"</span>, execTime == <span class="number">5</span>); </div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadPoolTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">      * This executor can be used to expose Java's native ThreadPoolExecutor as Spring bean, with the </div><div class="line">      * possibility to set core pool size, max pool size and queue capacity through bean properties.</div><div class="line">      * </div><div class="line">      * It works exactly as ThreadPoolExecutor from java.util.concurrent package. It means that our pool starts </div><div class="line">      * with 2 threads (core pool size) and can be growth until 3 (max pool size).</div><div class="line">      * In additionally, 1 task can be stored in the queue. This task will be treated </div><div class="line">      * as soon as one from 3 threads ends to execute provided task. In our case, we try to execute 5 tasks</div><div class="line">      * in 3 places pool and 1 place queue. So the 5th task should be rejected and TaskRejectedException should be thrown.</div><div class="line">      **/</div><div class="line">    ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</div><div class="line">    executor.setCorePoolSize(<span class="number">2</span>);</div><div class="line">    executor.setMaxPoolSize(<span class="number">3</span>);</div><div class="line">    executor.setQueueCapacity(<span class="number">1</span>);</div><div class="line">    executor.initialize();</div><div class="line"> </div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"ThreadPoolTask-1"</span>, Counters.threadPool, <span class="number">1000</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"ThreadPoolTask-2"</span>, Counters.threadPool, <span class="number">1000</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"ThreadPoolTask-3"</span>, Counters.threadPool, <span class="number">1000</span>));</div><div class="line">    executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"ThreadPoolTask-4"</span>, Counters.threadPool, <span class="number">1000</span>));</div><div class="line">    <span class="keyword">boolean</span> wasTre = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      executor.execute(<span class="keyword">new</span> SimpleTask(<span class="string">"ThreadPoolTask-5"</span>, Counters.threadPool, <span class="number">1000</span>));</div><div class="line">    &#125; <span class="keyword">catch</span> (TaskRejectedException tre) &#123;</div><div class="line">      wasTre = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    assertTrue(<span class="string">"The last task should throw a TaskRejectedException but it wasn't"</span>, wasTre);</div><div class="line"> </div><div class="line">    Thread.sleep(<span class="number">3000</span>);</div><div class="line"> </div><div class="line">    assertTrue(<span class="string">"4 tasks should be terminated, but "</span>+Counters.threadPool.getNb()+<span class="string">" were instead"</span>, </div><div class="line">      Counters.threadPool.getNb()==<span class="number">4</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="keyword">private</span> Counters counter;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> sleepTime;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SimpleTask</span><span class="params">(String name, Counters counter, <span class="keyword">int</span> sleepTime)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.counter = counter;</div><div class="line">    <span class="keyword">this</span>.sleepTime = sleepTime;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Thread.sleep(<span class="keyword">this</span>.sleepTime);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.counter.increment();</div><div class="line">    System.out.println(<span class="string">"Running task '"</span>+<span class="keyword">this</span>.name+<span class="string">"' in Thread "</span>+Thread.currentThread().getName());</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">"Task &#123;"</span>+<span class="keyword">this</span>.name+<span class="string">"&#125;"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">enum</span> Counters &#123;</div><div class="line">         </div><div class="line">  simpleAsyncTask(<span class="number">0</span>),</div><div class="line">  syncTask(<span class="number">0</span>),</div><div class="line">  threadPool(<span class="number">0</span>);</div><div class="line">   </div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> nb;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNb</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.nb;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.nb++;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Counters</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.nb = n;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在过去，我们可以有更多的执行器可以使用(SimpleThreadPoolTaskExecutor，TimerTaskExecutor 这些都2.x 3.x的老古董了)。但都被弃用并由本地Java的执行器取代成为Spring的首选。看看输出的结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Running task <span class="string">'SimpleAsyncTask-1'</span> in Thread thread_name_prefix_____1</div><div class="line">Running task <span class="string">'SimpleAsyncTask-2'</span> in Thread thread_name_prefix_____2</div><div class="line">Running task <span class="string">'SimpleAsyncTask-3'</span> in Thread thread_name_prefix_____3</div><div class="line">Running task <span class="string">'SimpleAsyncTask-4'</span> in Thread thread_name_prefix_____4</div><div class="line">Running task <span class="string">'SimpleAsyncTask-5'</span> in Thread thread_name_prefix_____5</div><div class="line">Running task <span class="string">'SimpleAsyncTask-6'</span> in Thread thread_name_prefix_____6</div><div class="line">Running task <span class="string">'SyncTask-1'</span> in Thread main</div><div class="line">Running task <span class="string">'SyncTask-2'</span> in Thread main</div><div class="line">Running task <span class="string">'SyncTask-3'</span> in Thread main</div><div class="line">Running task <span class="string">'SyncTask-4'</span> in Thread main</div><div class="line">Running task <span class="string">'SyncTask-5'</span> in Thread main</div><div class="line">Running task <span class="string">'ThreadPoolTask-2'</span> in Thread ThreadPoolTaskExecutor-<span class="number">2</span></div><div class="line">Running task <span class="string">'ThreadPoolTask-1'</span> in Thread ThreadPoolTaskExecutor-<span class="number">1</span></div><div class="line">Running task <span class="string">'ThreadPoolTask-4'</span> in Thread ThreadPoolTaskExecutor-<span class="number">3</span></div><div class="line">Running task <span class="string">'ThreadPoolTask-3'</span> in Thread ThreadPoolTaskExecutor-<span class="number">2</span></div></pre></td></tr></table></figure>
<p>以此我们可以推断出，第一个测试为每个任务创建新的线程。通过使用不同的线程名称，我们可以看到相应区别。第二个，同步执行器，应该执行所调用线程中的任务。这里可以看到’main’是主线程的名称，它的主线程调用执行同步所有任务。最后一种例子涉及最大可创建3个线程的线程池。从结果可以看到，他们也确实只有3个创建线程。</p>
<p>现在，我们将编写一些单元测试来看看@Async和@Scheduled实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"classpath:applicationContext-test.xml"</span>&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> GenericApplicationContext context;</div><div class="line">         </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testScheduled</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"> </div><div class="line">      System.out.println(<span class="string">"Start sleeping"</span>);</div><div class="line">      Thread.sleep(<span class="number">6000</span>);</div><div class="line">      System.out.println(<span class="string">"Wake up !"</span>);</div><div class="line"> </div><div class="line">      TestScheduledTask scheduledTask = (TestScheduledTask) context.getBean(<span class="string">"testScheduledTask"</span>);</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * Test fixed delay. It's executed every 6 seconds. The first execution is registered after application's context start. </div><div class="line">        **/</div><div class="line">      assertTrue(<span class="string">"Scheduled task should be executed 2 times (1 before sleep in this method, 1 after the sleep), but was "</span>+scheduledTask.getFixedDelayCounter(), </div><div class="line">        scheduledTask.getFixedDelayCounter() == <span class="number">2</span>);</div><div class="line">       </div><div class="line">       <span class="comment">/**</span></div><div class="line">        * Test fixed rate. It's executed every 6 seconds. The first execution is registered after application's context start. </div><div class="line">        * Unlike fixed delay, a fixed rate configuration executes one task with specified time. For example, it will execute on </div><div class="line">        * 6 seconds delayed task at 10:30:30, 10:30:36, 10:30:42 and so on - even if the task 10:30:30 taken 30 seconds to </div><div class="line">        * be terminated. In teh case of fixed delay, if the first task takes 30 seconds, the next will be executed 6 seconds </div><div class="line">        * after the first one, so the execution flow will be: 10:30:30, 10:31:06, 10:31:12.</div><div class="line">        **/</div><div class="line">      assertTrue(<span class="string">"Scheduled task should be executed 2 times (1 before sleep in this method, 1 after the sleep), but was "</span>+scheduledTask.getFixedRateCounter(), </div><div class="line">        scheduledTask.getFixedRateCounter() == <span class="number">2</span>);</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * Test fixed rate with initial delay attribute. The initialDelay attribute is set to 6 seconds. It causes that </div><div class="line">        * scheduled method is executed 6 seconds after application's context start. In our case, it should be executed </div><div class="line">        * only once because of previous Thread.sleep(6000) invocation.</div><div class="line">        **/</div><div class="line">      assertTrue(<span class="string">"Scheduled task should be executed 1 time (0 before sleep in this method, 1 after the sleep), but was "</span>+scheduledTask.getInitialDelayCounter(), scheduledTask.getInitialDelayCounter() == <span class="number">1</span>);</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * Test cron scheduled task. Cron is scheduled to be executed every 6 seconds. It's executed only once, </div><div class="line">        * so we can deduce that it's not invoked directly before applications </div><div class="line">        * context start, but only after configured time (6 seconds in our case).</div><div class="line">        **/</div><div class="line">      assertTrue(<span class="string">"Scheduled task should be executed 1 time (0 before sleep in this method, 1 after the sleep), but was "</span>+scheduledTask.getCronCounter(), scheduledTask.getCronCounter() == <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsyc</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * To test <span class="doctag">@Async</span> annotation, we can create a bean in-the-fly. AsyncCounter bean is a</div><div class="line">        * simple counter which value should be equals to 2 at the end of the test. A supplementary test</div><div class="line">        * concerns threads which execute both of AsyncCounter methods: one which </div><div class="line">        * isn't annotated with <span class="doctag">@Async</span> and another one which is annotated with it. For the first one, invoking</div><div class="line">        * thread should have the same name as the main thread. For annotated method, it can't be executed in </div><div class="line">        * the main thread. It must be executed asynchrounously in a new thread.</div><div class="line">        **/</div><div class="line">      context.registerBeanDefinition(<span class="string">"asyncCounter"</span>, <span class="keyword">new</span> RootBeanDefinition(AsyncCounter.class));</div><div class="line">       </div><div class="line">      String currentName = Thread.currentThread().getName();</div><div class="line">      AsyncCounter asyncCounter = context.getBean(<span class="string">"asyncCounter"</span>, AsyncCounter.class);</div><div class="line">      asyncCounter.incrementNormal();</div><div class="line">      assertTrue(<span class="string">"Thread executing normal increment should be the same as JUnit thread but it wasn't (expected '"</span>+currentName+<span class="string">"', got '"</span>+asyncCounter.getNormalThreadName()+<span class="string">"')"</span>,</div><div class="line">                      asyncCounter.getNormalThreadName().equals(currentName));</div><div class="line">      asyncCounter.incrementAsync();</div><div class="line">      <span class="comment">// sleep 50ms and give some time to AsyncCounter to update asyncThreadName value</span></div><div class="line">      Thread.sleep(<span class="number">50</span>);</div><div class="line"> </div><div class="line">      assertFalse(<span class="string">"Thread executing @Async increment shouldn't be the same as JUnit thread but it wasn (JUnit thread '"</span>+currentName+<span class="string">"', @Async thread '"</span>+asyncCounter.getAsyncThreadName()+<span class="string">"')"</span>,</div><div class="line">                      asyncCounter.getAsyncThreadName().equals(currentName));</div><div class="line">      System.out.println(<span class="string">"Main thread execution's name: "</span>+currentName);</div><div class="line">      System.out.println(<span class="string">"AsyncCounter normal increment thread execution's name: "</span>+asyncCounter.getNormalThreadName());</div><div class="line">      System.out.println(<span class="string">"AsyncCounter @Async increment thread execution's name: "</span>+asyncCounter.getAsyncThreadName());</div><div class="line">      assertTrue(<span class="string">"Counter should be 2, but was "</span>+asyncCounter.getCounter(), asyncCounter.getCounter()==<span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncCounter</span> </span>&#123;</div><div class="line">         </div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">  <span class="keyword">private</span> String normalThreadName;</div><div class="line">  <span class="keyword">private</span> String asyncThreadName;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incrementNormal</span><span class="params">()</span> </span>&#123;</div><div class="line">    normalThreadName = Thread.currentThread().getName();</div><div class="line">    <span class="keyword">this</span>.counter++;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Async</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incrementAsync</span><span class="params">()</span> </span>&#123;</div><div class="line">    asyncThreadName = Thread.currentThread().getName();</div><div class="line">    <span class="keyword">this</span>.counter++;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getAsyncThreadName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> asyncThreadName;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNormalThreadName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> normalThreadName;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCounter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.counter;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，我们需要创建新的配置文件和一个包含定时任务方法的类：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- imported configuration file first --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Activates various annotations to be detected in bean classes --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- Scans the classpath for annotated components that will be auto-registered as Spring beans.</span></div><div class="line"> For example @Controller and @Service. Make sure to set the correct base-package--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo.test.schedulers"</span> /&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;<span class="name">task:scheduler</span> <span class="attr">id</span>=<span class="string">"taskScheduler"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">pool-size</span>=<span class="string">"40"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"taskExecutor"</span> <span class="attr">scheduler</span>=<span class="string">"taskScheduler"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// scheduled methods after, all are executed every 6 seconds (scheduledAtFixedRate and scheduledAtFixedDelay start to execute at</span></div><div class="line"><span class="comment">// application context start, two other methods begin 6 seconds after application's context start)</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScheduledTask</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> fixedRateCounter = <span class="number">0</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> fixedDelayCounter = <span class="number">0</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> initialDelayCounter = <span class="number">0</span>;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> cronCounter = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  <span class="meta">@Scheduled</span>(fixedRate = <span class="number">6000</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledAtFixedRate</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;R&gt; Increment at fixed rate"</span>);</div><div class="line">    fixedRateCounter++;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">6000</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledAtFixedDelay</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;D&gt; Incrementing at fixed delay"</span>);</div><div class="line">    fixedDelayCounter++;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">6000</span>, initialDelay = <span class="number">6000</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledWithInitialDelay</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;DI&gt; Incrementing with initial delay"</span>);</div><div class="line">    initialDelayCounter++;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="meta">@Scheduled</span>(cron = <span class="string">"**/6 ** ** ** ** **"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledWithCron</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"&lt;C&gt; Incrementing with cron"</span>);</div><div class="line">    cronCounter++;</div><div class="line">           </div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFixedRateCounter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fixedRateCounter;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFixedDelayCounter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fixedDelayCounter;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInitialDelayCounter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.initialDelayCounter;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCronCounter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.cronCounter;</div><div class="line">  &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该测试的输出：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;R&gt; Increment at fixed rate</div><div class="line">&lt;D&gt; Incrementing at fixed delay</div><div class="line">Start sleeping</div><div class="line">&lt;C&gt; Incrementing with cron</div><div class="line">&lt;DI&gt; Incrementing with initial delay</div><div class="line">&lt;R&gt; Increment at fixed rate</div><div class="line">&lt;D&gt; Incrementing at fixed delay</div><div class="line">Wake up !</div><div class="line">Main thread execution's name: main</div><div class="line">AsyncCounter normal increment thread execution's name: main</div><div class="line">AsyncCounter @Async increment thread execution's name: taskExecutor-1</div></pre></td></tr></table></figure>
<p>本文向我们介绍了关于Spring框架另一个大家比较感兴趣的功能–定时任务。我们可以看到，与Linux CRON风格配置类似，这些任务同样可以按照固定的频率进行定时任务的设置。我们还通过例子证明了使用@Async注解的方法会在不同线程中执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的异步和计划任务&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的异步和计划任务&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的异步和计划任务&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的异步和计划任务&lt;/h1&gt;&lt;p&gt;Java提供了许多创建线程池的方式，并得到一个Future实例来作为任务结果。对于Spring同样小菜一碟，通过其&lt;code&gt;scheduling&lt;/code&gt;包就可以做到将任务线程中后台执行。&lt;/p&gt;
&lt;p&gt;在本文的第一部分中，我们将讨论下Spring中执行计划任务的一些基础知识。之后，我们将解释这些类是如何一起协作来启动并执行计划任务的。下一部分将介绍计划和异步任务的配置。最后，我们来写个Demo，看看如何通过单元测试来编排计划任务。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Refresh your Java skills--Java中的即时编译(Just-in-time compilation)</title>
    <link href="https://muyinchen.github.io/2017/10/10/Refresh%20your%20Java%20skills--Java%E4%B8%AD%E7%9A%84%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91/"/>
    <id>https://muyinchen.github.io/2017/10/10/Refresh your Java skills--Java中的即时编译/</id>
    <published>2017-10-10T10:00:25.000Z</published>
    <updated>2017-10-10T10:44:38.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Refresh-your-Java-skills–Java中的即时编译-Just-in-time-compilation"><a href="#Refresh-your-Java-skills–Java中的即时编译-Just-in-time-compilation" class="headerlink" title="Refresh your Java skills–Java中的即时编译(Just-in-time compilation)"></a>Refresh your Java skills–Java中的即时编译(Just-in-time compilation)</h1><p>因自己在写的关于Java9的新书因为篇幅和读者层次的原因并不能将能想到的东西都写进去，故接下来整理出一系列的博文来补充拓展。</p>
<p>像其他一些编程语言一样，Java通常也被称为“编译语言”。但有时你可能会感到困惑，尤其是当有人告诉你Java是JIT编译，并问你其中的一些小细节时。</p>
<p>本文就来说一说JIT编译的概念。在第一部分，我们将对不同类型的编译描述一番。第二部分来说说JIT编译。接下来，我们将深入一下JIT编译在Java中比较特别的地方。<br><a id="more"></a></p>
<h2 id="编译类型"><a href="#编译类型" class="headerlink" title="编译类型"></a>编译类型</h2><p>在讨论编译类型之前，我们需要了解什么是编译。这是一个将编程语言翻译成机器可理解的语言(也称为<strong>机器代码</strong>)的过程。机器语言由CPU执行的指令组成。这个语言是由0-1构成的，如在<a href="http://en.wikibooks.org/wiki/A-level_Computing/AQA/Computer_Components,_The_Stored_Program_Concept_and_the_Internet/Machine_Level_Architecture/Machine_code_and_processor_instruction_set" target="_blank" rel="external">wikibooks页面</a>上的这个片段所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">0001</span> <span class="number">00000111</span></div><div class="line"><span class="number">0100</span> <span class="number">00001001</span></div><div class="line"><span class="number">0000</span> <span class="number">00011110</span></div></pre></td></tr></table></figure>
<h2 id="即时编译"><a href="#即时编译" class="headerlink" title="即时编译"></a>即时编译</h2><p>同样，我们知道，Java的<strong>javac</strong>指令不会生成机器代码，而是一些名为<strong>字节码的</strong>东西。而这不仅仅是一种语言会这么做(而这也是很多现代语言所发展的一个方向)。比如ActionScript(由ActionScript Virtual Machine执行)或CIL(由C#使用并在Common Language Runtime上执行)。</p>
<p>在这里，在我们的括号中所说的“执行”，也就是即时编译完成(即字节码编译成目标机器可执行的机器码)。这种特殊类型的编译发生在解释给定字节码的机器上，如ActionScript虚拟机或Java虚拟机(JVM)。字节码由他们在运行时( on runtime)编译成机器码。</p>
<p>这种编译带来了一些好处。第一个显着的优点是可以做到根据所运行机器参数来优化编译的代码。静态编译器为目标机器进行优化并一次生成机器代码。另一方面，JIT编译器提供了一种中间代码，它被转换和优化为特定于执行机器的机器代码。关于这里有一篇解释的比较通俗的文章<a href="http://www.cnblogs.com/csxf/p/3387365.html" target="_blank" rel="external">动态编译和静态编译及Java执行</a>，有兴趣可以看看</p>
<p>第二个优点是便携性。转换为字节码的代码可以在安装了虚拟机的任何计算机上运行。</p>
<h2 id="Java中的即时编译"><a href="#Java中的即时编译" class="headerlink" title="Java中的即时编译"></a>Java中的即时编译</h2><p>So，Java是即时编译为机器代码的。想要检查编译机器代码，我们可以启用多个JVM参数：</p>
<ul>
<li><p>-XX：+ PrintCompilation</p>
<p>通过这个参数，我们可以得到方法编译结果的输出。其输出的样例：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">71</span> <span class="number">1</span> java.lang.String :: indexOf(<span class="number">70</span> bytes)</div><div class="line"><span class="number">73</span> <span class="number">2</span> sun.nio.cs.UTF_8 $ Encoder :: encode(<span class="number">361</span> bytes)</div><div class="line"><span class="number">87</span> <span class="number">3</span> java.lang.String :: hashCode(<span class="number">55</span> bytes)</div></pre></td></tr></table></figure>
<ul>
<li><p>输出被格式化为列，第一列(例如71)是时间戳。第二列返回唯一的编译器任务ID(1，2，3 …)。之后我们可以看到编译的方法。在括号中指定了编译字节码的字节。我们可以看到indexOf方法的大小是70字节，encode 方法是361字节等等。</p>
</li>
<li><p>-XX：+ UnlockDiagnosticVMOptions</p>
<p>一个简单的标志，JVM诊断的补充选项。</p>
</li>
<li><p>-XX：+ PrintInlining</p>
<p>通过这个配置，我们可以看到编译方法的细节。内联是编译器优化编译代码重要的工作方式。请看以下方法：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">  callAnotherMethod();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过内联，函数<code>callAnotherMethod()</code>将被<code>callAnotherMethod</code>的内容替换。正因为如此，在运行时，机器不会从一个方法跳转到另一个方法，并能够以<code>内联方式</code>执行代码。JIT通过此操作用来避免在堆栈上放置参数的复杂情况。当我们启用此参数(+PrintInlining)并运行代码时，我们可以看到类似下面的结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">75</span> <span class="number">1</span> java.lang.String :: indexOf(<span class="number">70</span> bytes)</div><div class="line"><span class="number">77</span> <span class="number">2</span> sun.nio.cs.UTF_8 $ Encoder :: encode(<span class="number">361</span> bytes)</div><div class="line">                    @ <span class="number">66</span> java.lang.String :: indexOfSupplementary(<span class="number">71</span> bytes) too big</div><div class="line">                    @ <span class="number">14</span> java.lang.Math :: min(<span class="number">11</span> bytes)(intrinsic)</div><div class="line">                    @ <span class="number">139</span> java.lang.Character :: isSurrogate(<span class="number">18</span> bytes) never executed</div><div class="line"><span class="number">89</span> <span class="number">3</span> java.lang.String :: hashCode(<span class="number">55</span> bytes)</div></pre></td></tr></table></figure>
<p>让我们回到理论层面面，Java中的JIT编译(这里说是动态编译)可以是(这里可以参考一篇文章<br> <a href="http://blog.csdn.net/sunxianghuang/article/details/52094859" target="_blank" rel="external">JVM即时编译（JIT）</a>，我这里用更加暴力通俗的方式说了下，能知道是个什么作用就可以)： </p>
<ul>
<li>lazy：只有真正使用的方法(在运行时调用)才会被编译成机器代码。 </li>
<li>adaptive(自适应)：整个程序被编译成一些脏机器代码。此代码仅针对非常常用的方法进行了优化。</li>
</ul>
<p>已经编译的字节码存储到<strong>代码缓存中</strong>。这是一个结构，所有编译的方法。当再次调用给定方法时，它不会从头开始编译，而是从代码缓存中加载。但是，当编译器认为可以更好地优化此方法时，缓存方法可以被覆盖。在优化技术中，我们可以通过以下区分： </p>
<ul>
<li>内联：在前面的描述中可以知道，可以避免方法跳跃。 </li>
<li>垃圾代码(称之死代码更恰当)：当某些对象存在于字节码中且不被使用时，编译器可以决定从机器代码中删除它们。 </li>
<li>循环优化：编译器可以组织并优化循环执行顺序或对尾递归优化成for循环等，以此来优化CPU所执行的代码。 </li>
<li>用实现方法替换接口方法：当给定接口的一个方法有且仅由一个对象实现时，编译器可以决定直接使用实现的方法，以避免在运行时绑定真正实现的方法所引起的开销。</li>
</ul>
<p>在本文中，我们解释了即时编译，即特定用于语言的编译代码(如Java的字节码)转换为CPU可以理解的语言(机器代码)。编译器不会进行简单的编译，因为它也对编译代码进行了一些优化。由于这些优化，机器代码尽可能地适应目标机器，另外，可以根据<a href="http://blog.csdn.net/opensure/article/details/46715675这篇文章中的两张图来更好的理解下上面所说的一些细节。" target="_blank" rel="external">http://blog.csdn.net/opensure/article/details/46715675这篇文章中的两张图来更好的理解下上面所说的一些细节。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Refresh-your-Java-skills–Java中的即时编译-Just-in-time-compilation&quot;&gt;&lt;a href=&quot;#Refresh-your-Java-skills–Java中的即时编译-Just-in-time-compilation&quot; class=&quot;headerlink&quot; title=&quot;Refresh your Java skills–Java中的即时编译(Just-in-time compilation)&quot;&gt;&lt;/a&gt;Refresh your Java skills–Java中的即时编译(Just-in-time compilation)&lt;/h1&gt;&lt;p&gt;因自己在写的关于Java9的新书因为篇幅和读者层次的原因并不能将能想到的东西都写进去，故接下来整理出一系列的博文来补充拓展。&lt;/p&gt;
&lt;p&gt;像其他一些编程语言一样，Java通常也被称为“编译语言”。但有时你可能会感到困惑，尤其是当有人告诉你Java是JIT编译，并问你其中的一些小细节时。&lt;/p&gt;
&lt;p&gt;本文就来说一说JIT编译的概念。在第一部分，我们将对不同类型的编译描述一番。第二部分来说说JIT编译。接下来，我们将深入一下JIT编译在Java中比较特别的地方。&lt;br&gt;
    
    </summary>
    
      <category term="Java9" scheme="https://muyinchen.github.io/categories/Java9/"/>
    
    
      <category term="Java" scheme="https://muyinchen.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的异步事件</title>
    <link href="https://muyinchen.github.io/2017/09/28/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E4%BA%8B%E4%BB%B6/"/>
    <id>https://muyinchen.github.io/2017/09/28/Spring5源码解析-Spring中的异步事件/</id>
    <published>2017-09-28T04:00:25.000Z</published>
    <updated>2017-09-28T04:11:56.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的异步事件"><a href="#Spring5源码解析-Spring中的异步事件" class="headerlink" title="Spring5源码解析-Spring中的异步事件"></a>Spring5源码解析-Spring中的异步事件</h1><p>上一篇 <a href="https://muyinchen.github.io/2017/09/27/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/">Spring框架中的事件和监听器</a>并未对Spring框架中的异步事件涉及太多，所以本篇是对其一个补充。</p>
<p>同步事件有一个主要缺点：它们在所调用线程的本地执行(也就是将所调用线程看成主线程的话，就是在主线程里依次执行)。如果监听器处理同步事件需要5秒钟的响应，则最终结果是用户将在至少5秒内无法看到响应(可以通过<a href="https://muyinchen.github.io/2017/09/27/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/">Spring框架中的事件和监听器</a>中的例子了解具体)。所以，我们可以通过一个替代方案来解决这个问题 - 异步事件。</p>
<p>接下来也就是介绍Spring框架中的异步事件。老规矩，第一部分深入框架源码，将描述主要组成部分以及它们如何一起协作的。在第二部分，我们将编写一些测试用例来检查异步事件的执行情况。</p>
<a id="more"></a>
<h2 id="Spring中的异步事件"><a href="#Spring中的异步事件" class="headerlink" title="Spring中的异步事件"></a>Spring中的异步事件</h2><p>在Spring中处理异步事件是基于本地的Java并发解决方案—任务执行器(可以了解下Java Executor框架的内容)。事件由<strong>multicastEvent</strong> 方法调度。它通过使用<strong>java.util.concurrent.Executor</strong>接口的实现将事件发送到专用的监听器。Multicaster会调用同步执行器，因为它是默认实现，这点在<a href="https://muyinchen.github.io/2017/09/27/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/">Spring框架中的事件和监听器</a>有明确的例子，从源码的角度也就是是否设置有<code>SyncTaskExecutor</code>实例。从<code>public void setTaskExecutor(@Nullable Executor taskExecutor)</code>其中，@Nullable 可看出Executor参数可为null，默认不设置的话，multicastEvent也就直接 跳过异步执行了</p>
<p><strong>org.springframework.context.event.SimpleApplicationEventMulticaster</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">		multicastEvent(event, resolveDefaultEventType(event));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, @Nullable ResolvableType eventType)</span> </span>&#123;</div><div class="line">		ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">final</span> ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</div><div class="line">			Executor executor = getTaskExecutor();</div><div class="line">			<span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</div><div class="line">				executor.execute(() -&gt; invokeListener(listener, event));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				invokeListener(listener, event);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> ResolvableType <span class="title">resolveDefaultEventType</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ResolvableType.forInstance(event);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set a custom executor (typically a &#123;<span class="doctag">@link</span> 	org.springframework.core.task.TaskExecutor&#125;)</div><div class="line">	 * to invoke each listener with.</div><div class="line">	 * &lt;p&gt;Default is equivalent to &#123;<span class="doctag">@link</span> org.springframework.core.task.SyncTaskExecutor&#125;,</div><div class="line">	 * executing all listeners synchronously in the calling thread.</div><div class="line">	 * &lt;p&gt;Consider specifying an asynchronous task executor here to not block the</div><div class="line">	 * caller until all listeners have been executed. However, note that asynchronous</div><div class="line">	 * execution will not participate in the caller's thread context (class loader,</div><div class="line">	 * transaction association) unless the TaskExecutor explicitly supports this.</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.task.SyncTaskExecutor</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.task.SimpleAsyncTaskExecutor</div><div class="line">	 * <span class="doctag">@Nullable</span> 可看出Executor参数可为null，默认不设置的话，上面multicastEvent也就直接	  * 跳过异步执行了</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskExecutor</span><span class="params">(@Nullable Executor taskExecutor)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.taskExecutor = taskExecutor;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return the current task executor for this multicaster.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> Executor <span class="title">getTaskExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.taskExecutor;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>异步执行器的实现可以参考<strong>org.springframework.core.task.SimpleAsyncTaskExecutor</strong>。这个类为每个提交的任务创建新的线程。然而，它不会重用线程，所以如果我们有很多长执行时间的异步任务需要来处理的时候，线程创建的风险就会变得太大了，会占用大量的资源，不光是cpu还包括jvm。具体源码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Executes the given task, within a concurrency throttle</div><div class="line"> * if configured (through the superclass's settings).</div><div class="line"> * <span class="doctag">@see</span> #doExecute(Runnable)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">	execute(task, TIMEOUT_INDEFINITE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Executes the given task, within a concurrency throttle</div><div class="line"> * if configured (through the superclass's settings).</div><div class="line"> * &lt;p&gt;Executes urgent tasks (with 'immediate' timeout) directly,</div><div class="line"> * bypassing the concurrency throttle (if active). All other</div><div class="line"> * tasks are subject to throttling.</div><div class="line"> * <span class="doctag">@see</span> #TIMEOUT_IMMEDIATE</div><div class="line"> * <span class="doctag">@see</span> #doExecute(Runnable)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task, <span class="keyword">long</span> startTimeout)</span> </span>&#123;</div><div class="line">	Assert.notNull(task, <span class="string">"Runnable must not be null"</span>);</div><div class="line">	Runnable taskToUse = (<span class="keyword">this</span>.taskDecorator != <span class="keyword">null</span> ? <span class="keyword">this</span>.taskDecorator.decorate(task) : task);</div><div class="line">	<span class="keyword">if</span> (isThrottleActive() &amp;&amp; startTimeout &gt; TIMEOUT_IMMEDIATE) &#123;</div><div class="line">		<span class="keyword">this</span>.concurrencyThrottle.beforeAccess();</div><div class="line">		doExecute(<span class="keyword">new</span> ConcurrencyThrottlingRunnable(taskToUse));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		doExecute(taskToUse);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</div><div class="line">     	<span class="comment">//创建</span></div><div class="line">	FutureTask&lt;Object&gt; future = <span class="keyword">new</span> FutureTask&lt;&gt;(task, <span class="keyword">null</span>);</div><div class="line">     	<span class="comment">//执行</span></div><div class="line">	execute(future, TIMEOUT_INDEFINITE);</div><div class="line">	<span class="keyword">return</span> future;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</div><div class="line">	FutureTask&lt;T&gt; future = <span class="keyword">new</span> FutureTask&lt;&gt;(task);</div><div class="line">	execute(future, TIMEOUT_INDEFINITE);</div><div class="line">	<span class="keyword">return</span> future;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Template method for the actual execution of a task.</div><div class="line"> * &lt;p&gt;The default implementation creates a new Thread and starts it.</div><div class="line"> * <span class="doctag">@param</span> task the Runnable to execute</div><div class="line"> * <span class="doctag">@see</span> #setThreadFactory</div><div class="line"> * <span class="doctag">@see</span> #createThread</div><div class="line"> * <span class="doctag">@see</span> java.lang.Thread#start()</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">	Thread thread = (<span class="keyword">this</span>.threadFactory != <span class="keyword">null</span> ? <span class="keyword">this</span>.threadFactory.newThread(task) : createThread(task));</div><div class="line">     <span class="comment">//可以看出，执行也只是简单的将创建的线程start执行下，别提什么重用了</span></div><div class="line">	thread.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了从线程池功能中受益，我们可以使用另一个Spring的Executor实现，<strong>org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor</strong>。类如其名，这个<code>Executor</code>允许我们使用线程池。关于线程池的源码，请期待我的Java9的书籍，里面会涉及到这里面的细节分析，也可以参考其他博客的博文(哈哈，我就是打个小广告而已)。</p>
<p><strong>org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return the underlying ThreadPoolExecutor for native access.</div><div class="line">	 * <span class="doctag">@return</span> the underlying ThreadPoolExecutor (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@throws</span> IllegalStateException if the ThreadPoolTaskExecutor hasn't been initialized yet</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">getThreadPoolExecutor</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</div><div class="line">		Assert.state(<span class="keyword">this</span>.threadPoolExecutor != <span class="keyword">null</span>, <span class="string">"ThreadPoolTaskExecutor not initialized"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.threadPoolExecutor;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">		Executor executor = getThreadPoolExecutor();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			executor.execute(task);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task, <span class="keyword">long</span> startTimeout)</span> </span>&#123;</div><div class="line">		execute(task);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</div><div class="line">		ExecutorService executor = getThreadPoolExecutor();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">return</span> executor.submit(task);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> TaskRejectedException(<span class="string">"Executor ["</span> + executor + <span class="string">"] did not accept task: "</span> + task, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="写一个Spring中异步事件的例子"><a href="#写一个Spring中异步事件的例子" class="headerlink" title="写一个Spring中异步事件的例子"></a>写一个Spring中异步事件的例子</h2><p>我们来编写一个能够同时处理同步和异步事件的multicaster。同步事件将使用本地同步调度程序进行调度(SyncTaskExecutor)，异步使用Spring的ThreadPoolTaskExecutor实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 下面的注释意思很明显了，不多说了</div><div class="line"> * &#123;<span class="doctag">@link</span> TaskExecutor&#125; implementation that executes each task &lt;i&gt;synchronously&lt;/i&gt;</div><div class="line"> * in the calling thread.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Mainly intended for testing scenarios.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Execution in the calling thread does have the advantage of participating</div><div class="line"> * in it's thread context, for example the thread context class loader or the</div><div class="line"> * thread's current transaction association. That said, in many cases,</div><div class="line"> * asynchronous execution will be preferable: choose an asynchronous</div><div class="line"> * &#123;<span class="doctag">@code</span> TaskExecutor&#125; instead for such scenarios.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 2.0</div><div class="line"> * <span class="doctag">@see</span> SimpleAsyncTaskExecutor</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncTaskExecutor</span> <span class="keyword">implements</span> <span class="title">TaskExecutor</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Executes the given &#123;<span class="doctag">@code</span> task&#125; synchronously, through direct</div><div class="line">	 * invocation of it's &#123;<span class="doctag">@link</span> Runnable#run() run()&#125; method.</div><div class="line">	 * <span class="doctag">@throws</span> IllegalArgumentException if the given &#123;<span class="doctag">@code</span> task&#125; is &#123;<span class="doctag">@code</span> null&#125;</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">		Assert.notNull(task, <span class="string">"Runnable must not be null"</span>);</div><div class="line">		task.run();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们需要为我们的测试用例添加一些bean：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;bean id="syncTaskExecutor" class="org.springframework.core.task.SyncTaskExecutor" /&gt;</div><div class="line">&lt;bean id="asyncTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"&gt;</div><div class="line">  &lt;!-- 10 task will be submitted immediately --&gt;</div><div class="line">  &lt;property name="corePoolSize" value="10" /&gt;</div><div class="line">  &lt;!-- If 10 task are already submitted and treated, we allow to enlarge pool capacity to 15 (10 from core pool size + 5 from max pool size) --&gt;</div><div class="line">  &lt;property name="maxPoolSize" value="15" /&gt;</div><div class="line">  &lt;!-- Number of tasks that can be placed into waiting queue --&gt;</div><div class="line">  &lt;property name="queueCapacity" value="10" /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"> </div><div class="line">&lt;bean id="applicationEventMulticaster" class="com.migo.event.SimpleEventMulticaster"&gt;</div><div class="line">  &lt;property name="taskExecutor" ref="syncTaskExecutor" /&gt;</div><div class="line">  &lt;property name="asyncTaskExecutor" ref="asyncTaskExecutor" /&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line">&lt;bean id="taskStatsHolder" class="com.migo.event.TaskStatsHolder" /&gt;</div></pre></td></tr></table></figure>
<p>用于测试任务执行结果的两个类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TaskStatsHolder.java</span></div><div class="line"><span class="comment">/****</span></div><div class="line"> ** Holder bean for all executed tasks.</div><div class="line"> **/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskStatsHolder</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> Map&lt;String, TaskStatData&gt; tasks = <span class="keyword">new</span> HashMap&lt;String, TaskStatData&gt;();</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNewTaskStatHolder</span><span class="params">(String key, TaskStatData value)</span> </span>&#123;</div><div class="line">    tasks.put(key, value);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> TaskStatData <span class="title">getTaskStatHolder</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> tasks.get(key);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// TaskStatData.java</span></div><div class="line"><span class="comment">/****</span></div><div class="line"> ** Holder class for all statistic data about already executed tasks.</div><div class="line"> **/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskStatData</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> String threadName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> executionTime;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startTime;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> endTime;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaskStatData</span><span class="params">(String threadName, <span class="keyword">long</span> startTime, <span class="keyword">long</span> endTime)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.threadName = threadName;</div><div class="line">      <span class="keyword">this</span>.startTime = startTime;</div><div class="line">      <span class="keyword">this</span>.endTime = endTime;</div><div class="line">      <span class="keyword">this</span>.executionTime = Math.round((endTime - startTime) / <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getThreadName</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> threadName;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExecutionTime</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.executionTime;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getStartTime</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.startTime;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getEndTime</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.endTime;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">      StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line">      result.append(<span class="string">"TaskStatData &#123;thread name: "</span>).append(<span class="keyword">this</span>.threadName).append(<span class="string">", start time: "</span>).append(<span class="keyword">new</span> Date(<span class="keyword">this</span>.startTime));</div><div class="line">      result.append(<span class="string">", end time: "</span>).append(<span class="keyword">new</span> Date(<span class="keyword">this</span>.endTime)).append(<span class="string">", execution time: "</span>).append(<span class="keyword">this</span>.executionTime).append(<span class="string">" seconds&#125;"</span>);</div><div class="line">      <span class="keyword">return</span> result.toString();</div><div class="line">    &#125;</div><div class="line">         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上代码所示，这些都是简单对象。我们会使用这些对象来检查我们的假设和执行结果是否相匹配。两个要分发的事件也很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ProductChangeFailureEvent.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * This is synchronous event dispatched when one product is modified in the backoffice. </div><div class="line"> * When product's modification fails (database, validation problem), this event is dispatched to</div><div class="line"> * all listeners. It's synchronous because we want to inform the user that some actions were done </div><div class="line"> * after the failure. Otherwise (asynchronous character of event) we shouldn't be able to</div><div class="line"> * know if something was done or not after the dispatch.</div><div class="line"> **/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductChangeFailureEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1681426286796814792L</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_KEY = <span class="string">"ProductChangeFailureEvent"</span>;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ProductChangeFailureEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(source);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// NotifMailDispatchEvent.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Event dispatched asynchronously every time when we want to send a notification mail. </div><div class="line"> * Notification mails to send should be stored somewhere (filesystem, database...) but in</div><div class="line"> * our case, we'll handle only one notification mail: when one product out-of-stock becomes available again.</div><div class="line"> **/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifMailDispatchEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> <span class="keyword">implements</span> <span class="title">AsyncApplicationEvent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">9202282810553100778L</span>;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_KEY = <span class="string">"NotifMailDispatchEvent"</span>;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NotifMailDispatchEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(source);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而用于处理相应调度事件的监听器也只需要将数据放入<code>TaskStatsHolder实例类</code>中即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ProductChangeFailureListener.java</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductChangeFailureListener</span> </span></div><div class="line">    <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ProductChangeFailureEvent</span>&gt;&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ProductChangeFailureEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">    ((TaskStatsHolder) event.getApplicationContext().getBean(<span class="string">"taskStatsHolder"</span>)).addNewTaskStatHolder(ProductChangeFailureEvent.TASK_KEY, <span class="keyword">new</span> TaskStatData(Thread.currentThread().getName(), start, end));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// NotifMailDispatchListener.java</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifMailDispatchListener</span> </span></div><div class="line">    <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">NotifMailDispatchEvent</span>&gt;&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(NotifMailDispatchEvent event)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    <span class="comment">// sleep 5 seconds to avoid that two listeners execute at the same moment</span></div><div class="line">    Thread.sleep(<span class="number">5000</span>);</div><div class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">    ((TaskStatsHolder) event.getApplicationContext().getBean(<span class="string">"taskStatsHolder"</span>)).addNewTaskStatHolder(NotifMailDispatchEvent.TASK_KEY, <span class="keyword">new</span> TaskStatData(Thread.currentThread().getName(), start, end));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用于测试的controller如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line">   </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/products/change-failure"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">changeFailure</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      System.out.println(<span class="string">"I'm modifying the product but a NullPointerException will be thrown"</span>);</div><div class="line">      String name = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> (name.isEmpty()) &#123;</div><div class="line">        <span class="comment">// show error message here</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"NullPointerException"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            context.publishEvent(<span class="keyword">new</span> ProductChangeFailureEvent(context));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/products/change-success"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">changeSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Product was correctly changed"</span>);</div><div class="line">    context.publishEvent(<span class="keyword">new</span> NotifMailDispatchEvent(context));</div><div class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，测试用例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"classpath:applicationContext-test.xml"</span>&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSyncAsyncEventsTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> WebApplicationContext wac;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.wac).build();</div><div class="line">    <span class="comment">// execute both urls simultaneously</span></div><div class="line">    mockMvc.perform(get(<span class="string">"/products/change-success"</span>));</div><div class="line">    mockMvc.perform(get(<span class="string">"/products/change-failure"</span>));</div><div class="line"> </div><div class="line">    <span class="comment">// get stats holder and check if both stats are available:</span></div><div class="line">    <span class="comment">// - mail dispatching shouldn't be available because it's executed after a sleep of 5 seconds</span></div><div class="line">    <span class="comment">// - product failure should be available because it's executed synchronously, almost immediately (no operations in listeners)</span></div><div class="line">    TaskStatsHolder statsHolder = (TaskStatsHolder) <span class="keyword">this</span>.wac.getBean(<span class="string">"taskStatsHolder"</span>);</div><div class="line">    TaskStatData mailStatData = statsHolder.getTaskStatHolder(NotifMailDispatchEvent.TASK_KEY);</div><div class="line">    TaskStatData productFailureData = statsHolder.getTaskStatHolder(ProductChangeFailureEvent.TASK_KEY);</div><div class="line">    assertTrue(<span class="string">"Task for mail dispatching is executed after 5 seconds, so at this moment, it taskStatsHolder shouldn't contain it"</span>, </div><div class="line">        mailStatData == <span class="keyword">null</span>);</div><div class="line">    assertTrue(<span class="string">"productFailureHolder shouldn't be null but it is"</span>, </div><div class="line">        productFailureData != <span class="keyword">null</span>);</div><div class="line">    assertTrue(<span class="string">"Product failure listener should be executed within 0 seconds but took "</span>+productFailureData.getExecutionTime()+<span class="string">" seconds"</span>, </div><div class="line">        productFailureData.getExecutionTime() == <span class="number">0</span>);</div><div class="line">    <span class="keyword">while</span> (mailStatData == <span class="keyword">null</span>) &#123;</div><div class="line">        mailStatData = statsHolder.getTaskStatHolder(NotifMailDispatchEvent.TASK_KEY);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// check mail dispatching stats again, when available</span></div><div class="line">    assertTrue(<span class="string">"Now task for mail dispatching should be at completed state"</span>, </div><div class="line">        mailStatData != <span class="keyword">null</span>);</div><div class="line">    assertTrue(<span class="string">"Task for mail dispatching should take 5 seconds but it took "</span>+mailStatData.getExecutionTime()+<span class="string">" seconds"</span>, </div><div class="line">        mailStatData.getExecutionTime() == <span class="number">5</span>);</div><div class="line">    assertTrue(<span class="string">"productFailureHolder shouldn't be null but it is"</span>, </div><div class="line">        productFailureData != <span class="keyword">null</span>);</div><div class="line">    assertTrue(<span class="string">"Product failure listener should be executed within 0 seconds but took "</span>+productFailureData.getExecutionTime()+<span class="string">" seconds"</span>, </div><div class="line">        productFailureData.getExecutionTime() == <span class="number">0</span>);</div><div class="line">    assertTrue(<span class="string">"Thread executing mail dispatch and product failure listeners shouldn't be the same"</span>, </div><div class="line">        !productFailureData.getThreadName().equals(mailStatData.getThreadName()));</div><div class="line">    assertTrue(<span class="string">"Thread executing product failure listener ("</span>+productFailureData.getThreadName()+<span class="string">") should be the same as current thread ("</span>+Thread.currentThread().getName()+<span class="string">") but it wasn't"</span>, </div><div class="line">        Thread.currentThread().getName().equals(productFailureData.getThreadName()));</div><div class="line">    assertTrue(<span class="string">"Thread executing mail dispatch listener ("</span>+mailStatData.getThreadName()+<span class="string">") shouldn't be the same as current thread ("</span>+Thread.currentThread().getName()+<span class="string">") but it was"</span>, </div><div class="line">        !Thread.currentThread().getName().equals(mailStatData.getThreadName()));</div><div class="line">    <span class="comment">// make some output to see the informations about tasks</span></div><div class="line">    System.out.println(<span class="string">"Data about mail notif dispatching event: "</span>+mailStatData);</div><div class="line">    System.out.println(<span class="string">"Data about product failure dispatching event: "</span>+productFailureData);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因之前整理的笔记此处SimpleEventMulticaster忘了放进去，也懒得去找了，可以通过xml定义去查看下，这个测试用例可以看出两个listener不是由同一个executor启动的，Product failure 监听器由同步执行器执行。因为他们没有做任何操作，几乎立即返回结果。关于邮件调度事件，通过休眠5秒可以得到其执行时间超过Product failure 监听器的执行时间。通过分析输出可以知道，两者在不同的线程中执行，所以由不同的执行器执行(关于这俩执行器的例子可以再搜下相关博文，其实主要还是想表达<code>SyncTaskExecutor</code>是在主线程里执行，而<code>asyncTaskExecutor</code>由线程池里管理的线程执行)。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Product was correctly changed</div><div class="line">I'm modifying the product but a NullPointerException will be thrown</div><div class="line">Data about mail notif dispatching event: TaskStatData &#123;thread name: asyncTaskExecutor-1(异步线程), start time: Thu Jun 19 21:14:18 CEST 2016, end time: Thu Jun 19 21:14:23 CEST 2016, execution time: 5 seconds&#125;</div><div class="line">Data about product failure dispatching event: TaskStatData &#123;thread name: main(主线程), start time: Thu Jun 19 21:14:21 CEST 2016, end time: Thu Jun 19 21:14:21 CEST 2016, execution time: 0 seconds&#125;</div></pre></td></tr></table></figure>
<p>本文简单介绍了如何在Spring中处理异步事件。当监听器需要执行很长时间，而我们又不想阻塞应用程序执行，就可以使用异步执行。异步执行可以通过异步执行器(如ThreadPoolTaskExecutor或SimpleAsyncTaskExecutor)实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的异步事件&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的异步事件&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的异步事件&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的异步事件&lt;/h1&gt;&lt;p&gt;上一篇 &lt;a href=&quot;https://muyinchen.github.io/2017/09/27/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/&quot;&gt;Spring框架中的事件和监听器&lt;/a&gt;并未对Spring框架中的异步事件涉及太多，所以本篇是对其一个补充。&lt;/p&gt;
&lt;p&gt;同步事件有一个主要缺点：它们在所调用线程的本地执行(也就是将所调用线程看成主线程的话，就是在主线程里依次执行)。如果监听器处理同步事件需要5秒钟的响应，则最终结果是用户将在至少5秒内无法看到响应(可以通过&lt;a href=&quot;https://muyinchen.github.io/2017/09/27/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/&quot;&gt;Spring框架中的事件和监听器&lt;/a&gt;中的例子了解具体)。所以，我们可以通过一个替代方案来解决这个问题 - 异步事件。&lt;/p&gt;
&lt;p&gt;接下来也就是介绍Spring框架中的异步事件。老规矩，第一部分深入框架源码，将描述主要组成部分以及它们如何一起协作的。在第二部分，我们将编写一些测试用例来检查异步事件的执行情况。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring框架中的事件和监听器</title>
    <link href="https://muyinchen.github.io/2017/09/27/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>https://muyinchen.github.io/2017/09/27/Spring5源码解析-Spring框架中的事件和监听器/</id>
    <published>2017-09-27T11:00:25.000Z</published>
    <updated>2017-09-27T11:03:12.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring框架中的事件和监听器"><a href="#Spring5源码解析-Spring框架中的事件和监听器" class="headerlink" title="Spring5源码解析- Spring框架中的事件和监听器"></a>Spring5源码解析- Spring框架中的事件和监听器</h1><p>事件和平时所用的回调思想在与GUI(JavaScript，Swing)相关的技术中非常流行。而在Web应用程序的服务器端，我们很少去直接使用。但这并不意味着我们无法在服务端去实现一个面向事件的体系结构。</p>
<p>在本文中，我们将重点介绍Spring框架中的事件处理。首先，会先介绍下事件驱动编程这个概念。接着，我们会将精力放在专门用于Spring框架中的事件处理之上。然后我们会看到实现事件调度和监听的主要方法。最后，我们将在Spring应用程序中展示如何使用基本的监听器。</p>
<a id="more"></a>
<h2 id="事件驱动编程"><a href="#事件驱动编程" class="headerlink" title="事件驱动编程"></a>事件驱动编程</h2><p>在开始讨论事件驱动编程的编程方面之前，先来说一个场景，用来帮助大家更好地理解<code>event-driven</code>这个概念。在一个地方只有两个卖衣服的商店A和B.在A店中，我们的消费者需要一个一个的接受服务，即，同一时间只有一个客户可以购物。在B店里，可以允许几个客户同时进行购物，当有客户需要卖家的帮助时，他需要举起他的右手示意一下。卖家看到后会来找他，帮助其做出更好的选择。关于事件驱动(<code>event-driven</code>)编程这个概念通过上述场景描述总结后就是：通过做一些动作来作为对一些行为的回应。</p>
<p>如上所见，事件驱动的编程(也称为基于事件的编程)是<strong>基于对接收到的信号的反应</strong>的<strong>编程形式</strong>。这些信号必须以某种形式来传输信息。举一个简单例子：<code>点击按钮</code>。我们将这些信号称为<strong>事件</strong>。这些事件可以通过用户操作(鼠标点击，触摸)或程序条件执行触发(例如：一个元素的加载结束可以启动另一个操作)来产生。</p>
<p>为了更好地了解，请看以下示例，模仿用户在GUI界面中的操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBasedTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    Mouse mouse = <span class="keyword">new</span> Mouse();</div><div class="line">    mouse.addListener(<span class="keyword">new</span> MouseListener() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(Mouse mouse)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Listener#1 called"</span>);</div><div class="line">        mouse.addListenerCallback();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    mouse.addListener(<span class="keyword">new</span> MouseListener() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(Mouse mouse)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Listener#2 called"</span>);</div><div class="line">        mouse.addListenerCallback();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    mouse.click();</div><div class="line">    assertTrue(<span class="string">"2 listeners should be invoked but only "</span>+mouse.getListenerCallbacks()+<span class="string">" were"</span>, mouse.getListenerCallbacks() == <span class="number">2</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> List&lt;mouselistener&gt; listeners = <span class="keyword">new</span> ArrayList&lt;mouselistener&gt;();</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> listenerCallbacks = <span class="number">0</span>;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListenerCallback</span><span class="params">()</span> </span>&#123;</div><div class="line">    listenerCallbacks++;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getListenerCallbacks</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> listenerCallbacks;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(MouseListener listener)</span> </span>&#123;</div><div class="line">    listeners.add(listener);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Clicked !"</span>);</div><div class="line">    <span class="keyword">for</span> (MouseListener listener : listeners) &#123;</div><div class="line">      listener.onClick(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MouseListener</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(Mouse source)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印输出如下所示：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Clicked !</div><div class="line">Listener#1 called</div><div class="line">Listener#2 called</div></pre></td></tr></table></figure>
<h2 id="Spring中的Events"><a href="#Spring中的Events" class="headerlink" title="Spring中的Events"></a>Spring中的Events</h2><p>Spring基于实现<strong>org.springframework.context.ApplicationListener</strong>接口的bean来进行事件处理。这个接口中只有一个方法，<strong>onApplicationEvent</strong>用来当一个事件发送过来时这个方法来触发相应的处理。该接口可以通过指定需要接收的事件来实现(不懂看源码咯，源码里方法接收一个<code>event</code>作为参数)。由此，Spring会自动过滤筛选可以用来接收给定事件的监听器(<code>listeners</code>)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interface to be implemented by application event listeners.</div><div class="line"> * Based on the standard &#123;<span class="doctag">@code</span> java.util.EventListener&#125; interface</div><div class="line"> * for the Observer design pattern.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;As of Spring 3.0, an ApplicationListener can generically declare the event type</div><div class="line"> * that it is interested in. When registered with a Spring ApplicationContext, events</div><div class="line"> * will be filtered accordingly, with the listener getting invoked for matching event</div><div class="line"> * objects only.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rod Johnson</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@param</span> &lt;E&gt; the specific ApplicationEvent subclass to listen to</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.event.ApplicationEventMulticaster</div><div class="line"> */</div><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Handle an application event.</div><div class="line">	 * <span class="doctag">@param</span> event the event to respond to</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E event)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事件通过<strong>org.springframework.context.ApplicationEvent</strong>实例来表示。这个抽象类继承扩展了<strong>java.util.EventObject</strong>，可以使用<strong>EventObject中的getSource</strong>方法，我们可以很容易地获得所发生的给定事件的对象。这里，事件存在两种类型： </p>
<ul>
<li><strong>与应用程序上下文相关联</strong>：所有这种类型的事件都继承自<strong>org.springframework.context.event.ApplicationContextEvent</strong>类。它们应用于由<strong>org.springframework.context.ApplicationContext</strong>引发的事件(其构造函数传入的是<code>ApplicationContext</code>类型的参数)。这样，我们就可以直接通过应用程序上下文的生命周期来得到所发生的事件：<code>ContextStartedEvent</code>在上下文启动时被启动，当它停止时启动<code>ContextStoppedEvent</code>，当上下文被刷新时产生<code>ContextRefreshedEvent</code>，最后在上下文关闭时产生<code>ContextClosedEvent</code>。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Base class for events raised for an &#123;<span class="doctag">@code</span> ApplicationContext&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 2.5</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new ContextStartedEvent.</div><div class="line">	 * <span class="doctag">@param</span> source the &#123;<span class="doctag">@code</span> ApplicationContext&#125; that the event is raised for</div><div class="line">	 * (must not be &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ApplicationContextEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(source);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Get the &#123;<span class="doctag">@code</span> ApplicationContext&#125; that the event was raised for.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (ApplicationContext) getSource();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Event raised when an &#123;<span class="doctag">@code</span> ApplicationContext&#125; gets started.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Mark Fisher</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 2.5</div><div class="line"> * <span class="doctag">@see</span> ContextStoppedEvent</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextStartedEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new ContextStartedEvent.</div><div class="line">	 * <span class="doctag">@param</span> source the &#123;<span class="doctag">@code</span> ApplicationContext&#125; that has been started</div><div class="line">	 * (must not be &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ContextStartedEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(source);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Event raised when an &#123;<span class="doctag">@code</span> ApplicationContext&#125; gets stopped.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Mark Fisher</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 2.5</div><div class="line"> * <span class="doctag">@see</span> ContextStartedEvent</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextStoppedEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new ContextStoppedEvent.</div><div class="line">	 * <span class="doctag">@param</span> source the &#123;<span class="doctag">@code</span> ApplicationContext&#125; that has been stopped</div><div class="line">	 * (must not be &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ContextStoppedEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(source);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Event raised when an &#123;<span class="doctag">@code</span> ApplicationContext&#125; gets initialized or refreshed.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 04.03.2003</div><div class="line"> * <span class="doctag">@see</span> ContextClosedEvent</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextRefreshedEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new ContextRefreshedEvent.</div><div class="line">	 * <span class="doctag">@param</span> source the &#123;<span class="doctag">@code</span> ApplicationContext&#125; that has been initialized</div><div class="line">	 * or refreshed (must not be &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ContextRefreshedEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(source);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Event raised when an &#123;<span class="doctag">@code</span> ApplicationContext&#125; gets closed.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 12.08.2003</div><div class="line"> * <span class="doctag">@see</span> ContextRefreshedEvent</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextClosedEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Creates a new ContextClosedEvent.</div><div class="line">	 * <span class="doctag">@param</span> source the &#123;<span class="doctag">@code</span> ApplicationContext&#125; that has been closed</div><div class="line">	 * (must not be &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ContextClosedEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(source);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>与request 请求相关联</strong>：由<strong>org.springframework.web.context.support.RequestHandledEvent</strong>实例来表示，当在ApplicationContext中处理请求时，它们被引发。</li>
</ul>
<p>Spring如何将事件分配给专门的监听器？这个过程由事件广播器(<code>event multicaster</code>)来实现，由<strong>org.springframework.context.event.ApplicationEventMulticaster</strong>接口的实现表示。此接口定义了3种方法，用于： </p>
<ul>
<li><strong>添加新的监听器</strong>：定义了两种方法来添加新的监听器：<strong>addApplicationListener(ApplicationListener&lt;?&gt; listener)</strong>和<strong>addApplicationListenerBean(String listenerBeanName)</strong>。当监听器对象已知时，可以应用第一个。如果使用第二个，我们需要将bean  name 得到listener对象(<code>依赖查找DL</code>)，然后再将其添加到<code>listener</code>列表中。 </li>
<li><strong>删除监听器</strong>：添加方法一样，我们可以通过传递对象来删除一个监听器(<strong>removeApplicationListener(ApplicationListener&lt;?&gt;  listener)</strong>或通过传递bean名称(<strong>removeApplicationListenerBean(String listenerBeanName))</strong>，  第三种方法，<strong>removeAllListeners()</strong>用来删除所有已注册的监听器 </li>
<li><strong>将事件发送到已注册的监听器</strong>：由<strong>multicastEvent(ApplicationEvent  event)</strong>源码注释可知，它用来向所有注册的监听器发送事件。实现可以从<strong>org.springframework.context.event.SimpleApplicationEventMulticaster中</strong>找到，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">	multicastEvent(event, resolveDefaultEventType(event));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, @Nullable ResolvableType eventType)</span> </span>&#123;</div><div class="line">	ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">final</span> ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</div><div class="line">		Executor executor = getTaskExecutor();</div><div class="line">		<span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</div><div class="line">			executor.execute(() -&gt; invokeListener(listener, event));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			invokeListener(listener, event);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> ResolvableType <span class="title">resolveDefaultEventType</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> ResolvableType.forInstance(event);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Invoke the given listener with the given event.</div><div class="line"> * <span class="doctag">@param</span> listener the ApplicationListener to invoke</div><div class="line"> * <span class="doctag">@param</span> event the current event to propagate</div><div class="line"> * <span class="doctag">@since</span> 4.1</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeListener</span><span class="params">(ApplicationListener listener, ApplicationEvent event)</span> </span>&#123;</div><div class="line">	ErrorHandler errorHandler = getErrorHandler();</div><div class="line">	<span class="keyword">if</span> (errorHandler != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			listener.onApplicationEvent(event);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">			errorHandler.handleError(err);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			listener.onApplicationEvent(event);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ClassCastException ex) &#123;</div><div class="line">			String msg = ex.getMessage();</div><div class="line">			<span class="keyword">if</span> (msg == <span class="keyword">null</span> || msg.startsWith(event.getClass().getName())) &#123;</div><div class="line">				<span class="comment">// Possibly a lambda-defined listener which we could not resolve the generic event type for</span></div><div class="line">				Log logger = LogFactory.getLog(getClass());</div><div class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">					logger.debug(<span class="string">"Non-matching event type for listener: "</span> + listener, ex);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们来看看<code>event multicaster</code>在应用程序上下文中所在的位置。在<code>AbstractApplicationContext</code>中定义的一些方法可以看到其中包含调用<strong>public void publishEvent</strong>方法。通过这种方法的注释可知，它负责向所有监听器发送给定的事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">	 * Publish the given event to all listeners.</div><div class="line">	 * &lt;p&gt;Note: Listeners get initialized after the MessageSource, to be able</div><div class="line">	 * to access it within listener implementations. Thus, MessageSource</div><div class="line">	 * implementations cannot publish events.</div><div class="line">	 * <span class="doctag">@param</span> event the event to publish (may be application-specific or a</div><div class="line">	 * standard framework event)</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</div><div class="line">		publishEvent(event, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Publish the given event to all listeners.</div><div class="line">	 * &lt;p&gt;Note: Listeners get initialized after the MessageSource, to be able</div><div class="line">	 * to access it within listener implementations. Thus, MessageSource</div><div class="line">	 * implementations cannot publish events.</div><div class="line">	 * <span class="doctag">@param</span> event the event to publish (may be an &#123;<span class="doctag">@link</span> ApplicationEvent&#125;</div><div class="line">	 * or a payload object to be turned into a &#123;<span class="doctag">@link</span> PayloadApplicationEvent&#125;)</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(Object event)</span> </span>&#123;</div><div class="line">		publishEvent(event, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Publish the given event to all listeners.</div><div class="line">	 * <span class="doctag">@param</span> event the event to publish (may be an &#123;<span class="doctag">@link</span> ApplicationEvent&#125;</div><div class="line">	 * or a payload object to be turned into a &#123;<span class="doctag">@link</span> PayloadApplicationEvent&#125;)</div><div class="line">	 * <span class="doctag">@param</span> eventType the resolved event type, if known</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(Object event, @Nullable ResolvableType eventType)</span> </span>&#123;</div><div class="line">		Assert.notNull(event, <span class="string">"Event must not be null"</span>);</div><div class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">			logger.trace(<span class="string">"Publishing event in "</span> + getDisplayName() + <span class="string">": "</span> + event);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Decorate event as an ApplicationEvent if necessary</span></div><div class="line">		ApplicationEvent applicationEvent;</div><div class="line">		<span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEvent) &#123;</div><div class="line">			applicationEvent = (ApplicationEvent) event;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			applicationEvent = <span class="keyword">new</span> PayloadApplicationEvent&lt;&gt;(<span class="keyword">this</span>, event);</div><div class="line">			<span class="keyword">if</span> (eventType == <span class="keyword">null</span>) &#123;</div><div class="line">				eventType = ((PayloadApplicationEvent)applicationEvent).getResolvableType();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Multicast right now if possible - or lazily once the multicaster is initialized</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationEvents != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.earlyApplicationEvents.add(applicationEvent);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Publish event via parent context as well...</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.parent <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</div><div class="line">				((AbstractApplicationContext) <span class="keyword">this</span>.parent).publishEvent(event, eventType);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">this</span>.parent.publishEvent(event);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>该方法由以下方法调用：启动上下文(启动后发布<code>ContextStartedEvent</code>)，停止上下文(停止后发布<code>ContextStoppedEvent</code>)，刷新上下文(刷新后发布<code>ContextRefreshedEvent</code>)并关闭上下文(关闭后发布<code>ContextClosedEvent</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Finish the refresh of this context, invoking the LifecycleProcessor's</div><div class="line"> * onRefresh() method and publishing the</div><div class="line"> * &#123;<span class="doctag">@link</span> org.springframework.context.event.ContextRefreshedEvent&#125;.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// Clear context-level resource caches (such as ASM metadata from scanning).</span></div><div class="line">	clearResourceCaches();</div><div class="line"></div><div class="line">	<span class="comment">// Initialize lifecycle processor for this context.</span></div><div class="line">	initLifecycleProcessor();</div><div class="line"></div><div class="line">	<span class="comment">// Propagate refresh to lifecycle processor first.</span></div><div class="line">	getLifecycleProcessor().onRefresh();</div><div class="line"></div><div class="line">	<span class="comment">// Publish the final event.生命周期Refreshed事件</span></div><div class="line">	publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">	<span class="comment">// Participate in LiveBeansView MBean, if active.</span></div><div class="line">	LiveBeansView.registerApedplicationContext(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Actually performs context closing: publishes a ContextClosedEvent and</div><div class="line"> * destroys the singletons in the bean factory of this application context.</div><div class="line"> * &lt;p&gt;Called by both &#123;<span class="doctag">@code</span> close()&#125; and a JVM shutdown hook, if any.</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.event.ContextClosedEvent</div><div class="line"> * <span class="doctag">@see</span> #destroyBeans()</div><div class="line"> * <span class="doctag">@see</span> #close()</div><div class="line"> * <span class="doctag">@see</span> #registerShutdownHook()</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.active.get() &amp;&amp; <span class="keyword">this</span>.closed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</div><div class="line">		<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">			logger.info(<span class="string">"Closing "</span> + <span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		LiveBeansView.unregisterApplicationContext(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// Publish shutdown event.  ContextClosed事件</span></div><div class="line">			publishEvent(<span class="keyword">new</span> ContextClosedEvent(<span class="keyword">this</span>));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			logger.warn(<span class="string">"Exception thrown from ApplicationListener handling ContextClosedEvent"</span>, ex);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Stop all Lifecycle beans, to avoid delays during individual destruction.</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			getLifecycleProcessor().onClose();</div><div class="line">		&#125;</div><div class="line">         ...</div><div class="line">       &#125;      </div><div class="line">     </div><div class="line">   <span class="comment">//---------------------------------------------------------------------</span></div><div class="line">   <span class="comment">// Implementation of Lifecycle interface</span></div><div class="line">   <span class="comment">//---------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">	getLifecycleProcessor().start();</div><div class="line">	publishEvent(<span class="keyword">new</span> ContextStartedEvent(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</div><div class="line">	getLifecycleProcessor().stop();</div><div class="line">	publishEvent(<span class="keyword">new</span> ContextStoppedEvent(<span class="keyword">this</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 使用Spring的Web应用程序也可以处理与请求相关联的另一种类型的事件(之前说到的<code>RequestHandledEvent</code>)。它的处理方式和面向上下文的事件类似。首先，我们可以找到<strong>org.springframework.web.servlet.FrameworkServlet</strong>中处理请求的方法<strong>processRequest</strong>。在这个方法结束的时候，调用了<code>private void publishRequestHandledEvent(HttpServletRequest request, HttpServletResponse response, long startTime, @Nullable Throwable failureCause)</code>方法。如其名称所表达的，此方法将向所有监听器发布给定的<code>RequestHandledEvent</code>。事件在传递给应用程序上下文的<code>publishEvent</code>方法后，将由<code>event multicaster</code>发送。这里没毛病，因为<code>RequestHandledEvent</code>扩展了与<code>ApplicationContextEvent</code>相同的类，即<code>ApplicationEvent</code>。来看看<code>publishRequestHandledEvent</code>方法的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publishRequestHandledEvent</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">			<span class="keyword">long</span> startTime, @Nullable Throwable failureCause) &#123;</div><div class="line">		<span class="comment">//很多人问我Spring5和4的代码有什么区别，就在很多细微的地方，Spring一直在做不懈的改进和封装，不多说，没事可自行			//对比，能学到很多东西</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.publishEvents &amp;&amp; <span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// Whether or not we succeeded, publish an event.</span></div><div class="line">			<span class="keyword">long</span> processingTime = System.currentTimeMillis() - startTime;</div><div class="line">			<span class="keyword">this</span>.webApplicationContext.publishEvent(</div><div class="line">					<span class="keyword">new</span> ServletRequestHandledEvent(<span class="keyword">this</span>,</div><div class="line">							request.getRequestURI(), request.getRemoteAddr(),</div><div class="line">							request.getMethod(), getServletConfig().getServletName(),</div><div class="line">							WebUtils.getSessionId(request), getUsernameForRequest(request),</div><div class="line">							processingTime, failureCause, response.getStatus()));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，你可以关闭基于请求的事件的调度。<strong>FrameworkServlet的setPublishEvents(boolean publishEvents)</strong>允许禁用事件分派，例如改进应用程序性能(看代码注释，当没有监听器来管理相应事件的时候，干嘛要浪费性能)。默认情况下，事件调度被激活(默认为true)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Should we publish a ServletRequestHandledEvent at the end of each request? */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> publishEvents = <span class="keyword">true</span>;	</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Set whether this servlet should publish a ServletRequestHandledEvent at the end</div><div class="line"> * of each request. Default is "true"; can be turned off for a slight performance</div><div class="line"> * improvement, provided that no ApplicationListeners rely on such events.</div><div class="line"> * <span class="doctag">@see</span> org.springframework.web.context.support.ServletRequestHandledEvent</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublishEvents</span><span class="params">(<span class="keyword">boolean</span> publishEvents)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.publishEvents = publishEvents;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如有思考的话，从上面的代码中可以知道，事件在应用程序响应性上的表现会很差(大都是一个调用另一个)。这是因为默认情况下，它们是同步调用线程(即使用同一线程去处理事务，处理请求，以及准备视图的输出)。因此，如果一个监听器需要几秒钟的时间来响应，整个应用程序可能会受到慢的要死。幸运的是，我们可以指定事件处理的异步执行(参考上面的<code>multicastEvent</code>源码)。需要注意的是，所处理的事件将无法与调用者的上下文(类加载器或事务)进行交互。这里参考<code>multicastEvent</code>方法源码即可。默认情况下，<strong>org.springframework.core.task.SyncTaskExecutor</strong>用来调用相应监听器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncTaskExecutor</span> <span class="keyword">implements</span> <span class="title">TaskExecutor</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Executes the given &#123;<span class="doctag">@code</span> task&#125; synchronously, through direct</div><div class="line">	 * invocation of it's &#123;<span class="doctag">@link</span> Runnable#run() run()&#125; method.</div><div class="line">	 * <span class="doctag">@throws</span> IllegalArgumentException if the given &#123;<span class="doctag">@code</span> task&#125; is &#123;<span class="doctag">@code</span> null&#125;</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</div><div class="line">		Assert.notNull(task, <span class="string">"Runnable must not be null"</span>);</div><div class="line">		task.run();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在Spring中实现一个简单的监听器"><a href="#在Spring中实现一个简单的监听器" class="headerlink" title="在Spring中实现一个简单的监听器"></a>在Spring中实现一个简单的监听器</h2><p>为了更好的理解事件监听器，我们来写一个小的测试用例。通过这个例子，我们要证明默认情况下，监听器<code>listeners</code>在其调用者线程中执行了分发的事件。所以，为了不立即得到结果，我们在监听器中休眠5秒(调用Thread.sleep(5000))。测试检查是否达到3个目的：如果controller 的返回结果和所预期的视图名称相匹配，如果事件监听器花了5秒钟的时间才响应(Thread.sleep执行没有任何问题)，并且如果controller 的同样花了5秒钟来生成视图(因为监听器的休眠)。</p>
<p>第二个定义的测试将验证我们的监听器是否在另一个事件中被捕获(和之前的类继承同一个类型)。首先，在配置文件中对bean的定义：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt; <span class="attr">--</span> <span class="attr">This</span> <span class="attr">bean</span> <span class="attr">will</span> <span class="attr">catch</span> <span class="attr">SampleCustomEvent</span> <span class="attr">launched</span> <span class="attr">in</span> <span class="attr">tested</span> <span class="attr">controller</span> <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.event.SampleCustomEventListener"</span>&gt;</span></div><div class="line"><span class="tag">&lt; <span class="attr">--</span> <span class="attr">Thanks</span> <span class="attr">to</span> <span class="attr">this</span> <span class="attr">bean</span> <span class="attr">we</span>'<span class="attr">ll</span> <span class="attr">able</span> <span class="attr">to</span> <span class="attr">get</span> <span class="attr">the</span> <span class="attr">execution</span> <span class="attr">times</span> <span class="attr">of</span> <span class="attr">tested</span> <span class="attr">controller</span> <span class="attr">and</span> <span class="attr">listener</span> <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.event.TimeExecutorHolder"</span> <span class="attr">id</span>=<span class="string">"timeExecutorHolder"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>事件和监听器的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleCustomEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4236181525834402987L</span>;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SampleCustomEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(source);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherCustomEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationContextEvent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5236181525834402987L</span>;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OtherCustomEvent</span><span class="params">(ApplicationContext source)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(source);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleCustomEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">samplecustomevent</span>&gt; </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(SampleCustomEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Thread.sleep(<span class="number">5000</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">    <span class="keyword">int</span> testTime = Math.round((end - start) / <span class="number">1000</span>);</div><div class="line">    ((TimeExecutorHolder) event.getApplicationContext().getBean(<span class="string">"timeExecutorHolder"</span>)).addNewTime(<span class="string">"sampleCustomEventListener"</span>, <span class="keyword">new</span> Integer(testTime));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没什么复杂的，事件只能被用来初始化。监听器通过获取当前时间(以毫秒为单位)来测试所执行时间，并在转换后保存(以秒为单位)。监听器使用的<code>TimeExecutorHolder</code>也不复杂：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeExecutorHolder</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> Map&lt;String, Integer&gt; testTimes = <span class="keyword">new</span> HashMap();</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNewTime</span><span class="params">(String key, Integer value)</span> </span>&#123;</div><div class="line">    testTimes.put(key, value);</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getTestTime</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> testTimes.get(key);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此对象只保留测试元素的执行时间一个Map。测试的controller实现看起来类似于监听器。唯一的区别是它发布一个事件(接着被已定义的监听器捕获)并返回一个名为“success”的视图：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line">   </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/testEvent"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    context.publishEvent(<span class="keyword">new</span> SampleCustomEvent(context));</div><div class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">    <span class="keyword">int</span> testTime = (<span class="keyword">int</span>)((end - start) / <span class="number">1000</span>);</div><div class="line">    ((TimeExecutorHolder) context.getBean(<span class="string">"timeExecutorHolder"</span>)).addNewTime(<span class="string">"testController"</span>, <span class="keyword">new</span> Integer(testTime));</div><div class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/testOtherEvent"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testOtherEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">    context.publishEvent(<span class="keyword">new</span> OtherCustomEvent(context));</div><div class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，写一个测试用例，它调用/testEvent并在<code>TimeExecutorHolder bean</code>之后检查以验证两个部分的执行时间：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"file:applicationContext-test.xml"</span>&#125;)</div><div class="line"><span class="meta">@WebAppConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringEventsTest</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> WebApplicationContext wac;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"> </div><div class="line">  <span class="meta">@Before</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.wac).build();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      MvcResult result = mockMvc.perform(get(<span class="string">"/testEvent"</span>)).andReturn();</div><div class="line">      ModelAndView view = result.getModelAndView();</div><div class="line">      String expectedView = <span class="string">"success"</span>;</div><div class="line">      assertTrue(<span class="string">"View name from /testEvent should be '"</span>+expectedView+<span class="string">"' but was '"</span>+view.getViewName()+<span class="string">"'"</span>, view.getViewName().equals(expectedView));</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    TimeExecutorHolder timeHolder = (TimeExecutorHolder) <span class="keyword">this</span>.wac.getBean(<span class="string">"timeExecutorHolder"</span>);</div><div class="line">    <span class="keyword">int</span> controllerSec = timeHolder.getTestTime(<span class="string">"testController"</span>).intValue();</div><div class="line">    <span class="keyword">int</span> eventSec = timeHolder.getTestTime(<span class="string">"sampleCustomEventListener"</span>).intValue();</div><div class="line">    assertTrue(<span class="string">"Listener for SampleCustomEvent should take 5 seconds before treating the request but it took "</span>+eventSec+<span class="string">" instead"</span>,  eventSec == <span class="number">5</span>);</div><div class="line">    assertTrue(<span class="string">"Because listener took 5 seconds to response, controller should also take 5 seconds before generating the view, but it took "</span>+controllerSec+ <span class="string">" instead"</span>, controllerSec == <span class="number">5</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherTest</span><span class="params">()</span> </span>&#123;</div><div class="line">    TimeExecutorHolder timeHolder = (TimeExecutorHolder) <span class="keyword">this</span>.wac.getBean(<span class="string">"timeExecutorHolder"</span>);</div><div class="line">    timeHolder.addNewTime(<span class="string">"sampleCustomEventListener"</span>, -<span class="number">34</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      MvcResult result = mockMvc.perform(get(<span class="string">"/testOtherEvent"</span>)).andReturn();</div><div class="line">      ModelAndView view = result.getModelAndView();</div><div class="line">      String expectedView = <span class="string">"success"</span>;</div><div class="line">      assertTrue(<span class="string">"View name from /testEvent should be '"</span>+expectedView+<span class="string">"' but was '"</span>+view.getViewName()+<span class="string">"'"</span>, view.getViewName().equals(expectedView));</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    Integer eventSecObject = timeHolder.getTestTime(<span class="string">"sampleCustomEventListener"</span>);</div><div class="line">    assertTrue(<span class="string">"SampleCustomEventListener shouldn't be trigerred on OtherEvent but it was"</span>, eventSecObject.intValue() == -<span class="number">34</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试通过没有任何问题。它证明了我们所设定的许多假设。</p>
<p>首先，我们看到事件编程包括在信号发送到应用程序时触发并执行某些操作。这个信号必须有一个监听器在监听。在Spring中，由于监听器中的泛型定义(<code>void onApplicationEvent(E event);</code>)，事件可以很容易地被<code>listeners</code>所捕获。通过它，如果所触发的事件对应于监听器所预期的事件，我们无须多余的检查(说的啰嗦了，就是符合所需求的类型即可，省去很多麻烦，我们可以直接根据泛型就可以实现很多不同的处理)。我们还发现，默认情况下，监听器是以同步方式执行的。所以在调用线程同时执行比如视图生成或数据库处理的操作是不行的。</p>
<p> 最后，要说的是，算是一个前后端通用的思想吧，所谓的事件，其实想来，不过是一个接口而已，把这个接口派发出去(event multicaster)，由谁来实现，这是他们的事情，这里就有一个装饰类(这么理解就好)，其名字叫listener，拿到这个派发的事件接口，然后调用相应的实现，这里为了程序的更加灵活和高可用，我们会调用相应的adapter适配器，最后调用其相应的Handler实现，然后Handler会调用相应的service，service调用dao。</p>
<p>同样这个思想用在前端就是组件对外派发一个事件，这个事件由其父组件或者实现，或者继续向外派发，最后用一个具体的方法将之实现即可</p>
<p> 其实对应于我们的数学来讲就是，我们定义一个数学公式f(x)*p(y)一样，这个派发出去，无论我们先实现了f(x)还是先实现了p(y)，还是一次全实现，还是分几次派发出去，终究我们会在最后去将整个公式完全解答出来，这也就是所谓的事件机制，难么？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring框架中的事件和监听器&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring框架中的事件和监听器&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析- Spring框架中的事件和监听器&quot;&gt;&lt;/a&gt;Spring5源码解析- Spring框架中的事件和监听器&lt;/h1&gt;&lt;p&gt;事件和平时所用的回调思想在与GUI(JavaScript，Swing)相关的技术中非常流行。而在Web应用程序的服务器端，我们很少去直接使用。但这并不意味着我们无法在服务端去实现一个面向事件的体系结构。&lt;/p&gt;
&lt;p&gt;在本文中，我们将重点介绍Spring框架中的事件处理。首先，会先介绍下事件驱动编程这个概念。接着，我们会将精力放在专门用于Spring框架中的事件处理之上。然后我们会看到实现事件调度和监听的主要方法。最后，我们将在Spring应用程序中展示如何使用基本的监听器。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-使用Spring AnnotationUtils处理注解</title>
    <link href="https://muyinchen.github.io/2017/09/22/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%BD%BF%E7%94%A8Spring%20AnnotationUtils%E5%A4%84%E7%90%86%E6%B3%A8%E8%A7%A3/"/>
    <id>https://muyinchen.github.io/2017/09/22/Spring5源码解析-使用Spring AnnotationUtils处理注解/</id>
    <published>2017-09-21T16:30:25.000Z</published>
    <updated>2017-09-21T16:47:18.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-使用Spring-AnnotationUtils处理注解"><a href="#Spring5源码解析-使用Spring-AnnotationUtils处理注解" class="headerlink" title="Spring5源码解析-使用Spring AnnotationUtils处理注解"></a>Spring5源码解析-使用Spring AnnotationUtils处理注解</h1><p>通过Java中的注解，程序员可以将配置文件中的一些配置通过使用Java类来实现。例如，在Spring中，通过<code>@RequestMapping</code>注解，我们可以直接在<code>controller</code>内配置<code>URL映射</code>。一般来说，成功者的背后离不开一帮默默支持他的小伙伴，这里同样是，一旦离开其中一个，就甭指望实现所期望的功能，这里要说的一个就是<code>AnnotationUtils</code>。</p>
<p>在本文中，我们将会看到AnnotationUtils类是如何给我们提供极大的便利的。首先，我们将关注下其所有可用的方法。进而，我们来看看这些方法用在了什么地方。最后，老规矩，Demo。</p>
<p>代码截的不少，主要还是为了在平时不一定有IDE环境下清楚的看清弄懂上下文的调用关系，也方面读者可以快速的找到相应的代码所在地。</p>
<p>另外，这一篇融合了前面很多篇的细节，有些不清晰明了的地方，请回头看前面的系列。</p>
<a id="more"></a>
<h2 id="什么是Spring中的AnnotationUtils类？"><a href="#什么是Spring中的AnnotationUtils类？" class="headerlink" title="什么是Spring中的AnnotationUtils类？"></a>什么是Spring中的AnnotationUtils类？</h2><p><code>AnnotationUtils</code>是一个专门用于处理复杂注解问题的类。其主要由公共和静态方法组成，它允许在类，方法或字段上检查注解。另外，<code>AnnotationUtils</code>不仅仅来做简单的类分析。它也通过查找在超类和接口上的注解来做更多的事情。基于反射的API，<code>AnnotationUtils</code>使用<strong>java.lang.reflect的</strong> 3个元素来处理注解: </p>
<ul>
<li><strong>Annotation</strong>:表示注解。</li>
</ul>
<ul>
<li><strong>AnnotatedElement</strong>:表示被注解元素。</li>
<li><strong>Method</strong>:提供某些类或接口中的方法的信息。</li>
</ul>
<p>现在，我们来看看<code>AnnotationUtils</code>类中的最重要的几个public 方法: </p>
<ul>
<li><strong>getAnnotation</strong>:有3个这样的名字的方法存在。 第一个接收参数<code>Annotation的对象实例</code>。第二个是<code>AnnotatedElement</code>的实例。第三个<code>getAnnotation</code>方法接收参数<code>Method</code>对象。它们都从字段，类或方法得到并返回注解。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Get a single &#123;<span class="doctag">@link</span> Annotation&#125; of &#123;<span class="doctag">@code</span> annotationType&#125; from the supplied</div><div class="line"> * annotation: either the given annotation itself or a direct meta-annotation</div><div class="line"> * thereof.</div><div class="line"> * &lt;p&gt;Note that this method supports only a single level of meta-annotations.</div><div class="line"> * For support for arbitrary levels of meta-annotations, use one of the</div><div class="line"> * &#123;<span class="doctag">@code</span> find*()&#125; methods instead.</div><div class="line"> * <span class="doctag">@param</span> ann the Annotation to check</div><div class="line"> * <span class="doctag">@param</span> annotationType the annotation type to look for, both locally and as a meta-annotation</div><div class="line"> * <span class="doctag">@return</span> the first matching annotation, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> * <span class="doctag">@since</span> 4.0</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Annotation ann, Class&lt;A&gt; annotationType)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (annotationType.isInstance(ann)) &#123;</div><div class="line">		<span class="keyword">return</span> synthesizeAnnotation((A) ann);</div><div class="line">	&#125;</div><div class="line">	Class&lt;? extends Annotation&gt; annotatedElement = ann.annotationType();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">return</span> synthesizeAnnotation(annotatedElement.getAnnotation(annotationType), annotatedElement);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		handleIntrospectionFailure(annotatedElement, ex);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Get a single &#123;<span class="doctag">@link</span> Annotation&#125; of &#123;<span class="doctag">@code</span> annotationType&#125; from the supplied</div><div class="line"> * &#123;<span class="doctag">@link</span> AnnotatedElement&#125;, where the annotation is either &lt;em&gt;present&lt;/em&gt; or</div><div class="line"> * &lt;em&gt;meta-present&lt;/em&gt; on the &#123;<span class="doctag">@code</span> AnnotatedElement&#125;.</div><div class="line"> * &lt;p&gt;Note that this method supports only a single level of meta-annotations.</div><div class="line"> * For support for arbitrary levels of meta-annotations, use</div><div class="line"> * &#123;<span class="doctag">@link</span> #findAnnotation(AnnotatedElement, Class)&#125; instead.</div><div class="line"> * <span class="doctag">@param</span> annotatedElement the &#123;<span class="doctag">@code</span> AnnotatedElement&#125; from which to get the annotation</div><div class="line"> * <span class="doctag">@param</span> annotationType the annotation type to look for, both locally and as a meta-annotation</div><div class="line"> * <span class="doctag">@return</span> the first matching annotation, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> * <span class="doctag">@since</span> 3.1</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(AnnotatedElement annotatedElement, Class&lt;A&gt; annotationType)</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		A annotation = annotatedElement.getAnnotation(annotationType);</div><div class="line">		<span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Annotation metaAnn : annotatedElement.getAnnotations()) &#123;</div><div class="line">				annotation = metaAnn.annotationType().getAnnotation(annotationType);</div><div class="line">				<span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> (annotation != <span class="keyword">null</span> ? synthesizeAnnotation(annotation, annotatedElement) : <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		handleIntrospectionFailure(annotatedElement, ex);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Get a single &#123;<span class="doctag">@link</span> Annotation&#125; of &#123;<span class="doctag">@code</span> annotationType&#125; from the</div><div class="line"> * supplied &#123;<span class="doctag">@link</span> Method&#125;, where the annotation is either &lt;em&gt;present&lt;/em&gt;</div><div class="line"> * or &lt;em&gt;meta-present&lt;/em&gt; on the method.</div><div class="line"> * &lt;p&gt;Correctly handles bridge &#123;<span class="doctag">@link</span> Method Methods&#125; generated by the compiler.</div><div class="line"> * &lt;p&gt;Note that this method supports only a single level of meta-annotations.</div><div class="line"> * For support for arbitrary levels of meta-annotations, use</div><div class="line"> * &#123;<span class="doctag">@link</span> #findAnnotation(Method, Class)&#125; instead.</div><div class="line"> * <span class="doctag">@param</span> method the method to look for annotations on</div><div class="line"> * <span class="doctag">@param</span> annotationType the annotation type to look for</div><div class="line"> * <span class="doctag">@return</span> the first matching annotation, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> * <span class="doctag">@see</span> org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method)</div><div class="line"> * <span class="doctag">@see</span> #getAnnotation(AnnotatedElement, Class)</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Method method, Class&lt;A&gt; annotationType)</span> </span>&#123;</div><div class="line">	Method resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);</div><div class="line">	<span class="keyword">return</span> getAnnotation((AnnotatedElement) resolvedMethod, annotationType);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>getRepeatableAnnotations</strong>:通过向参数中传递<code>AnnotatedElement</code>和<code>所要查找的注解类型</code>来访问，有两个使用此名称的方法。 这两个方法从所提供的<code>AnnotatedElement</code>上得到可重复的注解(即传入的<code>annotationType</code>)对应的元素。例如，它可以返回使用<code>@RequestMapping</code>注解所注解的方法(请看下面的源码)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Get the &lt;em&gt;repeatable&lt;/em&gt; &#123;<span class="doctag">@linkplain</span> Annotation annotations&#125; of</div><div class="line">	 * &#123;<span class="doctag">@code</span> annotationType&#125; from the supplied &#123;<span class="doctag">@link</span> AnnotatedElement&#125;, where</div><div class="line">	 * such annotations are either &lt;em&gt;present&lt;/em&gt;, &lt;em&gt;indirectly present&lt;/em&gt;,</div><div class="line">	 * or &lt;em&gt;meta-present&lt;/em&gt; on the element.</div><div class="line">	 * &lt;p&gt;This method mimics the functionality of Java 8's</div><div class="line">	 * &#123;<span class="doctag">@link</span> java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)&#125;</div><div class="line">	 * with support for automatic detection of a &lt;em&gt;container annotation&lt;/em&gt;</div><div class="line">	 * declared via @&#123;<span class="doctag">@link</span> java.lang.annotation.Repeatable&#125; (when running on</div><div class="line">	 * Java 8 or higher) and with additional support for meta-annotations.</div><div class="line">	 * &lt;p&gt;Handles both single annotations and annotations nested within a</div><div class="line">	 * &lt;em&gt;container annotation&lt;/em&gt;.</div><div class="line">	 * &lt;p&gt;Correctly handles &lt;em&gt;bridge methods&lt;/em&gt; generated by the</div><div class="line">	 * compiler if the supplied element is a &#123;<span class="doctag">@link</span> Method&#125;.</div><div class="line">	 * &lt;p&gt;Meta-annotations will be searched if the annotation is not</div><div class="line">	 * &lt;em&gt;present&lt;/em&gt; on the supplied element.</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element to look for annotations on</div><div class="line">	 * <span class="doctag">@param</span> annotationType the annotation type to look for</div><div class="line">	 * <span class="doctag">@return</span> the annotations found or an empty set (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 * <span class="doctag">@see</span> #getRepeatableAnnotations(AnnotatedElement, Class, Class)</div><div class="line">	 * <span class="doctag">@see</span> #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)</div><div class="line">	 * <span class="doctag">@see</span> AnnotatedElementUtils#getMergedRepeatableAnnotations(AnnotatedElement, Class)</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.BridgeMethodResolver#findBridgedMethod</div><div class="line">	 * <span class="doctag">@see</span> java.lang.annotation.Repeatable</div><div class="line">	 * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement#getAnnotationsByType</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">Set&lt;A&gt; <span class="title">getRepeatableAnnotations</span><span class="params">(AnnotatedElement annotatedElement,</span></span></div><div class="line">			Class&lt;A&gt; annotationType) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> getRepeatableAnnotations(annotatedElement, annotationType, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Get the &lt;em&gt;repeatable&lt;/em&gt; &#123;<span class="doctag">@linkplain</span> Annotation annotations&#125; of</div><div class="line">	 * &#123;<span class="doctag">@code</span> annotationType&#125; from the supplied &#123;<span class="doctag">@link</span> AnnotatedElement&#125;, where</div><div class="line">	 * such annotations are either &lt;em&gt;present&lt;/em&gt;, &lt;em&gt;indirectly present&lt;/em&gt;,</div><div class="line">	 * or &lt;em&gt;meta-present&lt;/em&gt; on the element.</div><div class="line">	 * &lt;p&gt;This method mimics the functionality of Java 8's</div><div class="line">	 * &#123;<span class="doctag">@link</span> java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)&#125;</div><div class="line">	 * with additional support for meta-annotations.</div><div class="line">	 * &lt;p&gt;Handles both single annotations and annotations nested within a</div><div class="line">	 * &lt;em&gt;container annotation&lt;/em&gt;.</div><div class="line">	 * &lt;p&gt;Correctly handles &lt;em&gt;bridge methods&lt;/em&gt; generated by the</div><div class="line">	 * compiler if the supplied element is a &#123;<span class="doctag">@link</span> Method&#125;.</div><div class="line">	 * &lt;p&gt;Meta-annotations will be searched if the annotation is not</div><div class="line">	 * &lt;em&gt;present&lt;/em&gt; on the supplied element.</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element to look for annotations on</div><div class="line">	 * <span class="doctag">@param</span> annotationType the annotation type to look for</div><div class="line">	 * <span class="doctag">@param</span> containerAnnotationType the type of the container that holds</div><div class="line">	 * the annotations; may be &#123;<span class="doctag">@code</span> null&#125; if a container is not supported</div><div class="line">	 * or if it should be looked up via @&#123;<span class="doctag">@link</span> java.lang.annotation.Repeatable&#125;</div><div class="line">	 * when running on Java 8 or higher</div><div class="line">	 * <span class="doctag">@return</span> the annotations found or an empty set (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 * <span class="doctag">@see</span> #getRepeatableAnnotations(AnnotatedElement, Class)</div><div class="line">	 * <span class="doctag">@see</span> #getDeclaredRepeatableAnnotations(AnnotatedElement, Class)</div><div class="line">	 * <span class="doctag">@see</span> #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)</div><div class="line">	 * <span class="doctag">@see</span> AnnotatedElementUtils#getMergedRepeatableAnnotations(AnnotatedElement, Class, Class)</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.BridgeMethodResolver#findBridgedMethod</div><div class="line">	 * <span class="doctag">@see</span> java.lang.annotation.Repeatable</div><div class="line">	 * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement#getAnnotationsByType</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">Set&lt;A&gt; <span class="title">getRepeatableAnnotations</span><span class="params">(AnnotatedElement annotatedElement,</span></span></div><div class="line">			Class&lt;A&gt; annotationType, @Nullable Class&lt;? extends Annotation&gt; containerAnnotationType) &#123;</div><div class="line"></div><div class="line">		Set&lt;A&gt; annotations = getDeclaredRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType);</div><div class="line">		<span class="keyword">if</span> (!annotations.isEmpty()) &#123;</div><div class="line">			<span class="keyword">return</span> annotations;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (annotatedElement <span class="keyword">instanceof</span> Class) &#123;</div><div class="line">			Class&lt;?&gt; superclass = ((Class&lt;?&gt;) annotatedElement).getSuperclass();</div><div class="line">			<span class="keyword">if</span> (superclass != <span class="keyword">null</span> &amp;&amp; Object.class != superclass) &#123;</div><div class="line">				<span class="keyword">return</span> getRepeatableAnnotations(superclass, annotationType, containerAnnotationType);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType, <span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">	 * Get the declared &lt;em&gt;repeatable&lt;/em&gt; &#123;<span class="doctag">@linkplain</span> Annotation annotations&#125;</div><div class="line">	 * of &#123;<span class="doctag">@code</span> annotationType&#125; from the supplied &#123;<span class="doctag">@link</span> AnnotatedElement&#125;,</div><div class="line">	 * where such annotations are either &lt;em&gt;directly present&lt;/em&gt;,</div><div class="line">	 * &lt;em&gt;indirectly present&lt;/em&gt;, or &lt;em&gt;meta-present&lt;/em&gt; on the element.</div><div class="line">	 * &lt;p&gt;This method mimics the functionality of Java 8's</div><div class="line">	 * &#123;<span class="doctag">@link</span> java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)&#125;</div><div class="line">	 * with support for automatic detection of a &lt;em&gt;container annotation&lt;/em&gt;</div><div class="line">	 * declared via @&#123;<span class="doctag">@link</span> java.lang.annotation.Repeatable&#125; (when running on</div><div class="line">	 * Java 8 or higher) and with additional support for meta-annotations.</div><div class="line">	 * &lt;p&gt;Handles both single annotations and annotations nested within a</div><div class="line">	 * &lt;em&gt;container annotation&lt;/em&gt;.</div><div class="line">	 * &lt;p&gt;Correctly handles &lt;em&gt;bridge methods&lt;/em&gt; generated by the</div><div class="line">	 * compiler if the supplied element is a &#123;<span class="doctag">@link</span> Method&#125;.</div><div class="line">	 * &lt;p&gt;Meta-annotations will be searched if the annotation is not</div><div class="line">	 * &lt;em&gt;present&lt;/em&gt; on the supplied element.</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element to look for annotations on</div><div class="line">	 * <span class="doctag">@param</span> annotationType the annotation type to look for</div><div class="line">	 * <span class="doctag">@return</span> the annotations found or an empty set (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 * <span class="doctag">@see</span> #getRepeatableAnnotations(AnnotatedElement, Class)</div><div class="line">	 * <span class="doctag">@see</span> #getRepeatableAnnotations(AnnotatedElement, Class, Class)</div><div class="line">	 * <span class="doctag">@see</span> #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)</div><div class="line">	 * <span class="doctag">@see</span> AnnotatedElementUtils#getMergedRepeatableAnnotations(AnnotatedElement, Class)</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.BridgeMethodResolver#findBridgedMethod</div><div class="line">	 * <span class="doctag">@see</span> java.lang.annotation.Repeatable</div><div class="line">	 * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">Set&lt;A&gt; <span class="title">getDeclaredRepeatableAnnotations</span><span class="params">(AnnotatedElement annotatedElement,</span></span></div><div class="line">			Class&lt;A&gt; annotationType) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> getDeclaredRepeatableAnnotations(annotatedElement, annotationType, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Get the declared &lt;em&gt;repeatable&lt;/em&gt; &#123;<span class="doctag">@linkplain</span> Annotation annotations&#125;</div><div class="line">	 * of &#123;<span class="doctag">@code</span> annotationType&#125; from the supplied &#123;<span class="doctag">@link</span> AnnotatedElement&#125;,</div><div class="line">	 * where such annotations are either &lt;em&gt;directly present&lt;/em&gt;,</div><div class="line">	 * &lt;em&gt;indirectly present&lt;/em&gt;, or &lt;em&gt;meta-present&lt;/em&gt; on the element.</div><div class="line">	 * &lt;p&gt;This method mimics the functionality of Java 8's</div><div class="line">	 * &#123;<span class="doctag">@link</span> java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)&#125;</div><div class="line">	 * with additional support for meta-annotations.</div><div class="line">	 * &lt;p&gt;Handles both single annotations and annotations nested within a</div><div class="line">	 * &lt;em&gt;container annotation&lt;/em&gt;.</div><div class="line">	 * &lt;p&gt;Correctly handles &lt;em&gt;bridge methods&lt;/em&gt; generated by the</div><div class="line">	 * compiler if the supplied element is a &#123;<span class="doctag">@link</span> Method&#125;.</div><div class="line">	 * &lt;p&gt;Meta-annotations will be searched if the annotation is not</div><div class="line">	 * &lt;em&gt;present&lt;/em&gt; on the supplied element.</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element to look for annotations on</div><div class="line">	 * <span class="doctag">@param</span> annotationType the annotation type to look for</div><div class="line">	 * <span class="doctag">@param</span> containerAnnotationType the type of the container that holds</div><div class="line">	 * the annotations; may be &#123;<span class="doctag">@code</span> null&#125; if a container is not supported</div><div class="line">	 * or if it should be looked up via @&#123;<span class="doctag">@link</span> java.lang.annotation.Repeatable&#125;</div><div class="line">	 * when running on Java 8 or higher</div><div class="line">	 * <span class="doctag">@return</span> the annotations found or an empty set (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 * <span class="doctag">@see</span> #getRepeatableAnnotations(AnnotatedElement, Class)</div><div class="line">	 * <span class="doctag">@see</span> #getRepeatableAnnotations(AnnotatedElement, Class, Class)</div><div class="line">	 * <span class="doctag">@see</span> #getDeclaredRepeatableAnnotations(AnnotatedElement, Class)</div><div class="line">	 * <span class="doctag">@see</span> AnnotatedElementUtils#getMergedRepeatableAnnotations(AnnotatedElement, Class, Class)</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.BridgeMethodResolver#findBridgedMethod</div><div class="line">	 * <span class="doctag">@see</span> java.lang.annotation.Repeatable</div><div class="line">	 * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">Set&lt;A&gt; <span class="title">getDeclaredRepeatableAnnotations</span><span class="params">(AnnotatedElement annotatedElement,</span></span></div><div class="line">			Class&lt;A&gt; annotationType, @Nullable Class&lt;? extends Annotation&gt; containerAnnotationType) &#123;</div><div class="line">		<span class="comment">//得到一个set集合，看下面源码</span></div><div class="line">		<span class="keyword">return</span> getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType, <span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 最主要的实现是这个方法</div><div class="line">	 * Perform the actual work for &#123;<span class="doctag">@link</span> #getRepeatableAnnotations(AnnotatedElement, Class, Class)&#125;</div><div class="line">	 * and &#123;<span class="doctag">@link</span> #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class)&#125;.</div><div class="line">	 * &lt;p&gt;Correctly handles &lt;em&gt;bridge methods&lt;/em&gt; generated by the</div><div class="line">	 * compiler if the supplied element is a &#123;<span class="doctag">@link</span> Method&#125;.</div><div class="line">	 * &lt;p&gt;Meta-annotations will be searched if the annotation is not</div><div class="line">	 * &lt;em&gt;present&lt;/em&gt; on the supplied element.</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element to look for annotations on</div><div class="line">	 * <span class="doctag">@param</span> annotationType the annotation type to look for</div><div class="line">	 * <span class="doctag">@param</span> containerAnnotationType the type of the container that holds</div><div class="line">	 * the annotations; may be &#123;<span class="doctag">@code</span> null&#125; if a container is not supported</div><div class="line">	 * or if it should be looked up via @&#123;<span class="doctag">@link</span> java.lang.annotation.Repeatable&#125;</div><div class="line">	 * when running on Java 8 or higher</div><div class="line">	 * <span class="doctag">@param</span> declaredMode &#123;<span class="doctag">@code</span> true&#125; if only declared annotations (i.e.,</div><div class="line">	 * directly or indirectly present) should be considered</div><div class="line">	 * <span class="doctag">@return</span> the annotations found or an empty set (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.BridgeMethodResolver#findBridgedMethod</div><div class="line">	 * <span class="doctag">@see</span> java.lang.annotation.Repeatable</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">Set&lt;A&gt; <span class="title">getRepeatableAnnotations</span><span class="params">(AnnotatedElement annotatedElement,</span></span></div><div class="line">			Class&lt;A&gt; annotationType, @Nullable Class&lt;? extends Annotation&gt; containerAnnotationType, <span class="keyword">boolean</span> declaredMode) &#123;</div><div class="line"></div><div class="line">		Assert.notNull(annotatedElement, <span class="string">"AnnotatedElement must not be null"</span>);</div><div class="line">		Assert.notNull(annotationType, <span class="string">"Annotation type must not be null"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (annotatedElement <span class="keyword">instanceof</span> Method) &#123;</div><div class="line">				annotatedElement = BridgeMethodResolver.findBridgedMethod((Method) annotatedElement);</div><div class="line">			&#125;</div><div class="line">          <span class="comment">//返回的这个set集合包含的是要查找的注解及其被注解的元素，看下面源码</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> AnnotationCollector&lt;&gt;(annotationType, containerAnnotationType, declaredMode).getResult(annotatedElement);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			handleIntrospectionFailure(annotatedElement, ex);</div><div class="line">			<span class="keyword">return</span> Collections.emptySet();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">...</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationCollector</span>&lt;<span class="title">A</span> <span class="keyword">extends</span> <span class="title">Annotation</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Class&lt;A&gt; annotationType;</div><div class="line"></div><div class="line">		<span class="meta">@Nullable</span></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; containerAnnotationType;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> declaredMode;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;AnnotatedElement&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;A&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</div><div class="line"></div><div class="line">		AnnotationCollector(Class&lt;A&gt; annotationType,</div><div class="line">				<span class="meta">@Nullable</span> Class&lt;? extends Annotation&gt; containerAnnotationType, <span class="keyword">boolean</span> declaredMode) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">this</span>.annotationType = annotationType;</div><div class="line">			<span class="keyword">this</span>.containerAnnotationType = (containerAnnotationType != <span class="keyword">null</span> ? containerAnnotationType :</div><div class="line">					resolveContainerAnnotationType(annotationType));</div><div class="line">			<span class="keyword">this</span>.declaredMode = declaredMode;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function">Set&lt;A&gt; <span class="title">getResult</span><span class="params">(AnnotatedElement element)</span> </span>&#123;</div><div class="line">			process(element);</div><div class="line">			<span class="keyword">return</span> Collections.unmodifiableSet(<span class="keyword">this</span>.result);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">		<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(AnnotatedElement element)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.visited.add(element)) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Annotation[] annotations = (<span class="keyword">this</span>.declaredMode ? element.getDeclaredAnnotations() : element.getAnnotations());<span class="comment">//从元素上得到注解</span></div><div class="line">					<span class="keyword">for</span> (Annotation ann : annotations) &#123;</div><div class="line">						Class&lt;? extends Annotation&gt; currentAnnotationType = ann.annotationType();</div><div class="line">						<span class="keyword">if</span> (ObjectUtils.nullSafeEquals(<span class="keyword">this</span>.annotationType, currentAnnotationType)) &#123;							<span class="comment">//这个set集合添加的是要查找的注解及其被注解的元素</span></div><div class="line">							<span class="keyword">this</span>.result.add(synthesizeAnnotation((A) ann, element));</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (ObjectUtils.nullSafeEquals(<span class="keyword">this</span>.containerAnnotationType, currentAnnotationType)) &#123;</div><div class="line">							<span class="keyword">this</span>.result.addAll(getValue(element, ann));</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (!isInJavaLangAnnotationPackage(currentAnnotationType)) &#123;</div><div class="line">							process(currentAnnotationType);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">					handleIntrospectionFailure(element, ex);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>findAnnotation</strong>:通过传入<code>AnnotatedElement</code>和<code>注解类型</code>来查找方法或者类对象上的注解。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"> * Find a single &#123;<span class="doctag">@link</span> Annotation&#125; of &#123;<span class="doctag">@code</span> annotationType&#125; on the</div><div class="line"> * supplied &#123;<span class="doctag">@link</span> AnnotatedElement&#125;.</div><div class="line"> * &lt;p&gt;Meta-annotations will be searched if the annotation is not</div><div class="line"> * &lt;em&gt;directly present&lt;/em&gt; on the supplied element.</div><div class="line"> * &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this method operates generically on</div><div class="line"> * annotated elements. In other words, this method does not execute</div><div class="line"> * specialized search algorithms for classes or methods. If you require</div><div class="line"> * the more specific semantics of &#123;<span class="doctag">@link</span> #findAnnotation(Class, Class)&#125;</div><div class="line"> * or &#123;<span class="doctag">@link</span> #findAnnotation(Method, Class)&#125;, invoke one of those methods</div><div class="line"> * instead.</div><div class="line"> * <span class="doctag">@param</span> annotatedElement the &#123;<span class="doctag">@code</span> AnnotatedElement&#125; on which to find the annotation</div><div class="line"> * <span class="doctag">@param</span> annotationType the annotation type to look for, both locally and as a meta-annotation</div><div class="line"> * <span class="doctag">@return</span> the first matching annotation, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> * <span class="doctag">@since</span> 4.2</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">findAnnotation</span><span class="params">(AnnotatedElement annotatedElement, Class&lt;A&gt; annotationType)</span> </span>&#123;</div><div class="line">	Assert.notNull(annotatedElement, <span class="string">"AnnotatedElement must not be null"</span>);</div><div class="line"></div><div class="line">	<span class="comment">// Do NOT store result in the findAnnotationCache since doing so could break</span></div><div class="line">	<span class="comment">// findAnnotation(Class, Class) and findAnnotation(Method, Class).</span></div><div class="line">	A ann = findAnnotation(annotatedElement, annotationType, <span class="keyword">new</span> HashSet&lt;&gt;());</div><div class="line">	<span class="keyword">return</span> (ann != <span class="keyword">null</span> ? synthesizeAnnotation(ann, annotatedElement) : <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 	 * Perform the search algorithm for &#123;<span class="doctag">@link</span> #findAnnotation(AnnotatedElement, Class)&#125;</div><div class="line"> 	 * avoiding endless recursion by tracking which annotations have already</div><div class="line"> 	 * been &lt;em&gt;visited&lt;/em&gt;.</div><div class="line"> 	 * <span class="doctag">@param</span> annotatedElement the &#123;<span class="doctag">@code</span> AnnotatedElement&#125; on which to find the annotation</div><div class="line"> 	 * <span class="doctag">@param</span> annotationType the annotation type to look for, both locally and as a meta-annotation</div><div class="line"> 	 * <span class="doctag">@param</span> visited the set of annotations that have already been visited</div><div class="line"> 	 * <span class="doctag">@return</span> the first matching annotation, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> 	 * <span class="doctag">@since</span> 4.2</div><div class="line"> 	 */</div><div class="line"> 	<span class="meta">@Nullable</span></div><div class="line"> 	<span class="keyword">private</span> <span class="keyword">static</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">findAnnotation</span><span class="params">(</span></span></div><div class="line"> 			AnnotatedElement annotatedElement, Class&lt;A&gt; annotationType, Set&lt;Annotation&gt; visited) &#123;</div><div class="line"> 		<span class="keyword">try</span> &#123;</div><div class="line"> 			A annotation = annotatedElement.getDeclaredAnnotation(annotationType);</div><div class="line"> 			<span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</div><div class="line"> 				<span class="keyword">return</span> annotation;</div><div class="line"> 			&#125;</div><div class="line"> 			<span class="keyword">for</span> (Annotation declaredAnn : annotatedElement.getDeclaredAnnotations()) &#123;</div><div class="line"> 				Class&lt;? extends Annotation&gt; declaredType = declaredAnn.annotationType();</div><div class="line"> 				<span class="keyword">if</span> (!isInJavaLangAnnotationPackage(declaredType) &amp;&amp; visited.add(declaredAnn)) &#123;</div><div class="line"> 					annotation = findAnnotation((AnnotatedElement) declaredType, annotationType, visited);</div><div class="line"> 					<span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</div><div class="line"> 						<span class="keyword">return</span> annotation;</div><div class="line"> 					&#125;</div><div class="line"> 				&#125;</div><div class="line"> 			&#125;</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line"> 			handleIntrospectionFailure(annotatedElement, ex);</div><div class="line"> 		&#125;</div><div class="line"> 		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> 	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>isAnnotationDeclaredLocally</strong>:检查注解是否在类中本地声明，而不是继承。 </p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Determine whether an annotation of the specified &#123;<span class="doctag">@code</span> annotationType&#125;</div><div class="line">	 * is declared locally (i.e., &lt;em&gt;directly present&lt;/em&gt;) on the supplied</div><div class="line">	 * &#123;<span class="doctag">@code</span> clazz&#125;.</div><div class="line">	 * &lt;p&gt;The supplied &#123;<span class="doctag">@link</span> Class&#125; may represent any type.</div><div class="line">	 * &lt;p&gt;Meta-annotations will &lt;em&gt;not&lt;/em&gt; be searched.</div><div class="line">	 * &lt;p&gt;Note: This method does &lt;strong&gt;not&lt;/strong&gt; determine if the annotation</div><div class="line">	 * is &#123;<span class="doctag">@linkplain</span> java.lang.annotation.Inherited inherited&#125;. For greater</div><div class="line">	 * clarity regarding inherited annotations, consider using</div><div class="line">	 * &#123;<span class="doctag">@link</span> #isAnnotationInherited(Class, Class)&#125; instead.</div><div class="line">	 * <span class="doctag">@param</span> annotationType the annotation type to look for</div><div class="line">	 * <span class="doctag">@param</span> clazz the class to check for the annotation on</div><div class="line">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if an annotation of the specified &#123;<span class="doctag">@code</span> annotationType&#125;</div><div class="line">	 * is &lt;em&gt;directly present&lt;/em&gt;</div><div class="line">	 * <span class="doctag">@see</span> java.lang.Class#getDeclaredAnnotations()</div><div class="line">	 * <span class="doctag">@see</span> java.lang.Class#getDeclaredAnnotation(Class)</div><div class="line">	 * <span class="doctag">@see</span> #isAnnotationInherited(Class, Class)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAnnotationDeclaredLocally</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType, Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">		Assert.notNull(annotationType, <span class="string">"Annotation type must not be null"</span>);</div><div class="line">		Assert.notNull(clazz, <span class="string">"Class must not be null"</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">return</span> (clazz.getDeclaredAnnotation(annotationType) != <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			handleIntrospectionFailure(clazz, ex);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>isAnnotationInherited</strong>:检查注解是否从另一个类继承(即未在本地声明)。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Determine whether an annotation of the specified &#123;<span class="doctag">@code</span> annotationType&#125;</div><div class="line">	 * is &lt;em&gt;present&lt;/em&gt; on the supplied &#123;<span class="doctag">@code</span> clazz&#125; and is</div><div class="line">	 * &#123;<span class="doctag">@linkplain</span> java.lang.annotation.Inherited inherited&#125; (i.e., not</div><div class="line">	 * &lt;em&gt;directly present&lt;/em&gt;).</div><div class="line">	 * &lt;p&gt;Meta-annotations will &lt;em&gt;not&lt;/em&gt; be searched.</div><div class="line">	 * &lt;p&gt;If the supplied &#123;<span class="doctag">@code</span> clazz&#125; is an interface, only the interface</div><div class="line">	 * itself will be checked. In accordance with standard meta-annotation</div><div class="line">	 * semantics in Java, the inheritance hierarchy for interfaces will not</div><div class="line">	 * be traversed. See the &#123;<span class="doctag">@linkplain</span> java.lang.annotation.Inherited javadoc&#125;</div><div class="line">	 * for the &#123;<span class="doctag">@code</span> <span class="doctag">@Inherited</span>&#125; meta-annotation for further details regarding</div><div class="line">	 * annotation inheritance.</div><div class="line">	 * <span class="doctag">@param</span> annotationType the annotation type to look for</div><div class="line">	 * <span class="doctag">@param</span> clazz the class to check for the annotation on</div><div class="line">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if an annotation of the specified &#123;<span class="doctag">@code</span> annotationType&#125;</div><div class="line">	 * is &lt;em&gt;present&lt;/em&gt; and &lt;em&gt;inherited&lt;/em&gt;</div><div class="line">	 * <span class="doctag">@see</span> Class#isAnnotationPresent(Class)</div><div class="line">	 * <span class="doctag">@see</span> #isAnnotationDeclaredLocally(Class, Class)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAnnotationInherited</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType, Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">		Assert.notNull(annotationType, <span class="string">"Annotation type must not be null"</span>);</div><div class="line">		Assert.notNull(clazz, <span class="string">"Class must not be null"</span>);</div><div class="line">		<span class="keyword">return</span> (clazz.isAnnotationPresent(annotationType) &amp;&amp; !isAnnotationDeclaredLocally(annotationType, clazz));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>getAnnotationAttributes</strong>:获取给定注解的属性。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Retrieve the given annotation's attributes as a &#123;<span class="doctag">@link</span> Map&#125;, preserving all</div><div class="line">	 * attribute types.</div><div class="line">	 * &lt;p&gt;Equivalent to calling &#123;<span class="doctag">@link</span> #getAnnotationAttributes(Annotation, boolean, boolean)&#125;</div><div class="line">	 * with the &#123;<span class="doctag">@code</span> classValuesAsString&#125; and &#123;<span class="doctag">@code</span> nestedAnnotationsAsMap&#125; parameters</div><div class="line">	 * set to &#123;<span class="doctag">@code</span> false&#125;.</div><div class="line">	 * &lt;p&gt;Note: This method actually returns an &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; instance.</div><div class="line">	 * However, the &#123;<span class="doctag">@code</span> Map&#125; signature has been preserved for binary compatibility.</div><div class="line">	 * <span class="doctag">@param</span> annotation the annotation to retrieve the attributes for</div><div class="line">	 * <span class="doctag">@return</span> the Map of annotation attributes, with attribute names as keys and</div><div class="line">	 * corresponding attribute values as values (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@see</span> #getAnnotationAttributes(AnnotatedElement, Annotation)</div><div class="line">	 * <span class="doctag">@see</span> #getAnnotationAttributes(Annotation, boolean, boolean)</div><div class="line">	 * <span class="doctag">@see</span> #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(Annotation annotation)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> getAnnotationAttributes(<span class="keyword">null</span>, annotation);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Retrieve the given annotation's attributes as a &#123;<span class="doctag">@link</span> Map&#125;.</div><div class="line">	 * &lt;p&gt;Equivalent to calling &#123;<span class="doctag">@link</span> #getAnnotationAttributes(Annotation, boolean, boolean)&#125;</div><div class="line">	 * with the &#123;<span class="doctag">@code</span> nestedAnnotationsAsMap&#125; parameter set to &#123;<span class="doctag">@code</span> false&#125;.</div><div class="line">	 * &lt;p&gt;Note: This method actually returns an &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; instance.</div><div class="line">	 * However, the &#123;<span class="doctag">@code</span> Map&#125; signature has been preserved for binary compatibility.</div><div class="line">	 * <span class="doctag">@param</span> annotation the annotation to retrieve the attributes for</div><div class="line">	 * <span class="doctag">@param</span> classValuesAsString whether to convert Class references into Strings (for</div><div class="line">	 * compatibility with &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;)</div><div class="line">	 * or to preserve them as Class references</div><div class="line">	 * <span class="doctag">@return</span> the Map of annotation attributes, with attribute names as keys and</div><div class="line">	 * corresponding attribute values as values (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@see</span> #getAnnotationAttributes(Annotation, boolean, boolean)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getAnnotationAttributes</span><span class="params">(Annotation annotation, <span class="keyword">boolean</span> classValuesAsString)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> getAnnotationAttributes(annotation, classValuesAsString, <span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Retrieve the given annotation's attributes as an &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; map.</div><div class="line">	 * &lt;p&gt;This method provides fully recursive annotation reading capabilities on par with</div><div class="line">	 * the reflection-based &#123;<span class="doctag">@link</span> org.springframework.core.type.StandardAnnotationMetadata&#125;.</div><div class="line">	 * <span class="doctag">@param</span> annotation the annotation to retrieve the attributes for</div><div class="line">	 * <span class="doctag">@param</span> classValuesAsString whether to convert Class references into Strings (for</div><div class="line">	 * compatibility with &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;)</div><div class="line">	 * or to preserve them as Class references</div><div class="line">	 * <span class="doctag">@param</span> nestedAnnotationsAsMap whether to convert nested annotations into</div><div class="line">	 * &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; maps (for compatibility with</div><div class="line">	 * &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;) or to preserve them as</div><div class="line">	 * &#123;<span class="doctag">@code</span> Annotation&#125; instances</div><div class="line">	 * <span class="doctag">@return</span> the annotation attributes (a specialized Map) with attribute names as keys</div><div class="line">	 * and corresponding attribute values as values (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 3.1.1</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AnnotationAttributes <span class="title">getAnnotationAttributes</span><span class="params">(Annotation annotation, <span class="keyword">boolean</span> classValuesAsString,</span></span></div><div class="line">			<span class="keyword">boolean</span> nestedAnnotationsAsMap) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> getAnnotationAttributes(<span class="keyword">null</span>, annotation, classValuesAsString, nestedAnnotationsAsMap);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Retrieve the given annotation's attributes as an &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; map.</div><div class="line">	 * &lt;p&gt;Equivalent to calling &#123;<span class="doctag">@link</span> #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)&#125;</div><div class="line">	 * with the &#123;<span class="doctag">@code</span> classValuesAsString&#125; and &#123;<span class="doctag">@code</span> nestedAnnotationsAsMap&#125; parameters</div><div class="line">	 * set to &#123;<span class="doctag">@code</span> false&#125;.</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element that is annotated with the supplied annotation;</div><div class="line">	 * may be &#123;<span class="doctag">@code</span> null&#125; if unknown</div><div class="line">	 * <span class="doctag">@param</span> annotation the annotation to retrieve the attributes for</div><div class="line">	 * <span class="doctag">@return</span> the annotation attributes (a specialized Map) with attribute names as keys</div><div class="line">	 * and corresponding attribute values as values (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 * <span class="doctag">@see</span> #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AnnotationAttributes <span class="title">getAnnotationAttributes</span><span class="params">(@Nullable AnnotatedElement annotatedElement, Annotation annotation)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> getAnnotationAttributes(annotatedElement, annotation, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Retrieve the given annotation's attributes as an &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; map.</div><div class="line">	 * &lt;p&gt;This method provides fully recursive annotation reading capabilities on par with</div><div class="line">	 * the reflection-based &#123;<span class="doctag">@link</span> org.springframework.core.type.StandardAnnotationMetadata&#125;.</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element that is annotated with the supplied annotation;</div><div class="line">	 * may be &#123;<span class="doctag">@code</span> null&#125; if unknown</div><div class="line">	 * <span class="doctag">@param</span> annotation the annotation to retrieve the attributes for</div><div class="line">	 * <span class="doctag">@param</span> classValuesAsString whether to convert Class references into Strings (for</div><div class="line">	 * compatibility with &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;)</div><div class="line">	 * or to preserve them as Class references</div><div class="line">	 * <span class="doctag">@param</span> nestedAnnotationsAsMap whether to convert nested annotations into</div><div class="line">	 * &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; maps (for compatibility with</div><div class="line">	 * &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;) or to preserve them as</div><div class="line">	 * &#123;<span class="doctag">@code</span> Annotation&#125; instances</div><div class="line">	 * <span class="doctag">@return</span> the annotation attributes (a specialized Map) with attribute names as keys</div><div class="line">	 * and corresponding attribute values as values (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AnnotationAttributes <span class="title">getAnnotationAttributes</span><span class="params">(@Nullable AnnotatedElement annotatedElement,</span></span></div><div class="line">			Annotation annotation, <span class="keyword">boolean</span> classValuesAsString, <span class="keyword">boolean</span> nestedAnnotationsAsMap) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> getAnnotationAttributes(</div><div class="line">				(Object) annotatedElement, annotation, classValuesAsString, nestedAnnotationsAsMap);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AnnotationAttributes <span class="title">getAnnotationAttributes</span><span class="params">(@Nullable Object annotatedElement,</span></span></div><div class="line">			Annotation annotation, <span class="keyword">boolean</span> classValuesAsString, <span class="keyword">boolean</span> nestedAnnotationsAsMap) &#123;</div><div class="line"></div><div class="line">		AnnotationAttributes attributes =</div><div class="line">				retrieveAnnotationAttributes(annotatedElement, annotation, classValuesAsString, nestedAnnotationsAsMap);</div><div class="line">		postProcessAnnotationAttributes(annotatedElement, attributes, classValuesAsString, nestedAnnotationsAsMap);</div><div class="line">		<span class="keyword">return</span> attributes;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Retrieve the given annotation's attributes as an &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; map.</div><div class="line">	 * &lt;p&gt;This method provides fully recursive annotation reading capabilities on par with</div><div class="line">	 * the reflection-based &#123;<span class="doctag">@link</span> org.springframework.core.type.StandardAnnotationMetadata&#125;.</div><div class="line">	 * &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This variant of &#123;<span class="doctag">@code</span> getAnnotationAttributes()&#125; is</div><div class="line">	 * only intended for use within the framework. The following special rules apply:</div><div class="line">	 * &lt;ol&gt;</div><div class="line">	 * &lt;li&gt;Default values will be replaced with default value placeholders.&lt;/li&gt;</div><div class="line">	 * &lt;li&gt;The resulting, merged annotation attributes should eventually be</div><div class="line">	 * &#123;<span class="doctag">@linkplain</span> #postProcessAnnotationAttributes post-processed&#125; in order to</div><div class="line">	 * ensure that placeholders have been replaced by actual default values and</div><div class="line">	 * in order to enforce &#123;<span class="doctag">@code</span> <span class="doctag">@AliasFor</span>&#125; semantics.&lt;/li&gt;</div><div class="line">	 * &lt;/ol&gt;</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element that is annotated with the supplied annotation;</div><div class="line">	 * may be &#123;<span class="doctag">@code</span> null&#125; if unknown</div><div class="line">	 * <span class="doctag">@param</span> annotation the annotation to retrieve the attributes for</div><div class="line">	 * <span class="doctag">@param</span> classValuesAsString whether to convert Class references into Strings (for</div><div class="line">	 * compatibility with &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;)</div><div class="line">	 * or to preserve them as Class references</div><div class="line">	 * <span class="doctag">@param</span> nestedAnnotationsAsMap whether to convert nested annotations into</div><div class="line">	 * &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; maps (for compatibility with</div><div class="line">	 * &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;) or to preserve them as</div><div class="line">	 * &#123;<span class="doctag">@code</span> Annotation&#125; instances</div><div class="line">	 * <span class="doctag">@return</span> the annotation attributes (a specialized Map) with attribute names as keys</div><div class="line">	 * and corresponding attribute values as values (never &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@since</span> 4.2</div><div class="line">	 * <span class="doctag">@see</span> #postProcessAnnotationAttributes</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">static</span> AnnotationAttributes <span class="title">retrieveAnnotationAttributes</span><span class="params">(@Nullable Object annotatedElement, Annotation annotation,</span></span></div><div class="line">			<span class="keyword">boolean</span> classValuesAsString, <span class="keyword">boolean</span> nestedAnnotationsAsMap) &#123;</div><div class="line"></div><div class="line">		Class&lt;? extends Annotation&gt; annotationType = annotation.annotationType();</div><div class="line">		AnnotationAttributes attributes = <span class="keyword">new</span> AnnotationAttributes(annotationType);</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (Method method : getAttributeMethods(annotationType)) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Object attributeValue = method.invoke(annotation);</div><div class="line">				Object defaultValue = method.getDefaultValue();</div><div class="line">				<span class="keyword">if</span> (defaultValue != <span class="keyword">null</span> &amp;&amp; ObjectUtils.nullSafeEquals(attributeValue, defaultValue)) &#123;</div><div class="line">					attributeValue = <span class="keyword">new</span> DefaultValueHolder(defaultValue);</div><div class="line">				&#125;</div><div class="line">				attributes.put(method.getName(),</div><div class="line">						adaptValue(annotatedElement, attributeValue, classValuesAsString, nestedAnnotationsAsMap));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">				<span class="keyword">if</span> (ex <span class="keyword">instanceof</span> InvocationTargetException) &#123;</div><div class="line">					Throwable targetException = ((InvocationTargetException) ex).getTargetException();</div><div class="line">					rethrowAnnotationConfigurationException(targetException);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not obtain annotation attribute value for "</span> + method, ex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> attributes;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Adapt the given value according to the given class and nested annotation settings.</div><div class="line">	 * &lt;p&gt;Nested annotations will be</div><div class="line">	 * &#123;<span class="doctag">@linkplain</span> #synthesizeAnnotation(Annotation, AnnotatedElement) synthesized&#125;.</div><div class="line">	 * <span class="doctag">@param</span> annotatedElement the element that is annotated, used for contextual</div><div class="line">	 * logging; may be &#123;<span class="doctag">@code</span> null&#125; if unknown</div><div class="line">	 * <span class="doctag">@param</span> value the annotation attribute value</div><div class="line">	 * <span class="doctag">@param</span> classValuesAsString whether to convert Class references into Strings (for</div><div class="line">	 * compatibility with &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;)</div><div class="line">	 * or to preserve them as Class references</div><div class="line">	 * <span class="doctag">@param</span> nestedAnnotationsAsMap whether to convert nested annotations into</div><div class="line">	 * &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; maps (for compatibility with</div><div class="line">	 * &#123;<span class="doctag">@link</span> org.springframework.core.type.AnnotationMetadata&#125;) or to preserve them as</div><div class="line">	 * &#123;<span class="doctag">@code</span> Annotation&#125; instances</div><div class="line">	 * <span class="doctag">@return</span> the adapted value, or the original value if no adaptation is needed</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">static</span> Object <span class="title">adaptValue</span><span class="params">(@Nullable Object annotatedElement, @Nullable Object value,</span></span></div><div class="line">			<span class="keyword">boolean</span> classValuesAsString, <span class="keyword">boolean</span> nestedAnnotationsAsMap) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (classValuesAsString) &#123;</div><div class="line">			<span class="keyword">if</span> (value <span class="keyword">instanceof</span> Class) &#123;</div><div class="line">				<span class="keyword">return</span> ((Class&lt;?&gt;) value).getName();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Class[]) &#123;</div><div class="line">				Class&lt;?&gt;[] clazzArray = (Class&lt;?&gt;[]) value;</div><div class="line">				String[] classNames = <span class="keyword">new</span> String[clazzArray.length];</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clazzArray.length; i++) &#123;</div><div class="line">					classNames[i] = clazzArray[i].getName();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> classNames;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (value <span class="keyword">instanceof</span> Annotation) &#123;</div><div class="line">			Annotation annotation = (Annotation) value;</div><div class="line">			<span class="keyword">if</span> (nestedAnnotationsAsMap) &#123;</div><div class="line">				<span class="keyword">return</span> getAnnotationAttributes(annotatedElement, annotation, classValuesAsString, <span class="keyword">true</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> synthesizeAnnotation(annotation, annotatedElement);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (value <span class="keyword">instanceof</span> Annotation[]) &#123;</div><div class="line">			Annotation[] annotations = (Annotation[]) value;</div><div class="line">			<span class="keyword">if</span> (nestedAnnotationsAsMap) &#123;</div><div class="line">				AnnotationAttributes[] mappedAnnotations = <span class="keyword">new</span> AnnotationAttributes[annotations.length];</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; annotations.length; i++) &#123;</div><div class="line">					mappedAnnotations[i] =</div><div class="line">							getAnnotationAttributes(annotatedElement, annotations[i], classValuesAsString, <span class="keyword">true</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> mappedAnnotations;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> synthesizeAnnotationArray(annotations, annotatedElement);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Fallback</span></div><div class="line">		<span class="keyword">return</span> value;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>getValue</strong>:获取给定注解的值。 有这个名称的存在两种方法。第一个返回注解的全局值。第二个是指定注解参数的值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Retrieve the &lt;em&gt;value&lt;/em&gt; of the &#123;<span class="doctag">@code</span> value&#125; attribute of a</div><div class="line"> * single-element Annotation, given an annotation instance.</div><div class="line"> * <span class="doctag">@param</span> annotation the annotation instance from which to retrieve the value</div><div class="line"> * <span class="doctag">@return</span> the attribute value, or &#123;<span class="doctag">@code</span> null&#125; if not found unless the attribute</div><div class="line"> * value cannot be retrieved due to an &#123;<span class="doctag">@link</span> AnnotationConfigurationException&#125;,</div><div class="line"> * in which case such an exception will be rethrown</div><div class="line"> * <span class="doctag">@see</span> #getValue(Annotation, String)</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(Annotation annotation)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> getValue(annotation, VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Retrieve the &lt;em&gt;value&lt;/em&gt; of a named attribute, given an annotation instance.</div><div class="line"> * <span class="doctag">@param</span> annotation the annotation instance from which to retrieve the value</div><div class="line"> * <span class="doctag">@param</span> attributeName the name of the attribute value to retrieve</div><div class="line"> * <span class="doctag">@return</span> the attribute value, or &#123;<span class="doctag">@code</span> null&#125; if not found unless the attribute</div><div class="line"> * value cannot be retrieved due to an &#123;<span class="doctag">@link</span> AnnotationConfigurationException&#125;,</div><div class="line"> * in which case such an exception will be rethrown</div><div class="line"> * <span class="doctag">@see</span> #getValue(Annotation)</div><div class="line"> * <span class="doctag">@see</span> #rethrowAnnotationConfigurationException(Throwable)</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(@Nullable Annotation annotation, @Nullable String attributeName)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (annotation == <span class="keyword">null</span> || !StringUtils.hasText(attributeName)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		Method method = annotation.annotationType().getDeclaredMethod(attributeName);</div><div class="line">		ReflectionUtils.makeAccessible(method);</div><div class="line">		<span class="keyword">return</span> method.invoke(annotation);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (InvocationTargetException ex) &#123;</div><div class="line">		rethrowAnnotationConfigurationException(ex.getTargetException());</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">				<span class="string">"Could not obtain value for annotation attribute '"</span> + attributeName + <span class="string">"' in "</span> + annotation, ex);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		handleIntrospectionFailure(annotation.getClass(), ex);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>getDefaultValue</strong>:获取给定注解或注解属性的默认值(注意<code>@Nullable</code>注解就知道为什么这么说了)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Retrieve the &lt;em&gt;default value&lt;/em&gt; of the &#123;<span class="doctag">@code</span> value&#125; attribute</div><div class="line"> * of a single-element Annotation, given an annotation instance.</div><div class="line"> * <span class="doctag">@param</span> annotation the annotation instance from which to retrieve the default value</div><div class="line"> * <span class="doctag">@return</span> the default value, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> * <span class="doctag">@see</span> #getDefaultValue(Annotation, String)</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getDefaultValue</span><span class="params">(Annotation annotation)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> getDefaultValue(annotation, VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Retrieve the &lt;em&gt;default value&lt;/em&gt; of a named attribute, given an annotation instance.</div><div class="line"> * <span class="doctag">@param</span> annotation the annotation instance from which to retrieve the default value</div><div class="line"> * <span class="doctag">@param</span> attributeName the name of the attribute value to retrieve</div><div class="line"> * <span class="doctag">@return</span> the default value of the named attribute, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> * <span class="doctag">@see</span> #getDefaultValue(Class, String)</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getDefaultValue</span><span class="params">(@Nullable Annotation annotation, @Nullable String attributeName)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> getDefaultValue(annotation.annotationType(), attributeName);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Retrieve the &lt;em&gt;default value&lt;/em&gt; of the &#123;<span class="doctag">@code</span> value&#125; attribute</div><div class="line"> * of a single-element Annotation, given the &#123;<span class="doctag">@link</span> Class annotation type&#125;.</div><div class="line"> * <span class="doctag">@param</span> annotationType the &lt;em&gt;annotation type&lt;/em&gt; for which the default value should be retrieved</div><div class="line"> * <span class="doctag">@return</span> the default value, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> * <span class="doctag">@see</span> #getDefaultValue(Class, String)</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getDefaultValue</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> getDefaultValue(annotationType, VALUE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Retrieve the &lt;em&gt;default value&lt;/em&gt; of a named attribute, given the</div><div class="line"> * &#123;<span class="doctag">@link</span> Class annotation type&#125;.</div><div class="line"> * <span class="doctag">@param</span> annotationType the &lt;em&gt;annotation type&lt;/em&gt; for which the default value should be retrieved</div><div class="line"> * <span class="doctag">@param</span> attributeName the name of the attribute value to retrieve.</div><div class="line"> * <span class="doctag">@return</span> the default value of the named attribute, or &#123;<span class="doctag">@code</span> null&#125; if not found</div><div class="line"> * <span class="doctag">@see</span> #getDefaultValue(Annotation, String)</div><div class="line"> */</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getDefaultValue</span><span class="params">(</span></span></div><div class="line">		@Nullable Class&lt;? extends Annotation&gt; annotationType, @Nullable String attributeName) &#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (annotationType == <span class="keyword">null</span> || !StringUtils.hasText(attributeName)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">return</span> annotationType.getDeclaredMethod(attributeName).getDefaultValue();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		handleIntrospectionFailure(annotationType, ex);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="有哪些地方使用了AnnotationUtils方法？"><a href="#有哪些地方使用了AnnotationUtils方法？" class="headerlink" title="有哪些地方使用了AnnotationUtils方法？"></a>有哪些地方使用了AnnotationUtils方法？</h2><p>很多Spring项目模块都用了<code>AnnotationUtils</code>。这里我们将重点关注与<code>core</code>和Web开发相关的项目模块:<code>Web</code>，<code>Web MVC</code>，<code>context</code>和<code>bean</code>。这里就不罗嗦太多了，只列出在这些Spring项目中使用的<code>AnnotationUtils</code>的地方:</p>
<ol>
<li><p>web MVC</p>
<ul>
<li><code>AnnotationMethodHandlerAdapter</code>，直到 Spring 3.1的版本都是作为注解方法的主要处理程序，使用<code>AnnotationUtils</code>来检查可用于方法级别的不同注解，如:<code>@RequestMapping</code>，<code>@ResponseStatus</code>，<code>@ResponseBody</code>或<code>@ModelAttribute</code>。</li>
<li>作为<code>AnnotationMethodHandlerAdapter</code>接班人，<code>RequestMappingHandlerMapping</code>与<code>AnnotationUtils</code>一起解析<code>@RequestMapping</code>并构造了封装映射配置(变量，HTTP方法， accepted headers 等)的<code>RequestMappingInfo</code>对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Uses method and type-level @&#123;<span class="doctag">@link</span> RequestMapping&#125; annotations to create</div><div class="line"> * the RequestMappingInfo.</div><div class="line"> * <span class="doctag">@return</span> the created RequestMappingInfo, or &#123;<span class="doctag">@code</span> null&#125; if the method</div><div class="line"> * does not have a &#123;<span class="doctag">@code</span> <span class="doctag">@RequestMapping</span>&#125; annotation.</div><div class="line"> * <span class="doctag">@see</span> #getCustomMethodCondition(Method)</div><div class="line"> * <span class="doctag">@see</span> #getCustomTypeCondition(Class)</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">getMappingForMethod</span><span class="params">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</div><div class="line">	RequestMappingInfo info = createRequestMappingInfo(method);</div><div class="line">	<span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</div><div class="line">		RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);</div><div class="line">		<span class="keyword">if</span> (typeInfo != <span class="keyword">null</span>) &#123;</div><div class="line">			info = typeInfo.combine(info);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> info;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Delegates to &#123;<span class="doctag">@link</span> #createRequestMappingInfo(RequestMapping, RequestCondition)&#125;,</div><div class="line"> * supplying the appropriate custom &#123;<span class="doctag">@link</span> RequestCondition&#125; depending on whether</div><div class="line"> * the supplied &#123;<span class="doctag">@code</span> annotatedElement&#125; is a class or method.</div><div class="line"> * <span class="doctag">@see</span> #getCustomTypeCondition(Class)</div><div class="line"> * <span class="doctag">@see</span> #getCustomMethodCondition(Method)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> RequestMappingInfo <span class="title">createRequestMappingInfo</span><span class="params">(AnnotatedElement element)</span> </span>&#123;</div><div class="line">	RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);</div><div class="line">	RequestCondition&lt;?&gt; condition = (element <span class="keyword">instanceof</span> Class ?</div><div class="line">			getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));</div><div class="line">	<span class="keyword">return</span> (requestMapping != <span class="keyword">null</span> ? createRequestMappingInfo(requestMapping, condition) : <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>RequestMappingHandlerAdapter</code>是<code>Web MVC</code>项目中使用<code>AnnotationUtils</code>的第三个重要类。我们可以找到2个调用了<code>findAnnotation()</code>方法并都返回<code>MethodFilter</code>类的实例的方法。一个表示<code>@InitBinder</code>注解，第一个表示<code>@ModelAttribute</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * MethodFilter that matches &#123;<span class="doctag">@link</span> InitBinder <span class="doctag">@InitBinder</span>&#125; methods.</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodFilter INIT_BINDER_METHODS = method -&gt;</div><div class="line">			AnnotationUtils.findAnnotation(method, InitBinder.class) != <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * MethodFilter that matches &#123;<span class="doctag">@link</span> ModelAttribute <span class="doctag">@ModelAttribute</span>&#125; methods.</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodFilter MODEL_ATTRIBUTE_METHODS = method -&gt;</div><div class="line">			((AnnotationUtils.findAnnotation(method, RequestMapping.class) == <span class="keyword">null</span>) &amp;&amp;</div><div class="line">			(AnnotationUtils.findAnnotation(method, ModelAttribute.class) != <span class="keyword">null</span>));</div><div class="line"></div><div class="line">	<span class="comment">//以上两个方法的用法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initControllerAdviceCache</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (getApplicationContext() == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">			logger.info(<span class="string">"Looking for @ControllerAdvice: "</span> + getApplicationContext());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		List&lt;ControllerAdviceBean&gt; beans = ControllerAdviceBean.findAnnotatedBeans(getApplicationContext());</div><div class="line">		AnnotationAwareOrderComparator.sort(beans);</div><div class="line"></div><div class="line">		List&lt;Object&gt; requestResponseBodyAdviceBeans = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (ControllerAdviceBean bean : beans) &#123;</div><div class="line">          <span class="comment">//传入MODEL_ATTRIBUTE_METHODS这个表达式</span></div><div class="line">			Set&lt;Method&gt; attrMethods = MethodIntrospector.selectMethods(bean.getBeanType(), MODEL_ATTRIBUTE_METHODS);</div><div class="line">			<span class="keyword">if</span> (!attrMethods.isEmpty()) &#123;</div><div class="line">				<span class="keyword">this</span>.modelAttributeAdviceCache.put(bean, attrMethods);</div><div class="line">				<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">					logger.info(<span class="string">"Detected @ModelAttribute methods in "</span> + bean);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">          <span class="comment">//传入 INIT_BINDER_METHODS 这个表达式</span></div><div class="line">			Set&lt;Method&gt; binderMethods = MethodIntrospector.selectMethods(bean.getBeanType(), INIT_BINDER_METHODS);</div><div class="line">			<span class="keyword">if</span> (!binderMethods.isEmpty()) &#123;</div><div class="line">				<span class="keyword">this</span>.initBinderAdviceCache.put(bean, binderMethods);</div><div class="line">				<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">					logger.info(<span class="string">"Detected @InitBinder methods in "</span> + bean);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (RequestBodyAdvice.class.isAssignableFrom(bean.getBeanType())) &#123;</div><div class="line">				requestResponseBodyAdviceBeans.add(bean);</div><div class="line">				<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">					logger.info(<span class="string">"Detected RequestBodyAdvice bean in "</span> + bean);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (ResponseBodyAdvice.class.isAssignableFrom(bean.getBeanType())) &#123;</div><div class="line">				requestResponseBodyAdviceBeans.add(bean);</div><div class="line">				<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">					logger.info(<span class="string">"Detected ResponseBodyAdvice bean in "</span> + bean);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (!requestResponseBodyAdviceBeans.isEmpty()) &#123;</div><div class="line">			<span class="keyword">this</span>.requestResponseBodyAdvice.addAll(<span class="number">0</span>, requestResponseBodyAdviceBeans);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>接上面最后一个方法<code>selectMethods</code>的实现，然后，我们平时写代码的时候也可以参考此实现形式:</p>
<p><strong>org.springframework.core.MethodIntrospector</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Select methods on the given target type based on a filter.</div><div class="line">	 * &lt;p&gt;Callers define methods of interest through the &#123;<span class="doctag">@code</span> MethodFilter&#125; parameter.</div><div class="line">	 * <span class="doctag">@param</span> targetType the target type to search methods on</div><div class="line">	 * <span class="doctag">@param</span> methodFilter a &#123;<span class="doctag">@code</span> MethodFilter&#125; to help</div><div class="line">	 * recognize handler methods of interest</div><div class="line">	 * <span class="doctag">@return</span> the selected methods, or an empty set in case of no match</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Method&gt; <span class="title">selectMethods</span><span class="params">(Class&lt;?&gt; targetType, <span class="keyword">final</span> ReflectionUtils.MethodFilter methodFilter)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> selectMethods(targetType, <span class="keyword">new</span> MetadataLookup&lt;Boolean&gt;() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> Boolean <span class="title">inspect</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">				<span class="keyword">return</span> (methodFilter.matches(method) ? Boolean.TRUE : <span class="keyword">null</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;).keySet();</div><div class="line">	&#125;</div><div class="line"><span class="comment">//此段代码可迭代为下面形式,这样更加符合之前定义methodFilter的习惯</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Method&gt; <span class="title">selectMethods</span><span class="params">(Class&lt;?&gt; targetType, <span class="keyword">final</span> ReflectionUtils.MethodFilter methodFilter)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> selectMethods(targetType, (MetadataLookup)(method)-&gt; &#123;</div><div class="line">				<span class="keyword">return</span> (methodFilter.matches(method) ? Boolean.TRUE : <span class="keyword">null</span>);</div><div class="line">		&#125;).keySet();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>web(此处分析俩过时的类，Spring5里没有，但是4里面包含有，之前的文章有写)</p>
<ul>
<li>如果对象必须使用<code>@Valid</code>进行验证，或者<code>@InitBinder</code>方法存在，<code>HandlerMethodInvoker</code>使用<code>AnnotationUtils</code>来知道<code>@ModelAttribute</code>注解是什么。</li>
<li>这个项目的另一个关键类，<code>HandlerMethodResolver</code>，通过调用<code>AnnotationUtils</code>方法来确定方法的类型(handler，binder或model-attribute)。具体点讲就是通过3种方法完成:<code>isHandlerMethod</code>，<code>isInitBinderMethod</code>和<code>isModelAttributeMethod</code>。每个都接受Method的实例为参数。</li>
</ul>
</li>
<li><p>context</p>
<ul>
<li>用于解析<strong>bean</strong>注解的类<code>BeanAnnotationHelper</code>使用<code>AnnotationUtils</code>中的<code>findMergedAnnotation()</code>方法来处理用<code>@Bean</code>注解的类。我们使用它来确定bean的名称。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Utilities for processing &#123;<span class="doctag">@link</span> Bean&#125;-annotated methods.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Chris Beams</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 3.1</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanAnnotationHelper</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isBeanAnnotated</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> AnnotatedElementUtils.hasAnnotation(method, Bean.class);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">determineBeanNameFor</span><span class="params">(Method beanMethod)</span> </span>&#123;</div><div class="line">		<span class="comment">// By default, the bean name is the name of the @Bean-annotated method</span></div><div class="line">		String beanName = beanMethod.getName();</div><div class="line"></div><div class="line">		<span class="comment">// Check to see if the user has explicitly set a custom bean name...</span></div><div class="line">		Bean bean = AnnotatedElementUtils.findMergedAnnotation(beanMethod, Bean.class);</div><div class="line">		<span class="keyword">if</span> (bean != <span class="keyword">null</span> &amp;&amp; bean.name().length &gt; <span class="number">0</span>) &#123;</div><div class="line">			beanName = bean.name()[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> beanName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
<ul>
<li>还有一个要说的就是<code>AnnotationAsyncExecutionInterceptor</code>类，其内同样使用<code>AnnotationUtils</code>来解析注解。它调用<code>findMergedAnnotation()</code>方法来解析在运行时所执行的方法的名称。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Specialization of &#123;<span class="doctag">@link</span> AsyncExecutionInterceptor&#125; that delegates method execution to</div><div class="line"> * an &#123;<span class="doctag">@code</span> Executor&#125; based on the &#123;<span class="doctag">@link</span> Async&#125; annotation. Specifically designed to</div><div class="line"> * support use of &#123;<span class="doctag">@link</span> Async#value()&#125; executor qualification mechanism introduced in</div><div class="line"> * Spring 3.1.2. Supports detecting qualifier metadata via &#123;<span class="doctag">@code</span> <span class="doctag">@Async</span>&#125; at the method or</div><div class="line"> * declaring class level. See &#123;<span class="doctag">@link</span> #getExecutorQualifier(Method)&#125; for details.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Chris Beams</div><div class="line"> * <span class="doctag">@author</span> Stephane Nicoll</div><div class="line"> * <span class="doctag">@since</span> 3.1.2</div><div class="line"> * <span class="doctag">@see</span> org.springframework.scheduling.annotation.Async</div><div class="line"> * <span class="doctag">@see</span> org.springframework.scheduling.annotation.AsyncAnnotationAdvisor</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationAsyncExecutionInterceptor</span> <span class="keyword">extends</span> <span class="title">AsyncExecutionInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new &#123;<span class="doctag">@code</span> AnnotationAsyncExecutionInterceptor&#125; with the given executor</div><div class="line">	 * and a simple &#123;<span class="doctag">@link</span> AsyncUncaughtExceptionHandler&#125;.</div><div class="line">	 * <span class="doctag">@param</span> defaultExecutor the executor to be used by default if no more specific</div><div class="line">	 * executor has been qualified at the method level using &#123;<span class="doctag">@link</span> Async#value()&#125;;</div><div class="line">	 * as of 4.2.6, a local executor for this interceptor will be built otherwise</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AnnotationAsyncExecutionInterceptor</span><span class="params">(@Nullable Executor defaultExecutor)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(defaultExecutor);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new &#123;<span class="doctag">@code</span> AnnotationAsyncExecutionInterceptor&#125; with the given executor.</div><div class="line">	 * <span class="doctag">@param</span> defaultExecutor the executor to be used by default if no more specific</div><div class="line">	 * executor has been qualified at the method level using &#123;<span class="doctag">@link</span> Async#value()&#125;;</div><div class="line">	 * as of 4.2.6, a local executor for this interceptor will be built otherwise</div><div class="line">	 * <span class="doctag">@param</span> exceptionHandler the &#123;<span class="doctag">@link</span> AsyncUncaughtExceptionHandler&#125; to use to</div><div class="line">	 * handle exceptions thrown by asynchronous method executions with &#123;<span class="doctag">@code</span> void&#125;</div><div class="line">	 * return type</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AnnotationAsyncExecutionInterceptor</span><span class="params">(@Nullable Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(defaultExecutor, exceptionHandler);</div><div class="line">	&#125;</div><div class="line">  		<span class="comment">/**</span></div><div class="line">	 	 *  Return the qualifier or bean name of the executor to be used when executing the</div><div class="line">     	 * given method, specified via &#123;<span class="doctag">@link</span> Async#value&#125; at the method or declaring</div><div class="line">         * class level. If &#123;<span class="doctag">@code</span> <span class="doctag">@Async</span>&#125; is specified at both the method and class level, the</div><div class="line">         * method's &#123;<span class="doctag">@code</span> #value&#125; takes precedence (even if empty string, indicating that</div><div class="line">         * the default executor should be used preferentially).</div><div class="line">         * <span class="doctag">@param</span> method the method to inspect for executor qualifier metadata</div><div class="line">         * <span class="doctag">@return</span> the qualifier if specified, otherwise empty string indicating that the</div><div class="line">         * &#123;<span class="doctag">@linkplain</span> #setExecutor(Executor) default executor&#125; should be used</div><div class="line">         * <span class="doctag">@see</span> #determineAsyncExecutor(Method)</div><div class="line">         */</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> String <span class="title">getExecutorQualifier</span><span class="params">(Method method)</span> </span>&#123;</div><div class="line">            <span class="comment">// Maintainer's note: changes made here should also be made in</span></div><div class="line">            <span class="comment">// AnnotationAsyncExecutionAspect#getExecutorQualifier</span></div><div class="line">            Async async = AnnotatedElementUtils.findMergedAnnotation(method, Async.class);</div><div class="line">            <span class="keyword">if</span> (async == <span class="keyword">null</span>) &#123;</div><div class="line">            	async = AnnotatedElementUtils.findMergedAnnotation(method.getDeclaringClass(), Async.class);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (async != <span class="keyword">null</span> ? async.value() : <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>bean</p>
<ul>
<li>我们可以在<code>StaticListableBeanFactory</code>或<code>DefaultListableBeanFactory</code>类中找到<code>AnnotationUtils</code>用来查找<code>bean</code>的注解的用法。</li>
</ul>
<p><strong>org.springframework.beans.factory.support.StaticListableBeanFactory</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getBeansWithAnnotation</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType)</span></span></div><div class="line">		<span class="keyword">throws</span> BeansException &#123;</div><div class="line"></div><div class="line">	Map&lt;String, Object&gt; results = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">	<span class="keyword">for</span> (String beanName : <span class="keyword">this</span>.beans.keySet()) &#123;</div><div class="line">		<span class="keyword">if</span> (findAnnotationOnBean(beanName, annotationType) != <span class="keyword">null</span>) &#123;</div><div class="line">			results.put(beanName, getBean(beanName));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">findAnnotationOnBean</span><span class="params">(String beanName, Class&lt;A&gt; annotationType)</span></span></div><div class="line">		<span class="keyword">throws</span> NoSuchBeanDefinitionException&#123;</div><div class="line"></div><div class="line">	Class&lt;?&gt; beanType = getType(beanName);</div><div class="line">	<span class="keyword">return</span> (beanType != <span class="keyword">null</span> ? AnnotationUtils.findAnnotation(beanType, annotationType) : <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.beans.factory.support.DefaultListableBeanFactory</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> String[] getBeanNamesForAnnotation(Class&lt;? extends Annotation&gt; annotationType) &#123;</div><div class="line">	List&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">	<span class="keyword">for</span> (String beanName : <span class="keyword">this</span>.beanDefinitionNames) &#123;</div><div class="line">		BeanDefinition beanDefinition = getBeanDefinition(beanName);</div><div class="line">		<span class="keyword">if</span> (!beanDefinition.isAbstract() &amp;&amp; findAnnotationOnBean(beanName, annotationType) != <span class="keyword">null</span>) &#123;</div><div class="line">			results.add(beanName);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (String beanName : <span class="keyword">this</span>.manualSingletonNames) &#123;</div><div class="line">		<span class="keyword">if</span> (!results.contains(beanName) &amp;&amp; findAnnotationOnBean(beanName, annotationType) != <span class="keyword">null</span>) &#123;</div><div class="line">			results.add(beanName);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results.toArray(<span class="keyword">new</span> String[results.size()]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getBeansWithAnnotation</span><span class="params">(Class&lt;? extends Annotation&gt; annotationType)</span> </span>&#123;</div><div class="line">	String[] beanNames = getBeanNamesForAnnotation(annotationType);</div><div class="line">	Map&lt;String, Object&gt; results = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(beanNames.length);</div><div class="line">	<span class="keyword">for</span> (String beanName : beanNames) &#123;</div><div class="line">		results.put(beanName, getBean(beanName));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> results;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Find a &#123;<span class="doctag">@link</span> Annotation&#125; of &#123;<span class="doctag">@code</span> annotationType&#125; on the specified</div><div class="line"> * bean, traversing its interfaces and super classes if no annotation can be</div><div class="line"> * found on the given class itself, as well as checking its raw bean class</div><div class="line"> * if not found on the exposed bean reference (e.g. in case of a proxy).</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">findAnnotationOnBean</span><span class="params">(String beanName, Class&lt;A&gt; annotationType)</span></span></div><div class="line">		<span class="keyword">throws</span> NoSuchBeanDefinitionException&#123;</div><div class="line"></div><div class="line">	A ann = <span class="keyword">null</span>;</div><div class="line">	Class&lt;?&gt; beanType = getType(beanName);</div><div class="line">	<span class="keyword">if</span> (beanType != <span class="keyword">null</span>) &#123;</div><div class="line">		ann = AnnotationUtils.findAnnotation(beanType, annotationType);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (ann == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</div><div class="line">		BeanDefinition bd = getMergedBeanDefinition(beanName);</div><div class="line">		<span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</div><div class="line">			AbstractBeanDefinition abd = (AbstractBeanDefinition) bd;</div><div class="line">			<span class="keyword">if</span> (abd.hasBeanClass()) &#123;</div><div class="line">				ann = AnnotationUtils.findAnnotation(abd.getBeanClass(), annotationType);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ann;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h2 id="AnnotationUtils-in-Action"><a href="#AnnotationUtils-in-Action" class="headerlink" title="AnnotationUtils in Action"></a>AnnotationUtils in Action</h2><p>为了更好地理解Spring中AnnotationUtils的工作方式，我们来搞两个注解:第一个对应方法，第二个对应类。之后，写两个测试类和一个<code>playground</code>类，我们要达到的目的是输出由<code>AnnotationUtils</code>完成的注解分析结果。这两个注解定义如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ClassNameAnnotation &#123;</div><div class="line"> </div><div class="line">  <span class="function">String <span class="title">className</span><span class="params">()</span> <span class="keyword">default</span> "Empty class name"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> StaticTextAnnotation &#123;</div><div class="line"> </div><div class="line">  <span class="function">String <span class="title">text</span><span class="params">()</span> <span class="keyword">default</span> "Default text <span class="keyword">for</span> <span class="keyword">static</span> text annotation"</span>;</div><div class="line">  <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "Default value"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>@Retention注解是必需的(估计这里是大家的知识盲区，所以特地点出来)。否则AnnotationUtils将无法检测到这些注解。</strong>注意在<code>StaticTextAnnotation</code>中存在<code>value()</code>属性，并且在<code>ClassNameAnnotation</code>中不存在此属性。在以下代码中，你可以找到相应的测试类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ClassNameAnnotation</span>(className = <span class="string">"TestChildren"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParent</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@StaticTextAnnotation</span>(value= <span class="string">"Custom text value"</span>, text = <span class="string">"Test text"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChildren</span> <span class="keyword">extends</span> <span class="title">TestParent</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>TestChildren</code>类没有任何注解。我们使用它来测试继承注解检查。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Playground</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Method method = TestParent.class.getMethod(<span class="string">"test"</span>, <span class="keyword">new</span> Class[]&#123;HttpServletRequest.class&#125;);</div><div class="line">      Annotation staticTextAnnot = AnnotationUtils.findAnnotation(method, StaticTextAnnotation.class);</div><div class="line">      System.out.println(<span class="string">"@StaticTextAnnotation of method is: "</span>+staticTextAnnot);</div><div class="line">      System.out.println(<span class="string">"@StaticTextAnnotation method value: "</span>+AnnotationUtils.getValue(staticTextAnnot, <span class="string">"text"</span>));</div><div class="line">      System.out.println(<span class="string">"@StaticTextAnnotation method default value: "</span>+AnnotationUtils.getDefaultValue(staticTextAnnot, <span class="string">"text"</span>));</div><div class="line">      System.out.println(<span class="string">"@StaticTextAnnotation value: "</span>+AnnotationUtils.getValue(staticTextAnnot));</div><div class="line"> </div><div class="line">      <span class="comment">// inheriting annotations tests</span></div><div class="line">      Annotation classNameAnnotation = AnnotationUtils.findAnnotation(TestChildren.class, ClassNameAnnotation.class);</div><div class="line">      System.out.println(<span class="string">"@ClassNameAnnotation of TestChildren.class is: "</span>+classNameAnnotation);</div><div class="line">      System.out.println(<span class="string">"@ClassNameAnnotation method value: "</span>+AnnotationUtils.getValue(classNameAnnotation, <span class="string">"className"</span>));</div><div class="line">      System.out.println(<span class="string">"@ClassNameAnnotation method default value: "</span>+AnnotationUtils.getDefaultValue(classNameAnnotation, <span class="string">"className"</span>));</div><div class="line">      System.out.println(<span class="string">"@ClassNameAnnotation value: "</span>+AnnotationUtils.getValue(classNameAnnotation));</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Playground</code>的<code>main</code>方法结果如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@StaticTextAnnotation of method is: @com.migo.annotations.StaticTextAnnotation(text=Test text, value=Custom text value)</div><div class="line">@StaticTextAnnotation method value: Test text</div><div class="line">@StaticTextAnnotation method default value: Default text for static text annotation</div><div class="line">@StaticTextAnnotation value: Custom text value</div><div class="line">@ClassNameAnnotation of TestChildren.class is: @com.migo.annotations.ClassNameAnnotation(className=TestChildren)</div><div class="line">@ClassNameAnnotation method value: TestChildren</div><div class="line">@ClassNameAnnotation method default value: Empty class name</div><div class="line">@ClassNameAnnotation value: null</div></pre></td></tr></table></figure>
<p>如上所示，我们可以很轻易的了解很多注解点。我们可以检查<code>value()</code>属性或另一个自定义属性的值。我们还可以检查属性的默认值。除此之外，<code>AnnotationUtils</code>还可以在继承体系结构中进行注解操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-使用Spring-AnnotationUtils处理注解&quot;&gt;&lt;a href=&quot;#Spring5源码解析-使用Spring-AnnotationUtils处理注解&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-使用Spring AnnotationUtils处理注解&quot;&gt;&lt;/a&gt;Spring5源码解析-使用Spring AnnotationUtils处理注解&lt;/h1&gt;&lt;p&gt;通过Java中的注解，程序员可以将配置文件中的一些配置通过使用Java类来实现。例如，在Spring中，通过&lt;code&gt;@RequestMapping&lt;/code&gt;注解，我们可以直接在&lt;code&gt;controller&lt;/code&gt;内配置&lt;code&gt;URL映射&lt;/code&gt;。一般来说，成功者的背后离不开一帮默默支持他的小伙伴，这里同样是，一旦离开其中一个，就甭指望实现所期望的功能，这里要说的一个就是&lt;code&gt;AnnotationUtils&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在本文中，我们将会看到AnnotationUtils类是如何给我们提供极大的便利的。首先，我们将关注下其所有可用的方法。进而，我们来看看这些方法用在了什么地方。最后，老规矩，Demo。&lt;/p&gt;
&lt;p&gt;代码截的不少，主要还是为了在平时不一定有IDE环境下清楚的看清弄懂上下文的调用关系，也方面读者可以快速的找到相应的代码所在地。&lt;/p&gt;
&lt;p&gt;另外，这一篇融合了前面很多篇的细节，有些不清晰明了的地方，请回头看前面的系列。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的Bean post processors</title>
    <link href="https://muyinchen.github.io/2017/09/18/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84Bean%20post%20processors/"/>
    <id>https://muyinchen.github.io/2017/09/18/Spring5源码解析-Spring中的Bean post processors/</id>
    <published>2017-09-18T02:51:32.590Z</published>
    <updated>2017-09-18T16:59:43.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的Bean-post-processors"><a href="#Spring5源码解析-Spring中的Bean-post-processors" class="headerlink" title="Spring5源码解析-Spring中的Bean post processors"></a>Spring5源码解析-Spring中的Bean post processors</h1><p>我们之前已经对<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">Spring中的bean工厂后置处理器</a>说道过了。但是，依然留下了一个类似的概念的小尾巴需要来解释，这就是bean后置处理器(bean post processors)。</p>
<p>本文将分为两部分。在第一部分，将了解下Spring的单个后处理器bean。第二部分将涉及一些后置处理器(post processors)实际使用的例子。<br><a id="more"></a></p>
<h2 id="什么是bean-post-processor？"><a href="#什么是bean-post-processor？" class="headerlink" title="什么是bean post processor？"></a>什么是bean post processor？</h2><p>bean生命周期始于加载bean的定义。通过拿到的这个定义，Spring可以构造出(<code>construct</code>嘛)bean并注入组件(因为我们常用的就是在controller里 service里使用)。之后，所有的bean都可以进行<strong>后置处理</strong>。这意味着我们可以实现一些自定义逻辑并调用它。并在调用bean的初始化方法(xml配置所定义的init-method 属性)之前和/或之后进行调用(当然默认的上下文环境是Spring容器)。</p>
<p>你不能为给定的bean类型明确指定一个bean后置处理器。每个定义的后处理器可以应用于<code>application context</code>中的所有定义的bean。后置处理器bean必须实现<strong>org.springframework.beans.factory.config.BeanPostProcessor</strong>接口并定义<code>postProcessBeforeInitialization</code>和<code>postProcessAfterInitialization</code>方法。第一个在调用初始化方法(init-method所指定的方法)之前被调用，第二个在调用初始化方法之后被调用。这两个方法都有两个参数： </p>
<ul>
<li>Object：表示已处理的bean的实例。</li>
<li>字符串：包含已处理的bean的名称。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Factory hook that allows for custom modification of new bean instances,</div><div class="line"> * e.g. checking for marker interfaces or wrapping them with proxies.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;ApplicationContexts can autodetect BeanPostProcessor beans in their</div><div class="line"> * bean definitions and apply them to any beans subsequently created.</div><div class="line"> * Plain bean factories allow for programmatic registration of post-processors,</div><div class="line"> * applying to all beans created through this factory.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Typically, post-processors that populate beans via marker interfaces</div><div class="line"> * or the like will implement &#123;<span class="doctag">@link</span> #postProcessBeforeInitialization&#125;,</div><div class="line"> * while post-processors that wrap beans with proxies will normally</div><div class="line"> * implement &#123;<span class="doctag">@link</span> #postProcessAfterInitialization&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 10.10.2003</div><div class="line"> * <span class="doctag">@see</span> InstantiationAwareBeanPostProcessor</div><div class="line"> * <span class="doctag">@see</span> DestructionAwareBeanPostProcessor</div><div class="line"> * <span class="doctag">@see</span> ConfigurableBeanFactory#addBeanPostProcessor</div><div class="line"> * <span class="doctag">@see</span> BeanFactoryPostProcessor</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;before&lt;/i&gt; any bean</div><div class="line">	 * initialization callbacks (like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</div><div class="line">	 * or a custom init-method). The bean will already be populated with property values.</div><div class="line">	 * The returned bean instance may be a wrapper around the original.</div><div class="line">	 * &lt;p&gt;The default implementation returns the given &#123;<span class="doctag">@code</span> bean&#125; as-is.</div><div class="line">	 * <span class="doctag">@param</span> bean the new bean instance</div><div class="line">	 * <span class="doctag">@param</span> beanName the name of the bean</div><div class="line">	 * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one;</div><div class="line">	 * if &#123;<span class="doctag">@code</span> null&#125;, no subsequent BeanPostProcessors will be invoked</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">return</span> bean;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;after&lt;/i&gt; any bean</div><div class="line">	 * initialization callbacks (like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</div><div class="line">	 * or a custom init-method). The bean will already be populated with property values.</div><div class="line">	 * The returned bean instance may be a wrapper around the original.</div><div class="line">	 * &lt;p&gt;In case of a FactoryBean, this callback will be invoked for both the FactoryBean</div><div class="line">	 * instance and the objects created by the FactoryBean (as of Spring 2.0). The</div><div class="line">	 * post-processor can decide whether to apply to either the FactoryBean or created</div><div class="line">	 * objects or both through corresponding &#123;<span class="doctag">@code</span> bean instanceof FactoryBean&#125; checks.</div><div class="line">	 * &lt;p&gt;This callback will also be invoked after a short-circuiting triggered by a</div><div class="line">	 * &#123;<span class="doctag">@link</span> InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&#125; method,</div><div class="line">	 * in contrast to all other BeanPostProcessor callbacks.</div><div class="line">	 * &lt;p&gt;The default implementation returns the given &#123;<span class="doctag">@code</span> bean&#125; as-is.</div><div class="line">	 * <span class="doctag">@param</span> bean the new bean instance</div><div class="line">	 * <span class="doctag">@param</span> beanName the name of the bean</div><div class="line">	 * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one;</div><div class="line">	 * if &#123;<span class="doctag">@code</span> null&#125;, no subsequent BeanPostProcessors will be invoked</div><div class="line">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.FactoryBean</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">return</span> bean;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一起来思考下，当我们需要检测一个bean是否可以被后置处理(其实就是构造函数执行完毕，<code>init-method</code>所指定的方法执行前后所要调用的处理逻辑)。为了避免写很多的if-else判断，我们可以创建一个支持后置处理的抽象出来的接口，然后由所有bean来实现。这样，我们的代码将更加具有可读性，这也就是这个接口的抽取思想。</p>
<p>假如没有看过我的<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">Spring工厂后置处理器</a>这篇文章，请先阅读完，因为本章是对其做的一个补充来讲的。接着，要讲大家关心的东西:他们之间的一些区别。<code>Bean Factory</code>后置处理器只适用于bean定义这块。它们在对象创建之前被调用，这就是为什么他们只能更改bean元数据的原因。不像<code>BeanPostProcessors bean</code> 可以更改对象的属性。你再思考该问题，如果bean工厂后置处理器和bean后置处理器重写覆盖同一对象的属性，则最后保留的值将由bean后置处理器设置的这个，这是因为它是在bean factory后置处理器之后才被调用的。</p>
<h3 id="init-method-执行释疑"><a href="#init-method-执行释疑" class="headerlink" title="init-method 执行释疑"></a>init-method 执行释疑</h3><p>关于<code>init-method</code>的执行的位置，有些人可能有疑问，这里拿个之前存的一个例子:</p>
<p>在配置文件中添加如下Bean定义：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"InitSequenceBean"</span> <span class="attr">init-method</span>=<span class="string">"initMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitSequenceBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;  </div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitSequenceBean</span><span class="params">()</span> </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"InitSequenceBean: constructor"</span>);  </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="meta">@PostConstruct</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postConstruct</span><span class="params">()</span> </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"InitSequenceBean: postConstruct"</span>);  </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"InitSequenceBean: init-method"</span>);  </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">       System.out.println(<span class="string">"InitSequenceBean: afterPropertiesSet"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">InitSequenceBean: constructor</div><div class="line">InitSequenceBean: postConstruct</div><div class="line">InitSequenceBean: afterPropertiesSet</div><div class="line">InitSequenceBean: init-method</div></pre></td></tr></table></figure>
<p>通过上述输出结果，三者的先后顺序也就一目了然了：</p>
<p><strong>Constructor &gt; @PostConstruct &gt; InitializingBean &gt; init-method</strong></p>
<p><strong>@PostConstruct</strong>通过<code>Debug</code>追源码可以找到这个类:<strong>org.springframework.context.annotation.CommonAnnotationBeanPostProcessor</strong>，从命名上，我们就可以得到某些信息—&gt;这是一个<code>BeanPostProcessor</code>。</p>
<h2 id="bean后置处理器Demo"><a href="#bean后置处理器Demo" class="headerlink" title="bean后置处理器Demo"></a>bean后置处理器Demo</h2><p>在我们的例子中，我们要使在程序部署时将无法使用的bean无效化。假如我们有一个VOD流媒体网站，所有的电影都可以在一个月的第一个星期免费观看(这个仅在部署时实现此效果，因为举例嘛，完善的话可以做个定时任务啥的，后面会拿一篇来讲)。验证的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> MovieController &#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ViewChecker viewChecker;</div><div class="line"> </div><div class="line">  <span class="comment">// some of request mapped methods</span></div><div class="line"> </div><div class="line">  <span class="comment">// check method</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">movieCanBeWatched</span><span class="params">(Movie movie)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (viewChecker == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> viewChecker.canBeWatched(movie);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们对一个bean进行A&amp;B测试，以获取并格式化网店中的产品列表。第一个bean用来获取访问量最多的商品。第二个是基于用户的喜好。也就是说通过这个A&amp;B就可以得到最受欢迎的商品(本来想举个复杂的例子的，还是算了，搞简单点吧，要不篇幅太长了)。首先，我们来定义一个bean配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.bean.BeanPostProcessorSample"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewChecker"</span> <span class="attr">class</span>=<span class="string">"com.migo.movie.ViewChecker"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第一个bean代表后置处理器bean。第二个，<code>viewChecker</code>是一个用来检查用户是否可以查看电影的类。我们先来看看这第二个class的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewChecker</span> <span class="keyword">implements</span> <span class="title">ProcessedBean</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// visitors can watch movies freely between the 1st and 7th day of every month</span></div><div class="line">    Calendar calendar = Calendar.getInstance();</div><div class="line">    <span class="keyword">return</span> calendar.get(Calendar.DAY_OF_MONTH) &gt; <span class="number">8</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，代码量很少。<code>ProcessedBean</code>接口如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProcessedBean</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">()</span></span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现此接口的所有bean必须实现<code>isValid()</code>方法，这样就可以用来判断该应用程序上下文是否可以使用该bean。在<code>BeanPostProcessorSample</code>中调用<code>ifValid</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorSample</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>  </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ProcessedBean) &#123;</div><div class="line">      <span class="keyword">if</span> (!((ProcessedBean)bean).isValid()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bean;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="keyword">return</span> bean;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由上可知，我们仅实现<code>afterInitialization</code>这个后置处理器方法。通过它，我们就可以确定所分析的bean可能在<code>init-method(如果指定)</code>中所设置的数据。如果分析的bean的<code>isValid()</code>是<code>false</code>，我们返回null。但请注意返回值null(再强调一遍)。如果无效bean还存在另一个依赖关系，可以看到类似于下面这样的异常(这个异常我们经常见，空指针异常)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'adminController'</span>: Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'adminService'</span>: Injection of resource dependencies failed; nested exception is </div><div class="line"><span class="comment">//也就是容器里找不到DataSource 这个bean的实例</span></div><div class="line">java.lang.IllegalArgumentException: DataSource must not be <span class="keyword">null</span></div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:<span class="number">307</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1185</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">537</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">475</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory$<span class="number">1</span>.getObject(AbstractBeanFactory.java:<span class="number">304</span>)</div><div class="line">  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">228</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">300</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">195</span>)</div><div class="line">  at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class="number">700</span>)</div><div class="line">  at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class="number">760</span>)</div><div class="line">  at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">482</span>)</div><div class="line">  at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:<span class="number">381</span>)</div><div class="line">  at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:<span class="number">293</span>)</div><div class="line">  at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:<span class="number">106</span>)</div><div class="line">  at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:<span class="number">4701</span>)</div><div class="line">  at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5204</span>)</div><div class="line">  at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5199</span>)</div><div class="line">  at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)</div><div class="line">  at java.util.concurrent.FutureTask.run(Unknown Source)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</div><div class="line">  at java.lang.Thread.run(Unknown Source)</div><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'adminService'</span>: Injection of resource dependencies failed; nested exception is java.lang.IllegalArgumentException: DataSource must not be <span class="keyword">null</span></div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:<span class="number">307</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1185</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">537</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">475</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory$<span class="number">1</span>.getObject(AbstractBeanFactory.java:<span class="number">304</span>)</div><div class="line">  at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">228</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">300</span>)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">200</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.autowireResource(CommonAnnotationBeanPostProcessor.java:<span class="number">445</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.getResource(CommonAnnotationBeanPostProcessor.java:<span class="number">419</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor$ResourceElement.getResourceToInject(CommonAnnotationBeanPostProcessor.java:<span class="number">544</span>)</div><div class="line">  at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:<span class="number">150</span>)</div><div class="line">  at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:<span class="number">87</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:<span class="number">304</span>)</div><div class="line">  ... <span class="number">21</span> more</div><div class="line">Caused by: java.lang.IllegalArgumentException: DataSource must not be <span class="keyword">null</span></div><div class="line">  at org.springframework.util.Assert.notNull(Assert.java:<span class="number">112</span>)</div><div class="line">  at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.(NamedParameterJdbcTemplate.java:<span class="number">89</span>)</div><div class="line">  at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.(SimpleJdbcTemplate.java:<span class="number">70</span>)</div><div class="line">  at com.migo.service.AdminService.setDataSource(AdminService.java:<span class="number">38</span>)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">  at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">  at java.lang.reflect.Method.invoke(Unknown Source)</div><div class="line">  at org.springframework.beans.factory.annotation.InjectionMetadata$InjectedElement.inject(InjectionMetadata.java:<span class="number">159</span>)</div><div class="line">  at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:<span class="number">87</span>)</div><div class="line">  at org.springframework.context.annotation.CommonAnnotationBeanPostProcessor.postProcessPropertyValues(CommonAnnotationBeanPostProcessor.java:<span class="number">304</span>)</div><div class="line">  ... <span class="number">34</span> more</div></pre></td></tr></table></figure>
<p>这问题发生在<code>adminService</code>创建的时候：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"adminService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> <span class="keyword">implements</span> <span class="title">GenericService</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> SimpleJdbcTemplate jdbcTemplate;</div><div class="line"> </div><div class="line">  <span class="meta">@Resource</span>(name=<span class="string">"dataSource"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> SimpleJdbcTemplate(dataSource);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这篇文章，我们在bean生命周期几乎每个阶段都可以对它进行操作。我们可以使用<code>BeanFactoryPostProcessors</code>来更改<code>Bean</code>的定义，也可以使用<code>bean  post processors(后置处理器)</code>来更改bean对象。但在更改任何内容之前，你需要分析其依赖关系。因为无效的bean(通过在后置处理器方法中返回null)可能会导致所依赖bean初始化(即空指针)的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的Bean-post-processors&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的Bean-post-processors&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的Bean post processors&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的Bean post processors&lt;/h1&gt;&lt;p&gt;我们之前已经对&lt;a href=&quot;https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/&quot;&gt;Spring中的bean工厂后置处理器&lt;/a&gt;说道过了。但是，依然留下了一个类似的概念的小尾巴需要来解释，这就是bean后置处理器(bean post processors)。&lt;/p&gt;
&lt;p&gt;本文将分为两部分。在第一部分，将了解下Spring的单个后处理器bean。第二部分将涉及一些后置处理器(post processors)实际使用的例子。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的bean工厂后置处理器</title>
    <link href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <id>https://muyinchen.github.io/2017/09/16/Spring5源码解析-Spring中的bean工厂后置处理器/</id>
    <published>2017-09-16T09:49:13.052Z</published>
    <updated>2017-09-17T11:24:55.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的bean工厂后置处理器"><a href="#Spring5源码解析-Spring中的bean工厂后置处理器" class="headerlink" title="Spring5源码解析-Spring中的bean工厂后置处理器"></a>Spring5源码解析-Spring中的bean工厂后置处理器</h1><p>Spring允许我们使用bean来进行大量的操作(这也是我们面向对象思想最常用的表达方式)。我们可以决定它们在容器中是否是(单例或者是原型)唯一实例。通过bean工厂后置处理器我们还可以在<code>初始化</code>时进行一些额外的操作。</p>
<p>在这篇文章中，来介绍下<strong>bean factory post processor</strong>。在第一部分，我们来发现下这个概念背后玄机。之后我们会写一些有趣代码来让大伙更好地理解这个概念。<br><a id="more"></a></p>
<h2 id="什么是Spring工厂的后置处理器？"><a href="#什么是Spring工厂的后置处理器？" class="headerlink" title="什么是Spring工厂的后置处理器？"></a>什么是Spring工厂的后置处理器？</h2><p>有时我们可能需要在Spring应用程序中实现一些动态行为。举个简单的例子，假设在你的网站中，你要显示按时间来显示两个文本内容。上午的时候，你会显示“早安”。下午，显示的文字将是“下午好”。另外，你有两个日常部署，上午12点，另一个在晚上12点。需要强调的是，这个文本内容必须由一个bean来处理。我们现在有两个选择:每次部署时更改应用程序上下文文件(太麻烦了)，或者定义一个实现<strong>org.springframework.beans.factory.config.BeanFactoryPostProcessor</strong>接口的bean 。第二个解决方案更优雅，因为我们只需要编写一次代码，然后就可以忽视它的存在了(无须次次去修改了)。</p>
<p>那么，这个优雅的<code>BeanFactoryPostProcessor</code>是何方神圣？它是由bean实现的接口，它们可以修改其他bean的定义。请注意，只能修改定义，即构造函数参数，属性值。<code>BeanFactoryPostProcessor</code>bean在初始化“正常”bean之前被调用，这就是为什么它能修改元数据的原因(meta data)。调用是通过<strong>org.springframework.context.support.AbstractApplicationContext的</strong> <strong>protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory)</strong>来<strong>实现的</strong>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">  PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>PostProcessorRegistrationDelegate</code>里面，负责bean factory后置处理器执行的方法是:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Invoke the given BeanFactoryPostProcessor beans.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></div><div class="line">		Collection&lt;? extends BeanFactoryPostProcessor&gt; postProcessors, ConfigurableListableBeanFactory beanFactory) &#123;</div><div class="line">	<span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : postProcessors) &#123;</div><div class="line">		postProcessor.postProcessBeanFactory(beanFactory);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如你所见，由<code>BeanFactoryPostProcessor</code>实现覆盖的主要方法是<code>postProcessBeanFactory</code>。这也是我们来自己定制bean定义的地方。我们通过在<strong>org.springframework.beans.factory.config.BeanDefinition</strong>对象上进行定制。关于这点我已经<a href="https://muyinchen.github.io/2017/09/15/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E5%92%8C%E5%8E%9F%E5%9E%8Bbean/">在Spring5源码解析-Spring框架中的单例和原型bean</a>的文章中已经写过，它们(<code>BeanDefinition对象</code>)包含大量关于bean元数据的信息:构造函数参数，属性值或作用域。</p>
<h2 id="一个简单的Spring-bean厂后置处理器Demo"><a href="#一个简单的Spring-bean厂后置处理器Demo" class="headerlink" title="一个简单的Spring bean厂后置处理器Demo"></a>一个简单的Spring bean厂后置处理器Demo</h2><p>关于理论的重要部分已经都在前面进行了描述。在这部分中，我们将重点放在一个简单实用的案例上。你还记得第一部分的“早安”和“下午好”的例子？如果忘了，请回去再瞅眼的。接着，让我们尝试在代码中实现这种案例。首先，我们将在配置文件中定义一些bean:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.bean.BeanModifier"</span>&gt;</span> </div><div class="line">      </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"welcomerBean"</span> <span class="attr">class</span>=<span class="string">"com.migo.bean.Welcomer"</span> <span class="attr">init-method</span>=<span class="string">"initWelcomer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"welcomeText"</span> <span class="attr">value</span>=<span class="string">"Good morning"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第一个bean代表将实现<code>BeanFactoryPostProcessor</code>接口的bean。第二个bean是注入的类，它会在页面中显示欢迎的文本内容。他们是两个bean的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Welcomer.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcomer</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> String welcomeText;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWelcomer</span><span class="params">()</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"Welcomer is initialized"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWelcomeText</span><span class="params">(String welcomeText)</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"Setting welcomeText to: "</span>+welcomeText);</div><div class="line">    <span class="keyword">this</span>.welcomeText = welcomeText;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getWelcomeText</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.welcomeText;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Welcomer &#123;text: "</span>+<span class="keyword">this</span>.welcomeText+<span class="string">"&#125;"</span>;</div><div class="line">  &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// BeanModifier.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanModifier</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Calendar calendar = Calendar.getInstance();</div><div class="line">      <span class="keyword">if</span> (calendar.get(Calendar.AM_PM) == Calendar.PM) &#123;</div><div class="line">        BeanDefinition welcomerDef = beanFactory.getBeanDefinition(<span class="string">"welcomerBean"</span>);</div><div class="line">        welcomerDef.getPropertyValues().add(<span class="string">"welcomeText"</span>, <span class="string">"Good afternoon"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        LOGGER.error(<span class="string">"An error occurred on setting welcomeText"</span>, e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// test method</span></div><div class="line">ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/home/bartosz/webapp/src/main/resources/META-INF/applicationContext.xml"</span>);</div><div class="line"> </div><div class="line">Welcomer welcomer = (Welcomer) context.getBean(<span class="string">"welcomer"</span>);</div><div class="line">System.out.println(<span class="string">"Text: "</span>+welcomer.getWelcomeText());</div></pre></td></tr></table></figure>
<p>如果现在是下午，输出应该是:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Setting welcomeText to: Good afternoon</div><div class="line">Welcomer is initialized</div><div class="line">Text: Good afternoon</div></pre></td></tr></table></figure>
<p>我们可以看到，<code>BeanModifier</code>在<code>Welcomer</code>的真正初始化之前被调用。由于重写覆盖了<code>postProcessBeanFactory</code>方法，这样我们可以通过检查日期，并为属性<code>welcomeText</code>设置正确的值。</p>
<p>这篇文章虽短，但它描述了一些在一些“动态”场景中我们如何以一个更效率的方式来实现的实用操作。比如，你会碰到这种，我们常常见到一个游戏会有例行维护，那么我们会发现排行榜会在例行维护后刷新，你每次登录游戏也会对你的一些属性或者积分进行刷新，其实你每次登录就是又初始化了一遍你这个bean，这样，我们就可以做很多事情了，比如为最佳用户添加一些奖励积分。通过<code>BeanFactoryPostProcessor</code>这个 bean，这种处理就可以在Java方法内自动完成，无须我们在每次部署时通过手动来完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的bean工厂后置处理器&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的bean工厂后置处理器&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的bean工厂后置处理器&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的bean工厂后置处理器&lt;/h1&gt;&lt;p&gt;Spring允许我们使用bean来进行大量的操作(这也是我们面向对象思想最常用的表达方式)。我们可以决定它们在容器中是否是(单例或者是原型)唯一实例。通过bean工厂后置处理器我们还可以在&lt;code&gt;初始化&lt;/code&gt;时进行一些额外的操作。&lt;/p&gt;
&lt;p&gt;在这篇文章中，来介绍下&lt;strong&gt;bean factory post processor&lt;/strong&gt;。在第一部分，我们来发现下这个概念背后玄机。之后我们会写一些有趣代码来让大伙更好地理解这个概念。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring框架中的单例和原型bean</title>
    <link href="https://muyinchen.github.io/2017/09/15/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E5%92%8C%E5%8E%9F%E5%9E%8Bbean/"/>
    <id>https://muyinchen.github.io/2017/09/15/Spring5源码解析-Spring框架中的单例和原型bean/</id>
    <published>2017-09-15T04:59:37.635Z</published>
    <updated>2017-09-17T11:30:30.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring框架中的单例和原型bean"><a href="#Spring5源码解析-Spring框架中的单例和原型bean" class="headerlink" title="Spring5源码解析-Spring框架中的单例和原型bean"></a>Spring5源码解析-Spring框架中的单例和原型bean</h1><p>最近一直有问我单例和原型bean的一些原理性问题，这里就开一篇来说说的</p>
<p>通过Spring中的依赖注入极大方便了我们的开发。在<code>xml</code>通过<code>&lt;bean&gt;</code>定义(或者通过<code>@Bean</code>在配置类里定义)对象之后，然后只需简单地使用@Autowired注解，就可以使用由Spring上下文管理的每个对象。需要注意的是，所有这些对象在Spring中默认都是单例。</p>
<p>这一次我们会去讨论Spring如何来管理这些定义的bean。在第一部分中，我们将讲解单例和原型作用域的概念。第二部分中，我们将分析单例和原型作用域之间的依赖关系。其后说一下方法注入。最后专门对相关Spring的代码来做下分析，具体看看bean是如何构建出来的。<br><a id="more"></a></p>
<h2 id="Spring中的bean默认都是单身贵族"><a href="#Spring中的bean默认都是单身贵族" class="headerlink" title="Spring中的bean默认都是单身贵族"></a>Spring中的bean默认都是单身贵族</h2><p>Spring使用单例设计模式来管理bean？不完全是。Singleton设计模式假定它们是由Java的类加载器管理的jvm中给定类的唯一一个实例。在Spring中，还是有点不一样。默认情况下，它们为每个给定的<em>org.springframework.context.ApplicationContext</em>实例存在唯一的一个bean (有点别扭，也就是可以有多个Spring容器，每一个容器内存在唯一bean实例，之前的文章中有涉及例子的)。这意味着如果你有两个或更多上下文，所有这些上下文都由同一Java的类加载器管理(因为在同一个jvm环境中)，则可能会有多个给定bean的实例。唯一需要做到的是必须在每个上下文中定义此bean。讲那么多不如代码更有说服力:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleContextes</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// retreive two different contexts</span></div><div class="line">      ApplicationContext firstContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/home/bartosz/webapp/src/main/resources/META-INF/applicationContext.xml"</span>);</div><div class="line">      ApplicationContext secondContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/home/bartosz/webapp/src/main/resources/META-INF/applicationContext.xml"</span>);</div><div class="line"> </div><div class="line">      <span class="comment">// compare the objects from different contexts</span></div><div class="line">      ShoppingCart firstShoppingCart = (ShoppingCart) firstContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">      ShoppingCart secondShoppingCart = (ShoppingCart) secondContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">      System.out.println(<span class="string">"1. Are they the same ? "</span> + (firstShoppingCart == secondShoppingCart));</div><div class="line"> </div><div class="line">      <span class="comment">// compare the objects from the same context</span></div><div class="line">      ShoppingCart firstShoppingCartBis = (ShoppingCart) firstContext.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">      System.out.println(<span class="string">"2. Are they the same ? "</span>+ (firstShoppingCart == firstShoppingCartBis));</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过执行此代码，你应该得到:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. Are they the same ? <span class="keyword">false</span></div><div class="line"><span class="number">2</span>. Are they the same ? <span class="keyword">true</span></div></pre></td></tr></table></figure>
<p>所以你可以看到，bean只是一个上下文的单例。这就是为什么你不应该将Spring的单例概念与设计模式中的的单例混合在一起。</p>
<p>但是，如果要为一个定义的bean在一个上下文内可以使用不同的实例，应该怎么做？很简单，你应该将此Bean配置为原型作用域:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.migo.data.ShoppingCart"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在，在运行以前的代码之后，你可以看到如下输出:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. Are they the same ? <span class="keyword">false</span></div><div class="line"><span class="number">2</span>. Are they the same ? <span class="keyword">false</span></div></pre></td></tr></table></figure>
<p>我们已经知道两个作用域之间的区别。但在哪种情况下我们应该选择使用单例还是原型？Singleton适用于<strong>无状态的</strong>bean，即没有状态的bean。比如一个<code>service</code>，<code>DAO</code>或者<code>controller</code>。他们都没有自己的状态(<strong>举个简单的例子，一个函数<code>sin(x)</code>，这个函数本身就是无状态的，所以我们现在喜欢的函数式编程也遵循这个理念</strong>)。而是根据传输的参数执行一些操作(作为HTTP请求参数)。另一方面，我们可以通过<strong>状态</strong>bean管理一些状态。比如购物车bean，假如它是一个单例，那么两个不同消费者购买的产品将被放置在同一个对象上。而如果其中一个消费者想要删除一个产品，另一个消费者就铁定不高兴。这也就是<strong>状态类对象应该是原型</strong>。</p>
<p>这里说点题外话，不能确定时间的保证，未来会出一个用Java的代码习惯去解析vue的一些东西，内容已经总结完毕，也应用到自己的项目中了，然后得出的一些方法论，为什么在这里去说，就是因为vue也是遵循这个无状态和状态专门管理的原则的，扯远了，接着进行下一部分。</p>
<h2 id="将原型放在单例中，反之亦然"><a href="#将原型放在单例中，反之亦然" class="headerlink" title="将原型放在单例中，反之亦然"></a>将原型放在单例中，反之亦然</h2><p>通过上面的描述，很多概念都很清楚了吧，但有时候会发生一些更复杂的情况。第一个是在原型bean中放置单例。显然，如果注入的单例对象真的是一个单例的bean(没有状态)，这个真的没一点问题。想象一下，对于我们的购物车，我们需要注入产品服务。此服务只会检查添加到购物车的产品是否库存。由于服务没有状态，并且会基于在方法签名中所传递的对象进行验证，因此不存在风险。</p>
<p>另一方面，将原型bean放在单例中需要做更多的工作。我们不能在单例bean中通过使用自动注入(比如<code>@Autowired</code>注解)注入原型bean。当Spring初始化所有具有依赖关系的单例bean时，这些注入只会执行一次。这也就意味着在以下代码，<code>ShoppingCart</code>的实例将始终是相同的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ShoppingCart shoppingCart;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/addProduct/&#123;productName&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testAdd</span><span class="params">(@PathVariable(value=<span class="string">"productName"</span>)</span> String productName) </span>&#123;</div><div class="line">    Product product = <span class="keyword">new</span> Product();</div><div class="line">    product.setName(productName);</div><div class="line">    <span class="keyword">this</span>.shoppingCart.addProduct(product);</div><div class="line">    LOGGER.debug(<span class="string">"ShoppingCart is "</span>+<span class="keyword">this</span>.shoppingCart);</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译此类并进行一些URL调用:<a href="http://localhost:8080/addProduct/ice%20tea，http://localhost:8080/addProduct/milk。你将看到如下输出的顺序" target="_blank" rel="external">http://localhost:8080/addProduct/ice%20tea，http://localhost:8080/addProduct/milk。你将看到如下输出的顺序</a>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// after http://localhost:8080/addProduct/ice%20tea</span></div><div class="line">ShoppingCart is ShoppingCart &#123;products: [Product &#123;ice tea&#125;]&#125;</div><div class="line"><span class="comment">// after http://localhost:8080/addProduct/milk</span></div><div class="line">ShoppingCart is ShoppingCart &#123;products: [Product &#123;ice tea&#125;, Product &#123;milk&#125;]&#125;</div></pre></td></tr></table></figure>
<p>为了在按照我们预想情况下工作(要求不一样的<code>ShoppingCart</code>)，我们可以通过bean工厂手动获取<code>ShoppingCart</code>实例(这样就可以再一次生成一个不一样的<code>ShoppingCart</code>实例了):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/addProduct/&#123;productName&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testAdd</span><span class="params">(@PathVariable(value=<span class="string">"productName"</span>)</span> String productName) </span>&#123;</div><div class="line">    Product product = <span class="keyword">new</span> Product();</div><div class="line">    product.setName(productName);</div><div class="line"> </div><div class="line">    ShoppingCart shoppingCart = (ShoppingCart) context.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">    shoppingCart.addProduct(product);</div><div class="line">    LOGGER.debug(<span class="string">"ShoppingCart is "</span>+shoppingCart);</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，你就可以日志中看到，每次调用都会有新的<code>ShoppingCart</code>实例的生成:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// after http://localhost:8080/addProduct/ice%20tea</span></div><div class="line">ShoppingCart is ShoppingCart &#123;products: [Product &#123;ice tea&#125;]&#125;</div><div class="line"><span class="comment">// after http://localhost:8080/addProduct/milk</span></div><div class="line">ShoppingCart is ShoppingCart &#123;products: [Product &#123;milk&#125;]&#125;</div></pre></td></tr></table></figure>
<h2 id="方法注入"><a href="#方法注入" class="headerlink" title="方法注入"></a>方法注入</h2><p>有没有别的方法在每次调用都会产生一个新实例？这就是接下来要说的<strong>方法注入</strong>的技术。它看起来有点像我们的手动去进行bean的查找，但更优雅。一个可以被上下文所感知(访问应用程序上下文可以得到)的bean将负责在单例bean中生成原型bean实例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"shoppingCartProvider"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCartProvider</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext context)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    <span class="keyword">this</span>.context = context;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> ShoppingCart <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (ShoppingCart) context.getBean(<span class="string">"shoppingCart"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过上面的修改，controller这里相应修改:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ShoppingCartProvider shoppingCartProvider;</div><div class="line">   </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/addProduct/&#123;productName&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testAdd</span><span class="params">(@PathVariable(value=<span class="string">"productName"</span>)</span> String productName) </span>&#123;</div><div class="line">    Product product = <span class="keyword">new</span> Product();</div><div class="line">    product.setName(productName);</div><div class="line"> </div><div class="line">    ShoppingCart shoppingCart = shoppingCartProvider.getInstance();</div><div class="line">    shoppingCart.addProduct(product);</div><div class="line">    System.out.println(<span class="string">"ShoppingCart is "</span>+shoppingCart);</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以在XML配置文件中定义。里面会有一个属性引用原型bean，并允许在每次调用时创建新的实例。它可以很轻松地在一个bean中混合更多东西:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCartProvider"</span> <span class="attr">class</span>=<span class="string">"com.migo.data.ShoppingCartProvider"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">lookup-method</span> <span class="attr">name</span>=<span class="string">"getInstance"</span> <span class="attr">bean</span>=<span class="string">"shoppingCart"</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;/<span class="name">lookup-method</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCart"</span> <span class="attr">class</span>=<span class="string">"com.migo.data.ShoppingCart"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCartProvider</span>   </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ShoppingCart <span class="title">getInstance</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Controller</code>的代码与实现<code>ApplicationContextAware</code>接口的provider的那个例子是一样的。而区别也仅在于provider的bean定义和实现。该定义包含一个标签查找方法。它指定必须使用哪个方法来获取bean属性中指定的bean的新实例。在我们的这个例子中，我们通过调用<code>ShoppingCartProvider</code>类的<code>getInstance</code>方法来寻找新的<code>ShoppingCart</code>的实例。需要注意的一点，类和方法都可以是抽象的。通过这样做，你可以让Spring生成将实现该方法并返回所需bean的子类。如果这个方法不是抽象的，Spring会重写覆盖它。</p>
<h2 id="Spring中的Bean类"><a href="#Spring中的Bean类" class="headerlink" title="Spring中的Bean类"></a>Spring中的Bean类</h2><p>单例的源码实现主要存在于<strong>org.springframework.beans</strong>和<strong>org.springframework.context</strong>包中。首先，从Bean包中查看<strong>BeanFactory</strong>接口。它包含两个我们绝对感兴趣的方法，可用来确定bean是单例还是原型: </p>
<ul>
<li><em>boolean isSingleton(String name)throws NoSuchBeanDefinitionException</em> </li>
<li><em>boolean isPrototype(String name)throws NoSuchBeanDefinitionException</em></li>
</ul>
<p>接下来，我们来深入一下<code>AbstractFactoryBean</code>,从这个类的注释可以知道它是作为“<code>FactoryBean实现的简单模板超类(还是直白翻译下比较好，说默认实现也觉得不靠谱)</code>”。它包含一个用来返回单例或创建原型bean的<code>getObject</code>方法的实现。原型和单例是通过<code>createInstance</code>方法在不同的时间段进行的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Simple template superclass for &#123;<span class="doctag">@link</span> FactoryBean&#125; implementations that</div><div class="line"> * creates a singleton or a prototype object, depending on a flag.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;If the "singleton" flag is &#123;<span class="doctag">@code</span> true&#125; (the default),</div><div class="line"> * this class will create the object that it creates exactly once</div><div class="line"> * on initialization and subsequently return said singleton instance</div><div class="line"> * on all calls to the &#123;<span class="doctag">@link</span> #getObject()&#125; method.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Else, this class will create a new instance every time the</div><div class="line"> * &#123;<span class="doctag">@link</span> #getObject()&#125; method is invoked. Subclasses are responsible</div><div class="line"> * for implementing the abstract &#123;<span class="doctag">@link</span> #createInstance()&#125; template</div><div class="line"> * method to actually create the object(s) to expose.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@author</span> Keith Donald</div><div class="line"> * <span class="doctag">@since</span> 1.0.2</div><div class="line"> * <span class="doctag">@see</span> #setSingleton</div><div class="line"> * <span class="doctag">@see</span> #createInstance()</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryBean</span>&lt;<span class="title">T</span>&gt;</span></div><div class="line">		<span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt;, <span class="title">BeanClassLoaderAware</span>, <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> &#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Expose the singleton instance or create a new prototype instance.</div><div class="line">	 * <span class="doctag">@see</span> #createInstance()</div><div class="line">	 * <span class="doctag">@see</span> #getEarlySingletonInterfaces()</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">if</span> (isSingleton()) &#123;</div><div class="line">			<span class="keyword">return</span> (<span class="keyword">this</span>.initialized ? <span class="keyword">this</span>.singletonInstance : getEarlySingletonInstance());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> createInstance();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">		...</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Template method that subclasses must override to construct</div><div class="line">	 * the object returned by this factory.</div><div class="line">	 * &lt;p&gt;Invoked on initialization of this FactoryBean in case of</div><div class="line">	 * a singleton; else, on each &#123;<span class="doctag">@link</span> #getObject()&#125; call.</div><div class="line">	 * <span class="doctag">@return</span> the object returned by this factory</div><div class="line">	 * <span class="doctag">@throws</span> Exception if an exception occurred during object creation</div><div class="line">	 * <span class="doctag">@see</span> #getObject()</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">	...</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>另一个我们会感兴趣的一个点是<code>BeanDefinition接口</code>。<code>bean如其名</code>，它定义了一个bean属性，例如:scope，class name，factory method name，properties或constructor arguments。</p>
<p><strong>org.springframework.beans.factory.config.BeanDefinition</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A BeanDefinition describes a bean instance, which has property values,</div><div class="line"> * constructor argument values, and further information supplied by</div><div class="line"> * concrete implementations.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;This is just a minimal interface: The main intention is to allow a</div><div class="line"> * &#123;<span class="doctag">@link</span> BeanFactoryPostProcessor&#125; such as &#123;<span class="doctag">@link</span> PropertyPlaceholderConfigurer&#125;</div><div class="line"> * to introspect and modify property values and other bean metadata.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@author</span> Rob Harrop</div><div class="line"> * <span class="doctag">@since</span> 19.03.2004</div><div class="line"> * <span class="doctag">@see</span> ConfigurableListableBeanFactory#getBeanDefinition</div><div class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.support.RootBeanDefinition</div><div class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.support.ChildBeanDefinition</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinition</span> <span class="keyword">extends</span> <span class="title">AttributeAccessor</span>, <span class="title">BeanMetadataElement</span> </span>&#123;</div><div class="line">  <span class="comment">//限于篇幅，请自行查看源码，能发现很多有用的东西</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想要看到bean被初始化的位置，我们需要跳转到context包中，更准确地说就是在<code>AbstractApplicationContext</code>类(这个类我们已经接触过好多次了)中。在它的<strong>public void refresh()throws BeansException，IllegalStateException</strong>我们可以找到一些关于bean创建的片段，特别是: </p>
<ul>
<li><strong>protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory)</strong>:实现<strong>org.springframework.beans.factory.config .BeanFactoryPostProcessor</strong>接口的所有bean 都被初始化和调用。这种类型bean允许修改另一个bean的属性或构造函数参数(请看<strong>PostProcessorRegistrationDelegate</strong>的相应代码可以知道，使用<strong>BeanFactoryPostProcessor</strong>来处理我们所要用<strong>beanFactory</strong>生成的bean，这里可以直接把<strong>beanFactory</strong>看成是我们需要的bean即可)。但是请注意，在此阶段只能修改bean定义。<strong>“正常”</strong>bean实例尚未创建。关于这块会请参考文章<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">Spring中的bean工厂后置处理器</a>。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Instantiate and invoke all registered BeanFactoryPostProcessor beans,</div><div class="line">	 * respecting explicit order if given.</div><div class="line">	 * &lt;p&gt;Must be called before singleton instantiation.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</div><div class="line"></div><div class="line">		<span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></div><div class="line">		<span class="comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line">			beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.context.support.PostProcessorRegistrationDelegate</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Delegate for AbstractApplicationContext's post-processor handling.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 4.0</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostProcessorRegistrationDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></div><div class="line">			ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors) &#123;</div><div class="line"></div><div class="line">		<span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></div><div class="line">		Set&lt;String&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</div><div class="line">			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</div><div class="line">			List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">			List&lt;BeanDefinitionRegistryPostProcessor&gt; registryPostProcessors =</div><div class="line">					<span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</div><div class="line">				<span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</div><div class="line">					BeanDefinitionRegistryPostProcessor registryPostProcessor =</div><div class="line">							(BeanDefinitionRegistryPostProcessor) postProcessor;</div><div class="line">					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);</div><div class="line">					registryPostProcessors.add(registryPostProcessor);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					regularPostProcessors.add(postProcessor);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">...</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory)</strong>:这里上下文实例化并调用实现了<strong>org.springframework.beans.factory.config.BeanPostProcessor</strong>接口的所有bean 。实现此接口的bean包含可以在其他bean初始化之前或之后调用的回调。因为内容比较多，关于这块会请参考文章<a href="https://muyinchen.github.io/2017/09/16/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84bean%E5%B7%A5%E5%8E%82%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/">Spring中的bean工厂后置处理器</a>。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Instantiate and invoke all registered BeanPostProcessor beans,</div><div class="line">	 * respecting explicit order if given.</div><div class="line">	 * &lt;p&gt;Must be called before any instantiation of application beans.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="keyword">this</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory)</strong>:主要调用定义在<strong>org.springframework.beans.factory.config.ConfigurableListableBeanFactory</strong>接口内的<code>preInstantiateSingletons</code>方法。该方法的目的是实例化所有被定义为非延迟加载的bean。如果在应用程序上下文加载时遇到BeansException异常，则可能来自此方法。当bean无法创建时，它会抛出BeansException异常。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Finish the initialization of this context's bean factory,</div><div class="line">	 * initializing all remaining singleton beans.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">// Initialize conversion service for this context.</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</div><div class="line">				beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</div><div class="line">			beanFactory.setConversionService(</div><div class="line">					beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Register a default embedded value resolver if no bean post-processor</span></div><div class="line">		<span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></div><div class="line">		<span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></div><div class="line">		<span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</div><div class="line">			beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></div><div class="line">		String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">		<span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</div><div class="line">			getBean(weaverAwareName);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Stop using the temporary ClassLoader for type matching.</span></div><div class="line">		beanFactory.setTempClassLoader(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></div><div class="line">		beanFactory.freezeConfiguration();</div><div class="line"></div><div class="line">		<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></div><div class="line">		beanFactory.preInstantiateSingletons();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			<span class="comment">// Prepare this context for refreshing.</span></div><div class="line">			prepareRefresh();</div><div class="line"></div><div class="line">			<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></div><div class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// Prepare the bean factory for use in this context.</span></div><div class="line">			prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></div><div class="line">				postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Invoke factory processors registered as beans in the context.</span></div><div class="line">				invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Register bean processors that intercept bean creation.</span></div><div class="line">				registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Initialize message source for this context.</span></div><div class="line">				initMessageSource();</div><div class="line"></div><div class="line">				<span class="comment">// Initialize event multicaster for this context.</span></div><div class="line">				initApplicationEventMulticaster();</div><div class="line"></div><div class="line">				<span class="comment">// Initialize other special beans in specific context subclasses.</span></div><div class="line">				onRefresh();</div><div class="line"></div><div class="line">				<span class="comment">// Check for listener beans and register them.</span></div><div class="line">				registerListeners();</div><div class="line"></div><div class="line">				<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></div><div class="line">				finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Last step: publish corresponding event.</span></div><div class="line">				finishRefresh();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">					logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</div><div class="line">							<span class="string">"cancelling refresh attempt: "</span> + ex);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">				destroyBeans();</div><div class="line"></div><div class="line">				<span class="comment">// Reset 'active' flag.</span></div><div class="line">				cancelRefresh(ex);</div><div class="line"></div><div class="line">				<span class="comment">// Propagate exception to caller.</span></div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">finally</span> &#123;</div><div class="line">				<span class="comment">// Reset common introspection caches in Spring's core, since we</span></div><div class="line">				<span class="comment">// might not ever need metadata for singleton beans anymore...</span></div><div class="line">				resetCommonCaches();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先，我们讲了单例和原型作用域之间的区别。第一个为每个容器创建一个对象，而第二个在每个请求时创建一个新的bean对象。单例和原型都可以一起交叉使用，但原型不能通过<code>@Autowired</code>或其他注入方式来解决。它们应该使用<code>getBean()方法</code>或<code>方法查找</code>来生成新实例。最后随意说了一说关于bean及其初始化的内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring框架中的单例和原型bean&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring框架中的单例和原型bean&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring框架中的单例和原型bean&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring框架中的单例和原型bean&lt;/h1&gt;&lt;p&gt;最近一直有问我单例和原型bean的一些原理性问题，这里就开一篇来说说的&lt;/p&gt;
&lt;p&gt;通过Spring中的依赖注入极大方便了我们的开发。在&lt;code&gt;xml&lt;/code&gt;通过&lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;定义(或者通过&lt;code&gt;@Bean&lt;/code&gt;在配置类里定义)对象之后，然后只需简单地使用@Autowired注解，就可以使用由Spring上下文管理的每个对象。需要注意的是，所有这些对象在Spring中默认都是单例。&lt;/p&gt;
&lt;p&gt;这一次我们会去讨论Spring如何来管理这些定义的bean。在第一部分中，我们将讲解单例和原型作用域的概念。第二部分中，我们将分析单例和原型作用域之间的依赖关系。其后说一下方法注入。最后专门对相关Spring的代码来做下分析，具体看看bean是如何构建出来的。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的Context loader</title>
    <link href="https://muyinchen.github.io/2017/09/12/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84Context%20loader/"/>
    <id>https://muyinchen.github.io/2017/09/12/Spring5源码解析-Spring中的Context loader/</id>
    <published>2017-09-12T03:19:05.300Z</published>
    <updated>2017-09-13T06:03:51.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的Context-loader"><a href="#Spring5源码解析-Spring中的Context-loader" class="headerlink" title="Spring5源码解析-Spring中的Context loader"></a>Spring5源码解析-Spring中的Context loader</h1><p>我们已经知道，应用程序上下文是Spring管理的bean所在的容器。但是我们依然要问一个问题:这个上下文是如何创建的？那么在这篇文章中我们来探讨这个问题。</p>
<p>在第一部分中，会说下在<a href="https://muyinchen.github.io/2017/09/08/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/">Spring的应用程序上下文中</a>所谓的<strong>上下文加载器(context loader)</strong>是什么。在第二部分，我们会讨论这个加载器的代码细节。最后一部分，老规矩，写我们自己的一个自定义的loader。在继续之前，需要说一下，loader(加载器) 将根据web application和dispatcher servlet来结合进行分析。其实这也是很多人一碰到源码就像无头苍蝇，不知道从何而起了，刚开始放下所有，从大体去思考该如何入手,这里对设计模式了解就很重要了，还有，源码的类注释很重要，不多说，接着走。<br><a id="more"></a></p>
<h2 id="什么是Spring的上下文加载器-context-loader-？"><a href="#什么是Spring的上下文加载器-context-loader-？" class="headerlink" title="什么是Spring的上下文加载器(context loader)？"></a>什么是Spring的上下文加载器(context loader)？</h2><p>见名知意，上下文加载程序负责构建应用程序上下文。我们可以通过<strong>org.springframework.web.context.ContextLoaderListener的</strong>实例来对其分析(<strong>从我之前的设计模式的文章可以看到，Spring通过观察者模式，其实我自己总结的是电影院模式，声音和画面通过broadcaster发送到listener，listener再调用相应的adapter来处理,所以，这里就直接从listener来找了</strong>)，它继承并扩展了同一个包下的<code>ContextLoader</code>类。同时还实现了<strong>javax.servlet.ServletContextListener</strong>接口。该接口旨在接收有关servlet上下文中更改变化的通知。只有当它们在(<code>WEB-INF/web.xml</code>)中注册时，这个接口的实现才能接收这些通知。</p>
<p>在Spring Web应用程序中，会在servlet上下文创建时调用上下文加载程序(<code>context loader</code>)。之后，开始初始化根Web应用程序上下文(<code>Root WebApplicationContext</code>)。<strong>Root</strong>非常重要，因为在加载的时候，可以创建两个或更多的上下文。第一个，也是最重要的，定义了整个bean的生存空间，被称为<strong>应用程序上下文(application context)</strong>。另一个是<strong>servlet应用程序上下文</strong>,其包含更多的是面向Web的元素，比如控制器(controllers)或视图解析器。然而我们需要记住的是，<code>servlet</code>的上下文是根应用程序上下文(<code>Root WebApplicationContext</code>)的子集，也就是父子容器一说。这意味着<code>servlet</code>可以从根应用程序上下文继承所有的bean。这就是为什么你可以在根配置文件中定义一些常见资源(例如:services，这也是我们的Spring xml配置文件为什么要分service和MVC两个的原因)，并通过两个不同的servlet进行共享的原因。但是在另一方面，根应用程序上下文不能获取到特定于servlet的bean，看过我的<a href="https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/">逃逸分析</a>的应该都清楚了吧。</p>
<p>我们可以将注意力拉回到关于上下文加载器的两个作用上: </p>
<ul>
<li><p>将根Web应用程序上下文(<code>Root WebApplicationContext</code>)绑定到调度程序特定的上下文中 </p>
</li>
<li><p>自动创建上下文(程序员不需要编写任何东西来使上下文工作)</p>
</li>
</ul>
<h2 id="Spring的上下文加载器详解"><a href="#Spring的上下文加载器详解" class="headerlink" title="Spring的上下文加载器详解"></a>Spring的上下文加载器详解</h2><p>我们已经了解了上下文加载器的作用。现在，我们来更详细地介绍这其中的细节。web上下文加载器(context loader)类位于<strong>org.springframework.web.context</strong>包中。主类是<code>ContextLoaderListener</code>，它扩展了<code>ContextLoader</code>类。同时实现了<code>ServletContextListener</code>接口。</p>
<p>在上下文创建时调用的方法是<strong>public void contextInitialized(ServletContextEvent event)</strong>。它通过传递给它所接收到的servlet上下文(从事件参数获取<code>event.getServletContext()</code>)来调用<code>ContextLoader</code>的<code>initWebApplicationContext</code>方法。<code>initWebApplicationContext</code>方法进行的第一个操作是检查是否有另一个根上下文存在。如果至少存在另一个，则抛出<code>IllegalStateException</code>，并且初始化失败。否则，它继续初始化<strong>org.springframework.web.context.WebApplicationContext</strong>实例。如果初始化的实例实现了<code>ConfigurableWebApplicationContext</code>接口，则在设置当前应用程序上下文之前，加载器将进行一些设置服务(父上下文，应用程序上下文，servlet上下文等)，并通过上下文的<code>refresh()</code>方法来准备bean，这已经在关于<a href="https://muyinchen.github.io/2017/09/08/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/">应用程序上下文</a>的文章中介绍过了。</p>
<p><strong>org.springframework.web.context.ContextLoaderListener:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize the root web application context.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</div><div class="line">	initWebApplicationContext(event.getServletContext());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.web.context.ContextLoader:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Initialize Spring's web application context for the given servlet context,</div><div class="line">	 * using the application context provided at construction time, or creating a new one</div><div class="line">	 * according to the "&#123;<span class="doctag">@link</span> #CONTEXT_CLASS_PARAM contextClass&#125;" and</div><div class="line">	 * "&#123;<span class="doctag">@link</span> #CONFIG_LOCATION_PARAM contextConfigLocation&#125;" context-params.</div><div class="line">	 * <span class="doctag">@param</span> servletContext current servlet context</div><div class="line">	 * <span class="doctag">@return</span> the new WebApplicationContext</div><div class="line">	 * <span class="doctag">@see</span> #ContextLoader(WebApplicationContext)</div><div class="line">	 * <span class="doctag">@see</span> #CONTEXT_CLASS_PARAM</div><div class="line">	 * <span class="doctag">@see</span> #CONFIG_LOCATION_PARAM</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">					<span class="string">"Cannot initialize context because there is already a root application context present - "</span> +</div><div class="line">					<span class="string">"check whether you have multiple ContextLoader* definitions in your web.xml!"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		Log logger = LogFactory.getLog(ContextLoader.class);</div><div class="line">		servletContext.log(<span class="string">"Initializing Spring root WebApplicationContext"</span>);</div><div class="line">		<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">			logger.info(<span class="string">"Root WebApplicationContext: initialization started"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">          	</div><div class="line">			<span class="comment">// Store context in local instance variable, to guarantee that</span></div><div class="line">			<span class="comment">// it is available on ServletContext shutdown.</span></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</div><div class="line">			&#125;</div><div class="line">          <span class="comment">//此处判断下初始化的实例实现了ConfigurableWebApplicationContext接口</span></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</div><div class="line">				ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</div><div class="line">				<span class="keyword">if</span> (!cwac.isActive()) &#123;</div><div class="line">					<span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></div><div class="line">					<span class="comment">// setting the parent context, setting the application context id, etc</span></div><div class="line">					<span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</div><div class="line">						<span class="comment">// The context instance was injected without an explicit parent -&gt;</span></div><div class="line">						<span class="comment">// determine parent for root web application context, if any.</span></div><div class="line">						ApplicationContext parent = loadParentContext(servletContext);</div><div class="line">						cwac.setParent(parent);</div><div class="line">					&#125;</div><div class="line">                  	<span class="comment">//refresh()准备生米煮熟饭了</span></div><div class="line">					configureAndRefreshWebApplicationContext(cwac, servletContext);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</div><div class="line"></div><div class="line">			ClassLoader ccl = Thread.currentThread().getContextClassLoader();</div><div class="line">			<span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</div><div class="line">				currentContext = <span class="keyword">this</span>.context;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="keyword">null</span>) &#123;</div><div class="line">				currentContextPerThread.put(ccl, <span class="keyword">this</span>.context);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Published root WebApplicationContext as ServletContext attribute with name ["</span> +</div><div class="line">						WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">				<span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</div><div class="line">				logger.info(<span class="string">"Root WebApplicationContext: initialization completed in "</span> + elapsedTime + <span class="string">" ms"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.context;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">			logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">			logger.error(<span class="string">"Context initialization failed"</span>, err);</div><div class="line">			servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</div><div class="line">			<span class="keyword">throw</span> err;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>ContextLoaderListener</code>中第二个我们需要关注的方法是<strong>public void contextDestroyed(ServletContextEvent event)</strong>。每当加载程序的上下文关闭时都会调用它。这个方法干了两件事情: </p>
<ul>
<li>通过<code>ContextLoader</code>中的<code>closeWebApplicationContext()</code>，它关闭应用程序上下文。通过<code>ConfigurableWebApplicationContext close()</code>方法完成上下文关闭。上下文的销毁的过程其实就是销毁bean和关闭bean工厂，此处参考<strong>org.springframework.context.support.AbstractApplicationContext</strong>中的源码，下面相关部分已贴出。</li>
<li>调用<strong>ContextCleanupListener.cleanupAttributes(event.getServletContext())</strong>，它将查找当前servlet上下文的所有实现<strong>org.springframework.beans.factory.DisposableBean</strong>接口的对象。之后，将调用它们的destroy()方法，以销毁不再使用的bean。</li>
</ul>
<p><strong>org.springframework.web.context.ContextLoaderListener:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Close the root web application context.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</div><div class="line">	closeWebApplicationContext(event.getServletContext());</div><div class="line">	ContextCleanupListener.cleanupAttributes(event.getServletContext());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.web.context.ContextLoader:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Close Spring's web application context for the given servlet context. If</div><div class="line">	 * the default &#123;<span class="doctag">@link</span> #loadParentContext(ServletContext)&#125; implementation,</div><div class="line">	 * which uses ContextSingletonBeanFactoryLocator, has loaded any shared</div><div class="line">	 * parent context, release one reference to that shared parent context.</div><div class="line">	 * &lt;p&gt;If overriding &#123;<span class="doctag">@link</span> #loadParentContext(ServletContext)&#125;, you may have</div><div class="line">	 * to override this method as well.</div><div class="line">	 * <span class="doctag">@param</span> servletContext the ServletContext that the WebApplicationContext runs in</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</div><div class="line">		servletContext.log(<span class="string">"Closing Spring root WebApplicationContext"</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</div><div class="line">				((ConfigurableWebApplicationContext) <span class="keyword">this</span>.context).close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			ClassLoader ccl = Thread.currentThread().getContextClassLoader();</div><div class="line">			<span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</div><div class="line">				currentContext = <span class="keyword">null</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="keyword">null</span>) &#123;</div><div class="line">				currentContextPerThread.remove(ccl);</div><div class="line">			&#125;</div><div class="line">			servletContext.removeAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.parentContextRef != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">this</span>.parentContextRef.release();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.context.support.AbstractApplicationContext:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * DisposableBean callback for destruction of this instance.</div><div class="line">	 * Only called when the ApplicationContext itself is running</div><div class="line">	 * as a bean in another BeanFactory or ApplicationContext,</div><div class="line">	 * which is rather unusual.</div><div class="line">	 * &lt;p&gt;The &#123;<span class="doctag">@code</span> close&#125; method is the native way to</div><div class="line">	 * shut down an ApplicationContext.</div><div class="line">	 * <span class="doctag">@see</span> #close()</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.access.SingletonBeanFactoryLocator</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Close this application context, destroying all beans in its bean factory.</div><div class="line">	 * &lt;p&gt;Delegates to &#123;<span class="doctag">@code</span> doClose()&#125; for the actual closing procedure.</div><div class="line">	 * Also removes a JVM shutdown hook, if registered, as it's not needed anymore.</div><div class="line">	 * <span class="doctag">@see</span> #doClose()</div><div class="line">	 * <span class="doctag">@see</span> #registerShutdownHook()</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			doClose();</div><div class="line">			<span class="comment">// If we registered a JVM shutdown hook, we don't need it anymore now:</span></div><div class="line">			<span class="comment">// We've already explicitly closed the context.</span></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.shutdownHook != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Runtime.getRuntime().removeShutdownHook(<span class="keyword">this</span>.shutdownHook);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (IllegalStateException ex) &#123;</div><div class="line">					<span class="comment">// ignore - VM is already shutting down</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Actually performs context closing: publishes a ContextClosedEvent and</div><div class="line">	 * destroys the singletons in the bean factory of this application context.</div><div class="line">	 * &lt;p&gt;Called by both &#123;<span class="doctag">@code</span> close()&#125; and a JVM shutdown hook, if any.</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.context.event.ContextClosedEvent</div><div class="line">	 * <span class="doctag">@see</span> #destroyBeans()</div><div class="line">	 * <span class="doctag">@see</span> #close()</div><div class="line">	 * <span class="doctag">@see</span> #registerShutdownHook()</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doClose</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.active.get() &amp;&amp; <span class="keyword">this</span>.closed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">				logger.info(<span class="string">"Closing "</span> + <span class="keyword">this</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			LiveBeansView.unregisterApplicationContext(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// Publish shutdown event.</span></div><div class="line">				publishEvent(<span class="keyword">new</span> ContextClosedEvent(<span class="keyword">this</span>));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">				logger.warn(<span class="string">"Exception thrown from ApplicationListener handling ContextClosedEvent"</span>, ex);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// Stop all Lifecycle beans, to avoid delays during individual destruction.</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				getLifecycleProcessor().onClose();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">				logger.warn(<span class="string">"Exception thrown from LifecycleProcessor on context close"</span>, ex);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// Destroy all cached singletons in the context's BeanFactory.</span></div><div class="line">			destroyBeans();</div><div class="line"></div><div class="line">			<span class="comment">// Close the state of this context itself.</span></div><div class="line">			closeBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// Let subclasses do some final clean-up if they wish...</span></div><div class="line">			onClose();</div><div class="line"></div><div class="line">			<span class="keyword">this</span>.active.set(<span class="keyword">false</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Template method for destroying all beans that this context manages.</div><div class="line">	 * The default implementation destroy all cached singletons in this context,</div><div class="line">	 * invoking &#123;<span class="doctag">@code</span> DisposableBean.destroy()&#125; and/or the specified</div><div class="line">	 * "destroy-method".</div><div class="line">	 * &lt;p&gt;Can be overridden to add context-specific bean destruction steps</div><div class="line">	 * right before or right after standard singleton destruction,</div><div class="line">	 * while the context's BeanFactory is still active.</div><div class="line">	 * <span class="doctag">@see</span> #getBeanFactory()</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.config.ConfigurableBeanFactory#destroySingletons()</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">destroyBeans</span><span class="params">()</span> </span>&#123;</div><div class="line">		getBeanFactory().destroySingletons();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Template method which can be overridden to add context-specific shutdown work.</div><div class="line">	 * The default implementation is empty.</div><div class="line">	 * &lt;p&gt;Called at the end of &#123;<span class="doctag">@link</span> #doClose&#125;'s shutdown procedure, after</div><div class="line">	 * this context's BeanFactory has been closed. If custom shutdown logic</div><div class="line">	 * needs to execute while the BeanFactory is still active, override</div><div class="line">	 * the &#123;<span class="doctag">@link</span> #destroyBeans()&#125; method instead.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// For subclasses: do nothing by default.</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="在Spring-Web应用程序中实现上下文加载程序"><a href="#在Spring-Web应用程序中实现上下文加载程序" class="headerlink" title="在Spring Web应用程序中实现上下文加载程序"></a>在Spring Web应用程序中实现上下文加载程序</h2><p>想象一下，你希望在系统的所有用户之间共享一个信息。你可以用传统的方式做到这一点，也可以使用你定义的上下文加载器。我们通过写一些简单的代码来达到这个目的。还有一个想要实现的功能会涉及多个上下文。我们的应用程序将同时处理<code>guest</code>和<code>connected</code>两种形式(请同时看下面源码)。可以看到他们的网页的URL匹配规则不一样。使用connected的用户将能够访问与guest规则下以.chtml扩展名结尾的相同的页面，也就是所谓的交集。需要说的是，他们不会共享相同的信息(两个不一样的上下文当然不会一样了)。还不懂的话看下面源码，对于这两者，我们将分别 指定两个servlet上下文。你会看到，因为它，访问connected用户将不会与访问guest共享相同的bean。</p>
<p>我们将从<code>web.xml</code>文件开始,请对比上面说的:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--?xml version="1.0" encoding="UTF-8"?--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.4"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemalocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/guest-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">--</span> <span class="attr">guest</span> <span class="attr">is</span> <span class="attr">the</span> <span class="attr">default</span> <span class="attr">servlet</span> <span class="attr">--</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>guest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></div><div class="line">    /WEB-INF/applicationContext.xml</div><div class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">--</span> <span class="attr">Customized</span> <span class="attr">listener</span> <span class="attr">which</span> <span class="attr">will</span> <span class="attr">put</span> <span class="attr">some</span> <span class="attr">personnalized</span> <span class="attr">data</span> <span class="attr">into</span> <span class="attr">servlet</span>'<span class="attr">s</span> <span class="attr">context</span> <span class="attr">--</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.mysite.servlet.CustomizedContextLoader<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>connected<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/connected-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>connected<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>**.chtml<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>两个指定的servlet的bean配置文件几乎相同。唯一的区别是connected-servlet.xml包含一个没有与guest servlet共享的bean的定义。这个bean的名字是secretData:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secretData"</span> <span class="attr">class</span>=<span class="string">"com.migo.secret.SecretData"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"question"</span> <span class="attr">value</span>=<span class="string">"How old are you ?"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"answer"</span> <span class="attr">value</span>=<span class="string">"33"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo"</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>神秘豆的内容主要由setter和toString方法组成:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecretData</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> String question;</div><div class="line">  <span class="keyword">private</span> String answer;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuestion</span><span class="params">(String question)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.question = question;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnswer</span><span class="params">(String answer)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.answer = answer;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"SecretData &#123;question: "</span>+<span class="keyword">this</span>.question+<span class="string">", answer: "</span>+<span class="keyword">this</span>.answer+<span class="string">"&#125;"</span>;</div><div class="line">  &#125;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他Java代码也很简单。在<code>CustomizedContextLoader</code>中，我们重写<code>contextInitialized</code>方法来放置共享<code>servlet</code>的上下文属性:名字叫<code>webappVersion</code>。该属性是一个随机数，用于证明根应用程序上下文的加载程序仅被调用一次:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizedContextLoader</span> <span class="keyword">extends</span> <span class="title">ContextLoaderListener</span>  </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"[CustomizedContextLoader] Loading context"</span>);</div><div class="line">    <span class="comment">// this value could be read from data source, but for the simplicity reasons, we put it statically</span></div><div class="line">    <span class="comment">// number is random because we want to prove that the root context is loaded only once</span></div><div class="line">    Random random = <span class="keyword">new</span> Random();</div><div class="line">    <span class="keyword">int</span> version = random.nextInt(<span class="number">100001</span>);</div><div class="line">    System.out.println(<span class="string">"Version set into servlet's context :"</span>+version);</div><div class="line">    event.getServletContext().setAttribute(<span class="string">"webappVersion"</span>, version);</div><div class="line">    <span class="keyword">super</span>.contextInitialized(event);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后，我们传递给用来处理访问网址的<code>TestController</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span>    </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/test.chtml"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Webapp version from servlet's context :"</span>+request.getServletContext().getAttribute(<span class="string">"webappVersion"</span>));</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Found secretData bean :"</span>+context.getBean(<span class="string">"secretData"</span>));</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/test.html"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">guestTest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Webapp version from servlet's context :"</span>+request.getServletContext().getAttribute(<span class="string">"webappVersion"</span>));</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Found secretData bean :"</span>+context.getBean(<span class="string">"secretData"</span>));</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试的时候，首先输入<a href="http://localhost:8080/test.chtml，然后输入http://localhost:8080/test.html。然后通过查看日志" target="_blank" rel="external">http://localhost:8080/test.chtml，然后输入http://localhost:8080/test.html。然后通过查看日志</a>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">[CustomizedContextLoader] Loading context</div><div class="line">Version set into servlet's context :38023</div><div class="line">// ... test.chtml</div><div class="line">[TestController] Webapp version from servlet's context :38023</div><div class="line">[TestController] Found secretData bean :SecretData &#123;question: How old are you ?, answer: 33&#125;</div><div class="line">// ... test.html</div><div class="line">[TestController] Webapp version from servlet's context :38023</div><div class="line">3 avr. 2014 14:01:02 org.apache.catalina.core.StandardWrapperValve invoke</div><div class="line">GRAVE: Servlet.service() for servlet [guestServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'secretData' is defined] with root cause</div><div class="line">org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'secretData' is defined</div><div class="line">	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:638)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1159)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:282)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:273)</div><div class="line">  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)</div><div class="line">  at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:973)</div><div class="line">  at com.mysite.controller.TestController.guestTest(TestController.java:114)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">  at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">  at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</div><div class="line">  at java.lang.reflect.Method.invoke(Unknown Source)</div><div class="line">  at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:214)</div><div class="line">  at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)</div><div class="line">  at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)</div><div class="line">  at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:748)</div><div class="line">  at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)</div><div class="line">  at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)</div><div class="line">  at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945)</div><div class="line">  at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)</div><div class="line">  at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931)</div><div class="line">  at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:822)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:668)</div><div class="line">  at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:770)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</div><div class="line">  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)</div><div class="line">  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:164)</div><div class="line">  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:462)</div><div class="line">  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)</div><div class="line">  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)</div><div class="line">  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:562)</div><div class="line">  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)</div><div class="line">  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:395)</div><div class="line">  at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:250)</div><div class="line">  at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:188)</div><div class="line">  at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</div><div class="line">  at java.lang.Thread.run(Unknown Source)</div></pre></td></tr></table></figure>
<p>首先，将一个信息(“Version set into servlet’s context :”+version)放在servlet上下文中，并由两个servlet上下文继承。第二点是bean的可见性。<code>Guest</code>的<code>servlet</code>没有看到<code>secretData bean</code>，因为它仅在<code>connected</code> (connected-servlet.xml)的配置中被定义。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一部分涉及了这个加载器的两个主要角色:将根Web应用程序上下文(<code>Root WebApplicationContext</code>)绑定到调度程序特定的上下文中并自动创建上下文。接下来，我们分析了关于上下文加载程序的代码的要点所涉及的细节，如所实现的接口和主要方法的细节实现。最后一部分是我们自定义扩展本地上下文加载器，然后对bean和servlet的属性继承方面进行一些测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的Context-loader&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的Context-loader&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的Context loader&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的Context loader&lt;/h1&gt;&lt;p&gt;我们已经知道，应用程序上下文是Spring管理的bean所在的容器。但是我们依然要问一个问题:这个上下文是如何创建的？那么在这篇文章中我们来探讨这个问题。&lt;/p&gt;
&lt;p&gt;在第一部分中，会说下在&lt;a href=&quot;https://muyinchen.github.io/2017/09/08/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/&quot;&gt;Spring的应用程序上下文中&lt;/a&gt;所谓的&lt;strong&gt;上下文加载器(context loader)&lt;/strong&gt;是什么。在第二部分，我们会讨论这个加载器的代码细节。最后一部分，老规矩，写我们自己的一个自定义的loader。在继续之前，需要说一下，loader(加载器) 将根据web application和dispatcher servlet来结合进行分析。其实这也是很多人一碰到源码就像无头苍蝇，不知道从何而起了，刚开始放下所有，从大体去思考该如何入手,这里对设计模式了解就很重要了，还有，源码的类注释很重要，不多说，接着走。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring中的应用上下文</title>
    <link href="https://muyinchen.github.io/2017/09/08/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://muyinchen.github.io/2017/09/08/Spring5源码解析-Spring中的应用上下文/</id>
    <published>2017-09-08T08:49:39.056Z</published>
    <updated>2017-09-11T11:49:59.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring中的应用上下文"><a href="#Spring5源码解析-Spring中的应用上下文" class="headerlink" title="Spring5源码解析-Spring中的应用上下文"></a>Spring5源码解析-Spring中的应用上下文</h1><p>之前讲到过，Spring中的 beans生活(用这俩字觉得更形象具体)在其应用程序的上下文环境中。在本文中，我们将详细介绍应用程序上下文,另外此篇同样是<a href="https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/">由域联系到的逃逸分析</a>的关于Spring容器的续篇。</p>
<p>关于<a href="https://muyinchen.github.io/2017/08/23/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@Autowired/">Spring5源码解析-@Autowired</a>这篇文章讲了通过<code>@Autowired</code>注解进行依赖注入。这一次我们来探讨<strong>应用程序上下文(application context)</strong>的概念。在第一部分中，我们来看看所有Spring管理的bean生活在什么样的环境中。在第二部分，来分析下到负责上下文管理的类。在最后一部分中，我们来进行一些实践操作。<br><a id="more"></a></p>
<h2 id="什么是Spring的应用程序上下文？"><a href="#什么是Spring的应用程序上下文？" class="headerlink" title="什么是Spring的应用程序上下文？"></a>什么是Spring的应用程序上下文？</h2><p>众所周知，Spring管理的这些类被称为bean，并且生活在Spring容器中。bean处理程序的最基本实现是<strong>bean factory</strong>。作为<strong>org.springframework.beans.factory.BeanFactory</strong>接口的<strong>实现类</strong>，这是一个初始化，配置和管理bean的容器。但通常在Spring应用程序中仅使用<code>BeanFactory</code>是不够的。它出现在<strong>应用程序上下文中</strong>。</p>
<p>应用程序上下文(Application context)是一种面向企业化(<code>其实Spring文档里也有面向企业这一说，不过这不就是企业里流水线的工厂里才能有的东西么</code>)的bean工厂。作为标准bean工厂，它是bean class生活的空间。但与标准bean工厂不同，应用程序上下文提供了一个补充企业层(也就是通用的东西了，比如企业里的胸牌，服装等)。又迷糊了吧，举个例子 :例如，通过提供国际化，转换服务或事件传播，使我们省去很多麻烦去亲自处理。通常，应用程序上下文优于bean工厂。但它的唯一缺点是内存消耗比bean工厂大，出现这种情况是由于补充的服务。如果内存的使用对于你的程序要求非常苛刻(例如在applet或移动环境中)，请考虑更多使用bean factory。否则，在更标准的应用程序中，应使用应用程序上下文(application context)。</p>
<h2 id="Spring的应用程序上下文类"><a href="#Spring的应用程序上下文类" class="headerlink" title="Spring的应用程序上下文类"></a>Spring的应用程序上下文类</h2><p>想要了解Spring中应用程序上下文，关键部分就是<strong>org.springframework.context.ApplicationContext</strong>接口。它扩展了一些其他接口: </p>
<ul>
<li><strong>org.springframework.core.env.EnvironmentCapable</strong>:用于标记对象来对外暴露自己说我实现了<strong>Environment</strong>接口。根据这个接口的注释可以知道，它主要用于完成类型的检查。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Interface indicating a component that contains and exposes an &#123;<span class="doctag">@link</span> Environment&#125; reference.</div><div class="line"> *  注释说了很清晰明了了，就不多废话了</div><div class="line"> * &lt;p&gt;All Spring application contexts are EnvironmentCapable, and the interface is used primarily</div><div class="line"> * for performing &#123;<span class="doctag">@code</span> instanceof&#125; checks in framework methods that accept BeanFactory</div><div class="line"> * instances that may or may not actually be ApplicationContext instances in order to interact</div><div class="line"> * with the environment if indeed it is available.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;As mentioned, &#123;<span class="doctag">@link</span> org.springframework.context.ApplicationContext ApplicationContext&#125;</div><div class="line"> * extends EnvironmentCapable, and thus exposes a &#123;<span class="doctag">@link</span> #getEnvironment()&#125; method; however,</div><div class="line"> * &#123;<span class="doctag">@link</span> org.springframework.context.ConfigurableApplicationContext ConfigurableApplicationContext&#125;</div><div class="line"> * redefines &#123;<span class="doctag">@link</span> org.springframework.context.ConfigurableApplicationContext#getEnvironment</div><div class="line"> * getEnvironment()&#125; and narrows the signature to return a &#123;<span class="doctag">@link</span> ConfigurableEnvironment&#125;.</div><div class="line"> * The effect is that an Environment object is 'read-only' until it is being accessed from</div><div class="line"> * a ConfigurableApplicationContext, at which point it too may be configured.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Chris Beams</div><div class="line"> * <span class="doctag">@since</span> 3.1</div><div class="line"> * <span class="doctag">@see</span> Environment</div><div class="line"> * <span class="doctag">@see</span> ConfigurableEnvironment</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.ConfigurableApplicationContext#getEnvironment()</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnvironmentCapable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return the &#123;<span class="doctag">@link</span> Environment&#125; associated with this component</div><div class="line">	 * (may be &#123;<span class="doctag">@code</span> null&#125; or a default environment).</div><div class="line">	 */</div><div class="line">	<span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>org.springframework.beans.factory.ListableBeanFactory</strong>:通过继承该interface可以列出所有bean，也可以只列出与预期类型相对应的bean。 </li>
<li><strong>org.springframework.beans.factory.HierarchicalBeanFactory</strong>:支持分层bean的管理。 </li>
<li><strong>org.springframework.context.MessageSource</strong>:用来解决消息支持国际化。 </li>
<li><strong>org.springframework.context.ApplicationEventPublisher</strong>:通过该接口，可以允许通知所有类来监听到某些应用程序上下文事件。 </li>
<li><strong>org.springframework.core.io.support.ResourcePatternResolver</strong>:是一个有助于将资源地址(例如:classpath:/WEB-INF/web.xml)解析到<strong>org.springframework.core.io.Resource</strong>对象中的策略接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Central interface to provide configuration for an application.</div><div class="line"> * This is read-only while the application is running, but may be</div><div class="line"> * reloaded if the implementation supports this.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;An ApplicationContext provides:</div><div class="line"> * &lt;ul&gt;  请看所扩展相关各个接口功能的描述</div><div class="line"> * &lt;li&gt;Bean factory methods for accessing application components.</div><div class="line"> * Inherited from &#123;<span class="doctag">@link</span> org.springframework.beans.factory.ListableBeanFactory&#125;.</div><div class="line"> * &lt;li&gt;The ability to load file resources in a generic fashion.</div><div class="line"> * Inherited from the &#123;<span class="doctag">@link</span> org.springframework.core.io.ResourceLoader&#125; interface.</div><div class="line"> * &lt;li&gt;The ability to publish events to registered listeners.</div><div class="line"> * Inherited from the &#123;<span class="doctag">@link</span> ApplicationEventPublisher&#125; interface.</div><div class="line"> * &lt;li&gt;The ability to resolve messages, supporting internationalization.</div><div class="line"> * Inherited from the &#123;<span class="doctag">@link</span> MessageSource&#125; interface.</div><div class="line"> * &lt;li&gt;Inheritance from a parent context. Definitions in a descendant context</div><div class="line"> * will always take priority. This means, for example, that a single parent</div><div class="line"> * context can be used by an entire web application, while each servlet has</div><div class="line"> * its own child context that is independent of that of any other servlet.</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> *</div><div class="line"> * &lt;p&gt;In addition to standard &#123;<span class="doctag">@link</span> org.springframework.beans.factory.BeanFactory&#125;</div><div class="line"> * lifecycle capabilities, ApplicationContext implementations detect and invoke</div><div class="line"> * &#123;<span class="doctag">@link</span> ApplicationContextAware&#125; beans as well as &#123;<span class="doctag">@link</span> ResourceLoaderAware&#125;,</div><div class="line"> * &#123;<span class="doctag">@link</span> ApplicationEventPublisherAware&#125; and &#123;<span class="doctag">@link</span> MessageSourceAware&#125; beans.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Rod Johnson</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@see</span> ConfigurableApplicationContext</div><div class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.BeanFactory</div><div class="line"> * <span class="doctag">@see</span> org.springframework.core.io.ResourceLoader</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">EnvironmentCapable</span>, <span class="title">ListableBeanFactory</span>, <span class="title">HierarchicalBeanFactory</span>,</span></div><div class="line">		<span class="title">MessageSource</span>, <span class="title">ApplicationEventPublisher</span>, <span class="title">ResourcePatternResolver</span> &#123;</div></pre></td></tr></table></figure>
<p>对于我们来说，实现这些接口使应用程序上下文比一个简单的bean工厂更有用。我们通过<strong>org.springframework.web.context.support.XmlWebApplicationContext</strong>这个实现类来看其在Web应用程序中使用。此类扩展了同一个包下<code>AbstractRefreshableWebApplicationContext</code>这个抽象类。</p>
<p><code>XmlWebApplicationContext</code>实现了<code>AbstractRefreshableApplicationContext</code>中的抽象方法<code>loadBeanDefinitions</code>，用于读取所有bean。从这个方法实现，可以看出，所有的bean都是通过<strong>org.springframework.beans.factory.xml.XmlBeanDefinitionReader</strong>从XML文件读取的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Loads the bean definitions via an XmlBeanDefinitionReader.</div><div class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader</div><div class="line"> * <span class="doctag">@see</span> #initBeanDefinitionReader</div><div class="line"> * <span class="doctag">@see</span> #loadBeanDefinitions</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</div><div class="line">	<span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></div><div class="line">     	<span class="comment">//只能说Spring源码注释的太详细了，英文确实很重要</span></div><div class="line">	XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</div><div class="line"></div><div class="line">	<span class="comment">// Configure the bean definition reader with this context's</span></div><div class="line">	<span class="comment">// resource loading environment.</span></div><div class="line">	beanDefinitionReader.setEnvironment(getEnvironment());</div><div class="line">	beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</div><div class="line">	beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">	<span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></div><div class="line">	<span class="comment">// then proceed with actually loading the bean definitions.</span></div><div class="line">	initBeanDefinitionReader(beanDefinitionReader);</div><div class="line">	loadBeanDefinitions(beanDefinitionReader);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一个有趣的方法，继承自<code>AbstractRefreshableWebApplicationContext</code>，是<code>postProcessBeanFactory</code>。它在加载所有bean定义之后并在其实例化之前被调用(<code>postProcess</code>就是bean构造函数之后调用即实例化之前)。<code>AbstractRefreshableWebApplicationContext</code>使用它来注册请求和会话作用域以及环境bean(具体看下面源码)。另外，这个抽象类实现了<code>ConfigurableWebApplicationContext</code>接口，这样一来就可以定义<code>servlet</code>的上下文和一些本地的配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Register request/session scopes, a &#123;<span class="doctag">@link</span> ServletContextAwareProcessor&#125;, etc.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ServletContextAwareProcessor(<span class="keyword">this</span>.servletContext, <span class="keyword">this</span>.servletConfig));</div><div class="line">		beanFactory.ignoreDependencyInterface(ServletContextAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ServletConfigAware.class);</div><div class="line"></div><div class="line">		WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, <span class="keyword">this</span>.servletContext);</div><div class="line">		WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, <span class="keyword">this</span>.servletContext, <span class="keyword">this</span>.servletConfig);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.servletContext;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletConfig</span><span class="params">(@Nullable ServletConfig servletConfig)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.servletConfig = servletConfig;</div><div class="line">		<span class="keyword">if</span> (servletConfig != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.servletContext == <span class="keyword">null</span>) &#123;</div><div class="line">			setServletContext(servletConfig.getServletContext());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.servletConfig;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">	 * &lt;p&gt;Replace &#123;<span class="doctag">@code</span> Servlet&#125;-related property sources.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initPropertySources</span><span class="params">()</span> </span>&#123;</div><div class="line">		ConfigurableEnvironment env = getEnvironment();</div><div class="line">		<span class="keyword">if</span> (env <span class="keyword">instanceof</span> ConfigurableWebEnvironment) &#123;</div><div class="line">			((ConfigurableWebEnvironment) env).initPropertySources(<span class="keyword">this</span>.servletContext, <span class="keyword">this</span>.servletConfig);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>由<code>XmlWebApplicationContext</code>间接继承的另一个抽象类是<code>AbstractRefreshableApplicationContext</code>。它有几种处理上下文刷新的方法。处理事件通知的类是<strong>org.springframework.context.support.AbstractApplicationContext</strong>，由<code>XmlWebApplicationContext</code>间接继承。它包含一个将事件(<code>ApplicationEvent</code>类的实例)发送到所有侦听对象的<code>publishEvent</code>方法。</p>
<p>但是我们的重中之重是处理生命周期，是<code>AbstractApplicationContext</code>类的<code>public void refresh() throws BeansException, IllegalStateException</code>方法来做到的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">			<span class="comment">// Prepare this context for refreshing.</span></div><div class="line">			prepareRefresh();</div><div class="line"></div><div class="line">			<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></div><div class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">			<span class="comment">// Prepare the bean factory for use in this context.</span></div><div class="line">			prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></div><div class="line">				postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Invoke factory processors registered as beans in the context.</span></div><div class="line">				invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Register bean processors that intercept bean creation.</span></div><div class="line">				registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Initialize message source for this context.</span></div><div class="line">				initMessageSource();</div><div class="line"></div><div class="line">				<span class="comment">// Initialize event multicaster for this context.</span></div><div class="line">				initApplicationEventMulticaster();</div><div class="line"></div><div class="line">				<span class="comment">// Initialize other special beans in specific context subclasses.</span></div><div class="line">				onRefresh();</div><div class="line"></div><div class="line">				<span class="comment">// Check for listener beans and register them.</span></div><div class="line">				registerListeners();</div><div class="line"></div><div class="line">				<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></div><div class="line">				finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">				<span class="comment">// Last step: publish corresponding event.</span></div><div class="line">				finishRefresh();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">					logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</div><div class="line">							<span class="string">"cancelling refresh attempt: "</span> + ex);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></div><div class="line">				destroyBeans();</div><div class="line"></div><div class="line">				<span class="comment">// Reset 'active' flag.</span></div><div class="line">				cancelRefresh(ex);</div><div class="line"></div><div class="line">				<span class="comment">// Propagate exception to caller.</span></div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">finally</span> &#123;</div><div class="line">				<span class="comment">// Reset common introspection caches in Spring's core, since we</span></div><div class="line">				<span class="comment">// might not ever need metadata for singleton beans anymore...</span></div><div class="line">				resetCommonCaches();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>通过阅读源码，我们可以注意到以下操作:</p>
<ol>
<li>上下文准备刷新(属性源初始化)</li>
<li>bean工厂准备好用来一系列操作(classloader定义，基本bean注册)</li>
<li>bean后置处理(postProcessBeanFactory方法)被调用</li>
<li>消息源(消息管理)被初始化</li>
<li>event multicaster初始化(event multicaster是将事件分派到合适的侦听对象的对象)</li>
<li>在特定的上下文子类中初始化其他特殊的bean。</li>
<li>监听器的注册</li>
<li>所有剩余的bean的实例化(例如:转换服务)</li>
</ol>
<p>在非Web环境中，我们可以使用标准应用程序上下文，如<code>FileSystemXmlApplicationContext</code>，<code>ClassPathXmlApplicationContext</code>或<code>GenericXmlApplicationContext</code>。</p>
<h2 id="关于Spring的应用程序环境的一些实践"><a href="#关于Spring的应用程序环境的一些实践" class="headerlink" title="关于Spring的应用程序环境的一些实践"></a>关于Spring的应用程序环境的一些实践</h2><p>关于此 部分，我们将看到:如何在一个控制器中获得一个上下文，查找得到一些bean配置并来解析一个消息。在进入正式的代码之前，我们需要做一些上下文的配置:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- activate configuration by annotations, for example enable @Controller annotation --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- indicates where Spring should looking for application services as services, controllers or components, annotated respectively with @Service, @Controller and @Component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.mysite.test"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- registers RequestMappingHandlerMapping, RequestMappingHandlerAdapter and ExceptionHandlerExceptionResolver; thanks to it, Spring can resolve requests annotated with @RequestMapping and @ExceptionHandler --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- represents a bean which will resolve the messages --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span> <span class="attr">id</span>=<span class="string">"messageSource"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:messages<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:errors<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fallbackToSystemLocale"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过上面的配置，我们可以编写一个测试controller和一个类ApplicationContextProvider，它将保存一个应用程序上下文实例并按需返回:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// controller, TestController.java</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Received application context :"</span>+context);</div><div class="line">    ApplicationContext providerContext = ApplicationContextProvider.getApplicationContext();</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Provider context is :"</span>+providerContext);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.context == providerContext) &#123;</div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Both contextes are the same"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    LOGGER.debug(<span class="string">"[TestController] Message is :"</span>+<span class="keyword">this</span>.context.getMessage(<span class="string">"testMessage"</span>, <span class="keyword">new</span> Object[] &#123;&#125;, Locale.ENGLISH));</div><div class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// context provider, ApplicationContextProvider.java</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextProvider</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext context;</div><div class="line"> </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext c)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">    context = c;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> context;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ApplicationContext</code>实例由<code>Spring</code>管理。这就是为什么我们可以使用<code>@Autowired</code>注解将其注入另一个Spring管理的bean(在我们的例子中是一个controller )。这是通过注入的从一个bean得到上下文第一种方法。</p>
<p>第二种方法是使<code>ApplicationContextProvider</code>类实现<strong>org.springframework.context.ApplicationContextAware</strong>接口。这里需要说一下，该接口实现后可以获取当前正在运行的<code>ApplicationContext</code>的这个事件的通知。所以实现类必须实现这个方法:<strong>void setApplicationContext(ApplicationContext applicationContext)throws BeansException</strong>。该方法允许设置当前的<code>ApplicationContext</code>实例并用来使用。上下文通过<strong>org.springframework.context.support.ApplicationContextAwareProcessor</strong>传递给<code>ApplicationContextAware</code>实现，在<code>AbstractApplicationContext</code>类中注册(见下面源码)。需要注意的是，<code>ApplicationcontextAwareProcessor</code>也用于设置bean工厂或应用程序的上下文环境，见下面此类源码中的<code>private final StringValueResolver embeddedValueResolver;</code>的<code>StringValueResolver</code>接口的实现。可以知道，要实现这两种功能，这些类必须分别从<strong>org.springframework.context</strong>包中实现<code>EmbeddedValueResolverAware</code>和<code>EnvironmentAware</code>接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Configure the factory's standard context characteristics,</div><div class="line">	 * such as the context's ClassLoader and post-processors.</div><div class="line">	 * <span class="doctag">@param</span> beanFactory the BeanFactory to configure</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">		<span class="comment">// Tell the internal bean factory to use the context's class loader etc.</span></div><div class="line">		beanFactory.setBeanClassLoader(getClassLoader());</div><div class="line">		beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</div><div class="line">		beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</div><div class="line"></div><div class="line">		<span class="comment">// Configure the bean factory with context callbacks.</span></div><div class="line">      	<span class="comment">//将applicationContext实例扔进去，见下面对ApplicationContextAwareProcessor的源码注释</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</div><div class="line">		beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</div><div class="line">		beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</div><div class="line"></div><div class="line">		<span class="comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></div><div class="line">		<span class="comment">// MessageSource registered (and found for autowiring) as a bean.</span></div><div class="line">		beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</div><div class="line">		beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</div><div class="line">		beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">		<span class="comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></div><div class="line">		beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">		<span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></div><div class="line">		<span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line">			<span class="comment">// Set a temporary ClassLoader for type matching.</span></div><div class="line">			beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Register default environment beans.</span></div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">			beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.config.BeanPostProcessor&#125;</div><div class="line"> * 看下面这句注释:</div><div class="line"> * implementation that passes the ApplicationContext to beans that</div><div class="line"> * implement the &#123;<span class="doctag">@link</span> EnvironmentAware&#125;, &#123;<span class="doctag">@link</span> EmbeddedValueResolverAware&#125;,</div><div class="line"> * &#123;<span class="doctag">@link</span> ResourceLoaderAware&#125;, &#123;<span class="doctag">@link</span> ApplicationEventPublisherAware&#125;,</div><div class="line"> * &#123;<span class="doctag">@link</span> MessageSourceAware&#125; and/or &#123;<span class="doctag">@link</span> ApplicationContextAware&#125; interfaces.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Implemented interfaces are satisfied in order of their mention above.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Application contexts will automatically register this with their</div><div class="line"> * underlying bean factory. Applications do not use this directly.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@author</span> Costin Leau</div><div class="line"> * <span class="doctag">@author</span> Chris Beams</div><div class="line"> * <span class="doctag">@since</span> 10.10.2003</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.EnvironmentAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.EmbeddedValueResolverAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.ResourceLoaderAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.ApplicationEventPublisherAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.MessageSourceAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.ApplicationContextAware</div><div class="line"> * <span class="doctag">@see</span> org.springframework.context.support.AbstractApplicationContext#refresh()</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextAwareProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ConfigurableApplicationContext applicationContext;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> StringValueResolver embeddedValueResolver;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new ApplicationContextAwareProcessor for the given context.</div><div class="line">	 * 要创建此实例，必须要有ConfigurableApplicationContext的上下文实例才行</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ApplicationContextAwareProcessor</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.applicationContext = applicationContext;</div><div class="line">		<span class="keyword">this</span>.embeddedValueResolver = <span class="keyword">new</span> EmbeddedValueResolver(applicationContext.getBeanFactory());</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		AccessControlContext acc = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp;</div><div class="line">				(bean <span class="keyword">instanceof</span> EnvironmentAware || bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware ||</div><div class="line">						bean <span class="keyword">instanceof</span> ResourceLoaderAware || bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware ||</div><div class="line">						bean <span class="keyword">instanceof</span> MessageSourceAware || bean <span class="keyword">instanceof</span> ApplicationContextAware)) &#123;</div><div class="line">			acc = <span class="keyword">this</span>.applicationContext.getBeanFactory().getAccessControlContext();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (acc != <span class="keyword">null</span>) &#123;</div><div class="line">			AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</div><div class="line">				invokeAwareInterfaces(bean);</div><div class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">			&#125;, acc);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			invokeAwareInterfaces(bean);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> bean;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在我们的例子中，对于<code>ApplicationContextAware</code>的实现是只是一个简单的上下文提供者。但是在别的地方，我们定义的这个provider可能是用来得到上下文资源的对象。<strong>这就是关于获取应用程序上下文的两种方式</strong>。</p>
<p>最后,我们通过一个方法来使用context(上下文)的getMessage方法来对消息解析。在我们的<code>message_en.properties</code>文件中，可以事先声明消息的模板:<strong>testMessage =It’s our test message with content。</strong>然后我们会在日志文件中看到相应的输出。</p>
<p>顺便说一下，从<code>ApplicationContextProvider</code>获得的对象和<code>@Autowired</code>的对象之间的上下文是相同的:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[TestController] Received application context :Root WebApplicationContext: startup date [Wed Apr <span class="number">02</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">23</span> CEST <span class="number">2014</span>]; root of context hierarchy</div><div class="line">[TestController] Provider context is :Root WebApplicationContext: startup date [Wed Apr <span class="number">02</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">23</span> CEST <span class="number">2014</span>]; root of context hierarchy</div><div class="line">[TestController] All contexts are the same</div><div class="line">[TestController] Message is :It<span class="string">'s our test message with content.</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring中的应用上下文&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring中的应用上下文&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring中的应用上下文&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring中的应用上下文&lt;/h1&gt;&lt;p&gt;之前讲到过，Spring中的 beans生活(用这俩字觉得更形象具体)在其应用程序的上下文环境中。在本文中，我们将详细介绍应用程序上下文,另外此篇同样是&lt;a href=&quot;https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/&quot;&gt;由域联系到的逃逸分析&lt;/a&gt;的关于Spring容器的续篇。&lt;/p&gt;
&lt;p&gt;关于&lt;a href=&quot;https://muyinchen.github.io/2017/08/23/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@Autowired/&quot;&gt;Spring5源码解析-@Autowired&lt;/a&gt;这篇文章讲了通过&lt;code&gt;@Autowired&lt;/code&gt;注解进行依赖注入。这一次我们来探讨&lt;strong&gt;应用程序上下文(application context)&lt;/strong&gt;的概念。在第一部分中，我们来看看所有Spring管理的bean生活在什么样的环境中。在第二部分，来分析下到负责上下文管理的类。在最后一部分中，我们来进行一些实践操作。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-Spring Web中的处理程序执行链</title>
    <link href="https://muyinchen.github.io/2017/08/28/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-Spring%20Web%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E9%93%BE/"/>
    <id>https://muyinchen.github.io/2017/08/28/Spring5源码解析-Spring Web中的处理程序执行链/</id>
    <published>2017-08-28T03:22:26.864Z</published>
    <updated>2017-09-13T05:59:08.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Spring-Web中的处理程序执行链"><a href="#Spring5源码解析-Spring-Web中的处理程序执行链" class="headerlink" title="Spring5源码解析-Spring Web中的处理程序执行链"></a>Spring5源码解析-Spring Web中的处理程序执行链</h1><blockquote>
<p>Spring的DispatcherServlet假如缺少几个关键元素将无法分派请求。其中最重要的一个是处理程序执行链。</p>
<p>在这篇文章中，我们把注意力放在<strong>处理程序执行链</strong>之上。老规矩，第一部分将介绍这个概念。第二部分把目光引入到Spring执行链的世界中。在最后一部分，我们将分析如何在Spring中利用之前自定义DispatcherServlet中实现一个自定义的处理程序执行链。</p>
</blockquote>
<a id="more"></a>
<h2 id="什么是Spring中的处理程序执行链？"><a href="#什么是Spring中的处理程序执行链？" class="headerlink" title="什么是Spring中的处理程序执行链？"></a>什么是Spring中的处理程序执行链？</h2><p>Spring中的处理程序执行链是一种由处理程序映射和处理程序拦截器(简单点说就是由谁来处理，处理之前和之后应该干点啥)组成的责任链设计模式。处理器映射器用于将当前请求与其专用的controller进行匹配。拦截器是用来在一些调度动作(如controller解析，视图渲染等)之前和之后所调用的对象。</p>
<p>我们所说的一个处理程序执行链是<code>dispatcher servlet</code>用来处理接收到的请求的一组元素。需要说的是，所有执行链调用都由<code>dispatcher servlet</code>类来进行。其实执行链只是一种容器(见源码): </p>
<ul>
<li>定义处理程序映射和拦截器 </li>
<li>定义在某些时刻应用所应该调度的方法(如处理程序适配器适配之后，<code>controller</code>的方法调用之后等等)</li>
</ul>
<h2 id="HandlerExecutionChain类"><a href="#HandlerExecutionChain类" class="headerlink" title="HandlerExecutionChain类"></a>HandlerExecutionChain类</h2><p>处理程序执行链由<strong>org.springframework.web.servlet.HandlerExecutionChain</strong>类表示。它的主要包含两个私有字段:<strong>Object handler</strong> 和 <strong>HandlerInterceptor[] interceptors</strong>,它们被用在请求的调度过程中。第一个包含用于查找处理程序适配器实例的处理程序对象。第二个是包含拦截器的数组，用来应用于处理过的请求(这里这么说是因为这是一条执行链，一个接一个来对这个请求进行处理)。</p>
<p>在<code>DispatcherServlet</code>类中，<code>HandlerExecutionChain</code>的查找通过<strong>protected HandlerExecutionChain getHandler(HttpServletRequest request)</strong>完成。它遍历所有可用的处理程序映射，并返回能够处理请求的第一个处理程序。</p>
<p>在<code>DispatcherServlet</code>与<code>HandlerExecutionChain</code>实例中要完成的第二件事是应用拦截器的前后调用。这是由DispatcherServlet的方法，如<code>applyPreHandle</code>，<code>applyPostHandle</code>，<code>applyAfterConcurrentHandlingStarted</code>和<code>triggerAfterCompletion</code>(关于后两者我会在后面专门写由Java并发编程到线程池到forkjoin到nio到netty这个系列来具体讲述的)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Handler execution chain, consisting of handler object and any handler interceptors.</div><div class="line"> * Returned by HandlerMapping's &#123;<span class="doctag">@link</span> HandlerMapping#getHandler&#125; method.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 20.06.2003</div><div class="line"> * <span class="doctag">@see</span> HandlerInterceptor</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(HandlerExecutionChain.class);</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object handler;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> HandlerInterceptor[] interceptors;</div><div class="line"></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="keyword">private</span> List&lt;HandlerInterceptor&gt; interceptorList;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> interceptorIndex = -<span class="number">1</span>;</div><div class="line">  </div><div class="line">  ...</div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * Trigger afterCompletion callbacks on the mapped HandlerInterceptors.</div><div class="line">	 * Will just invoke afterCompletion for all interceptors whose preHandle invocation</div><div class="line">	 * has successfully completed and returned true.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		HandlerInterceptor[] interceptors = getInterceptors();</div><div class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">				HandlerInterceptor interceptor = interceptors[i];</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					interceptor.afterCompletion(request, response, <span class="keyword">this</span>.handler, ex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (Throwable ex2) &#123;</div><div class="line">					logger.error(<span class="string">"HandlerInterceptor.afterCompletion threw exception"</span>, ex2);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">    <span class="comment">/**</span></div><div class="line">	 * Apply afterConcurrentHandlerStarted callback on mapped AsyncHandlerInterceptors.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">applyAfterConcurrentHandlingStarted</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</div><div class="line">		HandlerInterceptor[] interceptors = getInterceptors();</div><div class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">				<span class="keyword">if</span> (interceptors[i] <span class="keyword">instanceof</span> AsyncHandlerInterceptor) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i];</div><div class="line">						asyncInterceptor.afterConcurrentHandlingStarted(request, response, <span class="keyword">this</span>.handler);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">						logger.error(<span class="string">"Interceptor ["</span> + interceptors[i] + <span class="string">"] failed in afterConcurrentHandlingStarted"</span>, ex);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>org.springframework.web.servlet.DispatcherServlet</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Return the HandlerExecutionChain for this request.</div><div class="line">	 * &lt;p&gt;Tries all handler mappings in order.</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP request</div><div class="line">	 * <span class="doctag">@return</span> the HandlerExecutionChain, or &#123;<span class="doctag">@code</span> null&#125; if no handler could be found</div><div class="line">	 */</div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">					logger.trace(</div><div class="line">							<span class="string">"Testing handler map ["</span> + hm + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">				&#125;</div><div class="line">				HandlerExecutionChain handler = hm.getHandler(request);</div><div class="line">				<span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">return</span> handler;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">...</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		HttpServletRequest processedRequest = request;</div><div class="line">  		<span class="comment">//HandlerExecutionChain定义出来，做成函数内局部变量可以做到逃逸管理，和request请求做到用完即毁，提		//高性能，防止内存泄漏</span></div><div class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">			Exception dispatchException = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				processedRequest = checkMultipart(request);</div><div class="line">				multipartRequestParsed = (processedRequest != request);</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler for the current request.</span></div><div class="line">              	<span class="comment">//拿到执行链</span></div><div class="line">				mappedHandler = getHandler(processedRequest);</div><div class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</div><div class="line">					noHandlerFound(processedRequest, response);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler adapter for the current request.</span></div><div class="line">              	<span class="comment">//通过处理器找到相应的适配器，其实就是个拓展代理，参考之前我写的Spring设计模式</span></div><div class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></div><div class="line">				String method = request.getMethod();</div><div class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</div><div class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</div><div class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</div><div class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">						logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//提前批预处理</span></div><div class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Actually invoke the handler.</span></div><div class="line">              	<span class="comment">//执行核心处理</span></div><div class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">//默认视图渲染</span></div><div class="line">				applyDefaultViewName(processedRequest, mv);</div><div class="line">              	<span class="comment">//秋后算账</span></div><div class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				dispatchException = ex;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">				<span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></div><div class="line">				<span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></div><div class="line">				dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</div><div class="line">			&#125;</div><div class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler,</div><div class="line">					<span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></div><div class="line">              	<span class="comment">//如果是异步的话，不需要解释了吧，看上面英文</span></div><div class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></div><div class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</div><div class="line">					cleanupMultipart(processedRequest);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义处理程序执行链"><a href="#自定义处理程序执行链" class="headerlink" title="自定义处理程序执行链"></a>自定义处理程序执行链</h2><p>为了说明处理程序执行链的使用，我们将从关于<a href="https://muyinchen.github.io/2017/08/02/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AE%BASpring%20DispatcherServlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">Spring DispatcherServlet生命周期</a>的文章中拿到我们自定义的<code>dispatcher  servlet</code>类，并向其添加一个自定义的处理程序执行链。但是，无须深挖并使用<code>HandlerExecutionChain</code>中的所有<code>Spring</code>的类，我们来创建一个新的对象(<code>DumberHandlerExecutionChain</code>)，添加两个方法来调用拦截器，并在<code>DispatcherServlet</code>的类中使用它。请看下面编写的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// we start directly by doService method which handles incoming request</span></div><div class="line"><span class="comment">// retrieve execution chain and handler adapters adapted to received request</span></div><div class="line">DumberHandlerExecutionChain executionChain = <span class="keyword">new</span> DumberHandlerExecutionChain(getHandlerExecutionChain(request));</div><div class="line">System.out.println(<span class="string">"Working with following handler execution chain: "</span>+executionChain);</div><div class="line">HandlerAdapter adapter = getHandlerAdapter(executionChain.getHandler());</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (!executionChain.preHandle(request, response)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Some of defined interceptors weren't ivoked correctly."</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// handle the request and try to generate a ModelAndView instance</span></div><div class="line">ModelAndView modelView = adapter.handle(request, response, executionChain.getHandler());</div><div class="line"><span class="keyword">if</span> (modelView == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Handled ModelAndView can't be null (handled with adapter: "</span>+adapter+<span class="string">")"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!modelView.isReference()) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Only view models defined as references can be used in this servlet"</span>);</div><div class="line">&#125;</div><div class="line">executionChain.postHandle(request, response, modelView);</div></pre></td></tr></table></figure>
<p>只需要改变3行代码。第一个是<code>DumberHandlerExecutionChain</code>实例的定义，替换掉<code>HandlerExecutionChain</code>。第二个更改是<code>applyPreHandler</code>和<code>applyPostHandler</code>方法。这段代码这样来看的话好理解吧。我们来看看DumberHandlerExecutionChain类的定义:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DumberHandlerExecutionChain</span> <span class="keyword">extends</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DumberHandlerExecutionChain</span><span class="params">(HandlerExecutionChain chain)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(chain);</div><div class="line">        System.out.println(<span class="string">"Overriden constructor DumberHandlerExecutionChain invoked"</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (HandlerInterceptor interceptor : getInterceptors()) &#123;</div><div class="line">            System.out.println(<span class="string">"Running pre handler for :"</span>+interceptor);</div><div class="line">            <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.getHandler())) &#123;</div><div class="line">                System.out.println(<span class="string">"An error occured on calling handler for "</span>+interceptor);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ModelAndView viewModel)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span> (HandlerInterceptor interceptor : getInterceptors()) &#123;</div><div class="line">            interceptor.postHandle(request, response, <span class="keyword">this</span>.getHandler(), viewModel);</div><div class="line">            System.out.println(<span class="string">"Running post handler for :"</span>+interceptor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"DumberHandlerExecutionChain &#123;interceptors :"</span>+Arrays.asList(<span class="keyword">this</span>.getInterceptors())+<span class="string">", handler: "</span>+<span class="keyword">this</span>.getHandler()+<span class="string">"&#125;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它们是前面提到的两种方法:<code>preHandle</code>和<code>postHandle</code>。两者很相似。他们首先迭代所有可用的拦截器。区别在于第一个调用拦截器的<code>preHandle</code>方法和第二个拦截器的<code>postHandle</code>方法。第二个区别是结果。如果所有拦截器正确完成了操作，<code>preHandle</code>将返回true。<code>postHandle</code>不返回任何东西(这里和<code>HandlerExecutionChain</code>源码内相应的方法实现大致一样，但是做了逻辑上的简单处理达到咱们想要的效果即可)。</p>
<p>但这两种方法并不是这个类的核心。它最重要的地方是调用这个父类的构造函数:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. Invoked directly by super(chain) call</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(handler, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 2. Called directly by previous constructor</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandlerExecutionChain</span><span class="params">(Object handler, @Nullable HandlerInterceptor... interceptors)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerExecutionChain) &#123;</div><div class="line">			HandlerExecutionChain originalChain = (HandlerExecutionChain) handler;</div><div class="line">			<span class="keyword">this</span>.handler = originalChain.getHandler();</div><div class="line">			<span class="keyword">this</span>.interceptorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">			CollectionUtils.mergeArrayIntoCollection(originalChain.getInterceptors(), <span class="keyword">this</span>.interceptorList);</div><div class="line">			CollectionUtils.mergeArrayIntoCollection(interceptors, <span class="keyword">this</span>.interceptorList);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">this</span>.handler = handler;</div><div class="line">			<span class="keyword">this</span>.interceptors = interceptors;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>由上可以看到，通过<code>handler instanceof</code>检查，我们可以在<code>dispatcher servlet</code>中本地生成<code>HandlerExecutionChain</code>。我们不需要查找产生<code>HandlerExecutionChain</code>实例的处理程序映射(例如:<code>org.springframework.web.servlet.handler.AbstractHandlerMapping</code>或<code>org.springframework.web.servlet.handler.AbstractUrlHandlerMapping</code>的实现类)并覆盖重写现有代码。而不是使用这些复杂的步骤，我们只需简单地将<code>HandlerExecutionChain</code>的实例传递给我们自定义的执行链类的构造函数即可。</p>
<p>完成上面的工作，接下来，你可以在日志中看到以下信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Overriden constructor DumberHandlerExecutionChain invoked</div><div class="line"><span class="comment">//tag1</span></div><div class="line">Working with following handler execution chain: DumberHandlerExecutionChain &#123;interceptors :[org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor@<span class="number">77f</span>6d2e3, com.migo.interceptors.LotteryInterceptor@<span class="number">6</span>d8f729c], handler: <span class="keyword">public</span> java.lang.String com.migo.controller.TestController.test(javax.servlet.http.HttpServletRequest)&#125;</div><div class="line"><span class="comment">//pre</span></div><div class="line">Running pre handler <span class="keyword">for</span> :org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor@<span class="number">77f</span>6d2e3</div><div class="line">Running pre handler <span class="keyword">for</span> :com.migo.interceptors.LotteryInterceptor@<span class="number">6</span>d8f729c</div><div class="line">[LotteryInterceptor] preHandle</div><div class="line"><span class="comment">//excute Controller</span></div><div class="line">Controller asks, are you a lottery winner ? <span class="keyword">true</span></div><div class="line">Current locale is :org.springframework.web.servlet.DispatcherServlet$<span class="number">1</span>@<span class="number">5</span>cf346dc</div><div class="line">Request attributes are :org.apache.catalina.connector.RequestFacade@<span class="number">7</span>d9ccb73</div><div class="line"><span class="comment">//post</span></div><div class="line">Running post handler <span class="keyword">for</span> :org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor@<span class="number">77f</span>6d2e3</div><div class="line">[LotteryInterceptor] postHandle</div><div class="line">Running post handler <span class="keyword">for</span> :com.migo.interceptors.LotteryInterceptor@<span class="number">6</span>d8f729c</div></pre></td></tr></table></figure>
<p>在本文中，我们分析了在Spring 中dispatcher servlet中处理程序执行链的概念。而且已经知道，它不仅包含处理程序映射(在查找处理程序适配器之后用，源码有标注注释)，而且在不同的时间点会调用拦截器。接着，我们详细分析了<code>HandlerExecutionChain</code>类。里面有两个主要的私有字段，一个是一个处理程序，另一个是拦截器数组。在最后一部分，我们通过写一个我们自定义的处理程序执行链，以能够在我们自定义处理程序适配器的操作之前和之后调用拦截器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Spring-Web中的处理程序执行链&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Spring-Web中的处理程序执行链&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-Spring Web中的处理程序执行链&quot;&gt;&lt;/a&gt;Spring5源码解析-Spring Web中的处理程序执行链&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring的DispatcherServlet假如缺少几个关键元素将无法分派请求。其中最重要的一个是处理程序执行链。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们把注意力放在&lt;strong&gt;处理程序执行链&lt;/strong&gt;之上。老规矩，第一部分将介绍这个概念。第二部分把目光引入到Spring执行链的世界中。在最后一部分，我们将分析如何在Spring中利用之前自定义DispatcherServlet中实现一个自定义的处理程序执行链。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring中Bean的作用域</title>
    <link href="https://muyinchen.github.io/2017/08/25/Spring%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://muyinchen.github.io/2017/08/25/Spring中的作用域/</id>
    <published>2017-08-25T08:39:08.482Z</published>
    <updated>2017-09-13T05:59:35.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring中Bean的作用域"><a href="#Spring中Bean的作用域" class="headerlink" title="Spring中Bean的作用域"></a>Spring中Bean的作用域</h1><blockquote>
<p>Spring Bean，就像JavaBeans中一样，有其使用的作用域。前面的文章中我们已经看到其中的两个:singleton 和prototype。这次来讲讲另外2个作用域(总共六个，参考本人<a href="https://github.com/muyinchen/Spring-Framework-5.0.0.M3-CN/blob/master/3.5-bean.md" target="_blank" rel="external">Spring5文档翻译</a>)。</p>
</blockquote>
<a id="more"></a>
<p>本文将分为两部分。每个部分描述一个bean作用域。所以，在第一个，我们将探讨下<code>request请求</code>作用域。第二个描述的是<code>session</code>和<code>全局session</code>(此在Spring5文档中已经消失)的作用域。每一部分将由理论和实践组成。需要注意的是:这些概念仅在Web Spring应用程序上下文中有效。</p>
<h2 id="Spring中request请求作用域是什么？"><a href="#Spring中request请求作用域是什么？" class="headerlink" title="Spring中request请求作用域是什么？"></a>Spring中request请求作用域是什么？</h2><p>每个请求初始化具有此作用域的Bean注解。这听起来像是原型作用域的描述，但它们有一些差异。第一个区别是原型作用域在Spring的上下文中可用。而请求作用域仅适用于Web应用程序。第二个是原型bean根据需求进行初始化，而请求bean是在每个请求下构建的。需要说的是，request作用域bean在其作用域内有且仅有一个实例。而你可以拥有一个或多个原型作用域bean实例。</p>
<p>在以下代码中，你可以看到请求作用域bean的示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCartRequest"</span> <span class="attr">class</span>=<span class="string">"com.migo.scope.ShoppingCartRequest"</span> <span class="attr">scope</span>=<span class="string">"request"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当使用注解驱动组件或Java Config时，<code>@RequestScope</code>注解可以用于将一个组件分配给<code>request</code>作用域。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestScope</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingCartRequest</span> </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// request bean</span></div><div class="line"> </div><div class="line"><span class="comment">// injection sample</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ShoppingCartRequest shoppingCartRequest;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"shoppingCartRequest is :"</span>+shoppingCartRequest);</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意<strong><code>&lt;bean&gt;</code>定义内</strong>存在的<strong><code>&lt;aop: scoped-proxy /&gt;</code></strong>标签。这代表着使用代理对象。所以实际上，TestController持有的是代理对象的引用。我们所有的调用该对象都会转发到真正的<code>ShoppingCartRequest</code>对象。</p>
<p>有时我们需要使用<code>DispatcherServlet</code>的另一个<code>servlet</code>来处理请求。在这种情况下，我们必须确保Spring中所有请求都可用(否则可以抛出与下面类似的异常)。为此，我们需要在<code>web.xml</code>中定义一个监听器:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<p>调用/测试URL后，你应该能在日志中的发现以下信息:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shoppingCartRequest is :com.migo.scope.ShoppingCartRequest@<span class="number">2586</span>b11c</div><div class="line">shoppingCartRequest is :com.migo.scope.ShoppingCartRequest@<span class="number">3</span>bd5b945</div></pre></td></tr></table></figure>
<p>如果我们尝试在单例bean中使用request作用域的bean，则会在应用程序上下文加载阶段抛出一个<code>BeanCreationException</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'testController'</span>: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire field: <span class="keyword">private</span> com.migo.scope.ShoppingCartRequest com.migo.controller.TestController.shoppingCartRequest; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:<span class="number">292</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1185</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">537</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">475</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory$<span class="number">1</span>.getObject(AbstractBeanFactory.java:<span class="number">304</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">228</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">300</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">195</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class="number">700</span>)</div><div class="line">	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class="number">760</span>)</div><div class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">482</span>)</div><div class="line">	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:<span class="number">381</span>)</div><div class="line">	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:<span class="number">293</span>)</div><div class="line">	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:<span class="number">106</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:<span class="number">4701</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5204</span>)</div><div class="line">	at org.apache.catalina.core.StandardContext$<span class="number">1</span>.call(StandardContext.java:<span class="number">5199</span>)</div><div class="line">	at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)</div><div class="line">	at java.util.concurrent.FutureTask.run(Unknown Source)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</div><div class="line">	at java.lang.Thread.run(Unknown Source)</div><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Could not autowire field: <span class="keyword">private</span> com.migo.scope.ShoppingCartRequest com.migo.controller.TestController.shoppingCartRequest; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:<span class="number">508</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:<span class="number">87</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:<span class="number">289</span>)</div><div class="line">	... <span class="number">21</span> more</div><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'shoppingCartRequest'</span>: Scope <span class="string">'request'</span> is not active <span class="keyword">for</span> the current thread; consider defining a scoped proxy <span class="keyword">for</span> <span class="keyword">this</span> bean <span class="keyword">if</span> you intend to refer to it from a singleton; nested exception is java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">353</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">195</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:<span class="number">1014</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:<span class="number">957</span>)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:<span class="number">855</span>)</div><div class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:<span class="number">480</span>)</div><div class="line">	... <span class="number">23</span> more</div><div class="line">Caused by: java.lang.IllegalStateException: No thread-bound request found: Are you referring to request attributes outside of an actual web request, or processing a request outside of the originally receiving thread? If you are actually operating within a web request and still receive <span class="keyword">this</span> message, your code is probably running outside of DispatcherServlet/DispatcherPortlet: In <span class="keyword">this</span> <span class="keyword">case</span>, use RequestContextListener or RequestContextFilter to expose the current request.</div><div class="line">	at org.springframework.web.context.request.RequestContextHolder.currentRequestAttributes(RequestContextHolder.java:<span class="number">131</span>)</div><div class="line">	at org.springframework.web.context.request.AbstractRequestAttributesScope.get(AbstractRequestAttributesScope.java:<span class="number">41</span>)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">338</span>)</div><div class="line">	... <span class="number">28</span> more</div></pre></td></tr></table></figure>
<h2 id="什么是Spring的Session作用域？"><a href="#什么是Spring的Session作用域？" class="headerlink" title="什么是Spring的Session作用域？"></a>什么是Spring的Session作用域？</h2><p>Session作用域的bean与request 作用域的bean没有太大的不同。它们也与纯Web应用程序上下文相关联。注解为Session作用域的Bean对于每个用户的会话仅创建一次。他们在会话结束时被破坏销毁掉。</p>
<p>由Session作用域限制的Bean可以被认为是面向Web的单例，因为给定环境(用户会话)仅存在一个实例。但请记住，你无法在Web应用程序上下文中使用它们(说个好理解点的，就是一个函数内部自定义变量所在的作用域，函数执行完就销毁了，没有什么逃逸，关于此处更深入的理解请看我的博文<a href="https://muyinchen.github.io/2016/11/08/%E7%94%B1%E5%9F%9F%E8%81%94%E7%B3%BB%E5%88%B0%E7%9A%84%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/">由域联系到的逃逸分析</a>)。</p>
<p>想知道Session作用域bean在Spring中的操作，我们需要在配置文件中定义一个bean:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shoppingCartRequest"</span> <span class="attr">class</span>=<span class="string">"com.migo.scope.ShoppingCartSession"</span> <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过<code>@Autowired</code>注解，查找这个bean的方式与request 作用域的bean相同。可以看到以下结果:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">3876e5</span>d</div><div class="line">shoppingCartSession is :com.migo.scope.ShoppingCartSession@<span class="number">2f</span>87fafc</div></pre></td></tr></table></figure>
<p>你可以看到，前5个打印输出代表相同的对象。最后一个是不同的。这是什么意思 ?简单来说，这代表 着一个新的用户使用自动注入的Session作用域访问该页面。我们可以通过打开两个浏览器的测试页(/test)来观察它。每个都将初始化一个新的会话Session，因此也就创建新的<code>ShoppingCartSession bean</code>实例。</p>
<p>关于全局会话作用域(Global session scope)属于4.3x的范畴了，Spring5已经没有了，Spring5文档是去掉了因为4的存在所以还是说两句，它保留给portlet应用程序。 是不是一脸懵逼，so，来解释一下portlet是什么。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与servlet不同，每个portlet都有不同的会话。在这种情况下，Spring提供了一个名为<code>global-session</code>的作用域。通过它，一个bean可以通过应用程序中的多个portlet共享。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userPreferences"</span> <span class="attr">class</span>=<span class="string">"com.foo.UserPreferences"</span> <span class="attr">scope</span>=<span class="string">"globalSession"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>至此，我们解释了请求和面向会话的作用域。第一个的作用是在每个request请求上创建新的bean。第二个在Session会话开始的时候初始化bean。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring中Bean的作用域&quot;&gt;&lt;a href=&quot;#Spring中Bean的作用域&quot; class=&quot;headerlink&quot; title=&quot;Spring中Bean的作用域&quot;&gt;&lt;/a&gt;Spring中Bean的作用域&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Bean，就像JavaBeans中一样，有其使用的作用域。前面的文章中我们已经看到其中的两个:singleton 和prototype。这次来讲讲另外2个作用域(总共六个，参考本人&lt;a href=&quot;https://github.com/muyinchen/Spring-Framework-5.0.0.M3-CN/blob/master/3.5-bean.md&quot;&gt;Spring5文档翻译&lt;/a&gt;)。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring5源码解析-@Autowired</title>
    <link href="https://muyinchen.github.io/2017/08/23/Spring5%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-@Autowired/"/>
    <id>https://muyinchen.github.io/2017/08/23/Spring5源码解析-@Autowired/</id>
    <published>2017-08-23T04:17:11.417Z</published>
    <updated>2017-09-13T05:59:55.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring5源码解析-Autowired"><a href="#Spring5源码解析-Autowired" class="headerlink" title="Spring5源码解析-@Autowired"></a>Spring5源码解析-@Autowired</h1><blockquote>
<p>你有没有思考过Spring中的@Autowired注解？通常用于方便依赖注入，而隐藏在这个过程之后的机制到底是怎样，将在本篇中进行讲述。</p>
</blockquote>
<a id="more"></a>
<h2 id="Autowired所具有的功能"><a href="#Autowired所具有的功能" class="headerlink" title="@Autowired所具有的功能"></a>@Autowired所具有的功能</h2><p><code>@Autowired</code>是一个用来执行依赖注入的注解。每当一个<code>Spring</code>管理的<code>bean</code>发现有这个注解时候，它会直接注入相应的另一个<code>Spring</code>管理的<code>bean</code>。</p>
<p><strong>该注解可以在不同的层次上应用:</strong> </p>
<ul>
<li><strong>类字段:</strong>Spring将通过扫描自定义的<code>packages</code>(例如在我们所注解的<code>controllers</code>)或通过在配置文件中直接查找bean。 </li>
<li><strong>方法:</strong>使用<code>@Autowired</code>注解的每个方法都要用到依赖注入。但要注意的是，方法签名中呈现的所有对象都必须是Spring所管理的bean。如果你有一个方法，比如<code>setTest(Article article, NoSpringArticle noSpringArt)</code> ，其中只有一个参数 (<em><code>Article article</code></em>)是由Spring管理的，那么就将抛出一个<strong>org.springframework.beans.factory.BeanCreationException</strong>异常。这是由于Spring容器里并没有指定的一个或多个参数所指向的bean，所以也就无法解析它们。完整的异常跟踪如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">'testController'</span>: Injection of autowired dependencies failed; nested exception is org.springframework.beans.factory.BeanCreationException: Could not autowire method: <span class="keyword">public</span> <span class="keyword">void</span> org.krams.tutorial.controller.TestController.ix(com.mysite.controller.IndexController,com.mysite.nospring.data.Article); nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.mysite.nospring.data.Article] found <span class="keyword">for</span> dependency: expected at least <span class="number">1</span> bean which qualifies as autowire candidate <span class="keyword">for</span> <span class="keyword">this</span> dependency. Dependency annotations: &#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>构造函数:</strong><code>@Autowired</code>的工作方式和方法相同。</li>
</ul>
<p><strong>对象注入需要遵循一些规则。一个bean可以按照下面的方式注入: </strong></p>
<ul>
<li><strong>名称:</strong>bean解析是通过bean名称(看后面的例子)。 </li>
<li><strong>类型:</strong>解析过程基于bean的类型。</li>
</ul>
<p>在某些情况下，<code>@Autowired</code>应该通过<code>@Qualifier</code>注解协作注入。例如下面几个是相同类型的bean:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment1"</span> <span class="attr">class</span>=<span class="string">"com.migo.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"Content of the 1st comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment2"</span> <span class="attr">class</span>=<span class="string">"com.migo.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"Content of the 2nd comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面这种情况，假如只是一个简单的<code>@Autowired</code>，<code>Spring</code>根本不知道你要注入哪个<code>bean</code>。这就是为什么我们要使用<code>@Qualifier(value =“beanName”)</code>这个注解。在我们的例子中，要从 <code>com.migo.Comment</code>这个类型的bean中区分<code>comment1</code>,<code>comment2</code>，我们可以写下面的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span>(value=<span class="string">"comment1"</span>)</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Comment firstComment;</div><div class="line"> </div><div class="line"><span class="meta">@Qualifier</span>(value=<span class="string">"comment2"</span>)</div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> Comment secondComment;</div></pre></td></tr></table></figure>
<h2 id="在Spring中如何使用-Autowired"><a href="#在Spring中如何使用-Autowired" class="headerlink" title="在Spring中如何使用@Autowired"></a>在Spring中如何使用@Autowired</h2><p>正如前面部分所看到的，我们知道了在Spring中实现<code>@Autowired</code>的不同方法。在这一部分中，我们将使用<code>XML</code>配置的方式激活<code>@Autowired</code>注解来自动注入。然后，我们将编写一个简单的类并配置一些bean。最后，我们将分别在另外两个类中使用它们:由@Controller注解的控件和不由Spring所管理的类。(为什么用<code>XML</code>配置来做例子，我觉得这样更直观，其实XML和使用注解没多少区别，都是往容器里添加一些bean和组织下彼此之间的依赖而已，不必要非要拘泥于一种形式，哪种顺手用哪种，不过<code>Springboot</code>自定义的这些还是推荐使用注解了)</p>
<p>我们从启动注解的自动注入开始:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>你必须将上面这个放在应用程序上下文配置中。它可以使在遇到<code>@Autowired注解</code>时启用依赖注入。</p>
<p>现在，我们来编写和配置我们的bean:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// beans first</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> String content;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.content = content;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// sample controller</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line">     </div><div class="line">    <span class="meta">@Qualifier</span>(value=<span class="string">"comment1"</span>)</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment firstComment;</div><div class="line">     </div><div class="line">    <span class="meta">@Qualifier</span>(value=<span class="string">"comment2"</span>)</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment secondComment;</div><div class="line">     </div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"1st comment text: "</span>+firstComment.getText());</div><div class="line">        System.out.println(<span class="string">"2nd comment text: "</span>+secondComment.getText());</div><div class="line">        <span class="keyword">return</span> <span class="string">"test"</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// no-Spring managed class</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNoSpring</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Comment comment;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testComment</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (comment == <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"Comment's instance wasn't autowired because this class is not Spring-managed bean"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            comment.setContent(content);</div><div class="line">            System.out.println(<span class="string">"Comment's content: "</span>+comment.getContent());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>XML配置(在前面部分已经看到过):</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment1"</span> <span class="attr">class</span>=<span class="string">"com.specimen.exchanger.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"Content of the 1st comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"comment2"</span> <span class="attr">class</span>=<span class="string">"com.specimen.exchanger.Comment"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">value</span>=<span class="string">"Content of the 2nd comment"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在，我们打开<code>http://localhost:8080/test</code>来运行<code>TestController</code>。如预期的那样，<code>TestController</code>的注解字段正确地自动注入，而<code>TestNoSpring</code>的注解字段并没有注入进去:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>st comment text: Content of the <span class="number">1</span>st comment</div><div class="line"><span class="number">2</span>nd comment text: Content of the <span class="number">2</span>nd comment</div><div class="line">Comment<span class="string">'s instance wasn'</span>t autowired because <span class="keyword">this</span> <span class="class"><span class="keyword">class</span> <span class="title">is</span> <span class="title">not</span> <span class="title">Spring</span>-<span class="title">managed</span> <span class="title">bean</span></span></div></pre></td></tr></table></figure>
<p>哪里不对 ？TestNoSpring类不由Spring所管理。这就是为什么Spring不能注入Comment实例的依赖。我们将在下一部分中解释这个概念。</p>
<h2 id="Autowired注解背后的工作原理？"><a href="#Autowired注解背后的工作原理？" class="headerlink" title="@Autowired注解背后的工作原理？"></a>@Autowired注解背后的工作原理？</h2><p>在讨论代码细节之前，我们再来了解下基础知识。Spring管理可用于整个应用程序的Java对象bean。他们所在的Spring容器，被称为应用程序上下文。这意味着我们不需要处理他们的生命周期(初始化，销毁)。该任务由此容器来完成。另外，该上下文具有入口点，在Web应用程序中，是dispatcher servlet。容器(也就是该上下文)会在它那里被启动并且所有的bean都会被注入。</p>
<p>说的再清楚点，请看<code>&lt;context:annotation-config /&gt;</code>的定义:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"annotation-config"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span>&lt;![CDATA[</div><div class="line">	Activates various annotations to be detected in bean classes: Spring's @Required and</div><div class="line">	@Autowired, as well as JSR 250's @PostConstruct, @PreDestroy and @Resource (if available),</div><div class="line">	JAX-WS's @WebServiceRef (if available), EJB 3's @EJB (if available), and JPA's</div><div class="line">	@PersistenceContext and @PersistenceUnit (if available). Alternatively, you may</div><div class="line">	choose to activate the individual BeanPostProcessors for those annotations.</div><div class="line"></div><div class="line">	Note: This tag does not activate processing of Spring's @Transactional or EJB 3's</div><div class="line">	@TransactionAttribute annotation. Consider the use of the &lt;tx:annotation-driven&gt;</div><div class="line">	tag for that purpose.</div><div class="line"></div><div class="line">	See javadoc for org.springframework.context.annotation.AnnotationConfigApplicationContext</div><div class="line">	for information on code-based alternatives to bootstrapping annotation-driven support.</div><div class="line">			]]&gt;<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>可以看出 :</strong>  类内部的注解，如：<code>@Autowired</code>、<code>@Value</code>、<code>@Required</code>、<code>@Resource</code>以及<code>EJB</code>和<code>WebSerivce</code>相关的注解，是容器对Bean对象实例化和依赖注入时，通过容器中注册的Bean后置处理器处理这些注解的。</p>
<p>所以配置了上面这个配置(<code>&lt;context:component-scan&gt;</code>假如有配置这个，那么就可以省略<code>&lt;context:annotation-config /&gt;</code>)后，将隐式地向Spring容器注册<code>AutowiredAnnotationBeanPostProcessor</code>、<code>CommonAnnotationBeanPostProcessor</code>、<code>RequiredAnnotationBeanPostProcessor</code>、<code>PersistenceAnnotationBeanPostProcessor</code>以及这4个专门用于处理注解的Bean后置处理器。</p>
<p>当 Spring 容器<strong>启动</strong>时，<code>AutowiredAnnotationBeanPostProcessor</code> 将<strong>扫描 Spring 容器中所有 Bean，当发现 Bean 中拥有@Autowired 注解时就找到和其匹配（默认按类型匹配）的 Bean</strong>，<strong>并注入</strong>到对应的地方中去。 源码分析如下:</p>
<p>通过<strong>org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor</strong>可以<strong>实现依赖自动注入</strong>。通过这个类来处理<code>@Autowired</code>和<code>@Value</code>这俩<code>Spring注解</code>。它也可以管理<code>JSR-303</code>的<code>@Inject</code>注解(如果可用的话)。在<code>AutowiredAnnotationBeanPostProcessor</code>构造函数中定义要处理的注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">InstantiationAwareBeanPostProcessorAdapter</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">MergedBeanDefinitionPostProcessor</span>, <span class="title">PriorityOrdered</span>, <span class="title">BeanFactoryAware</span> &#123;</div><div class="line">		...</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a new AutowiredAnnotationBeanPostProcessor</div><div class="line">	 * for Spring's standard &#123;<span class="doctag">@link</span> Autowired&#125; annotation.</div><div class="line">	 * &lt;p&gt;Also supports JSR-330's &#123;<span class="doctag">@link</span> javax.inject.Inject&#125; annotation, if available.</div><div class="line">	 */</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Autowired.class);</div><div class="line">		<span class="keyword">this</span>.autowiredAnnotationTypes.add(Value.class);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</div><div class="line">					ClassUtils.forName(<span class="string">"javax.inject.Inject"</span>, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</div><div class="line">			logger.info(<span class="string">"JSR-330 'javax.inject.Inject' annotation found and supported for autowiring"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">			<span class="comment">// JSR-330 API not available - simply skip.</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	...</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>之后，有几种方法来对<code>@Autowired注解</code>进行处理。</p>
<p>第一个，<code>private InjectionMetadata buildAutowiringMetadata(final Class&lt;?&gt; clazz)</code>解析等待<strong>自动注入</strong>类的所有属性。它通过分析所有字段和方法并初始化<strong>org.springframework.beans.factory.annotation.InjectionMetadata</strong>类的实例来实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> InjectionMetadata <span class="title">buildAutowiringMetadata</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">		LinkedList&lt;InjectionMetadata.InjectedElement&gt; elements = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">		Class&lt;?&gt; targetClass = clazz;</div><div class="line"></div><div class="line">		<span class="keyword">do</span> &#123;</div><div class="line">			<span class="keyword">final</span> LinkedList&lt;InjectionMetadata.InjectedElement&gt; currElements = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">			<span class="comment">//分析所有字段</span></div><div class="line">			ReflectionUtils.doWithLocalFields(targetClass, field -&gt; &#123;</div><div class="line">              <span class="comment">//findAutowiredAnnotation(field)此方法后面会解释</span></div><div class="line">				AnnotationAttributes ann = findAutowiredAnnotation(field);</div><div class="line">				<span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">if</span> (Modifier.isStatic(field.getModifiers())) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation is not supported on static fields: "</span> + field);</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">boolean</span> required = determineRequiredStatus(ann);</div><div class="line">					currElements.add(<span class="keyword">new</span> AutowiredFieldElement(field, required));</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">//分析所有方法</span></div><div class="line">			ReflectionUtils.doWithLocalMethods(targetClass, method -&gt; &#123;</div><div class="line">				Method bridgedMethod = BridgeMethodResolver.findBridgedMethod(method);</div><div class="line">				<span class="keyword">if</span> (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);</div><div class="line">				<span class="keyword">if</span> (ann != <span class="keyword">null</span> &amp;&amp; method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) &#123;</div><div class="line">					<span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation is not supported on static methods: "</span> + method);</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (method.getParameterCount() == <span class="number">0</span>) &#123;</div><div class="line">						<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</div><div class="line">							logger.warn(<span class="string">"Autowired annotation should only be used on methods with parameters: "</span> +</div><div class="line">									method);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">boolean</span> required = determineRequiredStatus(ann);</div><div class="line">					PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);</div><div class="line">					currElements.add(<span class="keyword">new</span> AutowiredMethodElement(method, required, pd));</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			elements.addAll(<span class="number">0</span>, currElements);</div><div class="line">			targetClass = targetClass.getSuperclass();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (targetClass != <span class="keyword">null</span> &amp;&amp; targetClass != Object.class);</div><div class="line">		<span class="comment">//返回一个InjectionMetadata初始化的对象实例</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> InjectionMetadata(clazz, elements);</div><div class="line">	&#125;</div><div class="line">...</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">	 * 'Native' processing method for direct calls with an arbitrary target instance,</div><div class="line">	 * resolving all of its fields and methods which are annotated with &#123;<span class="doctag">@code</span> <span class="doctag">@Autowired</span>&#125;.</div><div class="line">	 * <span class="doctag">@param</span> bean the target instance to process</div><div class="line">	 * <span class="doctag">@throws</span> BeanCreationException if autowiring failed</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processInjection</span><span class="params">(Object bean)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</div><div class="line">		Class&lt;?&gt; clazz = bean.getClass();</div><div class="line">		InjectionMetadata metadata = findAutowiringMetadata(clazz.getName(), clazz, <span class="keyword">null</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			metadata.inject(bean, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (BeanCreationException ex) &#123;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</div><div class="line">					<span class="string">"Injection of autowired dependencies failed for class ["</span> + clazz + <span class="string">"]"</span>, ex);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>InjectionMetadata</code>类包含要注入的元素的列表。注入是通过Java的API <code>Reflection (Field set(Object obj, Object value)</code> 或<code>Method invoke(Object obj，Object ... args)</code>方法完成的。此过程直接在<code>AutowiredAnnotationBeanPostProcessor</code>的方法中调用<code>public void processInjection(Object bean) throws BeanCreationException</code>。它将所有可注入的bean检索为<code>InjectionMetadata</code>实例，并调用它们的<code>inject()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectionMetadata</span> </span>&#123;</div><div class="line">  ...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, @Nullable String beanName, @Nullable PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		Collection&lt;InjectedElement&gt; checkedElements = <span class="keyword">this</span>.checkedElements;</div><div class="line">		Collection&lt;InjectedElement&gt; elementsToIterate =</div><div class="line">				(checkedElements != <span class="keyword">null</span> ? checkedElements : <span class="keyword">this</span>.injectedElements);</div><div class="line">		<span class="keyword">if</span> (!elementsToIterate.isEmpty()) &#123;</div><div class="line">			<span class="keyword">boolean</span> debug = logger.isDebugEnabled();</div><div class="line">			<span class="keyword">for</span> (InjectedElement element : elementsToIterate) &#123;</div><div class="line">				<span class="keyword">if</span> (debug) &#123;</div><div class="line">					logger.debug(<span class="string">"Processing injected element of bean '"</span> + beanName + <span class="string">"': "</span> + element);</div><div class="line">				&#125;</div><div class="line">              	<span class="comment">//看下面静态内部类的方法</span></div><div class="line">				element.inject(target, beanName, pvs);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">  ...</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InjectedElement</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">protected</span> <span class="keyword">final</span> Member member;</div><div class="line"></div><div class="line">		<span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isField;</div><div class="line">      ...</div><div class="line">        <span class="comment">/**</span></div><div class="line">		 * Either this or &#123;<span class="doctag">@link</span> #getResourceToInject&#125; needs to be overridden.</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object target, @Nullable String requestingBeanName, @Nullable PropertyValues pvs)</span></span></div><div class="line">				<span class="keyword">throws</span> Throwable &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.isField) &#123;</div><div class="line">				Field field = (Field) <span class="keyword">this</span>.member;</div><div class="line">				ReflectionUtils.makeAccessible(field);</div><div class="line">				field.set(target, getResourceToInject(target, requestingBeanName));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">if</span> (checkPropertySkipping(pvs)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">                  	<span class="comment">//具体的注入看此处咯</span></div><div class="line">					Method method = (Method) <span class="keyword">this</span>.member;</div><div class="line">					ReflectionUtils.makeAccessible(method);</div><div class="line">					method.invoke(target, getResourceToInject(target, requestingBeanName));</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">catch</span> (InvocationTargetException ex) &#123;</div><div class="line">					<span class="keyword">throw</span> ex.getTargetException();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AutowiredAnnotationBeanPostProcessor</code>类中的另一个重要方法是<strong>private AnnotationAttributes findAutowiredAnnotation(AccessibleObject ao)</strong>。它通过分析属于一个字段或一个方法的所有注解来查找<code>@Autowired</code>注解。如果未找到<code>@Autowired</code>注解，则返回<code>null</code>，字段或方法也就视为不可注入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span></div><div class="line">	<span class="function"><span class="keyword">private</span> AnnotationAttributes <span class="title">findAutowiredAnnotation</span><span class="params">(AccessibleObject ao)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ao.getAnnotations().length &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">for</span> (Class&lt;? extends Annotation&gt; type : <span class="keyword">this</span>.autowiredAnnotationTypes) &#123;</div><div class="line">				AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(ao, type);</div><div class="line">				<span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">return</span> attributes;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在上面的文章中，我们看到了Spring中自动注入过程。通过整篇文章可以看到，这种依赖注入是一种便捷易操作方式(可以在字段以及方法上完成)，也促使我们逐渐在抛弃XML配置文件。还增强了代码的可读性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring5源码解析-Autowired&quot;&gt;&lt;a href=&quot;#Spring5源码解析-Autowired&quot; class=&quot;headerlink&quot; title=&quot;Spring5源码解析-@Autowired&quot;&gt;&lt;/a&gt;Spring5源码解析-@Autowired&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;你有没有思考过Spring中的@Autowired注解？通常用于方便依赖注入，而隐藏在这个过程之后的机制到底是怎样，将在本篇中进行讲述。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring" scheme="https://muyinchen.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
