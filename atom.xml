<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muyinchen.github.io/"/>
  <updated>2016-12-16T14:50:44.173Z</updated>
  <id>https://muyinchen.github.io/</id>
  
  <author>
    <name>知秋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis 集群操作</title>
    <link href="https://muyinchen.github.io/2016/12/16/Redis%20%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C/"/>
    <id>https://muyinchen.github.io/2016/12/16/Redis 集群操作/</id>
    <published>2016-12-16T14:51:04.256Z</published>
    <updated>2016-12-16T14:50:44.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-集群操作"><a href="#Redis-集群操作" class="headerlink" title="Redis 集群操作"></a>Redis 集群操作</h1><a id="more"></a>
<p>当前Redis Cluster状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">pwd</span></div><div class="line">/home/zxm/BD/redis-cluster</div><div class="line">$ ls <span class="_">-l</span></div><div class="line">总用量 32</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 20:15 7000</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 20:22 7001</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 17:32 7002</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 20:36 7003</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 17:32 7004</div><div class="line">drwxrwxr-x. 2 zxm zxm 4096 8月  24 20:23 7005</div></pre></td></tr></table></figure>
<p>集群中各个节点状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb check 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: ca33b3d7a60f8df7b74473f86c11f84df609fa45 192.168.174.3:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8f26d8a386853e338e7176c33e66166b5f835175 192.168.174.3:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">S: 46f81794cfcf6fbf10fcf18c44f137f446f28be9 192.168.174.3:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">M: a2e08eda093f5b962881f309b8a3b9d5961e6aa8 192.168.174.3:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 43d98665d41381c89d45c6f69bf8a2622b7b9dc3 192.168.174.3:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates a2e08eda093f5b962881f309b8a3b9d5961e6aa8</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<h2 id="Redis集群-Resharding"><a href="#Redis集群-Resharding" class="headerlink" title="Redis集群 Resharding"></a>Redis集群 Resharding</h2><p><strong>resharding步骤：</strong></p>
<p>1) 使用命令开启reshard命令</p>
<blockquote>
<p>./redis-trib.rb reshard host:port</p>
</blockquote>
<p>2) 指定需要重新reshard的slots个数</p>
<blockquote>
<p>How many slots do you want to move (from 1 to 16384)? 1000</p>
</blockquote>
<p>3) 指定需要接收的节点ID</p>
<blockquote>
<p>What is the receiving node ID? 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</p>
</blockquote>
<p>4) 指定需要重新shard的节点，输入done开始reshard</p>
<blockquote>
<p>Source node #1:ca33b3d7a60f8df7b74473f86c11f84df609fa45<br>Source node #2:done</p>
</blockquote>
<p>具体操作流程如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb reshard 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: ca33b3d7a60f8df7b74473f86c11f84df609fa45 192.168.174.3:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8f26d8a386853e338e7176c33e66166b5f835175 192.168.174.3:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">S: 46f81794cfcf6fbf10fcf18c44f137f446f28be9 192.168.174.3:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">M: a2e08eda093f5b962881f309b8a3b9d5961e6aa8 192.168.174.3:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 43d98665d41381c89d45c6f69bf8a2622b7b9dc3 192.168.174.3:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates a2e08eda093f5b962881f309b8a3b9d5961e6aa8</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 1000</div><div class="line">What is the receiving node ID? 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">Please enter all the <span class="built_in">source</span> node IDs.</div><div class="line">  Type <span class="string">'all'</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</div><div class="line">  Type <span class="string">'done'</span> once you entered all the <span class="built_in">source</span> nodes IDs.</div><div class="line">Source node <span class="comment">#1:ca33b3d7a60f8df7b74473f86c11f84df609fa45</span></div><div class="line">Source node <span class="comment">#2:done</span></div><div class="line"></div><div class="line">Ready to move 1000 slots.</div><div class="line">  Source nodes:</div><div class="line">    M: ca33b3d7a60f8df7b74473f86c11f84df609fa45 192.168.174.3:7002</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">  Destination node:</div><div class="line">    M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">  Resharding plan:</div><div class="line">    Moving slot 10923 from ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">    ... ...</div><div class="line">    Moving slot 11921 from ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">    Moving slot 11922 from ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">Do you want to proceed with the proposed reshard plan (yes/no)?yes</div><div class="line">Moving slot 10923 from 192.168.174.3:7002 to 192.168.174.3:7000:</div><div class="line">Moving slot 10924 from 192.168.174.3:7002 to 192.168.174.3:7000:</div><div class="line">... ...</div><div class="line">Moving slot 11921 from 192.168.174.3:7002 to 192.168.174.3:7000:</div><div class="line">Moving slot 11922 from 192.168.174.3:7002 to 192.168.174.3:7000:</div></pre></td></tr></table></figure>
<p><strong>重新sharding后集群中各个节点状态：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb check 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">M: ca33b3d7a60f8df7b74473f86c11f84df609fa45 192.168.174.3:7002</div><div class="line">   slots:11923-16383 (4461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 8f26d8a386853e338e7176c33e66166b5f835175 192.168.174.3:7003</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">S: 46f81794cfcf6fbf10fcf18c44f137f446f28be9 192.168.174.3:7005</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates ca33b3d7a60f8df7b74473f86c11f84df609fa45</div><div class="line">M: a2e08eda093f5b962881f309b8a3b9d5961e6aa8 192.168.174.3:7001</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">S: 43d98665d41381c89d45c6f69bf8a2622b7b9dc3 192.168.174.3:7004</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates a2e08eda093f5b962881f309b8a3b9d5961e6aa8</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<h2 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h2><p>1) 添加节点</p>
<p>添加redis实例，端口为7006</p>
<blockquote>
<p>$ cp -r 7005 7006</p>
</blockquote>
<p>修改7006目录中redis-cluster.conf文件中的参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ cat 7006/redis-cluster.conf</div><div class="line"><span class="built_in">bind</span> 192.168.174.3</div><div class="line">port 7006</div><div class="line">daemonize yes</div><div class="line">logfile <span class="string">"/home/zxm/BD/redis-cluster/7006/redis.log"</span></div><div class="line">cluster-enabled yes</div><div class="line">cluster-config-file nodes.conf</div><div class="line">cluster-node-timeout 5000</div><div class="line">appendonly yes</div></pre></td></tr></table></figure>
<p>启动redis实例节点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> 7006</div><div class="line">$ redis-server redis-cluster.conf</div></pre></td></tr></table></figure>
<h3 id="添加Salve节点"><a href="#添加Salve节点" class="headerlink" title="添加Salve节点"></a>添加Salve节点</h3><p>方式一：<br>1）将新的节点添加到集群中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> $ ./redis-trib.rb add-node 192.168.174.3:7006 192.168.174.3:7000</div><div class="line"> &gt;&gt;&gt; Adding node 192.168.174.3:7006 to cluster 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">    ... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.174.3:7006 to make it join the cluster.</div><div class="line">[OK] New node added correctly.</div></pre></td></tr></table></figure>
<p>2) 进入redis命令行,并查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ redis-cli -c -h 192.168.174.3 -p 7006</div><div class="line">192.168.174.3:7006&gt; cluster nodes   </div><div class="line">... ... </div><div class="line">fca935760ac28db5cbdc5396b5a326a85e4f8760 192.168.174.3:7006 myself,master - 0 0 0 connected</div><div class="line">7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000 master - 0 1472046744344 7 connected 0-5460 10923-11922</div><div class="line">... ...</div></pre></td></tr></table></figure>
<p>可以看到默认将新添加的节点作为master</p>
<p>3） 将新节点修改为7000节点的slave，并查看修改后的集群状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">192.168.174.3:7006&gt; cluster replicate 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">OK</div><div class="line">192.168.174.3:7006&gt; cluster nodes</div><div class="line">... ...</div><div class="line">fca935760ac28db5cbdc5396b5a326a85e4f8760 192.168.174.3:7006 myself,slave 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 0 0 0 connected</div><div class="line">7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000 master - 0 1472047082185 7 connected 0-5460 10923-11922</div><div class="line">... ...</div></pre></td></tr></table></figure>
<p>方式二：</p>
<p>1) 将新节点直接作为7000节点的slave添加到集群中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb add-node --slave --master-id 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7006 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Adding node 192.168.174.3:7006 to cluster 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 192.168.174.3:7006 to make it join the cluster.</div><div class="line">Waiting <span class="keyword">for</span> the cluster to join.</div><div class="line">&gt;&gt;&gt; Configure node as replica of 192.168.174.3:7000.</div><div class="line">[OK] New node added correctly.</div></pre></td></tr></table></figure>
<p>2) 查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb check 192.168.174.3:7001</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7001)</div><div class="line">... ...</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   2 additional replica(s)</div><div class="line">S: 1a0d5c686108182ab2ea7ca136c8e726d077171e 192.168.174.3:7006</div><div class="line">   slots: (0 slots) slave</div><div class="line">   replicates 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p><strong>删除7000节点，并将7000端口节点上的slots分配到7006上</strong></p>
<p>1) 将7006节点作为master节点添加到集群中，并察看集群状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[zxm@node1 src]$ ./redis-trib.rb check 192.168.174.3:7001</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7001)</div><div class="line">... ... </div><div class="line">M: d7a7e6e57827d94803a139f6f36425276c9e1019 192.168.174.3:7006</div><div class="line">   slots: (0 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<p>2) 对集群进行reshard操作，将7000节点上的所有slots转移到7006节点上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[zxm@node1 src]$ ./redis-trib.rb reshard 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7000)</div><div class="line">M: 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c 192.168.174.3:7000</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">... ...</div><div class="line">M: d7a7e6e57827d94803a139f6f36425276c9e1019 192.168.174.3:7006</div><div class="line">   slots: (0 slots) master</div><div class="line">   0 additional replica(s)</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">How many slots <span class="keyword">do</span> you want to move (from 1 to 16384)? 6461</div><div class="line">What is the receiving node ID? d7a7e6e57827d94803a139f6f36425276c9e1019</div><div class="line">Please enter all the <span class="built_in">source</span> node IDs.</div><div class="line">  Type <span class="string">'all'</span> to use all the nodes as <span class="built_in">source</span> nodes <span class="keyword">for</span> the <span class="built_in">hash</span> slots.</div><div class="line">  Type <span class="string">'done'</span> once you entered all the <span class="built_in">source</span> nodes IDs.</div><div class="line">Source node <span class="comment">#1:7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</span></div><div class="line">Source node <span class="comment">#2:done</span></div></pre></td></tr></table></figure>
<p>3) 查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb check 192.168.174.3:7001</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.174.3:7001)</div><div class="line">... ...</div><div class="line">M: d7a7e6e57827d94803a139f6f36425276c9e1019 192.168.174.3:7006</div><div class="line">   slots:0-5460,10923-11922 (6461 slots) master</div><div class="line">   1 additional replica(s)</div><div class="line">... ...</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div></pre></td></tr></table></figure>
<p>4) 删除7000节点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./redis-trib.rb del-node 192.168.174.3:7000 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c</div><div class="line">&gt;&gt;&gt; Removing node 7f12512f46ce8e0bac2fffcb7ca05c9941d2864c from cluster 192.168.174.3:7000</div><div class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</div><div class="line">&gt;&gt;&gt; SHUTDOWN the node.</div></pre></td></tr></table></figure>
<p><strong>⚠️删除master节点时，该节点上slots必须为零</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis-集群操作&quot;&gt;&lt;a href=&quot;#Redis-集群操作&quot; class=&quot;headerlink&quot; title=&quot;Redis 集群操作&quot;&gt;&lt;/a&gt;Redis 集群操作&lt;/h1&gt;
    
    </summary>
    
      <category term="redis" scheme="https://muyinchen.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://muyinchen.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用redis3.0实现tomcat集群session共享</title>
    <link href="https://muyinchen.github.io/2016/12/16/%E4%BD%BF%E7%94%A8redis3.0%E5%AE%9E%E7%8E%B0tomcat%E9%9B%86%E7%BE%A4session%E5%85%B1%E4%BA%AB/"/>
    <id>https://muyinchen.github.io/2016/12/16/使用redis3.0实现tomcat集群session共享/</id>
    <published>2016-12-16T14:46:57.666Z</published>
    <updated>2016-12-16T14:44:54.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用redis3-0实现tomcat集群session共享"><a href="#使用redis3-0实现tomcat集群session共享" class="headerlink" title="使用redis3.0实现tomcat集群session共享"></a>使用redis3.0实现tomcat集群session共享</h1> <a id="more"></a>
<ol>
<li>部署两个<code>tomcat</code>节点，<a href="https://muyinchen.github.io/2016/11/10/Migo%E5%95%86%E5%9F%8E2.0%C2%A0Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%20%E4%B8%89/">使用nginx实现集群</a></li>
</ol>
<ol>
<li><p><a href="https://muyinchen.github.io/2016/12/08/Migo%E5%95%86%E5%9F%8E2.0%20%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E4%B8%AD%E6%B7%BB%E5%8A%A0redis%20%E7%BC%93%E5%AD%98(1"> <code>redis</code>安装 </a>%20%E5%8D%81%E4%B9%9D/) </p>
</li>
<li><p>建一个简单的<code>web项目</code>，打包发布到各个<code>tomcat</code>中，用于测试<code>session</code>是否真的实现了共享（自己想办法怎么建测试项目）</p>
</li>
<li><p>下载开源组件<code>tomcat-redis-session-manager</code></p>
</li>
</ol>
<p>​       </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">下载方式一：https://github.com/jcoleman/tomcat-redis-session-manager/downloads  (这个是早期的，不支持redis3.0集群)</div><div class="line">下载方式二（推荐）：https://github.com/ran-jit/TomcatClusterRedisSessionManager （支持redis3集群和tomat8）</div><div class="line"></div><div class="line">https://github.com/ran-jit/TomcatClusterRedisSessionManager/wiki/Tomcat-Cluster-Redis-Session-Manager</div><div class="line"></div><div class="line">commons-logging-1.2.jar</div><div class="line"></div><div class="line">commons-pool2-2.4.1.jar</div><div class="line"></div><div class="line">jedis-2.8.0.jar</div><div class="line"></div><div class="line">commons-pool2-2.4.1.jar</div><div class="line"></div><div class="line">commons-logging-1.2.jar</div><div class="line"></div><div class="line">RedisDataCache.properties</div></pre></td></tr></table></figure>
<p>5、将上面<code>jar</code>包拷贝到各个<code>tomcat</code>的<code>lib</code>目录下， 将<code>RedisDataCache.properties</code>拷到<code>tomcat</code>的<code>conf目录</code>下。</p>
<p>6、配置文件修改</p>
<p>（1）修改<code>RedisDataCache.properties</code>配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># redis hosts ex: 127.0.0.1:6379, 127.0.0.2:6379, 127.0.0.2:6380, ....</div><div class="line"></div><div class="line">redis.hosts=192.168.187.131:6379 (redis服务器IP及端口号)</div><div class="line"></div><div class="line"># Redis Password</div><div class="line"></div><div class="line">redis.password= redis （REDIS配置文件中设置的密码）</div><div class="line"></div><div class="line"># set true to enable redis cluster mode</div><div class="line"></div><div class="line">redis.cluster.enabled=false</div></pre></td></tr></table></figure>
<p>（2）在<code>tomcat/conf/context.xml</code>文件中增加以下两行：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"com.r.tomcat.session.management.RequestSessionHandlerValve"</span>/&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.r.tomcat.session.management.RequestSessionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>（3)设置<code>tomcat/conf/web.xml</code> 中<code>session</code>有效期</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div><div class="line"></div><div class="line">         <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>60<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 如果项目里也配置了<code>session</code>有效期，则以项目中有准。</p>
<p>7、先启动<code>redis</code>,再启动<code>tomcat</code>，访问测试项目进行测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用redis3-0实现tomcat集群session共享&quot;&gt;&lt;a href=&quot;#使用redis3-0实现tomcat集群session共享&quot; class=&quot;headerlink&quot; title=&quot;使用redis3.0实现tomcat集群session共享&quot;&gt;&lt;/a&gt;使用redis3.0实现tomcat集群session共享&lt;/h1&gt;
    
    </summary>
    
      <category term="redis" scheme="https://muyinchen.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://muyinchen.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>谈小米的高可用推送系统设计</title>
    <link href="https://muyinchen.github.io/2016/12/14/%E8%B0%88%E5%B0%8F%E7%B1%B3%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E6%8E%A8%E9%80%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://muyinchen.github.io/2016/12/14/谈小米的高可用推送系统设计/</id>
    <published>2016-12-14T15:25:42.088Z</published>
    <updated>2016-12-14T15:25:09.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈小米的高可用推送系统设计"><a href="#谈小米的高可用推送系统设计" class="headerlink" title="谈小米的高可用推送系统设计"></a>谈小米的高可用推送系统设计</h1><p>原文：<a href="http://www.uml.org.cn/zjjs/201612141.asp?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.uml.org.cn/zjjs/201612141.asp</a></p>
<p>小米推送是目前国内领先的推送服务提供商，主要为开发者提供快捷、准确、稳定的推送服务。目前日活跃设备突破3亿，日消息量突破50亿。本文将会介绍小米推送在提高系统可用性方面的一些经验和教训。<br> <a id="more"></a></p>
<ol>
<li><p>推送系统的高可用性以及 如何提高可用性</p>
</li>
<li><p>缓冲机制与 服务解耦</p>
</li>
<li><p>无状态服务以及多机房部署</p>
</li>
<li><p>过载保护与分级机制</p>
</li>
</ol>
<p>小米推送是目前国内领先的推送服务提供商，主要为开发者提供快捷、准确、稳定的推送服务。目前接入APP 7000+家，日活跃设备突破3亿，日消息量突破50亿。</p>
<p>之所以取得如此的成绩，一方面得益于我们在小米手机上系统级的连接，使我们有更高的消息送达率，另一方面是因为我们本身的服务质量不低于业内其他的推送服务提供商。目前我们在小米手机上的日活为1亿+，而在非小米手机上的日活突破2亿，在iOS上的累计接入设备也达到3亿以上，从这些非MIUI的数据也可以看出，开发者对我们的推送质量是比较认可的。</p>
<p>我们是面向开发者的服务，主要职责是将开发者的消息实时准确的推送到目标设备上，是连接开发者与用户设备之间的一条高速消息通道。这中间涉及很多环节，提高系统可用性就是提高每个环节的可用性，只有系统无短板，高可用性才有可能。</p>
<h3 id="什么是高可用性"><a href="#什么是高可用性" class="headerlink" title="什么是高可用性"></a>什么是高可用性</h3><p>在介绍如何提高系统可用性之前， 我们首先需要先了解一下什么是系统可用性 。</p>
<p>基于业务性质的差异，每个业务对可用性的定义也不尽相同，不过一般情况下，大多以系统可用时间占总服务时间的比例做为可用性的定义。例如我们常说的4个9的可用性，就是可用时间占比超过9999/10000，即只有不到万分之一的时间不可用，也即一年只有不到60分钟的不可用时间。因此设计、维持一个高可用的系统是非常困难的，这不仅要求我们的系统基本不出问题，在出现问题之后也要以尽可能短的时间内恢复可用。</p>
<p>小米推送是面向开发者的服务，从本质上来说我们从事于服务行业，系统是否可用除了使用上面的可用时间占比来衡量之外，开发者主观或客观的使用感受也是衡量我们服务质量的重要标准，例如网络连接的稳定性，API的可用性，设备的连通率等。从上面的各种指标中抽象出来，我们重点关注的有两点，一个是消息的送达率，第二个是消息的送达延迟。</p>
<p>由于送达率关联因素很多，不好准确量化，因此除了上面的可用性定义之外，我们还以消息的送达延迟作为可用性的另一计算标准。比如在线设备送达延迟（从开发者消息开始处理到送达到设备上）在N（1、5、15、30）分钟的比例占比高于多少我们认为系统可用，否则认为系统可用性低。</p>
<h3 id="如何提高系统可用性"><a href="#如何提高系统可用性" class="headerlink" title="如何提高系统可用性"></a>如何提高系统可用性</h3><p>那我们如何提高系统可用性呢？</p>
<p>由可用性的定义可知，要想提高系统可用性，唯有将系统不可用时间降低到最低。一方面我们要尽量减少系统不可用（故障）出现的几率，另一方面，在故障发生后，我们要尽量减少故障带来的影响，减少故障恢复所需要的时间，将损失降低到最低。</p>
<p>要做到这几点，我们需要清楚的知道，我们所面临的主要挑战和风险是什么，只有弄清楚所面临的风险点，才能提前想好对策加以应对。对自己的业务性质加以剖析，理清楚风险因素与主要矛盾，是做一个高可用系统的第一步。</p>
<p>具体到推送系统来说，我们所面临的挑战和风险主要有以下几点：</p>
<ol>
<li><p>我们面临的开发者众多，每个开发者的水平良莠不齐，而他们对推送的理解也不尽相同，很可能跟我们预期的使用方式千差万别，开发者无意中的使用，很可能对我们的系统造成“攻击”行为。而开发者在高峰期“扎堆”推送消息，也给我们带来过载的风险。</p>
</li>
<li><p>我们的量级比较庞大（同时在线1.5亿+，日消息量50亿+），别的业务不容易遇到的事情在我们这边更容易发生，例如性能问题。</p>
</li>
<li><p>我们面临的运营环境不尽完善，机房故障、网络故障、磁盘故障、机器死机等情况时有发生，如何从设计上避免这些故障带给我们的风险也是我们需要考虑的重点。</p>
</li>
<li><p>我们使用的一些第三方组件不一定是非常可靠的，如何选取合适的组件，如何规避地基不稳带来的影响，在架构设计和技术选型时也要特别注意。</p>
</li>
<li><p>来自我们自身的挑战，我们无法保证自己的程序不出bug，也无法保证自己的操作不出意外，如何从流程和规范上尽量避免人为因素造成的影响也是非常重要的。</p>
</li>
</ol>
<p>理清风险因素之后，剩下的事情就是去一一解决这些风险，规避风险的发生，良好的架构设计、谨慎的技术选型和合理规范的流程是其中的三剂良方。下面将重点从缓冲、解耦、服务去状态、服务分级等几方面介绍一下小米推送在提高系统可用性方面做的一些尝试。</p>
<h4 id="缓冲机制"><a href="#缓冲机制" class="headerlink" title="缓冲机制"></a>缓冲机制</h4><p>架构设计是高可用性的根基，一个好的架构可以避免绝大多数风险的发生，将影响可用性的风险因素扼杀在摇篮里。在做架构设计时，我们需要明白我们要解决的首要矛盾是什么。</p>
<p>对于推送系统来说，我们面临的主要问题是系统流量随时间分布不均衡以及系统容易过载的问题。我们面临的请求来源主要是两个，<code>一是来自设备的请求</code>，这部分连接数多，请求量大，但总体可控，只要我们设计好足够的系统容量，基本不会出很大的问题；<code>另一个是来自开发者的请求</code>，这类请求属于不可控类型，所有的开发者都希望在尽可能短的时间内将自己的消息推送出去，我们无法提前得知开发者请求发送的时间以及发送的数量，它属于脉冲式的访问类型。由于设备活跃时间的原因，开发者的请求时间一般极为集中。</p>
<p>对于这类请求，我们不可能为峰值准备足够的容量，这会造成极大的资源浪费。但如果我们不做提前预防，极有可能我们的系统会被高峰期的瞬发流量压垮，因此我们需要引入一个<code>缓冲机制</code>。</p>
<p>这属于典型的<code>消息队列（Message Queue）</code>的使用场景。消息队列是一种服务间数据通信的常见中间件，一般使用<code>producer-consumer</code>模式或<code>publisher-subscriber</code>模式，除了缓冲的作用之外，解耦和扩展性也是我们采用它的重要原因。常见的消息队列组件有<code>Kafka</code>、<code>RabbitMQ</code>、<code>ActiveMQ</code>等等，可以根据业务性质以及队列的特点选择合适的组件。</p>
<p><img src="http://img0.tuicool.com/77bYN3f.jpg!web" alt=""></p>
<p><img src="http://img1.tuicool.com/nuueEf6.jpg!web" alt=""></p>
<p>在推送系统中我们大量使用了<code>消息队列（MQ）</code>组件，将开发者的请求缓存在消息队列中，然后逐渐消费，缓解开发者集中式的推送带给我们系统的瞬间压力。上面<code>第一张图</code>是我们接入层接收到的开发者请求量，高峰期的请求量是平时的数倍甚至数十倍，<code>第二张图</code>是我们业务层使用<code>MQ</code>之后处理的请求量，可以看到曲线平滑了许多，缓冲效果相当明显。（这是在我们系统本身处理能力非常强大的情况下，否则缓冲作用会更加明显）</p>
<h4 id="服务解耦"><a href="#服务解耦" class="headerlink" title="服务解耦"></a>服务解耦</h4><p>耦合度是判断一个系统是否健壮的重要标准之一。耦合度高的系统在稳定性、容灾和扩展性方面都不容乐观，常常会因局部故障扩散传染到其他模块，而导致故障恶化，受影响面扩大，甚至影响整个系统的可用性，给系统带来较高风险。因此，系统解耦是我们设计一个分布式系统时需要重点考虑的问题。架构分层、服务拆分、通信解耦、代码重构等是降低系统耦合度的比较常见的解决方案。</p>
<h5 id="首先是代码解耦。"><a href="#首先是代码解耦。" class="headerlink" title="首先是代码解耦。"></a>首先是代码解耦。</h5><p>代码耦合会使代码的维护变得异常困难，极大的增加了代码阅读和理解的难度，并增大了出现bug的几率，另一方面，代码的耦合也常常使模块逻辑上的关系变得复杂。因此，采取一定的手段进行代码解耦是我们提高系统可用性的基础一步，例如更加良好的代码结构设计，更加巧妙的抽象层次，定期的代码重构等等。</p>
<h5 id="其次是功能解耦。"><a href="#其次是功能解耦。" class="headerlink" title="其次是功能解耦。"></a>其次是功能解耦。</h5><p><code>功能耦合是系统设计的大忌</code>，常常会使功能之间的可用性相互影响。</p>
<p>例如一个变更频繁的功能A和一个比较稳定的功能B耦合在一个服务模块中，功能A的频繁发布变更必然会导致引入故障的几率增加（发布是可用性的最大杀手），这样虽然B功能较为稳定，但由于它和A处于同一进程中，A功能的故障很可能导致B功能无法使用。</p>
<p>这就要求我们对服务进行拆分，根据功能之间的关联将服务尽可能的拆分为简单单一的模块，每个功能模块间的耦合尽可能的降到最低，从而保证某一个功能模块出故障时，其他模块不受影响。</p>
<p><code>服务拆分</code>可以分为<code>垂直拆分</code>与<code>水平拆分</code>。<code>垂直拆分</code>指的是系统的分层扩展能力，大多情况下，为了架构的清晰与逻辑的解耦，我们一般将系统根据一定原则分为若干层级，例如根据请求的处理时序分为接入层、业务层、存储层等，或者根据数据的访问情况分为代理层、逻辑层、<code>Cache</code>层、<code>DB层</code>等，良好的层次不仅有利于后续的维护，对于服务解耦和性能提升也有很多的帮助。<code>水平拆分</code>指的是系统在水平方向上的扩展能力，例如在业务层有若干模块处理若干事项，当一个新功能出现时，我们可以通过增加一个业务模块的方式去处理新增加的业务逻辑，从而做到了功能之间的 解耦，增强了系统的稳定性。</p>
<p>既然服务拆分有那么多好处，是不是拆分的粒度越细越好呢？也不尽然，需要根据具体情况进行分析，服务拆分之后进程内通信势必要变为服务间通信，性能会受到一定影响，需要根据业务性质以及对性能的要求进行综合考虑。（<code>服务拆分还可能会产生数据一致性的问题，解决该问题使用的事务机制也会极大的降低系统性能以及增加系统复杂度</code>）</p>
<h5 id="再次是服务间的通信解耦"><a href="#再次是服务间的通信解耦" class="headerlink" title="再次是服务间的通信解耦"></a>再次是服务间的通信解耦</h5><p>有时候<code>服务拆分之后系统的耦合度依然很高，服务间的通信方式可能会导致拆分效果大打折扣</code>。</p>
<p>例如A、B、C三个服务模块，A调用B相关的接口，B调用C相关的接口，如果都是同步调用，或相互之间有其他时序或逻辑上的依赖，C一旦出问题，可能会导致A、B同时陷入故障状态，从而导致连锁反应（甚至产生逻辑死锁），故障在服务之间传染。</p>
<p><code>解决的方法就是避免服务间的逻辑（或时序）依赖关系，采用一定的异步访问策略</code>，如消息队列、异步调用等，可以根据业务性质与数据的重要性灵活选取。需要着重提一下的是消息队列(MQ)，一般MQ的实现中都提供了良好的解耦机制，生产者在接收到请求后，将请求放入MQ，然后继续处理其他事情，而消费者在适当的时候对请求进行处理，生产者和消费者之间不用相互依赖，降低了模块之间的关联，对提升系统的稳定性有很大帮助。<code>在推送系统中，接入层对内部系统的访问都使用异步调用方式，其他重要的处理路径使用消息队列进行通信，而非关键路径(可丢弃)使用udp进行通信（内网稳定性丢包率极低）</code>。</p>
<p>总体上来说，<code>解耦的关键点是做到故障隔离，保证故障发生时影响面尽可能小，故障不会从一个模块传染到另一个模块</code>。</p>
<p><img src="http://img0.tuicool.com/quA3eiB.jpg!web" alt=""></p>
<p>上图是小米推送的系统架构图。整个系统根据业务性质分为在线、离线、旁路三个子系统。其中在线系统负责处理线上业务逻辑，根据请求处理过程分成接入层(以及设备接入层)、业务层、Cache层、存储层等四个层级，业务层根据功能或功能组合拆分为若干模块。旁路系统负责实时监控在线系统并对在线系统进行反馈，离线系统对日志进行分析并生成统计报表。各个模块（子系统）功能简单，逻辑清晰，稳定性、可扩展性和可用性得到一定保障。</p>
<h4 id="无状态服务与多机房部署"><a href="#无状态服务与多机房部署" class="headerlink" title="无状态服务与多机房部署"></a>无状态服务与多机房部署</h4><p>单点和过载是可用性的另外两个重要杀手。</p>
<p>由于机器、磁盘、网络等多种不可控因素的存在，集群局部故障发生的概率很大，如何在局部故障发生时维持对外的可用性是我们必须要面对的问题。应对这个问题的方案就是做到<code>容量冗余</code>，也就是在系统本身的容量之外预留一定的处理能力，这样在局部故障发生时，由于容量buffer的存在，不会导致系统停摆或出现过载。而要做到这一点，就要求我们的服务有良好的可扩展性，可以比较容易的进行扩容或缩容，更不能有单点的存在。</p>
<p><code>单点一般意义上是指某个模块只有一个节点对外提供服务</code>，一般属于设计上的缺陷，由于模块内部状态过于复杂而无法进行多点部署。单点意味着系统要承受极大的可用性压力，在过载或节点发生故障时，该模块将无法对外提供服务。<code>因此我们在做系统设计时一定要避免产生单点服务，这其中的关键点是去除或降低对服务的内部状态的依赖性，做到节点间的无差别服务，也就是应尽力做到服务的去状态化</code>。</p>
<p><code>状态在代码设计上一般表现为节点间数据的差异性</code>，例如某接入层服务模块，节点A管理一部分连接，节点B管理另一部分连接，从而导致某些请求必须在节点A或节点B处理，从而产生数据差异，导致节点间状态的产生。消<code>除状态的过程也就是去除数据差异的过程</code>，例如去除模块节点缓存的数据，或者将模块数据转移至其他模块去存储。</p>
<p><code>无状态服务有诸多好处，比较显著的就是极大的增强了服务的可扩展性以及应对局部故障的能力</code>。我们可以非常容易的增加或者删除一个节点，在某个节点故障时，该节点的请求会自动被其他节点处理，从而实现故障的自动恢复。（failover）</p>
<p><code>而有时候有些模块因为某些原因（如性能或复杂度）无法做到去状态化，这时候可以采用一定的路由策略</code>，如<code>一致性hash算法</code>，来降低节点状态带来的影响。</p>
<p>除了刚才说的单点之外，还有<code>另外一种意义上的单点——部署机房的单点</code>。虽说机房整体故障的概率不大，但如果不加以重视，一旦出现将会给我们带来灭顶之灾。因此，我们要将服务部署在多个机房以规避这种风险。</p>
<p>那我们的服务需要在几个机房部署呢？这需要根据实际情况来决定，理论上越多越好，机房数量越多，每个机房需要担负的冗余容量会越少，造成的资源浪费也就越少。在机房数量=N时，假如某机房发生故障，剩余其他机房需要有承担所有流量的能力，即N-1的机房需要承担的流量为1，则总体资源占用为 N/(N-1)，N越大，资源占用总量越小，浪费也越少。</p>
<p><code>在多机房部署时，需要特别考虑一下多机房之间数据同步的问题。经验告诉我们，一定要在设计上避免对机房间数据同步机制产生依赖，否则很容易带来数据一致性的问题。</code>例如某数据在机房A写入，在机房B读取，但读取时很可能数据并没有从A同步完毕，从而导致B读取的数据与实际数据不一致，产生数据一致性问题，<code>如果数据存在缓存机制，则会加大这种不一致带来的风险</code>。</p>
<p><img src="http://img0.tuicool.com/VNraaef.png!web" alt=""></p>
<p>上图是我们经过若干次演变之后的多机房访问策略。我们将请求根据资源使用情况映射到0~1之间的浮点数，每个机房处理一部分请求，而同一资源相关的请求也只能被同一个机房的服务处理，从而避免了同一资源在多机房读写带来的数据一致性问题。</p>
<blockquote>
<p>1）接入层接收到请求之后，将请求放入本机房的MQ中，避免跨机房访问带来的接入层稳定性的降低。</p>
<p>2）每个机房的业务层同时处理所有机房MQ中的数据，然后根据一定的过滤规则过滤掉不属于本节点相关的请求。</p>
<p>3）相当于使用相对宽裕的内网流量换取了架构的简单与可用性的提升。</p>
</blockquote>
<h4 id="过载保护与分级机制"><a href="#过载保护与分级机制" class="headerlink" title="过载保护与分级机制"></a>过载保护与分级机制</h4><p>虽说消息队列的缓冲机制能给我们系统带来很大的保护，防止我们被洪水猛兽般的请求量冲垮。但系统不出问题并不代表系统可用，请求堆积在消息队列中得不到处理，一样不是我们希望看到的。因此过载保护一样是我们需要考虑的问题。在过载保护方面，我们所做的有以下几点：</p>
<ol>
<li><p>接入层建立自我保护机制，对开发者的请求频率加以限制，对异常请求提前拒绝。</p>
</li>
<li><p>建立旁路监控系统，实时分析出异常请求，并反馈给在线系统。对于逻辑异常的请求及早拒绝，对于数量异常的请求降低处理优先级，防止单个开发者的请求影响到整个系统服务可用性。</p>
</li>
<li><p>在系统过载时，及时丢弃失效请求。系统过载时，大量请求可能堆积在消息队列中，这些请求很可能已经失效，客户端已经超时，继续处理这些请求毫无价值，及早的发现并忽略这些请求有助于系统的快速恢复。</p>
</li>
<li><p>建立模块分级机制。每个模块功能不同，重要性也不一样，在系统超载时，降低非核心模块的优先级，保障核心模块的运行，可以最大程度上保障核心功能的可用性。</p>
</li>
<li><p>建立消息分级机制。对于消息量异常或逻辑异常的APP请求，适时自动降低消息处理优先级，降低处理速度，从而保障大多数正常开发者的使用。</p>
</li>
</ol>
<h4 id="流程与规范"><a href="#流程与规范" class="headerlink" title="流程与规范"></a>流程与规范</h4><p><code>影响可用性的因素很多，发布、单点、过载是最常见的三种情况</code>，后两种可以通过精心的架构设计加以规避，但发布却无法通过架构上的设计加以规避。人的因素是可用性的最大敌人，如果一个服务在设计好之后没有任何变更，相信良好的设计可以使可用性长期稳定在一个很高的水平之上。但不做变更基本不可能，而服务变更势必增加了风险引入的可能，如何规避人的因素带来的风险，是提高可用性的最重要的一步。在大多数情况下，我们无法完全避免风险的发生，我们可做的就是降低风险发生的概率，以及在风险发生时有足够的措施可以降低它带来的影响。这就<code>需要有一套完善的流程来规范我们的行为</code>（说易行难，贵在坚持）：</p>
<h5 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h5><ul>
<li><p>测试用例先行，全方位的用例覆盖</p>
</li>
<li><p>任何功能都要增加开关控制，以便在发生故障时可以及时关闭有问题特性</p>
</li>
<li><p>有足够的日志、完善的监控证明功能正确性</p>
</li>
<li><p>交叉code review，规避个人盲点</p>
</li>
</ul>
<h5 id="上线阶段"><a href="#上线阶段" class="headerlink" title="上线阶段"></a>上线阶段</h5><ul>
<li><p>必须所有测试用例全部通过方可上线，并在线上环境实时运行测试case</p>
</li>
<li><p>变更通告，周知相关人，以便及早发现问题</p>
</li>
<li><p>灰度：节点灰度，流量灰度等</p>
</li>
<li><p>记录发布日志，便于后续追查问题</p>
</li>
</ul>
<h5 id="故障阶段"><a href="#故障阶段" class="headerlink" title="故障阶段"></a>故障阶段</h5><ul>
<li><p>优先关闭开关、回滚服务</p>
</li>
<li><p>故障恢复后再追查问题原因，避免因追查问题导致影响增大</p>
</li>
<li><p>事后总结，完善测试用例及相关监控，防止类似事件再次发生</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>转眼小米推送已经成立四年多了，这期间经历了从无到有，从漏洞百出到逐步稳定，踩过许多坑，迈过许多坎，架构经历了数次调整，代码也经过若干次重构，系统的可用性终于有了稳步的提高，服务质量也逐渐得到认可。下面总结了一些我们在提高系统可用性、提高服务质量方面的一些小小经验，以供参考。</p>
<p><code>KISS(Keep It Simple Stupid!)</code>。<code>无论是代码还是架构，都要尽可能的保持简单</code>，如果一个系统（或代码）复杂到需要小心维护，那它离大规模风险爆发也就不远了。架构不是一成不变的，它往往是为了解决当时的问题而做出的设计，随着时间的变化和业务的发展，有时并不能很好的适应当前的需要。<code>定时对系统架构（和代码）进行审视，并根据需要做出调整（或重构），可以有效的提高系统的可用性</code>。</p>
<p><code>技术选型要慎重</code>。技术选型决定后续系统实现的难度以及稳定性等，需要根据团队成员的知识结构以及选用技术的掌握难度、社区活跃程度等慎重选择。<code>做后台服务首要的就是稳定性与可用性</code>，新技术可以从边缘模块进行尝试，成熟后再在核心系统使用，贸然在核心系统中使用新技术，往往会付出难以承受的代价。现在开源技术比较火热，系统中对开源组件的使用也越来越多，<code>在技术选型确定后，对系统中使用的每个组件都要进行深入了解，不能只是简单的会用，而是要用好。理解每深入一分，系统的性能和稳定性也会增加一分</code>。</p>
<p><code>给自己留足后路。</code>要想保持系统稳定完全不出问题其实很难，人都会犯错，关键是要给自己留足后路。<code>我们不是在面向对象编程，我们其实是在面向bug编程</code>，首先假设bug可能会出现，然后在设计上、编码上预防（或解决）这些可能出现的问题，预留足够的开关以便在bug真的发生时可以随时补救，<code>设计足够多的测试case并在线上循环运行，上报足够的监控数据验证系统运行的正确性，打印充分的日志以便在故障发生时快速的定位问题，开发足够的工具以提高我们定位、解决问题的效率。</code></p>
<p><code>重视暴露的每个小问题</code>。每次曲线异常、每次报警触发、每个case fail、每个用户反馈，每个小问题的背后都可能是隐藏着的大风险，重视每个出现的小问题，<code>深究下去</code>，直到系统变得更稳健。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈小米的高可用推送系统设计&quot;&gt;&lt;a href=&quot;#谈小米的高可用推送系统设计&quot; class=&quot;headerlink&quot; title=&quot;谈小米的高可用推送系统设计&quot;&gt;&lt;/a&gt;谈小米的高可用推送系统设计&lt;/h1&gt;&lt;p&gt;原文：&lt;a href=&quot;http://www.uml.org.cn/zjjs/201612141.asp?utm_source=tuicool&amp;amp;utm_medium=referral&quot;&gt;http://www.uml.org.cn/zjjs/201612141.asp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;小米推送是目前国内领先的推送服务提供商，主要为开发者提供快捷、准确、稳定的推送服务。目前日活跃设备突破3亿，日消息量突破50亿。本文将会介绍小米推送在提高系统可用性方面的一些经验和教训。&lt;br&gt;
    
    </summary>
    
      <category term="MQ" scheme="https://muyinchen.github.io/categories/MQ/"/>
    
    
      <category term="MQ" scheme="https://muyinchen.github.io/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>跟着 Github 学习 Restful HTTP API 设计</title>
    <link href="https://muyinchen.github.io/2016/12/13/%E8%B7%9F%E7%9D%80%20Github%20%E5%AD%A6%E4%B9%A0%20Restful%20HTTP%20API%20%E8%AE%BE%E8%AE%A1/"/>
    <id>https://muyinchen.github.io/2016/12/13/跟着 Github 学习 Restful HTTP API 设计/</id>
    <published>2016-12-13T14:00:26.202Z</published>
    <updated>2016-12-13T14:00:18.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跟着-Github-学习-Restful-HTTP-API-设计"><a href="#跟着-Github-学习-Restful-HTTP-API-设计" class="headerlink" title="跟着 Github 学习 Restful HTTP API 设计"></a>跟着 Github 学习 Restful HTTP API 设计</h1><p>近几年提供 <code>HTTP API</code> 服务的公司越来越多，许多公司都把 API 作为产品重要的一部分，作为服务提供出去。而微服务的兴起，也让企业内部开始重视和频繁使用 HTTP API 。好的 <code>HTTP API</code> 设计容易理解、符合 RFC 标准、提供使用者便利的功能，其中经常被拿来作为教科书典范的当属 <a href="https://developer.github.com/v3/" target="_blank" rel="external">Github API</a> 。这篇文章就通过 <code>Github API</code> 总结了一些非常好的设计原则，可以作为以后要编写 HTTP API 的参考。</p>
<a id="more"></a>
<p>注意：这篇文章只讨论设计原则，不是强制要求（API 设计者可以根据实际情况实现部分内容，甚至实现出和某些原则相反的内容），也不会给出实现的思路和细节。</p>
<h2 id="1-使用-HTTPS"><a href="#1-使用-HTTPS" class="headerlink" title="1. 使用 HTTPS"></a>1. 使用 HTTPS</h2><p>这个和 Restful API 本身没有很大的关系，但是对于增加网站的安全是非常重要的。特别如果你提供的是公开 API，用户的信息泄露或者被攻击会严重影响网站的信誉。</p>
<p>NOTE：不要让非SSL的url访问重定向到SSL的url。</p>
<h2 id="2-API-地址和版本"><a href="#2-API-地址和版本" class="headerlink" title="2. API 地址和版本"></a>2. API 地址和版本</h2><p>在 <code>url</code> 中指定 API 的版本是个很好地做法。如果 API 变化比较大，可以把 API 设计为子域名，比如 <code>https://api.github.com/v3</code> ；也可以简单地把版本放在路径中，比如 <code>https://example.com/api/v1</code> 。</p>
<h2 id="3-schema"><a href="#3-schema" class="headerlink" title="3. schema"></a>3. schema</h2><p>对于响应返回的格式，JSON 因为它的可读性、紧凑性以及多种语言支持等优点，成为了 HTTP API 最常用的返回格式。因此，最好采用 JSON 作为返回内容的格式。如果用户需要其他格式，比如 <code>xml</code> ，应该在请求头部 <code>Accept</code> 中指定。对于不支持的格式，服务端需要赶回正确的 status code，并给出详细的说明。</p>
<h2 id="4-以资源为中心的-URL-设计"><a href="#4-以资源为中心的-URL-设计" class="headerlink" title="4. 以资源为中心的 URL 设计"></a>4. 以资源为中心的 URL 设计</h2><p>资源是 <code>Restful API</code> 的核心元素，所有的操作都是针对特定资源进行的。而资源就是 <code>URL</code> （Uniform Resoure Locator）表示的，所以简洁、清晰、结构化的 URL 设计是至关重要的。Github 可以说是这方面的典范，下面我们就拿 <code>repository</code> 来说明。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/users/:username/repos</div><div class="line"></div><div class="line">/users/:org/repos</div><div class="line"></div><div class="line">/repos/:owner/:repo</div><div class="line"></div><div class="line">/repos/:owner/:repo/tags</div><div class="line"></div><div class="line">/repos/:owner/:repo/branches/:branch</div></pre></td></tr></table></figure>
<p>我们可以看到几个特性：</p>
<ul>
<li>资源分为单个文档和集合，尽量使用复数来表示资源，单个资源通过添加 id 或者 <code>name</code> 等来表示</li>
<li>一个资源可以有多个不同的 <code>URL</code></li>
<li>资源可以嵌套，通过类似目录路径的方式来表示，以体现它们之间的关系</li>
</ul>
<p><code>NOTE:</code> 根据<code>RFC3986</code>定义，<code>URL</code>是大小写敏感的。所以为了避免歧义，尽量使用小写字母。</p>
<h2 id="5-使用正确的-Method"><a href="#5-使用正确的-Method" class="headerlink" title="5. 使用正确的 Method"></a>5. 使用正确的 Method</h2><p>有了资源的 URL 设计，所有针对资源的操作都是使用 HTTP 方法指定的。比较常用的方法有：</p>
<table>
<thead>
<tr>
<th>Verb</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>HEAD</td>
<td>只获取某个资源的头部信息。比如只想了解某个文件的大小，某个资源的修改日期等</td>
</tr>
<tr>
<td>GET</td>
<td>获取资源</td>
</tr>
<tr>
<td>POST</td>
<td>创建资源</td>
</tr>
<tr>
<td>PATCH</td>
<td>更新资源的部分属性。因为 PATCH 比较新，而且规范比较复杂，所以真正实现的比较少，一般都是用 POST 替代</td>
</tr>
<tr>
<td>PUT</td>
<td>替换资源，客户端需要提供新建资源的所有属性。如果新内容为空，要设置 <code>Content-Length</code> 为 0，以区别错误信息</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除资源</td>
</tr>
</tbody>
</table>
<p>比如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET /repos/:owner/:repo/issues</div><div class="line"></div><div class="line">GET /repos/:owner/:repo/issues/:number</div><div class="line"></div><div class="line">POST /repos/:owner/:repo/issues</div><div class="line"></div><div class="line">PATCH /repos/:owner/:repo/issues/:number</div><div class="line"></div><div class="line">DELETE /repos/:owner/:repo</div></pre></td></tr></table></figure>
<p>NOTE：更新和创建操作应该返回最新的资源，来通知用户资源的情况；删除资源一般不会返回内容。</p>
<h3 id="不符合-CRUD-的情况"><a href="#不符合-CRUD-的情况" class="headerlink" title="不符合 CRUD 的情况"></a>不符合 CRUD 的情况</h3><p>在实际资源操作中，总会有一些不符合 <code>CRUD</code> （Create-Read-Update-Delete） 的情况，一般有几种处理方法。</p>
<h4 id="使用-POST"><a href="#使用-POST" class="headerlink" title="使用 POST"></a>使用 POST</h4><p>为需要的动作增加一个 endpoint，使用 POST 来执行动作，比如 <code>POST /resend</code> 重新发送邮件。</p>
<h4 id="增加控制参数"><a href="#增加控制参数" class="headerlink" title="增加控制参数"></a>增加控制参数</h4><p>添加动作相关的参数，通过修改参数来控制动作。比如一个博客网站，会有把写好的文章“发布”的功能，可以用上面的 <code>POST /articles/{:id}/publish</code> 方法，也可以在文章中增加 <code>published:boolean</code> 字段，发布的时候就是更新该字段 <code>PUT /articles/{:id}?published=true</code></p>
<h4 id="把动作转换成资源"><a href="#把动作转换成资源" class="headerlink" title="把动作转换成资源"></a>把动作转换成资源</h4><p>把动作转换成可以执行 <code>CRUD</code> 操作的资源， github 就是用了这种方法。</p>
<p>比如“喜欢”一个 gist，就增加一个 <code>/gists/:id/star</code> 子资源，然后对其进行操作：“喜欢”使用 <code>PUT /gists/:id/star</code> ，“取消喜欢”使用 <code>DELETE /gists/:id/star</code> 。</p>
<p>另外一个例子是 <code>Fork</code> ，这也是一个动作，但是在 gist 下面增加 <code>forks</code> 资源，就能把动作变成 <code>CRUD</code> 兼容的： <code>POST /gists/:id/forks</code> 可以执行用户 fork 的动作。</p>
<h2 id="6-Query-让查询更自由"><a href="#6-Query-让查询更自由" class="headerlink" title="6. Query 让查询更自由"></a>6. Query 让查询更自由</h2><p>比如查询某个 repo 下面 issues 的时候，可以通过以下参数来控制返回哪些结果：</p>
<ul>
<li>state：issue 的状态，可以是 <code>open</code> ， <code>closed</code> ， <code>all</code></li>
<li>since：在指定时间点之后更新过的才会返回</li>
<li>assignee：被 assign 给某个 user 的 issues</li>
<li>sort：选择排序的值，可以是 <code>created</code> 、 <code>updated</code> 、 <code>comments</code></li>
<li>direction：排序的方向，升序（asc）还是降序（desc）</li>
<li>……</li>
</ul>
<h2 id="7-分页-Pagination"><a href="#7-分页-Pagination" class="headerlink" title="7. 分页 Pagination"></a>7. 分页 Pagination</h2><p>当返回某个资源的列表时，如果要返回的数目特别多，比如 github 的 <code>/users</code> ，就需要使用分页分批次按照需要来返回特定数量的结果。</p>
<p>分页的实现会用到上面提到的 url query，通过两个参数来控制要返回的资源结果：</p>
<ul>
<li>per_page：每页返回多少资源，如果没提供会使用预设的默认值；这个数量也是有一个最大值，不然用户把它设置成一个非常大的值（比如 <code>99999999</code> ）也失去了设计的初衷</li>
<li>page：要获取哪一页的资源，默认是第一页</li>
</ul>
<p>返回的资源列表为 <code>[(page-1)*per_page, page*per_page)</code> 。github API 文档中还提到一个很好的点，相关的分页信息还可以存放到 <code>Link</code> 头部，这样客户端可以直接得到诸如 <code>下一页</code> 、 <code>最后一页</code> 、 <code>上一页</code> 等内容的 url 地址，而不是自己手动去计算和拼接。</p>
<h2 id="8-选择合适的状态码"><a href="#8-选择合适的状态码" class="headerlink" title="8. 选择合适的状态码"></a>8. 选择合适的状态码</h2><p>HTTP 应答中，需要带一个很重要的字段： <code>status code</code> 。它说明了请求的大致情况，是否正常完成、需要进一步处理、出现了什么错误，对于客户端非常重要。状态码都是三位的整数，大概分成了几个区间：</p>
<ul>
<li><code>2XX</code> ：请求正常处理并返回</li>
<li><code>3XX</code> ：重定向，请求的资源位置发生变化</li>
<li><code>4XX</code> ：客户端发送的请求有错误</li>
<li><code>5XX</code> ：服务器端错误</li>
</ul>
<p>在 HTTP API 设计中，经常用到的状态码以及它们的意义如下表：</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>Label</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>200</td>
<td>OK</td>
<td>请求成功接收并处理，一般响应中都会有 body</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td>请求已完成，并导致了一个或者多个资源被创建，最常用在 POST 创建资源的时候</td>
</tr>
<tr>
<td>202</td>
<td>Accepted</td>
<td>请求已经接收并开始处理，但是处理还没有完成。一般用在异步处理的情况，响应 body 中应该告诉客户端去哪里查看任务的状态</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td>请求已经处理完成，但是没有信息要返回，经常用在 PUT 更新资源的时候（客户端提供资源的所有属性，因此不需要服务端返回）。如果有重要的 metadata，可以放到头部返回</td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently</td>
<td>请求的资源已经永久性地移动到另外一个地方，后续所有的请求都应该直接访问新地址。服务端会把新地址写在 <code>Location</code> 头部字段，方便客户端使用。允许客户端把 POST 请求修改为 GET。</td>
</tr>
<tr>
<td>304</td>
<td>Not Modified</td>
<td>请求的资源和之前的版本一样，没有发生改变。用来缓存资源，和条件性请求（conditional request）一起出现</td>
</tr>
<tr>
<td>307</td>
<td>Temporary Redirect</td>
<td>目标资源暂时性地移动到新的地址，客户端需要去新地址进行操作，但是 <strong>不能</strong> 修改请求的方法。</td>
</tr>
<tr>
<td>308</td>
<td>Permanent Redirect</td>
<td>和 301 类似，除了客户端 <strong>不能</strong> 修改原请求的方法</td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>客户端发送的请求有错误（请求语法错误，body 数据格式有误，body 缺少必须的字段等），导致服务端无法处理</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>请求的资源需要认证，客户端没有提供认证信息或者认证信息不正确</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>服务器端接收到并理解客户端的请求，但是客户端的权限不足。比如，普通用户想操作只有管理员才有权限的资源。</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>客户端要访问的资源不存在，链接失效或者客户端伪造 URL 的时候回遇到这个情况</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed</td>
<td>服务端接收到了请求，而且要访问的资源也存在，但是不支持对应的方法。服务端 <strong>必须</strong> 返回 <code>Allow</code> 头部，告诉客户端哪些方法是允许的</td>
</tr>
<tr>
<td>415</td>
<td>Unsupported Media Type</td>
<td>服务端不支持客户端请求的资源格式，一般是因为客户端在 <code>Content-Type</code> 或者 <code>Content-Encoding</code> 中申明了希望的返回格式，但是服务端没有实现。比如，客户端希望收到 <code>xml</code> 返回，但是服务端支持 <code>Json</code></td>
</tr>
<tr>
<td>429</td>
<td>Too Many Requests</td>
<td>客户端在规定的时间里发送了太多请求，在进行限流的时候会用到</td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>服务器内部错误，导致无法完成请求的内容</td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable</td>
<td>服务器因为负载过高或者维护，暂时无法提供服务。服务器端应该返回 <code>Retry-After</code> 头部，告诉客户端过一段时间再来重试</td>
</tr>
</tbody>
</table>
<p>上面这些状态码覆盖了 API 设计中大部分的情况，如果对某个状态码不清楚或者希望查看更完整的列表，可以参考 <a href="https://httpstatuses.com/" target="_blank" rel="external">HTTP Status Code</a> 这个网站，或者 <a href="https://tools.ietf.org/html/rfc7231#section-6" target="_blank" rel="external">RFC7231 Response Status Codes</a> 的内容。</p>
<h2 id="9-错误处理：给出详细的信息"><a href="#9-错误处理：给出详细的信息" class="headerlink" title="9. 错误处理：给出详细的信息"></a>9. 错误处理：给出详细的信息</h2><p>如果出错的话，在 response body 中通过 <code>message</code> 给出明确的信息。</p>
<p>比如客户端发送的请求有错误，一般会返回 <code>4XX Bad Request</code> 结果。这个结果很模糊，给出错误 message 的话，能更好地让客户端知道具体哪里有问题，进行快速修改。</p>
<ul>
<li>如果请求的 JSON 数据无法解析，会返回 <code>Problems parsing JSON</code></li>
<li>如果缺少必要的 filed，会返回 <code>422 Unprocessable Entity</code> ，除了 <code>message</code> 之外，还通过 <code>errors</code> 给出了哪些 field 缺少了，能够方便调用方快速排错</li>
</ul>
<p>基本的思路就是尽可能提供更准确的错误信息：比如数据不是正确的 json，缺少必要的字段，字段的值不符合规定…… 而不是直接说“请求错误”之类的信息。</p>
<h2 id="10-验证和授权"><a href="#10-验证和授权" class="headerlink" title="10. 验证和授权"></a>10. 验证和授权</h2><p>一般来说，让任何人随意访问公开的 API 是不好的做法。验证和授权是两件事情：</p>
<ul>
<li>验证（<code>Authentication</code>）是为了确定用户是其申明的身份，比如提供账户的密码。不然的话，任何人伪造成其他身份（比如其他用户或者管理员）是非常危险的</li>
<li>授权（<code>Authorization</code>）是为了保证用户有对请求资源特定操作的权限。比如用户的私人信息只能自己能访问，其他人无法看到；有些特殊的操作只能管理员可以操作，其他用户有只读的权限等等</li>
</ul>
<p>如果没有通过验证（提供的用户名和密码不匹配，token 不正确等），需要返回 <a href="https://httpstatuses.com/401" target="_blank" rel="external"><strong>401 Unauthorized</strong></a> 状态码，并在 body 中说明具体的错误信息；而没有被授权访问的资源操作，需要返回 <a href="https://httpstatuses.com/403" target="_blank" rel="external"><strong>403 Forbidden</strong></a> 状态码，还有详细的错误信息。</p>
<p>NOTE：Github API 对某些用户未被授权访问的资源操作返回 <a href="https://httpstatuses.com/404" target="_blank" rel="external"><strong>404 Not Found</strong></a> ，目的是为了防止私有资源的泄露（比如黑客可以自动化试探用户的私有资源，返回 403 的话，就等于告诉黑客用户有这些私有的资源）。</p>
<h2 id="11-限流-rate-limit"><a href="#11-限流-rate-limit" class="headerlink" title="11. 限流 rate limit"></a>11. 限流 rate limit</h2><p>如果对访问的次数不加控制，很可能会造成 API 被滥用，甚至被 <a href="https://en.wikipedia.org/wiki/Denial-of-service_attack" target="_blank" rel="external">DDos 攻击</a> 。根据使用者不同的身份对其进行限流，可以防止这些情况，减少服务器的压力。</p>
<p>对用户的请求限流之后，要有方法告诉用户它的请求使用情况， <code>Github API</code> 使用的三个相关的头部：</p>
<ul>
<li><code>X-RateLimit-Limit</code> : 用户每个小时允许发送请求的最大值</li>
<li><code>X-RateLimit-Remaining</code> ：当前时间窗口剩下的可用请求数目</li>
<li><code>X-RateLimit-Rest</code> : 时间窗口重置的时候，到这个时间点可用的请求数量就会变成 <code>X-RateLimit-Limit</code> 的值</li>
</ul>
<p>如果允许没有登录的用户使用 API（可以让用户试用），可以把 <code>X-RateLimit-Limit</code> 的值设置得很小，比如 Github 使用的 <code>60</code> 。没有登录的用户是按照请求的 IP 来确定的，而登录的用户按照认证后的信息来确定身份。</p>
<p>对于超过流量的请求，可以返回 <a href="https://httpstatuses.com/429" target="_blank" rel="external"><strong>429 Too many requests</strong></a> 状态码，并附带错误信息。而 <code>Github API</code> 返回的是 <a href="https://httpstatuses.com/403" target="_blank" rel="external"><strong>403 Forbidden</strong></a> ，虽然没有 <code>429</code> 更准确，也是可以理解的。</p>
<p>Github 更进一步，提供了不影响当然 <code>RateLimit</code> 的请求查看当前 <code>RateLimit</code> 的接口 <a href="https://developer.github.com/v3/rate_limit/" target="_blank" rel="external"><strong>GET /rate_limit</strong></a> 。</p>
<h2 id="12-Hypermedia-API"><a href="#12-Hypermedia-API" class="headerlink" title="12. Hypermedia API"></a>12. Hypermedia API</h2><p>Restful API 的设计最好遭到 Hypermedia：在返回结果中提供相关资源的链接。这种设计也被称为 <a href="http://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="external">HATEOAS</a> 。这样做的好处是，用户可以根据返回结果就能得到后续操作需要访问的地址。</p>
<p>比如访问 <a href="https://api.github.com/" target="_blank" rel="external">api.github.com</a> ，就可以看到 Github API 支持的资源操作。</p>
<h2 id="13-编写优秀的文档"><a href="#13-编写优秀的文档" class="headerlink" title="13. 编写优秀的文档"></a>13. 编写优秀的文档</h2><p>API 最终是给人使用的，不管是公司内部，还是公开的 API 都是一样。即使我们遵循了上面提到的所有规范，设计的 API 非常优雅，用户还是不知道怎么使用我们的 API。最后一步，但非常重要的一步是：为你的 API 编写优秀的文档。</p>
<p>对每个请求以及返回的参数给出说明，最好给出一个详细而完整地示例，提醒用户需要注意的地方……反正目标就是用户可以根据你的文档就能直接使用 API，而不是要发邮件给你，或者跑到你的座位上问你一堆问题。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.github.com/v3/" target="_blank" rel="external">Github API v3</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></li>
<li><a href="http://wangwei.info/about-rest-api/" target="_blank" rel="external">REST接口设计规范</a></li>
<li><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="external">Restful API 首次被提出的论文：Architectural Styles and the Design of Network-based Software Architectures</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;跟着-Github-学习-Restful-HTTP-API-设计&quot;&gt;&lt;a href=&quot;#跟着-Github-学习-Restful-HTTP-API-设计&quot; class=&quot;headerlink&quot; title=&quot;跟着 Github 学习 Restful HTTP API 设计&quot;&gt;&lt;/a&gt;跟着 Github 学习 Restful HTTP API 设计&lt;/h1&gt;&lt;p&gt;近几年提供 &lt;code&gt;HTTP API&lt;/code&gt; 服务的公司越来越多，许多公司都把 API 作为产品重要的一部分，作为服务提供出去。而微服务的兴起，也让企业内部开始重视和频繁使用 HTTP API 。好的 &lt;code&gt;HTTP API&lt;/code&gt; 设计容易理解、符合 RFC 标准、提供使用者便利的功能，其中经常被拿来作为教科书典范的当属 &lt;a href=&quot;https://developer.github.com/v3/&quot;&gt;Github API&lt;/a&gt; 。这篇文章就通过 &lt;code&gt;Github API&lt;/code&gt; 总结了一些非常好的设计原则，可以作为以后要编写 HTTP API 的参考。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础" scheme="https://muyinchen.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 最佳技巧</title>
    <link href="https://muyinchen.github.io/2016/12/13/Java%208%20%E6%9C%80%E4%BD%B3%E6%8A%80%E5%B7%A7/"/>
    <id>https://muyinchen.github.io/2016/12/13/Java 8 最佳技巧/</id>
    <published>2016-12-13T11:10:19.512Z</published>
    <updated>2016-12-13T11:09:30.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-8-最佳技巧"><a href="#Java-8-最佳技巧" class="headerlink" title="Java 8 最佳技巧"></a>Java 8 最佳技巧</h1><blockquote>
<p>翻译文章</p>
</blockquote>
<p> 在过去的几年中，我一直使用<code>Java 8</code> 进行了很多的编码工作，用于开发 <a href="http://trishagee.github.io/presentation/java8_in_anger/" target="_blank" rel="external">新应用</a> 和 <a href="http://trishagee.github.io/presentation/refactoring_to_java_8/" target="_blank" rel="external">迁移遗留应用</a> ，我觉得是时候写一些有用的”最佳实践”。我个人不喜欢”最佳实践”这个术语，因为它意味着“一刀切”的解决方案，当然编码工作是不会这样的–这是因为我们开发人员会想出适合我们的方案。但我发现我对<code>Java8</code>特别的喜欢，它让我的生活更轻松一点，所以我想就此话题展开讨论。<br> <a id="more"></a></p>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a><code>Optional</code></h2><p> <a href="http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html" target="_blank" rel="external"> <code>Optional</code> </a> 是一个被严重低估的功能, 它消除了很多困扰着我们的   <code>NullPointerExceptions。它在代码边界（包括你调用和提供 API）处理上特别有用，因为它允许你和你调用的代码说明程序运行的期望结果。</code> </p>
<p>然而，如果没有必要的思考和设计，那么就会导致一个小变化而影响大量的类，也会导致可读性变差。这里有一些关于如何高效使用<code>Optional</code>的提示。</p>
<h3 id="Optional-应该只用于返回类型"><a href="#Optional-应该只用于返回类型" class="headerlink" title="Optional 应该只用于返回类型"></a><code>Optional</code> 应该只用于返回类型</h3><p>…不能是参数和属性. 阅读 <a href="http://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html" target="_blank" rel="external">这个博客</a> 了解怎样使用 <code>Optional</code>。 幸运的是, <code>IntelliJ IDEA</code> 在打开  <a href="https://www.jetbrains.com/help/idea/2016.2/code-inspection.html" target="_blank" rel="external">inspection</a> 功能的情况下会检查你是否遵循了这些建议。<br><img src="http://img2.tuicool.com/FRbYzeF.png!web" alt=""> </p>
<p>可选值应该在使用的地方进行处理.  <code>IntelliJ IDEA</code>的建议可以防止你不恰当的使用<code>Optional</code>, 所以你应该立即处理你发现的不恰当使用<code>Optional</code>。(根据自己的理解翻译)<br><img src="http://img0.tuicool.com/yuQFV3F.png!web" alt=""> </p>
<h3 id="你不应该简单的调用-get"><a href="#你不应该简单的调用-get" class="headerlink" title="你不应该简单的调用 get()"></a>你不应该简单的调用 <code>get()</code></h3><p><code>Optinal</code>的目的是为了表示此值有可能为空，且让你有能力来应付这种情况。因此，在使用值之前进行检查是非常重要的。在某些情况下简单的调用<code>get()</code>而没有先使用<code>isPresent()</code>进行检查是一样会导致空指针问题。幸运的是，<code>IntelliJ IDEA</code> 任然会检查出这个问题并警告你。<br><img src="http://img1.tuicool.com/AvaieqY.png!web" alt=""> </p>
<h3 id="有可能是一个更优雅的方式"><a href="#有可能是一个更优雅的方式" class="headerlink" title="有可能是一个更优雅的方式"></a>有可能是一个更优雅的方式</h3><p> <code>isPresent()</code> 与&nbsp; <code>get()</code> 结合 <code>使用的技巧</code> … </p>
<p> <img src="http://img1.tuicool.com/A7RjYny.png!web" alt=""> </p>
<p> …但还有更优雅的解决方案。你可以使用 <code>orElse方法来使得当它为null时给出一个代替的值。</code> </p>
<p> <img src="http://img0.tuicool.com/niQZJfn.png!web" alt=""> </p>
<p> …或者使用 <code>orElseGet方法来处理上述相同情况。这个例子和上面的看起来好像一样，但本例是可以调用</code> <code>supplier</code> 接口的 <code>实现</code> ,，因此如果它是一个高开销的方法，可以使用 <code>lambda</code> 表达式来获得更好的性能。 </p>
<p> <img src="http://img1.tuicool.com/vAvURb6.png!web" alt=""> </p>
<h2 id="使用Lambda表达式"><a href="#使用Lambda表达式" class="headerlink" title="使用Lambda表达式"></a>使用Lambda表达式</h2><p> <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda 表达式</a> 是 <code>Java 8</code> 的卖点之一.。即使你还没有使用过<code>Java 8</code>， 到目前你也可能有一些基本的了解。但在<code>Java</code>编程中还是一种新的方式，它也不是明显的”最佳实践” 。 这里有一些我遵循的指南。 </p>
<h3 id="保持简短"><a href="#保持简短" class="headerlink" title="保持简短"></a>保持简短</h3><p> 函数式程序员更愿意使用较长的<code>lambda</code> 表达式，但我们这些仅仅使用Java很多年的程序员来说更容易保持<code>lambda</code> 表达式的短小。你甚至更喜欢把它们限制在一行，更容易把较长的表达式  <a href="http://www.amazon.cn/gp/product/B003BY6PLK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=importnew-23&amp;linkCode=as2&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003BY6PLK" target="_blank" rel="external">重构</a>  到一个方法中。 </p>
<p> <img src="http://img2.tuicool.com/mMNvqij.png!web" alt=""> </p>
<p>把它们变成一个方法引用， 方法引用看起来有一点陌生，但却值得这样做，因为在某些情况有助于提高可读性，后面我再谈可读性。</p>
<p> <img src="http://img1.tuicool.com/bmQRBrJ.png!web" alt=""> </p>
<h3 id="明确的"><a href="#明确的" class="headerlink" title="明确的"></a>明确的</h3><p>(作者应该想要表达的是: 参数命名规范，要有意义；有更好的翻译请修正)</p>
<p>   lambda 表达式中类型信息已经丢失了，因此你会发现包含类型信息的参数会更有用。<br>  <img src="http://img2.tuicool.com/jIV3Qb7.png!web" alt=""> </p>
<p>如你所见，这样会比较麻烦。因此我更喜欢给参数一个更有意义的命名。当然，你做与否， IntelliJ IDEA 都会让你看到参数的类型信息。<br>  <img src="http://img2.tuicool.com/eeeEbyE.png!web" alt=""> </p>
<p>即使是在函数式接口的<code>lambda</code> 表达式中:</p>
<p> <img src="http://img0.tuicool.com/UN7F32R.png!web" alt=""> </p>
<h2 id="针对-Lambda-表达式进行设计"><a href="#针对-Lambda-表达式进行设计" class="headerlink" title="针对 Lambda 表达式进行设计"></a>针对 <code>Lambda</code> 表达式进行设计</h2><p> 我认为lambda表达式有点像 <a href="http://docs.oracle.com/javase/tutorial/extra/generics/index.html" target="_blank" rel="external">泛型</a> – 泛型,我们经常使用它们 (例如, 给  <code>List&lt;&gt;</code> 添加类型信息 )，但不常见的是我们把一个方法或类泛型化  (如:  <code>Person&lt;T&gt;</code> )。同样的, 它就像我们使用通过<code>lambdas</code>包装的 <code>Streams API</code>，但对我们来说更罕见的是创建一个需要  <code>lambda 表达式</code>参数的方法。 </p>
<h3 id="IntelliJ-IDEA-可以帮助你引入一个函数化的参数"><a href="#IntelliJ-IDEA-可以帮助你引入一个函数化的参数" class="headerlink" title="IntelliJ IDEA 可以帮助你引入一个函数化的参数"></a><code>IntelliJ IDEA</code> 可以帮助你引入一个函数化的参数</h3><p> 这里让你可以使用 <code>Lambda</code> 表达式而非对象来 <a href="https://www.jetbrains.com/help/idea/2016.1/extract-functional-parameter.html" target="_blank" rel="external">创建一个参数</a> 。这个功能的好处在于其建议使用一个已有的  <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html" target="_blank" rel="external">函数接口</a> 来匹配这个规范。 </p>
<p> <img src="http://img2.tuicool.com/MZ3Q3iq.png!web" alt=""> </p>
<p>这个将引导我们</p>
<h3 id="使用已有的函数接口"><a href="#使用已有的函数接口" class="headerlink" title="使用已有的函数接口"></a>使用已有的函数接口</h3><p> 当开发者越来越熟悉 Java 8 代码时，我们会知道使用例如 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html" target="_blank" rel="external"> <code>Supplier</code> </a> 和  <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html" target="_blank" rel="external"> <code>Consumer</code> </a> 这样的接口会发生什么，但是单独再创建一个 <code>ErrorMessageCreator</code> 会让我们很诧异并且很浪费时间。你可以翻阅  <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external"> <code>function package</code> </a> 来查看系统本身已经给我们准备了什么。 </p>
<h3 id="为函数接口添加-FunctionalInterface-注解"><a href="#为函数接口添加-FunctionalInterface-注解" class="headerlink" title="为函数接口添加 @FunctionalInterface 注解"></a>为函数接口添加 <code>@FunctionalInterface</code> 注解</h3><p>如果你真的需要创建自己的函数接口，那么就需要用这个 <code>@FunctionalInterface</code> 注解。这个注解似乎没多大用处，但是 <code>IntelliJ IDEA</code> 会在接口不满足这个注解要求的情况下予以提示。例如你没有指定要继承的方法：</p>
<p><img src="http://img1.tuicool.com/IVv6jaI.png!web" alt=""> </p>
<p>指定太多的方法：</p>
<p><img src="http://img2.tuicool.com/BzAzea2.png!web" alt=""> </p>
<p>在类中使用注解而不是在接口：</p>
<p><img src="http://img1.tuicool.com/Q3U77jJ.png!web" alt=""> </p>
<p><code>Lambda</code> 表达式可用于任意只包含单个抽象方法的接口中，但是不能用于满足该要求的抽象类。看似不符合逻辑，但实际要求必须如此。</p>
<h2 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h2><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html" target="_blank" rel="external">Stream API</a> 是<code>Java 8</code>的另一大卖点, 我认为到现在为止，我们仍然不知道这会对我们的编码方式有多大改变．但我发现这是一个好坏参半的功能。 </p>
<h3 id="流式风格"><a href="#流式风格" class="headerlink" title="流式风格"></a>流式风格</h3><p>就我个人而言，更喜欢使用流式风格．当然你不必也这么做, 但我发现它帮助了我：</p>
<ul>
<li>一眼就能看出有哪些操作，它的执行顺序是什么</li>
<li>更方便调试（虽然<code>IntelliJ IDEA</code>提供了 <a href="https://youtu.be/rimzOolGguo?t=3s" target="_blank" rel="external">在包含lambda表达式的行上设置断点的能力</a> ，为了更方便调试，把它拆分到不同的行上）*   在测试的时候允许取消一个操作</li>
<li>在调试或测试是，可以很方便的插入<code>peek()</code> </li>
</ul>
<p><img src="http://img1.tuicool.com/zANbeyI.png!web" alt=""> </p>
<p>在我看来这样写很简洁。但是使用这种方法并没有给我们节省多少代码行。你可能需要调整代码格式化设置让代码看起来更加清晰。<br><img src="http://img2.tuicool.com/yANV3mA.png!web" alt=""> </p>
<h3 id="使用方法引用"><a href="#使用方法引用" class="headerlink" title="使用方法引用"></a>使用方法引用</h3><p>是的，你需要一点时间来适应这个奇怪的语法。但如果使用恰当，真的可以提升代码的可读性，看看下面代码：</p>
<p><img src="http://img0.tuicool.com/Mj6zuuj.png!web" alt=""> </p>
<p>以及使用 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html" target="_blank" rel="external"> <code>Objects</code> </a> 类的辅助方法： </p>
<p><img src="http://img1.tuicool.com/uqmm6zN.png!web" alt=""> </p>
<p>后面一段代码更加的明确可读。<code>IntelliJ IDEA</code> 通常会知道怎么将一个 <code>Lambda 表达式</code>进行折叠。<br>  <img src="http://img0.tuicool.com/NVJJf2b.png!web" alt=""> </p>
<h3 id="当对集合进行元素迭代时，尽可能的使用-Streams-API"><a href="#当对集合进行元素迭代时，尽可能的使用-Streams-API" class="headerlink" title="当对集合进行元素迭代时，尽可能的使用 Streams API"></a>当对集合进行元素迭代时，尽可能的使用 Streams API</h3><p>…或者用新的集合方法，例如 <code>forEach</code> .  <code>IntelliJ IDEA</code> 会建议你这么做： </p>
<p><img src="http://img0.tuicool.com/qMBzA3Q.png!web" alt=""> </p>
<p>一般来说使用 <code>Streams API</code> 比起循环和 <code>if 语句</code>组合来得更加直观，例如：</p>
<p><img src="http://img0.tuicool.com/f2eMziQ.png!web" alt=""> </p>
<p><code>IntelliJ IDEA</code> 会建议这样的写法进行重构：</p>
<p><img src="http://img2.tuicool.com/QjuQFjI.png!web" alt=""> </p>
<p>我做过的性能测试显示这种重构带来的结果比较奇怪，难以预测，有时候好，有时候坏，有时候没区别。一如既往的，如果你的应用对性能问题非常在意，请认真的进行衡量。</p>
<h3 id="遍历数组时请用-for-循环"><a href="#遍历数组时请用-for-循环" class="headerlink" title="遍历数组时请用 for 循环"></a>遍历数组时请用 for 循环</h3><p>然后，使用 <code>Java 8</code> 并不意味着你一定要使用<code>流 API</code> 以及<code>集合的新方法</code>。<code>IntelliJ IDEA</code> 会建议一些做法改用流的方式重构，但你不一定非得接受 (记住 <a href="https://www.jetbrains.com/help/idea/2016.2/suppressing-inspections.html" target="_blank" rel="external">inspections can be suppressed</a> 或者  <a href="https://www.jetbrains.com/help/idea/2016.2/disabling-and-enabling-inspections.html" target="_blank" rel="external">turned off</a> ). </p>
<p>特别是对一个原始类型的小数组时，使用 <code>for 循环</code>的性能是最好的，而且代码更具可读性（至少对 <code>Streams API</code> 的新手来说是这样）：</p>
<p><img src="http://img2.tuicool.com/Zv6F7zi.png!web" alt=""> </p>
<p>任何的技巧和提示都不是一成不变的，你应该自己决定哪里需要使用 <code>Streams API</code> ，而哪里还用循环操作。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我每天都在发现一些新的东西，有时候我的偏好会有所变化。例如我过去会讨厌方法的引用。非常期待倾听你的建议。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-8-最佳技巧&quot;&gt;&lt;a href=&quot;#Java-8-最佳技巧&quot; class=&quot;headerlink&quot; title=&quot;Java 8 最佳技巧&quot;&gt;&lt;/a&gt;Java 8 最佳技巧&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;翻译文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 在过去的几年中，我一直使用&lt;code&gt;Java 8&lt;/code&gt; 进行了很多的编码工作，用于开发 &lt;a href=&quot;http://trishagee.github.io/presentation/java8_in_anger/&quot;&gt;新应用&lt;/a&gt; 和 &lt;a href=&quot;http://trishagee.github.io/presentation/refactoring_to_java_8/&quot;&gt;迁移遗留应用&lt;/a&gt; ，我觉得是时候写一些有用的”最佳实践”。我个人不喜欢”最佳实践”这个术语，因为它意味着“一刀切”的解决方案，当然编码工作是不会这样的–这是因为我们开发人员会想出适合我们的方案。但我发现我对&lt;code&gt;Java8&lt;/code&gt;特别的喜欢，它让我的生活更轻松一点，所以我想就此话题展开讨论。&lt;br&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java 8" scheme="https://muyinchen.github.io/tags/Java-8/"/>
    
  </entry>
  
  <entry>
    <title>redis-cli中那些或许我们还不知道的一些实用小功能</title>
    <link href="https://muyinchen.github.io/2016/12/12/redis-cli%E4%B8%AD%E9%82%A3%E4%BA%9B%E6%88%96%E8%AE%B8%E6%88%91%E4%BB%AC%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    <id>https://muyinchen.github.io/2016/12/12/redis-cli中那些或许我们还不知道的一些实用小功能/</id>
    <published>2016-12-12T12:01:34.331Z</published>
    <updated>2016-12-12T12:01:14.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis-cli中那些或许我们还不知道的一些实用小功能"><a href="#redis-cli中那些或许我们还不知道的一些实用小功能" class="headerlink" title="redis-cli中那些或许我们还不知道的一些实用小功能"></a>redis-cli中那些或许我们还不知道的一些实用小功能</h1><p>玩过<code>redis</code>的朋友都知道，<code>redis</code>中有一个叫做<code>redis-cli</code>的小工具，我们可以利用它在<code>test</code>和<code>develop</code>环境下进行高效的模拟测试，然而在现实环境中，我们只知道直接键入<code>redis-cli</code>启动命令的交互式，而这个对<code>redis-cli</code>来说绝对是九牛一毛，下面我逐一给大家演示下。<br> <a id="more"></a></p>
<h3 id="一：非REPL-Read-Eval-Print-Loop-模式"><a href="#一：非REPL-Read-Eval-Print-Loop-模式" class="headerlink" title="一：非REPL (Read Eval Print Loop) 模式"></a>一：非REPL (Read Eval Print Loop) 模式</h3><p>通常我们都是使用REPL模式，就是连接上端口之后，发一条<code>request</code>再等待<code>response</code>这样一个<code>loop</code>的形式，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216</span></div><div class="line">192.168.1.216:6379&gt;  <span class="built_in">set</span> username jack</div><div class="line">OK</div><div class="line">192.168.1.216:6379&gt;  <span class="built_in">set</span> password 12345</div><div class="line">OK</div><div class="line">192.168.1.216:6379&gt;</div></pre></td></tr></table></figure>
<p>其实我还可以直接在命令行中使用<code>redis-cli</code>再配合各种附加参数，效果和上面图示是一模一样的，比如下面这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 set username jack</span></div><div class="line">OK</div><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 set password 12345</span></div><div class="line">OK</div><div class="line">[root@localhost Desktop]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>看到没有，这样也是可以的，是不是有点意思哈~~~</p>
<h3 id="二：从本地文件中执行命令导入"><a href="#二：从本地文件中执行命令导入" class="headerlink" title="二：从本地文件中执行命令导入"></a>二：从本地文件中执行命令导入</h3><p>乍一看还是挺酷的，就是可以把本地文件中的一组<code>redis</code>命令直接导入到<code>redis-cli</code>中执行，这样也就免去了一行一行的去键入了，对不对，工作量可以大大的减轻，比如下面这样：</p>
<ol>
<li><p>首先找一个目录，这里就选择<code>/usr/</code>， 下面新建一个<code>txt文件</code>，命令还是非常的简单，执行两个<code>set</code>操作。</p>
<p><img src="http://img1.tuicool.com/qUBbQre.png!web" alt=""> </p>
</li>
</ol>
<p>然后我们用 <code>&lt; 命令</code>导入就可以了，这里<code>126</code>的ip是本地局域网内的一台虚拟机，是不是有点像<code>pipeline</code>管道操作，牛逼吧~~~ 如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 &lt; /usr/1.txt</span></div><div class="line">OK</div><div class="line">OK</div><div class="line">[root@localhost Desktop]<span class="comment">#</span></div></pre></td></tr></table></figure>
<h3 id="三：对指定redis命令重复调用"><a href="#三：对指定redis命令重复调用" class="headerlink" title="三：对指定redis命令重复调用"></a>三：对指定<code>redis</code>命令重复调用</h3><p>对指定的<code>redis</code>命令进行重复调用，乍一看也没什么用处，但是如果你调用<code>info</code>命令会是咋样的呢？？？ 你肯定会想到，我操，监控对不对？？？好吧，猜对了，命令格式如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli -r &lt;count&gt; and -i &lt;delay&gt; <span class="built_in">command</span></div></pre></td></tr></table></figure>
<p>其中<code>-r</code> 是<code>repeat</code>的次数，<code>-i</code>是<code>delay</code>的<code>sencond</code>的秒数，那接下来我演示一下啊，调用<code>info</code>命令10次，每次延迟<code>1s</code>，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 -r 10 -i 1 INFO</span></div><div class="line"><span class="comment"># Server</span></div><div class="line">redis_version:3.2.4</div><div class="line">redis_git_sha1:00000000</div><div class="line">redis_git_dirty:0</div><div class="line">redis_build_id:<span class="built_in">fc</span>9ad9a14d3a0fb5</div><div class="line">redis_mode:standalone</div><div class="line">os:Linux 3.10.0-327.el7.x86_64 x86_64</div><div class="line">arch_bits:64</div><div class="line">multiplexing_api:epoll</div><div class="line">gcc_version:4.8.5</div><div class="line">process_id:6171</div><div class="line">run_id:8d1d5cffbf81e31c6c6e0bd144186e9df9fea482</div><div class="line">tcp_port:6379</div><div class="line">uptime_in_seconds:3536932</div><div class="line">uptime_in_days:40</div><div class="line">hz:10</div><div class="line">lru_clock:5049094</div><div class="line">executable:/etc/redis/redis-server</div><div class="line">config_file:/etc/redis/6379.conf</div><div class="line"></div><div class="line"><span class="comment"># Clients</span></div><div class="line">connected_clients:7</div><div class="line">client_longest_output_list:0</div><div class="line">client_biggest_input_buf:0</div><div class="line">blocked_clients:0</div><div class="line"></div><div class="line"><span class="comment"># Memory</span></div><div class="line">used_memory:1295512</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_rss:10395648</div><div class="line">used_memory_rss_human:9.91M</div><div class="line">used_memory_peak:35199336</div><div class="line">used_memory_peak_human:33.57M</div><div class="line">total_system_memory:2099109888</div><div class="line">total_system_memory_human:1.95G</div><div class="line">used_memory_lua:37888</div><div class="line">used_memory_lua_human:37.00K</div><div class="line">maxmemory:0</div><div class="line">maxmemory_human:0B</div><div class="line">maxmemory_policy:noeviction</div><div class="line">mem_fragmentation_ratio:8.02</div><div class="line">mem_allocator:jemalloc-4.0.3</div><div class="line"></div><div class="line"><span class="comment"># Persistence</span></div><div class="line">loading:0</div><div class="line">rdb_changes_since_last_save:0</div><div class="line">rdb_bgsave_in_progress:0</div><div class="line">rdb_last_save_time:1481443658</div><div class="line">rdb_last_bgsave_status:ok</div><div class="line">rdb_last_bgsave_time_sec:0</div><div class="line">rdb_current_bgsave_time_sec:-1</div><div class="line">aof_enabled:0</div><div class="line">aof_rewrite_in_progress:0</div><div class="line">aof_rewrite_scheduled:0</div><div class="line">aof_last_rewrite_time_sec:-1</div><div class="line">aof_current_rewrite_time_sec:-1</div><div class="line">aof_last_bgrewrite_status:ok</div><div class="line">aof_last_write_status:ok</div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以看到，命令一下子就刷出来了很多，有点眼花缭乱，一般来说我只关注的是<code>used_memory_human</code>字段，也就仅仅需要知道当然redis占用了多少内存就完事了，所以这里我需要<code>grep</code>一下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 -r 10 -i 1 INFO | grep used_memory_human</span></div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">used_memory_human:1.24M</div><div class="line">[root@localhost Desktop]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>可以清楚的看到，当前<code>memory_human</code>占用<code>1.24M</code>对吧。。。是不是有一种监控的效果呢？</p>
<h3 id="四：-stat完整版监控"><a href="#四：-stat完整版监控" class="headerlink" title="四：--stat完整版监控"></a>四：<code>--stat</code>完整版监控</h3><p>其实上面的这个监控还仅仅算是一个极简的版本，可能不能满足有些朋友的需求，比如你就看不到当前的<code>redis</code>中有多少的<code>keys</code>,有多少的<code>clients</code>，有多少被<code>blocked</code>，有多少<code>requests</code>等等信息，如果这些都有了，是不是有点像<code>mongodb</code>中的<code>mongostats</code>呢？哈哈，下面我就迫不及待的给大家来演示一下吧，非常的简单。。。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@localhost Desktop]<span class="comment"># redis-cli -h 192.168.1.216 --stat</span></div><div class="line">------- data ------ --------------------- load -------------------- - child -</div><div class="line">keys       mem      clients blocked requests            connections          </div><div class="line">27         1.24M    7       0       1198768 (+0)        2206        </div><div class="line">27         1.24M    7       0       1198769 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198770 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198771 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198772 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198773 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198774 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198775 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198776 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198777 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198778 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198779 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198780 (+1)        2206        </div><div class="line">27         1.27M    7       0       1198782 (+2)        2206        </div><div class="line">27         1.24M    7       0       1198783 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198784 (+1)        2206        </div><div class="line">27         1.24M    7       0       1198785 (+1)        2206</div></pre></td></tr></table></figure>
<p>看到没有，是不是非常的牛逼，一目了然。</p>
<p>转<a href="http://www.cnblogs.com/huangxincheng/p/6159890.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/huangxincheng/p/6159890.html?utm_source=tuicool&amp;utm_medium=referral</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis-cli中那些或许我们还不知道的一些实用小功能&quot;&gt;&lt;a href=&quot;#redis-cli中那些或许我们还不知道的一些实用小功能&quot; class=&quot;headerlink&quot; title=&quot;redis-cli中那些或许我们还不知道的一些实用小功能&quot;&gt;&lt;/a&gt;redis-cli中那些或许我们还不知道的一些实用小功能&lt;/h1&gt;&lt;p&gt;玩过&lt;code&gt;redis&lt;/code&gt;的朋友都知道，&lt;code&gt;redis&lt;/code&gt;中有一个叫做&lt;code&gt;redis-cli&lt;/code&gt;的小工具，我们可以利用它在&lt;code&gt;test&lt;/code&gt;和&lt;code&gt;develop&lt;/code&gt;环境下进行高效的模拟测试，然而在现实环境中，我们只知道直接键入&lt;code&gt;redis-cli&lt;/code&gt;启动命令的交互式，而这个对&lt;code&gt;redis-cli&lt;/code&gt;来说绝对是九牛一毛，下面我逐一给大家演示下。&lt;br&gt;
    
    </summary>
    
      <category term="redis" scheme="https://muyinchen.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://muyinchen.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 商品详情页面的实现 二十一</title>
    <link href="https://muyinchen.github.io/2016/12/10/Migo%E5%95%86%E5%9F%8E2.0%20%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0%20%E4%BA%8C%E5%8D%81%E4%B8%80/"/>
    <id>https://muyinchen.github.io/2016/12/10/Migo商城2.0 商品详情页面的实现 二十一/</id>
    <published>2016-12-09T17:13:58.256Z</published>
    <updated>2016-12-09T17:18:36.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-商品详情页面的实现-二十一"><a href="#Migo商城2-0-商品详情页面的实现-二十一" class="headerlink" title="Migo商城2.0 商品详情页面的实现 二十一"></a>Migo商城2.0 商品详情页面的实现 二十一</h2><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>正常来说，这块是可以单独拿出来做一个系统，然后进行页面静态化，提高响应速度，这里就不做那么麻烦了，直接找后台管理系统这里对外提供web服务，页面静态化以后有时间再做，反正也没多少技术含量<br><a id="more"></a><br>我们打开一个商品的链接，大概是如下的形式：</p>
<p><a href="http://www.taotao.com/item/%7bitemId%7d.html" target="_blank" rel="external">http://www.migo.com/item/{itemId}.html</a></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_210508.png" alt=""></p>
<p>从上图应该就可以看到jd商品详情页面应该是一个单独的工程，后面直接跟了商品的id，好了，分析完毕，开搞代码：</p>
<p>如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_210925.png" alt=""></p>
<h3 id="通过商品id查询商品，返回数据加入modelAndView中"><a href="#通过商品id查询商品，返回数据加入modelAndView中" class="headerlink" title="通过商品id查询商品，返回数据加入modelAndView中"></a>通过商品<code>id</code>查询商品，返回数据加入<code>modelAndView</code>中</h3><h4 id="portal系统中导入POJO"><a href="#portal系统中导入POJO" class="headerlink" title="portal系统中导入POJO"></a><code>portal</code>系统中导入<code>POJO</code></h4><p>注意点如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_213301.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.pojo;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span>  </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String sellPoint;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long price;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer num;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String barcode;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String image;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long cid;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer status;</div><div class="line">    <span class="keyword">private</span> Date created;</div><div class="line">    <span class="keyword">private</span> Date updated;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] getImages()&#123;</div><div class="line">        <span class="keyword">return</span> StringUtils.split(<span class="keyword">this</span>.getImage(),<span class="string">","</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreated</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> created;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreated</span><span class="params">(Date created)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.created = created;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getUpdated</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> updated;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdated</span><span class="params">(Date updated)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.updated = updated;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSellPoint</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sellPoint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSellPoint</span><span class="params">(String sellPoint)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sellPoint = sellPoint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Long price)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Integer num)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.num = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBarcode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> barcode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBarcode</span><span class="params">(String barcode)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.barcode = barcode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.image = image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(Long cid)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cid = cid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Item [id="</span> + id + <span class="string">", title="</span> + title + <span class="string">", sellPoint="</span> + sellPoint + <span class="string">", price="</span> + price</div><div class="line">                + <span class="string">", num="</span> + num + <span class="string">", barcode="</span> + barcode + <span class="string">", image="</span> + image + <span class="string">", cid="</span> + cid + <span class="string">", status="</span></div><div class="line">                + status + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller代码："><a href="#controller代码：" class="headerlink" title="controller代码："></a>controller代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.portal.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItem</span><span class="params">(Model model, @PathVariable(value = <span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line">        Item item=<span class="keyword">this</span>.itemService.queryItemByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"item"</span>,item);</div><div class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="service代码："><a href="#service代码：" class="headerlink" title="service代码："></a>service代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.utils.HttpClientUtil;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;MIGO_MANAGE_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String MIGO_MANAGE_URL;</div><div class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">queryItemByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">            <span class="keyword">return</span> JsonUtils.jsonToPojo(doGetJsonData,Item.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="manage系统提供接口服务："><a href="#manage系统提供接口服务：" class="headerlink" title="manage系统提供接口服务："></a><code>manage</code>系统提供接口服务：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller.webs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"webs/item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsItemController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(WebsItemController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Item&gt; <span class="title">queryByItemId</span><span class="params">(@PathVariable(<span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据itemId查询商品详情 itemId = &#123;&#125;"</span>,itemId);</div><div class="line">            &#125;</div><div class="line">            Item item = <span class="keyword">this</span>.itemService.queryById(itemId);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span>==item)&#123;</div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(item);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"根据itemId查询商品详情出错，服务器傲娇了 itemId = &#123;&#125;"</span>,itemId,e);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_221910.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_222020.png" alt=""></p>
<h3 id="添加商品描述："><a href="#添加商品描述：" class="headerlink" title="添加商品描述："></a>添加商品描述：</h3><p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_223918.png" alt=""></p>
<h4 id="portal工程controller-model加入itemDesc属性"><a href="#portal工程controller-model加入itemDesc属性" class="headerlink" title="portal工程controller model加入itemDesc属性"></a><code>portal</code>工程<code>controller</code> <code>model</code>加入<code>itemDesc</code>属性</h4><p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.portal.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItem</span><span class="params">(Model model, @PathVariable(value = <span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line">        Item item=<span class="keyword">this</span>.itemService.queryItemByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"item"</span>,item);</div><div class="line">        ItemDesc itemDesc=<span class="keyword">this</span>.itemService.queryItemDescByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"itemDesc"</span>,itemDesc);</div><div class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>service</code>实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> ItemDesc <span class="title">queryItemDescByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/desc/"</span>+itemId;</div><div class="line">        String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">        <span class="keyword">return</span> JsonUtils.jsonToPojo(doGetJsonData,ItemDesc.class);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<h4 id="manage系统提供相应接口服务"><a href="#manage系统提供相应接口服务" class="headerlink" title="manage系统提供相应接口服务"></a><code>manage</code>系统提供相应接口服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 根据itemId查询商品描述</div><div class="line">    * <span class="doctag">@param</span> itemId</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/desc/&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemDesc&gt; <span class="title">queryDescByitemId</span><span class="params">(@PathVariable(<span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">               logger.info(<span class="string">"根据itemId查询商品描述 itemId = &#123;&#125;"</span>,itemId);</div><div class="line">           &#125;</div><div class="line">           ItemDesc itemDesc = <span class="keyword">this</span>.itemDescService.queryById(itemId);</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">null</span>==itemDesc) &#123;</div><div class="line">               <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> ResponseEntity.ok(itemDesc);</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"根据itemId查询商品描述出错，服务器傲娇了 itemId = &#123;&#125;"</span>,itemId,e);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_225320.png" alt=""></p>
<h3 id="显示商品规格参数"><a href="#显示商品规格参数" class="headerlink" title="显示商品规格参数"></a>显示商品规格参数</h3><p><code>portal</code>工程<code>controller</code> <code>model</code>加入<code>itemParam</code>属性</p>
<p><code>controller</code>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.portal.service.ItemService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemService itemService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItem</span><span class="params">(Model model, @PathVariable(value = <span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line">        Item item=<span class="keyword">this</span>.itemService.queryItemByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"item"</span>,item);</div><div class="line">        ItemDesc itemDesc=<span class="keyword">this</span>.itemService.queryItemDescByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"itemDesc"</span>,itemDesc);</div><div class="line">        String itemParamItem=<span class="keyword">this</span>.itemService.queryItemParamItemByItemId(itemId);</div><div class="line">        model.addAttribute(<span class="string">"itemParam"</span>,itemParamItem);</div><div class="line">        <span class="keyword">return</span> <span class="string">"item"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_223918.png" alt=""></p>
<p>如此图所示，得到<code>itemParam</code>后直接显示，那么需要对得到数据里面参数做页面格式化:</p>
<p>所以<code>service</code>代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItemParamItemByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/paramitem/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">            ItemParamItem itemParamItem = JsonUtils.jsonToPojo(doGetJsonData, ItemParamItem.class);</div><div class="line">            String paramData = itemParamItem.getParamData();</div><div class="line">            ArrayNode arrayNode = (ArrayNode) MAPPER.readTree(paramData);</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            sb.append(<span class="string">"&lt;table cellpadding=\"0\" cellspacing=\"1\" width=\"100%\" border=\"0\" class=\"Ptable\"&gt;&lt;tbody&gt;"</span>);</div><div class="line">            <span class="keyword">for</span> (JsonNode param : arrayNode) &#123;</div><div class="line">                sb.append(<span class="string">"&lt;tr&gt;&lt;th class=\"tdTitle\" colspan=\"2\"&gt;"</span> + param.get(<span class="string">"group"</span>).asText()</div><div class="line">                        + <span class="string">"&lt;/th&gt;&lt;/tr&gt;"</span>);</div><div class="line">                ArrayNode params = (ArrayNode) param.get(<span class="string">"params"</span>);</div><div class="line">                <span class="keyword">for</span> (JsonNode p : params) &#123;</div><div class="line">                    sb.append(<span class="string">"&lt;tr&gt;&lt;td class=\"tdTitle\"&gt;"</span> + p.get(<span class="string">"k"</span>).asText() + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span></div><div class="line">                            + p.get(<span class="string">"v"</span>).asText() + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sb.append(<span class="string">"&lt;/tbody&gt;&lt;/table&gt;"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> sb.toString();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>manage</code>系统提供服务接口：</p>
<p><code>controller</code>代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 根据itemId查询商品规格参数</div><div class="line">     * <span class="doctag">@param</span> itemId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/paramitem/&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemParamItem&gt; <span class="title">queryItemParamItemByitemId</span><span class="params">(</span></span></div><div class="line">            @PathVariable(<span class="string">"itemId"</span>) Long itemId)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据itemId查询商品规格参数 itemId = &#123;&#125;"</span>,itemId);</div><div class="line">            &#125;</div><div class="line">            ItemParamItem itemParamItem = <span class="keyword">this</span>.itemParamItemService.queryByIdse(itemId);</div><div class="line">            <span class="keyword">if</span> (itemParamItem==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemParamItem);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"根据itemId查询商品规格参数出错，服务器傲娇了 itemId = &#123;&#125;"</span>,itemId,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>service</code>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 根据商品id查询商品规格参数数据</div><div class="line">    * <span class="doctag">@param</span> itemId</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> ItemParamItem <span class="title">queryByIdse</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">       ItemParamItem example=<span class="keyword">new</span> ItemParamItem();</div><div class="line">       example.setItemId(itemId);</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.itemParamItemMapper.select(example).get(<span class="number">0</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>测试得到结果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_234711.png" alt=""></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161209_234902.png" alt=""></p>
<p><code>portal</code>和后端<code>manage</code>系统中相应<code>service</code>中加入缓存逻辑：</p>
<h3 id="portal端添加逻辑代码："><a href="#portal端添加逻辑代码：" class="headerlink" title="portal端添加逻辑代码："></a><code>portal</code>端添加逻辑代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Item;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.ItemParamItem;</div><div class="line"><span class="keyword">import</span> com.migo.service.JedisClient;</div><div class="line"><span class="keyword">import</span> com.migo.utils.HttpClientUtil;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/9.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisClient jedisClient;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_KEY = <span class="string">"MIGO_PORTAL"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer REDIS_TIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;MIGO_MANAGE_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String MIGO_MANAGE_URL;</div><div class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">queryItemByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//添加缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+<span class="string">":ITEM_DETAIL"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            String redisJsonData = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(redisJsonData))&#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(redisJsonData,Item.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//正常业务逻辑</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">            <span class="comment">//将数据写入缓存中</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                jedisClient.set(key,doGetJsonData,REDIS_TIME);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> JsonUtils.jsonToPojo(doGetJsonData,Item.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ItemDesc <span class="title">queryItemDescByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="comment">//添加缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+<span class="string">":ITEM_DESC"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            String redisJsonData = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(redisJsonData))&#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(redisJsonData,ItemDesc.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/desc/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line"></div><div class="line">            <span class="comment">//将数据写入缓存中</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                jedisClient.set(key,doGetJsonData,REDIS_TIME);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> JsonUtils.jsonToPojo(doGetJsonData,ItemDesc.class);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryItemParamItemByItemId</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="comment">//添加缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+<span class="string">":ITEM_PARAM_ITEM"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String redisJsonData = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(redisJsonData))&#123;</div><div class="line">                <span class="keyword">return</span> redisJsonData;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String URL=MIGO_MANAGE_URL+<span class="string">"/rest/webs/item/paramitem/"</span>+itemId;</div><div class="line">            String doGetJsonData = HttpClientUtil.doGet(URL);</div><div class="line">            ItemParamItem itemParamItem = JsonUtils.jsonToPojo(doGetJsonData, ItemParamItem.class);</div><div class="line">            String paramData = itemParamItem.getParamData();</div><div class="line">            ArrayNode arrayNode = (ArrayNode) MAPPER.readTree(paramData);</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            sb.append(<span class="string">"&lt;table cellpadding=\"0\" cellspacing=\"1\" width=\"100%\" border=\"0\" class=\"Ptable\"&gt;&lt;tbody&gt;"</span>);</div><div class="line">            <span class="keyword">for</span> (JsonNode param : arrayNode) &#123;</div><div class="line">                sb.append(<span class="string">"&lt;tr&gt;&lt;th class=\"tdTitle\" colspan=\"2\"&gt;"</span> + param.get(<span class="string">"group"</span>).asText()</div><div class="line">                        + <span class="string">"&lt;/th&gt;&lt;/tr&gt;"</span>);</div><div class="line">                ArrayNode params = (ArrayNode) param.get(<span class="string">"params"</span>);</div><div class="line">                <span class="keyword">for</span> (JsonNode p : params) &#123;</div><div class="line">                    sb.append(<span class="string">"&lt;tr&gt;&lt;td class=\"tdTitle\"&gt;"</span> + p.get(<span class="string">"k"</span>).asText() + <span class="string">"&lt;/td&gt;&lt;td&gt;"</span></div><div class="line">                            + p.get(<span class="string">"v"</span>).asText() + <span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sb.append(<span class="string">"&lt;/tbody&gt;&lt;/table&gt;"</span>);</div><div class="line"></div><div class="line">            <span class="comment">//将数据写入缓存中</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                jedisClient.set(key,sb.toString(),REDIS_TIME);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> sb.toString();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="manage端添加缓存代码："><a href="#manage端添加缓存代码：" class="headerlink" title="manage端添加缓存代码："></a><code>manage</code>端添加缓存代码：</h3><h4 id="ItemService"><a href="#ItemService" class="headerlink" title="ItemService"></a><code>ItemService</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public Item queryByIdse(Long itemId) &#123;</div><div class="line">       String key=REDIS_KEY+&quot;:&quot;+itemId+ITEM_DETAIL_KEY;</div><div class="line">       //添加缓存逻辑</div><div class="line">       try &#123;</div><div class="line">           String jsonData = jedisClient.get(key);</div><div class="line">           if (StringUtils.isNotEmpty(jsonData))&#123;</div><div class="line">               return JsonUtils.jsonToPojo(jsonData,Item.class);</div><div class="line">           &#125;</div><div class="line">       &#125; catch (Exception e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line"></div><div class="line">       Item item = super.queryById(itemId);</div><div class="line"></div><div class="line">       //数据加入缓存</div><div class="line">       try &#123;</div><div class="line">           jedisClient.set(key,JsonUtils.objectToJson(item),REDIS_TIME);</div><div class="line">       &#125; catch (Exception e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">       return item;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="ItemParamItemService"><a href="#ItemParamItemService" class="headerlink" title="ItemParamItemService"></a><code>ItemParamItemService</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 根据商品id查询商品规格参数数据</div><div class="line">     * <span class="doctag">@param</span> itemId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ItemParamItem <span class="title">queryByIdse</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="comment">//添加缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+ITEM_PARAM_KEY;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String s = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(s))&#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(s,ItemParamItem.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        ItemParamItem example=<span class="keyword">new</span> ItemParamItem();</div><div class="line">        example.setItemId(itemId);</div><div class="line"></div><div class="line">        ItemParamItem itemParamItem = <span class="keyword">this</span>.itemParamItemMapper.select(example).get(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">//加入缓存</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jedisClient.set(key,JsonUtils.objectToJson(itemParamItem),REDIS_TIME);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> itemParamItem;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="ItemDescService"><a href="#ItemDescService" class="headerlink" title="ItemDescService"></a><code>ItemDescService</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemDesc;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/12.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDescService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemDesc</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;REDIS_KEY&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String REDIS_KEY;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;REDIS_TIME&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> Integer REDIS_TIME;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_DESC_KEY = <span class="string">":ITEM_DESC"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisClient jedisClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ItemDesc <span class="title">queryByIdse</span><span class="params">(Long itemId)</span> </span>&#123;</div><div class="line">        <span class="comment">//加入缓存逻辑</span></div><div class="line">        String key=REDIS_KEY+<span class="string">":"</span>+itemId+ITEM_DESC_KEY;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String jsonData = jedisClient.get(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(jsonData))&#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(jsonData,ItemDesc.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ItemDesc itemDesc = <span class="keyword">super</span>.queryById(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//数据添加到缓存中</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jedisClient.set(key,JsonUtils.objectToJson(itemDesc),REDIS_TIME);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> itemDesc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161210_010314.png" alt=""></p>
<h3 id="关于两个系统间缓存同步问题会在后面通过消息中间件处理，这里就不添加临时解决方案了"><a href="#关于两个系统间缓存同步问题会在后面通过消息中间件处理，这里就不添加临时解决方案了" class="headerlink" title="关于两个系统间缓存同步问题会在后面通过消息中间件处理，这里就不添加临时解决方案了"></a>关于两个系统间缓存同步问题会在后面通过消息中间件处理，这里就不添加临时解决方案了</h3><p>上面的代码其实还有进一步 的优化方法，这里留给读者思考了，又搞到凌晨1点多了，睡觉！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-商品详情页面的实现-二十一&quot;&gt;&lt;a href=&quot;#Migo商城2-0-商品详情页面的实现-二十一&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 商品详情页面的实现 二十一&quot;&gt;&lt;/a&gt;Migo商城2.0 商品详情页面的实现 二十一&lt;/h2&gt;&lt;h3 id=&quot;分析：&quot;&gt;&lt;a href=&quot;#分析：&quot; class=&quot;headerlink&quot; title=&quot;分析：&quot;&gt;&lt;/a&gt;分析：&lt;/h3&gt;&lt;p&gt;正常来说，这块是可以单独拿出来做一个系统，然后进行页面静态化，提高响应速度，这里就不做那么麻烦了，直接找后台管理系统这里对外提供web服务，页面静态化以后有时间再做，反正也没多少技术含量&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 业务逻辑中添加redis 缓存(2) 二十</title>
    <link href="https://muyinchen.github.io/2016/12/08/Migo%E5%95%86%E5%9F%8E2.0%20%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E4%B8%AD%E6%B7%BB%E5%8A%A0redis%20%E7%BC%93%E5%AD%98(2)%20%E4%BA%8C%E5%8D%81/"/>
    <id>https://muyinchen.github.io/2016/12/08/Migo商城2.0 业务逻辑中添加redis 缓存(2) 二十/</id>
    <published>2016-12-08T15:45:07.132Z</published>
    <updated>2016-12-08T15:59:23.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-业务逻辑中添加redis-缓存-2-二十"><a href="#Migo商城2-0-业务逻辑中添加redis-缓存-2-二十" class="headerlink" title="Migo商城2.0 业务逻辑中添加redis 缓存(2) 二十"></a>Migo商城2.0 业务逻辑中添加redis 缓存(2) 二十</h2><h3 id="业务逻辑中添加缓存"><a href="#业务逻辑中添加缓存" class="headerlink" title="业务逻辑中添加缓存"></a>业务逻辑中添加缓存</h3><h4 id="缓存应该添加到服务层。"><a href="#缓存应该添加到服务层。" class="headerlink" title="缓存应该添加到服务层。"></a>缓存应该添加到服务层。</h4><ol>
<li>查询数据库之前查询缓存</li>
<li>如何缓存中有，直接响应数据</li>
<li>如果缓存中没有查数据库</li>
<li>把查询结果缓存到redis</li>
<li>返回结果<a id="more"></a>
<h4 id="添加缓存的原则："><a href="#添加缓存的原则：" class="headerlink" title="添加缓存的原则："></a>添加缓存的原则：</h4></li>
</ol>
<blockquote>
<p>添加缓存不能影响正常的业务逻辑</p>
</blockquote>
<p>因为之前没有添加带过期的set 方法，故需要在此再提下：</p>
<p><code>SETEX key seconds value</code></p>
<p>将值 <code>value</code> 关联到 <code>key</code> ，并将 <code>key</code> 的生存时间设为 <code>seconds</code> (以秒为单位)。</p>
<p>如果 <code>key</code> 已经存在， <a href="http://doc.redisfans.com/string/setex.html#setex" target="_blank" rel="external">SETEX</a> 命令将覆写旧值。</p>
<p>这个命令类似于以下两个命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SET key value</div><div class="line">EXPIRE key seconds  <span class="comment"># 设置生存时间</span></div></pre></td></tr></table></figure>
<p>不同之处是， <a href="http://doc.redisfans.com/string/setex.html#setex" target="_blank" rel="external">SETEX</a> 是一个原子性(<code>atomic</code>)操作，关联值和设置生存时间两个动作会在同一时间内完成，该命令在 Redis 用作缓存时，非常实用。</p>
<ul>
<li><p><strong>可用版本：</strong></p>
<blockquote>
<p>= 2.0.0</p>
</blockquote>
</li>
<li><p><strong>时间复杂度：</strong></p>
<p>O(1)</p>
</li>
<li><p><strong>返回值：</strong></p>
<p>设置成功时返回 OK 。当 seconds 参数不合法时，返回一个错误。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在 key 不存在时进行 SETEX</span></div><div class="line"></div><div class="line">redis&gt; SETEX cache_user_id 60 10086</div><div class="line">OK</div><div class="line"></div><div class="line">redis&gt; GET cache_user_id  <span class="comment"># 值</span></div><div class="line"><span class="string">"10086"</span></div><div class="line"></div><div class="line">redis&gt; TTL cache_user_id  <span class="comment"># 剩余生存时间</span></div><div class="line">(<span class="built_in">integer</span>) 49</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># key 已经存在时，SETEX 覆盖旧值</span></div><div class="line"></div><div class="line">redis&gt; SET <span class="built_in">cd</span> <span class="string">"timeless"</span></div><div class="line">OK</div><div class="line"></div><div class="line">redis&gt; SETEX <span class="built_in">cd</span> 3000 <span class="string">"goodbye my love"</span></div><div class="line">OK</div><div class="line"></div><div class="line">redis&gt; GET <span class="built_in">cd</span></div><div class="line"><span class="string">"goodbye my love"</span></div><div class="line"></div><div class="line">redis&gt; TTL <span class="built_in">cd</span></div><div class="line">(<span class="built_in">integer</span>) 2997</div></pre></td></tr></table></figure>
<p>所以common工程中的实现为：</p>
<p>单机版：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value, <span class="keyword">final</span> Integer seconds)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;String, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.setex(key,seconds,value);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>集群版</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key, String value, Integer seconds)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> jedisCluster.setex(key,seconds,value);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="后台管理系统添加缓存代码："><a href="#后台管理系统添加缓存代码：" class="headerlink" title="后台管理系统添加缓存代码："></a>后台管理系统添加缓存代码：</h3><p>这里只修改一个类做下演示，毕竟只是个Demo，得抓紧时间了 ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.CatNode;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemCat;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemCatResult;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/8.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCatService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemCat</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisClient jedisClient;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_KEY = <span class="string">"MIGO_MANAGE_ITEM_CAT_LIST"</span>; <span class="comment">// 规则：项目名_模块名_业务名</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer REDIS_TIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span> * <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* @Autowired</span></div><div class="line">    private ItemCatMapper itemCatMapper;</div><div class="line"></div><div class="line"></div><div class="line">    public List&lt;ItemCat&gt; getItemCatList(Long parentId) &#123;</div><div class="line">        ItemCat example = new ItemCat();</div><div class="line">        example.setParentId(parentId);</div><div class="line">        return this.itemCatMapper.select(example);</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询，并生成jd页面类似的树状结构</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ItemCatResult <span class="title">getItemCatList</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 从缓存中命中，如果命中返回，没有命中继续查询</span></div><div class="line">            String jsonData = jedisClient.get(REDIS_KEY);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(jsonData)) &#123;</div><div class="line">                <span class="keyword">return</span> JsonUtils.jsonToPojo(jsonData,ItemCatResult.class);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        ItemCatResult itemCatResult=<span class="keyword">new</span> ItemCatResult();</div><div class="line"></div><div class="line">        <span class="comment">//调用递归方法查询商品分类列表</span></div><div class="line">        List catList=getItemCatList(<span class="number">0L</span>);</div><div class="line">        <span class="comment">//返回结果</span></div><div class="line">        itemCatResult.setCatNodes(catList);</div><div class="line">        <span class="keyword">return</span> itemCatResult;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List <span class="title">getItemCatList</span><span class="params">(<span class="keyword">long</span> parentId)</span> </span>&#123;</div><div class="line">        <span class="comment">//根据parentId查询列表</span></div><div class="line"></div><div class="line"></div><div class="line">        ItemCat example=<span class="keyword">new</span> ItemCat();</div><div class="line">        example.setParentId(parentId);</div><div class="line">        List&lt;ItemCat&gt; catList = <span class="keyword">super</span>.queryListByWhere(example);</div><div class="line">        List resultList=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (ItemCat itemCat : catList) &#123;</div><div class="line">            <span class="comment">//如果是父节点</span></div><div class="line">            <span class="keyword">if</span> (itemCat.getIsParent()) &#123;</div><div class="line">                CatNode node=<span class="keyword">new</span> CatNode();</div><div class="line">                node.setUrl(<span class="string">"/products/"</span>+itemCat.getId()+<span class="string">".html"</span>);</div><div class="line">                <span class="comment">//如果当前节点为第一级节点</span></div><div class="line">                <span class="keyword">if</span> (itemCat.getParentId()==<span class="number">0</span>) &#123;</div><div class="line">                    node.setName(<span class="string">"&lt;a href='/products/"</span>+itemCat.getId()+<span class="string">".html'&gt;"</span>+itemCat.getName()+<span class="string">"&lt;/a&gt;"</span>);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    node.setName(itemCat.getName());</div><div class="line">                &#125;</div><div class="line">                node.setItems(getItemCatList(itemCat.getId()));</div><div class="line">                <span class="comment">//将node添加到列表</span></div><div class="line">                resultList.add(node);</div><div class="line">                count++;</div><div class="line">                <span class="comment">//第一层只取14条记录</span></div><div class="line">                <span class="keyword">if</span> (parentId==<span class="number">0</span>&amp;&amp;count&gt;=<span class="number">14</span>)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//如果是最底层叶子节点</span></div><div class="line">                String item = <span class="string">"/products/"</span>+itemCat.getId()+<span class="string">".html|"</span> + itemCat.getName();</div><div class="line">                resultList.add(item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//将结果集写入到Redis中</span></div><div class="line">            <span class="keyword">this</span>.jedisClient.set(REDIS_KEY,JsonUtils.objectToJson(resultList),REDIS_TIME);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> resultList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161208_230058.png" alt=""></p>
<h3 id="前端系统添加缓存："><a href="#前端系统添加缓存：" class="headerlink" title="前端系统添加缓存："></a>前端系统添加缓存：</h3><p>前台门户系统添加缓存后，降低到后台系统的访问量，直接就优化了性能，也提高了用户体验度，这里拿<code>大广告位服务</code>做例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.migo.service.JedisClient;</div><div class="line"><span class="keyword">import</span> com.migo.utils.HttpClientUtil;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/4.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_KEY = <span class="string">"MIGO_PORTAL_AD1"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer REDIS_TIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisClient jedisClient;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;MIGO_MANAGE_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String MIGO_MANAGE_URL;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;AD1_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String AD1_URL;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAD1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 从缓存中命中，如果命中返回，没有命中继续查询</span></div><div class="line">            String jsonData = jedisClient.get(REDIS_KEY);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(jsonData)) &#123;</div><div class="line">                <span class="keyword">return</span> jsonData;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//调用后台管理系统的接口服务获取数据</span></div><div class="line">            String url=MIGO_MANAGE_URL+AD1_URL;</div><div class="line">            String jsonData = HttpClientUtil.doGet(url);</div><div class="line">            <span class="keyword">if</span> (jsonData==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//解析json数据</span></div><div class="line">            JsonNode jsonNode = MAPPER.readTree(jsonData);</div><div class="line">            ArrayNode rows = (ArrayNode) jsonNode.get(<span class="string">"rows"</span>);</div><div class="line">            List&lt;Content&gt; contents = JsonUtils.jsonToList(String.valueOf(rows), Content.class);</div><div class="line">            List&lt;Map&lt;String,Object&gt;&gt; result1=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (Content content : contents) &#123;</div><div class="line">                Map&lt;String,Object&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">                map.put(<span class="string">"srcB"</span>,content.getPic());</div><div class="line">                map.put(<span class="string">"height"</span>,<span class="number">240</span>);</div><div class="line">                map.put(<span class="string">"alt"</span>,content.getTitle());</div><div class="line">                map.put(<span class="string">"width"</span>,<span class="number">670</span>);</div><div class="line">                map.put(<span class="string">"src"</span>,content.getPic2());</div><div class="line">                map.put(<span class="string">"widthB"</span>,<span class="number">550</span>);</div><div class="line">                map.put(<span class="string">"href"</span>,content.getUrl());</div><div class="line">                map.put(<span class="string">"heightB"</span>,<span class="number">240</span>);</div><div class="line">                result1.add(map);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">this</span>.jedisClient.set(REDIS_KEY,JsonUtils.objectToJson(result1),REDIS_TIME);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> JsonUtils.objectToJson(result1);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行测试(成功拿到)：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161208_233144.png" alt=""></p>
<h3 id="前后数据不同步问题解决："><a href="#前后数据不同步问题解决：" class="headerlink" title="前后数据不同步问题解决："></a>前后数据不同步问题解决：</h3><p>  这样就出现了一个问题，后台商品或者其他数据修改后，前台门户系统会出现缓存不一致的情况，这样我们可以做一个临时的解决方案，就是<code>portal</code>系统可以提供一个对外服务，供后台管理系统调用，假如数据修改，调用服务通知<code>portal</code>系统删除缓存中的相应数据即可</p>
<p>​      后面会通过<code>rabbitMQ</code>来进一步解决此问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-业务逻辑中添加redis-缓存-2-二十&quot;&gt;&lt;a href=&quot;#Migo商城2-0-业务逻辑中添加redis-缓存-2-二十&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 业务逻辑中添加redis 缓存(2) 二十&quot;&gt;&lt;/a&gt;Migo商城2.0 业务逻辑中添加redis 缓存(2) 二十&lt;/h2&gt;&lt;h3 id=&quot;业务逻辑中添加缓存&quot;&gt;&lt;a href=&quot;#业务逻辑中添加缓存&quot; class=&quot;headerlink&quot; title=&quot;业务逻辑中添加缓存&quot;&gt;&lt;/a&gt;业务逻辑中添加缓存&lt;/h3&gt;&lt;h4 id=&quot;缓存应该添加到服务层。&quot;&gt;&lt;a href=&quot;#缓存应该添加到服务层。&quot; class=&quot;headerlink&quot; title=&quot;缓存应该添加到服务层。&quot;&gt;&lt;/a&gt;缓存应该添加到服务层。&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;查询数据库之前查询缓存&lt;/li&gt;
&lt;li&gt;如何缓存中有，直接响应数据&lt;/li&gt;
&lt;li&gt;如果缓存中没有查数据库&lt;/li&gt;
&lt;li&gt;把查询结果缓存到redis&lt;/li&gt;
&lt;li&gt;返回结果
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 业务逻辑中添加redis 缓存(1) 十九</title>
    <link href="https://muyinchen.github.io/2016/12/08/Migo%E5%95%86%E5%9F%8E2.0%20%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E4%B8%AD%E6%B7%BB%E5%8A%A0redis%20%E7%BC%93%E5%AD%98(1)%20%E5%8D%81%E4%B9%9D/"/>
    <id>https://muyinchen.github.io/2016/12/08/Migo商城2.0 业务逻辑中添加redis 缓存(1) 十九/</id>
    <published>2016-12-07T17:28:19.282Z</published>
    <updated>2016-12-07T17:26:46.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-业务逻辑中添加redis-缓存-1-十九"><a href="#Migo商城2-0-业务逻辑中添加redis-缓存-1-十九" class="headerlink" title="Migo商城2.0 业务逻辑中添加redis 缓存(1) 十九"></a>Migo商城2.0 业务逻辑中添加redis 缓存(1) 十九</h2><p>分单机版和集群版，之前附件有说单机版了这里说下另外一种集群：<br><a id="more"></a></p>
<h3 id="集群的搭建（伪分布式）"><a href="#集群的搭建（伪分布式）" class="headerlink" title="集群的搭建（伪分布式）"></a>集群的搭建（伪分布式）</h3><p>集群中至少有三个节点(选举模式)，每个节点有一备份节点。需要6台服务器。</p>
<p>需要6个<code>redis</code>实例。需要每个实例运行在不同的端口号。</p>
<p>搭建步骤：</p>
<p>第一步：创建6个<code>redis</code>实例</p>
<p>第二步：修改<code>redis</code>的配置文件，修改端口号，开启集群。</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161207_224849.png" alt=""></p>
<p>第三步：启动每个<code>redis</code>实例。</p>
<p>第四步：创建集群，需要使用<code>ruby</code>脚本。需要安装<code>ruby</code>环境。</p>
<p>安装<code>ruby</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install ruby</div><div class="line">yum install rubygems</div></pre></td></tr></table></figure>
<p>安装<code>ruby</code>和<code>redis</code>的接口程序：</p>
<p>拷贝<code>redis-3.0.0.gem</code>至<code>/usr/local</code>下</p>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install /usr/<span class="built_in">local</span>/redis-3.0.0.gem</div></pre></td></tr></table></figure>
<p>使用<code>redis-trib.rb</code>脚本创建集群。</p>
<p>第五步：执行创建集群命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis-cluster]<span class="comment"># ./redis-trib.rb create --replicas 1 192.168.25.153:7001 192.168.25.153:7002 192.168.25.153:7003 192.168.25.153:7004 192.168.25.153:7005  192.168.25.153:7006</span></div><div class="line">&gt;&gt;&gt; Creating cluster</div><div class="line">Connecting to node 192.168.25.153:7001: OK</div><div class="line">Connecting to node 192.168.25.153:7002: OK</div><div class="line">Connecting to node 192.168.25.153:7003: OK</div><div class="line">Connecting to node 192.168.25.153:7004: OK</div><div class="line">Connecting to node 192.168.25.153:7005: OK</div><div class="line">Connecting to node 192.168.25.153:7006: OK</div><div class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</div><div class="line">Using 3 masters:</div><div class="line">192.168.25.153:7001</div><div class="line">192.168.25.153:7002</div><div class="line">192.168.25.153:7003</div><div class="line">Adding replica 192.168.25.153:7004 to 192.168.25.153:7001</div><div class="line">Adding replica 192.168.25.153:7005 to 192.168.25.153:7002</div><div class="line">Adding replica 192.168.25.153:7006 to 192.168.25.153:7003</div><div class="line">M: be19d1b9fe8efa5c136defcce7562dcafce74ede 192.168.25.153:7001</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">M: 5c4f1a5bab8717c3631809d781e08589924b1377 192.168.25.153:7002</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">M: 26a456a8757a2685ea0cad2bad4e946503c54871 192.168.25.153:7003</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">S: 40430837d5120024d40a4f96066ab6e2ddef73f2 192.168.25.153:7004</div><div class="line">   replicates be19d1b9fe8efa5c136defcce7562dcafce74ede</div><div class="line">S: ae04c79dded411921b84dbef93afc485673d6408 192.168.25.153:7005</div><div class="line">   replicates 5c4f1a5bab8717c3631809d781e08589924b1377</div><div class="line">S: 5d8886d27f2e45f2b617ae5474f187f53e36309e 192.168.25.153:7006</div><div class="line">   replicates 26a456a8757a2685ea0cad2bad4e946503c54871</div><div class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">'yes'</span> to accept): yes</div><div class="line">&gt;&gt;&gt; Nodes configuration updated</div><div class="line">&gt;&gt;&gt; Assign a different config epoch to each node</div><div class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</div><div class="line">Waiting <span class="keyword">for</span> the cluster to join....</div><div class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.25.153:7001)</div><div class="line">M: be19d1b9fe8efa5c136defcce7562dcafce74ede 192.168.25.153:7001</div><div class="line">   slots:0-5460 (5461 slots) master</div><div class="line">M: 5c4f1a5bab8717c3631809d781e08589924b1377 192.168.25.153:7002</div><div class="line">   slots:5461-10922 (5462 slots) master</div><div class="line">M: 26a456a8757a2685ea0cad2bad4e946503c54871 192.168.25.153:7003</div><div class="line">   slots:10923-16383 (5461 slots) master</div><div class="line">M: 40430837d5120024d40a4f96066ab6e2ddef73f2 192.168.25.153:7004</div><div class="line">   slots: (0 slots) master</div><div class="line">   replicates be19d1b9fe8efa5c136defcce7562dcafce74ede</div><div class="line">M: ae04c79dded411921b84dbef93afc485673d6408 192.168.25.153:7005</div><div class="line">   slots: (0 slots) master</div><div class="line">   replicates 5c4f1a5bab8717c3631809d781e08589924b1377</div><div class="line">M: 5d8886d27f2e45f2b617ae5474f187f53e36309e 192.168.25.153:7006</div><div class="line">   slots: (0 slots) master</div><div class="line">   replicates 26a456a8757a2685ea0cad2bad4e946503c54871</div><div class="line">[OK] All nodes agree about slots configuration.</div><div class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</div><div class="line">&gt;&gt;&gt; Check slots coverage...</div><div class="line">[OK] All 16384 slots covered.</div><div class="line">[root@localhost redis-cluster]<span class="comment"># </span></div><div class="line">./redis-trib.rb create --replicas 1 192.168.131.102:7001 192.168.131.102:7002 192.168.131.102:7003 192.168.131.102:7004 192.168.131.102:7005  192.168.131.102:7006</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis-cluster]<span class="comment"># redis01/redis-cli -p 7004 -c</span></div><div class="line">连接集群需要添加-c参数</div></pre></td></tr></table></figure>
<p>项目中导入<code>jedis</code>的依赖，因为各个系统都有可能加缓存，所以，代码实现放在<code>common</code>工程中，注意事项看代码中的解释</p>
<p>这里就涉及到了什么时候定义接口和实现，同一个接口可以有不一样的实现，这里是分为单机版和集群版两种实现，这就是所谓的面向接口</p>
<p>先定义一个接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/7.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JedisClient</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">get</span><span class="params">(String key)</span></span>;</div><div class="line">    <span class="function">String <span class="title">set</span><span class="params">(String key,String value)</span></span>;</div><div class="line">    <span class="function">String <span class="title">hget</span><span class="params">(String hkey,String key)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">hset</span><span class="params">(String hkey,String key,String value)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">expire</span><span class="params">(String key,<span class="keyword">int</span> second)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">ttl</span><span class="params">(String key)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">del</span><span class="params">(String key)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">hdel</span><span class="params">(String hkey,String key)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>单机版<code>redis</code>实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.service.JedisClient;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/7.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClientSingle</span> <span class="keyword">implements</span> <span class="title">JedisClient</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 有些系统可能不需要添加redis缓存，反而依赖了common项目，但是自己容器内又没有对redis做相应配置,</div><div class="line">     * 故 required = false 这样就可以做到，容器内有则注入，没有就忽略</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> JedisPool jedisPool;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        String result=jedis.get(key);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        String result=jedis.set(key, value);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hget</span><span class="params">(String hkey, String key)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        String result=jedis.hget(hkey, key);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hset</span><span class="params">(String hkey, String key, String value)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        Long result = jedis.hset(hkey, key, value);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        Long result = jedis.incr(key);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        Long result = jedis.decr(key);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">int</span> second)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        Long result = jedis.expire(key, second);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">ttl</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        Long result = jedis.ttl(key);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">del</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        Long result = jedis.del(key);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hdel</span><span class="params">(String hkey, String key)</span> </span>&#123;</div><div class="line">        Jedis jedis=jedisPool.getResource();</div><div class="line">        Long result = jedis.hdel(hkey, key);</div><div class="line">        jedis.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>集群版<code>redis</code>实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.service.JedisClient;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/7.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClientCluster</span> <span class="keyword">implements</span> <span class="title">JedisClient</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 有些系统可能不需要添加redis缓存，反而依赖了common项目，但是自己容器内又没有对redis做相应配置,</div><div class="line">     * 故 required = false 这样就可以做到，容器内有则注入，没有就忽略</div><div class="line">     */</div><div class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> JedisCluster jedisCluster;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> jedisCluster.set(key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hget</span><span class="params">(String hkey, String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.hget(hkey, key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hset</span><span class="params">(String hkey, String key, String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.hset(hkey, key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.incr(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.decr(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">int</span> second)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.expire(key, second);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">ttl</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.ttl(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">del</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.del(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hdel</span><span class="params">(String hkey, String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jedisCluster.hdel(hkey,key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="抽取模板方法"><a href="#抽取模板方法" class="headerlink" title="抽取模板方法"></a>抽取模板方法</h3><p>单机版那里可以看到方法里有比较多的重复代码，这里就讲一下Spring对模板代码的抽取方法：</p>
<p>拿大家最熟悉的<code>jdbctemplate</code>为例：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161208_002341.png" alt=""></p>
<h4 id="第一步-任务逻辑接口-自己需要实现的逻辑-："><a href="#第一步-任务逻辑接口-自己需要实现的逻辑-：" class="headerlink" title="第一步 任务逻辑接口(自己需要实现的逻辑)："></a>第一步 任务逻辑接口(自己需要实现的逻辑)：</h4><p><code>WorkCallback</code> 参考上图中的<code>1</code>，因参数未知类型，所以设置为E</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/8.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkCallback</span>&lt;<span class="title">T</span>,<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">doWorkCallback</span><span class="params">(E e)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第二步-实现类中定义execute方法"><a href="#第二步-实现类中定义execute方法" class="headerlink" title="第二步 实现类中定义execute方法"></a>第二步 实现类中定义<code>execute</code>方法</h4><p>返回类型依然是<code>T</code> 参考上图中<code>2</code>和<code>3</code>，参数就是第一步代码中定义的接口实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">excute</span><span class="params">(WorkCallback&lt;T,Jedis&gt; workCallback)</span></span>&#123;</div><div class="line">        Jedis jedis=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jedis = jedisPool.getResource();</div><div class="line">            <span class="keyword">return</span> workCallback.doWorkCallback(jedis);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> !=jedis)&#123;</div><div class="line">                jedis.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="第三步，调用类中调用excute方法并实现相应接口任务逻辑"><a href="#第三步，调用类中调用excute方法并实现相应接口任务逻辑" class="headerlink" title="第三步，调用类中调用excute方法并实现相应接口任务逻辑"></a>第三步，调用类中调用excute方法并实现相应接口任务逻辑</h4><p>因为要传入的是类型，所以返回的<code>long</code>修改为装箱类<code>Long</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.service.JedisClient;</div><div class="line"><span class="keyword">import</span> com.migo.service.WorkCallback;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/7.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClientSingle</span> <span class="keyword">implements</span> <span class="title">JedisClient</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 有些系统可能不需要添加redis缓存，反而依赖了common项目，但是自己容器内又没有对redis做相应配置,</div><div class="line">     * 故 required = false 这样就可以做到，容器内有则注入，没有就忽略</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> JedisPool jedisPool;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">excute</span><span class="params">(WorkCallback&lt;T,Jedis&gt; workCallback)</span></span>&#123;</div><div class="line">        Jedis jedis=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jedis = jedisPool.getResource();</div><div class="line">            <span class="keyword">return</span> workCallback.doWorkCallback(jedis);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> !=jedis)&#123;</div><div class="line">                jedis.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        String result=jedis.get(key);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;String, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.get(key);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;String, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.set(key, value);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hget</span><span class="params">(<span class="keyword">final</span> String hkey, <span class="keyword">final</span> String key)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        String result=jedis.hget(hkey, key);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;String, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.hget(hkey, key);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hset</span><span class="params">(<span class="keyword">final</span> String hkey, <span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        Long result = jedis.hset(hkey, key, value);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;Long, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.hset(hkey, key, value);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incr</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        Long result = jedis.incr(key);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;Long, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.incr(key);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decr</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        Long result = jedis.decr(key);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;Long, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.decr(key);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="keyword">int</span> second)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        Long result = jedis.expire(key, second);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;Long, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.expire(key, second);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">ttl</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        Long result = jedis.ttl(key);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;Long, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.ttl(key);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">del</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        Long result = jedis.del(key);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;Long, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.del(key);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hdel</span><span class="params">(<span class="keyword">final</span> String hkey, <span class="keyword">final</span> String key)</span> </span>&#123;</div><div class="line">        <span class="comment">/*Jedis jedis=jedisPool.getResource();</span></div><div class="line">        Long result = jedis.hdel(hkey, key);</div><div class="line">        jedis.close();</div><div class="line">        return result;*/</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.excute(<span class="keyword">new</span> WorkCallback&lt;Long, Jedis&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doWorkCallback</span><span class="params">(Jedis jedis)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> jedis.hdel(hkey,key);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>改造完毕，其实模板类方法的设计也不过如此</p>
<h3 id="Spring和jedis的整合"><a href="#Spring和jedis的整合" class="headerlink" title="Spring和jedis的整合"></a><code>Spring</code>和<code>jedis</code>的整合</h3><p><code>migo-manage</code>  <code>web</code>项目中的<code>service</code>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 配置包扫描器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo.service"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置redis客户端单机版 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPool"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPool"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"192.168.42.131"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置redis客户端实现类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisClientSingle"</span> <span class="attr">class</span>=<span class="string">"com.migo.service.impl.JedisClientSingle"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置redis客户端集群版 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;bean id="jedisCluster" class="redis.clients.jedis.JedisCluster"&gt;</span></div><div class="line">       &lt;constructor-arg&gt;</div><div class="line">           &lt;set&gt;</div><div class="line">               &lt;bean class="redis.clients.jedis.HostAndPort"&gt;</div><div class="line">                   &lt;constructor-arg name="host" value="192.168.42.131"/&gt;</div><div class="line">                   &lt;constructor-arg name="port" value="7001"/&gt;</div><div class="line">               &lt;/bean&gt;</div><div class="line">               &lt;bean class="redis.clients.jedis.HostAndPort"&gt;</div><div class="line">                   &lt;constructor-arg name="host" value="192.168.42.131"/&gt;</div><div class="line">                   &lt;constructor-arg name="port" value="7002"/&gt;</div><div class="line">               &lt;/bean&gt;</div><div class="line">               &lt;bean class="redis.clients.jedis.HostAndPort"&gt;</div><div class="line">                   &lt;constructor-arg name="host" value="192.168.42.131"/&gt;</div><div class="line">                   &lt;constructor-arg name="port" value="7003"/&gt;</div><div class="line">               &lt;/bean&gt;</div><div class="line">               &lt;bean class="redis.clients.jedis.HostAndPort"&gt;</div><div class="line">                   &lt;constructor-arg name="host" value="192.168.42.131"/&gt;</div><div class="line">                   &lt;constructor-arg name="port" value="7004"/&gt;</div><div class="line">               &lt;/bean&gt;</div><div class="line">               &lt;bean class="redis.clients.jedis.HostAndPort"&gt;</div><div class="line">                   &lt;constructor-arg name="host" value="192.168.42.131"/&gt;</div><div class="line">                   &lt;constructor-arg name="port" value="7005"/&gt;</div><div class="line">               &lt;/bean&gt;</div><div class="line">               &lt;bean class="redis.clients.jedis.HostAndPort"&gt;</div><div class="line">                   &lt;constructor-arg name="host" value="192.168.42.131"/&gt;</div><div class="line">                   &lt;constructor-arg name="port" value="7006"/&gt;</div><div class="line">               &lt;/bean&gt;</div><div class="line">           &lt;/set&gt;</div><div class="line">       &lt;/constructor-arg&gt;</div><div class="line">   &lt;/bean&gt;</div><div class="line">   &lt;bean id="jedisClientCluster" class="com.migo.service.impl.JedisClientCluster"/&gt;--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-业务逻辑中添加redis-缓存-1-十九&quot;&gt;&lt;a href=&quot;#Migo商城2-0-业务逻辑中添加redis-缓存-1-十九&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 业务逻辑中添加redis 缓存(1) 十九&quot;&gt;&lt;/a&gt;Migo商城2.0 业务逻辑中添加redis 缓存(1) 十九&lt;/h2&gt;&lt;p&gt;分单机版和集群版，之前附件有说单机版了这里说下另外一种集群：&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>图解 HTTP 协议</title>
    <link href="https://muyinchen.github.io/2016/12/06/%E5%9B%BE%E8%A7%A3%20HTTP%20%E5%8D%8F%E8%AE%AE/"/>
    <id>https://muyinchen.github.io/2016/12/06/图解 HTTP 协议/</id>
    <published>2016-12-06T15:08:14.667Z</published>
    <updated>2016-12-06T15:28:32.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图解-HTTP-协议"><a href="#图解-HTTP-协议" class="headerlink" title="图解 HTTP 协议"></a>图解 HTTP 协议</h1><h1 id="一、技术基石及概述"><a href="#一、技术基石及概述" class="headerlink" title="一、技术基石及概述"></a>一、技术基石及概述</h1><p>问：什么是HTTP?<br>答：HTTP是一个客户端和服务器端<strong>请求</strong>和<strong>响应</strong>的<strong>标准TCP</strong>。其实建立在TCP之上的。</p>
<a id="more"></a>
<p>当我们打开百度网页时，是这样的：</p>
<blockquote>
<p><a href="https://www.baidu.com" target="_blank" rel="external">https://www.baidu.com</a></p>
</blockquote>
<p>多了个S，其实S表示TLS、SSL。在这里不做解释，因此HTTP的技术基石如图所示：</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/b557ca7c801cfa27d2743eb9cb89dfb0.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/b557ca7c801cfa27d2743eb9cb89dfb0.png" alt="1"></a></p>
<p>那HTTP协议呢？HTTP协议（HyperText Transfer Protocol）,即超文本传输协议是用于服务器传输到客户端浏览器的传输协议。Web上，服务器和客户端利用HTTP协议进行通信会话。有OOP思想的得出结论：其会话的结构是一个简单的请求/响应序列，即浏览器发出请求和服务器做出响应。</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/331e061736edef967e804db9d796a421.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/331e061736edef967e804db9d796a421.png" alt="11"></a></p>
<h1 id="二、深入理解技术基石和工作流程"><a href="#二、深入理解技术基石和工作流程" class="headerlink" title="二、深入理解技术基石和工作流程"></a>二、深入理解技术基石和工作流程</h1><p>既然HTTP是基于传输层的TCP协议，而TCP协议是<strong>面向连接</strong>的<strong>端到端</strong>的协议。因此，使用HTTP协议传输前，首先建立TCP连接，就是因此在谈的TCP链接过程的“三次握手”。如图</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/55931284a671fe8a4122ff8419e1fb5e.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/55931284a671fe8a4122ff8419e1fb5e.png" alt="1_thumb2"></a></p>
<p>在Web上，HTTP协议使用TCP协议而不是UDP协议的原因在于一个网页必须传送很多数据，而且保证其完整性。TCP协议提供传输控制，按顺序组织数据和错误纠正的一系列功能。</p>
<p>一次HTTP操作称为一个事务，其工作过程可分为四步：</p>
<blockquote>
<p>1、客户端与服务器需要建立连接。（比如某个超级链接，HTTP就开始了。）</p>
<p>2、建立连接后，发送请求。</p>
<p>3、服务器接到请求后，响应其响应信息。</p>
<p>4、客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</p>
</blockquote>
<p>建立连接，其实建立在TCP连接基础之上。图解核心工作过程（即省去连接过程）如下：</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/580cb803800d76ec3d8ffdae2ccadfa3.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/580cb803800d76ec3d8ffdae2ccadfa3.png" alt="13"></a></p>
<h1 id="三、详解工作过程的HTTP报文"><a href="#三、详解工作过程的HTTP报文" class="headerlink" title="三、详解工作过程的HTTP报文"></a>三、详解工作过程的HTTP报文</h1><p>HTTP报文由从客户机到服务器的请求和从服务器到客户机的响应构成。</p>
<p><strong>一、请求报文</strong>格式如下：</p>
<blockquote>
<p>请求行</p>
<p>通用信息头</p>
<p>请求头</p>
<p>实体头</p>
<p><strong>（空行）</strong></p>
<p>报文主体</p>
</blockquote>
<p>如图，请求我博客一篇文章时发送的报文内容：</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/d6550b0e1a4af283049b46a819c4489b.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/d6550b0e1a4af283049b46a819c4489b.png" alt="image1"></a></p>
<p>对于其中请求报文详解:</p>
<blockquote>
<p>1、请求行</p>
<p>方法字段 + URL + Http协议版本</p>
<p>2、通用信息头</p>
<p>Cache-Control头域：指定请求和响应遵循的缓存机制。</p>
<p>keep-alive 是其连接持续有效【在下面百度的例子，会得到验证】</p>
<p>3、请求头</p>
<p>Host头域，脑补吧</p>
<p>Referer头域：允许客户端指定请求URL的资源地址。</p>
<p>User-Agent头域：请求用户信息。【可以看出一些客户端浏览器的内核信息】</p>
<p>4、报文主体</p>
<p>如图中的 “ p=278 ”一般来说，请求主体少不了请求参数。</p>
</blockquote>
<p><strong>二、应答报文</strong>格式如下：</p>
<blockquote>
<p>状态行</p>
<p>通用信息头</p>
<p>响应头</p>
<p>实体头</p>
<p><strong>（空行）</strong></p>
<p>报文主体</p>
</blockquote>
<p>如图，就是这篇博客响应的内容:</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/07ee4c8d12fdfab3389b324410837a0b.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/07ee4c8d12fdfab3389b324410837a0b.png" alt="image3_thumb"></a></p>
<p>对其中响应报文详解：</p>
<blockquote>
<p>1、状态行</p>
<p>HTTP协议版本 + 状态码 + 状态代码的文本描述</p>
<p>【比如这里，200 代表请求成功】</p>
<p>2、通用信息头</p>
<p>keep-alive 是其连接持续有效【在下面百度的例子，会得到验证】</p>
<p>Date头域：时间描述</p>
<p>3、响应头</p>
<p>Server头：处理请求的原始服务器的软件信息。</p>
<p>4、实体头</p>
<p>Content-Type头：便是接收方实体的介质类型。（这也表示了你的报文主体是什么。）</p>
<p><strong>（空行）</strong></p>
<p>5、报文主体</p>
<p>这里就是HTML响应页面了，在截图tab页中的response中可查看。</p>
</blockquote>
<p>一次简单的请求/响应就完成了。</p>
<h1 id="三、HTTP协议知识补充"><a href="#三、HTTP协议知识补充" class="headerlink" title="三、HTTP协议知识补充"></a>三、HTTP协议知识补充</h1><p>请求报文相关：</p>
<p>请求行-请求方法</p>
<blockquote>
<p>GET 请求获取Request-URI所标识的资源<br>POST 在Request-URI所标识的资源后附加新的数据<br>HEAD 请求获取由Request-URI所标识的资源的响应消息报头<br>PUT 请求服务器存储一个资源，并用Request-URI作为其标识<br>DELETE 请求服务器删除Request-URI所标识的资源<br>TRACE 请求服务器回送收到的请求信息，主要用于测试或诊断<br>CONNECT 保留将来使用<br>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求</p>
</blockquote>
<p>响应报文相关：</p>
<p>响应行-状态码</p>
<blockquote>
<p>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求</p>
</blockquote>
<p>常见的状态码</p>
<blockquote>
<p>200 OK</p>
<p>请求成功（其后是对GET和POST请求的应答文档。）</p>
<p>304 Not Modified</p>
<p>未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</p>
<p>404 Not Found</p>
<p>服务器无法找到被请求的页面。</p>
<p>500 Internal Server Error</p>
<p>请求未完成。服务器遇到不可预知的情况。</p>
</blockquote>
<p>比如304，在浏览器第一次打开百度时，如图所示:</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161206_225741.png" alt=""></p>
<p>刷新一下：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161206_224259.png" alt=""></p>
<p>这上面的304就证明了</p>
<blockquote>
<p>1、304状态码:有些图片和js文件在本地客户端缓存，再次请求后，缓存的文件可以使用。</p>
<p>2、以上所以HTTP请求，只靠一个TCP连接，这就是所谓的<strong>持久连接</strong>。</p>
</blockquote>
<h1 id="四、关于HTTP协议的Web应用框架或者规范"><a href="#四、关于HTTP协议的Web应用框架或者规范" class="headerlink" title="四、关于HTTP协议的Web应用框架或者规范"></a>四、关于HTTP协议的Web应用框架或者规范</h1><p>JavaEE的人会知道Servlet规范。其中Web应用容器都实现了HTTP协议中的对象，即请求和响应对象。比如 javax.servlet.http.HttpServletResponse 对象中肯定有对状态码描述，如图</p>
<p><a href="http://jbcdn2.b0.upaiyun.com/2016/11/a62c9e69927cec236295cdd1a909650b.png" target="_blank" rel="external"><img src="http://jbcdn2.b0.upaiyun.com/2016/11/a62c9e69927cec236295cdd1a909650b.png" alt="image2"></a></p>
<p>在Spring中的表现形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.http;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Java 5 enumeration of HTTP status codes.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;The HTTP status code series can be retrieved via &#123;<span class="doctag">@link</span> #series()&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Arjen Poutsma</div><div class="line"> * <span class="doctag">@author</span> Sebastien Deleuze</div><div class="line"> * <span class="doctag">@see</span> HttpStatus.Series</div><div class="line"> * <span class="doctag">@see</span> &lt;a href="http://www.iana.org/assignments/http-status-codes"&gt;HTTP Status Code Registry&lt;/a&gt;</div><div class="line"> * <span class="doctag">@see</span> &lt;a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;List of HTTP status codes - Wikipedia&lt;/a&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HttpStatus &#123;</div><div class="line"></div><div class="line">	<span class="comment">// 1xx Informational</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 100 Continue&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.2.1"&gt;HTTP/1.1: Semantics and Content, section 6.2.1&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	CONTINUE(<span class="number">100</span>, <span class="string">"Continue"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 101 Switching Protocols&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.2.2"&gt;HTTP/1.1: Semantics and Content, section 6.2.2&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	SWITCHING_PROTOCOLS(<span class="number">101</span>, <span class="string">"Switching Protocols"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 102 Processing&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc2518#section-10.1"&gt;WebDAV&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	PROCESSING(<span class="number">102</span>, <span class="string">"Processing"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 103 Checkpoint&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal"&gt;A proposal for supporting</div><div class="line">	 * resumable POST/PUT HTTP requests in HTTP/1.0&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	CHECKPOINT(<span class="number">103</span>, <span class="string">"Checkpoint"</span>),</div><div class="line"></div><div class="line">	<span class="comment">// 2xx Success</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 200 OK&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.1"&gt;HTTP/1.1: Semantics and Content, section 6.3.1&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	OK(<span class="number">200</span>, <span class="string">"OK"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 201 Created&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.2"&gt;HTTP/1.1: Semantics and Content, section 6.3.2&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	CREATED(<span class="number">201</span>, <span class="string">"Created"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 202 Accepted&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.3"&gt;HTTP/1.1: Semantics and Content, section 6.3.3&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	ACCEPTED(<span class="number">202</span>, <span class="string">"Accepted"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 203 Non-Authoritative Information&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.4"&gt;HTTP/1.1: Semantics and Content, section 6.3.4&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	NON_AUTHORITATIVE_INFORMATION(<span class="number">203</span>, <span class="string">"Non-Authoritative Information"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 204 No Content&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.5"&gt;HTTP/1.1: Semantics and Content, section 6.3.5&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	NO_CONTENT(<span class="number">204</span>, <span class="string">"No Content"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 205 Reset Content&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7231#section-6.3.6"&gt;HTTP/1.1: Semantics and Content, section 6.3.6&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	RESET_CONTENT(<span class="number">205</span>, <span class="string">"Reset Content"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 206 Partial Content&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc7233#section-4.1"&gt;HTTP/1.1: Range Requests, section 4.1&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	PARTIAL_CONTENT(<span class="number">206</span>, <span class="string">"Partial Content"</span>),</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@code</span> 207 Multi-Status&#125;.</div><div class="line">	 * <span class="doctag">@see</span> &lt;a href="http://tools.ietf.org/html/rfc4918#section-13"&gt;WebDAV&lt;/a&gt;</div><div class="line">	 */</div><div class="line">	MULTI_STATUS(<span class="number">207</span>, <span class="string">"Multi-Status"</span>),</div></pre></td></tr></table></figure>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>回顾全文，HTTP协议其实就是我们对话一样，语言就是其中的协议。所以掌握HTTP协议明白以下几点就好：</p>
<blockquote>
<p>1、用什么通过HTTP协议通信</p>
<p>2、怎么通过HTTP协议通信</p>
</blockquote>
<p>原文出处<a href="http://www.bysocket.com/?p=282，其实主要还是最后我添加的那个Spring代码，具体涉及到的应用做migo2.0里体现的很多地方，后端的话如图：" target="_blank" rel="external">http://www.bysocket.com/?p=282，其实主要还是最后我添加的那个Spring代码，具体涉及到的应用做migo2.0里体现的很多地方，后端的话如图：</a></p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161206_230156.png" alt=""></p>
<p>前端代码请参考本人migo2.0一系列博客内容</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图解-HTTP-协议&quot;&gt;&lt;a href=&quot;#图解-HTTP-协议&quot; class=&quot;headerlink&quot; title=&quot;图解 HTTP 协议&quot;&gt;&lt;/a&gt;图解 HTTP 协议&lt;/h1&gt;&lt;h1 id=&quot;一、技术基石及概述&quot;&gt;&lt;a href=&quot;#一、技术基石及概述&quot; class=&quot;headerlink&quot; title=&quot;一、技术基石及概述&quot;&gt;&lt;/a&gt;一、技术基石及概述&lt;/h1&gt;&lt;p&gt;问：什么是HTTP?&lt;br&gt;答：HTTP是一个客户端和服务器端&lt;strong&gt;请求&lt;/strong&gt;和&lt;strong&gt;响应&lt;/strong&gt;的&lt;strong&gt;标准TCP&lt;/strong&gt;。其实建立在TCP之上的。&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://muyinchen.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础" scheme="https://muyinchen.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二</title>
    <link href="https://muyinchen.github.io/2016/12/05/Migo%E5%95%86%E5%9F%8E2.0%20Redis%203.2%E5%AE%89%E8%A3%85%E5%8F%8A%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%20%E9%99%84%E4%BA%8C/"/>
    <id>https://muyinchen.github.io/2016/12/05/Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二/</id>
    <published>2016-12-04T17:25:16.378Z</published>
    <updated>2016-12-04T17:29:15.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-Redis-3-2安装及主从复制详细配置及应用场景-附二"><a href="#Migo商城2-0-Redis-3-2安装及主从复制详细配置及应用场景-附二" class="headerlink" title="Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二"></a>Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二</h2><p>之前存的东西，拿出来改改</p>
<h2 id="一、编译安装"><a href="#一、编译安装" class="headerlink" title="一、编译安装"></a>一、编译安装</h2><p>1、下载安装包：<code>http://download.redis.io/releases/redis-3.2.3.tar.gz</code><br>目前最新的版本，你也可以打开redis官方的下载页下载合适版本<code>http://redis.io/download</code><br>2、开始安装<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> wget http://download.redis.io/releases/redis-3.2.3.tar.gz</div><div class="line">$ tar xzf redis-3.2.3.tar.gz</div><div class="line">$ <span class="built_in">cd</span> redis-3.2.3</div><div class="line">$ make</div><div class="line">$ make <span class="built_in">test</span>  <span class="comment">#可以先执行make test，查看是否缺少依赖包</span></div><div class="line">$ yum install tcl -y  <span class="comment">#执行完发现需要安装tcl组件</span></div><div class="line">$ make install</div></pre></td></tr></table></figure></p>
<p>无报错则安装完成，程序文件被安装在了<code>/usr/local/bin</code>目录下<br>3、复制配置文件<code>redis.conf</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir /etc/redis</div><div class="line">$ cp ../redis-3.2.3/redis.conf /etc/redis/6379.conf  <span class="comment">#复制安装目录下生成的redis配置文件到etc目录</span></div></pre></td></tr></table></figure>
<p>4、启动报错处理</p>
<p>我们先不做任何配置启动测试一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ /usr/<span class="built_in">local</span>/bin/redis-server /etc/redis/6379.conf</div><div class="line">                _._                                                  </div><div class="line">           _.-``__ <span class="string">''</span>-._                                             </div><div class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 3.2.3 (00000000/0) 64 bit</div><div class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </div><div class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></div><div class="line"> |`-._`-...-` __...-.``-._|'` _.-<span class="string">'|     Port: 6379</span></div><div class="line"> |    `-._   `._    /     _.-'    |     PID: 1106</div><div class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </div><div class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></div><div class="line"> |    `-._`-._        _.-'_.-<span class="string">'    |           http://redis.io        </span></div><div class="line">  `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span>                                   </div><div class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></div><div class="line"> |    `-._`-._        _.-'_.-<span class="string">'    |                                  </span></div><div class="line">  `-._    `-._`-.__.-'_.-<span class="string">'    _.-'</span>                                   </div><div class="line">      `-._    `-.__.-<span class="string">'    _.-'</span>                                       </div><div class="line">          `-._        _.-<span class="string">'                                           </span></div><div class="line">              `-.__.-'                                               </div><div class="line">8989:S 17 Aug 15:33:05.472 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></div><div class="line">8989:S 17 Aug 15:33:05.472 <span class="comment"># Server started, Redis version 3.2.3</span></div><div class="line">8989:S 17 Aug 15:33:05.472 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span></div><div class="line">8989:S 17 Aug 15:33:05.472 <span class="comment"># WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span></div></pre></td></tr></table></figure>
<p><code>redis</code>默认是前台运行，我们后边再说怎么配置后台运行，这时发现有三个错误，请不要忽略这些信息，接下来我们处理一下这三个错误：<br><strong>1）</strong>第一个错误大概是说<code>somaxconn</code>的值<code>128</code>设置过小，从<code>/proc/sys/net/core/somaxconn</code>这个路径也可大概知道这个值的设置是关于网络连接中某个最大值的限定设置，此值表示网络连接的队列大小，在配置文件<code>redis.conf</code>中的“<code>tcp-backlog 511</code>”就配置在高并发环境下的最大队列大小，此值受限于系统的<code>somaxconn</code>与<code>tcp_max_syn_backlog</code>这两个值，所以应该把这两个内核参数值调大，具体解决方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/sysctl.conf</div><div class="line">$ net.core.somaxconn = 20480  <span class="comment">#最大队列长度，应付突发的大并发连接请求，默认为128</span></div><div class="line">$ net.ipv4.tcp_max_syn_backlog = 20480  <span class="comment">#半连接队列长度，此值受限于内存大小，默认为1024</span></div><div class="line">$ sysctl -p  <span class="comment">#使参数生效</span></div></pre></td></tr></table></figure>
<p><strong>2）</strong>报错里已经说明了解决方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">警告：过量使用内存设置为0！在低内存环境下，后台保存可能失败。为了修正这个问题，</div><div class="line">请在/etc/sysctl.conf 添加一项 <span class="string">'vm.overcommit_memory = 1'</span> ，</div><div class="line">然后重启（或者运行命令<span class="string">'sysctl vm.overcommit_memory=1'</span> ）使其生效。</div><div class="line"></div><div class="line">vm.overcommit_memory不同的值说明：</div><div class="line"></div><div class="line">0 表示检查是否有足够的内存可用，如果是，允许分配；如果内存不够，拒绝该请求，并返回一个错误给应用程序。</div><div class="line">1 允许分配超出物理内存加上交换内存的请求</div><div class="line">2 内核总是返回<span class="literal">true</span></div><div class="line">redis的数据回写机制分为两种</div><div class="line"></div><div class="line">同步回写即SAVE命令。redis主进程直接写数据到磁盘。当数据量大时，这个命令将阻塞，响应时间长</div><div class="line">异步回写即BGSAVE命令。redis 主进程fork一个子进程，复制主进程的内存并通过子进程回写数据到磁盘。</div><div class="line">由于RDB文件写的时候fork一个子进程。相当于复制了一个内存镜像。当时系统的内存是4G，而redis占用了</div><div class="line">近3G的内存，因此肯定会报内存无法分配。如果 「vm.overcommit_memory」设置为0，在可用内存不足的情况</div><div class="line">下，就无法分配新的内存。如果 「vm.overcommit_memory」设置为1。 那么redis将使用交换内存。</div></pre></td></tr></table></figure>
<p>解决方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/sysctl</div><div class="line">$ vm.overcommit_memory = 1  <span class="comment">#末尾追加</span></div><div class="line">$ sysctl -p  <span class="comment">#参数生效</span></div><div class="line">注：使用交换内存并不是一个完美的方案。最好的办法是扩大物理内存。</div></pre></td></tr></table></figure>
<p><strong>3）</strong>关闭THP透明内存</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">`Transparent Huge Pages (THP)`告警，这是一个关于透明内存巨页的话题。简单来说内存可管理的最小</div><div class="line">单位是page，一个page通常是4kb，那1M内存就会有256个page，CPU通过内置的内存管理单元管理page表</div><div class="line">记录。Huge Pages就是表示page的大小已超过4kb了，一般是2M到1G，它的出现主要是为了管理超大内存。</div><div class="line">个人理解上TB的内存。而THP就是管理Huge Pages的一个抽象层次，根据一些资料显示THP会导致内存锁</div><div class="line">影响性能，所以一般建议关闭此功能。</div><div class="line">   “/sys/kernel/mm/transparent_hugepage/enabled”有三个值，如下：</div><div class="line">  $ cat /sys/kernel/mm/transparent_hugepage/enabled</div><div class="line"></div><div class="line">    always [madvise] never</div><div class="line">    <span class="comment">####</span></div><div class="line">    <span class="comment"># always 尽量使用透明内存，扫描内存，有512个 4k页面可以整合，就整合成一个2M的页面</span></div><div class="line">    <span class="comment"># never 关闭，不使用透明内存</span></div><div class="line">    <span class="comment"># madvise 避免改变内存占用</span></div></pre></td></tr></table></figure>
<p>关于THP的内容就介绍到这里，现在根据警告是做些修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/rc.local</div><div class="line">$ <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled  <span class="comment">#在开机脚本里追加此命令</span></div></pre></td></tr></table></figure>
<p>至此这三个错误就处理好了，再启动就没有错误产生了！</p>
<h2 id="二、配置文件说明"><a href="#二、配置文件说明" class="headerlink" title="二、配置文件说明"></a>二、配置文件说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/redis/6379.conf</div></pre></td></tr></table></figure>
<p><strong>1、后台运行</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">daemonize yes</div></pre></td></tr></table></figure>
<p><strong>2、bind监听地址</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">bind</span> 192.168.1.10</div><div class="line">默认<span class="built_in">bind</span>的填写的127.0.0.1这样配置是只允许本地访问，如果想远程访问就改为本机网卡绑定的ip地址。</div><div class="line">我这边有个问题，就是填写为网卡ip后，本地就不能登录了，<span class="built_in">bind</span>可以填写多个ip，格式为</div><div class="line"><span class="built_in">bind</span> 192.168.1.10 127.0.0.1 中间用空格分隔，但是没有效果，还是无法本地登录，这个问题待后边再测试。</div></pre></td></tr></table></figure>
<p><strong>3、配置密码</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># requirepass foobared</span></div><div class="line">去掉前边<span class="comment">#注释，修改foobared为你想配置的任意密码</span></div></pre></td></tr></table></figure>
<p><strong>4、日志文件</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logfile <span class="string">"/var/log/redis.log"</span></div></pre></td></tr></table></figure>
<p><strong>5、其他参数</strong><br>除了上诉几个设置外，还有改端口等一些参数，有需要可以按照配置文件的说明修改。</p>
<h2 id="三、开机启动脚本"><a href="#三、开机启动脚本" class="headerlink" title="三、开机启动脚本"></a>三、开机启动脚本</h2><p><code>redis</code>安装目录自带了启动脚本，但是不支持<code>restart</code>，还有在配置了密码验证之后就就不能用了，我贴出一个修改后的启动脚本，可以解决这两个问题。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/init.d/redis</div><div class="line"></div><div class="line"><span class="comment"># chkconfig: 2345 90 10</span></div><div class="line"><span class="comment"># description: service of redis for start and stop add by tomener</span></div><div class="line"></div><div class="line">PATH=/usr/<span class="built_in">local</span>/bin:/sbin:/usr/bin:/bin</div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/usr/<span class="built_in">local</span>/bin/redis-server</div><div class="line">REDIS_CLI=/usr/<span class="built_in">local</span>/bin/redis-cli</div><div class="line"></div><div class="line">PIDFILE=/var/run/redis_6379.pid   </div><div class="line">CONF=<span class="string">"/etc/redis/6379.conf"</span></div><div class="line">AUTH=<span class="string">"Passwd"</span></div><div class="line">BIND_IP=<span class="string">'127.0.0.1'</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>   </div><div class="line">        start)   </div><div class="line">                <span class="keyword">if</span> [ <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]   </div><div class="line">                <span class="keyword">then</span>   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed."</span>  </div><div class="line">                <span class="keyword">else</span>  </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span>  </div><div class="line">                        <span class="variable">$EXEC</span> <span class="variable">$CONF</span>   </div><div class="line">                <span class="keyword">fi</span>   </div><div class="line">                <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ]   </div><div class="line">                <span class="keyword">then</span>   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Redis is running..."</span>  </div><div class="line">                <span class="keyword">fi</span>   </div><div class="line">                ;;   </div><div class="line">        stop)   </div><div class="line">                <span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$PIDFILE</span> ]   </div><div class="line">                <span class="keyword">then</span>   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is not running."</span>  </div><div class="line">                <span class="keyword">else</span>  </div><div class="line">                        PID=$(cat <span class="variable">$PIDFILE</span>)   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Stopping..."</span>  </div><div class="line">                       <span class="variable">$REDIS_CLI</span> -h <span class="variable">$BIND_IP</span> <span class="_">-a</span> <span class="variable">$AUTH</span> -p <span class="variable">$REDISPORT</span>  SHUTDOWN    </div><div class="line">                        sleep 2  </div><div class="line">                       <span class="keyword">while</span> [ -x <span class="variable">$PIDFILE</span> ]   </div><div class="line">                       <span class="keyword">do</span>  </div><div class="line">                                <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown..."</span>  </div><div class="line">                               sleep 1  </div><div class="line">                        <span class="keyword">done</span>   </div><div class="line">                        <span class="built_in">echo</span> <span class="string">"Redis stopped"</span>  </div><div class="line">                <span class="keyword">fi</span>   </div><div class="line">                ;;   </div><div class="line">        restart|force-reload)   </div><div class="line">                <span class="variable">$&#123;0&#125;</span> stop   </div><div class="line">                <span class="variable">$&#123;0&#125;</span> start   </div><div class="line">                ;;   </div><div class="line">        *)   </div><div class="line">               <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2  </div><div class="line">                <span class="built_in">exit</span> 1  </div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
<p>修改其中的配置文件路径、你前一步配置的密码等后保存退出。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ chkconfig redis on </div><div class="line">$ service redis restart</div></pre></td></tr></table></figure>
<p>设置开机启动（根据自己需要来，redis是内存数据库，性能和持久化需要权衡。在配置了主从复制后，<br>有一种方案是停掉master的持久化功能，这时master服务器上redis需要慎重配置开机启动,后边会详细说明。）</p>
<h2 id="四、Redis持久化"><a href="#四、Redis持久化" class="headerlink" title="四、Redis持久化"></a>四、Redis持久化</h2><p>主要是两种方式，可以都用，也可以只开一种，根据自己业务需要配置。</p>
<p><strong>rdb方式</strong><br><code>rdb</code>是<code>redis</code>对数据进行持久化而保存到硬盘的数据文件。</p>
<p>工作原理</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">当redis生成dump.rdb文件时，工作过程如下：</div><div class="line">redis主进程fork一个子进程</div><div class="line">fork出来的子进程将内存的数据集dump到临时的RDB中</div><div class="line">当子进程对临时的RDB文件写入完毕，redis用新的RDB文件代替旧的RDB文件</div></pre></td></tr></table></figure>
<p>默认情况下相关配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div></pre></td></tr></table></figure>
<p>其意义为：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">当1个key更新值时每900秒保存一次数据到硬盘</div><div class="line">当10个key更新值时每300秒保存一次到硬盘</div><div class="line">当10000个key更新值时每60秒保存一次到硬盘</div></pre></td></tr></table></figure>
<p>换句话说，当你重启服务器时数据是可能会丢失的，如果数据量小的时候，你会丢失5分钟以内的数据；如果数据量大的时候，你会丢失一分钟以内的数据。</p>
<p>所以<code>set name 1</code>后重启服务器，<code>get name</code>时的结果会是<code>nil</code>，如果你想避免这种情况发生，那么可以<code>sav</code>后重启服务器。</p>
<p>然而大多数情况下我们需要防止的是服务器突发情况下的重启，这时候可能没有机会save，所以还是会造成数据的丢失。所以你可以设置<code>save &quot;&quot;</code>这样的话会每次写操作到保存到硬盘，但是<code>redis</code>作为缓存却需要每次到保存到硬盘已丧失了其作为缓存的意义，因此这种方法是不可取的。</p>
<p>还有一种方式，在每次写操作时使用<code>bgsave</code>命令，可以直接返回操作结果并异步将其保存到硬盘。</p>
<p><code>rdb</code>方式的优点是保存的数据存储量小（只有数据）<code>重启速度很快</code>；缺点<code>是可能会造成数据的丢失</code>。</p>
<p><strong>aof方式</strong><br><code>aof</code>本质是<code>redis</code>操作（写操作）日志文件。aof默认是未开启的，需要在配置文件中进行设置，在配置文件中将这一行改为<code>appendonly yes</code>就可以了。</p>
<p>工作原理</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AOF ：append only file。</div><div class="line">每当Redis执行一个改变数据集的命令时，这个命令都会被追加到AOF文件的末尾。</div><div class="line">当redis重新启动时，程序可以通过AOF文件恢复数据。</div></pre></td></tr></table></figure>
<p>那么会在什么时候<code>append</code>到文件末尾呢？有三种方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">appendfsync always</div><div class="line">appendfsync everysec</div><div class="line">appendfsync no </div><div class="line"></div><div class="line">appendfsync always每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全</div><div class="line">appendfsync everysec每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。</div><div class="line">appendfsync no从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选择。</div><div class="line"></div><div class="line">推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</div></pre></td></tr></table></figure>
<p>aof能够保证数据的安全，但是在重启时比较耗时，而且aof文件的体积比rdb文件大。</p>
<p><strong>使用</strong><br>在同时开启rdb和aof模式时，会采用aof模式来读取数据。在正常的使用中，如果不是十分在乎短时间内的数据丢失的时候，使用rdb方式会使服务器的效率更高，更节省cpu和硬盘；如果担心数据丢失的话，aof方式无疑会是更好的选择。</p>
<h2 id="五、Redis主从复制"><a href="#五、Redis主从复制" class="headerlink" title="五、Redis主从复制"></a>五、Redis主从复制</h2><p><strong>1、概述</strong></p>
<p><code>Redis</code>的<code>replication</code>机制允许<code>slave</code>从<code>master</code>那里通过网络传输拷贝到完整的数据备份。具有以下特点：</p>
<ul>
<li><p>1.异步复制，从<code>2.8</code>版本开始，<code>slave</code>能不时地从<code>master</code>那里获取到数据。</p>
</li>
<li><p>2.允许单个<code>master</code>配置多个<code>slave</code></p>
</li>
<li><p>3.<code>slave</code>允许其它<code>slave</code>连接到自己。一个<code>slave</code>除了可以连接<code>master</code>外，它还可以连接其它的<code>slave</code>。形成一个图状的架构。</p>
</li>
<li><p>4.<code>master</code>在进行<code>replication</code>时是非阻塞的，这意味着在<code>replication</code>期间，<code>master</code>依然能够处理客户端的请求。</p>
</li>
<li><p>5.<code>slave</code>在<code>replication</code>期间也是非阻塞的，也可以接受来自客户端的请求，但是它用的是之前的旧数据。可以通过配置来决定slave是否在进行<code>replication</code>时用旧数据响应客户端的请求，如果配置为否，那么<code>slave</code>将会返回一个错误消息给客户端。不过当新的数据接收完全后，必须将新数据与旧数据替换，即删除旧数据，在替换数据的这个时间窗口内，<code>slave</code>将会拒绝客户端的请求和连接。</p>
</li>
<li><p>6.一般使用<code>replication</code>来可以实现扩展性，例如说，可以将多个<code>slave</code>配置为“只读”，或者是纯粹的数据冗余备份。</p>
</li>
<li><p>7.能够通过<code>replication</code>来避免<code>master</code>每次持久化时都将整个数据集持久化到硬盘中。只需把<code>master</code>配置为不进行持久化操作(把配置文件中持久化相关的配置项注释掉即可)，然后连接上一个<code>slave</code>，这个<code>slave</code>则被配置持久化选项。不过需要注意的是，在这个方案中，必须确保<code>master</code>不会自动启动。</p>
</li>
</ul>
<p><strong>2、Master持久化功能关闭时Replication的安全性</strong></p>
<p>当有需要使用到<code>replication</code>机制时，一般都会强烈建议把<code>master</code>的持久化开关打开。即使为了避免持久化带来的延迟影响，不把持久化开关打开，那么也应该把<code>master</code>配置为不会自动启动的。</p>
<p>为了更好地理解当一个不进行持久化的<code>master</code>如果允许自动启动所带来的危险性。可以看看下面这种失败情形：</p>
<p>假设我们有一个<code>redis</code>节点<code>A</code>，设置为<code>master</code>，并且关闭持久化功能，另外两个节点<code>B</code>和<code>C</code>是它的<code>slave</code>，并从<code>A</code>复制数据。<br>如果<code>A</code>节点崩溃了导致所有的数据都丢失了，它会有重启系统来重启进程。但是由于持久化功能被关闭了，所以即使它重启了，它的数据集是空的。<br>而<code>B</code>和<code>C</code>依然会通过<code>replication</code>机制从<code>A</code>复制数据，所以<code>B</code>和<code>C</code>会从<code>A</code>那里复制到一份空的数据集，并用这份空的数据集将自己本身的非空的数据集替换掉。于是就相当于丢失了所有的数据。</p>
<p>即使使用一些<code>HA</code>工具，比如说<code>sentinel</code>来监控<code>master-slaves</code>集群，也会发生上述的情形，因为<code>master</code>可能崩溃后迅速恢复。速度太快而导致<code>sentinel</code>无法察觉到一个<code>failure</code>的发生。</p>
<p>当数据的安全很重要、持久化开关被关闭并且有<code>replication</code>发生的时候，那么应该<code>**禁止实例的自启动**</code>。</p>
<p><strong>3、replication工作原理</strong><br>如果你为<code>master</code>配置了一个<code>slave</code>，不管这个<code>slave</code>是否是第一次连接上<code>Master</code>，它都会发送一个<code>SYNC</code>命令给<code>master</code>请求复制数据。</p>
<p><code>master</code>收到<code>SYNC</code>命令后，会在后台进行数据持久化，持久化期间，<code>master</code>会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。当持久化进行完毕以后，<code>master</code>会把这份数据集发送给<code>slave</code>，<code>slave</code>会把接收到的数据进行持久化，然后再加载到内存中。然后，<code>master</code>再将之前缓存在内存中的命令发送给<code>slave</code>。</p>
<p>当<code>master</code>与<code>slave</code>之间的连接由于某些原因而断开时，<code>slave</code>能够自动重连<code>master</code>，如果<code>master</code>收到了多个<code>slave</code>并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送给多个并发连接的<code>slave</code>。</p>
<p>当<code>master</code>和<code>slave</code>断开重连后，一般都会对整份数据进行复制。但从<code>redis2.8</code>版本开始，支持部分复制。</p>
<p><strong>4、数据部分复制</strong><br>从<code>2.8</code>版本开始，<code>slave</code>与<code>master</code>能够在网络连接断开重连后只进行部分数据复制。</p>
<p><code>master</code>会在其内存中创建一个复制流的等待队列，<code>master</code>和它所有的<code>slave</code>都维护了复制的数据下标和<code>master</code>的进程<code>id</code>，因此，当网络连接断开后，<code>slave</code>会请求<code>master</code>继续进行未完成的复制，从所记录的数据下标开始。如果进程<code>id</code>变化了，或者数据下标不可用，那么将会进行一次全部数据的复制。</p>
<p><strong>5、支持部分数据复制的命令是PSYNC</strong></p>
<p>不需硬盘参与的<code>Replication</code><br>一般情况下，一次复制需要将内存的数据写到硬盘中，再将数据从硬盘读进内存，再发送给<code>slave</code>。</p>
<p>对于速度比较慢的硬盘，这个操作会给<code>master</code>带来性能上的损失。<code>Redis2.8</code>版本开始，实验性地加上了无硬盘复制的功能。这个功能能将数据从内存中直接发送到<code>slave</code>，而不用经过硬盘的存储。</p>
<p>不过这个功能目前处于实验阶段，还未正式发布。<br><strong>6、主从配置</strong><br>与<code>replication</code>相关的配置比较简单，只需要把下面一行加到<code>slave</code>的配置文件中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slaveof 192.168.1.1 6379</div></pre></td></tr></table></figure>
<p>你只需要把<code>ip</code>地址和端口号改一下。当然，你也可以通过客户端发送<code>SLAVEOF</code>命令给<code>slave</code>。</p>
<p>如果<code>master</code>通过<code>requirepass</code>配置项设置了密码，<code>slave</code>每次同步操作都需要验证密码，可以通过在<code>slave</code>的配置文件中添加以下配置项：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">masterauth &lt;password&gt;</div></pre></td></tr></table></figure>
<p>也可以通过客户端在运行时发送以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">config <span class="built_in">set</span> masterauth &lt;password&gt;</div></pre></td></tr></table></figure>
<p>部分数据复制有一些可调的配置参数，请参考<code>redis.conf</code>文件。</p>
<p>无硬盘复制功能可以通过<code>repl-diskless-sync</code>来配置，另外一个配置项<code>repl-diskless-sync-delay</code>用来配置当收到第一个请求时，等待多个<code>slave</code>一起来请求之间的间隔时间。</p>
<p><strong>7、只读的slave</strong></p>
<p>从<code>redis2.6</code>版本开始，<code>slave</code>支持只读模式，而且是<code>默认</code>的。可以通过配置项<code>slave-read-only</code>来进行配置，并且支持客户端使用<code>CONFIG SET</code>命令来动态修改配置。</p>
<p>只读的<code>slave</code>会拒绝所有的写请求，只读的<code>slave</code>并不是为了防范不可信的客户端，毕竟一些管理命令例如<code>DEBUG</code>和<code>CONFIG</code>在只读模式下还是可以使用的。如果确实要确保安全性，那么可以在配置文件中将一些命令重新命名。</p>
<p>也许你会感到很奇怪，为什么能够将一个只读模式的<code>slave</code>恢复为可写的呢，尽管可写，但是只要<code>slave</code>一同步<code>master</code>的数据，就会丢失那些写在<code>slave</code>的数据。不过还是有一些合法的应用场景需要存储瞬时数据会用到这个特性。<code>不过，之后可能会考虑废除掉这个特性。</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slave-read-only yes</div></pre></td></tr></table></figure>
<p><strong>8、至少N个slave才允许向master写数据</strong><br>从<code>redis2.8</code>版本开始，<code>master</code>可以被配置为，只有当<code>master</code>当前有至少<code>N</code>个<code>slave</code>连接着的时候才接受写数据的请求。</p>
<p>然而，由于<code>redis</code>是异步复制的，所以它并不能保证<code>slave</code>会受到一个写请求，所以总有一个数据丢失的时间窗口存在。</p>
<p>这个机制的工作原理如下所示：</p>
<ul>
<li><p>slave每秒发送ping心跳给master，询问当前复制了多少数据。</p>
</li>
<li><p>master会记录下它上次收到某个slave的ping心跳是什么时候。</p>
</li>
<li><p>使用者可以配置一个时间，来指定ping心跳的发送不应超过的一个超时时间</p>
</li>
<li><p>如果master有至少N个slave，并且ping心跳的超时不超过M秒，那么它就会接收写请求。</p>
</li>
</ul>
<p>也许你会认为这情形好似<code>CAP</code>理论中弱化版的<code>C(consistency)</code>，因为写请求并不能保证数据的一致性，但这样做，至少数据丢失被限制在了限定的时间内。即<code>M</code>秒。</p>
<p>如果<code>N</code>和<code>M</code>的条件都无法达到，那么<code>master</code>会回复一个错误信息。写请求也不会被处理。</p>
<p>有两个配置项用来配置上文中提到的<code>N</code>和<code>M</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">min-slaves-to-write &lt;number of slaves&gt;</div><div class="line">min-slaves-max-lag &lt;number of seconds&gt;</div></pre></td></tr></table></figure>
<p>如果需要了解更多，请查阅<code>redis.conf</code>配置文件。</p>
<h2 id="六、常用命令"><a href="#六、常用命令" class="headerlink" title="六、常用命令"></a>六、常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">redis-cli </div><div class="line">客户端命令工具</div><div class="line">$ /usr/<span class="built_in">local</span>/bin/redis-cli -h 192.168.1.1</div><div class="line">192.168.1.1:6379&gt; auth Passwd</div><div class="line">OK</div><div class="line">登录,密码验证</div><div class="line">192.168.1.1:6379&gt;info</div><div class="line">查看数据库状态</div><div class="line">192.168.1.1:6379&gt;info replication</div><div class="line">查看slave的复制状态</div><div class="line">192.168.1.1:6379&gt;<span class="built_in">set</span> key 123</div><div class="line">插入数据</div><div class="line">192.168.1.1:6379&gt;keys *</div><div class="line">列出数据</div><div class="line">flushdb</div><div class="line">清空当前数据</div><div class="line">flushall</div><div class="line">清除所有数据库</div></pre></td></tr></table></figure>
<p><strong>可视化客户端工具</strong></p>
<p><code>Redis Desktop Manager</code>（<code>RedisDesktopManager，RDM</code>）是一个快速、简单、支持跨平台的 <code>Redis</code> 桌面管理工具，基于 <code>Qt 5</code> 开发，支持通过 <code>SSH Tunnel</code> 连接。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">下载地址：https://redisdesktop.com/download</div></pre></td></tr></table></figure>
<h2 id="七、-应用场景"><a href="#七、-应用场景" class="headerlink" title="七、 应用场景"></a>七、 应用场景</h2><h3 id="取最新N个数据的操作"><a href="#取最新N个数据的操作" class="headerlink" title="取最新N个数据的操作"></a>取最新N个数据的操作</h3><p>比如典型的取你网站的最新文章，通过下面方式，我们可以将最新的5000条评论的ID放在<code>Redis</code>的<code>List</code>集合中，并将超出集合部分从数据库获取</p>
<p>使用<code>LPUSH latest.comments&lt;ID&gt;</code>命令，向<code>list</code>集合中插入数据</p>
<p>插入完成后再用<code>LTRIM latest.comments 0 5000</code>命令使其永远只保存最近<code>5000个ID</code> </p>
<p>然后我们在客户端获取某一页评论时可以用下面的逻辑（伪代码） </p>
<ul>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FUNCTION get_latest_comments(start,num_items):</div><div class="line">   id_list = redis.lrange(<span class="string">"latest.comments"</span>,start,start+num_items-1)</div><div class="line">   IF id_list.length &lt; num_items</div><div class="line">   id_list = SQL_DB(<span class="string">"SELECT ... ORDER BY time LIMIT ..."</span>)</div><div class="line">   END</div><div class="line">RETURN id_list</div><div class="line">END</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果你还有不同的筛选维度，比如某个分类的最新N条，那么你可以再建一个按此分类的<code>List</code>，只存<code>ID</code>的话，<code>Redis</code>是非常高效的</p>
<h3 id="排行榜应用，取TOP-N操作"><a href="#排行榜应用，取TOP-N操作" class="headerlink" title="排行榜应用，取TOP N操作"></a>排行榜应用，取<code>TOP N</code>操作</h3><p>这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，这时候就需要我们的<code>sorted set</code>出马了，将你要排序的值设置成<code>sorted set</code>的<code>score</code>，将具体的数据设置成相应的<code>value</code>，每次只需要执行一条<code>ZADD</code>命令即可。</p>
<h3 id="需要精准设定过期时间的应用"><a href="#需要精准设定过期时间的应用" class="headerlink" title="需要精准设定过期时间的应用"></a>需要精准设定过期时间的应用</h3><p>比如你可以把上面说到的<code>sorted set</code>的<code>score</code>值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除Redis中的过期数据，你完全可以把<code>Redis</code>里这个过期时间当成是对数据库中数据的索引，用<code>Redis</code>来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录。</p>
<h3 id="计数器应用"><a href="#计数器应用" class="headerlink" title="计数器应用"></a>计数器应用</h3><p><code>Redis</code>的命令都是原子性的，你可以轻松地利用<code>INCR，DECR</code>命令来构建计数器系统。 </p>
<h3 id="Uniq操作，获取某段时间所有数据排重值"><a href="#Uniq操作，获取某段时间所有数据排重值" class="headerlink" title="Uniq操作，获取某段时间所有数据排重值"></a><code>Uniq</code>操作，获取某段时间所有数据排重值</h3><p>这个使用<code>Redis</code>的set数据结构最合适了，只需要不断地将数据往<code>set</code>中扔就行了，<code>set</code>意为集合，所以会自动排重。</p>
<h3 id="Pub-Sub构建实时消息系统"><a href="#Pub-Sub构建实时消息系统" class="headerlink" title="Pub/Sub构建实时消息系统"></a><code>Pub/Sub</code>构建实时消息系统</h3><p><code>Redis</code>的<code>Pub/Sub</code>系统可以构建实时的消息系统，比如很多用<code>Pub/Sub</code>构建的实时聊天系统的例子。</p>
<h3 id="构建队列系统"><a href="#构建队列系统" class="headerlink" title="构建队列系统"></a>构建队列系统</h3><p>使用<code>list</code>可以构建队列系统，使用<code>sorted set</code>甚至可以构建有优先级的队列系统。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-Redis-3-2安装及主从复制详细配置及应用场景-附二&quot;&gt;&lt;a href=&quot;#Migo商城2-0-Redis-3-2安装及主从复制详细配置及应用场景-附二&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二&quot;&gt;&lt;/a&gt;Migo商城2.0 Redis 3.2安装及主从复制详细配置及应用场景 附二&lt;/h2&gt;&lt;p&gt;之前存的东西，拿出来改改&lt;/p&gt;
&lt;h2 id=&quot;一、编译安装&quot;&gt;&lt;a href=&quot;#一、编译安装&quot; class=&quot;headerlink&quot; title=&quot;一、编译安装&quot;&gt;&lt;/a&gt;一、编译安装&lt;/h2&gt;&lt;p&gt;1、下载安装包：&lt;code&gt;http://download.redis.io/releases/redis-3.2.3.tar.gz&lt;/code&gt;&lt;br&gt;目前最新的版本，你也可以打开redis官方的下载页下载合适版本&lt;code&gt;http://redis.io/download&lt;/code&gt;&lt;br&gt;2、开始安装&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0 redis 缓存" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0-redis-%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 门户首页大广告位显示(4) 十八</title>
    <link href="https://muyinchen.github.io/2016/12/04/Migo%E5%95%86%E5%9F%8E2.0%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%B9%BF%E5%91%8A%E4%BD%8D%E6%98%BE%E7%A4%BA(4)%20%E5%8D%81%E5%85%AB/"/>
    <id>https://muyinchen.github.io/2016/12/04/Migo商城2.0 门户首页大广告位显示(4) 十八/</id>
    <published>2016-12-04T15:42:53.081Z</published>
    <updated>2016-12-04T15:42:35.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-门户首页大广告位显示-4-十八"><a href="#Migo商城2-0-门户首页大广告位显示-4-十八" class="headerlink" title="Migo商城2.0 门户首页大广告位显示(4) 十八"></a>Migo商城2.0 门户首页大广告位显示(4) 十八</h2><p>关于<code>httpclient</code>的东西就不说了，不懂的可以百度谷歌的<br><a id="more"></a></p>
<h4 id="在common工程中导入httpclient工具类"><a href="#在common工程中导入httpclient工具类" class="headerlink" title="在common工程中导入httpclient工具类"></a>在<code>common</code>工程中导入<code>httpclient工具类</code></h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_211557.png" alt=""></p>
<h4 id="首页通过EL表达式输出到页面显示："><a href="#首页通过EL表达式输出到页面显示：" class="headerlink" title="首页通过EL表达式输出到页面显示："></a>首页通过EL表达式输出到页面显示：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_223203.png" alt=""></p>
<h4 id="前台系统service代码："><a href="#前台系统service代码：" class="headerlink" title="前台系统service代码："></a>前台系统<code>service</code>代码：</h4><p>此处代码和1版做了很大修改，之前的migoResult在做转换的时候出了点问题，索性就自己重新再写下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</div><div class="line"><span class="keyword">import</span> com.migo.portal.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.migo.utils.HttpClientUtil;</div><div class="line"><span class="keyword">import</span> com.migo.utils.JsonUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/4.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;MIGO_MANAGE_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String MIGO_MANAGE_URL;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;AD1_URL&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String AD1_URL;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryAD1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//调用后台管理系统的接口服务获取数据</span></div><div class="line">            String url=MIGO_MANAGE_URL+AD1_URL;</div><div class="line">            String jsonData = HttpClientUtil.doGet(url);</div><div class="line">            <span class="keyword">if</span> (jsonData==<span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//解析json数据</span></div><div class="line">            JsonNode jsonNode = MAPPER.readTree(jsonData);</div><div class="line">            ArrayNode rows = (ArrayNode) jsonNode.get(<span class="string">"rows"</span>);</div><div class="line">            List&lt;Content&gt; contents = JsonUtils.jsonToList(String.valueOf(rows), Content.class);</div><div class="line">            List&lt;Map&lt;String,Object&gt;&gt; result1=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (Content content : contents) &#123;</div><div class="line">                Map&lt;String,Object&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">                map.put(<span class="string">"srcB"</span>,content.getPic());</div><div class="line">                map.put(<span class="string">"height"</span>,<span class="number">240</span>);</div><div class="line">                map.put(<span class="string">"alt"</span>,content.getTitle());</div><div class="line">                map.put(<span class="string">"width"</span>,<span class="number">670</span>);</div><div class="line">                map.put(<span class="string">"src"</span>,content.getPic2());</div><div class="line">                map.put(<span class="string">"widthB"</span>,<span class="number">550</span>);</div><div class="line">                map.put(<span class="string">"href"</span>,content.getUrl());</div><div class="line">                map.put(<span class="string">"heightB"</span>,<span class="number">240</span>);</div><div class="line">                result1.add(map);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> JsonUtils.objectToJson(result1);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller代码"><a href="#controller代码" class="headerlink" title="controller代码"></a><code>controller</code>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.portal.service.IndexService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/16.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> IndexService indexService;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首页</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"index"</span>,method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</div><div class="line"></div><div class="line">        String ad1 = <span class="keyword">this</span>.indexService.queryAD1();</div><div class="line">        <span class="comment">//传递给页面</span></div><div class="line">        model.addAttribute(<span class="string">"indexAd1"</span>,ad1);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行测试：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_233410.png" alt=""></p>
<p>其他的广告位就暂时不写了，都一个套路，后台写个服务，前台系统查下，然后写到<code>model</code>里面，最后也没调用<code>el</code>表达式完成，至此，大广告位显示完成</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-门户首页大广告位显示-4-十八&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页大广告位显示-4-十八&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 门户首页大广告位显示(4) 十八&quot;&gt;&lt;/a&gt;Migo商城2.0 门户首页大广告位显示(4) 十八&lt;/h2&gt;&lt;p&gt;关于&lt;code&gt;httpclient&lt;/code&gt;的东西就不说了，不懂的可以百度谷歌的&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 门户首页大广告位显示(3) 十七</title>
    <link href="https://muyinchen.github.io/2016/12/04/Migo%E5%95%86%E5%9F%8E2.0%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%B9%BF%E5%91%8A%E4%BD%8D%E6%98%BE%E7%A4%BA(3)%20%E5%8D%81%E4%B8%83/"/>
    <id>https://muyinchen.github.io/2016/12/04/Migo商城2.0 门户首页大广告位显示(3) 十七/</id>
    <published>2016-12-03T17:39:10.160Z</published>
    <updated>2016-12-03T17:38:29.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-门户首页大广告位显示-3-十七"><a href="#Migo商城2-0-门户首页大广告位显示-3-十七" class="headerlink" title="Migo商城2.0 门户首页大广告位显示(3) 十七"></a>Migo商城2.0 门户首页大广告位显示(3) 十七</h2><p>接上篇：</p>
<h3 id="内容管理的实现"><a href="#内容管理的实现" class="headerlink" title="内容管理的实现"></a>内容管理的实现</h3><a id="more"></a>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161203_231552.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-options</span>=<span class="string">"region:'center'"</span> <span class="attr">style</span>=<span class="string">"padding:5px"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"easyui-datagrid"</span> <span class="attr">id</span>=<span class="string">"contentList"</span> <span class="attr">data-options</span>=<span class="string">"toolbar:contentListToolbar,singleSelect:false,collapsible:true,pagination:true,method:'get',pageSize:20,url:'/rest/content',queryParams:&#123;categoryId:0&#125;"</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">		        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'id',width:30"</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'title',width:120"</span>&gt;</span>内容标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'subTitle',width:100"</span>&gt;</span>内容子标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'titleDesc',width:120"</span>&gt;</span>内容描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'url',width:60,align:'center',formatter:migo.formatUrl"</span>&gt;</span>内容连接<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'pic',width:50,align:'center',formatter:migo.formatUrl"</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'pic2',width:50,align:'center',formatter:migo.formatUrl"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'created',width:130,align:'center',formatter:migo.formatDateTime"</span>&gt;</span>创建日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		            <span class="tag">&lt;<span class="name">th</span> <span class="attr">data-options</span>=<span class="string">"field:'updated',width:130,align:'center',formatter:migo.formatDateTime"</span>&gt;</span>更新日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">		        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="查询显示内容列表"><a href="#查询显示内容列表" class="headerlink" title="查询显示内容列表:"></a>查询显示内容列表:</h4><h5 id="mapper"><a href="#mapper" class="headerlink" title="mapper:"></a><code>mapper</code>:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.Content;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/3.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ContentMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Content</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="service"><a href="#service" class="headerlink" title="service:"></a><code>service</code>:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/3.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Content</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> EasyUIDataGridResult <span class="title">queryListByCategoryId</span><span class="params">(Long categoryId, Integer page, Integer rows)</span> </span>&#123;</div><div class="line">        PageHelper.startPage(page,rows);</div><div class="line">        Content expample=<span class="keyword">new</span> Content();</div><div class="line">        expample.setCategoryId(categoryId);</div><div class="line">        List&lt;Content&gt; contents = <span class="keyword">super</span>.queryListByWhere(expample);</div><div class="line">        PageInfo&lt;Content&gt; pageInfo=<span class="keyword">new</span> PageInfo&lt;&gt;(contents);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EasyUIDataGridResult(pageInfo.getList(),pageInfo.getTotal());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller"><a href="#controller" class="headerlink" title="controller:"></a><code>controller</code>:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> com.migo.service.ContentService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/3.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"content"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(ContentController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentService contentService;</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;EasyUIDataGridResult&gt; <span class="title">queryListByCategoryId</span><span class="params">(</span></span></div><div class="line">            @RequestParam(<span class="string">"categoryId"</span>) Long categoryId,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"page"</span>,defaultValue = <span class="string">"1"</span>)</span> Integer page,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"rows"</span>,defaultValue = <span class="string">"20"</span>)</span> Integer rows</div><div class="line"></div><div class="line">    )&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据categoryId查询内容列表 categoryId = &#123;&#125;"</span>,categoryId);</div><div class="line">            &#125;</div><div class="line">            EasyUIDataGridResult result=<span class="keyword">this</span>.contentService.queryListByCategoryId(categoryId,page,rows);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(result);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          logger.error(<span class="string">"根据categoryId查询内容列表 服务器傲娇了 categoryId = &#123;&#125;"</span>,categoryId);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="运行测试结果："><a href="#运行测试结果：" class="headerlink" title="运行测试结果："></a>运行测试结果：</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_000814.png" alt=""></p>
<h4 id="新增内容"><a href="#新增内容" class="headerlink" title="新增内容"></a>新增内容</h4><p>先进行校验，通过后访问<code>/rest/page/content-add</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">text</span>:<span class="string">'新增'</span>,</div><div class="line">    <span class="attr">iconCls</span>:<span class="string">'icon-add'</span>,</div><div class="line">    <span class="attr">handler</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    	<span class="keyword">var</span> node = $(<span class="string">"#contentCategoryTree"</span>).tree(<span class="string">"getSelected"</span>);</div><div class="line">    	<span class="keyword">if</span>(!node || !$(<span class="string">"#contentCategoryTree"</span>).tree(<span class="string">"isLeaf"</span>,node.target))&#123;</div><div class="line">    		$.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容必须选择一个内容分类!'</span>);</div><div class="line">    		<span class="keyword">return</span> ;</div><div class="line">    	&#125;</div><div class="line">    	TT.createWindow(&#123;</div><div class="line">			<span class="attr">url</span> : <span class="string">"/rest/page/content-add"</span></div><div class="line">		&#125;); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>content-add.jsp</code>为了更加适应restful，进行迭代，原代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//提交到后台的RESTful</span></div><div class="line">			$.ajax(&#123;</div><div class="line">			   <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">			   <span class="attr">url</span>: <span class="string">"/rest/content"</span>,</div><div class="line">			   <span class="attr">data</span>: $(<span class="string">"#contentAddForm"</span>).serialize(),</div><div class="line">			   <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容成功!'</span>);</div><div class="line">  						$(<span class="string">"#contentList"</span>).datagrid(<span class="string">"reload"</span>);</div><div class="line">  						TT.closeCurrentWindow();</div><div class="line">			   &#125;,</div><div class="line">			   <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容失败!'</span>);</div><div class="line">			   &#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;,</div></pre></td></tr></table></figure>
<h5 id="修改后："><a href="#修改后：" class="headerlink" title="修改后："></a>修改后：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">				   <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">				   <span class="attr">url</span>: <span class="string">"/rest/content"</span>,</div><div class="line">				   <span class="attr">data</span>: $(<span class="string">"#contentAddForm"</span>).serialize(),</div><div class="line">				   <span class="attr">statusCode</span> : &#123;</div><div class="line">					   <span class="number">201</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						$.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容成功!'</span>);</div><div class="line">   						$(<span class="string">"#contentList"</span>).datagrid(<span class="string">"reload"</span>);</div><div class="line">   						TT.closeCurrentWindow();</div><div class="line">					   &#125;,</div><div class="line">					   <span class="number">500</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">						    $.messager.alert(<span class="string">'提示'</span>,<span class="string">'新增内容失败!'</span>);</div><div class="line">					   &#125;</div><div class="line">				   &#125;</div><div class="line">				  </div><div class="line">				&#125;);</div></pre></td></tr></table></figure>
<h4 id="controller："><a href="#controller：" class="headerlink" title="controller："></a>controller：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 新增内容</div><div class="line">    * <span class="doctag">@param</span> content</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line"></div><div class="line">   <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">add</span><span class="params">(Content content)</span></span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">               logger.info(<span class="string">"新增内容 contentTitle = &#123;&#125;"</span>,content.getTitle());</div><div class="line">           &#125;</div><div class="line">           content.setId(<span class="keyword">null</span>);</div><div class="line">           <span class="keyword">this</span>.contentService.save(content);</div><div class="line">           <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"新增内容 contentTitle = &#123;&#125;"</span>,content.getTitle(),e);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_005223.png" alt=""></p>
<h5 id="发现查询内容列表没有按修改时间排序，故重写代码如下："><a href="#发现查询内容列表没有按修改时间排序，故重写代码如下：" class="headerlink" title="发现查询内容列表没有按修改时间排序，故重写代码如下："></a>发现查询内容列表没有按修改时间排序，故重写代码如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</div><div class="line"><span class="keyword">import</span> com.migo.mapper.ContentMapper;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> javafx.scene.input.KeyCode.O;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/3.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">Content</span>&gt; </span>&#123;</div><div class="line">   <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentMapper contentMapper;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> EasyUIDataGridResult <span class="title">queryListByCategoryId</span><span class="params">(Long categoryId, Integer page, Integer rows)</span> </span>&#123;</div><div class="line">        PageHelper.startPage(page,rows);</div><div class="line"></div><div class="line"></div><div class="line">        Example expample=<span class="keyword">new</span> Example(Content.class);</div><div class="line">        expample.createCriteria().andCondition(<span class="string">"category_id"</span>).andEqualTo(categoryId);</div><div class="line">        expample.orderBy(<span class="string">"updated"</span>).desc();</div><div class="line">        List&lt;Content&gt; contents = contentMapper.selectByExample(expample);</div><div class="line">        PageInfo&lt;Content&gt; pageInfo=<span class="keyword">new</span> PageInfo&lt;&gt;(contents);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EasyUIDataGridResult(pageInfo.getList(),pageInfo.getTotal());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="运行显示效果："><a href="#运行显示效果：" class="headerlink" title="运行显示效果："></a>运行显示效果：</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_011020.png" alt=""></p>
<p>因进度问题，修改和删除暂时就不实现了，之前有类似代码，很简单，读者可自行解决</p>
<h3 id="对外提供接口服务："><a href="#对外提供接口服务：" class="headerlink" title="对外提供接口服务："></a>对外提供接口服务：</h3><p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller.webs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.EasyUIDataGridResult;</div><div class="line"><span class="keyword">import</span> com.migo.service.ContentService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/12/4.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"webs/content"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsContenController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(WebsContenController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentService contentService;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据categoryId查询内容列表</div><div class="line">     * <span class="doctag">@param</span> categoryId</div><div class="line">     * <span class="doctag">@param</span> page</div><div class="line">     * <span class="doctag">@param</span> rows</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;EasyUIDataGridResult&gt; <span class="title">queryListByCategoryId</span><span class="params">(</span></span></div><div class="line">            @RequestParam(<span class="string">"categoryId"</span>) Long categoryId,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"page"</span>,defaultValue = <span class="string">"1"</span>)</span> Integer page,</div><div class="line">            @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"rows"</span>,defaultValue = <span class="string">"20"</span>)</span> Integer rows</div><div class="line"></div><div class="line">    )&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据categoryId查询内容列表 categoryId = &#123;&#125;"</span>,categoryId);</div><div class="line">            &#125;</div><div class="line">            EasyUIDataGridResult result=<span class="keyword">this</span>.contentService.queryListByCategoryId(categoryId,page,rows);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(result);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"根据categoryId查询内容列表 服务器傲娇了 categoryId = &#123;&#125;"</span>,categoryId,e);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行与测试：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161204_013436.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-门户首页大广告位显示-3-十七&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页大广告位显示-3-十七&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 门户首页大广告位显示(3) 十七&quot;&gt;&lt;/a&gt;Migo商城2.0 门户首页大广告位显示(3) 十七&lt;/h2&gt;&lt;p&gt;接上篇：&lt;/p&gt;
&lt;h3 id=&quot;内容管理的实现&quot;&gt;&lt;a href=&quot;#内容管理的实现&quot; class=&quot;headerlink&quot; title=&quot;内容管理的实现&quot;&gt;&lt;/a&gt;内容管理的实现&lt;/h3&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 门户首页大广告位显示(2) 十 六</title>
    <link href="https://muyinchen.github.io/2016/12/03/Migo%E5%95%86%E5%9F%8E2.0%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%B9%BF%E5%91%8A%E4%BD%8D%E6%98%BE%E7%A4%BA(2)%20%E5%8D%81%20%E5%85%AD/"/>
    <id>https://muyinchen.github.io/2016/12/03/Migo商城2.0 门户首页大广告位显示(2) 十 六/</id>
    <published>2016-12-03T14:48:08.535Z</published>
    <updated>2016-12-03T14:47:46.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Migo商城2-0-门户首页大广告位显示-2-十-六"><a href="#Migo商城2-0-门户首页大广告位显示-2-十-六" class="headerlink" title="Migo商城2.0 门户首页大广告位显示(2) 十 六"></a>Migo商城2.0 门户首页大广告位显示(2) 十 六</h1><p>接上篇，<br><a id="more"></a><br>完成后，对每个节点右键点击，触发事件</p>
<p>触发菜单显示：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161130_001834.png" alt=""></p>
<p>具体事件定义：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161130_002506.png" alt=""></p>
<p>新增和修改事件，查<code>api</code>  对比上图代码位置，一看便知：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161130_003919.png" alt=""></p>
<p>此处处理接着看代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">onAfterEdit : <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> _tree = $(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">if</span>(node.id == <span class="number">0</span>)&#123;</div><div class="line">		<span class="comment">// 新增节点</span></div><div class="line">		$.post(<span class="string">"/rest/content/category"</span>,&#123;<span class="attr">parentId</span>:node.parentId,<span class="attr">name</span>:node.text&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">			_tree.tree(<span class="string">"update"</span>,&#123;</div><div class="line">				<span class="attr">target</span> : node.target,</div><div class="line">				<span class="attr">id</span> : data.id</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">			   <span class="attr">type</span>: <span class="string">"PUT"</span>,</div><div class="line">			   <span class="attr">url</span>: <span class="string">"/rest/content/category"</span>,</div><div class="line">			   <span class="attr">data</span>: &#123;<span class="attr">id</span>:node.id,<span class="attr">name</span>:node.text&#125;,</div><div class="line">			   <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">				   <span class="comment">//$.messager.alert('提示','新增商品成功!');</span></div><div class="line">			   &#125;,</div><div class="line">			   <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'重命名失败!'</span>);</div><div class="line">			   &#125;</div><div class="line">			&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="新增节点代码实现："><a href="#新增节点代码实现：" class="headerlink" title="新增节点代码实现："></a>新增节点代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 新增节点</div><div class="line">   * <span class="doctag">@param</span> contentCategory</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line">  <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ContentCategory&gt; <span class="title">addContentCategery</span><span class="params">(ContentCategory contentCategory)</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">              logger.info(<span class="string">"新增节点 contentCategory = &#123;&#125;"</span>,contentCategory);</div><div class="line">          &#125;</div><div class="line">          <span class="comment">//补全字段</span></div><div class="line">          contentCategory.setId(<span class="keyword">null</span>);</div><div class="line">          contentCategory.setIsParent(<span class="keyword">false</span>);</div><div class="line">          contentCategory.setSortOrder(<span class="number">1</span>);</div><div class="line">          contentCategory.setStatus(<span class="number">1</span>);</div><div class="line">          <span class="keyword">this</span>.contentCategoryService.save(contentCategory);</div><div class="line"></div><div class="line">          <span class="comment">//新增节点后可能会改变父节点的状态isParent</span></div><div class="line">          ContentCategory parent = <span class="keyword">this</span>.contentCategoryService.queryById(contentCategory.getParentId());</div><div class="line">          <span class="keyword">if</span> (!parent.getIsParent()) &#123;</div><div class="line"></div><div class="line">              parent.setIsParent(<span class="keyword">true</span>);</div><div class="line">              <span class="keyword">this</span>.contentCategoryService.updateSelective(parent);</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).body(contentCategory);</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">         logger.error(<span class="string">"新增节点 服务器傲娇了 contentCategory = &#123;&#125;"</span>,contentCategory,e);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="运行测试结果："><a href="#运行测试结果：" class="headerlink" title="运行测试结果："></a>运行测试结果：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161203_212652.png" alt=""></p>
<h4 id="重命名后台代码："><a href="#重命名后台代码：" class="headerlink" title="重命名后台代码："></a>重命名后台代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 修改节点</div><div class="line">     * <span class="doctag">@param</span> contentCategory</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateContentCategery</span><span class="params">(ContentCategory contentCategory)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"修改节点 contentCategory = &#123;&#125;"</span>,contentCategory);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.contentCategoryService.updateSelective(contentCategory);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"修改节点 服务器傲娇了 contentCategory = &#123;&#125;"</span>,contentCategory,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="运行测试结果：-1"><a href="#运行测试结果：-1" class="headerlink" title="运行测试结果："></a>运行测试结果：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sp161203_214659.png" alt=""></p>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><h5 id="js代码："><a href="#js代码：" class="headerlink" title="js代码："></a><code>js</code>代码：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(item.name === <span class="string">"delete"</span>)&#123;</div><div class="line">		$.messager.confirm(<span class="string">'确认'</span>,<span class="string">'确定删除名为 '</span>+node.text+<span class="string">' 的分类吗？'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span>(r)&#123;</div><div class="line">				$.ajax(&#123;</div><div class="line">     			   <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">     			   <span class="attr">url</span>: <span class="string">"/rest/content/category"</span>,</div><div class="line">                  <span class="comment">//注意此处的写法，不懂可谷歌 一下</span></div><div class="line">     			   data : &#123;<span class="attr">parentId</span>:node.parentId,<span class="attr">id</span>:node.id,<span class="string">"_method"</span>:<span class="string">"DELETE"</span>&#125;,</div><div class="line">     			   <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">     				   <span class="comment">//$.messager.alert('提示','新增商品成功!');</span></div><div class="line">     				  tree.tree(<span class="string">"remove"</span>,node.target);</div><div class="line">     			   &#125;,</div><div class="line">     			   <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     				   $.messager.alert(<span class="string">'提示'</span>,<span class="string">'删除失败!'</span>);</div><div class="line">     			   &#125;</div><div class="line">     			&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>相对应的<code>web.xml</code>的处理</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 将POST请求转化为DELETE或者是PUT 要用_method指定真正的请求参数 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="后台代码实现："><a href="#后台代码实现：" class="headerlink" title="后台代码实现："></a>后台代码实现：</h4><p><code>删除节点所涉及的逻辑还是比较多的</code></p>
<h5 id="controller代码"><a href="#controller代码" class="headerlink" title="controller代码"></a>controller代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除节点</div><div class="line"> * <span class="doctag">@param</span> contentCategory</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.DELETE)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">delete</span><span class="params">(ContentCategory contentCategory)</span></span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">            logger.info(<span class="string">"删除节点 contentCategory = &#123;&#125;"</span>,contentCategory);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.contentCategoryService.deleteDuDu(contentCategory);</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        logger.error(<span class="string">"删除节点 服务器傲娇了 contentCategory = &#123;&#125;"</span>,contentCategory,e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="service代码"><a href="#service代码" class="headerlink" title="service代码"></a>service代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ContentCategory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/20.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCategoryService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ContentCategory</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDuDu</span><span class="params">(ContentCategory contentCategory)</span> </span>&#123;</div><div class="line">        List ids=<span class="keyword">new</span> ArrayList();</div><div class="line">        ids.add(contentCategory.getId());</div><div class="line"></div><div class="line">        <span class="comment">//调用递归方法添加旗下所有子节点id</span></div><div class="line">        <span class="keyword">this</span>.addAllChildrenNode(ids,contentCategory.getId());</div><div class="line">        <span class="keyword">super</span>.deleteByIds(ContentCategory.class,<span class="string">"id"</span>,ids);</div><div class="line">        <span class="comment">//判断该节点是否还有兄弟节点，如果没有，修改父节点的isParent为false</span></div><div class="line">        ContentCategory example=<span class="keyword">new</span> ContentCategory();</div><div class="line">        example.setParentId(contentCategory.getParentId());</div><div class="line">        List&lt;ContentCategory&gt; list = <span class="keyword">super</span>.queryListByWhere(example);</div><div class="line">        <span class="keyword">if</span> (list==<span class="keyword">null</span>||list.isEmpty())&#123;</div><div class="line">            ContentCategory parent=<span class="keyword">new</span> ContentCategory();</div><div class="line">            parent.setId(contentCategory.getParentId());</div><div class="line">            parent.setIsParent(<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">super</span>.updateSelective(parent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAllChildrenNode</span><span class="params">(List ids,Long pid)</span></span>&#123;</div><div class="line">        ContentCategory example=<span class="keyword">new</span> ContentCategory();</div><div class="line">        example.setParentId(pid);</div><div class="line">        List&lt;ContentCategory&gt; contentCategories = <span class="keyword">super</span>.queryListByWhere(example);</div><div class="line">        <span class="keyword">for</span> (ContentCategory contentCategory : contentCategories) &#123;</div><div class="line">            ids.add(contentCategory.getId());</div><div class="line">            <span class="comment">//判断该节点是否为父节点，如果是，继续调用该方法查找子节点</span></div><div class="line">            <span class="keyword">if</span> (contentCategory.getIsParent()) &#123;</div><div class="line">                <span class="comment">//递归调用此方法</span></div><div class="line">                addAllChildrenNode(ids,contentCategory.getId());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="运行操作结果："><a href="#运行操作结果：" class="headerlink" title="运行操作结果："></a>运行操作结果：</h5><p><img src="http://og0sybnix.bkt.clouddn.com/sp161203_224126.png" alt=""></p>
<p>内容分类管理完事</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Migo商城2-0-门户首页大广告位显示-2-十-六&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页大广告位显示-2-十-六&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 门户首页大广告位显示(2) 十 六&quot;&gt;&lt;/a&gt;Migo商城2.0 门户首页大广告位显示(2) 十 六&lt;/h1&gt;&lt;p&gt;接上篇，&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 Cookie 和 session详解 附一</title>
    <link href="https://muyinchen.github.io/2016/11/23/Migo%E5%95%86%E5%9F%8E2.0%20Cookie-%E5%92%8C-session%E8%AF%A6%E8%A7%A3-%E9%99%84%E4%B8%80/"/>
    <id>https://muyinchen.github.io/2016/11/23/Migo商城2.0 Cookie-和-session详解-附一/</id>
    <published>2016-11-23T13:37:50.081Z</published>
    <updated>2016-11-23T13:37:28.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie-和-session详解"><a href="#Cookie-和-session详解" class="headerlink" title="Cookie 和 session详解"></a>Cookie 和 session详解</h1><p>因为要写单点登录系统，有些基本的东西想想还是说下的</p>
<p>在将cookie 和 session 之前需要先理解什么是会话<br>会话：<br>用户打开一个浏览器，点击多个超链接，访问多个web资源，然后关闭浏览器，整个过程称为一个会话。<br>http协议是无状态的，一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换建立新的连接，也就是说，服务器无法跟踪会话。而cookie 和 session 就是用与解决这种问题。<br><a id="more"></a></p>
<h3 id="1-什么是cookie"><a href="#1-什么是cookie" class="headerlink" title="1.什么是cookie"></a>1.什么是cookie</h3><p>cookie是客户端的技术，程序把每个用户数据以cookie的形式写给用户各自的浏览器，当客户端再次访问服务器的时候，会带着各自的Cookie过来，这样服务器就能处理各自用户的数据了</p>
<h4 id="1-1-如何使用cookie"><a href="#1-1-如何使用cookie" class="headerlink" title="1.1 如何使用cookie"></a>1.1 如何使用cookie</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>,<span class="string">"value"</span>); <span class="comment">//创建一个cookie</span></div><div class="line">cookie.setPath(<span class="string">"/"</span>); <span class="comment">//cookie记得一定要设定路径，默认是当前的类的路径，设置/代表是整个web应用。</span></div><div class="line">cookie.setMaxAge(<span class="string">""</span>); <span class="comment">//设置有效期限，默认是浏览器的进程，也就是浏览器关了，就没了。如果是设置为负数，那么cookie不会被存储，并且会被删除。如果设置为0，那么cookie会被删除。（这些内容在API上描述得非常清楚）</span></div><div class="line">response.addCookie(cookie);<span class="comment">//添加cookie,这样才能回写给客户端</span></div></pre></td></tr></table></figure>
<p>以上的内容就是关于如何去使用一个cookie了。</p>
<h4 id="1-2-cookie的细节"><a href="#1-2-cookie的细节" class="headerlink" title="1.2. cookie的细节"></a>1.2. cookie的细节</h4><p>根据API的描述，一个cookie最大为4KB.浏览器一般只允许存放300个cookie，每个站点最多存放20个Cookie。Cookie被创建的时候默认使用Verssion 0 ,也就是http 1.0</p>
<h5 id="1-2-1-cookie的删除"><a href="#1-2-1-cookie的删除" class="headerlink" title="1.2.1 cookie的删除"></a>1.2.1 cookie的删除</h5><p>在cookie的API中没有删除cookie的具体方法，但是我们可以通过设置cookie的生命周期，来讲cookie删除，设置为0代表删除（详解自行查看setMaxAge()方法）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cookie.setMaxAge(<span class="number">0</span>);  </div><div class="line">如果说不想从request域中获取cookie，然后将该cookie的生命周期设置为<span class="number">0</span>，可以采用以下这个方法</div><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"想删除的cooki名字"</span>,<span class="string">"value"</span>);</div><div class="line">cookie.setPath(<span class="string">""</span>);<span class="comment">//此处路径必须与想删除的cookie一致</span></div><div class="line">cookie.setMaxAge(<span class="number">0</span>); </div><div class="line">response.addCookie(cookie);</div></pre></td></tr></table></figure>
<h4 id="1-3-cookie的获取"><a href="#1-3-cookie的获取" class="headerlink" title="1.3 cookie的获取"></a>1.3 cookie的获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.getCookies(); <span class="comment">//返回的是cookie的数组</span></div></pre></td></tr></table></figure>
<p>以上就是cookie的常用方法。</p>
<h4 id="1-4-cookie设置注释"><a href="#1-4-cookie设置注释" class="headerlink" title="1.4 cookie设置注释"></a>1.4 cookie设置注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie.setComment(<span class="string">"comment"</span>)</div></pre></td></tr></table></figure>
<h4 id="1-5-cookie-设置安全传输协议-例如-https-ssl"><a href="#1-5-cookie-设置安全传输协议-例如-https-ssl" class="headerlink" title="1.5 cookie 设置安全传输协议(例如 https ,ssl)"></a>1.5 cookie 设置安全传输协议(例如 https ,ssl)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cookie.setSecure(<span class="keyword">true</span>|<span class="keyword">false</span>) 默认为<span class="keyword">false</span></div></pre></td></tr></table></figure>
<h3 id="2-什么是session"><a href="#2-什么是session" class="headerlink" title="2.什么是session"></a>2.什么是session</h3><p>session是服务端的技术，当浏览器第1次访问web资源的时候，服务器会自动为其创建一个session，并保存在服务器，当需要保存用户数据的时候，可以将数据写入session中。当用户访问其他程序的时候，就可以直接从session中取值。值得一提的是sesion是建立在cookie的基础上创建的。</p>
<h4 id="2-1-session实现原理"><a href="#2-1-session实现原理" class="headerlink" title="2.1 session实现原理"></a>2.1 session实现原理</h4><p>session的实现原理是建立在给浏览器回写cookie，并且是以JSESSIONID为键，但是这个cookie是没有时间的，也就是说，当你关闭浏览器时，代表一个会话结束了，也就是说你的session会被删除，当你再次访问服务器的时候，服务器会为你重新创建一个session。</p>
<h4 id="2-2-session的使用"><a href="#2-2-session的使用" class="headerlink" title="2.2 session的使用"></a>2.2 session的使用</h4><h5 id="2-2-1-客户端不禁用cookie的情况"><a href="#2-2-1-客户端不禁用cookie的情况" class="headerlink" title="2.2.1 客户端不禁用cookie的情况"></a>2.2.1 客户端不禁用cookie的情况</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HttpSession session = request.getSession();<span class="comment">//客户端访问服务器的时候，服务器会自动创建一个session,如果客户端没有禁用cookie的话。</span></div><div class="line">String sessionId = session.getId();</div><div class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,sessionId);</div><div class="line">cookie.setPaht(<span class="string">"/"</span>);</div><div class="line">cookie.setMaxAge(<span class="number">30</span>*<span class="number">60</span>);<span class="comment">//注意在tomcat的web.xml文件中，设置了session的生命周期最长为30分钟。</span></div><div class="line">response.addCookie(cookie);</div><div class="line">session.setAttribute(<span class="string">"key"</span>,<span class="string">"value"</span>);</div></pre></td></tr></table></figure>
<h5 id="2-2-2-客户端禁用cookie的情况"><a href="#2-2-2-客户端禁用cookie的情况" class="headerlink" title="2.2.2 客户端禁用cookie的情况"></a>2.2.2 客户端禁用cookie的情况</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如果客户端禁用cookie，那么需要调用response的encodeURL(<span class="string">"转发的地址"</span>)</div><div class="line">HttpSession session = request.getSession();</div><div class="line">String url1 = response.encodeURL(<span class="string">"xxxx"</span>);<span class="comment">//注意，调用这个方法之前，必须要先获取session,（在该方法的API描述得很清楚）</span></div><div class="line">PrintWriter pw = response.getWriter();</div><div class="line">pw.write(url1);</div></pre></td></tr></table></figure>
<h4 id="2-3-session的一些细节"><a href="#2-3-session的一些细节" class="headerlink" title="2.3 session的一些细节"></a>2.3 session的一些细节</h4><p>设置session的生命周期</p>
<p>可以通过设置配置文件的形式，设置session的生命周期；在web.xml文件中添加如下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span>//备注这里是以分钟为单位</div><div class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>参考以下2篇博文:<br><a href="https://my.oschina.net/kevinair/blog/192829" target="_blank" rel="external">https://my.oschina.net/kevina…</a> 深入源码剖析了session和cookie<br><a href="http://blog.csdn.net/fangaoxin/article/details/6952954/" target="_blank" rel="external">http://blog.csdn.net/fangaoxi…</a> 介绍了一些基本的知识</p>
<p>本来想自己写下基本知识，发现有现成的，就拿来主义了，自己保存的一篇文章，源于何处未知</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cookie-和-session详解&quot;&gt;&lt;a href=&quot;#Cookie-和-session详解&quot; class=&quot;headerlink&quot; title=&quot;Cookie 和 session详解&quot;&gt;&lt;/a&gt;Cookie 和 session详解&lt;/h1&gt;&lt;p&gt;因为要写单点登录系统，有些基本的东西想想还是说下的&lt;/p&gt;
&lt;p&gt;在将cookie 和 session 之前需要先理解什么是会话&lt;br&gt;会话：&lt;br&gt;用户打开一个浏览器，点击多个超链接，访问多个web资源，然后关闭浏览器，整个过程称为一个会话。&lt;br&gt;http协议是无状态的，一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换建立新的连接，也就是说，服务器无法跟踪会话。而cookie 和 session 就是用与解决这种问题。&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 门户首页大广告位显示(1) 十五</title>
    <link href="https://muyinchen.github.io/2016/11/20/Migo%E5%95%86%E5%9F%8E2.0%20%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%A4%A7%E5%B9%BF%E5%91%8A%E4%BD%8D%E6%98%BE%E7%A4%BA(1)%20%E5%8D%81%E4%BA%94/"/>
    <id>https://muyinchen.github.io/2016/11/20/Migo商城2.0  门户首页大广告位显示(1) 十五/</id>
    <published>2016-11-20T15:52:22.470Z</published>
    <updated>2016-11-29T16:04:54.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-门户首页大广告位显示-1-十五"><a href="#Migo商城2-0-门户首页大广告位显示-1-十五" class="headerlink" title="Migo商城2.0  门户首页大广告位显示(1) 十五"></a>Migo商城2.0  门户首页大广告位显示(1) 十五</h2><p>操作失误，将之前的稿子搞没了，又得重新敲，坑。。。</p>
<p>来一张效果图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/dgg.png" alt=""></p>
<h3 id="轮播图的实现"><a href="#轮播图的实现" class="headerlink" title="轮播图的实现"></a>轮播图的实现</h3><blockquote>
<p>1、  将首页显示的广告都抽象的看作是内容</p>
<p>2、  在后台系统中创建一张内容表<br><a id="more"></a><br>3、  创建一个内容分类表用于区分内容的分类</p>
<p>4、  后台系统对内容表以及分类表进行CRUD</p>
<p>5、  对外提供接口服务</p>
<p>6、  前端系统通过接口获取数据，进行封装，即可实现</p>
</blockquote>
<h4 id="首页动态展示分析"><a href="#首页动态展示分析" class="headerlink" title="首页动态展示分析"></a>首页动态展示分析</h4><blockquote>
<p>1、网页内容可以进行分组</p>
<p>2、组中的每个项目包含一张图片</p>
<p>3、项目包含一个url</p>
<p>4、项目包含一个title</p>
<p>5、项目可能包含价格</p>
<p>6、大组下还可以有小组，小组下还可以再分组。</p>
</blockquote>
<p>内容归类：</p>
<blockquote>
<ol>
<li>需要有内容分组，需要是一个树形结构。</li>
<li>组下有项目</li>
</ol>
<ul>
<li>a)        包含图片</li>
<li>b)       Url</li>
<li>c)        Title</li>
<li>d)       价格</li>
</ul>
</blockquote>
<p>可以使用两个表来保存，</p>
<p>一个是内容分组表：<code>tb_content_category</code></p>
<p>一个内容项目表。<code>tb_content</code></p>
<p>于是引出一个概念 <code>内容管理系统（CMS）</code> 具体可以谷歌一下</p>
<h4 id="内容分类管理分析"><a href="#内容分类管理分析" class="headerlink" title="内容分类管理分析"></a>内容分类管理分析</h4><h5 id="功能分析："><a href="#功能分析：" class="headerlink" title="功能分析："></a>功能分析：</h5><blockquote>
<p>操作的数据库是tb_content_category，向表中插入数据。</p>
<p>页面：</p>
<ol>
<li>初始化树形控件。</li>
<li>添加节点</li>
<li>重命名节点</li>
<li>删除节点</li>
</ol>
</blockquote>
<h4 id="初始化树形控件"><a href="#初始化树形控件" class="headerlink" title="初始化树形控件"></a>初始化树形控件</h4><p>如图：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/sp161129_235719.png" alt=""></p>
<p>请求的url：/rest/content/category</p>
<p>参数：id，当前节点的id，根据id查询子节点。</p>
<p>返回值：json数据</p>
<p>格式：(api查询所得)</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[&#123;    </div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,    </div><div class="line">    <span class="attr">"text"</span>: <span class="string">"Node 1"</span>,    </div><div class="line">    <span class="attr">"state"</span>: <span class="string">"closed"</span>,    </div><div class="line">    <span class="attr">"children"</span>: [&#123;    </div><div class="line">        <span class="attr">"id"</span>: <span class="number">11</span>,    </div><div class="line">        <span class="attr">"text"</span>: <span class="string">"Node 11"</span>   </div><div class="line">    &#125;,&#123;    </div><div class="line">        <span class="attr">"id"</span>: <span class="number">12</span>,    </div><div class="line">        <span class="attr">"text"</span>: <span class="string">"Node 12"</span>   </div><div class="line">    &#125;]    </div><div class="line">&#125;,&#123;    </div><div class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,    </div><div class="line">    <span class="attr">"text"</span>: <span class="string">"Node 2"</span>,    </div><div class="line">    <span class="attr">"state"</span>: <span class="string">"closed"</span>   </div><div class="line">&#125;]</div></pre></td></tr></table></figure>
<p>可以使用<code>EUTreeNode</code>(第一版)  2.0版本是<code>ContentCategory</code> 主要是为省查到结果后重新遍历转换为<code>EUTreeNode</code>，造成性能浪费 具体不同的地方请自行对比</p>
<p><code>ContentCategory</code> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Column;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> javax.persistence.Table;</div><div class="line"></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_content_category"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCategory</span> <span class="keyword">extends</span> <span class="title">BasePojo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"parent_id"</span>)</div><div class="line">    <span class="keyword">private</span> Long parentId;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer status;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"sort_order"</span>)</div><div class="line">    <span class="keyword">private</span> Integer sortOrder;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"is_parent"</span>)</div><div class="line">    <span class="keyword">private</span> Boolean isParent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getParentId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> parentId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentId</span><span class="params">(Long parentId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parentId = parentId;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Integer status)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSortOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sortOrder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSortOrder</span><span class="params">(Integer sortOrder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sortOrder = sortOrder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getIsParent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isParent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsParent</span><span class="params">(Boolean isParent)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isParent = isParent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 扩展字段，支持EasyUItree的显示,这样就可以避免再写一个第一版中的EasyuiTreeNode类，同时也省了第一版中</span></div><div class="line">    <span class="comment">//在service中的一系列对easyuiTreeNode的处理</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getIsParent() ? <span class="string">"closed"</span> : <span class="string">"open"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>操作的数据库是<code>tb_content_category</code>，属于单表操作，可以使用<code>通用mapper</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ContentCategory;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/20.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ContentCategoryMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">ContentCategory</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ContentCategory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/20.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCategoryService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ContentCategory</span>&gt;</span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ContentCategory;</div><div class="line"><span class="keyword">import</span> com.migo.service.ContentCategoryService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/20.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"content/category"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentCategoryController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(ContentCategoryController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentCategoryService contentCategoryService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据父节点id查询节点列表</div><div class="line">     * <span class="doctag">@param</span> parentId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;ContentCategory&gt;&gt; getContentCatList(</div><div class="line">            <span class="meta">@RequestParam</span>(value = <span class="string">"id"</span>, defaultValue = <span class="string">"0"</span>) Long parentId) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据父节点id查询节点列表 parentId = &#123;&#125;"</span>,parentId);</div><div class="line">            &#125;</div><div class="line">            ContentCategory example=<span class="keyword">new</span> ContentCategory();</div><div class="line">            example.setParentId(parentId);</div><div class="line">            List&lt;ContentCategory&gt; categoryList = <span class="keyword">this</span>.contentCategoryService.queryListByWhere(example);</div><div class="line">            <span class="keyword">if</span> (categoryList==<span class="keyword">null</span>||categoryList.isEmpty())&#123;</div><div class="line">                <span class="keyword">if</span> (logger.isInfoEnabled())&#123;</div><div class="line">                    logger.info(<span class="string">"根据父节点id查询节点列表 未找到 parentId = &#123;&#125;"</span>,parentId);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span>  ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>  ResponseEntity.ok(categoryList);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"根据父节点id查询节点列表 服务器傲娇了 parentId = &#123;&#125;"</span>,parentId,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行项目，显示效果：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/catgery.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-门户首页大广告位显示-1-十五&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页大广告位显示-1-十五&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  门户首页大广告位显示(1) 十五&quot;&gt;&lt;/a&gt;Migo商城2.0  门户首页大广告位显示(1) 十五&lt;/h2&gt;&lt;p&gt;操作失误，将之前的稿子搞没了，又得重新敲，坑。。。&lt;/p&gt;
&lt;p&gt;来一张效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/dgg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;轮播图的实现&quot;&gt;&lt;a href=&quot;#轮播图的实现&quot; class=&quot;headerlink&quot; title=&quot;轮播图的实现&quot;&gt;&lt;/a&gt;轮播图的实现&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1、  将首页显示的广告都抽象的看作是内容&lt;/p&gt;
&lt;p&gt;2、  在后台系统中创建一张内容表&lt;br&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>缓存浅析 一  常用的缓存技术</title>
    <link href="https://muyinchen.github.io/2016/11/18/%E7%BC%93%E5%AD%98%E6%B5%85%E6%9E%90%20%E4%B8%80%20%20%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%20/"/>
    <id>https://muyinchen.github.io/2016/11/18/缓存浅析 一  常用的缓存技术 /</id>
    <published>2016-11-18T11:40:48.216Z</published>
    <updated>2016-11-18T11:40:35.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存浅析-一-常用的缓存技术"><a href="#缓存浅析-一-常用的缓存技术" class="headerlink" title="缓存浅析 一  常用的缓存技术"></a>缓存浅析 一  常用的缓存技术</h2><h3 id="1、常见的两种缓存"><a href="#1、常见的两种缓存" class="headerlink" title="1、常见的两种缓存"></a>1、常见的两种缓存</h3><ul>
<li><code>本地缓存</code>：不需要序列化，速度快，缓存的数量与大小受限于本机内存</li>
<li><p><code>分布式缓存</code>：需要序列化，速度相较于本地缓存较慢，但是理论上缓存的数量与大小无限（因为缓存机器可以不断扩展）</p>
<a id="more"></a>
<h3 id="2、本地缓存"><a href="#2、本地缓存" class="headerlink" title="2、本地缓存"></a>2、本地缓存</h3></li>
<li><p><code>Google guava cache</code>：当下最好用的本地缓存</p>
</li>
<li><code>Ehcache</code>：<code>spring</code>默认集成的一个缓存，以spring cache的底层缓存实现类形式去操作缓存的话，非常方便，但是欠缺灵活，如果想要灵活使用，还是要单独使用<code>Ehcache</code></li>
<li><code>Oscache</code>：最经典简单的页面缓存</li>
</ul>
<h3 id="3、分布式缓存"><a href="#3、分布式缓存" class="headerlink" title="3、分布式缓存"></a>3、分布式缓存</h3><ol>
<li><code>memcached</code>：分布式缓存的标配</li>
<li><code>Redis</code>：新一代的分布式缓存，有替代memcached的趋势</li>
</ol>
<h4 id="3-1、memcached"><a href="#3-1、memcached" class="headerlink" title="3.1、memcached"></a>3.1、memcached</h4><ul>
<li><code>经典的一致性hash算法</code></li>
<li><code>基于slab的内存模型有效防止内存碎片的产生</code>（但同时也需要估计好启动参数，否则会浪费很多的内存）</li>
<li><code>集群中机器之间互不通信</code>（相较于Jboss cache等集群中机器之间的相互通信的缓存，速度更快&lt;–因为少了同步更新缓存的开销，且更适合于大型分布式系统中使用）</li>
<li><code>使用方便</code>（这一点是相较于Redis在构建客户端的时候而言的，尽管redis的使用也不困难）</li>
<li><code>很专一</code>（专做缓存，这一点也是相较于Redis而言的）</li>
</ul>
<h4 id="3-2、Redis"><a href="#3-2、Redis" class="headerlink" title="3.2、Redis"></a>3.2、Redis</h4><blockquote>
<p><code>可以存储复杂的数据结构（5种）</code><br>strings–&gt;即简单的key-value，就是memcached可以存储的唯一的一种形式，接下来的四种是memcached不能直接存储的四种格式（当然理论上可以先将下面的一些数据结构中的东西封装成对象，然后存入memcached，但是不推荐将大对象存入memcached，因memcached的单一value的最大存储为1M，可能即使采用了压缩算法也不够，即使够，可能存取的效率也不高，而redis的value最大为1G）<br>hashs–&gt;看做hashTable<br>lists–&gt;看做LinkedList<br>sets–&gt;看做hashSet，事实上底层是一个hashTable<br>sorted sets–&gt;底层是一个skipList<br><code>有两种方式可以对缓存数据进行持久化</code><br>RDB<br>AOF<br><code>事件调度</code><br><code>发布订阅等</code></p>
</blockquote>
<h4 id="4、集成缓存"><a href="#4、集成缓存" class="headerlink" title="4、集成缓存"></a>4、集成缓存</h4><p>专指spring cache，spring cache自己继承了ehcache作为了缓存的实现类，我们也可以使用guava cache、memcached、redis<br>自己来实现spring cache的底层。当然，spring cache可以根据实现类来将缓存存在本地还是存在远程机器上。</p>
<h4 id="5、页面缓存"><a href="#5、页面缓存" class="headerlink" title="5、页面缓存"></a>5、页面缓存</h4><p>在使用jsp的时候，我们会将一些复杂的页面使用O scache进行页面缓存，使用非常简单，就是几个标签的事儿；但是，现在一般的企业，<br>前台都会使用velocity、freemaker这两种模板引擎，本身速度就已经很快了，页面缓存使用的也就很少了。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>在实际生产中，我们通常会使用guava cache做本地缓存+redis做分布式缓存+spring cache就集成缓存（底层使用redis来实现）的形式<br>guava cache使用在更快的获取缓存数据，同时缓存的数据量并不大的情况<br>spring cache集成缓存是为了简单便捷的去使用缓存（以注解的方式即可），使用redis做其实现类是为了可以存更多的数据在机器上<br>redis缓存单独使用是为了弥补spring cache集成缓存的不灵活<br>就我个人而言，如果需要使用分布式缓存，那么首先redis是必选的，因为在实际开发中，我们会缓存各种各样的数据类型，在使用了redis的同时，memcached就完全可以舍弃了，但是现在还有很多公司在同时使用memcached和redis两种缓存。<br>接下来的介绍中，会介绍在分布式情况下guava cache、memcached、redis、spring cache的使用与原理。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存浅析-一-常用的缓存技术&quot;&gt;&lt;a href=&quot;#缓存浅析-一-常用的缓存技术&quot; class=&quot;headerlink&quot; title=&quot;缓存浅析 一  常用的缓存技术&quot;&gt;&lt;/a&gt;缓存浅析 一  常用的缓存技术&lt;/h2&gt;&lt;h3 id=&quot;1、常见的两种缓存&quot;&gt;&lt;a href=&quot;#1、常见的两种缓存&quot; class=&quot;headerlink&quot; title=&quot;1、常见的两种缓存&quot;&gt;&lt;/a&gt;1、常见的两种缓存&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;本地缓存&lt;/code&gt;：不需要序列化，速度快，缓存的数量与大小受限于本机内存&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;分布式缓存&lt;/code&gt;：需要序列化，速度相较于本地缓存较慢，但是理论上缓存的数量与大小无限（因为缓存机器可以不断扩展）&lt;/p&gt;
    
    </summary>
    
      <category term="缓存" scheme="https://muyinchen.github.io/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="缓存 redis" scheme="https://muyinchen.github.io/tags/%E7%BC%93%E5%AD%98-redis/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0  门户首页左侧商品类目显示 十四</title>
    <link href="https://muyinchen.github.io/2016/11/17/Migo%E5%95%86%E5%9F%8E2.0%20%20%E9%97%A8%E6%88%B7%E9%A6%96%E9%A1%B5%E5%B7%A6%E4%BE%A7%E5%95%86%E5%93%81%E7%B1%BB%E7%9B%AE%E6%98%BE%E7%A4%BA%20%E5%8D%81%E5%9B%9B/"/>
    <id>https://muyinchen.github.io/2016/11/17/Migo商城2.0  门户首页左侧商品类目显示 十四/</id>
    <published>2016-11-17T15:50:14.316Z</published>
    <updated>2016-11-18T11:01:41.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-门户首页左侧商品类目显示-十四"><a href="#Migo商城2-0-门户首页左侧商品类目显示-十四" class="headerlink" title="Migo商城2.0  门户首页左侧商品类目显示 十四"></a>Migo商城2.0  门户首页左侧商品类目显示 十四</h2><p>新建后台提供系统服务，这里就不再新建专门提供服务的项目了(也是因为访问的网址里有rest这个字眼了)</p>
<p>先看下jd的商品类目返回的数据格式：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/jdsplmfx.png" alt=""></p>
<a id="more"></a>
<p>因为扒的页面是jd之前的，没有添加这么多，缺少了1 3 4部分，其实也就添加了几个键值对，不影响数据结构的设计</p>
<h4 id="本项目要实现的数据结构-部分数据-："><a href="#本项目要实现的数据结构-部分数据-：" class="headerlink" title="本项目要实现的数据结构(部分数据)："></a>本项目要实现的数据结构(部分数据)：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"u"</span>: <span class="string">"/products/1.html"</span>,</div><div class="line">            <span class="attr">"n"</span>: <span class="string">"&lt;a href='/products/1.html'&gt;图书、音像、电子书刊&lt;/a&gt;"</span>,</div><div class="line">            <span class="attr">"i"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"u"</span>: <span class="string">"/products/2.html"</span>,</div><div class="line">                    <span class="attr">"n"</span>: <span class="string">"电子书刊"</span>,</div><div class="line">                    <span class="attr">"i"</span>: [</div><div class="line">                        <span class="string">"/products/3.html|电子书"</span>,</div><div class="line">                        <span class="string">"/products/4.html|网络原创"</span>,</div><div class="line">                        <span class="string">"/products/5.html|数字杂志"</span>,</div><div class="line">                        <span class="string">"/products/6.html|多媒体图书"</span></div><div class="line">                    ]</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"u"</span>: <span class="string">"/products/7.html"</span>,</div><div class="line">                    <span class="attr">"n"</span>: <span class="string">"音像"</span>,</div><div class="line">                    <span class="attr">"i"</span>: [</div><div class="line">                        <span class="string">"/products/8.html|音乐"</span>,</div><div class="line">                        <span class="string">"/products/9.html|影视"</span>,</div><div class="line">                        <span class="string">"/products/10.html|教育音像"</span></div><div class="line">                    ]</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"u"</span>: <span class="string">"/products/11.html"</span>,</div><div class="line">                    <span class="attr">"n"</span>: <span class="string">"英文原版"</span>,</div><div class="line">                    <span class="attr">"i"</span>: [</div><div class="line">                        <span class="string">"/products/12.html|少儿"</span>,</div><div class="line">                        <span class="string">"/products/13.html|商务投资"</span>,</div><div class="line">                        <span class="string">"/products/14.html|英语学习与考试"</span>,</div><div class="line">                        <span class="string">"/products/15.html|小说"</span>,</div><div class="line">                        <span class="string">"/products/16.html|传记"</span>,</div><div class="line">                        <span class="string">"/products/17.html|励志"</span></div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">              &#125;</div></pre></td></tr></table></figure>
<p><img src="http://og0sybnix.bkt.clouddn.com/lmfx.png" alt=""></p>
<p>因为没有设计专门的<code>rest</code>服务工程，这里将结构pojo放在<code>common</code>工程中以供通用，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatNode</span> </span>&#123;</div><div class="line">  <span class="comment">// 序列化成json数据时为 u ,不明白请谷歌</span></div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"u"</span>)</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"n"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"i"</span>)</div><div class="line">    <span class="keyword">private</span> List items;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getItems</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List items)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.items = items;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.url = url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCatResult</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为更好的符合类的名字的含义，和更好的理解性，对<code>ItemCatResult</code> 稍做改造</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.pojo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/9.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemCatResult</span> </span>&#123;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"data"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;CatNode&gt; catNodes=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;CatNode&gt; <span class="title">getCatNodes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> catNodes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCatNodes</span><span class="params">(List&lt;CatNode&gt; catNodes)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.catNodes = catNodes;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前台访问的<code>URL</code> :  <code>URL_Serv: &quot;http://tomcat.migo.com/rest/webs/item/cat?callback=category.getDataService&quot;</code>   <code>lib-v1.js 1173行</code></p>
<h3 id="后台代码："><a href="#后台代码：" class="headerlink" title="后台代码："></a>后台代码：</h3><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>从<code>tb_item_cat</code>表中取数据，单表查询，可以使用<code>通用mapper</code></p>
<p>返回结果：<code>ItemCatResult</code></p>
<p>参数：没有</p>
<p>业务逻辑：根据<code>parentid</code>查询子节点列表，并递归调用</p>
<p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 查询，并生成jd页面类似的树状结构</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ItemCatResult <span class="title">getItemCatList</span><span class="params">()</span></span>&#123;</div><div class="line">        ItemCatResult itemCatResult=<span class="keyword">new</span> ItemCatResult();</div><div class="line"></div><div class="line">        <span class="comment">//调用递归方法查询商品分类列表</span></div><div class="line">        List catList=getItemCatList(<span class="number">0L</span>);</div><div class="line">        <span class="comment">//返回结果</span></div><div class="line">        itemCatResult.setCatNodes(catList);</div><div class="line">        <span class="keyword">return</span> itemCatResult;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> List <span class="title">getItemCatList</span><span class="params">(<span class="keyword">long</span> parentId)</span> </span>&#123;</div><div class="line">        <span class="comment">//根据parentId查询列表</span></div><div class="line"></div><div class="line"></div><div class="line">        ItemCat example=<span class="keyword">new</span> ItemCat();</div><div class="line">        example.setParentId(parentId);</div><div class="line">        List&lt;ItemCat&gt; catList = <span class="keyword">super</span>.queryListByWhere(example);</div><div class="line">        List resultList=<span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (ItemCat itemCat : catList) &#123;</div><div class="line">            <span class="comment">//如果是父节点</span></div><div class="line">            <span class="keyword">if</span> (itemCat.getIsParent()) &#123;</div><div class="line">                CatNode node=<span class="keyword">new</span> CatNode();</div><div class="line">                node.setUrl(<span class="string">"/products/"</span>+itemCat.getId()+<span class="string">".html"</span>);</div><div class="line">                <span class="comment">//如果当前节点为第一级节点</span></div><div class="line">                <span class="keyword">if</span> (itemCat.getParentId()==<span class="number">0</span>) &#123;</div><div class="line">                    node.setName(<span class="string">"&lt;a href='/products/"</span>+itemCat.getId()+<span class="string">".html'&gt;"</span>+itemCat.getName()+<span class="string">"&lt;/a&gt;"</span>);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    node.setName(itemCat.getName());</div><div class="line">                &#125;</div><div class="line">                node.setItems(getItemCatList(itemCat.getId()));</div><div class="line">                <span class="comment">//将node添加到列表</span></div><div class="line">                resultList.add(node);</div><div class="line">                count++;</div><div class="line">                <span class="comment">//第一层只取14条记录</span></div><div class="line">                <span class="keyword">if</span> (parentId==<span class="number">0</span>&amp;&amp;count&gt;=<span class="number">14</span>)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//如果是最底层叶子节点</span></div><div class="line">                String item = <span class="string">"/products/"</span>+itemCat.getId()+<span class="string">".html|"</span> + itemCat.getName();</div><div class="line">                resultList.add(item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> resultList;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a><code>controller</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller.webs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemCatResult;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemCatService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"webs/item/cat"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsItemCatController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(WebsItemCatController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemCatService itemCatService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemCatResult&gt; <span class="title">getItemCatList</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info(<span class="string">"查询商品类目数据服务"</span>);</div><div class="line">            &#125;</div><div class="line">            ItemCatResult itemCatList = <span class="keyword">this</span>.itemCatService.getItemCatList();</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemCatList);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           logger.error(<span class="string">"查询商品类目数据服务 失败"</span>, e);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/sxwb.png" alt=""></p>
<p>因为前端门户系统访问后台服务系统相当于跨域请求，这里，得使用<code>jsonp</code>，不了解的可以谷歌一下，回头有时间我会安利一下这个东西的原理，其实很简单，无非就是访问个js片段，具体看下面三点</p>
<blockquote>
<p>1、  jsonp通过script标签的src可以跨域请求的特性，加载资源</p>
<p>2、  将加载的资源（通过一个方法名将数据进行包裹）当做是js脚本解析</p>
<p>3、  定义一个回调函数，获取传入的数据</p>
</blockquote>
<p>添加<code>callback</code>参数</p>
<p>修改<code>controller</code>代码</p>
<p><code>MappingJacksonValue</code>要求<code>springmvc</code>必须是<code>4.1</code>以上版本。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.migo.controller.webs;</div><div class="line"></div><div class="line">import com.migo.pojo.ItemCatResult;</div><div class="line">import com.migo.service.ItemCatService;</div><div class="line">import com.migo.utils.JsonUtils;</div><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.http.HttpStatus;</div><div class="line">import org.springframework.http.ResponseEntity;</div><div class="line">import org.springframework.http.converter.json.MappingJacksonValue;</div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.util.StringUtils;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/17.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">@RequestMapping("webs/item/cat")</div><div class="line">public class WebsItemCatController &#123;</div><div class="line">    private static final Logger logger= LoggerFactory.getLogger(WebsItemCatController.class);</div><div class="line">    @Autowired</div><div class="line">    private ItemCatService itemCatService;</div><div class="line"></div><div class="line">    @RequestMapping(method = RequestMethod.GET)</div><div class="line">    public ResponseEntity&lt;Object&gt; getItemCatList(String callback)&#123;</div><div class="line">        try &#123;</div><div class="line">            if (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info("查询商品类目数据服务");</div><div class="line">            &#125;</div><div class="line">            ItemCatResult itemCatList = this.itemCatService.getItemCatList();</div><div class="line">            if (StringUtils.isEmpty(callback)) &#123;</div><div class="line">                String json = JsonUtils.objectToJson(itemCatList);</div><div class="line"></div><div class="line">                return ResponseEntity.ok((Object) json);</div><div class="line">            &#125;</div><div class="line">            //如果字符串不为空，需要支持jsonp调用</div><div class="line">            MappingJacksonValue mappingJacksonValue=new MappingJacksonValue(itemCatList);</div><div class="line">            mappingJacksonValue.setJsonpFunction(callback);</div><div class="line">            return ResponseEntity.ok((Object) mappingJacksonValue);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">           logger.error("查询商品类目数据服务 失败", e);</div><div class="line">            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/cgsx.png" alt=""></p>
<h3 id="进一步改造jsonp的支持"><a href="#进一步改造jsonp的支持" class="headerlink" title="进一步改造jsonp的支持"></a>进一步改造<code>jsonp</code>的支持</h3><p>这是之前写的一个关于消息转换器的Demo，拿出一个类来足以说明了，看代码注释即可(可以处理输入和输出)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhiqiu.messageconverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.zhiqiu.domain.DemoObj;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.AbstractHttpMessageConverter;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotReadableException;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/10/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">DemoObj</span>&gt;</span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 表明只处理DemoObj这个类</div><div class="line">     * Class类的isAssignableFrom(Class cls)方法，</div><div class="line">     * 如果调用这个方法的class或接口 与 参数cls表示的类或接口相同，</div><div class="line">     * 或者是参数cls表示的类或接口的父类，则返回true。</div><div class="line">     * 形象地：自身类.class.isAssignableFrom(自身类或子类.class) 返回true</div><div class="line">     * <span class="doctag">@param</span> clazz</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DemoObj.class.isAssignableFrom(clazz) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     *处理请求数据</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> DemoObj <span class="title">readInternal</span><span class="params">(Class&lt;? extends DemoObj&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</div><div class="line">        String temp= StreamUtils.copyToString(inputMessage.getBody(),</div><div class="line">                Charset.forName(<span class="string">"utf-8"</span>));</div><div class="line">        String[] tempArr=temp.split(<span class="string">"-"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DemoObj(<span class="keyword">new</span> Long(tempArr[<span class="number">0</span>]),tempArr[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * <span class="doctag">@author</span> kauw 2016/10/1</div><div class="line">    * <span class="doctag">@time</span> 23:45</div><div class="line">    * 处理如何输出数据到response</div><div class="line">    */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(DemoObj obj, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</div><div class="line"></div><div class="line">        String out=<span class="string">"hello:"</span>+obj.getId()+<span class="string">"-"</span>+obj.getName();</div><div class="line">        outputMessage.getBody().write(out.getBytes());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为<code>StringHttpMessageConverter</code>默认字符集为<code>ISO-8859-1</code> 如下部分源码码所示，修改<code>springmvc</code>配置文件的 <code>mvc:annotation-driven</code>，在自定义的转换器里去做就可以了，这里重写上面的 <code>writeInternal</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractHttpMessageConverter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"ISO-8859-1"</span>);</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Charset defaultCharset;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> List&lt;Charset&gt; availableCharsets;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> writeAcceptCharset = <span class="keyword">true</span>;</div></pre></td></tr></table></figure>
<h4 id="在common工程中添加自定义消息转换器"><a href="#在common工程中添加自定义消息转换器" class="headerlink" title="在common工程中添加自定义消息转换器"></a>在<code>common</code>工程中添加自定义消息转换器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.messageconverter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonEncoding;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</div><div class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackMappingJackson2HttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">MappingJackson2HttpMessageConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 做jsonp的支持的标识，在请求参数中加该参数</span></div><div class="line">    <span class="keyword">private</span> String callbackName;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Object object, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException,</span></div><div class="line">            HttpMessageNotWritableException &#123;</div><div class="line">        <span class="comment">// 从threadLocal中获取当前的Request对象</span></div><div class="line">        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder</div><div class="line">                .currentRequestAttributes()).getRequest();</div><div class="line">        String callbackParam = request.getParameter(callbackName);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(callbackParam)) &#123;</div><div class="line">            <span class="comment">// 没有找到callback参数，直接返回json数据</span></div><div class="line">            <span class="keyword">super</span>.writeInternal(object, outputMessage);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            JsonEncoding encoding = getJsonEncoding(outputMessage.getHeaders().getContentType());</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String result = callbackParam + <span class="string">"("</span> + <span class="keyword">super</span>.getObjectMapper().writeValueAsString(object)</div><div class="line">                        + <span class="string">");"</span>;</div><div class="line">                IOUtils.write(result, outputMessage.getBody(), encoding.getJavaName());</div><div class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpMessageNotWritableException(<span class="string">"Could not write JSON: "</span> + ex.getMessage(), ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCallbackName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> callbackName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallbackName</span><span class="params">(String callbackName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.callbackName = callbackName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在manage工程中配置springmvc-xml"><a href="#在manage工程中配置springmvc-xml" class="headerlink" title="在manage工程中配置springmvc.xml"></a>在<code>manage</code>工程中配置<code>springmvc.xml</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></div><div class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo.controller"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:properties/*.properties"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.migo.messageconverter.CallbackMappingJackson2HttpMessageConverter"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"callbackName"</span> <span class="attr">value</span>=<span class="string">"callback"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">            <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置多媒体解析器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 设定默认编码 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 设定文件上传的最大值5MB，5*1024*1024 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="controller修改如下"><a href="#controller修改如下" class="headerlink" title="controller修改如下"></a><code>controller</code>修改如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller.webs;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemCatResult;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemCatService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/17.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"webs/item/cat"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsItemCatController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(WebsItemCatController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemCatService itemCatService;</div><div class="line"></div><div class="line">   <span class="comment">/* @RequestMapping(method = RequestMethod.GET)</span></div><div class="line">    public ResponseEntity&lt;Object&gt; getItemCatList(String callback)&#123;</div><div class="line">        try &#123;</div><div class="line">            if (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info("查询商品类目数据服务");</div><div class="line">            &#125;</div><div class="line">            ItemCatResult itemCatList = this.itemCatService.getItemCatList();</div><div class="line">            if (StringUtils.isEmpty(callback)) &#123;</div><div class="line">                String json = JsonUtils.objectToJson(itemCatList);</div><div class="line"></div><div class="line">                return ResponseEntity.ok((Object) json);</div><div class="line">            &#125;</div><div class="line">            //如果字符串不为空，需要支持jsonp调用</div><div class="line">            MappingJacksonValue mappingJacksonValue=new MappingJacksonValue(itemCatList);</div><div class="line">            mappingJacksonValue.setJsonpFunction(callback);</div><div class="line">            return ResponseEntity.ok((Object) mappingJacksonValue);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">           logger.error("查询商品类目数据服务 失败", e);</div><div class="line">            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;*/</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemCatResult&gt; <span class="title">getItemCatList</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                logger.info(<span class="string">"查询商品类目数据服务"</span>);</div><div class="line">            &#125;</div><div class="line">            ItemCatResult itemCatList = <span class="keyword">this</span>.itemCatService.getItemCatList();</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemCatList);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"查询商品类目数据服务 失败"</span>, e);</div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="重启项目进行测试：结果如下图："><a href="#重启项目进行测试：结果如下图：" class="headerlink" title="重启项目进行测试：结果如下图："></a>重启项目进行测试：结果如下图：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/ecdd.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-门户首页左侧商品类目显示-十四&quot;&gt;&lt;a href=&quot;#Migo商城2-0-门户首页左侧商品类目显示-十四&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  门户首页左侧商品类目显示 十四&quot;&gt;&lt;/a&gt;Migo商城2.0  门户首页左侧商品类目显示 十四&lt;/h2&gt;&lt;p&gt;新建后台提供系统服务，这里就不再新建专门提供服务的项目了(也是因为访问的网址里有rest这个字眼了)&lt;/p&gt;
&lt;p&gt;先看下jd的商品类目返回的数据格式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/jdsplmfx.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0  搭建前台系统 十三</title>
    <link href="https://muyinchen.github.io/2016/11/16/Migo%E5%95%86%E5%9F%8E2.0%20%E6%90%AD%E5%BB%BA%E5%89%8D%E5%8F%B0%E7%B3%BB%E7%BB%9F%20%E5%8D%81%E4%B8%89/"/>
    <id>https://muyinchen.github.io/2016/11/16/Migo商城2.0 搭建前台系统 十三/</id>
    <published>2016-11-16T13:57:05.562Z</published>
    <updated>2016-11-16T13:58:23.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-搭建前台系统-十三"><a href="#Migo商城2-0-搭建前台系统-十三" class="headerlink" title="Migo商城2.0 搭建前台系统 十三"></a>Migo商城2.0 搭建前台系统 十三</h2><p>先来张本系统的系统架构：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/abc.bmp" alt=""></p>
<p>搭建商城门户系统，也就是前台系统</p>
<p>所使用的技术</p>
<a id="more"></a>
<p>后台技术： <code>Spring</code> <code>SpringMVC</code></p>
<p>前台技术：<code>html</code>、<code>CSS</code>、<code>JS</code></p>
<blockquote>
<p>如果不使用Mybatis，商品的数据从何而来？ – 来源于<code>Mysql</code>数据库</p>
<p>获取数据的途径：</p>
<p>1、  从JDBC获取</p>
<p>a)        优点</p>
<pre><code>i.             直接，获取的途径较短，简单
</code></pre><p>b)        缺点</p>
<pre><code>   i.             对后台系统团队而言，数据不安全（只要开放的账户是只读的账户即可）

 ii.             前端系统团队需要有学习的成本，才能使用数据库

iii.             依赖、耦合度太高，后端团队将数据库结构修改，那么其他团队必须跟着修改逻辑，才能使用

iv.             直接走数据库查询，无法添加缓存逻辑
</code></pre><p>2、  通过后台系统接口获取</p>
<p>a)        优点</p>
<pre><code>   i.             耦合度降低，后端团队只要保证接口的返回数据格式不变化，其他团队就无需升级

 ii.             数据安全

iii.             前端团队无需了解学习后端团队的底层数据库结构

iv.             后端团队可以在接口处添加缓存逻辑
</code></pre><p>b)        缺点</p>
<p>获取的路径较长（不是真正的缺点）</p>
</blockquote>
<h3 id="创建migo-portal"><a href="#创建migo-portal" class="headerlink" title="创建migo-portal"></a>创建migo-portal</h3><p>就是个maven工程，过程就不多说了</p>
<p>导入依赖，<code>pom.xml</code>内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.migo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>migo-portal<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.migo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 单元测试 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Jackson Json处理工具包 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- JSP相关 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Apache工具组件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8082<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="工程结构如下："><a href="#工程结构如下：" class="headerlink" title="工程结构如下："></a>工程结构如下：</h4><p><img src="http://og0sybnix.bkt.clouddn.com/qianduanxt.png" alt=""></p>
<h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a><code>applicationContext.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 加载配置文件--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:evn/*.properties"</span>/&gt;</span></div><div class="line"></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 扫描包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a><code>springmvc.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></div><div class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- 注解驱动 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- Controller的扫描包 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.migo.portal.controller"</span>/&gt;</span></div><div class="line">	</div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a><code>web.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></div><div class="line">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>migo-portal<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--Spring的ApplicationContext 载入 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 编码过滤器，以UTF8编码 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置SpringMVC框架入口 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>migo-portal<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>migo-portal<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">                       伪静态有利于SEO（搜索引擎优化）</div><div class="line">         --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="最后，导入静态页面，见源码"><a href="#最后，导入静态页面，见源码" class="headerlink" title="最后，导入静态页面，见源码"></a>最后，导入静态页面，见源码</h5><h4 id="写一个controller展示首页"><a href="#写一个controller展示首页" class="headerlink" title="写一个controller展示首页"></a>写一个<code>controller</code>展示首页</h4><p><code>IndexController</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.portal.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/16.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首页</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"index"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置<code>nginx</code></h5><p><img src="http://og0sybnix.bkt.clouddn.com/nginxpz1.png" alt=""></p>
<h5 id="配置本地host"><a href="#配置本地host" class="headerlink" title="配置本地host"></a>配置本地host</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">192.168</span>.42.128 www.migo.com</div></pre></td></tr></table></figure>
<p>测试：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/syzs.png" alt=""></p>
<p>搭建完毕，本篇到此为止</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-搭建前台系统-十三&quot;&gt;&lt;a href=&quot;#Migo商城2-0-搭建前台系统-十三&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0 搭建前台系统 十三&quot;&gt;&lt;/a&gt;Migo商城2.0 搭建前台系统 十三&lt;/h2&gt;&lt;p&gt;先来张本系统的系统架构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://og0sybnix.bkt.clouddn.com/abc.bmp&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;搭建商城门户系统，也就是前台系统&lt;/p&gt;
&lt;p&gt;所使用的技术&lt;/p&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
  <entry>
    <title>Migo商城2.0 新增商品添加规格参数的实现  十二</title>
    <link href="https://muyinchen.github.io/2016/11/15/Migo%E5%95%86%E5%9F%8E2.0%20%20%E6%96%B0%E5%A2%9E%E5%95%86%E5%93%81%E6%B7%BB%E5%8A%A0%E8%A7%84%E6%A0%BC%E5%8F%82%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%20%20%E5%8D%81%E4%BA%8C/"/>
    <id>https://muyinchen.github.io/2016/11/15/Migo商城2.0  新增商品添加规格参数的实现  十二/</id>
    <published>2016-11-15T15:00:15.122Z</published>
    <updated>2016-11-15T15:01:28.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Migo商城2-0-新增商品添加规格参数的实现-十二"><a href="#Migo商城2-0-新增商品添加规格参数的实现-十二" class="headerlink" title="Migo商城2.0  新增商品添加规格参数的实现  十二"></a>Migo商城2.0  新增商品添加规格参数的实现  十二</h2><h3 id="页面展示规格参数模板"><a href="#页面展示规格参数模板" class="headerlink" title="页面展示规格参数模板"></a>页面展示规格参数模板</h3><p>在商品添加或者商品修改时，根据商品的分类id查询此商品分类对应的规格参数模板。根据规格参数模板，生成一个表单供用户使用</p>
<a id="more"></a>
<p><img src="http://og0sybnix.bkt.clouddn.com/xzspmb.png" alt=""></p>
<h4 id="迭代相应js代码"><a href="#迭代相应js代码" class="headerlink" title="迭代相应js代码"></a>迭代相应js代码</h4><p>为实现restful风格 修改为ajax格式的，同时和其他功能公用同一个方法，改造访问<code>URL</code> <code>url: &quot;/rest/item/param/&quot; + node.id</code>：</p>
<p>和上面对比应该发现，restful风格代码更加直观，逻辑处理更加清晰可见！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">changeItemParam : <span class="function"><span class="keyword">function</span>(<span class="params">node,formId</span>)</span>&#123;</div><div class="line">    	$.ajax(&#123;</div><div class="line">			   <span class="attr">type</span>: <span class="string">"GET"</span>,</div><div class="line">			   <span class="attr">url</span>: <span class="string">"/rest/item/param/"</span> + node.id,</div><div class="line">			   <span class="attr">statusCode</span> : &#123;</div><div class="line">				   <span class="number">200</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">					   $(<span class="string">"#"</span>+formId+<span class="string">" .params"</span>).show();</div><div class="line">						 <span class="keyword">var</span> paramData = <span class="built_in">JSON</span>.parse(data.paramData);</div><div class="line">						 <span class="keyword">var</span> html = <span class="string">"&lt;ul&gt;"</span>;</div><div class="line">						 <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> paramData)&#123;</div><div class="line">							 <span class="keyword">var</span> pd = paramData[i];</div><div class="line">							 html+=<span class="string">"&lt;li&gt;&lt;table&gt;"</span>;</div><div class="line">							 html+=<span class="string">"&lt;tr&gt;&lt;td colspan=\"2\" class=\"group\"&gt;"</span>+pd.group+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">							 </div><div class="line">							 <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> pd.params)&#123;</div><div class="line">								 <span class="keyword">var</span> ps = pd.params[j];</div><div class="line">								 html+=<span class="string">"&lt;tr&gt;&lt;td class=\"param\"&gt;&lt;span&gt;"</span>+ps+<span class="string">"&lt;/span&gt;: &lt;/td&gt;&lt;td&gt;&lt;input autocomplete=\"off\" type=\"text\"/&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">							 &#125;</div><div class="line">							 </div><div class="line">							 html+=<span class="string">"&lt;/li&gt;&lt;/table&gt;"</span>;</div><div class="line">						 &#125;</div><div class="line">						 html+= <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">						 $(<span class="string">"#"</span>+formId+<span class="string">" .params td"</span>).eq(<span class="number">1</span>).html(html);</div><div class="line">				   &#125;,</div><div class="line">				   <span class="number">404</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					   $(<span class="string">"#"</span>+formId+<span class="string">" .params"</span>).hide();</div><div class="line">					   $(<span class="string">"#"</span>+formId+<span class="string">" .params td"</span>).eq(<span class="number">1</span>).empty();</div><div class="line">				   &#125;,</div><div class="line">				   <span class="number">500</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					   alert(<span class="string">"error"</span>);</div><div class="line">				   &#125;</div><div class="line">			   &#125;</div><div class="line">			&#125;);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h4><p><img src="http://og0sybnix.bkt.clouddn.com/spmbzs.png" alt=""></p>
<h4 id="通过js代码把用户提交的数据生成json数据格式"><a href="#通过js代码把用户提交的数据生成json数据格式" class="headerlink" title="通过js代码把用户提交的数据生成json数据格式"></a>通过js代码把用户提交的数据生成json数据格式</h4><p>上章有讲，可以对比下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输入的规格参数数据保存为json</span></div><div class="line">		<span class="keyword">var</span> paramJson = [];</div><div class="line">		$(<span class="string">"#itemAddForm .params li"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,e</span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> trs = $(e).find(<span class="string">"tr"</span>);</div><div class="line">			<span class="keyword">var</span> group = trs.eq(<span class="number">0</span>).text();</div><div class="line">			<span class="keyword">var</span> ps = [];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;trs.length;i++)&#123;</div><div class="line">				<span class="keyword">var</span> tr = trs.eq(i);</div><div class="line">				ps.push(&#123;</div><div class="line">					<span class="string">"k"</span> : $.trim(tr.find(<span class="string">"td"</span>).eq(<span class="number">0</span>).find(<span class="string">"span"</span>).text()),</div><div class="line">					<span class="string">"v"</span> : $.trim(tr.find(<span class="string">"input"</span>).val())</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			paramJson.push(&#123;</div><div class="line">				<span class="string">"group"</span> : group,</div><div class="line">				<span class="string">"params"</span>: ps</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div><div class="line">		paramJson = <span class="built_in">JSON</span>.stringify(paramJson);</div><div class="line">		</div><div class="line">		$(<span class="string">"#itemAddForm [name=itemParams]"</span>).val(paramJson);</div></pre></td></tr></table></figure>
<h4 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h4><blockquote>
<p>只需要在Controller中添加一个参数，接收商品的规格参数即可。</p>
<p>Service中也需要添加一个参数，增加插入规格参数表的处理。</p>
</blockquote>
<h5 id="改造ItemService-saveItem中-方法-如下："><a href="#改造ItemService-saveItem中-方法-如下：" class="headerlink" title="改造ItemService  saveItem中 方法 如下："></a>改造<code>ItemService</code>  <code>saveItem</code>中 方法 如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//desc参考前端页面传过来的数据是序列化成字符串的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">saveItem</span><span class="params">(Item item,String desc,String itemParams)</span></span>&#123;</div><div class="line">        <span class="comment">// 1、生成商品id</span></div><div class="line">        <span class="keyword">long</span> itemId = IDUtils.genItemId();</div><div class="line">        <span class="comment">// 2、对TbItem对象补全属性。</span></div><div class="line">        item.setId(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//'商品状态，1-正常，2-下架，3-删除'</span></div><div class="line">        item.setStatus(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//保存商品数据</span></div><div class="line">        Integer save = <span class="keyword">super</span>.save(item);</div><div class="line"></div><div class="line">        ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">        itemDesc.setItemDesc(desc);</div><div class="line">        itemDesc.setItemId(item.getId());</div><div class="line"></div><div class="line">        <span class="comment">//保存商品描述数据</span></div><div class="line">        Integer save1 = <span class="keyword">this</span>.itemDescService.save(itemDesc);</div><div class="line"></div><div class="line">        <span class="comment">//保存商品规格参数数据</span></div><div class="line">        ItemParamItem itemParamItem=<span class="keyword">new</span> ItemParamItem();</div><div class="line">        itemParamItem.setItemId(item.getId());</div><div class="line">        itemParamItem.setParamData(itemParams);</div><div class="line">        Integer save2 = <span class="keyword">this</span>.itemParamItemService.save(itemParamItem);</div><div class="line">        <span class="keyword">return</span> save.intValue()==<span class="number">1</span>&amp;&amp;save1.intValue()==<span class="number">1</span>&amp;&amp;save2==<span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="改造controller"><a href="#改造controller" class="headerlink" title="改造controller"></a>改造<code>controller</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 新增商品</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">addItem</span><span class="params">(Item item, @RequestParam(<span class="string">"desc"</span>)</span> String desc,</span></div><div class="line">                                        @<span class="title">RequestParam</span><span class="params">(<span class="string">"itemParams"</span>)</span> String itemParams) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">            LOGGER.info(<span class="string">"新增商品，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * TODO 校验以后完善</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (item.getPrice() == <span class="keyword">null</span> || item.getPrice().intValue() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                LOGGER.info(<span class="string">"新增商品时用户输入的参数不合法，item = &#123;&#125;, desc = &#123;&#125;,itemParams"</span>, item, desc);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 参数有误，返回400</span></div><div class="line">            <span class="comment">//ResponseEntity&lt;Void&gt; build();</span></div><div class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Boolean saveItem = <span class="keyword">this</span>.itemService.saveItem(item, desc,itemParams);</div><div class="line">            <span class="keyword">if</span> (saveItem) &#123;</div><div class="line">                <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                    LOGGER.info(<span class="string">"新增商品成功! id = &#123;&#125;"</span>, item.getId());</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//CREATED(201, "Created"),</span></div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"新增商品失败! item = "</span> + item + <span class="string">", desc = "</span> + desc, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>运行项目，添加商品</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/addsp1.png" alt=""></p>
<p>数据库存储数据格式：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"主体"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"品牌"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"OPPO"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"型号"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"R9s"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"颜色"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"黑色"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"上市年份"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"2016年"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"网络"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"4G网络制式"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"4G：移动（TD-LTE)；4G：联通(FDD-LTE)；4G：电信(FDD-LTE)"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"3G网络制式"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"3G：移动(TD-SCDMA)；3G：联通(WCDMA)；3G：电信(CDMA2000)；2G：移动（GSM）+联通(GSM)；2G：电信(CDMA)"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"2G网络制式"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"2G：GSM 850/900/1800/1900；2G：CDMA 800；3G：TD-SCDMA 1900/2000；3G：CDMA2000；3G：WCDMA：850/900/1700/1900/2100MHz"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"group"</span>: <span class="string">"存储"</span>,</div><div class="line">        <span class="attr">"params"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"机身内存"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"4GB"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"k"</span>: <span class="string">"储存卡类型"</span>,</div><div class="line">                <span class="attr">"v"</span>: <span class="string">"支持MicroSD（TF）"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="编辑商品"><a href="#编辑商品" class="headerlink" title="编辑商品"></a>编辑商品</h3><h4 id="规格参数的回显"><a href="#规格参数的回显" class="headerlink" title="规格参数的回显"></a>规格参数的回显</h4><p>编辑商品时通过商品id查询规格参数数据</p>
<p>前台js代码(<code>item-list.jsp</code>)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载商品规格</span></div><div class="line">        			$.getJSON(<span class="string">'/rest/item/param/item/'</span>+data.id,<span class="function"><span class="keyword">function</span>(<span class="params">_data</span>)</span>&#123;</div><div class="line">        				<span class="keyword">if</span>(_data &amp;&amp; _data.status == <span class="number">200</span> &amp;&amp; _data.data &amp;&amp; _data.data.paramData)&#123;</div><div class="line">        					$(<span class="string">"#itemeEditForm .params"</span>).show();</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParams]"</span>).val(_data.data.paramData);</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParamId]"</span>).val(_data.data.id);</div><div class="line">        					</div><div class="line">        					<span class="comment">//回显商品规格</span></div><div class="line">        					 <span class="keyword">var</span> paramData = <span class="built_in">JSON</span>.parse(_data.data.paramData);</div><div class="line">        					</div><div class="line">        					 <span class="keyword">var</span> html = <span class="string">"&lt;ul&gt;"</span>;</div><div class="line">        					 <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> paramData)&#123;</div><div class="line">        						 <span class="keyword">var</span> pd = paramData[i];</div><div class="line">        						 html+=<span class="string">"&lt;li&gt;&lt;table&gt;"</span>;</div><div class="line">        						 html+=<span class="string">"&lt;tr&gt;&lt;td colspan=\"2\" class=\"group\"&gt;"</span>+pd.group+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 </div><div class="line">        						 <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> pd.params)&#123;</div><div class="line">        							 <span class="keyword">var</span> ps = pd.params[j];</div><div class="line">        							 html+=<span class="string">"&lt;tr&gt;&lt;td class=\"param\"&gt;&lt;span&gt;"</span>+ps.k+<span class="string">"&lt;/span&gt;: &lt;/td&gt;&lt;td&gt;&lt;input autocomplete=\"off\" type=\"text\" value='"</span>+ps.v+<span class="string">"'/&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 &#125;</div><div class="line">        						 </div><div class="line">        						 html+=<span class="string">"&lt;/li&gt;&lt;/table&gt;"</span>;</div><div class="line">        					 &#125;</div><div class="line">        					 html+= <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">        					 $(<span class="string">"#itemeEditForm .params td"</span>).eq(<span class="number">1</span>).html(html);</div><div class="line">        				&#125;</div><div class="line">        			&#125;);</div></pre></td></tr></table></figure>
<h5 id="后台实现："><a href="#后台实现：" class="headerlink" title="后台实现："></a>后台实现：</h5><p>访问<code>URL</code>: <code>/rest/item/param/item/{itemId}</code></p>
<p><code>controller</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemParamItem;</div><div class="line"><span class="keyword">import</span> com.migo.service.ItemParamItemService;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item/param/item"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParamItemController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LoggerFactory.getLogger(ItemParamItemController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemParamItemService itemParamItemService;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据商品Id查询商品规格参数数据</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"&#123;itemId&#125;"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;ItemParamItem&gt; <span class="title">showItemParam</span><span class="params">(@PathVariable(<span class="string">"itemId"</span>)</span> Long itemId)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</div><div class="line">                logger.info(<span class="string">"根据商品Id查询商品规格参数数据 itemId = &#123;&#125;"</span>,itemId);</div><div class="line">            &#125;</div><div class="line">            ItemParamItem example=<span class="keyword">new</span> ItemParamItem();</div><div class="line">            example.setItemId(itemId);</div><div class="line">            ItemParamItem itemParamItem = <span class="keyword">this</span>.itemParamItemService.queryOne(example);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span>==itemParamItem)&#123;</div><div class="line">                <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ResponseEntity.ok(itemParamItem);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          logger.error(<span class="string">"根据商品Id查询商品规格参数数据 失败 itemId = &#123;&#125;"</span>,itemId,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行项目：发现无法回显商品描述，还有商品参数回显404 后台日志信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">2016-11-15 21:55:59,022 [http-bio-8080-exec-10] [com.migo.controller.ItemParamItemController]-[INFO] 根据商品Id查询商品规格参数数据 itemId = 147921564322726  //开始！！！！！！！！！！！</div><div class="line">2016-11-15 21:55:59,022 [http-bio-8080-exec-10] [org.springframework.jdbc.datasource.DataSourceTransactionManager]-[DEBUG] Creating new transaction with name [com.migo.service.ItemParamItemService.queryOne]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,readOnly</div><div class="line">2016-11-15 21:55:59,026 [http-bio-8080-exec-10] [org.springframework.jdbc.datasource.DataSourceTransactionManager]-[DEBUG] Acquired Connection [com.mysql.jdbc.JDBC4Connection@5f46a96d] for JDBC transaction</div><div class="line">2016-11-15 21:55:59,026 [http-bio-8080-exec-10] [org.springframework.jdbc.datasource.DataSourceUtils]-[DEBUG] Setting JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f46a96d] read-only</div><div class="line">2016-11-15 21:55:59,026 [http-bio-8080-exec-10] [org.springframework.jdbc.datasource.DataSourceTransactionManager]-[DEBUG] Switching JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f46a96d] to manual commit</div><div class="line">2016-11-15 21:55:59,027 [http-bio-8080-exec-10] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Creating a new SqlSession</div><div class="line">2016-11-15 21:55:59,027 [http-bio-8080-exec-10] [org.mybatis.spring.SqlSessionUtils]-[DEBUG] Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3fd7b476]</div><div class="line">2016-11-15 21:55:59,027 [http-bio-8080-exec-10] [org.mybatis.spring.transaction.SpringManagedTransaction]-[DEBUG] JDBC Connection [com.mysql.jdbc.JDBC4Connection@5f46a96d] will be managed by Spring</div><div class="line">2016-11-15 21:55:59,028 [http-bio-8080-exec-10] [com.migo.mapper.ItemParamItemMapper.selectOne]-[DEBUG] ==&gt;  Preparing: SELECT created,updated,id,item_id,param_data FROM tb_item_param_item WHERE item_id = ?   //发送sql语句！！！！！！</div><div class="line">2016-11-15 21:55:59,028 [http-bio-8080-exec-10] [com.migo.mapper.ItemParamItemMapper.selectOne]-[DEBUG] ==&gt; Parameters: 147921564322726(Long)  //传递参数 ！！！！！</div><div class="line">2016-11-15 21:55:59,028 [http-bio-8080-exec-10] [com.migo.mapper.ItemParamItemMapper.selectOne]-[DEBUG] &lt;==      Total: 0 //查询结果！！！！！！！</div></pre></td></tr></table></figure>
<p>查后台数据库，发现新增加商品id正常，但是desc 和商品规格参数所对应的商品id为0，遂修改新增商品service代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//desc参考前端页面传过来的数据是序列化成字符串的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">saveItem</span><span class="params">(Item item,String desc,String itemParams)</span></span>&#123;</div><div class="line">        <span class="comment">// 1、生成商品id</span></div><div class="line">        <span class="keyword">long</span> itemId = IDUtils.genItemId();</div><div class="line">        <span class="comment">// 2、对TbItem对象补全属性。</span></div><div class="line">        item.setId(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//'商品状态，1-正常，2-下架，3-删除'</span></div><div class="line">        item.setStatus(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//保存商品数据</span></div><div class="line">        Integer save = <span class="keyword">super</span>.save(item);</div><div class="line"></div><div class="line">        ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">        itemDesc.setItemDesc(desc);</div><div class="line">        itemDesc.setItemId(itemId);</div><div class="line"></div><div class="line">        <span class="comment">//保存商品描述数据</span></div><div class="line">        Integer save1 = <span class="keyword">this</span>.itemDescService.save(itemDesc);</div><div class="line"></div><div class="line">        <span class="comment">//保存商品规格参数数据</span></div><div class="line">        ItemParamItem itemParamItem=<span class="keyword">new</span> ItemParamItem();</div><div class="line">        itemParamItem.setItemId(itemId);</div><div class="line">        itemParamItem.setParamData(itemParams);</div><div class="line">        Integer save2 = <span class="keyword">this</span>.itemParamItemService.save(itemParamItem);</div><div class="line">        <span class="keyword">return</span> save.intValue()==<span class="number">1</span>&amp;&amp;save1.intValue()==<span class="number">1</span>&amp;&amp;save2==<span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接着查询，返回数据显示正常，但是页面显示不正确：</p>
<p>查看前端js代码发现，为迭代完全，真坑，遂修改：</p>
<p>因为restful风格之后，完全可以直接拿到参数了，无须中间多那一层，以前是做了一层封装，请参考 <code>migo商城第一版</code> 源码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载商品规格</span></div><div class="line">        			$.getJSON(<span class="string">'/rest/item/param/item/'</span>+data.id,<span class="function"><span class="keyword">function</span>(<span class="params">_data</span>)</span>&#123;</div><div class="line">        				</div><div class="line">        					$(<span class="string">"#itemeEditForm .params"</span>).show();</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParams]"</span>).val(_data.paramData);</div><div class="line">        					$(<span class="string">"#itemeEditForm [name=itemParamId]"</span>).val(_data.id);</div><div class="line">        					</div><div class="line">        					<span class="comment">//回显商品规格</span></div><div class="line">        					 <span class="keyword">var</span> paramData = <span class="built_in">JSON</span>.parse(_data.paramData);</div><div class="line">        					</div><div class="line">        					 <span class="keyword">var</span> html = <span class="string">"&lt;ul&gt;"</span>;</div><div class="line">        					 <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> paramData)&#123;</div><div class="line">        						 <span class="keyword">var</span> pd = paramData[i];</div><div class="line">        						 html+=<span class="string">"&lt;li&gt;&lt;table&gt;"</span>;</div><div class="line">        						 html+=<span class="string">"&lt;tr&gt;&lt;td colspan=\"2\" class=\"group\"&gt;"</span>+pd.group+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 </div><div class="line">        						 <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> pd.params)&#123;</div><div class="line">        							 <span class="keyword">var</span> ps = pd.params[j];</div><div class="line">        							 html+=<span class="string">"&lt;tr&gt;&lt;td class=\"param\"&gt;&lt;span&gt;"</span>+ps.k+<span class="string">"&lt;/span&gt;: &lt;/td&gt;&lt;td&gt;&lt;input autocomplete=\"off\" type=\"text\" value='"</span>+ps.v+<span class="string">"'/&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">        						 &#125;</div><div class="line">        						 </div><div class="line">        						 html+=<span class="string">"&lt;/li&gt;&lt;/table&gt;"</span>;</div><div class="line">        					 &#125;</div><div class="line">        					 html+= <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">        					 $(<span class="string">"#itemeEditForm .params td"</span>).eq(<span class="number">1</span>).html(html);</div><div class="line">        				</div><div class="line">        			&#125;);</div><div class="line">        			</div><div class="line">        			migo.init(&#123;</div><div class="line">        				<span class="string">"pics"</span> : data.image,</div><div class="line">        				<span class="string">"cid"</span> : data.cid,</div><div class="line">        				<span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">        					migo.changeItemParam(node, <span class="string">"itemeEditForm"</span>);</div><div class="line">        				&#125;</div><div class="line">        			&#125;);</div><div class="line">        		&#125;</div><div class="line">        	&#125;).window(<span class="string">"open"</span>);</div></pre></td></tr></table></figure>
<p>最终结果展示：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/hxzs.png" alt=""></p>
<h4 id="最后，更新规格参数数据"><a href="#最后，更新规格参数数据" class="headerlink" title="最后，更新规格参数数据"></a>最后，更新规格参数数据</h4><p>后台实现：</p>
<p>  <code>ItemParamItemService</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migo.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.migo.mapper.ItemParamItemMapper;</div><div class="line"><span class="keyword">import</span> com.migo.pojo.ItemParamItem;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Author  知秋</div><div class="line"> * Created by kauw on 2016/11/14.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemParamItemService</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">ItemParamItem</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ItemParamItemMapper itemParamItemMapper;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新商品规格参数数据</div><div class="line">     * <span class="doctag">@param</span> itemId</div><div class="line">     * <span class="doctag">@param</span> itemParams</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">updateItemParamItem</span><span class="params">(Long itemId, String itemParams)</span> </span>&#123;</div><div class="line">        ItemParamItem itemParamItem=<span class="keyword">new</span> ItemParamItem();</div><div class="line">        itemParamItem.setParamData(itemParams);</div><div class="line">        itemParamItem.setUpdated(<span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">        <span class="comment">//更新</span></div><div class="line">        Example example=<span class="keyword">new</span> Example(ItemParamItem.class);</div><div class="line">        example.createCriteria().andEqualTo(<span class="string">"itemId"</span>,itemId);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.itemParamItemMapper.updateByExampleSelective(itemParamItem,example);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ItemService</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 商品修改</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> Boolean <span class="title">updateItem</span><span class="params">(Item item,String desc,String itemParams)</span></span>&#123;</div><div class="line">       <span class="comment">//强制设置不能更新的字段为空,防止恶意修改</span></div><div class="line">       item.setStatus(<span class="keyword">null</span>);</div><div class="line">       item.setCreated(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">       Integer change1 = <span class="keyword">super</span>.updateSelective(item);</div><div class="line"></div><div class="line">       <span class="comment">//更新商品描述</span></div><div class="line">       ItemDesc itemDesc=<span class="keyword">new</span> ItemDesc();</div><div class="line">       itemDesc.setItemId(item.getId());</div><div class="line">       itemDesc.setItemDesc(desc);</div><div class="line">       Integer change2 = <span class="keyword">this</span>.itemDescService.updateSelective(itemDesc);</div><div class="line"></div><div class="line">       Integer change3 = <span class="keyword">this</span>.itemParamItemService.updateItemParamItem(item.getId(), itemParams);</div><div class="line"></div><div class="line">       <span class="keyword">return</span> change1.intValue()==<span class="number">1</span>&amp;&amp;change2.intValue()==<span class="number">1</span>&amp;&amp;change3.intValue()==<span class="number">1</span>;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>ItemController</code> 修改实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 更新商品数据</div><div class="line">    */</div><div class="line">   <span class="meta">@RequestMapping</span>(method = RequestMethod.PUT)</div><div class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">updateItem</span><span class="params">(Item item, @RequestParam(<span class="string">"desc"</span>)</span> String desc,</span></div><div class="line">                                          @<span class="title">RequestParam</span><span class="params">(<span class="string">"itemParams"</span>)</span> String itemParams)&#123;</div><div class="line">       <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">           LOGGER.info(<span class="string">"修改商品，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * TODO 校验以后完善</div><div class="line">        */</div><div class="line">       <span class="keyword">if</span> (item.getPrice() == <span class="keyword">null</span> || item.getPrice().intValue() == <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">               LOGGER.info(<span class="string">"修改商品时用户输入的参数不合法，item = &#123;&#125;, desc = &#123;&#125;"</span>, item, desc);</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 参数有误，返回400</span></div><div class="line">           <span class="comment">//ResponseEntity&lt;Void&gt; build();</span></div><div class="line">           <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Boolean updateItem = <span class="keyword">this</span>.itemService.updateItem(item, desc,itemParams);</div><div class="line">           <span class="keyword">if</span> (updateItem) &#123;</div><div class="line">               <span class="keyword">if</span> (LOGGER.isInfoEnabled()) &#123;</div><div class="line">                   LOGGER.info(<span class="string">"修改商品成功! id = &#123;&#125;"</span>, item.getId());</div><div class="line">               &#125;</div><div class="line">               <span class="comment">//CREATED(201, "Created"),</span></div><div class="line">               <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           LOGGER.error(<span class="string">"修改商品失败! item = "</span> + item + <span class="string">", desc = "</span> + desc, e);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>启动项目测试，后台日志分析：</p>
<p><img src="http://og0sybnix.bkt.clouddn.com/zzxgsp.png" alt=""></p>
<p>通过日志，能看到很多东西，可见添加日志代码的重要性和查看日志的重要性，很多bug都是通过日志发现解决的</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Migo商城2-0-新增商品添加规格参数的实现-十二&quot;&gt;&lt;a href=&quot;#Migo商城2-0-新增商品添加规格参数的实现-十二&quot; class=&quot;headerlink&quot; title=&quot;Migo商城2.0  新增商品添加规格参数的实现  十二&quot;&gt;&lt;/a&gt;Migo商城2.0  新增商品添加规格参数的实现  十二&lt;/h2&gt;&lt;h3 id=&quot;页面展示规格参数模板&quot;&gt;&lt;a href=&quot;#页面展示规格参数模板&quot; class=&quot;headerlink&quot; title=&quot;页面展示规格参数模板&quot;&gt;&lt;/a&gt;页面展示规格参数模板&lt;/h3&gt;&lt;p&gt;在商品添加或者商品修改时，根据商品的分类id查询此商品分类对应的规格参数模板。根据规格参数模板，生成一个表单供用户使用&lt;/p&gt;
    
    </summary>
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/categories/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
    
      <category term="Migo商城2.0" scheme="https://muyinchen.github.io/tags/Migo%E5%95%86%E5%9F%8E2-0/"/>
    
  </entry>
  
</feed>
